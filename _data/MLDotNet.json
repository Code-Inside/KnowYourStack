{"Data":{"GitHub":{"Issues":[{"Id":"2756683010","IsPullRequest":false,"CreatedAt":"2024-12-23T20:34:03","Actor":"MithrilMan","Number":"7353","RawContent":null,"Title":"Whisper Tokenizer support","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\nWhisper tokenizer support needed\n\n**Describe the solution you'd like**\nWould be nice to have support for the Whisper tokenizer.\n\n**Describe alternatives you've considered**\nI'm new to tokenizers so I'm not sure if what I'm doing right now is correct but I'm trying to use a BpeTokenizer passing vocab and merges files and the special tokens (not straightforward because for example I'm reading this file https://huggingface.co/onnx-community/whisper-large-v3-turbo/blob/main/special_tokens_map.json and I need to read vocab file too to get the max id to know where to start from to map special token to id number)\n\nThe linked repository has even a tokenizer.json that I suppose contains already everything without the need to pass vocab and merges, but I don't see a way to use it out of the box (I haven't find a constructor that accepts a tokenizer.json file)\n\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7353","RelatedDescription":"Open issue \"Whisper Tokenizer support\" (#7353)"},{"Id":"2755225011","IsPullRequest":true,"CreatedAt":"2024-12-23T05:01:49","Actor":"dotnet-maestro[bot]","Number":"7352","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\n\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\n## From https://github.com/dotnet/arcade\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\n- **Build**: 20241226.1\n- **Date Produced**: December 27, 2024 1:43:05 AM UTC\n- **Commit**: ae8d2a08f1021624ae37cdd5b65f6c05e58a051b\n- **Branch**: refs/heads/main\n\n[DependencyUpdate]: <> (Begin)\n\n- **Updates**:\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\n\n[2]: https://github.com/dotnet/arcade/compare/255d5e0c89...ae8d2a08f1\n\n[DependencyUpdate]: <> (End)\n\n\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\n\n\n\n\n\n","Url":"https://github.com/dotnet/machinelearning/pull/7352","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#7352)"},{"Id":"2754903044","IsPullRequest":true,"CreatedAt":"2024-12-22T23:41:45","Actor":"dotnet-maestro[bot]","Number":"7351","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\r\n- **Build**: 20241226.1\r\n- **Date Produced**: December 27, 2024 1:43:05 AM UTC\r\n- **Commit**: ae8d2a08f1021624ae37cdd5b65f6c05e58a051b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24613.2 to 10.0.0-beta.24626.1][2]\r\n\r\n[2]: https://github.com/dotnet/arcade/compare/255d5e0c89...ae8d2a08f1\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7351","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#7351)"},{"Id":"2754555542","IsPullRequest":false,"CreatedAt":"2024-12-22T08:47:21","Actor":"piercarlo62","Number":"7350","RawContent":null,"Title":"ML.NET NER - Mismatched state_dict sizes: expected 60, but found 126 entries.","State":"open","Body":"Hello,\nI'm testing the NER capabilities of ML.NET and on training I'm getting following error:\nError: Mismatched state_dict sizes: expected 60, but found 126 entries.\n\n---\n**System Information:**\n - OS & Version: Windows 10\n - ML.NET Version: ML.NET v4.0.0\n - .NET Version: .NET 8.0\n\n**Description of the bug**\non `var transformer = estimator.Fit(dataView);` -> **Mismatched state_dict sizes: expected 60, but found 126 entries**\n\n```\nMismatched state_dict sizes: expected 60, but found 126 entries.\nin TorchSharp.torch.nn.Module.load(BinaryReader reader, Boolean strict, IList`1 skip, Dictionary`2 loadedParameters)\n   in TorchSharp.torch.nn.Module.load(String location, Boolean strict, IList`1 skip, Dictionary`2 loadedParameters)\n   in Microsoft.ML.TorchSharp.NasBert.NasBertTrainer`2.NasBertTrainerBase.CreateModule(IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.TorchSharpBaseTrainer`2.TrainerBase..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input, String modelUrl)\n   in Microsoft.ML.TorchSharp.NasBert.NasBertTrainer`2.NasBertTrainerBase..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input, String modelUrl)\n   in Microsoft.ML.TorchSharp.NasBert.NerTrainer.Trainer..ctor(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.NasBert.NerTrainer.CreateTrainer(TorchSharpBaseTrainer`2 parent, IChannel ch, IDataView input)\n   in Microsoft.ML.TorchSharp.TorchSharpBaseTrainer`2.Fit(IDataView input)\n   in Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\n   in Program.Main(String[] args) in C:\\Users\\pierc\\source\\repos\\ML_NER_TEST\\Program.cs: riga 64\n```\n**Sample Projects**\n\n```\nusing Microsoft.ML;\nusing Microsoft.ML.Data;\nusing Microsoft.ML.TorchSharp;\n\nnamespace ML_NER_TEST\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            try\n            {\n                var context = new MLContext()\n                {\n                    FallbackToCpu = true,\n                    GpuDeviceId = 0\n                };\n\n                var labels = context.Data.LoadFromEnumerable(\n                    [\n                            new Label { Key = \"PERSON\" },       // People, including fictional.\n                            new Label { Key = \"NORP\" },         // Nationalities or religious or political groups.\n                            new Label { Key = \"FAC\" },          // Buildings, airports, highways, bridges, etc.\n                            new Label { Key = \"ORG\" },          // Companies, agencies, institutions, etc.\n                            new Label { Key = \"GPE\" },          // Countries, cities, states.\n                            new Label { Key = \"LOC\" },          // Non-GPE locations, mountain ranges, bodies of water.\n                            new Label { Key = \"PRODUCT\" },      // Objects, vehicles, foods, etc. (Not services.)\n                            new Label { Key = \"EVENT\" },        // Named hurricanes, battles, wars, sports events, etc.\n                            new Label { Key = \"WORK_OF_ART\" },  // Titles of books, songs, etc.\n                            new Label { Key = \"LAW\" },          // Named documents made into laws.\n                            new Label { Key = \"LANGUAGE\" },     // Any named language.\n                            new Label { Key = \"DATE\" },         // Absolute or relative dates or periods.\n                            new Label { Key = \"TIME\" },         // Times smaller than a day.\n                            new Label { Key = \"PERCENT\" },      // Percentage, including \"%\".\n                            new Label { Key = \"MONEY\" },        // Monetary values, including unit.\n                            new Label { Key = \"QUANTITY\" },     // Measurements, as of weight or distance.\n                            new Label { Key = \"ORDINAL\" },      // \"first\", \"second\", etc.\n                            new Label { Key = \"CARDINAL\" },     // Numerals that do not fall under another type.\n                            new Label { Key = \"OBJECT\" },       // An Object, Entity might be a Spoon, or a Soccer Ball. Needs Sub Categories.\n                ]);\n\n                var dataView = context.Data.LoadFromEnumerable(\n                    new List<InputTrainingData>([\n                        new InputTrainingData()\n                    {   \n                        // Testing longer than 512 words.\n                        Sentence = \"Alice and Bob live in the USA\",\n                        Label = [\"PERSON\", \"0\", \"PERSON\", \"0\", \"0\", \"0\", \"COUNTRY\"]\n                    },\n                    new InputTrainingData()\n                     {\n                        Sentence = \"Frank and Alice traveled along the California coast.\",\n                        Label = [\"PERSON\", \"0\", \"PERSON\", \"0\", \"0\", \"0\", \"COUNTRY\", \"0\"]\n                     },\n                    ]));\n\n                var chain = new EstimatorChain<ITransformer>();\n\n                var estimator = chain.Append(context.Transforms.Conversion.MapValueToKey(\"Label\", keyData: labels))\n                   .Append(context.MulticlassClassification.Trainers.NamedEntityRecognition(outputColumnName: \"Predictions\"))\n                   .Append(context.Transforms.Conversion.MapKeyToValue(\"Predictions\"));\n\n                Console.WriteLine(\"Training the model...\");\n\n                var transformer = estimator.Fit(dataView);\n\n                Console.WriteLine(\"Model trained!\");\n\n                var transformerSchema = transformer.GetOutputSchema(dataView.Schema);\n\n                string sentence = \"Alice and Bob live in the USA\";\n                var engine = context.Model.CreatePredictionEngine<Input, Output>(transformer);\n\n                Console.WriteLine(\"Predicting...\");\n\n                Output predictions = engine.Predict(new Input { Sentence = sentence });\n\n                Console.WriteLine($\"Predictions: {sentence} - {string.Join(\", \", predictions.Predictions)}\");\n\n                transformer.Dispose();\n                Console.WriteLine(\"Success!\");\n                Console.ReadLine();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error: {ex.Message}\");\n                Console.ReadLine();\n            }\n        }\n        private class Input\n        {\n            public string Sentence;\n            public string[] Label;\n        }\n        private class Output\n        {\n            public string[] Predictions;\n        }\n        public class Label\n        {\n            public string Key { get; set; }\n        }\n        private class InputTrainingData\n        {\n            public string Sentence;\n            public string[] Label;\n        }\n    }\n}\n```\n\n**Additional context**\n\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>disable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"libtorch-cpu-win-x64\" Version=\"2.5.1\" />\n    <PackageReference Include=\"Microsoft.ML\" Version=\"4.0.0\" />\n    <PackageReference Include=\"Microsoft.ML.Tokenizers\" Version=\"1.0.0\" />\n    <PackageReference Include=\"Microsoft.ML.TorchSharp\" Version=\"0.22.0\" />\n    <PackageReference Include=\"TorchSharp\" Version=\"0.105.0\" />\n  </ItemGroup>\n\n</Project>\n```","Url":"https://github.com/dotnet/machinelearning/issues/7350","RelatedDescription":"Open issue \"ML.NET NER - Mismatched state_dict sizes: expected 60, but found 126 entries.\" (#7350)"},{"Id":"2753810988","IsPullRequest":true,"CreatedAt":"2024-12-21T06:54:03","Actor":"Youssef1313","Number":"7349","RawContent":null,"Title":"Update MSTest to latest","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7349","RelatedDescription":"Open PR \"Update MSTest to latest\" (#7349)"},{"Id":"2746656489","IsPullRequest":false,"CreatedAt":"2024-12-20T02:42:25","Actor":"chengqun","Number":"7346","RawContent":null,"Title":"iphone (ios) can use ml.net ?","State":"closed","Body":"net9.0-ios 失败，出现 1 错误 (0.0)\n    /Users/../.nuget/packages/microsoft.ml/4.0.0/build/netstandard2.0/Microsoft.ML.targets(16,5): error : Microsoft.ML currently supports 'x64' and 'x86' processor architectures. Please ensure your application is targeting 'x64' or 'x86'.\n\nmaui use \"Microsoft.ML\" load \"model.zip\" ERROR\n\nos : iphone 14 pro max ","Url":"https://github.com/dotnet/machinelearning/issues/7346","RelatedDescription":"Closed issue \"iphone (ios) can use ml.net ?\" (#7346)"},{"Id":"2751070646","IsPullRequest":false,"CreatedAt":"2024-12-19T17:48:19","Actor":"Eddie-Hartman","Number":"7348","RawContent":null,"Title":"OnnxTransformer GetNamedOnnxValueUnknownSize Index Error","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 11\n - ML.NET Version: 3.0.1 (Also applicable for 4.0)\n - .NET Version: .NET 8.0\n\n**Describe the bug**\n`Splitter/consolidator worker encountered exception while consuming source data` error, but seems like the underlying ML.NET library code is the cause of the issue.\nIn OnnxTransform.cs, there is a _zeroIndex variable that looks for the tensorShape IndexOf(0). When not found, that will return -1, but then it tries to use that value in assignment for GetNamedOnnxValueUnknownSize() method, thus causing an index out of bounds error.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. See below about getting access to repo and code.\n2. Unfortunately, other than that I'm not going to be really helpful other than pointing out where in the library it's occurring. The size is looking for a 0 in the shape, but there isn't one. I'm also a bit confused by the \"UnknownSize\" part in general since in my example I know the size of each input and output at each step.\n\n**Expected behavior**\nError not to be thrown.\n\n**Screenshots, Code, Sample Projects**\nI can give temporary access to git repo to a Microsoft employee or contributor who'd look into this, but not making it public. The repo shows a model that runs successfully without using ML.NET pipelines (straight ONNX runtime) and has a separate method where this issue is occurring where I was trying to set up the ML.NET pipeline to work.\n\nHere's a really trimmed down version where I'm just trying to get an EfficientNet model running. Last line is what throws the error.\n\n```Csharp\n        var pipeline = mlContext.Transforms.ResizeImages(\"resizedImage\", classificationModelImageWidth, classificationModelImageHeight, nameof(ImageFile.Input), ImageResizingEstimator.ResizingKind.Fill)\n            .Append(mlContext.Transforms.ExtractPixels(\"tensored_image\", \"resizedImage\", ImagePixelExtractingEstimator.ColorBits.Rgb,\n                ImagePixelExtractingEstimator.ColorsOrder.ARGB, true, scaleImage: 1f / 255f))\n            .Append(mlContext.Transforms.CustomMapping<ImagePixelInput, ImagePixelOutput>((input, output) =>\n            {\n                //Normalize the values.\n                //Since we are in CHW format, we will go through all R, G, then B pixels in that order.\n                //So for each third us the appropriate value.\n                output.NormalizedPixels = new float[input.ImagePixels.Length];\n                float[] means = [0.485f, 0.456f, 0.406f];\n                float[] stds = [0.229f, 0.224f, 0.225f];\n                int colorLength = input.ImagePixels.Length / 3; //The number of values for a single color\n                for (int c = 0; c < 3; c++)\n                {\n                    for (int i = 0; i < colorLength; i++)\n                    {\n                        output.NormalizedPixels[c * colorLength + i] = (input.ImagePixels[c * colorLength + i] - means[c]) / stds[c];\n                    }\n                }\n\n                Console.WriteLine($\"First 10 normalized pixels: {string.Join(\", \", output.NormalizedPixels.Take(10))}\");\n            },\n            \"NormalizeImage\"))\n            .Append(mlContext.Transforms.ApplyOnnxModel(\"output\", \"input\", classificationFilePath));\n\n        var model = pipeline.Fit(data);\n\n        // Read image into stream.\n        using MemoryStream memoryStream = new(imageBytes);\n\n        IEnumerable<ImageFile> images = [new(memoryStream)];\n        IDataView imageDataView = mlContext.Data.LoadFromEnumerable(images);\n        IDataView scoredData = model.Transform(imageDataView);\n\n        var schema = scoredData.Schema;\n        foreach (var column in schema)\n        {\n            Console.WriteLine($\"{column.Name}: {column.Type}\");\n        }\n\n        var test = scoredData.GetColumn<float[]>(\"input\").First();\n\n        // EDDIE current issue seems to be that _zeroIndex in get GetNamedOnnxValueUnknownSize in OnnxTransformer.cs\n\n        var test2 = scoredData.GetColumn<float[]>(\"output\").ToArray();\n```\n\n**Additional context**\nI stumbled upon this after getting one ONNX model working fine with a transformer pipeline, but when I tried to do something similar with a different ONNX model some of the same code throws errors. I then set everything up to run as an InferenceSession instead and that works fine. So revisiting and working backwards to make sure everything was working the same in the transformers is what lead me to dig deeper and currently believe this is a bug.\n\nTo be clear, I'm new to this library and not super knowledgeable about this subject overall, so take everything I'm saying with a grain of salt.","Url":"https://github.com/dotnet/machinelearning/issues/7348","RelatedDescription":"Open issue \"OnnxTransformer GetNamedOnnxValueUnknownSize Index Error\" (#7348)"},{"Id":"2749695630","IsPullRequest":false,"CreatedAt":"2024-12-19T09:12:09","Actor":"EachShow","Number":"7347","RawContent":null,"Title":"Why is the prediction so much slower after upgrading to version ML Fast Tree 4.0?","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 11 \n - ML.NET Version: V4.0\n - .NET Version: 9.0.101\n\n**Describe the bug**\nthe prediction is so much slower than ML V3\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. run the program in V3\n2. run the same program in V4\n3. the prediction speed is so much slower\n\n**Expected behavior**\nthe prediction speed is no significant change than V3","Url":"https://github.com/dotnet/machinelearning/issues/7347","RelatedDescription":"Open issue \"Why is the prediction so much slower after upgrading to version ML Fast Tree 4.0?\" (#7347)"},{"Id":"2745265578","IsPullRequest":false,"CreatedAt":"2024-12-17T15:39:59","Actor":"lolsoftware","Number":"7345","RawContent":null,"Title":"PFI (Permutation Feature Importance) takes forever on some regression models created using AutoML","State":"open","Body":"**System Information**\n - Windows 11\n - ML.NET v4.0.0\n - .NET 8.0\n\n**Describe the bug**\nCalculating PFI seems to hang (take forever) for some regression models created using AutoML. For other models (created against the same learning data) calculating PFI takes just a couple of seconds.\n\n**To Reproduce**\nRun the attached program.\n\n**Expected behavior**\nI would expect PFI to complete in a timely fashion. Or at least provide a mechanism to monitor the progress of PFI calculation with the ability to cancel it.\n\n**Screenshots, Code, Sample Projects**\nThe attached program contains two regression models created using AutoML, and a set of data used to create the two models. The program first calculates PFI against the first model which takes just a couple of seconds. Then the program tries to calculate PFI against the second model which takes forever.\n[test project.zip](https://github.com/user-attachments/files/18167832/test.project.zip)\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7345","RelatedDescription":"Open issue \"PFI (Permutation Feature Importance) takes forever on some regression models created using AutoML\" (#7345)"},{"Id":"2743502252","IsPullRequest":true,"CreatedAt":"2024-12-17T07:48:28","Actor":"ericstj","Number":"7342","RawContent":null,"Title":"Update MicrosoftExtensionsDependencyModelVersion","State":"closed","Body":"backport https://github.com/dotnet/machinelearning/pull/7338","Url":"https://github.com/dotnet/machinelearning/pull/7342","RelatedDescription":"Closed or merged PR \"Update MicrosoftExtensionsDependencyModelVersion\" (#7342)"},{"Id":"2743672834","IsPullRequest":false,"CreatedAt":"2024-12-17T00:28:58","Actor":"ericstj","Number":"7344","RawContent":null,"Title":"Run helix tests still fails the build when all issues are known","State":"open","Body":"https://github.com/dotnet/machinelearning/pull/7266/checks?check_run_id=34504009688\n\n![Image](https://github.com/user-attachments/assets/4633958f-7df1-4c50-9fe8-3838fa56f4bf)\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=896796&view=logs&j=5de11fe4-b78c-5e85-6c71-18cb0c3c520b&t=1bd76744-ce54-5897-6864-351eb3621929&l=31\n\n```\n/Users/runner/.nuget/packages/microsoft.dotnet.helix.sdk/10.0.0-beta.24613.2/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(44,5): error : Test Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/e87e490f-2d11-4e22-b317-ddb93ea4a25a/workitems/Microsoft.ML.Tests/console [/Users/runner/work/1/s/eng/helix.proj]\n\nBuild FAILED.\n\n/Users/runner/.nuget/packages/microsoft.dotnet.helix.sdk/10.0.0-beta.24613.2/tools/azure-pipelines/AzurePipelines.MultiQueue.targets(44,5): error : Test Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/e87e490f-2d11-4e22-b317-ddb93ea4a25a/workitems/Microsoft.ML.Tests/console [/Users/runner/work/1/s/eng/helix.proj]\n    0 Warning(s)\n    1 Error(s)\n```\n\nI'm not sure why this is happening, we might need to ask the infra team what we're supposed to do in order to get BuildAnalysis to turn itself green here.","Url":"https://github.com/dotnet/machinelearning/issues/7344","RelatedDescription":"Open issue \"Run helix tests still fails the build when all issues are known\" (#7344)"},{"Id":"2743599249","IsPullRequest":false,"CreatedAt":"2024-12-16T23:26:00","Actor":"ericstj","Number":"7343","RawContent":null,"Title":"SdcaLogisticRegression failing with LogLoss value above 0.5 on Apple M1","State":"open","Body":"## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=894906\nBuild error leg or test failing: Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression\nPull request: https://github.com/dotnet/machinelearning/pull/7319\n<!-- Error message template  -->\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\n\n```json\n{\n  \"ErrorMessage\": [ \"Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression\", \"Assert.InRange() Failure: Value not in range\",  \"Range:  (0 - 0.5)\" ],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n```\nException Message\nAssert.InRange() Failure: Value not in range\nRange:  (0 - 0.5)\nActual: 0.52012587333147553\nCallStack\n   at Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression() in /Users/runner/work/1/s/test/Microsoft.ML.Tests/TrainerEstimators/SdcaTests.cs:line 86\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n\nSome sample logs from recent builds:\nhttps://helixr1107v0xdeko0k025g8.blob.core.windows.net/dotnet-machinelearning-refs-pull-7319-merge-3b48a7c42a8e4e058e/Microsoft.ML.Tests/1/console.d0d11103.log?helixlogtype=result\nhttps://helixr1107v0xdeko0k025g8.blob.core.windows.net/dotnet-machinelearning-refs-pull-7266-merge-e87e490f2d114e22b3/Microsoft.ML.Tests/1/console.41404a72.log\n\n\nI wonder if we have a math problem here worth investigating or if we should just increase the threshold?\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=894906\r\n**Error message validated:** `[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression Assert.InRange() Failure: Value not in range Range:  (0 - 0.5)`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 12/16/2024 11:26:11 PM UTC\r\n<!-- Known issue validation end -->\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[901744](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901744)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901744&view=ms.vss-test-web.build-test-results-tab&runId=23673314&resultId=101737)|dotnet/machinelearning#7351|\r\n|[901263](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901263)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901263&view=ms.vss-test-web.build-test-results-tab&runId=23655278&resultId=101737)|dotnet/machinelearning#7349|\r\n|[898107](https://dev.azure.com/dnceng-public/public/_build/results?buildId=898107)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=898107&view=ms.vss-test-web.build-test-results-tab&runId=23557028&resultId=101737)|dotnet/machinelearning#7340|\r\n|[896796](https://dev.azure.com/dnceng-public/public/_build/results?buildId=896796)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=896796&view=ms.vss-test-web.build-test-results-tab&runId=23521416&resultId=101737)|dotnet/machinelearning#7266|\r\n|[894906](https://dev.azure.com/dnceng-public/public/_build/results?buildId=894906)|dotnet/machinelearning|[Microsoft.ML.Tests.TrainerEstimators.TrainerEstimators.SdcaLogisticRegression](https://dev.azure.com/dnceng-public/public/_build/results?buildId=894906&view=ms.vss-test-web.build-test-results-tab&runId=23464884&resultId=101737)|dotnet/machinelearning#7319|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|5|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/machinelearning/issues/7343","RelatedDescription":"Open issue \"SdcaLogisticRegression failing with LogLoss value above 0.5 on Apple M1\" (#7343)"},{"Id":"2743483632","IsPullRequest":false,"CreatedAt":"2024-12-16T22:00:39","Actor":"ericstj","Number":"7341","RawContent":null,"Title":"LibMF submodule","State":"open","Body":"Does it make sense to keep this as a submodule?  It looks like it receives very few changes.\n\nWe could just fork it and keep a local copy, like we do for dependencies in dotnet/runtime.  That allows us to more easily update.\n\n\n","Url":"https://github.com/dotnet/machinelearning/issues/7341","RelatedDescription":"Open issue \"LibMF submodule\" (#7341)"},{"Id":"2743460059","IsPullRequest":true,"CreatedAt":"2024-12-16T21:45:27","Actor":"ericstj","Number":"7340","RawContent":null,"Title":"Enable APICompat for non-stable projects","State":"open","Body":"Should help folks avoid problems like https://github.com/dotnet/machinelearning/pull/7331\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7340","RelatedDescription":"Open PR \"Enable APICompat for non-stable projects\" (#7340)"},{"Id":"2724429789","IsPullRequest":true,"CreatedAt":"2024-12-16T21:43:49","Actor":"asmirnov82","Number":"7331","RawContent":null,"Title":"Fix broken inheritance from DataFrameColumn class (#7324)","State":"closed","Body":"Backport #7324 to release 4.0.1\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7331","RelatedDescription":"Closed or merged PR \"Fix broken inheritance from DataFrameColumn class (#7324)\" (#7331)"},{"Id":"2743179003","IsPullRequest":true,"CreatedAt":"2024-12-16T21:40:44","Actor":"ericstj","Number":"7338","RawContent":null,"Title":"Update DependencyModel","State":"closed","Body":"This was transitively bringing in an older System.Text.Json in the test projects\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7338","RelatedDescription":"Closed or merged PR \"Update DependencyModel\" (#7338)"},{"Id":"2736766872","IsPullRequest":true,"CreatedAt":"2024-12-16T21:17:24","Actor":"gewarren","Number":"7334","RawContent":null,"Title":"Fix up docs for MLContext","State":"closed","Body":"Cleans up the public-facing API docs for MLContext to conform to https://github.com/dotnet/dotnet-api-docs/wiki.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7334","RelatedDescription":"Closed or merged PR \"Fix up docs for MLContext\" (#7334)"},{"Id":"2743412824","IsPullRequest":false,"CreatedAt":"2024-12-16T21:15:04","Actor":"ericstj","Number":"7339","RawContent":null,"Title":"Tests using Onnx fail with `LoadOrtModelWithLoader ORT model verification failed`","State":"open","Body":"## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=895122\nBuild error leg or test failing: Microsoft.ML.Tests.DnnImageFeaturizerTests.TestDnnImageFeaturizer\nPull request: https://github.com/dotnet/machinelearning/pull/7334\n<!-- Error message template  -->\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n<!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. -->\n\n```json\n{\n  \"ErrorMessage\": \"LoadOrtModelWithLoader ORT model verification failed.\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nSample stack:\n```\nSystem.InvalidOperationException : Error during class instantiation\n---- System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\n-------- System.InvalidOperationException : Error during class instantiation\n------------ System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.\n---------------- System.InvalidOperationException : Error initializing model :Microsoft.ML.OnnxRuntime.OnnxRuntimeException: [ErrorCode:Fail] inference_session.cc:1357 onnxruntime::InferenceSession::LoadOrtModelWithLoader ORT model verification failed.\n   at Microsoft.ML.OnnxRuntime.InferenceSession.Init(String modelPath, SessionOptions options, PrePackedWeightsContainer prepackedWeightsContainer)\n   at Microsoft.ML.OnnxRuntime.InferenceSession..ctor(String modelPath, SessionOptions options)\n   at Microsoft.ML.Transforms.Onnx.OnnxModel..ctor(IHostEnvironment env, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, Boolean ownModelFile, IDictionary`2 shapeDictionary, Int32 recursionLimit, Nullable`1 interOpNumThreads, Nullable`1 intraOpNumThreads) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 242\n   at Microsoft.ML.Transforms.Onnx.OnnxModel.CreateFromBytes(Byte[] modelBytes, IHostEnvironment env, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary, Int32 recursionLimit) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 410\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes) in D:\\a\\_work\\1\\s\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs:line 280\n-------------------- Microsoft.ML.OnnxRuntime.OnnxRuntimeException : [ErrorCode:Fail] inference_session.cc:1357 onnxruntime::InferenceSession::LoadOrtModelWithLoader ORT model verification failed.\n```\n\r\n<!-- Known issue validation start -->\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=895122\r\n**Error message validated:** `[LoadOrtModelWithLoader ORT model verification failed.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 12/16/2024 9:15:15 PM UTC\r\n<!-- Known issue validation end -->\r\n<!--Known issue error report start -->\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[896731](https://dev.azure.com/dnceng-public/public/_build/results?buildId=896731)|dotnet/machinelearning|[Microsoft.ML.Tests.DnnImageFeaturizerTests.TestDnnImageFeaturizer](https://dev.azure.com/dnceng-public/public/_build/results?buildId=896731&view=ms.vss-test-web.build-test-results-tab&runId=23520312&resultId=101250)||\r\n|[895122](https://dev.azure.com/dnceng-public/public/_build/results?buildId=895122)|dotnet/machinelearning|[Microsoft.ML.OnnxTransformerTest.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=895122&view=ms.vss-test-web.build-test-results-tab&runId=23470302&resultId=102001)|dotnet/machinelearning#7334|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|2|\r\n<!--Known issue error report end -->","Url":"https://github.com/dotnet/machinelearning/issues/7339","RelatedDescription":"Open issue \"Tests using Onnx fail with `LoadOrtModelWithLoader ORT model verification failed`\" (#7339)"},{"Id":"2742878300","IsPullRequest":false,"CreatedAt":"2024-12-16T16:41:09","Actor":"luisquintanilla","Number":"7337","RawContent":null,"Title":"Add Phi-4 to Tiktoken encoding map","State":"open","Body":"Phi-4 uses Tiktoken tokenizer (100k vocab).\n\nhttps://arxiv.org/pdf/[2412.08905v1](https://arxiv.org/pdf/2412.08905v1)\n\n> we now use the tiktoken tokenizer (for better multilingual support) with a padded vocabulary size of 100,352 (including unused tokens)\n\nConsider adding it as an option to the encoding map so it's easier to create. \n\n\nhttps://github.com/dotnet/machinelearning/blob/01c41644edef3d02060b4c8bb841878df3528050/src/Microsoft.ML.Tokenizers/Model/TiktokenTokenizer.cs#L1025-L1035","Url":"https://github.com/dotnet/machinelearning/issues/7337","RelatedDescription":"Open issue \"Add Phi-4 to Tiktoken encoding map\" (#7337)"},{"Id":"2740137125","IsPullRequest":false,"CreatedAt":"2024-12-14T20:45:17","Actor":"tarekgh","Number":"7336","RawContent":null,"Title":"Consider Rust BPE tokenizer implementation","State":"open","Body":"Try to look at rust gems BPE tokenizer performance and figure out if it is worth adapting it in the ML tokenizers library. \n\nhttps://github.com/github/rust-gems/blob/main/crates/bpe/README.md","Url":"https://github.com/dotnet/machinelearning/issues/7336","RelatedDescription":"Open issue \"Consider Rust BPE tokenizer implementation\" (#7336)"},{"Id":"2738464093","IsPullRequest":false,"CreatedAt":"2024-12-13T13:57:21","Actor":"harish2020Code","Number":"7335","RawContent":null,"Title":"System.RuntimeMethodHandle.InvokeMethod error in 4 GB + Model","State":"open","Body":"Is there any known limitation with model size? I build the multiple models with different range of the data to find out which one is giving the better result. I have a model with 2 GB size and everything works fine and when I use 4 GB+ model and I am getting the following\n \nLine of the code -   ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);\n\nError \nDecember 13, 2024 08:49:24,476 [MLCodeModule] ERROR - Error PredictionEngine    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\n   at Microsoft.ML.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\n   at Microsoft.ML.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\n   at Microsoft.ML.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\n   at Microsoft.ML.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\n   at Microsoft.ML.ModelOperationsCatalog.Load(Stream stream, DataViewSchema& inputSchema)\n   at Microsoft.ML.ModelOperationsCatalog.Load(String filePath, DataViewSchema& inputSchema)\n   at MLClassification.ConsumeModel.CreatePredictionEngine() \n\nPlease let me know if any other information is needed?\n\nThanks\nHarish","Url":"https://github.com/dotnet/machinelearning/issues/7335","RelatedDescription":"Open issue \"System.RuntimeMethodHandle.InvokeMethod error in 4 GB + Model\" (#7335)"},{"Id":"2731468222","IsPullRequest":false,"CreatedAt":"2024-12-10T23:42:54","Actor":"totalgit74","Number":"7333","RawContent":null,"Title":"SaveCsv method ignoring supplied CultureInfo","State":"open","Body":"**System Information (please complete the following information):**\n - OS & Version: Windows 10\n - Microsoft.Data.Analysis: 0.22.0\n - .NET Version: Net 6\n\n**Describe the bug**\nWhen using the SaveCsv method and passing in a CultureInfo object with the date format set (e.g. yyyy-MM-dd HH:mm:ss) the CSV file is saved with what looks to be the system settings, rendering the CultureInfo parameter useless.\n\n**To Reproduce**\n```csharp\nvar ci = (CultureInfo) cultureInfo.Clone();\nci.DateTimeFormat.LongDatePattern = \"yyyy-MM-dd\";\nci.DateTimeFormat.ShortDatePattern = \"yyyy-MM-dd\";\nci.DateTimeFormat.LongTimePattern = \"HH:mm:ss\";\nci.DateTimeFormat.ShortTimePattern = \"HH:mm:ss\";\n\nframe.SaveCsv(<path>, cultureInfo: ci);\n```\n**Expected behavior**\nDateTime values saved in the `yyyy-MM-dd HH:mm:ss` format.\n\n**Observed behavior***\nDateTime values saved as `d/MM/yyyy h:mm tt` which is the `ShortDatePattern` and `ShortTimePattern` for the `CultureInfo.CurrentCulture`, thereby ignoring the passed in values.\n","Url":"https://github.com/dotnet/machinelearning/issues/7333","RelatedDescription":"Open issue \"SaveCsv method ignoring supplied CultureInfo\" (#7333)"},{"Id":"2731346469","IsPullRequest":false,"CreatedAt":"2024-12-10T22:32:40","Actor":"totalgit74","Number":"7332","RawContent":null,"Title":"Add efficient way of concatenating multiple DataFrame objects","State":"open","Body":"Whilst there is the ability to append a DataFrame to another pre-existing frame using the `Append` method it would be great to have a method/overload that allows for the efficient concatenation of multiple DataFrames. Whilst it is possible to loop to perform this function or chain multiple calls it does not seem like that would be a very efficient way of doing things compared to an \"under the hood\" implementation that could better optimise for performance.\n\nAn example of such functionality can be seen with R's `rbindlist()` function in the `data.table` library that will concatenate many large datasets efficiently. It also allows for matching by column names and filling of missing values, although that would not be needed in an initial implementation.\n","Url":"https://github.com/dotnet/machinelearning/issues/7332","RelatedDescription":"Open issue \"Add efficient way of concatenating multiple DataFrame objects\" (#7332)"},{"Id":"2720944523","IsPullRequest":true,"CreatedAt":"2024-12-09T16:18:37","Actor":"github-actions[bot]","Number":"7330","RawContent":null,"Title":"[release/4.0] Moved SpecialTokens assignment after the modification to avoid \"Collection Modified\" error","State":"closed","Body":"Backport of #7328 to release/4.0\r\n\r\n/cc @tarekgh @shaltielshmid\r\n\r\n## Customer Impact\r\n\r\nUsers of the BERT Tokenizer who provide a custom list of special tokens during tokenizer creation may encounter exceptions if the lowercasing option is enabled.\r\n\r\n## Testing\r\n\r\nThis has been manually tested, with new tests added, and all regression tests have passed successfully.\r\n\r\n## Risk\r\n\r\nLow. This change does not alter any behavior or logic; it simply ensures that the supplied special tokens are handled correctly.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7330","RelatedDescription":"Closed or merged PR \"[release/4.0] Moved SpecialTokens assignment after the modification to avoid \"Collection Modified\" error\" (#7330)"},{"Id":"2699350272","IsPullRequest":true,"CreatedAt":"2024-12-05T22:51:05","Actor":"dotnet-maestro[bot]","Number":"7327","RawContent":null,"Title":"[release/4.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a547de0d-c7ea-4682-b0d2-c8a549cede14)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: a547de0d-c7ea-4682-b0d2-c8a549cede14\r\n- **Build**: 20241122.2\r\n- **Date Produced**: November 22, 2024 6:31:15 PM UTC\r\n- **Commit**: b41381d5cd633471265e9cd72e933a7048e03062\r\n- **Branch**: refs/heads/release/9.0\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24504.4 to 9.0.0-beta.24572.2][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/f209a925b1...b41381d5cd\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n- **Updates to .NET SDKs:**\r\n  - Updates tools.dotnet to 9.0.100\r\n\r\n[marker]: <> (End:a547de0d-c7ea-4682-b0d2-c8a549cede14)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7327","RelatedDescription":"Closed or merged PR \"[release/4.0] Update dependencies from dotnet/arcade\" (#7327)"},{"Id":"2712669184","IsPullRequest":true,"CreatedAt":"2024-12-05T16:54:37","Actor":"shaltielshmid","Number":"7328","RawContent":null,"Title":"Moved SpecialTokens assignment after the modification to avoid \"Collection Modified\" error","State":"closed","Body":"We are excited to review your PR.\n\nSo we can do the best job, please check:\n\n- [v] There's a descriptive title that will make sense to other developers some time from now. \n- [v] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\n- [v] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\n- [ ] You have included any necessary tests in the same PR.\n\n---\n\nHey all! I was working with BertTokenizer, and noticed that when I specified \"BasicTokenization\" and \"Lowercase\" then I was getting the \"Collection Modified\" error, since the updated dictionary is iterated over and updated in the same loop.\nSolution: Just assign the dictionary after. \n\nI didn't include an issue/tests since this was just a simple typo fix. I'm happy to expand further if needed. ","Url":"https://github.com/dotnet/machinelearning/pull/7328","RelatedDescription":"Closed or merged PR \"Moved SpecialTokens assignment after the modification to avoid \"Collection Modified\" error\" (#7328)"},{"Id":"2713926581","IsPullRequest":true,"CreatedAt":"2024-12-04T16:50:28","Actor":"stephentoub","Number":"7329","RawContent":null,"Title":"Update M.E.AI version used by Microsoft.ML.GenAI.Core","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/7329","RelatedDescription":"Closed or merged PR \"Update M.E.AI version used by Microsoft.ML.GenAI.Core\" (#7329)"},{"Id":"2677293452","IsPullRequest":true,"CreatedAt":"2024-11-27T17:45:01","Actor":"asmirnov82","Number":"7324","RawContent":null,"Title":"Fix broken inheritance from DataFrameColumn class","State":"closed","Body":"Fixes #7323\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7324","RelatedDescription":"Closed or merged PR \"Fix broken inheritance from DataFrameColumn class\" (#7324)"},{"Id":"2690292771","IsPullRequest":false,"CreatedAt":"2024-11-25T10:57:09","Actor":"grzskoBgs","Number":"7326","RawContent":null,"Title":"Add option Deterministic to LightGbmBinaryTrainer.Options and LightGbmMulticlassTrainer.Options","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\nLightGBM is known to give non-deterministic results when run with more than one thread. It affects the reproducibility of results. With version 3.3.5 of LightGBM a new parameter \"deterministic\" was introduced: [https://lightgbm.readthedocs.io/en/v3.3.5/Parameters.html#deterministic](https://lightgbm.readthedocs.io/en/v3.3.5/Parameters.html#deterministic). However, I don't see this option as available for LightGbmBinaryTrainer.Options in the latest version of ML.NET (4.0.0).\n\n**Describe the solution you'd like**\nThe property \"Deterministic\" is available for LightGbmBinaryTrainer.Options and LightGbmMulticlassTrainer.Options with the same interpretation as the \"deterministic\" parameter of the Python LightGBM implementation.\n\nIs it possible, what is the expected resolution time?\n\n**Describe alternatives you've considered**\nWe were considering running LightGbmBinaryTrainer with option NumberOfThreads equal 1. However, it significantly slows down the execution time. We want to consider a built-in solution for assessing the reproducibility of results.\n\n**Additional context**\nNo\n","Url":"https://github.com/dotnet/machinelearning/issues/7326","RelatedDescription":"Open issue \"Add option Deterministic to LightGbmBinaryTrainer.Options and LightGbmMulticlassTrainer.Options\" (#7326)"},{"Id":"2684174007","IsPullRequest":false,"CreatedAt":"2024-11-22T18:39:50","Actor":"LittleLittleCloud","Number":"7325","RawContent":null,"Title":"[GenAI] Supervised-fine-tune","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n","Url":"https://github.com/dotnet/machinelearning/issues/7325","RelatedDescription":"Open issue \"[GenAI] Supervised-fine-tune\" (#7325)"}],"ResultType":"GitHubIssue"}},"RunOn":"2025-01-06T03:30:19.0612942Z","RunDurationInMilliseconds":477}