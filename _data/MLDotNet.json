{"Data":{"GitHub":{"Issues":[{"Id":"2044567981","IsPullRequest":false,"CreatedAt":"2023-12-16T02:20:13","Actor":"tearlant","Number":"6913","RawContent":null,"Title":"Saved model returning a different prediction when using AddPredictionEnginePool","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: 3.0.0\r\n - .NET Version: 7.0\r\n\r\n**Describe the bug**\r\nI'm trying to build something with an API endpoint exposed. While prototyping, I'm essentially following the documentation here: https://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/serve-model-web-api-ml-net\r\n\r\nI would expect the following two blocks to give the same result:\r\n\r\n(In a console app)\r\n```\r\nvar mlContext = new MLContext();\r\n            \r\nSentimentIssue sampleStatement = new SentimentIssue { Text = \"I love this movie!\" };\r\n\r\nstring ModelPath = \"path/to/SentimentModel.zip\";\r\n\r\nITransformer loadedModel = mlContext.Model.Load(ModelPath, out var modelInputSchema);\r\nvar predEngine = mlContext.Model.CreatePredictionEngine<SentimentIssue, SentimentPrediction>(loadedModel);\r\nvar resultprediction = predEngine.Predict(sampleStatement);\r\n\r\nConsole.WriteLine($\"=============== Single Prediction  ===============\");\r\nConsole.WriteLine($\"Text: {sampleStatement.Text} | Prediction: {(Convert.ToBoolean(resultprediction.Prediction) ? \"Positive\" : \"Negative\")} sentiment | Probability of being positive: {resultprediction.Probability} \");\r\n```\r\nActual output:\r\n![image](https://github.com/dotnet/machinelearning/assets/105062729/58aa22e5-f368-4231-9769-1ac6c466433b)\r\n\r\nIn an API, in the Program.cs file:\r\n```\r\nbuilder.Services.AddPredictionEnginePool<SentimentAnalysisModelInput, SentimentAnalysisModelOutput>().FromFile(modelName: \"SentimentAnalysisModel\", filePath: \"path/to/SentimentModel.zip\", watchForChanges: true);\r\n\r\n// ...\r\n\r\nvar predictionHandler =\r\n    (PredictionEnginePool<SentimentAnalysisModelInput, SentimentAnalysisModelOutput> predictionEnginePool, SentimentAnalysisModelInput input) =>\r\n    {\r\n        return predictionEnginePool.Predict(modelName: \"SentimentAnalysisModel\", input);\r\n    };\r\n\r\napp.MapPost(\"/predict\", predictionHandler);\r\n\r\napp.Run();\r\n\r\n```\r\n\r\nThe output (for example, using Postman with the same input)\r\n![image](https://github.com/dotnet/machinelearning/assets/105062729/3881d198-6493-40a1-9f37-77c2cf29eed3)\r\n\r\n**Expected behavior**\r\nI would expect the two to be equal, with the same input. Also, I'm getting the same result/probability no matter what input I use:\r\n\r\n![image](https://github.com/dotnet/machinelearning/assets/105062729/34a77e84-b547-477a-8213-5a472641fb7b)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6913","RelatedDescription":"Open issue \"Saved model returning a different prediction when using AddPredictionEnginePool\" (#6913)"},{"Id":"2044205225","IsPullRequest":false,"CreatedAt":"2023-12-15T18:45:37","Actor":"BartNSTCL","Number":"6912","RawContent":null,"Title":"Using AddPredictionEnginePool ModelName difference in Predict shows expected error","State":"open","Body":"\r\n - OS & Version: Windows 11 Insider Build 23606.1000\r\n - ML.NET Version: 3.0.0\r\n - .NET Version: Net 8.0\r\n\r\n**Describe the bug**\r\nI created a PredictionEnginePool in Program.cs as:\r\n            _builder.Services.AddPredictionEnginePool<ModelOutput, ModelOutput>()\r\n            .FromUri( modelName: \"YieldModel\",\r\n            uri: \"/MechPropertiesModels/YieldModel.zip\",\r\n            period: TimeSpan.FromMinutes(10));_\r\n\r\nIn my Controller, after setting up the DI (PredEnginePool),  I had the following code:\r\n_IEnumerable<ModelOutput> yieldOut = sampleData.Select(input => PredEnginePool.Predict<ModelOutput, ModelOutput>(modelName: \"Yield\", example: input)).ToList();_\r\n\r\nWhen I run the code, the error was:\r\n_System.ArgumentNullException: Value cannot be null. (Parameter 'poolOptions')\r\n   at Microsoft.Extensions.ML.PoolLoader`2..ctor(IServiceProvider sp, PredictionEnginePoolOptions`2 poolOptions)\r\n   at Microsoft.Extensions.ML.PredictionEnginePool`2.AddPool(String modelName)\r\n   at Microsoft.Extensions.ML.PredictionEnginePool`2.GetPredictionEngine(String modelName)\r\n   at Microsoft.Extensions.ML.PredictionEnginePoolExtensions.Predict[TData,TPrediction](PredictionEnginePool`2 predictionEnginePool, String modelName, TData example)\r\n   at CTLWebApi.Controllers.MachineLearningController.<PredictMechProperties>b__11_1(ModelOutput input) in C:\\Users\\bart.lynn\\source\\repos\\CTL Projects\\CTLWebsite_Net\\CTLWebApi\\Controllers\\MachineLearningController.cs:line 91_\r\n\r\nI realized after some time, I had 2 different names for the Model (YieldModel, and Yield). The error pointed to missing 'poolOptions'. I tried any different searches looking for that 'poolOptions' and after a while I noticed the model name differences.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Name the model something in the Program.cs\r\n2. Name the model something different in the Controller.\r\n3. Run\r\n4. See error\r\n\r\n**Expected behavior**\r\nMaybe it should say, Model:\"Yield\" was not found in the pool.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nCode is provided above.","Url":"https://github.com/dotnet/machinelearning/issues/6912","RelatedDescription":"Open issue \"Using AddPredictionEnginePool ModelName difference in Predict shows expected error\" (#6912)"},{"Id":"2042722684","IsPullRequest":false,"CreatedAt":"2023-12-15T01:01:58","Actor":"zewditu","Number":"6911","RawContent":null,"Title":"Splitter/consolidator worker encountered exception while consuming source data in QA","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: [e.g. Windows 10] \r\n - ML.NET Version: [e.g. ML.NET v1.5.5]\r\n - .NET Version: [e.g. .NET 5.0]\r\n\r\n**Describe the bug**\r\nFor [this](https://microsoft.sharepoint.com/teams/Privetbuild/Shared%20Documents/Forms/AllItems.aspx?ga=1&id=%2Fteams%2FPrivetbuild%2FShared%20Documents%2FMode%20Builder%20sample%20projects%2FQASampleDataset&viewid=59c820c6%2D8175%2D4d81%2Dafb2%2Dc421709c2521)  dataset the exception is thrown  after the training is completed  , it seems the issue is in validation  step.\r\nI am able to reproduce it in Ml.Net repo test case   and the issue happed in 'ComputeTopKSpansWithScore' method at  https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.TorchSharp/Utils/MetricUtils.cs#L23\r\n\r\nHere is the test code \r\n```csharp       \r\n        var ml = new Microsoft.ML.MLContext();\r\n\r\n        ml.Log += (object sender, LoggingEventArgs e) =>\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        };\r\n\r\n        ml.GpuDeviceId = 0;\r\n        ml.FallbackToCpu = false;\r\n        Console.WriteLine(\"Hello World!\");\r\n\r\n        var trainFile = GetDataPath(\"squad-train-clean.tsv\");\r\n\r\n        Microsoft.ML.Data.TextLoader textLoader =\r\n            ml.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = new[]\r\n                        {\r\nnew TextLoader.Column(\"Context\", DataKind.String,0),\r\nnew TextLoader.Column(\"Question\", DataKind.String,1),\r\nnew TextLoader.Column(\"TrainingAnswer\", DataKind.String,2),\r\nnew TextLoader.Column(\"AnswerIndex\", DataKind.Int32,3)\r\n},\r\n                HasHeader = true,\r\n                Separators = new[] { '\\t' },\r\n            }, new MultiFileSource(trainFile));\r\n\r\n        Microsoft.ML.IDataView dataView = textLoader.Load(new MultiFileSource(trainFile));\r\n        var testTrainSplit = ml.Data.TrainTestSplit(dataView, 0.95);\r\n\r\n        var trainingDataset = testTrainSplit.TrainSet;\r\n        var testDataset = ml.Data.TrainTestSplit(testTrainSplit.TestSet, 0.95).TrainSet;\r\n\r\n        var estimator = ml.MulticlassClassification.Trainers.QuestionAnswer(maxEpochs: 1);\r\n        var model = estimator.Fit(testDataset);\r\n        var transformedData = model.Transform(testDataset);\r\n        var labelCol = transformedData.GetColumn<string[]>(\"Answer\").ToArray();\r\n\r\n```\r\n![image](https://github.com/dotnet/machinelearning/assets/36615490/e25c7e8e-add8-4a17-b4f0-e3a2e149db94)\r\n\r\n**Additional context**\r\nThe reason we used  test dataset to train is  because it seems that the exception is thrown in validation using test dataset.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6911","RelatedDescription":"Open issue \"Splitter/consolidator worker encountered exception while consuming source data in QA\" (#6911)"},{"Id":"2042706844","IsPullRequest":false,"CreatedAt":"2023-12-15T00:39:40","Actor":"luisquintanilla","Number":"6910","RawContent":null,"Title":"NER Remaining Work","State":"open","Body":"- [ ] [Provide E2E sample](https://github.com/dotnet/machinelearning/issues/630#issuecomment-1831961047)\r\n- [ ] Look into Tokenizer questions / concerns\r\n  - [ ] [Data needs to be tokenized](https://github.com/dotnet/machinelearning/issues/630#issuecomment-1812658740)\r\n  - [ ] [Choosing a different tokenizer](https://github.com/dotnet/machinelearning/issues/630#issuecomment-1813563078)\r\n\r\nThe tokenizer may not be possible because it's what the model expects. However, you should be able to use a different vocabulary.","Url":"https://github.com/dotnet/machinelearning/issues/6910","RelatedDescription":"Open issue \"NER Remaining Work\" (#6910)"},{"Id":"2042039131","IsPullRequest":false,"CreatedAt":"2023-12-14T16:24:46","Actor":"Amine-Smahi","Number":"6909","RawContent":null,"Title":"Is it possible to make a CHATGPT Clone with ML.NET ?","State":"open","Body":"Hi team,\r\n\r\nis it possible to create a ChatGPT clone trained on own data using ML.NET ?\r\n\r\nI'm really in need for feedback before deciding to get into ML.NET for my company.\r\n\r\nThanks for the good work","Url":"https://github.com/dotnet/machinelearning/issues/6909","RelatedDescription":"Open issue \"Is it possible to make a CHATGPT Clone with ML.NET ?\" (#6909)"},{"Id":"2040350865","IsPullRequest":false,"CreatedAt":"2023-12-13T19:39:17","Actor":"zewditu","Number":"6908","RawContent":null,"Title":"Deep learning scenarios  json serialization issue in webApp ","State":"open","Body":"**System Information (please complete the following information):**\r\n -Windows 11 Enterprise (10.0.22631 Build)\r\n - ML.NET Version: [3.0.0]\r\n - .NET Version: [e.g. .NET 8.0]\r\n\r\n**Describe the bug**\r\nIn model builder we generate two sample projects console and minimal webApp  to our user to show samples how to consume thier model in application.\r\nHowever  for the weApp if we have non-English characters in Json string we passe we have error ,if we explicitly sterilize it works .\r\nHere is a solution that contain those generated projects https://microsoft.sharepoint.com/:f:/t/Privetbuild/ElKqZFFcA4VDlR8cQVN_PaEB3fRmuet1WOAt7G39rrwtQA?e=haN4H8\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1.  Download the solution\r\n2. Open the solution in VS\r\n3. Run \"MLModel1_WebApi1\"\r\n4. Open \"PowerShell \"\r\n5.  Provide the sample dataset \r\n\"$body =@{\r\n\\>\\> context =\"Beyoncé Giselle Knowles-Carter (/bi:jɒnseɪ/ bee-YON-say) (born September 4, 1981) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R&B girl-group Destiny's Child. Managed by her father, Mathew Knowles, the group became one of the world's best-selling girl groups of all time. Their hiatus saw the release of Beyoncé's debut album, Dangerously in Love (2003), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number-one singles\"\r\n\\>\\> question =\"What areas did Beyonce compete in when she was growing up?\"\r\n\\>\\> answer_start =207\r\n\\>\\> }\"     \r\n\r\n## Note `>>` are new lines in powershell\r\n\r\n7. Call the method `Invoke-RestMethod \"https://localhost:PORT_NUMBER/predict\"-Method Post -Body ($body | ConvertTo-Json)-ContentType \"application/json\" `\r\n8. See error  as follows \r\n![image](https://github.com/dotnet/machinelearning/assets/36615490/96e41fb6-8bf5-42be-b666-70ba2f49cd0e)\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nIf applicable, add screenshots, code snippets, or sample projects to help explain your problem.\r\n\r\n**Additional context**\r\n\r\n- if I am modifying 'Program.cs` in `MLModel1_WebApi1`  \"app.MapPost\" into the following explicit Json setting option it works.\r\n\r\n```csharp\r\napp.MapPost(\"/predict\", async (HttpRequest request) =>\r\n{\r\n    var options = new JsonSerializerOptions\r\n    {\r\n        Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Default,\r\n        PropertyNameCaseInsensitive = true,\r\n    };\r\n    using (StreamReader reader = new StreamReader(request.Body))\r\n    {\r\n        var jsonString = await reader.ReadToEndAsync();\r\n        var modelInput = JsonSerializer.Deserialize<MLModel1.ModelInput>(jsonString,options);\r\n        var result = MLModel1.Predict(modelInput);\r\n\r\n        // To get only the first best answer.\r\n        result.Predicted_Answer = new string[] { result.Predicted_Answer[0] };\r\n        result.Score = new float[] { result.Score[0] };\r\n        return result;\r\n    }\r\n})\r\n```\r\n\r\n- It happens only for QA, Sentence-similarity and Text-classification.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6908","RelatedDescription":"Open issue \"Deep learning scenarios  json serialization issue in webApp \" (#6908)"},{"Id":"2038210076","IsPullRequest":true,"CreatedAt":"2023-12-12T20:03:30","Actor":"michaelgsharp","Number":"6907","RawContent":null,"Title":"Updated ml.net versioning","State":"closed","Body":"Updating ML.NET version to 4.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6907","RelatedDescription":"Closed or merged PR \"Updated ml.net versioning\" (#6907)"},{"Id":"2037043541","IsPullRequest":false,"CreatedAt":"2023-12-12T06:01:18","Actor":"unruledboy","Number":"6906","RawContent":null,"Title":"Complicated recommendation model with multiple optional custom weighted attributes","State":"open","Body":"\r\n### System information\r\n\r\n- OS version/distro: Windows 11\r\n- .NET Version: NET 6\r\n\r\n### Issue\r\n\r\n- **What did you try?**: tried to build a recommendation model with multiple optional custom weighted attributes\r\n- **What happened?**: could not figure out how to apply custom attributes with weight\r\n- **What did you expect?**: build a model with custom weighted attributes\r\n\r\n### Use case\r\nI would like to develop a recommendation system for cars (yes, vehicles), where user can specify what they are interested in most, less important and least important.\r\n\r\nThe importance would be described as:\r\n- High: the weight value is 10\r\n- Medium: the weight value is 6\r\n- Low: the weight value is 3\r\n\r\nAnd for every attribute of the car, a user is able specify the importance to them. Which means every attribute is optional. For those attributes that are not specified by the user, it would have default weight at `Medium`.\r\n\r\nFor example, a user specifies importance as below:\r\n- price: high (more expensive, **lower** the score would be)\r\n- horse power: high (bigger horse power, higher the score would be)\r\n- seats: high (the system consider the number of seats as: the more the seats, the higher the score would be)\r\n- 4WD: low (for those cars that are FWD/4WD, it has higher score)\r\n- tank/fuel range: medium (longer the range, higher the score)\r\n- etc.\r\n- etc.\r\n\r\nNow, to build such model, I would expect **somehow** we could provide user-specified weighted attributes into the model so the result would be user based.\r\n\r\nNot really sure how to do so. Any thoughts?\r\n\r\nYours,\r\nWilson\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6906","RelatedDescription":"Open issue \"Complicated recommendation model with multiple optional custom weighted attributes\" (#6906)"},{"Id":"1991865031","IsPullRequest":true,"CreatedAt":"2023-12-11T22:57:23","Actor":"tearlant","Number":"6885","RawContent":null,"Title":"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance","State":"closed","Body":"Fixes #6606 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/6885","RelatedDescription":"Closed or merged PR \"Issue #6606 - Add sample variance and standard deviation to NormalizeMeanVariance\" (#6885)"},{"Id":"2035686166","IsPullRequest":false,"CreatedAt":"2023-12-11T13:30:09","Actor":"asmirnov82","Number":"6905","RawContent":null,"Title":"[Proposal] DataFrame Arithmetic and Computation API ","State":"open","Body":"## Background and motivation\r\n\r\nCurrent arithmetic and computation API of the DataFrame is inconsistent and quite slow in scenarios where columns of different types are involved as each column casting to different type requires coping the entire column data. \r\n\r\nMoreover some of the methods of computation API may produce inaccurate results (due to overflow exception).\r\n\r\nMotivation of this change includes \r\n1. reusing generic operators from future TensorPrimitives API for fast computation over DataFrame columns of different types (and possibly even chaining such operations to avoid intensive memory usage for storing intermediate calculation results)\r\n2. accurate calculation of aggregation functions\r\n3. increased performance and using SIMD commands for the significant part of DataFrame operations\r\n4. reduce DataFrame code duplication\r\n\r\n## Details of current implementation limitations\r\n\r\n1. Inconsistency of the API is related to types of data returned by arithmetic operations over `PrimitiveColumn<T>` instances and their concrete aliases (like `DoubleDataFrame` or `Int32DataFrameColumn`)\r\n\r\nFor example\r\n```C#\r\nvar left_column = new ByteDataFrameColumn(\"Left\", new byte[] { 1, 2, 3 });\r\nvar right_column = new Int16DataFrameColumn(\"Right\", new short[] { 1, 2, 3 });\r\n\r\nvar sum = left_column.Add + right_column;\r\n```\r\nresults in sum column containing int values.\r\n\r\nThe same code, but referring columns using parent type\r\n```C#\r\nPrimitiveDataFrameColumn<byte> left_column = new ByteDataFrameColumn(\"Left\", new byte[] { 1, 2, 3 });\r\nPrimitiveDataFrameColumn<short> right_column = new Int16DataFrameColumn(\"Right\", new short[] { 1, 2, 3 });\r\n\r\nvar sum = left_column.Add + right_column;\r\n```\r\nresults in sum column containing double values. \r\n\r\n2.  Inaccurate results of aggregated functions. Currently aggregated functions are calculated using the same type as input column, for example for byte column it’s byte type. \r\nAnd\r\n```C#\r\nvar column = new ByteDataFrameColumn(\"Column\", new byte[] { 128, 129 });\r\n\r\nvar sum = column.Sum();\r\nvar mean = column.Mean();\r\n```\r\nresults in sum equals to 1 and mean to 0.5, which is obviously incorrect.\r\n\r\n3. Performance and excessive coping issues are well known and mentioned in  #5663  \r\n\r\n## Proposal\r\n\r\nProposal is:\r\n\r\n1. to use the common numeric type for the arithmetic output (the smallest numeric type which can accommodate any value of any input). If any input is a floating point type the common numeric type is the widest floating point type among the inputs. Otherwise the common numeric type is integral and is signed if any input is signed.\r\n\r\n2. to return the widest possible type for accumulating aggregation functions (like sum, product and etc). It’s double for floating point types (double, float, Half), long for signed integers (long, int, short, sbyte) and ulong for unsigned integers (ulong, uint, ushort, byte) and input type for other aggregated functions (like min, max, first and etc).\r\n\r\nThis approach is used for example in [Apache Arrow Compute functions](https://arrow.apache.org/docs/cpp/compute.html)\r\n\r\n## Implementation\r\n\r\nImplementation can reuse the low level parts of the future generic TensorPrimitives API, like `IUnaryOperator<T>`, `IBinaryOperator<T>` and their concrete implementations.\r\n\r\nOperators allow to invoke highly efficient vectorized calculations over arguments of the same type. New implementation should extend this functionality by providing efficient vectorized convertors and conversion rules for cases when arguments have different data type.\r\n\r\n## Example\r\n\r\nI created an example of possible implementation [compute-functions](https://github.com/asmirnov82/compute-functions)\r\nApache Arrow doesn’t have a .Net implementation of Compute Functions I took at as an exercise for the POC. DataFrame follows the same paradigm, so all the ideas can be applied to it as well.\r\n\r\nSo, I extend several operators from TensorPrimitive API to have generic version (this is done to illustrate how future Generic Tensor API can be look like and be used). I also created several OperatorExecutors and Functions classes, that provides rules for argument type conversions for several cases (binary arithmetic calculations and two types of aggregating functions). I also created a list of wideners and convertes that leverage SIMD vectorized calculation as an example","Url":"https://github.com/dotnet/machinelearning/issues/6905","RelatedDescription":"Open issue \"[Proposal] DataFrame Arithmetic and Computation API \" (#6905)"},{"Id":"2034549027","IsPullRequest":false,"CreatedAt":"2023-12-10T21:52:49","Actor":"MattiaDurli","Number":"6904","RawContent":null,"Title":"Object Detection speed decreased moving from ML.NET 1.7.0 to 3.0","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: ML.NET 1.7.0 and 3.0\r\n - .NET Version: .NET 8\r\n\r\n**Describe the bug**\r\nI trained my model last year, with ML Model Builder and ML.NET 1.7 with a set of images annotated with VOTT. The training was in Azure because at that time it wasn't possible to train locally. Then I produced the console sample application that loads my ONNX MLModel1.zip.\r\nWith a reference image, after the first load, it takes 0.58s on my current machine to detect the objects. \r\nMy computer has GPU but I assume it's not used at this stage.\r\n\r\nI retrained my model now, this time locally, with my GPU, with the same image set and annotations, and a file MLModel1.mlnet is created, and the sample console app has tochsharp nuget instead of onnx nugets.\r\nIf I test (after first load) with\r\nmlContext.GpuDeviceId = null;\r\nmlContext.FallbackToCpu = true;\r\nnow it takes 2.1s\r\nIf I test (after first load) with\r\nmlContext.GpuDeviceId = 0;\r\nmlContext.FallbackToCpu = false;\r\nnow it takes 0.68s\r\n\r\nThe older version, even without using CPU, is faster.\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\n\r\n**Expected behavior**\r\nAn improvement\r\n\r\n**Screenshots, Code, Sample Projects**\r\nThe image I use as reference\r\n![referencetest](https://github.com/dotnet/machinelearning/assets/6052847/0df786ca-95dc-45e4-be05-812f59778265)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6904","RelatedDescription":"Open issue \"Object Detection speed decreased moving from ML.NET 1.7.0 to 3.0\" (#6904)"},{"Id":"2033064887","IsPullRequest":false,"CreatedAt":"2023-12-08T17:38:18","Actor":"BartNSTCL","Number":"6903","RawContent":null,"Title":"Support for Microsoft.Data.SqlClient","State":"open","Body":"I always use the Nuget Microsoft.Data.SqlClient since it seems better and its Microsoft's recommendation.\r\n\r\nWhen using the ML.NET Model Builder, it uses System.Sql.SqlClient and that should up as an vulnerable dependency.\r\n\r\nWhile I can could just right code myself, I'd like to see the Model Builder use the new technology. \r\n\r\nI tried searching the Issues for this particular request, but I didn't see it. So if its a duplicate, it can be closed.","Url":"https://github.com/dotnet/machinelearning/issues/6903","RelatedDescription":"Open issue \"Support for Microsoft.Data.SqlClient\" (#6903)"},{"Id":"2015005859","IsPullRequest":false,"CreatedAt":"2023-12-07T21:14:55","Actor":"fuszenecker","Number":"6893","RawContent":null,"Title":"Unhandled exception. System.EntryPointNotFoundException: Unable to find an entry point named 'TF_StringEncodedSize' in shared library 'tensorflow'.","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Ubuntu Linux 22.04 LTS\r\n - ML.NET Version: 3.0.0\r\n - .NET Version: .NET 8.0\r\n\r\n**Describe the bug**\r\nWhen I try to train a model for image classification, I receive the exception below:\r\n\r\n```\r\nUnhandled exception. System.EntryPointNotFoundException: Unable to find an entry point named 'TF_StringEncodedSize' in shared library 'tensorflow'.\r\n   at Tensorflow.c_api.TF_StringEncodedSize(UInt64 len)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.EncodeByteAsString(VBuffer`1 buffer)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.ImageProcessor.ProcessImage(VBuffer`1& imageBuffer)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.CacheFeaturizedImagesToDisk(IDataView input, String labelColumnName, String imageColumnName, ImageProcessor imageProcessor, String inputTensorName, String outputTensorName, String cacheFilePath, Dataset dataset, Action`1 metricsCallback, Nullable`1 validationFraction)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Program.<Main>$(String[] args) in /home/fuszenecker/dev/zp/Program.cs:line 25\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Update the `SciSharp.TensorFlow.Redist` package from `2.3.1` to `2.16.0`.\r\n2. See error\r\n\r\n**Expected behavior**\r\nNo exception received, the classification works as expected.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML.Mkl.Redist\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Microsoft.ML.ImageAnalytics\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Microsoft.ML.Vision\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"SciSharp.TensorFlow.Redist\" Version=\"2.16.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\n**Additional context**\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6893","RelatedDescription":"Closed issue \"Unhandled exception. System.EntryPointNotFoundException: Unable to find an entry point named 'TF_StringEncodedSize' in shared library 'tensorflow'.\" (#6893)"},{"Id":"2027134197","IsPullRequest":false,"CreatedAt":"2023-12-07T21:11:13","Actor":"luisquintanilla","Number":"6899","RawContent":null,"Title":"Add AMD/ROCM support to ML.NET","State":"closed","Body":"Issue originally reported in Model Builder repo by @Selbyl\r\n\r\ndotnet/machinelearning-modelbuilder#2764\r\n\r\n> ROCM is being supported more on Windows recently.\r\n> \r\n> I know AMD isn't as popular as Nvidia for AI, but is ther any future of updating ml.net to support PyTorch with ROCM?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6899","RelatedDescription":"Closed issue \"Add AMD/ROCM support to ML.NET\" (#6899)"},{"Id":"2017016289","IsPullRequest":true,"CreatedAt":"2023-12-07T20:15:05","Actor":"taeerhebend","Number":"6895","RawContent":null,"Title":"Update release-3.0.0.md","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6895","RelatedDescription":"Closed or merged PR \"Update release-3.0.0.md\" (#6895)"},{"Id":"2031129307","IsPullRequest":false,"CreatedAt":"2023-12-07T16:39:48","Actor":"luisquintanilla","Number":"6902","RawContent":null,"Title":"Publish ML.NET 3.0 API Documentation ","State":"open","Body":"Latest API doc version is 2.0. Add 3.0\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.applywordembedding?view=ml-dotnet\r\n\r\n![image](https://github.com/dotnet/machinelearning/assets/46974588/045f66c0-84f9-4680-ab23-56fe145b4fd4)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6902","RelatedDescription":"Open issue \"Publish ML.NET 3.0 API Documentation \" (#6902)"},{"Id":"2029350787","IsPullRequest":false,"CreatedAt":"2023-12-06T20:43:12","Actor":"shaltielshmid","Number":"6901","RawContent":null,"Title":"[Tokenizers] Add support for HuggingFace BPE Tokenizer format","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm requesting this feature after trying to use the GPT2-style tokenizer I trained using HuggingFace in my .NET code. I had trained a model and converted the model to ONNX, but the tokenizer didn't transfer. An exact description of the problem is listed down below.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd support for a flag indicating that the tokenizer came from the HuggingFace BPE trainer, and behind the scenes handle the minor changes required. \r\n\r\n**Describe alternatives you've considered**\r\n\r\nCurrently I have a class I wrote which wraps a BPE trainer and applies the adjustments before every call to the ML.NET BPE tokenizer.\r\n\r\n**Additional context**\r\n\r\nIn the HuggingFace BPE code they have a dictionary `bytes_to_unicode()` which is list of utf-8 byte and a mapping to unicode strings. They run every byte in the string through the mapping before running the BPE encoder/decoder. Examples of where it's used can be found [here](https://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/tokenization_gpt2.py#L185) and [here](https://github.com/huggingface/transformers/blob/main/src/transformers/models/bart/tokenization_bart.py#L213-L214) and in other places. \r\n\r\nBefore the encoding, they treat the string as bytes and map all the bytes to representative unicode strings, and the same thing during after the decoding. \r\n\r\nReal example:\r\n\r\nI trained a BPE tokenizer using HuggingFace's `tokenizers.ByteLevelBPETokenizer`. The merges.txt and vocab.json can be found here: [https://gist.github.com/shaltielshmid/58b7c1109639eefcd714eb6bfc3eb602](https://gist.github.com/shaltielshmid/58b7c1109639eefcd714eb6bfc3eb602).\r\n\r\nSample python code:\r\n```python\r\nfrom transformers import GPT2Tokenizer\r\ntokenizer = GPT2Tokenizer.from_pretrained('/path/to/tokenizer')\r\nprint(tokenizer.encode('שלום וברכה')); // [150, 662, 426, 1396]\r\nprint(tokenizer.decode([150, 662, 426, 1396])); // שלום וברכה\r\n```\r\n\r\nSample C# code:\r\n```cs\r\nvar bpe = new Bpe(\"/path/to/vocab.json\", \"/path/to/merges.txt\");\r\nstring phrase = \"שלום וברכה\";\r\nConsole.WriteLine(string.Join(\", \", bpe.Tokenize(phrase).Select(t => t.Id.ToString()))); // 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\r\nstring decoded = Bpe.Decoder.Decode(new List<int> { 150, 662, 426, 1396 }.Select(id => bpe.IdToToken(id)!)); \r\nConsole.WriteLine(decoded); // ×©×ľ×ķ×ĿĠ×ķ×ĳ×¨×Ľ×Ķ\r\n\r\n// with proposed solution from down below\r\nphrase = new string(Encoding.UTF8.GetBytes(phrase).Select(b => hf_encoder[b]).ToArray());\r\nConsole.WriteLine(string.Join(\", \", bpe.Tokenize(phrase).Select(t => t.Id.ToString()))); // 150, 662, 426, 1396\r\ndecoded = Encoding.UTF8.GetString(decoded.Select(c => (byte)hf_decoder[c]).ToArray());\r\nConsole.WriteLine(decoded); // שלום וברכה\r\n```\r\n\r\n**Proposed Solution**\r\n\r\nCreate a static dictionary in the BPE class, which is initialized once:\r\n\r\n```cs\r\nvar hf_encoder = new Dictionary<int, char>();\r\nfor (int c = '!'; c <= '~'; c++) hf_encoder.Add(c, (char)c);\r\nfor (int c = '¡'; c <= '¬'; c++) hf_encoder.Add(c, (char)c);\r\nfor (int c = '®'; c <= 'ÿ'; c++) hf_encoder.Add(c, (char)c);\r\nint n = 0;\r\nfor (int c = 0; c < 256; c++) {\r\n    if (!hf_encoder.ContainsKey(c))\r\n        hf_encoder.Add(c, (char)(256 + n++));\r\n}\r\n\r\nvar hf_decoder = hf_encoder.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);\r\n```\r\n\r\nThen, in the BPE.cs class in the `Tokenize` function [here](https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.Tokenizers/Model/BPE.cs#L156), add the following check:\r\n\r\n```cs\r\nif (_isHFFormat) {\r\n    sequence = new string(Encoding.UTF8.GetBytes(sequence).Select(b => hf_encoder[b]).ToArray())\r\n}\r\n```\r\n\r\nAnd then in the BPEDecoder.cs file, in the `Decode` function [here](https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.Tokenizers/Model/BPEDecoder.cs#L35)\r\n\r\n```cs\r\nstring ret = string.Join(\"\", tokens);\r\nif (_suffix != null)\r\n{\r\n    ret = ret.Replace(_suffix, \" \");\r\n}\r\n\r\nif (_isHFFormat) {\r\n    ret = Encoding.UTF8.GetString(ret.Select(c => (byte)hf_decoder[c]).ToArray())\r\n}\r\n\r\nreturn ret;\r\n```\r\n\r\nWould be happy to compile this into a PR, if relevant.\r\n\r\n@luisquintanilla \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6901","RelatedDescription":"Open issue \"[Tokenizers] Add support for HuggingFace BPE Tokenizer format\" (#6901)"},{"Id":"2027301365","IsPullRequest":false,"CreatedAt":"2023-12-05T23:23:35","Actor":"bruno-garcia","Number":"6900","RawContent":null,"Title":"Add `source link`, `deterministic` build and symbols on release/nuget package","State":"open","Body":"The current publish flow ([as of 3.0.0](https://nuget.info/packages/Microsoft.ML/3.0.0)) isn't following the [NuGet package best practicies](https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices).\r\n\r\n![image](https://github.com/dotnet/machinelearning/assets/1633368/5a0b0283-3d9c-4b16-bce8-6daa0101dfd1)\r\n\r\nIdeally it:\r\n1. uses the compiler `deterministic` flag to allow us to match source to the compiled DLLs.\r\n2. publishes a debug symbols package to nuget.org so tools like IDEs and crash reporting services like http://sentry.io can fetch symbols and show line numbers, file paths\r\n3. Add [`sourcelink` and embed sources](https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink) so tools can fetch the source code at the exact commit published, as well as display link to open file on GitHub (Sentry can do that for example)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6900","RelatedDescription":"Open issue \"Add `source link`, `deterministic` build and symbols on release/nuget package\" (#6900)"},{"Id":"2024381976","IsPullRequest":false,"CreatedAt":"2023-12-04T17:35:32","Actor":"olkogit","Number":"6898","RawContent":null,"Title":"Exception specification is missing","State":"open","Body":"possible exceptions are not specified\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 3d0a0594-0375-c48f-3f80-a7ac2f71628f\r\n* Version Independent ID: 2eb389a5-d5c5-694a-5e62-ffd1c964ae4b\r\n* Content: [DataFrame.LoadCsv Method (Microsoft.Data.Analysis)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.data.analysis.dataframe.loadcsv?view=ml-dotnet-preview&viewFallbackFrom=ml-dotnet&devlangs=csharp&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.Data.Analysis.DataFrame.LoadCsv)%3Bk(DevLang-csharp)%26rd%3Dtrue)\r\n* Content Source: [dotnet/xml/Microsoft.Data.Analysis/DataFrame.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.Data.Analysis/DataFrame.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6898","RelatedDescription":"Open issue \"Exception specification is missing\" (#6898)"},{"Id":"2017658732","IsPullRequest":true,"CreatedAt":"2023-12-01T01:14:51","Actor":"jeffhandley","Number":"6896","RawContent":null,"Title":"Migrate to the 'locker' GitHub action for locking closed/stale issues/PRs","State":"closed","Body":"This migrates away from the FabricBot implementation of a scheduled search over closed issues and adopts the [Locker](https://github.com/microsoft/vscode-github-triage-actions/?tab=readme-ov-file#locker) GitHub action authored by the VS Code team.\r\n\r\nThe updated fabricbot.json was generated via https://github.com/dotnet/fabricbot-config/pull/83. The workflow file was implemented and tested at https://github.com/dotnet/fabricbot-config/blob/main/.github/workflows/locker.yml.\r\n\r\nSince this workflow uses the actions/checkout action, we need to ensure the following GitHub Actions settings are enabled:\r\n\r\n1. Allow enterprise, and select non-enterprise, actions and reusable workflows\r\n2. Allow actions created by GitHub","Url":"https://github.com/dotnet/machinelearning/pull/6896","RelatedDescription":"Closed or merged PR \"Migrate to the 'locker' GitHub action for locking closed/stale issues/PRs\" (#6896)"},{"Id":"2019501895","IsPullRequest":false,"CreatedAt":"2023-11-30T21:00:19","Actor":"superichmann","Number":"6897","RawContent":null,"Title":"LightGbm Regression Trainer Multiple Unneeded Database Access","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: Microsot.ML 3.0.0\r\n\r\n**Describe the bug**\r\nFit method accesses the database two times instead of one time.\r\nCache was set.\r\nMaximum BatchSize was set\r\na 15 seconds delay happens between the two queries.\r\nDatabase server is in the same server with the running code, there is no load on the server.\r\n\r\n**To Reproduce**\r\n**if you dont have time to reproduce please just look at [my ipynb code](https://github.com/dotnet/machinelearning/files/13517493/ml-lgbm-access-database-twice.json)**\r\nCreate a database loader for the data, see [this ipynb](https://github.com/dotnet/machinelearning/files/13517493/ml-lgbm-access-database-twice.json) (change from json to ipynb)\r\ndownload [QDB ](https://questdb.io/get-questdb/) and install\r\nmy data is from [here](https://www.kaggle.com/competitions/store-sales-time-series-forecasting/data) but you can use your own data\r\n\r\n**Expected behavior**\r\nThe LightGbm trainer should query the database once and not twice.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nDatabase log:\r\n```\r\n2023-11-30T20:35:42.275822Z I server-main os scheduled worker started [name=ilpwriter_0]\r\n2023-11-30T20:35:42.823066Z A server-main enjoy\r\n2023-11-30T20:35:51.589288Z I pg-server connected [ip=127.0.0.1, fd=3436]\r\n2023-11-30T20:35:51.591142Z I i.q.g.SqlCompilerImpl parse [fd=3436, q=xHole where date<'2017-01-01T00:00:00.000000Z']\r\n2023-11-30T20:35:51.600643Z I i.q.g.SqlCompilerImpl plan [q=`select-choose date, store_nbr, family, sfZero, id, sf, sales, onpromotion, sfOpen, sfPromotion, transactions, dcoilwtico, city, local_event, local_type, local_desc, local_transferred, state, regional_event, regional_type, regional_desc, regional_transferred, national_event, national_type, national_desc, national_transferred, type, cluster, doywoy, yearcount, monthCount, weekOfYear, DayOfWeek, DayOfMonth, daysCounter, monthProgress, dayOfYear, yearProgress, Weekend, quarter, RANAD, familysfOpen from (select [date, store_nbr, family, sfZero, id, sf, sales, onpromotion, sfOpen, sfPromotion, transactions, dcoilwtico, city, local_event, local_type, local_desc, local_transferred, state, regional_event, regional_type, regional_desc, regional_transferred, national_event, national_type, national_desc, national_transferred, type, cluster, doywoy, yearcount, monthCount, weekOfYear, DayOfWeek, DayOfMonth, daysCounter, monthProgress, dayOfYear, yearProgress, Weekend, quarter, RANAD, familysfOpen] from xHole timestamp (date) where date < '2017-01-01T00:00:00.000000Z')`, fd=3436]\r\n2023-11-30T20:35:51.605458Z I i.q.c.TableReader open partition C:\\qdbroot\\db\\xHole\\2013 [rowCount=650430, partitionNameTxn=-1, transientRowCount=433026, partitionIndex=0, partitionCount=5]\r\n2023-11-30T20:35:51.608417Z I i.q.c.TableReader open partition C:\\qdbroot\\db\\xHole\\2014 [rowCount=655776, partitionNameTxn=-1, transientRowCount=433026, partitionIndex=1, partitionCount=5]\r\n2023-11-30T20:35:51.611011Z I i.q.c.TableReader open partition C:\\qdbroot\\db\\xHole\\2015 [rowCount=650430, partitionNameTxn=-1, transientRowCount=433026, partitionIndex=2, partitionCount=5]\r\n2023-11-30T20:35:51.613647Z I i.q.c.TableReader open partition C:\\qdbroot\\db\\xHole\\2016 [rowCount=669042, partitionNameTxn=-1, transientRowCount=433026, partitionIndex=3, partitionCount=5]\r\n2023-11-30T20:36:04.985713Z I i.q.g.SqlCompilerImpl parse [fd=-1, q=DISCARD ALL]\r\n2023-11-30T20:36:04.985903Z I i.q.c.p.PGConnectionContext exec [fd=3436, q=xHole where date<'2017-01-01T00:00:00.000000Z']\r\n2023-11-30T20:36:04.985926Z I i.q.c.p.PGConnectionContext query cache used [fd=3436]\r\n2023-11-30T20:36:31.160548Z I i.q.g.SqlCompilerImpl parse [fd=-1, q=DISCARD ALL]\r\n2023-11-30T20:36:31.160893Z I i.q.g.SqlCompilerImpl parse [fd=3436, q=xHole where date<'2017-08-16T00:00:00.000000Z' AND date>='2017-01-01T00:00:00.000000Z']\r\n2023-11-30T20:36:31.163041Z I i.q.g.SqlCompilerImpl plan [q=`select-choose date, store_nbr, family, sfZero, id, sf, sales, onpromotion, sfOpen, sfPromotion, transactions, dcoilwtico, city, local_event, local_type, local_desc, local_transferred, state, regional_event, regional_type, regional_desc, regional_transferred, national_event, national_type, national_desc, national_transferred, type, cluster, doywoy, yearcount, monthCount, weekOfYear, DayOfWeek, DayOfMonth, daysCounter, monthProgress, dayOfYear, yearProgress, Weekend, quarter, RANAD, familysfOpen from (select [date, store_nbr, family, sfZero, id, sf, sales, onpromotion, sfOpen, sfPromotion, transactions, dcoilwtico, city, local_event, local_type, local_desc, local_transferred, state, regional_event, regional_type, regional_desc, regional_transferred, national_event, national_type, national_desc, national_transferred, type, cluster, doywoy, yearcount, monthCount, weekOfYear, DayOfWeek, DayOfMonth, daysCounter, monthProgress, dayOfYear, yearProgress, Weekend, quarter, RANAD, familysfOpen] from xHole timestamp (date) where date < '2017-08-16T00:00:00.000000Z' and date >= '2017-01-01T00:00:00.000000Z')`, fd=3436]\r\n2023-11-30T20:36:31.164073Z I i.q.c.TableReader open partition C:\\qdbroot\\db\\xHole\\2017 [rowCount=433026, partitionNameTxn=-1, transientRowCount=433026, partitionIndex=4, partitionCount=5]\r\n```\r\n![image](https://github.com/dotnet/machinelearning/assets/79865853/87ef46ac-19d6-4fbe-9b3c-1e34a4c0a29a)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6897","RelatedDescription":"Open issue \"LightGbm Regression Trainer Multiple Unneeded Database Access\" (#6897)"},{"Id":"2015361932","IsPullRequest":true,"CreatedAt":"2023-11-29T20:31:24","Actor":"fuszenecker","Number":"6894","RawContent":null,"Title":"Added missing TF_StringEncodedSize.","State":"closed","Body":"Fixes #6893\r\n\r\nIn the recent versions of TensorFlow, the method `TF_StringEncodedSize` was removed.\r\nI implemented the same code in C#, also added new props for separate `SciSharp.TensorFlow.Redist-Linux-GPU` and `SciSharp.TensorFlow.Redist-Windows-GPU` packages.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [X] There's a descriptive title that will make sense to other developers some time from now. \r\n- [X] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [X] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [X] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6894","RelatedDescription":"Closed or merged PR \"Added missing TF_StringEncodedSize.\" (#6894)"},{"Id":"2014224901","IsPullRequest":false,"CreatedAt":"2023-11-28T11:27:05","Actor":"80LevelElf","Number":"6892","RawContent":null,"Title":"OneDAL FastForest training has an IndexOutOfRange exception for ML.net 3","State":"open","Body":"**System Information (please complete the following information):**\r\nOS & Version: mcr.microsoft.com/dotnet/sdk:5.0 docker image (Linux Alpine)\r\nML.NET Version: 3.0.0\r\n.NET Version: NET 5.0\r\n\r\n```\r\nSystem.AggregateException: One or more errors occurred. (Index was outside the bounds of the array.)\\n ---> \r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\\n   at \r\nMicrosoft.ML.Trainers.FastTree.InternalRegressionTree.PopulateThresholds(Dataset dataset)\\n   at \r\nMicrosoft.ML.Trainers.FastTree.FastForestBinaryTrainer.TrainCoreOneDal(IChannel ch, Factory cursorFactory, Int32 featureCount)\\n   at \r\nMicrosoft.ML.Trainers.FastTree.FastForestBinaryTrainer.TrainModelCore(TrainContext context)\\n   at \r\nMicrosoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\\n   at \r\nMicrosoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\\n   at \r\nMicrosoft.ML.TrainCatalogBase.CrossValidateTrain(IDataView data, IEstimator`1 estimator, Int32 numFolds, String samplingKeyColumn, Nullable`1 seed)\\n   at\r\n Microsoft.ML.BinaryClassificationCatalog.CrossValidateNonCalibrated(IDataView data, IEstimator`1 estimator, Int32 numberOfFolds, String labelColumnName, String samplingKeyColumnName, Nullable`1 seed)\\n   at \r\nMicrosoft.ML.AutoML.BinaryClassificationRunner.Run(TrialSettings settings)\\n   at \r\nMicrosoft.ML.AutoML.BinaryClassificationRunner.RunAsync(TrialSettings settings, CancellationToken ct)\\n   at \r\nMicrosoft.ML.AutoML.AutoMLExperiment.RunAsync(CancellationToken ct)\\n   --- End of inner exception stack trace ---\\n   at \r\nSystem.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\\n   at System.Threading.Tasks.Task`1.get_Result()\\n   at Microsoft.ML.AutoML.AutoMLExperiment.Run()\\n   at\r\n Microsoft.ML.AutoML.BinaryClassificationExperiment.Execute(IDataView trainData, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\\n   at\r\n Microsoft.ML.AutoML.BinaryClassificationExperiment.Execute(IDataView trainData, String labelColumnName, String samplingKeyColumn, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/6892","RelatedDescription":"Open issue \"OneDAL FastForest training has an IndexOutOfRange exception for ML.net 3\" (#6892)"},{"Id":"2009298754","IsPullRequest":false,"CreatedAt":"2023-11-28T08:55:26","Actor":"IldarKhayrutdinov","Number":"6890","RawContent":null,"Title":"nuget packages 3.0","State":"closed","Body":"Please publish nuget packages for the latest release.","Url":"https://github.com/dotnet/machinelearning/issues/6890","RelatedDescription":"Closed issue \"nuget packages 3.0\" (#6890)"},{"Id":"2013189238","IsPullRequest":false,"CreatedAt":"2023-11-27T22:04:27","Actor":"superichmann","Number":"6891","RawContent":null,"Title":"Undocumented Behavior of FilterRowsByColumn ","State":"open","Body":"what is the exact type that the column we filter on should have?\r\nSingle?\r\nDouble?\r\nBoth?\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a8702f4a-4af4-3b42-53c1-7c2f9cf16a5f\r\n* Version Independent ID: 49c92237-80e4-55a0-ad26-27ecced0676a\r\n* Content: [DataOperationsCatalog.FilterRowsByColumn Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.filterrowsbycolumn?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6891","RelatedDescription":"Open issue \"Undocumented Behavior of FilterRowsByColumn \" (#6891)"},{"Id":"2008457168","IsPullRequest":false,"CreatedAt":"2023-11-23T15:32:52","Actor":"VadimPeczynski","Number":"6889","RawContent":null,"Title":"Field with type string cannot be transformed for one hot encoder","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10 \r\n - ML.NET Version: ML.NET v3.0.0-preview.23511.1\r\n - .NET Version: .NET 7.0\r\n\r\n**Describe the bug**\r\nI'm not able to process the data which I'm providing, when I'm using in the model one hot encoder. The string can not be processed.\r\n![image](https://github.com/dotnet/machinelearning/assets/28846353/37454c0a-4201-4380-8ec9-77b03e07360e)\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n//Define DataViewSchema for data preparation pipeline and trained model\r\nDataViewSchema dataPrepPipelineSchema, modelSchema;\r\n\r\n// Load trained model\r\nITransformer dataPrepPipeline = mlContext.Model.Load(\"data_preparation_pipeline.zip\", out dataPrepPipelineSchema);\r\nITransformer predictionPipeline = mlContext.Model.Load(\"model.zip\", out modelSchema);\r\n\r\n//Load New Data\r\nvar newData = DataFrame.LoadCsv(\"data/input.csv\");\r\n\r\n// Preprocess Data\r\nIDataView transformedNewData = dataPrepPipeline.Transform(newData);\r\n\r\nIDataView predictions = predictionPipeline.Transform(transformedNewData);\r\n```\r\n\r\n**Expected behavior**\r\nModel can load data with type string\r\n[data_preparation_pipeline.zip](https://github.com/dotnet/machinelearning/files/13451636/data_preparation_pipeline.zip)\r\n[model.zip](https://github.com/dotnet/machinelearning/files/13451637/model.zip)\r\n[input.csv](https://github.com/dotnet/machinelearning/files/13451641/input.csv)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6889","RelatedDescription":"Open issue \"Field with type string cannot be transformed for one hot encoder\" (#6889)"},{"Id":"2005958624","IsPullRequest":true,"CreatedAt":"2023-11-22T19:35:14","Actor":"michaelgsharp","Number":"6888","RawContent":null,"Title":"Release notes for 3.0","State":"closed","Body":"Final release notes for 3.0","Url":"https://github.com/dotnet/machinelearning/pull/6888","RelatedDescription":"Closed or merged PR \"Release notes for 3.0\" (#6888)"},{"Id":"1997644840","IsPullRequest":false,"CreatedAt":"2023-11-16T19:49:11","Actor":"asmirnov82","Number":"6887","RawContent":null,"Title":"Move DataFrame into separate repo without any dependency on ML .Net libraries","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently DataFrame release cycle depends on ML .NET (major version of the DataFrame is released with ML .NET once a year) \r\nDataFrame nuget package also has depency on Microsoft.ML.DataView (which is not required for some of the users, that use DataFrame for data analysis without using ML .Net features).\r\n\r\nHaving separate DataFrame repo without dependency on ML. NET will allow to increase the speed of development  new DataFrame \r\nfeatures and decrease time to market.\r\nHaving ML .NET dependency on particular version of DataFrame nuget package instead of the latest on the other hand increases stability of ML .NET. It aslo allows ML .NET to support wider range of .Net framework, while the newest version of the DataFrame may drop support of legacy .Net standard and go on with the latest LTS only.\r\n\r\n**Describe the solution you'd like**\r\nML .Net should provide extension methods for converting the DataFrame into IDataView and backward, also it should provide ML specific columns (currently VBufferDataFrameColumn) .\r\n\r\nThe DataFrame shouldn't have any specific ML .NET columns and functionality (only Apache Arrow compatible types) and no dependencies on ML .NET packages.\r\n\r\nThe DataFrame should be moved to a separate repo.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6887","RelatedDescription":"Open issue \"Move DataFrame into separate repo without any dependency on ML .Net libraries\" (#6887)"},{"Id":"1993335134","IsPullRequest":false,"CreatedAt":"2023-11-14T18:40:27","Actor":"gktval","Number":"6886","RawContent":null,"Title":"Image clasification not working for onnx model","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: 2.0.1\r\n - .NET Version: .Net 7\r\n\r\n**Describe the bug**\r\nI am loading an model trained in tensorflow and then converted to an onnx model. When making predictions, all the outputs are the first class even though they should not be. Also the prediction values vary only by a little. Here is an example of two output predictions:\r\n\r\n[1.5047534,  -0.16131932, 0.71119475]\r\n[1.5056, -0.16168906, 0.7110559]\r\n\r\nThis seems odd that there are negative values. So I don't think it is correct from that aspect. I thought it might be because the model was trained on RGBA but the MLContext transform uses ARGB/ABGR/etc. I tried switching the channels of the input images, but this did not help.  Any ideas of what I am doing wrong with my code below?\r\n\r\nThis classification model is almost identical to the model I trained with, except I am using 4 bands instead of 3: https://www.tensorflow.org/tutorials/images/classification\r\n\r\nHere is the code for loading the model: \r\n\r\n```\r\nITransformer GetPredictionPipeline(MLContext mlContext)\r\n{\r\nvar pipeline2 = mlContext\r\n.Transforms\r\n// Adjust the image to the required model input size\r\n.ResizeImages(\r\n    inputColumnName: \"sequential_input\",\r\n    imageWidth: 224,\r\n    imageHeight: 224,\r\n    outputColumnName: \"resized\"\r\n)\r\n// Extract the pixels form the image as a 1D float array, but keep them in the same order as they appear in the image.\r\n.Append(mlContext.Transforms.ExtractPixels(\r\n    inputColumnName: \"resized\",\r\n    colorsToExtract: Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorBits.All,\r\n    orderOfExtraction: Microsoft.ML.Transforms.Image.ImagePixelExtractingEstimator.ColorsOrder.ARGB,\r\n    outputColumnName: \"sequential_input\",\r\n    scaleImage: 1 / 255f)\r\n)\r\n// Perform the estimation\r\n.Append(mlContext.Transforms.ApplyOnnxModel(\r\n        modelFile: \"./model.onnx\",\r\n        inputColumnName: \"sequential_input\",\r\n        outputColumnName: \"dense_1,\r\n        gpuDeviceId: 0\r\n    )\r\n);\r\n\r\nvar emptyDv = mlContext.Data.LoadFromEnumerable(new OnnxInput[] { });\r\n\r\nvar model = pipeline2.Fit(emptyDv);\r\nreturn model;\r\n}\r\n```\r\n\r\nMy input/output look like this:\r\n```\r\npublic class OnnxInput\r\n{\r\n    public const int ImageWidth = 224;\r\n    public const int ImageHeight = 224;\r\n\r\n    [ColumnName(\"sequential_input\")]\r\n    [ImageType(ImageWidth, ImageHeight)]\r\n    public MLImage Image { get; set; }\r\n}\r\n\r\npublic class OnnxOutput\r\n{\r\n    [ColumnName(\"dense_1\")]\r\n    public float[] Output { get; set; }\r\n}\r\n```\r\n\r\nFinally, the prediction looks like this:\r\n```\r\nMLContext mlContext = new MLContext();\r\nvar onnxPredictionPipeline = GetPredictionPipeline(mlContext);\r\nvar onnxPredictionEngine = mlContext.Model.CreatePredictionEngine<OnnxInput, OnnxOutput>(onnxPredictionPipeline);\r\n\r\nfor (int j = 0; j < files.Length; j++)\r\n{\r\n    string pngFile = files[i];\r\n\r\n    // Create single instance of sample data from first line of dataset for model input\r\n    var mlImage = MLImage.CreateFromFile(pngFile);\r\n    var testInput = new OnnxInput\r\n    {\r\n        Image = mlImage \r\n    };\r\n    var prediction = onnxPredictionEngine.Predict(testInput);\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6886","RelatedDescription":"Open issue \"Image clasification not working for onnx model\" (#6886)"},{"Id":"1991547787","IsPullRequest":false,"CreatedAt":"2023-11-13T21:53:58","Actor":"anrouxel","Number":"6884","RawContent":null,"Title":"ONNX Named Entity Recognizer #6883 ","State":"open","Body":"Hello,\r\n**Is your feature request related to a problem? Please describe.**\r\nMy problem is that the Named Entity Recognizer doesn't support saving in ONNX. And, I'm working on a student project which is the creation of a medical application. And I need to extract information from a prescription (stored in a string) such as the name of the medicine. This model needs to be able to be used on other libraries.\r\n\r\n**Describe the solution you'd like**\r\nThe solution would be for the Named Entity Recognizer to support ONNX registration.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n**Additional context**\r\n\r\nBest Regards,\r\n\r\nanrouxel","Url":"https://github.com/dotnet/machinelearning/issues/6884","RelatedDescription":"Open issue \"ONNX Named Entity Recognizer #6883 \" (#6884)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-12-18T03:30:17.4327343Z","RunDurationInMilliseconds":492}