{"Data":{"GitHub":{"Issues":[{"Id":"645715124","IsPullRequest":true,"CreatedAt":"2020-07-02T04:39:21","Actor":"wangyems","Number":"5257","RawContent":null,"Title":"Add two-variable scenario in Tensor shape inference for TensorflowTransform","State":"closed","Body":"fix [4364](https://github.com/dotnet/machinelearning/issues/4364)\r\n\r\nThere are a couple of image related scenarios that tensor shape inferencing should handle (tensor usually has shape [W,H,C] or [N,W,H,C] and usually W = H), the first three are covered by current implementation. This PR added the fourth one.\r\n1, [?, ?, C]\r\n2, [?, W, H, C]\r\n3, [N, ?, ?, C]\r\n4, [?, ?, ?, C] (added in this PR)\r\n\r\nThere was another [PR](https://github.com/dotnet/machinelearning/pull/4509) that attempted to resolve this in the past and it considered scenarios like [?, W, ?, C] or [?, ?, H, C] but I am not sure(and never seen) these could be any deep learning scenarios. We can discuss this since I could be wrong and I will add those scenarios if necessary. ","Url":"https://github.com/dotnet/machinelearning/pull/5257","RelatedDescription":"Closed or merged PR \"Add two-variable scenario in Tensor shape inference for TensorflowTransform\" (#5257)"},{"Id":"649092041","IsPullRequest":false,"CreatedAt":"2020-07-02T03:31:17","Actor":"lisahua","Number":"5274","RawContent":null,"Title":"[TimeSeries Explanation] Score is NaN","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: .Net 4.8\r\n- **.NET Version (eg., dotnet --info)**: ML.Net 1.5.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**  Invoke `var prediction = this.mlContext.AnomalyDetection.LocalizeRootCause(input);`\r\n- **What happened?** `rootCauseItem.Score = double.NaN`\r\n- **What did you expect?** Should return a meaningful score (either 0 or 1)\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n```\r\nstring jsonString = \"\"{\\\"AnomalyTimestamp\\\":\\\"1997-05-19T00:00:00\\\",\\\"AnomalyDimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"\\\"},\\\"Slices\\\":[{\\\"TimeStamp\\\":\\\"1997-05-19T00:00:00\\\",\\\"Points\\\":[{\\\"Value\\\":8995.35,\\\"ExpectedValue\\\":-120.28187410606782,\\\"IsAnomaly\\\":true,\\\"Dimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"Beverages\\\"},\\\"Delta\\\":9115.6318741060677},{\\\"Value\\\":1282.02,\\\"ExpectedValue\\\":1374.808978001977,\\\"IsAnomaly\\\":false,\\\"Dimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"Condiments\\\"},\\\"Delta\\\":-92.788978001977057},{\\\"Value\\\":1686.7,\\\"ExpectedValue\\\":2014.8946291211198,\\\"IsAnomaly\\\":false,\\\"Dimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"Confections\\\"},\\\"Delta\\\":-328.19462912111976},{\\\"Value\\\":174.15,\\\"ExpectedValue\\\":215.02809847811903,\\\"IsAnomaly\\\":false,\\\"Dimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"Dairy Products\\\"},\\\"Delta\\\":-40.878098478119028},{\\\"Value\\\":12138.22,\\\"ExpectedValue\\\":9066.203,\\\"IsAnomaly\\\":true,\\\"Dimension\\\":{\\\"__Sandbox.Categories.CategoryName__\\\":\\\"\\\"},\\\"Delta\\\r\n\":3072.017}]}],\\\"AggregateType\\\":0,\\\"AggregateSymbol\\\":\\\"\\\"}\"\r\n\";\r\nvar input = JsonConvert.DeserializeObject<RootCauseLocalizationInput>(jsonString); // using Newtonsoft.Json\r\nvar prediction = this.mlContext.AnomalyDetection.LocalizeRootCause(input);\r\n```\r\nThe input is like:\r\n```\r\n{\r\n\t\"AnomalyTimestamp\": \"1997-05-19T00:00:00\",\r\n\t\"AnomalyDimension\": {\r\n\t\t\"__Sandbox.Categories.CategoryName__\": \"\"\r\n\t},\r\n\t\"Slices\": [\r\n\t\t{\r\n\t\t\t\"TimeStamp\": \"1997-05-19T00:00:00\",\r\n\t\t\t\"Points\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Value\": 8995.35,\r\n\t\t\t\t\t\"ExpectedValue\": -120.28187410606782,\r\n\t\t\t\t\t\"IsAnomaly\": true,\r\n\t\t\t\t\t\"Dimension\": {\r\n\t\t\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"Beverages\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Delta\": 9115.631874106068\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Value\": 1282.02,\r\n\t\t\t\t\t\"ExpectedValue\": 1374.808978001977,\r\n\t\t\t\t\t\"IsAnomaly\": false,\r\n\t\t\t\t\t\"Dimension\": {\r\n\t\t\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"Condiments\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Delta\": -92.78897800197706\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Value\": 1686.7,\r\n\t\t\t\t\t\"ExpectedValue\": 2014.8946291211199,\r\n\t\t\t\t\t\"IsAnomaly\": false,\r\n\t\t\t\t\t\"Dimension\": {\r\n\t\t\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"Confections\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Delta\": -328.19462912111978\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Value\": 174.15,\r\n\t\t\t\t\t\"ExpectedValue\": 215.02809847811904,\r\n\t\t\t\t\t\"IsAnomaly\": false,\r\n\t\t\t\t\t\"Dimension\": {\r\n\t\t\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"Dairy Products\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Delta\": -40.87809847811903\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"Value\": 12138.22,\r\n\t\t\t\t\t\"ExpectedValue\": 9066.203,\r\n\t\t\t\t\t\"IsAnomaly\": true,\r\n\t\t\t\t\t\"Dimension\": {\r\n\t\t\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Delta\": 3072.017\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\t\"AggregateType\": 0,\r\n\t\"AggregateSymbol\": \"\"\r\n}\r\n```\r\nAnd the output:\r\n\r\n```\r\n{\r\n\t\"Items\": [\r\n\t\t{\r\n\t\t\t\"Score\": \"NaN\",\r\n\t\t\t\"Path\": [\r\n\t\t\t\t\"__Sandbox.Categories.CategoryName__\"\r\n\t\t\t],\r\n\t\t\t\"Dimension\": {\r\n\t\t\t\t\"__Sandbox.Categories.CategoryName__\": \"Beverages\"\r\n\t\t\t},\r\n\t\t\t\"Direction\": 0\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5274","RelatedDescription":"Closed issue \"[TimeSeries Explanation] Score is NaN\" (#5274)"},{"Id":"649426349","IsPullRequest":true,"CreatedAt":"2020-07-01T23:56:23","Actor":"frank-dong-ms","Number":"5275","RawContent":null,"Title":"Issue 5051 - ignore duplicate header when load data","State":"open","Body":"address #5051 \r\n1. ignore extra header in line reader of text loader \r\n2. enhance logging\r\n3. corresponding test\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5275","RelatedDescription":"Open PR \"Issue 5051 - ignore duplicate header when load data\" (#5275)"},{"Id":"646129970","IsPullRequest":true,"CreatedAt":"2020-07-01T22:33:11","Actor":"mstfbl","Number":"5261","RawContent":null,"Title":"Fixed score column name and order bugs in CalibratorTransformer","State":"closed","Body":"Fix #4700 \r\n\r\nAs explained in #4700, the column order in which the Score column is given to `PlattCalibratorTransformer` exposes a bug in `CalibratorTransformer` where the name and the location of the score column is hard-coded. This PR fixes this hard-coding, where now the name and order of the score column given to `CalibratorTransformer` can be different than the default values.\r\n\r\nI have also added unit tests to confirm these changes with respect to direct non-standard column name tests and Onnx Conversions.","Url":"https://github.com/dotnet/machinelearning/pull/5261","RelatedDescription":"Closed or merged PR \"Fixed score column name and order bugs in CalibratorTransformer\" (#5261)"},{"Id":"647414442","IsPullRequest":false,"CreatedAt":"2020-07-01T20:14:08","Actor":"Ellyster","Number":"5264","RawContent":null,"Title":"Using \"nameof\" in \"outputColumnName\" of \"MapKeyToValue\"","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Enterprise\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 3.1\r\n\r\n### Issue\r\n- **What did you do?**\r\nAdapted the Iris as a canary model for our company internal ML platform based on ML.Net.\r\n\r\n- **What happened?**\r\nUsing to `nameof(IrisModelOutput.Species)`  select the output column name doesn't work.\r\n\r\n```cs\r\npublic class IrisModelOutput\r\n    {\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public string Species { get; set; }\r\n\r\n        public float[] Score { get; set; }\r\n    }\r\n```\r\n\r\nIf the prediction result DTO `Species` is annotated with `[ColumnName(\"PredictedLabel\")]` if gives an error; if it isn't annotated, it comes empty in the prediction.\r\n\r\n- **What did you expect?**\r\nThat the predicted species is mapped back to `Species`.\r\n\r\n### Source code / logs\r\nIn this pipeline's `MapKeyToValue` doesn't work as expected:\r\n```cs\r\nPipeline = MlContext.Transforms.Concatenate(outputColumnName: \"Features\", inputColumnNames: new[]\r\n                {\r\n                    nameof(IrisModelInput.SepalLength),\r\n                    nameof(IrisModelInput.SepalWidth),\r\n                    nameof(IrisModelInput.PetalLength),\r\n                    nameof(IrisModelInput.PetalWidth)\r\n                })\r\n                .Append(MlContext.Transforms.Conversion.MapValueToKey(outputColumnName: \"Label\", inputColumnName: nameof(IrisModelInput.Species)))\r\n                .Append(MlContext.MulticlassClassification.Trainers.SdcaNonCalibrated(labelColumnName: \"Label\", featureColumnName: \"Features\"))\r\n                .Append(MlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: nameof(IrisModelOutput.Species), inputColumnName: \"Label\"));\r\n```\r\nBut using the following alternative sintaxis for the last append works correctly:\r\n```csharp\r\n.Append(MlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5264","RelatedDescription":"Closed issue \"Using \"nameof\" in \"outputColumnName\" of \"MapKeyToValue\"\" (#5264)"},{"Id":"646008734","IsPullRequest":true,"CreatedAt":"2020-07-01T19:54:02","Actor":"frank-dong-ms","Number":"5260","RawContent":null,"Title":"fix issue 4322, enable lda summary output","State":"closed","Body":"fix issue 4322: https://github.com/dotnet/machinelearning/issues/4322\r\n1. output topic summary to model file when OutputTopicWordSummary is set to true\r\n2. open public API from lda transformer to get topic summary\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5260","RelatedDescription":"Closed or merged PR \"fix issue 4322, enable lda summary output\" (#5260)"},{"Id":"648588680","IsPullRequest":true,"CreatedAt":"2020-07-01T17:20:32","Actor":"frank-dong-ms","Number":"5272","RawContent":null,"Title":"remove test data clean up step","State":"closed","Body":"see below error during test data clean up stage, try to remove this stage as this might be unnecessary we already fine tune disk usage:\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=710808&view=logs&j=f50056e9-8f98-53f0-451e-59b00a9fd1aa&t=c630d711-0b9f-5f2b-2dc5-62892e1fb5ae\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5272","RelatedDescription":"Closed or merged PR \"remove test data clean up step\" (#5272)"},{"Id":"648948335","IsPullRequest":false,"CreatedAt":"2020-07-01T12:37:55","Actor":"ladodc","Number":"5273","RawContent":null,"Title":"Error on prediction with LSTM Model in ONNX Format in ML.Net","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 3.1, Microsoft.ML 1.5.0, Microsoft.ML.OnnxRuntime 1.3.0, Microsoft.ML.OnnxTransformer 1.5.0\r\n\r\n### Issue\r\nI would like to predict Values with my LSTM Model in ONNX Format. I am struggling on data input for my ONNX Model in my ML.NET project. When I run my code, I get an Exception: _System.NullReferenceException: 'Object reference not set to an instance of an object.'_ on prediction. The input data is just dummy. I am trying to find out, how to input data in form (None,3,7) as expected from LSTM Model. LSTM Model ist attached. Can someone help me, what I am doing wrong?\r\nWhy I get exception or how to deliver data for my ONNX Model. \r\n\r\n```C#\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\nusing System;\r\nusing System.Data.SqlClient;\r\n\r\nnamespace InQu.ML.Test.ONNX.FehlerAbschätzungLSTM\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext();\r\n            \r\n            var x = new InputData[] { \r\n                        new InputData() { X = new float[,] { { 1, 2, 3, 4, 5, 6, 7 }, { 1, 2, 3, 4, 5, 6, 7 }, { 1, 2, 3, 4, 5, 6, 7 } } }                       \r\n                    };\r\n\r\n            IDataView dataView = mlContext.Data.LoadFromEnumerable<InputData>(x);\r\n\r\n            var pipeline = mlContext.Transforms.ApplyOnnxModel(modelFile: @\".\\scikit-learn\\AbschatzungFehlerLSTM.onnx\", \r\n                            inputColumnNames: new[] { \"input_layer\",  }, \r\n                            outputColumnNames: new[] { \"dense_3\" });\r\n\r\n            var model = pipeline.Fit(dataView);\r\n            \r\n            var predEngine = mlContext.Model.CreatePredictionEngine<InputData, OutputData>(model);\r\n\r\n            OutputData prediction = new OutputData() { y = new float[0] };\r\n            predEngine.Predict(x[0], ref prediction);\r\n        }\r\n    }\r\n\r\n    public class InputData\r\n    {\r\n        [ColumnName(\"input_layer\")]\r\n        [VectorType(3,7)]\r\n        public float[,] X { get; set; }        \r\n    }\r\n\r\n    public class OutputData\r\n    {\r\n        [ColumnName(\"dense_3\")]\r\n        [VectorType(1)]\r\n        public float[] y { get; set; }\r\n    }\r\n}\r\n\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5273","RelatedDescription":"Open issue \"Error on prediction with LSTM Model in ONNX Format in ML.Net\" (#5273)"},{"Id":"648578397","IsPullRequest":false,"CreatedAt":"2020-07-01T09:09:15","Actor":"go2ready","Number":"5270","RawContent":null,"Title":"CreateEnumerable from key column","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 4.7\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTrying to create Enumerable from IDataView which contains Column with Type Key<UInt32, 0-1059>, into a uint type.\r\n- **What happened?**\r\nEncountered error:\r\n\"Can't bind the IDataView column 'ImpressionIdKey' of type 'Key<UInt32, 0-1059>' to field or property 'ImpressionIdKey' of type 'System.UInt32'.\"\r\n- **What did you expect?**\r\nI want to be able to export key value in its uint format as enumerable\r\n\r\n### Source code / logs\r\n\r\n```\r\n        var a = mlContext.Data.CreateEnumerable<ProcessedData>(\r\n            colSelTrainingData, reuseRowObject: false);\r\n\r\n...\r\n\r\n        private class ProcessedData\r\n        {\r\n            public float[] Feature { get; set; }\r\n\r\n            public float BackProClick { get; set; }\r\n\r\n            public uint ImpressionIdKey { get; set; }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5270","RelatedDescription":"Closed issue \"CreateEnumerable from key column\" (#5270)"},{"Id":"648483511","IsPullRequest":true,"CreatedAt":"2020-07-01T01:41:15","Actor":"klausmh","Number":"5269","RawContent":null,"Title":"Fix for conditional error in root cause analysis additions","State":"closed","Body":"Fix for error in refactoring RCA code. This establishes the same logic in the `OrderDimensions` code as in the previous version, cf. https://github.com/dotnet/machinelearning/blob/1c2469fb8c99afa45531fa9ecca67598291a2288/src/Microsoft.ML.TimeSeries/RootCauseAnalyzer.cs#L460\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5269","RelatedDescription":"Closed or merged PR \"Fix for conditional error in root cause analysis additions\" (#5269)"},{"Id":"648582534","IsPullRequest":false,"CreatedAt":"2020-07-01T00:23:24","Actor":"go2ready","Number":"5271","RawContent":null,"Title":"ConvertToOnnx options to exclude the data generation pipeline","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 4.7\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCalling `mlContext.Model.ConvertToOnnx(model, colSelTrainingData2, fs);`\r\n\r\nOf which `model ` involved data transformations pipeline like encoding, concatenating and column manipulation.\r\n\r\n- **What happened?**\r\n\r\nAll the data transformation pipeline is included in the final ONNX model, which I do not want. \r\n\r\n- **What did you expect?**\r\n\r\nI want the model to tramsformed into an ONNX model where the InputColumn is the InputColumn that is fit to the model, excluding all the data transformations pipeline like encoding, concatenating and column manipulation before fitted to the model.\r\n\r\n### Source code / logs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5271","RelatedDescription":"Open issue \"ConvertToOnnx options to exclude the data generation pipeline\" (#5271)"},{"Id":"647891976","IsPullRequest":true,"CreatedAt":"2020-06-30T19:40:58","Actor":"frank-dong-ms","Number":"5268","RawContent":null,"Title":"address build version issue and enhance logging","State":"closed","Body":"part of issue #5266\r\n\r\n1. address issue \"error CS7035: The specified version string does not conform to the recommended format - major.minor.build.revision\", one build definition sample of similar issue: https://dev.azure.com/dnceng/public/_build/results?buildId=656357&view=logs&j=28859320-f5de-51e0-1fd2-7bea8c11cf7a&t=ed8fb6c3-76d9-56ef-25a2-06e3456edf43\r\n\r\nThis issue looks like a bug in msbuild versioning. This only happens when the build is crossing 2 days as msbuild versioning is generating versioning file each day so when some project starts to build when the system time is crossing to new day, seems msbuild versioning can't handle this case and read empty BuildNumberMajor and BuildNumberMinor sometimes which cause the assembly version number to be a invalid format.\r\n\r\nI can repro this issue by set system time to a time very close to midnight, say 11:58 PM then start build from cmd, there is pretty good chance to repro the build version issue. Since we don't have a way to upgrade build tools now I will use default value of BuildNumberMajor and BuildNumberMinor to mitigate this issue.\r\n\r\n2. enhance logging","Url":"https://github.com/dotnet/machinelearning/pull/5268","RelatedDescription":"Closed or merged PR \"address build version issue and enhance logging\" (#5268)"},{"Id":"640777004","IsPullRequest":true,"CreatedAt":"2020-06-30T16:42:46","Actor":"Lynx1820","Number":"5246","RawContent":null,"Title":"Enabling custom groupId column in the Ranking AutoML experiment","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5246","RelatedDescription":"Closed or merged PR \"Enabling custom groupId column in the Ranking AutoML experiment\" (#5246)"},{"Id":"645470923","IsPullRequest":false,"CreatedAt":"2020-06-30T16:12:08","Actor":"ladodc","Number":"5256","RawContent":null,"Title":"AutoML Exception: System.ArgumentOutOfRangeException: 'Could not find input column 'SamplingKeyColumn' (Parameter 'inputSchema')'","State":"closed","Body":"Hi, I get an exception on prediction with AutoML. \r\nBefore you run the Problem you need to reference two NuGet Packages Microsoft.ML and Microsoft.ML.AutoML\r\nHere ist the complete code to reproduce the error. Run in VS2019:\r\n\r\n```C#\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.AutoML;\r\nusing Microsoft.ML.Data;\r\nusing Microsoft.ML.Trainers.FastTree;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing static Microsoft.ML.DataOperationsCatalog;\r\n\r\nnamespace AutoML\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var examples = GenerateData(100);\r\n\r\n            var dataview = mlContext.Data.LoadFromEnumerable(examples);\r\n\r\n            TrainTestData trainTestSplit = mlContext.Data.TrainTestSplit(dataview, testFraction: 0.1, samplingKeyColumnName: null);\r\n            IDataView trainingData = trainTestSplit.TrainSet;\r\n            IDataView testData = trainTestSplit.TestSet;\r\n\r\n            ITransformer model = TrainRegresionAutoML(trainingData);\r\n            ReportOnFeatureImportance(mlContext, model, dataview);            \r\n\r\n            OutputData prediction = PredictRegresinAutoML<InputData,OutputData>(model, new InputData(){A = 6, B = 6});          \r\n        }\r\n\r\n        static ITransformer TrainRegresionAutoML(IDataView trainData)\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var settings = new RegressionExperimentSettings\r\n            {\r\n                MaxExperimentTimeInSeconds = 10, // In Second\r\n                OptimizingMetric = RegressionMetric.RSquared,\r\n                CacheDirectory = null\r\n            };\r\n\r\n            var experiment = mlContext.Auto().CreateRegressionExperiment(settings);\r\n            \r\n            var model = experiment.Execute(trainData);            \r\n\r\n\r\n            return model.BestRun.Model;\r\n        }\r\n\r\n        private static void ReportOnFeatureImportance(MLContext context, ITransformer model, IDataView data)\r\n        {            \r\n            // Need to cast from the ITransformer interface to gain access to the LastTransformer property.\r\n            var typedModel = (TransformerChain<IPredictionTransformer<object>>)model;\r\n            var modelParams = typedModel.LastTransformer.Model as FastTreeRegressionModelParameters;\r\n            var weights = new VBuffer<float>();\r\n            modelParams.GetFeatureWeights(ref weights);            \r\n        }\r\n\r\n        static TDst PredictRegresinAutoML<TSrc, TDst>(ITransformer model, TSrc inputData) \r\n            where TSrc : class\r\n            where TDst : class, new()\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n\r\n            var predictor = mlContext.Model.CreatePredictionEngine<TSrc, TDst>(model);\r\n            return predictor.Predict(inputData);\r\n        }      \r\n\r\n        private static IEnumerable<InputData> GenerateData(int count,\r\n            int seed = 0)\r\n\r\n        {\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                for (int ii = 0; ii < count; ii++)\r\n                {\r\n                    yield return new InputData\r\n                    {\r\n                        A = i,\r\n                        B = ii,\r\n                        Value = i * ii\r\n                    };\r\n                }\r\n            }\r\n        }       \r\n    }\r\n\r\n    public class InputData\r\n    {     \r\n        public float A { get; set; }\r\n        \r\n        public float B { get; set; }\r\n\r\n        [ColumnName(\"Label\")]\r\n        public float Value { get; set; }\r\n    }\r\n\r\n    public class OutputData\r\n    {\r\n        [ColumnName(\"Score\")]\r\n        public float Result;\r\n    }\r\n\r\n    public class FeatureImportance\r\n    {\r\n        public string Name { get; set; }\r\n\r\n        public double RSquaredMean { get; set; }\r\n\r\n        public double CorrelationCoefficient { get; set; }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/5256","RelatedDescription":"Closed issue \"AutoML Exception: System.ArgumentOutOfRangeException: 'Could not find input column 'SamplingKeyColumn' (Parameter 'inputSchema')'\" (#5256)"},{"Id":"647696050","IsPullRequest":false,"CreatedAt":"2020-06-29T21:53:01","Actor":"mstfbl","Number":"5267","RawContent":null,"Title":"Property names generated in AutoML's GenerateSampleData() differ from those generated by GenerateClassLabels()","State":"open","Body":"As @LittleLittleCloud noted in [this comment](https://github.com/dotnet/machinelearning/pull/5177#discussion_r446314964) in PR #5177 for fixing Issue #3902, columns generated from inline data are currently named in the following way:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/33f5f32a71cbe6f7a8fb03d75fbdb091d15b8fe8/src/Microsoft.ML.CodeGenerator/Utils.cs#L49-L68\r\n\r\nThis method of directly using `Utils.Normalize` is different from using `GenerateClassLabels` instead to obtain normalized and sanitized column names. `GenerateClassLabels` can accommodate conflicting/duplicate column names, whereas in `GenerateSampleData()` this situation results in exceptions.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/33f5f32a71cbe6f7a8fb03d75fbdb091d15b8fe8/src/Microsoft.ML.CodeGenerator/Utils.cs#L246-L318\r\n\r\nTo-do:\r\n\r\n- Ensure `GenerateSampleData()` can accomodate conflicting/duplicate column names by using `Utils.GenerateClassLabels()`.","Url":"https://github.com/dotnet/machinelearning/issues/5267","RelatedDescription":"Open issue \"Property names generated in AutoML's GenerateSampleData() differ from those generated by GenerateClassLabels()\" (#5267)"},{"Id":"647580293","IsPullRequest":true,"CreatedAt":"2020-06-29T21:29:13","Actor":"frank-dong-ms","Number":"5265","RawContent":null,"Title":"make timeout larger as we are seeing timeouts in CI","State":"closed","Body":"we start to seeing timeouts in CI build so make the timeout larger, this is caused by sometimes download tensorflow meta files are slow(takes more than 10 minutes but normally this takes less than 1 minute), also CI tests runs slow than before:\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=689649&view=logs&j=dd8eddb6-ecc6-5f65-73e6-df90e5693b94\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706453&view=logs&j=87172896-2df6-55a2-04c3-60b48f00f19f\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5265","RelatedDescription":"Closed or merged PR \"make timeout larger as we are seeing timeouts in CI\" (#5265)"},{"Id":"647594596","IsPullRequest":false,"CreatedAt":"2020-06-29T18:58:31","Actor":"frank-dong-ms","Number":"5266","RawContent":null,"Title":"recent CI failure","State":"open","Body":"we are start seeing some ci failure recently:\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=709641&view=results\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706523&view=results\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706453&view=results\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=699015&view=results\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=689649&view=results\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=656357&view=results\r\n\r\nthere are several issues here:\r\n1. error CS7035: The specified version string does not conform to the recommended format - major.minor.build.revision\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=656357&view=results\r\n\r\nthis also happens on local randomly\r\n\r\n2. fatal: unable to access 'https://github.com/mongodb/homebrew-brew/': Failed to connect to github.com port 443: Operation timed out\r\n\r\nError: Fetching /usr/local/Homebrew/Library/Taps/mongodb/homebrew-brew failed!\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=709641&view=logs&j=4b233af4-7b14-5f68-27c6-9c4d7ac87519&t=6c4d0d4f-93f4-59fe-bb3a-eecc956920fe\r\n\r\nlooks like random failure related to github authentication\r\n\r\n3. SavePipePValue failure, new random failure\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706523&view=logs&j=41509eb4-74ce-5e57-61b4-bdf74b39e7c1&t=522d178a-829f-5bff-ccb9-04bea054b64d\r\n\r\n4. benchmark failure, new random failure\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706453&view=logs&j=4b233af4-7b14-5f68-27c6-9c4d7ac87519&t=c45ec5f3-1036-5f06-ba3b-dc6ad6175c22\r\n\r\n[xUnit.net 00:02:08.63]     Microsoft.ML.Benchmarks.Tests.BenchmarksTest.BenchmarksProjectIsNotBroken(type: typeof(Microsoft.ML.Benchmarks.StochasticDualCoordinateAscentClassifierBench)) [FAIL]\r\n// ***** BenchmarkRunner: Start   *****\r\n// ***** Found 2 benchmark(s) in total *****\r\n// ***** Building 1 exe(s) in Parallel: Start   *****\r\n  X Microsoft.ML.Benchmarks.Tests.BenchmarksTest.BenchmarksProjectIsNotBroken(type: typeof(Microsoft.ML.Benchmarks.StochasticDualCoordinateAscentClassifierBench)) [1m 8s]\r\n  Error Message:\r\n   All reports should have at least one \"ExecuteResult\" with \"FoundExecutable\" = true and at least one \"Data\" item\r\nExpected: True\r\nActual:   False\r\n  Stack Trace:\r\n     at Microsoft.ML.Benchmarks.Tests.BenchmarksTest.BenchmarksProjectIsNotBroken(Type type) in /Users/runner/runners/2.170.1/work/1/s/test/Microsoft.ML.Benchmarks.Tests/BenchmarksTest.cs:line 69\r\n\r\n5. some timeouts failure\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=689649&view=logs&j=dd8eddb6-ecc6-5f65-73e6-df90e5693b94\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=706453&view=logs&j=87172896-2df6-55a2-04c3-60b48f00f19f\r\n\r\n6. TestCancellation hanging again\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=699015&view=logs&j=9d6f93fc-7103-540d-abb9-b79bad552b0d&t=febb8f43-1f98-59b4-5544-6955325789bd","Url":"https://github.com/dotnet/machinelearning/issues/5266","RelatedDescription":"Open issue \"recent CI failure\" (#5266)"},{"Id":"646544444","IsPullRequest":true,"CreatedAt":"2020-06-26T22:34:33","Actor":"Lynx1820","Number":"5263","RawContent":null,"Title":"Enabling Ranking Cross Validation","State":"open","Body":"- Enabled Ranking Cross Validation \r\n- Fixed some syntax errors in the ranking CodeGen generated code\r\n\r\n**Issue**:  Cross Validation is needed in order to integrate the AutoML Ranking Experiment with ModelBuilder. \r\n**Resolves:** #2685 ","Url":"https://github.com/dotnet/machinelearning/pull/5263","RelatedDescription":"Open PR \"Enabling Ranking Cross Validation\" (#5263)"},{"Id":"645890659","IsPullRequest":true,"CreatedAt":"2020-06-26T17:15:31","Actor":"frank-dong-ms","Number":"5259","RawContent":null,"Title":"remove unnecessary output from lda native","State":"closed","Body":"issue: https://github.com/dotnet/machinelearning/issues/3192\r\n\r\nthese output looks like debug info and don't need output them\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5259","RelatedDescription":"Closed or merged PR \"remove unnecessary output from lda native\" (#5259)"},{"Id":"641380864","IsPullRequest":true,"CreatedAt":"2020-06-26T16:30:08","Actor":"michaelgsharp","Number":"5248","RawContent":null,"Title":"Changed default NGram length from 1 to 2.","State":"closed","Body":"~~This is part of the work for #4749, other PR's will follow to split the work up. When the default value for NGrams was changed from 1 to 2, we discovered that memory was exploding for FastTree training and was causing test failures in some x86 tests.  This PR changes the the default value for NGramLength from 1 to 2 and also changes FastTree so it handles sparse data better.~~\r\n\r\n~~The main portion of the sparse data change is changing from an array to a dictionary so that memory is only allocated when its needed instead of all up front. When running the previously failing test, it now passes with less memory usage and is actually faster due to less GC running.~~\r\n\r\n~~The slowdown to dense data appears to be very small. Running the benchmark for ranking before the change gives this result:~~\r\n|                                                     Method |    Mean |    Error |   StdDev | Extra Metric |\r\n|----------------------------------------------------------- |--------:|---------:|---------:|-------------:|\r\n| Test_Ranking_MSLRWeb10K_RawNumericFeatures_FastTreeRanking | 1.263 s | 0.0517 s | 0.0595 s |          - |\r\n\r\n~~After the change gives this result:~~\r\n|                                                     Method |    Mean |    Error |   StdDev | Extra Metric |\r\n|----------------------------------------------------------- |--------:|---------:|---------:|-------------:|\r\n| Test_Ranking_MSLRWeb10K_RawNumericFeatures_FastTreeRanking | 1.381 s | 0.0397 s | 0.0457 s |            - |\r\n\r\n~~This is about a 10% slowdown. In return, the memory used is lower. In one example NGram test with NGramLength = 2 the memory before the change was 3.4 GB. After this change was 400 MB.~~\r\n\r\nEdit, leaving in original text for context. After doing more testing and benchmarking, it was discovered the test case was wrong and the FastTree implementation was fine. This pr now just fixes the test case while updating the default NGramLength to 2.","Url":"https://github.com/dotnet/machinelearning/pull/5248","RelatedDescription":"Closed or merged PR \"Changed default NGram length from 1 to 2.\" (#5248)"},{"Id":"646240897","IsPullRequest":false,"CreatedAt":"2020-06-26T12:50:35","Actor":"yousiftouma","Number":"5262","RawContent":null,"Title":"Using OnnxTransformer throws TypeInitializationException","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 7\r\n- **.NET Version (eg., dotnet --info)**: core 3.1\r\n\r\n### Issue\r\nWhen trying to use OnnxTransformer, the native libraries aren't loaded properly. I can see them under bin\\Debug\\netcoreapp3.1\\runtimes\\(platform)\\native.\r\nIf I use package version 1.4.0 of OnnxTransformer, without installing the runtime myself, it works.\r\nI couldn't find any docs regarding the requirement to install the runtime manually (I figured it out by browsing all over the place, but not through docs really). I suppose this should be clear when you're not using the onnxruntime package explicitly, but rather the higher level API of OnnxTransformer?\r\n\r\nOn a separate note: Is it sufficient to install the GPU natives and use the `fallbackToCpu` flag of `ApplyOnnxModel` to be able to run inferencing on both CPU and GPU? I'm having a hard time finding this documented.\r\n\r\n- **What did you do?**\r\nInstalled `Microsoft.ML.OnnxTransformer` 1.5.0 and `Microsoft.ML.OnnxRuntime` 1.3.0 and used `ApplyOnnxModel` in a pipeline.\r\n\r\n- **What happened?**\r\nCalling `ApplyOnnxModel` throws `System.TypeInitializationException`.\r\n\r\n- **What did you expect?**\r\nThat my ONNX model can be used.\r\n\r\n### Source code / logs\r\nInner exception message:\r\n\r\n\"Unable to load DLL 'onnxruntime' or one of its dependencies: The specified module could not be found. (0x8007007E)\"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5262","RelatedDescription":"Open issue \"Using OnnxTransformer throws TypeInitializationException\" (#5262)"},{"Id":"645862327","IsPullRequest":true,"CreatedAt":"2020-06-25T21:29:07","Actor":"michaelgsharp","Number":"5258","RawContent":null,"Title":"Updated AveragedPerceptron default iterations from 1 to 10","State":"open","Body":"Per issue #4749, changes the default AveragePerceptron iteration count from 1 to 10. Also updates all baseline files that were updated as a result.","Url":"https://github.com/dotnet/machinelearning/pull/5258","RelatedDescription":"Open PR \"Updated AveragedPerceptron default iterations from 1 to 10\" (#5258)"},{"Id":"644511174","IsPullRequest":true,"CreatedAt":"2020-06-24T10:40:55","Actor":"mstfbl","Number":"5255","RawContent":null,"Title":"Added cross entropy and learning rate scheduler support to validation training, simplified metric reporting","State":"open","Body":"Fix #4807 \r\n\r\nIn this PR, I've added cross entropy metric calculation & reporting during validation training in the Image Classification Trainer. Now, validation training can obtain cross entropy values for each epoch during validation training.\r\n\r\nI have attached below screenshots of training and validation metrics with this [repro](https://github.com/dotnet/machinelearning-samples/compare/master...gartangh:validation_metrics).\r\n\r\nBefore (note that learning rate is constant, even when the given `ExponentialLRDecay` is used, and cross entropy during validation is reported as 0):\r\n![before_2](https://user-images.githubusercontent.com/5262061/85540803-455e8680-b5cc-11ea-9928-dab19fd901a6.png)\r\n\r\nAfter:\r\n![_after](https://user-images.githubusercontent.com/5262061/86318215-2ec8b880-bbe6-11ea-86e1-72e77b4ed3a3.png)\r\n\r\nI have also edited `ToString()` to report accuracy and cross entropy for the validation phase as well. Reporting learning rate decay during validation isn't necessary, as no learning rate decay occurs in validation.\r\n\r\nI have also added tests to verify the proper decaying of the cross-entropy rate with this PR.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5255","RelatedDescription":"Open PR \"Added cross entropy and learning rate scheduler support to validation training, simplified metric reporting\" (#5255)"},{"Id":"644194064","IsPullRequest":false,"CreatedAt":"2020-06-23T22:41:30","Actor":"frank-dong-ms","Number":"5254","RawContent":null,"Title":"DnnFeaturizeImage for Resnet18 should return Vector<Single, 512> instead of Vector<Single, 1, 512, 1, 1>","State":"open","Body":"related to issue: https://github.com/dotnet/machinelearning/issues/4226\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5254","RelatedDescription":"Open issue \"DnnFeaturizeImage for Resnet18 should return Vector<Single, 512> instead of Vector<Single, 1, 512, 1, 1>\" (#5254)"},{"Id":"641576086","IsPullRequest":true,"CreatedAt":"2020-06-23T17:32:55","Actor":"Lynx1820","Number":"5249","RawContent":null,"Title":"Testing #4309 failure ","State":"closed","Body":"Do not review \r\n","Url":"https://github.com/dotnet/machinelearning/pull/5249","RelatedDescription":"Closed or merged PR \"Testing #4309 failure \" (#5249)"},{"Id":"643067639","IsPullRequest":false,"CreatedAt":"2020-06-22T15:33:37","Actor":"oscarjaergren","Number":"5253","RawContent":null,"Title":"Exporting Custom Vision models no longer work","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\n.net framework 4.8\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nDownloaded new exported model and replaced old one\r\n\r\n\r\n- **What happened?**\r\nGot exception \"\"Model variable data, expects Float[-1,3,416,416,], but binding was attempted with an incompatible type Image[544x480].'\"\"\r\n\r\n\"'The binding is incomplete or does not match the input/output description.\"\r\n\r\n- **What did you expect?**\r\n\r\nExpect: Model working\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nI would attach the models but cannot do so in this ticket \r\n\r\nStack overflow post (not from me) that has the same issue, so this is not only by me. \r\nhttps://stackoverflow.com/questions/62486386/custom-vision-onnx-models-stopped-working-with-windows-10-ml\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/5253","RelatedDescription":"Closed issue \"Exporting Custom Vision models no longer work\" (#5253)"},{"Id":"642841584","IsPullRequest":true,"CreatedAt":"2020-06-22T07:51:12","Actor":"xiaoyan-ms","Number":"5252","RawContent":null,"Title":"ignore this","State":"closed","Body":"testing for PR ","Url":"https://github.com/dotnet/machinelearning/pull/5252","RelatedDescription":"Closed or merged PR \"ignore this\" (#5252)"},{"Id":"640799263","IsPullRequest":false,"CreatedAt":"2020-06-19T22:54:05","Actor":"jacobthamblett","Number":"5247","RawContent":null,"Title":"PermutationFeatureImportance not working with AutoML API","State":"closed","Body":"### System information\r\n\r\n- Windows 10 Pro, build 18363\r\n- Visual Studio 2019 Professional\r\n- C# Console Application, in .NET Core 3.1\r\n\r\n### Issue\r\n\r\n- Using the AutoML API to generate ML multiclassification model from large network datasets stored in CSV file. The model produced by the API provides accurate prediction, with reasonable results in the following metrics: MicroAccuracy, MacroAccuracy, LogLoss & LogLossReduction. Trying to get metrics on what feature selection was implemented by the API is proving impossible however. \r\n\r\n- Following all direction & [documentation ](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/explain-machine-learning-model-permutation-feature-importance-ml-net#explain-the-model-with-permutation-feature-importance-pfi) on implementing the PermutationFeatureImportance method has no success. It is possible to extract the pipeline from the AutoML BestRun model, and putting together the list of features in the custom class type it is using is not a problem either. However, there would appear to be no LastTransformer attribute for the BestRun model produced by the API. According to the official documentation on how to execute the PFI method on multiclass model, this is one of the main hurdles. \r\n\r\n- Attempting to follow the specific Multiclassification PFI [documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_) more exact, and defining a new pipeline with single multiclassification algorithm still throws an error. This is not ideal, as the new pipeline definition with single multiclassification algorithm does not necessarily match that used by the AutoML API's model, which is the model the PFI metrics are needed for.\r\n\r\n\r\n### Source code / logs\r\n\r\n**Example code following Multiclassification PFI Implementation from [ML.Net Documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_), using pipeline extracted from AutoML bestRun Model:** \r\n```\r\n//PFI code attempting to extract and use pipeline from AutoML bestRun model\r\n            var featureColumns =\r\n                new string[] { \"Unnamed0\",\"FlowID\",\"SourceIP\",\"SourcePort\",\"DestinationIP\",\"DestinationPort\",\"Protocol\",\"Timestamp\",\"FlowDuration\",\"TotalFwdPackets\",\"TotalBackwardPackets\",\"TotalLengthofFwdPackets\",\"TotalLengthofBwdPackets\",\"FwdPacketLengthMax\",\"FwdPacketLengthMin\",\"FwdPacketLengthMean\",\"FwdPacketLengthStd\",\"BwdPacketLengthMax\",\"BwdPacketLengthMin\",\"BwdPacketLengthMean\",\"BwdPacketLengthStd\",\"FlowBytes\",\"FlowPackets\",\"FlowIATMean\",\"FlowIATStd\",\"FlowIATMax\",\"FlowIATMin\",\"FwdIATTotal\",\"FwdIATMean\",\"FwdIATStd\",\"FwdIATMax\",\"FwdIATMin\",\"BwdIATTotal\",\"BwdIATMean\",\"BwdIATStd\",\"BwdIATMax\",\"BwdIATMin\",\"FwdPSHFlags\",\"BwdPSHFlags\",\"FwdURGFlags\",\"BwdURGFlags\",\"FwdHeaderLength\",\"BwdHeaderLength\",\"FwdPackets\",\"BwdPackets\",\"MinPacketLength\",\"MaxPacketLength\",\"PacketLengthMean\",\"PacketLengthStd\",\"PacketLengthVariance\",\"FINFlagCount\",\"SYNFlagCount\",\"RSTFlagCount\",\"PSHFlagCount\",\"ACKFlagCount\",\"URGFlagCount\",\"CWEFlagCount\",\"ECEFlagCount\",\"DownUpRatio\",\"AveragePacketSize\",\"AvgFwdSegmentSize\",\"AvgBwdSegmentSize\",\"FwdHeaderLength1\",\"FwdAvgBytesBulk\",\"FwdAvgPacketsBulk\",\"FwdAvgBulkRate\",\"BwdAvgBytesBulk\",\"BwdAvgPacketsBulk\",\"BwdAvgBulkRate\",\"SubflowFwdPackets\",\"SubflowFwdBytes\",\"SubflowBwdPackets\",\"SubflowBwdBytes\",\"Init_Win_bytes_forward\",\"Init_Win_bytes_backward\",\"act_data_pkt_fwd\",\"min_seg_size_forward\",\"ActiveMean\",\"ActiveStd\",\"ActiveMax\",\"ActiveMin\",\"IdleMean\",\"IdleStd\",\"IdleMax\",\"IdleMin\",\"SimillarHTTP\",\"Inbound\" };\r\n\r\n            // Fit the pipeline to the data.\r\n            var PFI_model = bestRun.Estimator.Fit(trainDataView);\r\n\r\n            // Transform the dataset.\r\n            var transformedData = PFI_model.Transform(trainDataView);\r\n\r\n            // Extract the predictor.\r\n            var linearPredictor = PFI_model.LastTransformer;\r\n\r\n            // Compute the permutation metrics for the linear model using the\r\n            // normalized data.\r\n            var permutationMetrics = mlContext.MulticlassClassification\r\n                .PermutationFeatureImportance(linearPredictor, transformedData,\r\n                permutationCount: 30);\r\n\r\n            // Now let's look at which features are most important to the model\r\n            // overall. Get the feature indices sorted by their impact on\r\n            // microaccuracy.\r\n            var sortedIndices = permutationMetrics\r\n                .Select((metrics, index) => new { index, metrics.MicroAccuracy })\r\n                .OrderByDescending(feature => Math.Abs(feature.MicroAccuracy.Mean))\r\n                .Select(feature => feature.index);\r\n\r\n            Console.WriteLine(\"Feature\\tChange in MicroAccuracy\\t95% Confidence in \"\r\n                + \"the Mean Change in MicroAccuracy\");\r\n\r\n            var microAccuracy = permutationMetrics.Select(x => x.MicroAccuracy)\r\n                .ToArray();\r\n\r\n            foreach (int i in sortedIndices)\r\n            {\r\n                Console.WriteLine(\"{0}\\t{1:G4}\\t{2:G4}\",\r\n                    featureColumns[i],\r\n                    microAccuracy[i].Mean,\r\n                    1.96 * microAccuracy[i].StandardError);\r\n            }\r\n```\r\nError Produced: _Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS1061\t'ITransformer' does not contain a definition for 'LastTransformer' and no accessible extension method 'LastTransformer' accepting a first argument of type 'ITransformer' could be found (are you missing a using directive or an assembly reference?)_\r\n\r\n\r\n**Example code also following Multiclassification PFI Implementation from [ML.Net Documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_), using a newly created pipeline and single multiclassification algorithm:** \r\n```\r\n//PFI code with new pipeline using single multiclassification algorithm\r\n            var featureColumns =\r\n                new string[] { \"Unnamed0\",\"FlowID\",\"SourceIP\",\"SourcePort\",\"DestinationIP\",\"DestinationPort\",\"Protocol\",\"Timestamp\",\"FlowDuration\",\"TotalFwdPackets\",\"TotalBackwardPackets\",\"TotalLengthofFwdPackets\",\"TotalLengthofBwdPackets\",\"FwdPacketLengthMax\",\"FwdPacketLengthMin\",\"FwdPacketLengthMean\",\"FwdPacketLengthStd\",\"BwdPacketLengthMax\",\"BwdPacketLengthMin\",\"BwdPacketLengthMean\",\"BwdPacketLengthStd\",\"FlowBytes\",\"FlowPackets\",\"FlowIATMean\",\"FlowIATStd\",\"FlowIATMax\",\"FlowIATMin\",\"FwdIATTotal\",\"FwdIATMean\",\"FwdIATStd\",\"FwdIATMax\",\"FwdIATMin\",\"BwdIATTotal\",\"BwdIATMean\",\"BwdIATStd\",\"BwdIATMax\",\"BwdIATMin\",\"FwdPSHFlags\",\"BwdPSHFlags\",\"FwdURGFlags\",\"BwdURGFlags\",\"FwdHeaderLength\",\"BwdHeaderLength\",\"FwdPackets\",\"BwdPackets\",\"MinPacketLength\",\"MaxPacketLength\",\"PacketLengthMean\",\"PacketLengthStd\",\"PacketLengthVariance\",\"FINFlagCount\",\"SYNFlagCount\",\"RSTFlagCount\",\"PSHFlagCount\",\"ACKFlagCount\",\"URGFlagCount\",\"CWEFlagCount\",\"ECEFlagCount\",\"DownUpRatio\",\"AveragePacketSize\",\"AvgFwdSegmentSize\",\"AvgBwdSegmentSize\",\"FwdHeaderLength1\",\"FwdAvgBytesBulk\",\"FwdAvgPacketsBulk\",\"FwdAvgBulkRate\",\"BwdAvgBytesBulk\",\"BwdAvgPacketsBulk\",\"BwdAvgBulkRate\",\"SubflowFwdPackets\",\"SubflowFwdBytes\",\"SubflowBwdPackets\",\"SubflowBwdBytes\",\"Init_Win_bytes_forward\",\"Init_Win_bytes_backward\",\"act_data_pkt_fwd\",\"min_seg_size_forward\",\"ActiveMean\",\"ActiveStd\",\"ActiveMax\",\"ActiveMin\",\"IdleMean\",\"IdleStd\",\"IdleMax\",\"IdleMin\",\"SimillarHTTP\",\"Inbound\" };\r\n\r\n            var pipeline = mlContext.Transforms\r\n                .Concatenate(\"Features\", featureColumns)\r\n                .Append(mlContext.Transforms.Conversion.MapValueToKey(\"Label\"))\r\n                .Append(mlContext.Transforms.NormalizeMinMax(\"Features\"))\r\n                .Append(mlContext.MulticlassClassification.Trainers\r\n                .SdcaMaximumEntropy());\r\n\r\n            // Fit the pipeline to the data.\r\n            var PFI_model = pipeline.Fit(trainDataView);\r\n\r\n            // Transform the dataset.\r\n            var transformedData = PFI_model.Transform(trainDataView);\r\n\r\n            // Extract the predictor.\r\n            var linearPredictor = PFI_model.LastTransformer;\r\n\r\n            // Compute the permutation metrics for the linear model using the\r\n            // normalized data.\r\n            var permutationMetrics = mlContext.MulticlassClassification\r\n                .PermutationFeatureImportance(linearPredictor, transformedData,\r\n                permutationCount: 30);\r\n\r\n            // Now let's look at which features are most important to the model\r\n            // overall. Get the feature indices sorted by their impact on\r\n            // microaccuracy.\r\n            var sortedIndices = permutationMetrics\r\n                .Select((metrics, index) => new { index, metrics.MicroAccuracy })\r\n                .OrderByDescending(feature => Math.Abs(feature.MicroAccuracy.Mean))\r\n                .Select(feature => feature.index);\r\n\r\n            Console.WriteLine(\"Feature\\tChange in MicroAccuracy\\t95% Confidence in \"\r\n                + \"the Mean Change in MicroAccuracy\");\r\n\r\n            var microAccuracy = permutationMetrics.Select(x => x.MicroAccuracy)\r\n                .ToArray();\r\n\r\n            foreach (int i in sortedIndices)\r\n            {\r\n                Console.WriteLine(\"{0}\\t{1:G4}\\t{2:G4}\",\r\n                    featureColumns[i],\r\n                    microAccuracy[i].Mean,\r\n                    1.96 * microAccuracy[i].StandardError);\r\n            }\r\n```\r\nCode builds but also fails at PFI_model definition: _System.ArgumentOutOfRangeException\r\n  HResult=0x80131502\r\n  Message=Schema mismatch for input column 'Features': expected vector or scalar of Single or Double, got Vector<String> \r\n  Source=Microsoft.ML.Data\r\n  StackTrace:\r\n   at Microsoft.ML.Transforms.NormalizingEstimator.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)_","Url":"https://github.com/dotnet/machinelearning/issues/5247","RelatedDescription":"Closed issue \"PermutationFeatureImportance not working with AutoML API\" (#5247)"},{"Id":"640703745","IsPullRequest":true,"CreatedAt":"2020-06-18T00:17:48","Actor":"wangyems","Number":"5245","RawContent":null,"Title":"Fix sample tests results preview","State":"closed","Body":"Since LoadFeaturizedAdultDataset() has been modified by https://github.com/dotnet/machinelearning/commit/9244e683d85f1c1c16eef4fcd2a5af42d56ac048#diff-eb95ea0c54ebcf8d695d8d73d5849b0cR138, any other sample tests that references LoadFeaturizedAdultDataset() will result in a different score. Change score preview to match.\r\nAlso remove unnecessary spaces.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5245","RelatedDescription":"Closed or merged PR \"Fix sample tests results preview\" (#5245)"},{"Id":"640695418","IsPullRequest":true,"CreatedAt":"2020-06-17T19:43:29","Actor":"wangyems","Number":"5244","RawContent":null,"Title":"Fix sample test results ","State":"closed","Body":"Since LoadFeaturizedAdultDataset() has been modified by [https://github.com/dotnet/machinelearning/commit/9244e683d85f1c1c16eef4fcd2a5af42d56ac048#diff-eb95ea0c54ebcf8d695d8d73d5849b0cR138](url), any other sample tests that references LoadFeaturizedAdultDataset() will result in a different score. Change score preview to match.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/5244","RelatedDescription":"Closed or merged PR \"Fix sample test results \" (#5244)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-07-02T05:30:38.8561062Z","RunDurationInMilliseconds":716}