{"Data":{"GitHub":{"Issues":[{"Id":"1658850087","IsPullRequest":false,"CreatedAt":"2023-04-07T14:12:57","Actor":"danielstegeman","Number":"6618","RawContent":null,"Title":"Improvements when specifying a ModelLoader when adding a predictionenginepool to DI.","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently, it is possible to specify a custom model loader when adding a `PredictionEnginePool` to the servicecollection, as mentioned in this pull request #4393 . This is important in cases where you want to, for example, load a specific version of a model from something like Azure Blob Storage.\r\n\r\nFirst of all, the official documentation makes no mention at all of this possibility. So  this needs to be documented.\r\n\r\nSecondly, when you want to add a model loader that needs access to the service provider, the `AddPredictionEnginePool` requires an implementationfactory with a lot of boilerplate, like so:\r\n\r\n```\r\nservices.AddPredictionEnginePool<InputModel, OutputModel>(provider =>\r\n        {\r\n            \r\n            IEnumerable<IConfigureOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>>\r\n                configureOptionsList =\r\n                    new List<IConfigureOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>>()\r\n                    {\r\n                        new ConfigureOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>(options=>\r\n                            options.ModelLoader = new AzureModelLoader(provider))\r\n                    };\r\n            \r\n            IEnumerable<IPostConfigureOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>>\r\n                postConfigures =\r\n                    new List<IPostConfigureOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>>();\r\n            \r\n            var optionsfactory =\r\n                new OptionsFactory<PredictionEnginePoolOptions<InputModel, OutputModel>>(\r\n                    configureOptionsList,postConfigures);\r\n\r\n            return new PredictionEnginePool<InputModel, OutputModel>(provider,\r\n                provider.GetRequiredService<IOptions<MLOptions>>(), optionsfactory);\r\n        });\r\n```\r\nIt is also possible to add it through `AddOptions` like this:\r\n```\r\nservices.AddOptions<PredictionEnginePoolOptions<InputModel, OutputModel>>().Configure(options =>\r\n        {\r\n            options.ModelLoader = new ModelLoader();\r\n        });\r\n```\r\nBut this does not allow access to the serviceprovider.\r\n\r\n**Describe the solution you'd like**\r\n 1. Document this feature.\r\n 2. Add a method to configure the `PredictionEnginePoolOptions`  with the serviceprovider as a parameter:\r\n\r\n```\r\nservices.AddPredictionEnginePoolOptions<InputModel, OutputModel>((provider, options) =>\r\n        {\r\n            options.ModelLoader = new ModelLoader(provider);\r\n        });\r\n```\r\n**Describe alternatives you've considered**\r\nUsing the `AddOptions` method.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6618","RelatedDescription":"Open issue \"Improvements when specifying a ModelLoader when adding a predictionenginepool to DI.\" (#6618)"},{"Id":"1657573761","IsPullRequest":false,"CreatedAt":"2023-04-06T14:50:06","Actor":"dietrichha","Number":"6617","RawContent":null,"Title":"Daily recurring AutoML experiment - losses best Model","State":"open","Body":"### Issue\r\n\r\nIn order to predict best prices, I do an AutoML regression expermient as explained here:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/how-to-use-the-automl-api\r\n\r\nAnd safe the best Model with: \r\nmlContext.Model.Save(experimentResult.Model, trainDataView.Schema, modelFilePath);\r\n\r\nAnd also print the Model R-Squared from the best found model.\r\n\r\nTo quickly adapt to new changes, I redo the AutoML expermient on a daily basis at 2 o'clock in the morning.\r\n\r\nWhen I look at the R2s they change daily between 0.7 and 0.95. \r\n\r\nHowever, I save the model regardless of the last one, i overwrite the 0.95 R2 model with e.g. the 0.7 R2 model. That is perhaps not a good idea, as the 0.95 from yesterday could still be better than the 0.7 model from today. \r\n\r\nIs there a way to load the 0.95 model (yes, that i know and do) and retest it against the 0.7 R2 model's input data (that I do not find how to do)? Then I could compare the R2 of both and save the better one. \r\n\r\nAny ideas how to do this \"retest\" of the Model?\r\n\r\n2. Question: Is there a way to automate this in the API? \r\n3. Is there a way to give the last model to the auto ml experiment to use it for re-training: https://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6617","RelatedDescription":"Open issue \"Daily recurring AutoML experiment - losses best Model\" (#6617)"},{"Id":"1657058492","IsPullRequest":false,"CreatedAt":"2023-04-06T09:46:20","Actor":"BigHeadDev","Number":"6616","RawContent":null,"Title":"How to offset RGB differently and convert images to CHW？","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 11\r\n- **.NET Version (eg., dotnet --info)**: .Net 6.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTransforming a PTH model into an ONNX model and Connect it using ml.net\r\n- **What happened?**\r\nI don't know if there was a problem with my preprocessing,The results are always different from those predicted by Python code\r\n\r\nThrough Python code, it is generally known that preprocessing needs to go through RGB offset, and then convert HWC to CHW. \r\n1，However, it seems that the MLContext.Transform.ExtractPixels method can only specify the same offsetImage\r\n2，There seems to be no method in MLContext.Transform to convert HWC to CHW. How should I use it\r\n\r\n- **What did you expect?**\r\nI hope someone can teach me how to connect this model\r\nI have been researching for several days, hahaha  \r\n\r\n**Here is the Python code：**\r\n```python\r\n        image_path = \"./curve/test.jpg\"\r\n        img_raw = cv2.imread(image_path, cv2.IMREAD_COLOR)\r\n\r\n        img = np.float32(img_raw)\r\n\r\n        im_height, im_width, _ = img.shape\r\n        scale = torch.Tensor([img.shape[1], img.shape[0], img.shape[1], img.shape[0]])\r\n        img -= (104, 117, 123)//*\r\n        img = img.transpose(2, 0, 1)//*\r\n        img = torch.from_numpy(img).unsqueeze(0)\r\n        img = img.to(device)\r\n        scale = scale.to(device)\r\n\r\n        tic = time.time()\r\n        loc, conf, landms = net(img)  # forward pass\r\n        print('net forward time: {:.4f}'.format(time.time() - tic))\r\n\r\n        priorbox = PriorBox(cfg, image_size=(im_height, im_width))\r\n        priors = priorbox.forward()\r\n```\r\n**This is my preprocessing code**\r\n```C#\r\n        var pipeline =\r\n                context.Transforms.ResizeImages(\r\n                resizing: Microsoft.ML.Transforms.Image.ImageResizingEstimator.ResizingKind.Fill,\r\n                outputColumnName: \"input0\",\r\n                imageWidth: 640,\r\n                imageHeight: 640,\r\n                inputColumnName: nameof(FaceInput.Image))\r\n                .Append(context.Transforms.ExtractPixels(\r\n                        offsetImage: 114f,//???\r\n                        outputColumnName: \"input0\"))\r\n                .Append(context.Transforms.ApplyOnnxModel(\r\n                    modelFile: modelPath,\r\n                    inputColumnName: \"input0\",\r\n                    outputColumnName: \"output0\"));\r\n            return pipeline;\r\n```\r\n**This is the source Python github repository**\r\n[Retinaface](https://github.com/deepConnectionism/Retinaface)\r\n\r\n**This is the onnx model**\r\n![image](https://user-images.githubusercontent.com/23449064/230339057-032befa5-d562-416e-ba74-9844f95ecfd0.png)\r\n[ONXX](https://github.com/deepConnectionism/Retinaface/blob/main/FaceDetector.onnx)\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6616","RelatedDescription":"Open issue \"How to offset RGB differently and convert images to CHW？\" (#6616)"},{"Id":"1654638019","IsPullRequest":true,"CreatedAt":"2023-04-04T22:01:54","Actor":"LittleLittleCloud","Number":"6615","RawContent":null,"Title":"Add AutoZero tuner to BinaryClassification","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#6577 \r\n\r\nAutoZero (AKA fewshot) tuner run hyper-parameter optimization by selecting portfolios from a group of candidates that are collected and verified on over 100 datasets. It supposed to return a decent result within a finite steps and limited computing resources compared to other AutoML method.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6615","RelatedDescription":"Open PR \"Add AutoZero tuner to BinaryClassification\" (#6615)"},{"Id":"1649793408","IsPullRequest":true,"CreatedAt":"2023-04-04T08:14:33","Actor":"LittleLittleCloud","Number":"6613","RawContent":null,"Title":"Update timeout error message in AutoMLExperiment.cs","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nfix https://github.com/dotnet/machinelearning-modelbuilder/issues/2500","Url":"https://github.com/dotnet/machinelearning/pull/6613","RelatedDescription":"Closed or merged PR \"Update timeout error message in AutoMLExperiment.cs\" (#6613)"},{"Id":"1629156888","IsPullRequest":false,"CreatedAt":"2023-04-04T02:41:36","Actor":"BigHeadDev","Number":"6601","RawContent":null,"Title":"How to use Microsoft.ML.ImageAnalytics 2.0.1 to write ModelInput classes","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 11\r\n- **.NET Version (eg., dotnet --info)**:  .NET 6\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI refer to Microsoft documentation and YouTube bloggers to write a program for accessing the onnx model with ML.NET\r\nIt is a red wine/Baijiu recognition model\r\n,The following code snippet shows the key errors：\r\n``` C#\r\npublic class WineInput {// C# Input Mapping\r\n        [ImageType(ImageSettings.imageWidth, ImageSettings.imageHeight)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n    public struct ImageSettings {\r\n        public const int imageHeight = 416;\r\n        public const int imageWidth = 416;\r\n    }\r\n```\r\n``` C#\r\nMLContext context = new MLContext();\r\n            var emptyData = new List<WineInput>();\r\n            var data = context.Data.LoadFromEnumerable(emptyData);//Load Empty Data //Error!\r\n``` \r\n\r\n- **What happened?**\r\nI haven't done anything yet, and an error was reported in this line of code.！\r\nHowever, I found that the code is identical, but an error will be reported\r\n![image](https://user-images.githubusercontent.com/23449064/225888845-22fdb42a-912d-4b03-9963-d717828c3214.png)\r\nI cloned the YouTube blogger's git and found that all nugets used are ML. Net 1.4\r\nSo I also downgraded the nuget package\r\nIt's actually working properly\r\nNo changes to the code\r\n\r\n**After my comparison, I found that the dependency of the nuget package Microsoft.ML.ImageAnalytics has changed after upgrading to 2.0**\r\n1.4 Normal works, 2.0 Abnormal works\r\n![image](https://user-images.githubusercontent.com/23449064/225891591-7de8ce8e-8498-471c-a60e-9194e186ecc6.png)\r\n![image](https://user-images.githubusercontent.com/23449064/225891886-c26919a1-29df-4de6-99d0-a6b304c4ae4d.png)\r\n\r\n- **What did you expect?**\r\nStarting with 2.0, it no longer rely on System.Drawing.Common,I don't know how to modify the Bitmap in the InputModel to achieve a workable effect\r\n### Source code / logs\r\nInput/Output Model:\r\n```C# \r\npublic class WineInput {\r\n        [ImageType(ImageSettings.imageWidth, ImageSettings.imageHeight)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n    public struct ImageSettings {\r\n        public const int imageHeight = 416;\r\n        public const int imageWidth = 416;\r\n    }\r\n\r\ninternal class WineOutPut {\r\n        [ColumnName(\"model_outputs0\")]\r\n        public float[] PredictedLabel { get; set; }\r\n\r\n    }\r\n```\r\nPrdictionProcess:\r\n```C#\r\n public class WinePrediction {\r\n        private string modelFile = \"./OnnxModels/RedOrWhiteWine.onnx\";\r\n        PredictionEngine<WineInput, WineOutPut> predictionEngine = null;\r\n        public WinePrediction() {\r\n            MLContext context = new MLContext();\r\n            var emptyData = new List<WineInput>();\r\n            var data = context.Data.LoadFromEnumerable(emptyData);\r\n\r\n            var pipeline = context.Transforms.ResizeImages(\r\n                resizing: Microsoft.ML.Transforms.Image.ImageResizingEstimator.ResizingKind.Fill,\r\n                outputColumnName: \"data\",\r\n                imageWidth: ImageSettings.imageWidth,\r\n                imageHeight: ImageSettings.imageHeight,\r\n                inputColumnName: nameof(WineInput.Image)\r\n                )\r\n                .Append(context.Transforms.ExtractPixels(outputColumnName: \"data\")\r\n                .Append(context.Transforms.ApplyOnnxModel(modelFile: modelFile, outputColumnName: \"model_outputs0\", inputColumnName: \"data\")));\r\n\r\n            var model = pipeline.Fit(data);\r\n\r\n            predictionEngine = context.Model.CreatePredictionEngine<WineInput, WineOutPut>(model);\r\n\r\n        }\r\n        public void Prediction(string path) {\r\n            using (var stream = new FileStream(path, FileMode.Open)) {\r\n                using (var bitmap = (Bitmap)Image.FromStream(stream)) {\r\n                    var prediction = predictionEngine.Predict(new WineInput() { Image = bitmap });\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n```\r\nThis is a link to github for my reference study [click here](https://github.com/jwood803/MLNetExamples/tree/master/MLNetExamples/CustomVisionOnnx)\r\nThe main problem is that there are some difficulties with Bitmap conversion in 2.0\r\nI hope someone can teach me, thank you all\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6601","RelatedDescription":"Closed issue \"How to use Microsoft.ML.ImageAnalytics 2.0.1 to write ModelInput classes\" (#6601)"},{"Id":"1650227280","IsPullRequest":false,"CreatedAt":"2023-04-01T01:16:47","Actor":"hieu-n","Number":"6614","RawContent":null,"Title":"Wrong Examples for PermutationFeatureImportanceNonCalibrated Method","State":"open","Body":"The example is for the `PermutationFeatureImportance`, not `PermutationFeatureImportanceNonCalibrated`. \r\n\r\n\r\nIt looks like the example and remarks are copied over from:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet\r\n\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: ed3c78b4-bc81-7481-aec2-ffb27aa386d7\r\n* Version Independent ID: ed3c78b4-bc81-7481-aec2-ffb27aa386d7\r\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportanceNonCalibrated Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportanceNonCalibrated?view=ml-dotnet&viewFallbackFrom=netstandard-2.0)\r\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6614","RelatedDescription":"Open issue \"Wrong Examples for PermutationFeatureImportanceNonCalibrated Method\" (#6614)"},{"Id":"1646414813","IsPullRequest":true,"CreatedAt":"2023-03-31T22:44:44","Actor":"LittleLittleCloud","Number":"6612","RawContent":null,"Title":"fix #6416","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nThe cause of #6416 is simple: calling `Cancel` on a disposed `CancellationTokenSource`. The `CancellationTokenSource` might be disposed when the handler method get called.\r\n\r\nThere're three ways to fix this issue\r\n- disposing object in the right time\r\n- check if `CancellationTokenSource` get disposed before canceling\r\n- don't explicitly dispose `CancellationTokenSource` and leave it to GC\r\n\r\nEventually I choose the third way because it's challenging to dispose object correctly in multi-thread situation. And checking if an object is diposed before calling seems to verbose.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6612","RelatedDescription":"Closed or merged PR \"fix #6416\" (#6612)"},{"Id":"1612189934","IsPullRequest":true,"CreatedAt":"2023-03-28T19:18:40","Actor":"LittleLittleCloud","Number":"6594","RawContent":null,"Title":"add AutoMLExperiment example doc","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#6589 ","Url":"https://github.com/dotnet/machinelearning/pull/6594","RelatedDescription":"Closed or merged PR \"add AutoMLExperiment example doc\" (#6594)"},{"Id":"1644528826","IsPullRequest":true,"CreatedAt":"2023-03-28T19:17:35","Actor":"LittleLittleCloud","Number":"6611","RawContent":null,"Title":"Add doc for CreateSweepableEstimator, Parameter and SearchSpace","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#6589 ","Url":"https://github.com/dotnet/machinelearning/pull/6611","RelatedDescription":"Open PR \"Add doc for CreateSweepableEstimator, Parameter and SearchSpace\" (#6611)"},{"Id":"1638150687","IsPullRequest":true,"CreatedAt":"2023-03-28T17:39:24","Actor":"jeffhandley","Number":"6607","RawContent":null,"Title":"Libraries area pod updates March 2023","State":"closed","Body":"Update the Fabricbot config via regeneration in dotnet/fabricbot-config/pull/71","Url":"https://github.com/dotnet/machinelearning/pull/6607","RelatedDescription":"Closed or merged PR \"Libraries area pod updates March 2023\" (#6607)"},{"Id":"1643087996","IsPullRequest":true,"CreatedAt":"2023-03-28T17:04:14","Actor":"LittleLittleCloud","Number":"6610","RawContent":null,"Title":"fix tostring bug for sweepable pipeline","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6610","RelatedDescription":"Closed or merged PR \"fix tostring bug for sweepable pipeline\" (#6610)"},{"Id":"1617112598","IsPullRequest":false,"CreatedAt":"2023-03-28T12:23:23","Actor":"superichmann","Number":"6595","RawContent":null,"Title":"AutoML experiment cannot be executed on Double type columns","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: ML.NET v2.0.1\r\n - AutomL Version: ML.NET v0.20.1\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nWhen loading data from db column types of double / double precision and using them to create a regression experiment the following error occurs:\r\n\r\n```\r\nSystem.AggregateException\r\n  HResult=0x80131500\r\n  Message=One or more errors occurred. (Schema mismatch for feature column '__Features__': expected Vector<Single>, got Vector<Double> (Parameter 'inputSchema'))\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task'1.GetResultCore(Boolean waitCompletionNotification)\r\n   at System.Threading.Tasks.Task'1.get_Result()\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.Run()\r\n   at Microsoft.ML.AutoML.RegressionExperiment.Execute(IDataView trainData, IDataView validationData, ColumnInformation columnInformation, IEstimator'1 preFeaturizer, IProgress'1 progressHandler)\r\n```\r\n\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a DB table with 3 double type columns\r\n2. Load with `mlContext.Data.CreateDatabaseLoader`\r\n3. call `mlContext.Auto().CreateRegressionExperiment().Execute` with the data\r\n\r\n**Expected behavior**\r\nThe experiment should run\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6595","RelatedDescription":"Closed issue \"AutoML experiment cannot be executed on Double type columns\" (#6595)"},{"Id":"1642990476","IsPullRequest":false,"CreatedAt":"2023-03-27T23:58:46","Actor":"luisquintanilla","Number":"6609","RawContent":null,"Title":"Add Intersection Over Union (IoU)","State":"open","Body":"https://learn.microsoft.com/en-us/dotnet/machine-learning/tutorials/object-detection-onnx#create-helper-functions\r\n\r\nThis calculation is helpful for object detection scenarios. As we look to introduce this scenario in ML.NET, we should also expose it publicly so other working with object detection models can also use it. ","Url":"https://github.com/dotnet/machinelearning/issues/6609","RelatedDescription":"Open issue \"Add Intersection Over Union (IoU)\" (#6609)"},{"Id":"1634990387","IsPullRequest":false,"CreatedAt":"2023-03-27T22:30:35","Actor":"hieu-n","Number":"6604","RawContent":null,"Title":"Unable to use CostFrugalTuner in AutoML ","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Ubuntu 22.04.2 LTS\r\n - ML.NET Version: 2.0.1\r\n - .NET Version: 7.0.101\r\n\r\n**Describe the bug**\r\nTrying to `SetCostFrugalTuner` for an AutoML experiment and got the exception: \r\n\r\n```\r\nUnhandled exception. System.AggregateException: One or more errors occurred. (Object reference not set to an instance of an object.)\r\n ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.ML.AutoML.CostFrugalTuner..ctor(AutoMLExperimentSettings settings, ITrialResultManager trialResultManager)\r\n   at Microsoft.ML.AutoML.AutoMLExperimentExtension.<>c.<SetCostFrugalTuner>b__9_0(IServiceProvider service)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite callSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(Type serviceType)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.RunAsync(CancellationToken ct)\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.Run()\r\n   at SampleProject.Program.Main(String[] args) in /home/myhome/SampleProject/Program.cs:line 54  \r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a new console application with the command `dotnet new console -o SampleProject`.\r\n2. Adding ML.Net packages.\r\n3. Create a simple code to use AutoML to train a binary classification model and `SetCostFrugalTuner()`.\r\n4. Run and encounter the exception.\r\n\r\n**Expected behavior**\r\nThe program should run without exceptions and the model is successfully trained.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nSampleProject.csproj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.AutoML\" Version=\"0.20.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.LightGbm\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.Probabilistic.Compiler\" Version=\"0.4.2301.301\" />\r\n    <PackageReference Include=\"MKL.NET.linux-x64\" Version=\"2022.0.1.117\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs\r\n\r\n```\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.AutoML;\r\nusing Microsoft.ML.Data;\r\n\r\nnamespace SampleProject;\r\n\r\npublic class HousingData\r\n{\r\n    public float Size { get; set; }\r\n\r\n    [VectorType(3)]\r\n    public float[] HistoricalPrices { get; set; }\r\n\r\n    public float CurrentPrice { get; set; }\r\n    public bool Label { get; set; }\r\n}\r\n\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        HousingData[] inMemoryCollection = new HousingData[]\r\n        {\r\n            new HousingData\r\n            {\r\n                Size = 700f,\r\n                HistoricalPrices = new float[]\r\n                {\r\n                    100000f, 3000000f, 250000f\r\n                },\r\n                CurrentPrice = 500000f,\r\n                Label = true\r\n            },\r\n            new HousingData\r\n            {\r\n                Size = 1000f,\r\n                HistoricalPrices = new float[]\r\n                {\r\n                    600000f, 400000f, 650000f\r\n                },\r\n                CurrentPrice = 700000f,\r\n                Label = false\r\n            }\r\n        };\r\n        // Create MLContext\r\n        MLContext mlContext = new MLContext();\r\n\r\n        //Load Data\r\n        IDataView data = mlContext.Data.LoadFromEnumerable(inMemoryCollection);\r\n        var pipeline = mlContext.Auto().Featurizer(data, excludeColumns: new[]{\"Label\"}).Append(\r\n            mlContext.Auto().BinaryClassification());\r\n        var experiment = new MLContext().Auto().CreateExperiment();\r\n        experiment.SetPipeline(pipeline).SetTrainingTimeInSeconds(60).SetDataset(data).SetCostFrugalTuner();\r\n        experiment.Run();\r\n    }\r\n}\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6604","RelatedDescription":"Closed issue \"Unable to use CostFrugalTuner in AutoML \" (#6604)"},{"Id":"1618108836","IsPullRequest":true,"CreatedAt":"2023-03-27T22:30:33","Actor":"LittleLittleCloud","Number":"6596","RawContent":null,"Title":"update max_model when trial fails","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nalso fix #6604 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6596","RelatedDescription":"Closed or merged PR \"update max_model when trial fails\" (#6596)"},{"Id":"1638699273","IsPullRequest":false,"CreatedAt":"2023-03-24T04:28:14","Actor":"Sergiu199","Number":"6608","RawContent":null,"Title":"Pro .net \"feature\"","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/6608","RelatedDescription":"Open issue \"Pro .net \"feature\"\" (#6608)"},{"Id":"1636631483","IsPullRequest":false,"CreatedAt":"2023-03-22T23:30:19","Actor":"DavidMartinOnGitHub","Number":"6606","RawContent":null,"Title":"NormalizeMeanVariance uses Population Variance","State":"open","Body":"\r\n[Enter feedback here]\r\nIt should probably be stated that this estimator uses the Population Variance not the Sample Variance. i.e. it does not apply Bessel's Correction. \r\n\r\nSince we're dealing with a **sample** of data in our ML activities not the entire **population**, a Sample Variance would be more intuitive (for some).\r\n\r\nThe difference will not be significant on large data sets. But it would be good to be more explicit about the calculation method.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: ea15e2fa-1c88-31ea-76f8-5f35a0b002ee\r\n* Version Independent ID: 3b599ef2-e67c-4e93-d0cb-38060f81b20e\r\n* Content: [NormalizationCatalog.NormalizeMeanVariance Method (Microsoft.ML)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.normalizationcatalog.normalizemeanvariance?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/NormalizationCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/NormalizationCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6606","RelatedDescription":"Open issue \"NormalizeMeanVariance uses Population Variance\" (#6606)"},{"Id":"1636026610","IsPullRequest":true,"CreatedAt":"2023-03-22T15:37:38","Actor":"michaelgsharp","Number":"6605","RawContent":null,"Title":"Object Detection using TorchSharp","State":"open","Body":"Adds in Object Detection using TorchSharp with an AutoFormer model.\r\n\r\nMain files to look at are the Object Detection Trainer, Utility methods, and the refactors to TextClassification and Sentence Similarity. \r\n\r\nWe also pulled in local/internal copies of System.Range/Index to make the future model conversion process much easier.","Url":"https://github.com/dotnet/machinelearning/pull/6605","RelatedDescription":"Open PR \"Object Detection using TorchSharp\" (#6605)"},{"Id":"1634965446","IsPullRequest":false,"CreatedAt":"2023-03-22T02:40:18","Actor":"hieu-n","Number":"6603","RawContent":null,"Title":"Unable to load shared library 'SymSgdNative' or one of its dependencies","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Ubuntu 22.04.2 LTS\r\n - ML.NET Version: 2.0.1\r\n - .NET Version: 7.0.101\r\n\r\n**Describe the bug**\r\nUnable to use `mlContext.BinaryClassification.Trainers.SymbolicSgdLogisticRegression`. It looks like the native libraries are missing for linux build.\r\n\r\n```\r\nUnhandled exception. System.DllNotFoundException: Unable to load shared library 'SymSgdNative' or one of its dependencies. In order to help diagnose loading problems, consider using a tool like strace. If you're using glibc, consider setting the LD_DEBUG environment variable: \r\n/home/myhome/SampleProject/bin/Debug/net7.0/runtimes/linux-x64/native/SymSgdNative.so: cannot open shared object file: No such file or directory\r\n/home/myhome/dotnet/shared/Microsoft.NETCore.App/7.0.1/SymSgdNative.so: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/SymSgdNative.so: cannot open shared object file: No such file or directory\r\nlibomp.so: cannot open shared object file: No such file or directory\r\n/home/myhome/dotnet/shared/Microsoft.NETCore.App/7.0.1/libSymSgdNative.so: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/libSymSgdNative.so: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/runtimes/linux-x64/native/SymSgdNative: cannot open shared object file: No such file or directory\r\n/home/myhome/dotnet/shared/Microsoft.NETCore.App/7.0.1/SymSgdNative: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/SymSgdNative: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/runtimes/linux-x64/native/libSymSgdNative: cannot open shared object file: No such file or directory\r\n/home/myhome/dotnet/shared/Microsoft.NETCore.App/7.0.1/libSymSgdNative: cannot open shared object file: No such file or directory\r\n/home/myhome/SampleProject/bin/Debug/net7.0/libSymSgdNative: cannot open shared object file: No such file or directory\r\n\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(Int32 totalNumInstances, Int32* instSizes, Int32** instIndices, Single** instValues, Single* labels, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Single* weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, State* state, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at SampleProject.Program.Main(String[] args) in /home/myhome/SampleProject/Program.cs:line 53\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a new console application with the command `dotnet new console -o SampleProject`.\r\n2. Adding ML.Net packages.\r\n3. Create a simple code to train a binary classification model using `SymbolicSgdLogisticRegression`.\r\n4. Run and encounter the exception.\r\n\r\n**Expected behavior**\r\nThe program should run without exceptions and the model is successfully trained.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nSampleProject.csproj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.AutoML\" Version=\"0.20.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.LightGbm\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.Probabilistic.Compiler\" Version=\"0.4.2301.301\" />\r\n    <PackageReference Include=\"MKL.NET.linux-x64\" Version=\"2022.0.1.117\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs\r\n\r\n```\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nnamespace SampleProject;\r\n\r\npublic class HousingData\r\n{\r\n    public float Size { get; set; }\r\n\r\n    [VectorType(3)]\r\n    public float[] HistoricalPrices { get; set; }\r\n\r\n    public float CurrentPrice { get; set; }\r\n    public bool Label { get; set; }\r\n}\r\n\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        HousingData[] inMemoryCollection = new HousingData[]\r\n        {\r\n            new HousingData\r\n            {\r\n                Size = 700f,\r\n                HistoricalPrices = new float[]\r\n                {\r\n                    100000f, 3000000f, 250000f\r\n                },\r\n                CurrentPrice = 500000f,\r\n                Label = true\r\n            },\r\n            new HousingData\r\n            {\r\n                Size = 1000f,\r\n                HistoricalPrices = new float[]\r\n                {\r\n                    600000f, 400000f, 650000f\r\n                },\r\n                CurrentPrice = 700000f,\r\n                Label = false\r\n            }\r\n        };\r\n        // Create MLContext\r\n        MLContext mlContext = new MLContext();\r\n\r\n        //Load Data\r\n        IDataView data = mlContext.Data.LoadFromEnumerable(inMemoryCollection);\r\n        var pipeline = mlContext.Transforms.Concatenate(\"Features\", \"Size\", \"HistoricalPrices\", \"CurrentPrice\")\r\n            .Append(mlContext.BinaryClassification.Trainers.SymbolicSgdLogisticRegression());\r\n        var model = pipeline.Fit(data);\r\n        \r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6603","RelatedDescription":"Open issue \"Unable to load shared library 'SymSgdNative' or one of its dependencies\" (#6603)"},{"Id":"1625741483","IsPullRequest":false,"CreatedAt":"2023-03-20T21:08:19","Actor":"CBrauer","Number":"6598","RawContent":null,"Title":"I don’t understand the analysis on you web page for SSA Time Series","State":"closed","Body":"I’m trying to get good result from the “SsaForecastingEstimator”, and I am failing to do so. In trying to understand this algorithm better, I went to your documentation at: [TimeSeriesCatalog.ForecastBySsa Method (Microsoft.ML) | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.timeseriescatalog.forecastbyssa?f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.ML.TimeSeriesCatalog.ForecastBySsa)%3Bk(DevLang-csharp)%26rd%3Dtrue&view=ml-dotnet).\r\n\r\nPlease answer the following questions:\r\n1.\tIn the sample code, the input data for a straight line is duplicated three times. Why?\r\n2.\tThe model is defined under the comment: “// Instantiate the forecasting model”.  There is an argument with the value of 11.  Where in the hell did this number come from?\r\n3.\tIt seems to me that if you extrapolate (i.e., forecast) the straight line five times, you should get {5, 6, 7, 8, 9}.  You got: [1.977226, 1.020494, 1.760543, 3.437509, 4.266461].  Are you proud of these numbers?\r\n\r\nI suggest that you guys come up with better documentation on the “SsaForecastingEstimator”,\r\nCharles\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6598","RelatedDescription":"Closed issue \"I don’t understand the analysis on you web page for SSA Time Series\" (#6598)"},{"Id":"1630082641","IsPullRequest":false,"CreatedAt":"2023-03-19T11:39:17","Actor":"JeremyMahieu","Number":"6602","RawContent":null,"Title":"ExtractPixels transform not able to split in multi dimentional array.","State":"closed","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: 2.0.1\r\n - .NET Version: .NET 7.0\r\n\r\n**Describe the bug**\r\nGetting the following error. I cannot get the ExtractPixels transformer to split the pixels up into a multi dimentional array. (8 images (can get this down to 1 with batch size), 3 channel, 1280pixel, 1280pixel.\r\n\r\nSystem.InvalidOperationException: 'Input shape mismatch: Input 'images' has shape 8,3,1280,1280, but input data is of length 4915200.'\r\n```\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer.Mapper..ctor(OnnxTransformer parent, DataViewSchema inputSchema)\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer.MakeRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.RowToRowTransformerBase.GetOutputSchema(DataViewSchema inputSchema)\r\n   at Microsoft.ML.Data.TrivialEstimator`1.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create an onnx model with ultralytics yolov8\r\n2. Try to use it in .net\r\n\r\n**Expected behavior**\r\nHave the pixel extractor split the image into a float[1, 3, 1280, 1280] form.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nPipeline looks like this\r\n```csharp\r\n            var inputColumns = new string[] { \"images\" };\r\n            var outputColumns = new string[] { \"output0\" };\r\n            var pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"images\", imageFolder: \"\", inputColumnName: \"images\")\r\n                .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"images\", imageWidth: 1280, imageHeight: 1280, inputColumnName: \"images\"))\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"images\"))\r\n                .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: ONNX_MODEL_PATH, outputColumnNames: outputColumns, inputColumnNames: inputColumns));\r\n            var emptyDv = mlContext.Data.LoadFromEnumerable(new OnnxInput[] { });\r\n\r\n            return pipeline.Fit(emptyDv); (ERROR HERE)\r\n```\r\n\r\nThe model looks like this:\r\n![image](https://user-images.githubusercontent.com/23409814/226076837-16a03f9b-35bc-4855-beb5-5feaaaaec1d4.png)\r\n\r\n**Additional context**\r\nI switched from a working project with ml.net model and wanted to use an onnx model.","Url":"https://github.com/dotnet/machinelearning/issues/6602","RelatedDescription":"Closed issue \"ExtractPixels transform not able to split in multi dimentional array.\" (#6602)"},{"Id":"1626655123","IsPullRequest":false,"CreatedAt":"2023-03-16T03:42:15","Actor":"VenkateshSrini","Number":"6600","RawContent":null,"Title":"More tighter integration of OpenAI models with ML.NET","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nMIcrosoft has a strong alliance with OpenAI. Our expectation is that we should be able to easily get these models say from Model Zoo of Azure (similar HuggingFace) and use them in our application.\r\n\r\n**Describe the solution you'd like**\r\n1) Download and Save a GPT model in a very compressed format\r\n2) on the first access, uncompress and cache the model file. I expect it to be huge\r\n3) Like the GPT API provided by open AI, provide precise input and output objects.\r\n4) Source application will fill in the request object and invoke the model as if it was an resource like database. It will receive the response which it will process\r\n\r\n**Describe alternatives you've considered**\r\n1) Calling API of OpenAI\r\n2) Trying to use model from HuggingFace. I did not how to do this \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6600","RelatedDescription":"Open issue \"More tighter integration of OpenAI models with ML.NET\" (#6600)"},{"Id":"1626543324","IsPullRequest":true,"CreatedAt":"2023-03-16T01:44:17","Actor":"zewditu","Number":"6599","RawContent":null,"Title":"Change Test to Validate  in Dataset manager","State":"open","Body":"The main goal of this PR is  in https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.AutoML/AutoMLExperiment/IDatasetManager.cs \r\nthe main goal is to set train/ validate dataset, however, names are set like `TrainTestDatasetManager`, 'TestDataset`, hence to make names consistent with the actual usage we need to change \"Test\" to \"validate\"\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6599","RelatedDescription":"Open PR \"Change Test to Validate  in Dataset manager\" (#6599)"},{"Id":"1622505842","IsPullRequest":true,"CreatedAt":"2023-03-15T01:46:48","Actor":"LittleLittleCloud","Number":"6597","RawContent":null,"Title":"add batchsize and arch to imageClassification SweepableTrainer","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nrelated issue: \r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/2526","Url":"https://github.com/dotnet/machinelearning/pull/6597","RelatedDescription":"Closed or merged PR \"add batchsize and arch to imageClassification SweepableTrainer\" (#6597)"},{"Id":"1609834320","IsPullRequest":false,"CreatedAt":"2023-03-04T15:42:14","Actor":"rnowling","Number":"6593","RawContent":null,"Title":"Broken Links","State":"open","Body":"The links to the Wikipedia page on N-grams and the L-p vector normalization are not being interpreted correctly on the TextFeaturizingEstimator page:\r\n\r\n```markdown\r\nThis estimator gives the user one-stop solution for doing:\r\n\r\n    Language Detection\r\n    [Tokenization](https://en.wikipedia.org/wiki/Lexical_analysis#Tokenization)\r\n    [Text normalization](https://en.wikipedia.org/wiki/Text_normalization)\r\n    [Predefined and custom stopwords removal](https://en.wikipedia.org/wiki/Stop_words)\r\n    [Word-based or character-based Ngram extraction and SkipGram extraction (through the advanced [options](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.text.textfeaturizingestimator?view=ml-dotnet))](https://en.wikipedia.org/wiki/N-gram)\r\n    [TF, IDF or TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf)\r\n    [L-p vector normalization](xref: Microsoft.ML.Transforms.LpNormNormalizingTransformer)\r\n```\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: deeb31e0-6843-e9ae-e6ad-028c4ec9121b\r\n* Version Independent ID: bf1e4b11-7652-7da4-4791-aa2d9488971c\r\n* Content: [TextFeaturizingEstimator Class (Microsoft.ML.Transforms.Text)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.text.textfeaturizingestimator?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms.Text/TextFeaturizingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms.Text/TextFeaturizingEstimator.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6593","RelatedDescription":"Open issue \"Broken Links\" (#6593)"},{"Id":"1609522930","IsPullRequest":false,"CreatedAt":"2023-03-04T01:26:08","Actor":"JeremyMahieu","Number":"6592","RawContent":null,"Title":"[Object Detection] Bounding box rotated due to image exif data","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: 2.0.0\r\n - .NET Version: 7.0\r\n\r\n**Describe the bug**\r\nSome images have exit data that says it's a rotated image. In those cases, the bounding boxes found by the model end up being transposed.\r\n\r\nExample: https://jimpl.com/results/X2GX3ZTHTCFKa7ZiVPag4xUP?target=exif\r\n\r\n**To Reproduce**\r\nDo object detection on an image that has exif data saying it's rotated.\r\n\r\n**Expected behavior**\r\nBounding boxes to match pixes on images.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nBlue bounding boxes are the original values, green is after checking if the image is portrait, and transposing where needed.\r\n![image](https://user-images.githubusercontent.com/23409814/222867778-14bccdf2-58ec-4f66-83d7-57f4792c688e.png)\r\n![20221129_163943](https://user-images.githubusercontent.com/23409814/222868022-a28fc3c8-bed3-45bf-b298-7e503a77db62.jpg)\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6592","RelatedDescription":"Open issue \"[Object Detection] Bounding box rotated due to image exif data\" (#6592)"},{"Id":"1609084663","IsPullRequest":false,"CreatedAt":"2023-03-03T18:31:40","Actor":"RamType0","Number":"6591","RawContent":null,"Title":"Load ONNX from in-memory binary instead of file path","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nCurrently, the only way to load ONNX model is to specify concrete file path.\r\nBut the usage of concrete file path is often impossible in some platforms.(e.g. UWP without permission)\r\nLoading ONNX model from in-memory binary representation will solve this problem.\r\n\r\n**Describe the solution you'd like**\r\n\r\nProvide API to load ONNX model from `ReadOnlyMemory<byte>`, `Stream`.\r\n\r\n**Additional context**\r\n\r\n[`OnnxTransformer` has private constructor which accepts `byte[] modelBytes`.](https://github.com/dotnet/machinelearning/blob/db197154dcd924ae9a7e31074a835b86e34e33bb/src/Microsoft.ML.OnnxTransformer/OnnxTransform.cs#L232)","Url":"https://github.com/dotnet/machinelearning/issues/6591","RelatedDescription":"Open issue \"Load ONNX from in-memory binary instead of file path\" (#6591)"},{"Id":"1607943998","IsPullRequest":false,"CreatedAt":"2023-03-03T04:56:04","Actor":"mg-yolo-enterprises","Number":"6590","RawContent":null,"Title":"Improve flexibility of input types for image classification","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nThe image classifier in ML.NET currently accepts input in the form of a byte array (only certain file formats, e.g. png jpeg gif), which is flexible enough for many scenarios. However, it is sometimes the case that the source image originates in a System.Image.Bitmap, OpenCV mat, or other managed/unmanaged memory block not in png/jpeg/gif format. To perform a prediction with this sort of data, it must be converted which takes time and requires allocations for data that already exists.\r\n\r\nIn a production computer vision environment where image data is streamed in as System.Drawing.Bitmap objects whose RawFormat is MemoryBmp, it is undesirable to dedicate 25-30ms per image to save each Bitmap into a managed byte[] whose RawFormat is jpeg (80ms for png), if it can be avoided by an update to allow more direct consumption of other formats and datatypes.\r\n\r\n**Describe the solution you'd like**\r\nDirect consumption of System.Drawing.Bitmap (RawFormat=MemoryBmp) by ML.NET in a way which avoids managed allocations or format conversion would be ideal. Accepting an IntPtr to unmanaged pixel data would be fine as well, with support for bmp format. \r\n\r\n**Describe alternatives you've considered**\r\nVarious methods to convert Bitmap data into byte[] were tested and are functional, but none achieves the performance desired.\r\n\r\n**Additional context**\r\nThe general use case for this is for processing of images received via a camera which streams images in as Bitmap objects. Needing to convert this to managed memory in one of several formats is a bottleneck which would ideally be avoidable through the solution described above.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6590","RelatedDescription":"Open issue \"Improve flexibility of input types for image classification\" (#6590)"},{"Id":"1607607405","IsPullRequest":false,"CreatedAt":"2023-03-02T22:24:40","Actor":"LittleLittleCloud","Number":"6589","RawContent":null,"Title":"Create example for AutoMLExperiment in api doc.","State":"open","Body":"## Where the code example will locate\r\n\r\nMicrosoft.ML.AutoML.Example\r\n\r\n## What examples will be added\r\n- [x] AutoMLExperiment\r\n- [x] SearchSpace\r\n- [x] SweepablePipeline","Url":"https://github.com/dotnet/machinelearning/issues/6589","RelatedDescription":"Open issue \"Create example for AutoMLExperiment in api doc.\" (#6589)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-04-08T03:30:21.8583678Z","RunDurationInMilliseconds":573}