{"Data":{"GitHub":{"Issues":[{"Id":"1756972866","IsPullRequest":false,"CreatedAt":"2023-07-07T22:22:04","Actor":"asmirnov82","Number":"6733","RawContent":null,"Title":"DataFrame DateTime column Min and Max calculation doesn't support NULL","State":"closed","Body":"Similar to #6659, but for Max(), Min() and Sum().\r\n\r\nNew Unit tests for Max and Min:\r\n\r\n```\r\n[Fact]\r\npublic void TestDateTimeComputations_MaxMin_WithNulls()\r\n{\r\n    var dateTimeColumn = new DateTimeDataFrameColumn(\"DateTime\", new DateTime?[]\r\n        {\r\n            null,\r\n            new DateTime(2022, 1, 1),\r\n            new DateTime(2020, 1, 1),\r\n            new DateTime(2023, 1, 1),\r\n            new DateTime(2021, 1, 1),\r\n            null\r\n        });\r\n\r\n         Assert.Equal(new DateTime(2020, 1, 1), dateTimeColumn.Min());\r\n         Assert.Equal(new DateTime(2023, 1, 1), dateTimeColumn.Max());\r\n}\r\n\r\n[Fact]\r\npublic void TestIntComputations_MaxMin_WithNulls()\r\n{\r\n    var column = new Int32DataFrameColumn(\"Int\", new int?[]\r\n        {\r\n            null,\r\n            2,\r\n            1,\r\n            4,\r\n            3,\r\n            null\r\n        });\r\n\r\n    Assert.Equal(1, column.Min());\r\n    Assert.Equal(4, column.Max());\r\n}\r\n```\r\nfail with Messages: \r\n\r\n_Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0_\r\n\r\nand\r\n\r\n_Assert.Equal() Failure\r\nExpected: 2020-01-01T00:00:00.0000000\r\nActual:   0001-01-01T00:00:00.0000000_\r\n\r\nUnit Test:\r\n\r\n```\r\n[Fact]\r\npublic void TestComputations_MaxMin_OnEmptyColumn()\r\n{\r\n    var column = new Int32DataFrameColumn(\"Int\");\r\n\r\n    Assert.Null(column.Min());\r\n    Assert.Null(column.Max());\r\n}\r\n```\r\n\r\ncrashes with \r\n\r\n_System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')_\r\n\r\nNew Unit tests for Sum:\r\n\r\n```\r\n[Fact]\r\npublic void TestIntSum_OnColumnWithNullsOnly()\r\n{\r\n    var column = new Int32DataFrameColumn(\"Int\", new int?[] { null, null });\r\n    Assert.Null(column.Sum());\r\n}\r\n\r\n[Fact]\r\npublic void TestIntSum_OnEmptyColumn()\r\n{\r\n    var column = new Int32DataFrameColumn(\"Int\");\r\n    Assert.Null(column.Sum());\r\n}\r\n```\r\n\r\ncrashes with \r\n\r\n_System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')","Url":"https://github.com/dotnet/machinelearning/issues/6733","RelatedDescription":"Closed issue \"DataFrame DateTime column Min and Max calculation doesn't support NULL\" (#6733)"},{"Id":"1757646832","IsPullRequest":true,"CreatedAt":"2023-07-07T22:22:02","Actor":"asmirnov82","Number":"6734","RawContent":null,"Title":"Fix incorrect DataFrame min max computation with NULL","State":"closed","Body":"Fixes #6733 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6734","RelatedDescription":"Closed or merged PR \"Fix incorrect DataFrame min max computation with NULL\" (#6734)"},{"Id":"1793000281","IsPullRequest":true,"CreatedAt":"2023-07-07T09:41:50","Actor":"asmirnov82","Number":"6759","RawContent":null,"Title":"Reduce coupling of Data.Analysis.Tests project","State":"closed","Body":"This PR continues work started in https://github.com/dotnet/machinelearning/pull/4346\r\n\r\nThe aim is to eliminate dependency of Microsoft.Data.Analysis.Tests from overal ML infrastructure. Before this PR it's required to build the overal ML solution (including native cpp projects) for running Unit tests for the DataFrame. Actually all these transative dependencies where the results of using Test attributes (like X86, X86X64 and NotArm32). Moving these attributes out of the Microsoft.ML.TestFramework into light Microsoft.ML.TestFrameworkCommon reduce coupling of tests projects.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6759","RelatedDescription":"Closed or merged PR \"Reduce coupling of Data.Analysis.Tests project\" (#6759)"},{"Id":"1792884100","IsPullRequest":true,"CreatedAt":"2023-07-07T09:39:47","Actor":"asmirnov82","Number":"6758","RawContent":null,"Title":"Run tests that requires more than 2 Gb of memory only on 64-bit env","State":"closed","Body":"Run TestAppend_SizeMoreThanMaxBufferCapacity and TestAppendMany_SizeMoreThanMaxBufferCapacity tests on X64 env\r\n\r\nSee more details in https://github.com/dotnet/machinelearning/pull/6710\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6758","RelatedDescription":"Closed or merged PR \"Run tests that requires more than 2 Gb of memory only on 64-bit env\" (#6758)"},{"Id":"1790058379","IsPullRequest":true,"CreatedAt":"2023-07-06T20:16:02","Actor":"LittleLittleCloud","Number":"6756","RawContent":null,"Title":"AutoML.Net avoid empty dataset in trainValidationDatasetManager","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\nhttps://github.com/dotnet/machinelearning-modelbuilder/issues/2734\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6756","RelatedDescription":"Closed or merged PR \"AutoML.Net avoid empty dataset in trainValidationDatasetManager\" (#6756)"},{"Id":"1790624266","IsPullRequest":false,"CreatedAt":"2023-07-06T01:40:25","Actor":"pedoc","Number":"6757","RawContent":null,"Title":"[Feature Request] Create MLImage from SKBitmap instance in ML","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nConsider the following code snippet\r\n```csharp\r\n    MLContext mlContext = new MLContext()\r\n            {\r\n                FallbackToCpu = true,\r\n                GpuDeviceId = 0\r\n            };\r\n\r\n  var pipeline = mlContext.Transforms.ResizeImages(inputColumnName: \"bitmap\", outputColumnName: \"input_1\",\r\n                    imageWidth: 416, imageHeight: 416, resizing: ResizingKind.IsoPad)\r\n                .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"input_1\", scaleImage: 1f / 255f))\r\n                .Append(mlContext.Transforms.Concatenate(\"image_shape\", \"height\", \"width\"))\r\n                .Append(mlContext.Transforms.ApplyOnnxModel(\r\n                    shapeDictionary: new Dictionary<string, int[]>() { { \"input_1\", new[] { 1, 3, 416, 416 } } },\r\n                    inputColumnNames: new[]\r\n                    {\r\n                        \"input_1\",\r\n                        \"image_shape\"\r\n                    },\r\n                    outputColumnNames: new[]\r\n                    {\r\n                        \"yolonms_layer_1/ExpandDims_1:0\",\r\n                        \"yolonms_layer_1/ExpandDims_3:0\",\r\n                        \"yolonms_layer_1/concat_2:0\"\r\n                    },\r\n                    modelFile: modelPath, recursionLimit: 100));\r\n            var model = pipeline.Fit(mlContext.Data.LoadFromEnumerable(new List<YoloV3BitmapData>()));\r\n            var predictionEngine = mlContext.Model.CreatePredictionEngine<YoloV3BitmapData, YoloV3Prediction>(model);\r\n\r\n\t\t\tusing var bitmap = SKBitmap.Decode(\"C:\\test.jpg\");\r\n\t\t\tvar predict = predictionEngine.Predict(new YoloV3BitmapData()\r\n                    { Image = MLImage.CreateFromFile(\"C:\\test.jpg\") });\r\n            var results = GetResults(predict, classesNames);\r\n\r\n\t\t\t using var canvas = new SKCanvas(bitmap);\r\n                var paint = new SKPaint()\r\n                {\r\n                    Color = new SKColor(Color.Red.R, 0, 0,50),\r\n                    Style = SKPaintStyle.Fill\r\n                };\r\n                foreach (var result in results)\r\n                {\r\n                    var y1 = result.BBox[0];\r\n                    var x1 = result.BBox[1];\r\n                    var y2 = result.BBox[2];\r\n                    var x2 = result.BBox[3];\r\n\r\n                    canvas.DrawRect(x1, y1, x2 - x1, y2 - y1, paint);\r\n\r\n                    var paint2 = new SKPaint()\r\n                    {\r\n                        Color = new SKColor(0xff, 00, 00),\r\n                        Style = SKPaintStyle.Fill,\r\n                        Typeface = SKTypeface.FromFamilyName(\r\n                            \"Arial\",\r\n                            SKFontStyleWeight.Bold,\r\n                            SKFontStyleWidth.Normal,\r\n                            SKFontStyleSlant.Italic),\r\n                        TextSize = 18,\r\n                        IsAntialias = true,\r\n                        TextAlign = SKTextAlign.Center,\r\n                        IsStroke = false\r\n                    };\r\n\r\n                    canvas.DrawText(result.Label + \" \" + result.Confidence.ToString(\"0.00\"), new SKPoint(x1, y1),\r\n                        paint2);\r\n                }\r\n\r\n public class YoloV3BitmapData\r\n    {\r\n        [ColumnName(\"bitmap\")]\r\n        [ImageType(416, 416)]\r\n        public MLImage Image { get; set; }\r\n\r\n        [ColumnName(\"width\")]\r\n        public float ImageWidth => Image.Width;\r\n\r\n        [ColumnName(\"height\")]\r\n        public float ImageHeight => Image.Height;\r\n    }\r\n```\r\nIn the above code, we use ``SKBitmap.Decode`` and ``MLImage.CreateFromFile`` to load the image from the file, which results in 2 IO,\r\nSo if you can directly pass SKBitmap to MLImage, you will save 1 IO.\r\n\r\nSo we can write\r\n```csharp\r\nusing var bitmap = SKBitmap.Decode(\"C:\\test.jpg\");\r\nvar predict = predictionEngine.Predict(new YoloV3BitmapData() { Image = bitmap  });\r\n```\r\nor\r\n```csharp\r\nusing var bitmap = SKBitmap.Decode(\"C:\\test.jpg\");\r\nvar predict = predictionEngine.Predict(new YoloV3BitmapData() { Image = MLImage.CreateFromSKBitmap(bitmap)});\r\n```\r\n\r\n**Describe the solution you'd like**\r\nWe want to be able to simply pass SKBitmap to MLImage.\r\n\r\n**Describe alternatives you've considered**\r\nCurrently it is possible to do something similar with the following code, but it is more redundant and error-prone\r\n\r\n```csharp\r\nusing var fs=File.OpenRead(\"C:\\test.jpg\");\r\nusing var bitmap = SKBitmap.Decode(fs);\r\nvar predict = predictionEngine.Predict(new YoloV3BitmapData() { Image = MLImage.CreateFromStream(fs) });\r\n```\r\n\r\n**Additional context**\r\nIn addition, it would be useful to be able to expose the SKBitmap instance in MLImage, because this allows us to draw the detection results on the SKBitmap after obtaining the model detection results without additional coding.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6757","RelatedDescription":"Open issue \"[Feature Request] Create MLImage from SKBitmap instance in ML\" (#6757)"},{"Id":"1788237627","IsPullRequest":false,"CreatedAt":"2023-07-04T16:56:59","Actor":"torronen","Number":"6755","RawContent":null,"Title":"AutoML 2.0: regression throws The given key 'e4' was not present in the dictionary.","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: windows 11\r\n - ML.NET Version: ML.NET nightly 4th July 2023\r\n - .NET Version: .NET 7.0\r\n\r\n**Describe the bug**\r\n\r\nWhen running regression experiment I got this error. It seems to appear at \"random\" experiment. I have got it on 2nd, 4th and now not yet for 21 trials.\r\n\r\n```\r\nSystem.Collections.Generic.KeyNotFoundException: The given key 'e4' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.ML.SearchSpace.SearchSpace.MappingToFeatureSpace(Parameter parameter)\r\n   at Microsoft.ML.SearchSpace.SearchSpace.MappingToFeatureSpace(Parameter parameter)\r\n   at Microsoft.ML.AutoML.CsvTrialResultManager.Save()\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.RunAsync(CancellationToken ct)\r\n   at Kwork.MLTrainer2023Regression.Program.TrainRegression(List`1 trainingDataFiles, String LabelColumn, String saveTo, UInt32 trainingTimeSeconds) in C:\\git\\Kwork.MLTrainer2023\\Kwork.MLTrainer2023Regression\\Program.cs:line 422\r\n   at Kwork.MLTrainer2023Regression.Program.Main(String[] args) in C:\\git\\Kwork.MLTrainer2023\\Kwork.MLTrainer2023Regression\\Program.cs:line 190\r\nThe given key 'e4' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.ML.SearchSpace.SearchSpace.MappingToFeatureSpace(Parameter parameter)\r\n   at Microsoft.ML.SearchSpace.SearchSpace.MappingToFeatureSpace(Parameter parameter)\r\n   at Microsoft.ML.AutoML.CsvTrialResultManager.Save()\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.RunAsync(CancellationToken ct)\r\n   at Kwork.MLTrainer2023Regression.Program.TrainRegression(List`1 trainingDataFiles, String LabelColumn, String saveTo, UInt32 trainingTimeSeconds) in C:\\git\\Kwork.MLTrainer2023\\Kwork.MLTrainer2023Regression\\Program.cs:line 422\r\n   at Kwork.MLTrainer2023Regression.Program.Main(String[] args) in C:\\git\\Kwork.MLTrainer2023\\Kwork.MLTrainer2023Regression\\\r\n\r\n```\r\n\r\n\r\n\r\nmy code:\r\n```\r\n                pipeline = ctx.Transforms\r\n               .SelectColumns(columnsToKeep) // Keep only the specified columns\r\n               .Append(ctx.Auto().Featurizer(data, columnInformation: columnInference.ColumnInformation))\r\n               .Append(ctx.Auto().Regression(labelColumnName: columnInference.ColumnInformation.LabelColumnName,\r\n                useFastForest: false, useSdca: false, useLbfgsPoissonRegression: false, useLgbm: false,\r\n               useFastTree: true\r\n               )); //disable slow FastForest, run LightGBM on GPU machine\r\n```\r\n               \r\n      ```\r\n AutoMLExperiment.AutoMLExperimentSettings settings = new AutoMLExperiment.AutoMLExperimentSettings();\r\n            AutoMLExperiment experiment = ctx.Auto().CreateExperiment();\r\n\r\n            // Configure experiment\r\n            experiment\r\n                .SetPipeline(pipeline)\r\n                .SetRegressionMetric(RegressionMetric.RootMeanSquaredError, labelColumn: columnInference.ColumnInformation.LabelColumnName)\r\n                .SetTrainingTimeInSeconds(trainingTimeSeconds)\r\n                .SetDataset(data, fold: NumFolds, samplingKeyColumnName: SamplingKeyColumn)\r\n                .SetEciCostFrugalTuner();\r\n\r\n            var monitor = new AutoMLMonitor(pipeline);\r\n            experiment.SetMonitor(monitor);\r\n\r\n            var cts = new CancellationTokenSource();\r\n            Console.WriteLine(\"Start experiment\");\r\n            TrialResult experimentResults = await experiment.RunAsync(cts.Token);\r\n```\r\n   \r\n   \r\n   ","Url":"https://github.com/dotnet/machinelearning/issues/6755","RelatedDescription":"Open issue \"AutoML 2.0: regression throws The given key 'e4' was not present in the dictionary.\" (#6755)"},{"Id":"1784870832","IsPullRequest":false,"CreatedAt":"2023-07-02T21:15:26","Actor":"nodakai","Number":"6754","RawContent":null,"Title":"Microsoft.Data.Analysis: meaningless lines of code?","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/4c799ab1c881de54328fdafbfcfc5352bd727e89/src/Microsoft.Data.Analysis/DataFrame.IO.cs#L132\r\n\r\nThe inner loop seems to be meaningless\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/4c799ab1c881de54328fdafbfcfc5352bd727e89/src/Microsoft.Data.Analysis/PrimitiveColumnContainer.cs#L36\r\n\r\nIsn't the list guaranteed to be empty here within a ctor?","Url":"https://github.com/dotnet/machinelearning/issues/6754","RelatedDescription":"Open issue \"Microsoft.Data.Analysis: meaningless lines of code?\" (#6754)"},{"Id":"1782672648","IsPullRequest":false,"CreatedAt":"2023-06-30T14:53:20","Actor":"tafo","Number":"6751","RawContent":null,"Title":"AutoML.NET: ArgumentOutOfRangeException: Score column 'Score' not found Arg_ParamName_Name","State":"open","Body":"**System Information:**\r\n - Windows 11\r\n - ML.NET 2.0.1\r\n - .NET 6.0\r\n - AutoML.Net 0.20.1\r\n\r\n**Problem**\r\nI was trying to build a model with AutoML.NET Api. I was following the steps in https://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/how-to-use-the-automl-api, \r\nThe only difference between my example and the reference example is the type of label column. I am using a string for my label column. \r\n\r\n**Code**\r\n```csharp\r\nvar ctx = new MLContext();\r\nvar cols = new[]\r\n{\r\n    new TextLoader.Column(name: \"comment\", dataKind: DataKind.String, index: 0),\r\n    new TextLoader.Column(name: \"status\", dataKind: DataKind.String, index: 1),\r\n    new TextLoader.Column(name: \"dataSet\", dataKind: DataKind.String, index: 2)\r\n};\r\n\r\nvar loader = ctx.Data.CreateTextLoader(cols, separatorChar: '~', hasHeader: true);\r\nvar dataView = loader.Load(\"Comment.csv\");\r\nvar trainValidationData = ctx.Data.TrainTestSplit(dataView, testFraction: 0.2);\r\nvar pipeline = ctx.Auto().Featurizer(dataView, \"Features\", new[] { \"dataSet\" }, null, new[] { \"comment\" }, excludeColumns: new[] { \"status\" });\r\nvar anotherExperiment = ctx.Auto().CreateExperiment(new AutoMLExperiment.AutoMLExperimentSettings { MaxExperimentTimeInSeconds = 60 });\r\nanotherExperiment.SetPipeline(pipeline);\r\nanotherExperiment.SetDataset(trainValidationData);\r\nanotherExperiment.SetMulticlassClassificationMetric(MulticlassClassificationMetric.MicroAccuracy, \"status\");\r\n\r\nctx.Log += (_, e) =>\r\n{\r\n    if (e.Source.Equals(\"AutoMLExperiment\"))\r\n    {\r\n        Console.WriteLine(e.RawMessage);\r\n    }\r\n};\r\n\r\nvar result = anotherExperiment.Run();\r\nConsole.WriteLine(\"Finished\");\r\nConsole.ReadLine();\r\n```\r\n\r\n** Very Simple Data Set **\r\ncomment,status,dataset\r\n\"Felaket\",Negative,ProductComment\r\n\"Harika\",Positive,ProductComment\r\n\"Bilmem\",Notr,ProductComment\r\n...\r\n\r\n**Expected behavior**\r\nI do not even understand the exception (:","Url":"https://github.com/dotnet/machinelearning/issues/6751","RelatedDescription":"Open issue \"AutoML.NET: ArgumentOutOfRangeException: Score column 'Score' not found Arg_ParamName_Name\" (#6751)"},{"Id":"1782303763","IsPullRequest":false,"CreatedAt":"2023-06-30T13:24:57","Actor":"ermolaevakate","Number":"6750","RawContent":null,"Title":"ML.Net stuck on pretrained model Fit() method","State":"closed","Body":"**System Information (please complete the following information):**\r\n - Windows 10\r\n - ML.NET Version (downloaded through Nuget last stable version 2.0.1): \r\n - .NET Framework Version: 4.8\r\n\r\nthere is some code example which works with Pretrained model (link to whole example page https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.applywordembedding?view=ml-dotnet):\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n`using System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Transforms.Text;\r\n\r\nnamespace Samples.Dynamic\r\n{\r\n    public static class ApplyWordEmbedding\r\n    {\r\n        public static void Example()\r\n        {\r\n        // Create a new ML context, for ML.NET operations. It can be used for\r\n        // exception tracking and logging, as well as the source of randomness.\r\n        var mlContext = new MLContext();\r\n\r\n        // Create an empty list as the dataset. The 'ApplyWordEmbedding' does\r\n        // not require training data as the estimator ('WordEmbeddingEstimator')\r\n        // created by 'ApplyWordEmbedding' API is not a trainable estimator.\r\n        // The empty list is only needed to pass input schema to the pipeline.\r\n        var emptySamples = new List<TextData>();\r\n\r\n        // Convert sample list to an empty IDataView.\r\n        var emptyDataView = mlContext.Data.LoadFromEnumerable(emptySamples);\r\n\r\n        // A pipeline for converting text into a 150-dimension embedding vector\r\n        // using pretrained 'SentimentSpecificWordEmbedding' model. The\r\n        // 'ApplyWordEmbedding' computes the minimum, average and maximum values\r\n        // for each token's embedding vector. Tokens in \r\n        // 'SentimentSpecificWordEmbedding' model are represented as\r\n        // 50 -dimension vector. Therefore, the output is of 150-dimension [min,\r\n        // avg, max].\r\n        //\r\n        // The 'ApplyWordEmbedding' API requires vector of text as input.\r\n        // The pipeline first normalizes and tokenizes text then applies word\r\n        // embedding transformation.\r\n        var textPipeline = mlContext.Transforms.Text.NormalizeText(\"Text\")\r\n            .Append(mlContext.Transforms.Text.TokenizeIntoWords(\"Tokens\",\r\n                \"Text\"))\r\n            .Append(mlContext.Transforms.Text.ApplyWordEmbedding(\"Features\",\r\n                \"Tokens\", WordEmbeddingEstimator.PretrainedModelKind\r\n                .FastTextWikipedia300D));\r\n\r\n        // Fit to data.\r\n        var textTransformer = textPipeline.Fit(emptyDataView);\r\n\r\n        // Create the prediction engine to get the embedding vector from the\r\n        // input text/string.\r\n        var predictionEngine = mlContext.Model.CreatePredictionEngine<TextData,\r\n            TransformedTextData>(textTransformer);\r\n\r\n        // Call the prediction API to convert the text into embedding vector.\r\n        var data = new TextData()\r\n        {\r\n            Text = \"This is a great product. I would \" +\r\n            \"like to buy it again.\"\r\n        };\r\n        var prediction = predictionEngine.Predict(data);\r\n\r\n        // Print the length of the embedding vector.\r\n        Console.WriteLine($\"Number of Features: {prediction.Features.Length}\");\r\n\r\n        // Print the embedding vector.\r\n        Console.Write(\"Features: \");\r\n        foreach (var f in prediction.Features)\r\n            Console.Write($\"{f:F4} \");\r\n\r\n        //  Expected output:\r\n        //   Number of Features: 150\r\n        //   Features: -1.2489 0.2384 -1.3034 -0.9135 -3.4978 -0.1784 -1.3823 -0.3863 -2.5262 -0.8950 ...\r\n    }\r\n\r\n    private class TextData\r\n    {\r\n        public string Text { get; set; }\r\n    }\r\n    private class TransformedTextData : TextData\r\n    {\r\n        public float[] Features { get; set; }\r\n    }\r\n}} \r\n```\r\n\r\n\r\n**Expected behavior**\r\nSo, in my case if I use FastTextWikipedia300D OR Glove200D OR Glove 100D pretrained models there is a stuck process which not ends even after 10 mins while run there:\r\n\r\n` var textTransformer = textPipeline.Fit(emptyDataView);`\r\n\r\nI tried use this resolution: https://stackoverflow.com/a/54561423/5168936 But adding doesn't have any effect\r\n\r\n` AppendCacheCheckpoint(mlContext)`\r\n\r\nare there any ways to understand why this happened? It seems as a bug for me; thank you!\r\nIn debug console there is a lot of messages like: \r\n```\r\nThe thread 0x4284 has exited with code 0 (0x0).\r\nThe thread 0x4ae8 has exited with code 0 (0x0).\r\nThe thread 0x30fc has exited with code 0 (0x0).\r\nThe thread 0x5a8c has exited with code 0 (0x0).\r\n```\r\n\r\n\r\n**Additional context**\r\nIf  I use SentimentSpecificWordEmbedding pretrained model everything is OK and I can return vector for it;","Url":"https://github.com/dotnet/machinelearning/issues/6750","RelatedDescription":"Closed issue \"ML.Net stuck on pretrained model Fit() method\" (#6750)"},{"Id":"1781605931","IsPullRequest":true,"CreatedAt":"2023-06-29T22:47:36","Actor":"JakeRadMSFT","Number":"6749","RawContent":null,"Title":"WIP - Update Projects to .NET 8 in MLNET 4.0 Branch","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6749","RelatedDescription":"Open PR \"WIP - Update Projects to .NET 8 in MLNET 4.0 Branch\" (#6749)"},{"Id":"1779789165","IsPullRequest":true,"CreatedAt":"2023-06-28T21:21:34","Actor":"JakeRadMSFT","Number":"6748","RawContent":null,"Title":"Rebase 4.0 Branch on Main","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6748","RelatedDescription":"Closed or merged PR \"Rebase 4.0 Branch on Main\" (#6748)"},{"Id":"1779567789","IsPullRequest":true,"CreatedAt":"2023-06-28T19:08:59","Actor":"JakeRadMSFT","Number":"6747","RawContent":null,"Title":"Merge Main into Feature/4.0","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/6747","RelatedDescription":"Open PR \"Merge Main into Feature/4.0\" (#6747)"},{"Id":"1778222881","IsPullRequest":false,"CreatedAt":"2023-06-28T05:22:59","Actor":"arung2207","Number":"6746","RawContent":null,"Title":"More explaination needed","State":"open","Body":"More description about how to specify the Weights, can it be only one field or a combination of fields with examples should be provided.\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 56cb251f-c6b8-964e-fbad-60411e0f7f8d\r\n* Version Independent ID: 4ace19d6-df67-0c78-a7b8-7079e9b6e7a6\r\n* Content: [UnsupervisedTrainerInputBaseWithWeight.ExampleWeightColumnName Field (Microsoft.ML.Trainers)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.unsupervisedtrainerinputbasewithweight.exampleweightcolumnname?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/UnsupervisedTrainerInputBaseWithWeight.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/UnsupervisedTrainerInputBaseWithWeight.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6746","RelatedDescription":"Open issue \"More explaination needed\" (#6746)"},{"Id":"1772090172","IsPullRequest":true,"CreatedAt":"2023-06-28T00:02:57","Actor":"JakeRadMSFT","Number":"6744","RawContent":null,"Title":"Update build templates to handle feature branches","State":"closed","Body":"Updating build templates to handle feature branches. ","Url":"https://github.com/dotnet/machinelearning/pull/6744","RelatedDescription":"Closed or merged PR \"Update build templates to handle feature branches\" (#6744)"},{"Id":"1772069793","IsPullRequest":true,"CreatedAt":"2023-06-27T21:55:10","Actor":"JakeRadMSFT","Number":"6743","RawContent":null,"Title":"Update version to 4.0 for feature branch","State":"closed","Body":"Update version to 4.0 for feature branch.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6743","RelatedDescription":"Closed or merged PR \"Update version to 4.0 for feature branch\" (#6743)"},{"Id":"1777805163","IsPullRequest":false,"CreatedAt":"2023-06-27T21:52:10","Actor":"JakeRadMSFT","Number":"6745","RawContent":null,"Title":"Model Loading Fails when updating Assembly Version to match Major Version","State":"open","Body":"Currently our version is always 1.0.0.0.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/main/eng/Versions.props#L14\r\n\r\nWe should investigate why load failures happen:\r\n\r\n<img width=\"977\" alt=\"image\" src=\"https://github.com/dotnet/machinelearning/assets/31937616/e2062bf0-e538-42ec-a47f-3ade9bd0c473\">\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6745","RelatedDescription":"Open issue \"Model Loading Fails when updating Assembly Version to match Major Version\" (#6745)"},{"Id":"1770583638","IsPullRequest":true,"CreatedAt":"2023-06-23T09:25:08","Actor":"LittleLittleCloud","Number":"6742","RawContent":null,"Title":"stop shuffle rows in ITrainValidationDatasetManager","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\nShuffleRows transformer will drop non-cacheable columns, which causes [this issue](https://github.com/dotnet/machinelearning-modelbuilder/issues/2730)\r\n\r\nIn the meantime, user can always shuffle rows before sending dataset to AutoML. So in that aspect, shuffling rows in AutoML might not be necessary as well.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6742","RelatedDescription":"Closed or merged PR \"stop shuffle rows in ITrainValidationDatasetManager\" (#6742)"},{"Id":"1769302243","IsPullRequest":false,"CreatedAt":"2023-06-22T09:32:21","Actor":"Mike-CineonTraining","Number":"6741","RawContent":null,"Title":"Integration of ML.Net 2.0.1 into Unity 2022.3.2f1 causes \"DllNotFoundExeption: CpuMathNative\" error","State":"open","Body":"**System Information (please complete the following information):**\r\n - Windows 10 Home 22H2\r\n - ML.Net 2.0.1\r\n - .NET Standard 2.1 & .NET Framework (Set via Unity's \"Project Settings->Player->Api Compatibility Level\")\r\n\r\n**Describe the bug**\r\nWhen trying to call 'SentimentModel.Predict(sampleData)' Unity console produces \"DllNotFoundException: CpuMathNative <unknown assembly> error.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Install Unity 2022.3.2f1.\r\n2. Download the list of dll's in Appendix A (from attached zip or NuGet packages), and place in \"\\Assets\\Plugins\" of the Unity project.  A zip of the plugins is included in aforementioned Appendix.\r\n3. Create a \"sentiment model\" by working through the basic tutorial for ML.Net found [here](https://dotnet.microsoft.com/en-us/learn/ml-dotnet/get-started-tutorial/intro).\r\n4. Copy the \"SentimentModel.consumption.cs\" and \"SentimentModel.training.cs\" files (found under \"SentimentModel.mbconfig\" in the solution explorer) to the Unity project.\r\n5. Create a test script and call the sentiment model as per the instructions found in the \"Consume\" step of the models creation.  Please note, you will have to use a 'using' statement at the beginning of your test script, or explicitly use the namespace of the SentimentModel.  Snippet from my test project is in Appendix B.\r\n\r\n**Expected behaviour**\r\nThe model should provide either a '0' or a '1' to indicate whether the input text contained a negative or positive sentiment (respectively)\r\n\r\n**Actual behaviour**\r\n(In Editor)\r\nError occurs, citing \"DllNotFoundExceptionL CpuMathNative <unknown assembly>... \" - please see screenshot below for stack trace.\r\n\r\n(In standalone build)\r\nError occurs, contents are as follows:\r\n> WindowsPlayer \"[My Computer name]\" InvalidOperationException: Can't instantiate loadable class 'IDataTransform' with name 'ValueMappingTransformer'\r\n\r\n**Screenshots, Code, Sample Projects**\r\nError produced in Unity (pasting text might cause a parsing error, so screencapped instead)\r\n![MLNetError](https://github.com/dotnet/machinelearning/assets/104988222/4346950e-cecf-4bf6-96c0-660cef43cca3)\r\n\r\nImport settings (same for all DLL's)\r\n![Import1](https://github.com/dotnet/machinelearning/assets/104988222/dc331664-43c2-4e62-9ab9-9c40eeed79f8)\r\n![Import2](https://github.com/dotnet/machinelearning/assets/104988222/f6d53f15-1a4b-4912-b709-b68c6b740934)\r\n\r\n**Additional context**\r\nA similar error was reported previously for version 1.4 (issues #3919, #3764 and more).  However, despite building for x64 only, and setting the import settings for all the .DLL's as x64 only (unticking x86, see in second screenshot above) does not change the result.\r\nTrying all combos of \"API compatibility Level\" and \"Scripting Backend\" does not change the outcome.\r\n\r\nPublishing the C# project into single EXE with embedded model .zip is possible, but still wanting to explore Unity native option (no need for remote application calls).\r\n\r\nFull disclosure - my C# knowledge is self taught, and from a Unity perspective.  However I am trying to expand my understanding of the .NET ecosystem in general.  Apologies if I'm missing key fundamentals.\r\n\r\nP.S. Yes, I spelt SentimentModel with a capital 'O'.  I fat fingered it, and am living with it for now - please forgive me...\r\n\r\n**Appendix A:**\r\n[Plugins.zip](https://github.com/dotnet/machinelearning/files/11832242/Plugins.zip)\r\nMicrosoft.Bcl.AsyncInterfaces (2.0.1)\r\nMicrosoft.ML (2.0.1)\r\nMicrosoft.ML.Core (2.0.1)\r\nMicrosoft.ML.CpuMath (2.0.1)\r\nMicrosoft.ML.Data (2.0.1)\r\nMicrosoft.ML.DataView (2.0.1)\r\nMicrosoft.ML.KMeansClustering (2.0.1)\r\nMicrosoft.ML.PCA (2.0.1)\r\nMicrosoft.ML.StandardTrainers (2.0.1)\r\nMicrosoft.ML.Transforms (2.0.1)\r\nSystem.Collections.Immutable (7.0.0)\r\nSystem.Runtime.CompilerServices.Unsafe (7.0.0 Preview)\r\nSystem.Text.Encodings.Web (8.0.0 preview)\r\nSystem.Text.Json (8.0.0 preview)\r\nSystem.Threading.Channels (8.0.0 preview)\r\n\r\n**Appendix B:**\r\nSnippet of code used to call SentimentModel:\r\n```\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing MLCoreTest;\r\n\r\npublic class MLTest : MonoBehaviour\r\n{\r\n    [ContextMenu(\"Test the Model\")]\r\n    private void Test()\r\n    {\r\n        SentimentMOdel.ModelInput _model = new SentimentMOdel.ModelInput()\r\n        {\r\n            Col0 = \"I had a whale of a time\",\r\n        };\r\n\r\n        Debug.Log($\"{SentimentMOdel.Predict(_model).PredictedLabel}\");\r\n    }\r\n}\r\n```\r\n\r\nAny assistance is greatly appreciated.  If ML.Net just isn't usable with Unity (any version), any pointers for alternative solutions would be greatly appreciated.\r\n\r\nMany thanks,\r\n\r\nMichael\r\n\r\n[Edited 22/06/2023: Removing unnecessary code]","Url":"https://github.com/dotnet/machinelearning/issues/6741","RelatedDescription":"Open issue \"Integration of ML.Net 2.0.1 into Unity 2022.3.2f1 causes \"DllNotFoundExeption: CpuMathNative\" error\" (#6741)"},{"Id":"1764087230","IsPullRequest":true,"CreatedAt":"2023-06-21T17:33:27","Actor":"LittleLittleCloud","Number":"6738","RawContent":null,"Title":"smac - ignore fail trial during initialize","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nfix #https://github.com/dotnet/machinelearning-modelbuilder/issues/2721\r\n","Url":"https://github.com/dotnet/machinelearning/pull/6738","RelatedDescription":"Closed or merged PR \"smac - ignore fail trial during initialize\" (#6738)"},{"Id":"1767329532","IsPullRequest":false,"CreatedAt":"2023-06-21T10:59:35","Actor":"engilas","Number":"6740","RawContent":null,"Title":"Retrain existing model issue","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 10\r\n - ML.NET Version: ML.NET v2.0.1\r\n - .NET Version: .NET 7.0\r\n\r\n**Describe the bug**\r\nI have an existing model with about 500k weights.\r\nWhen I try to retrain it according to [this ](https://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net) tutorial, my new model has a vector of zero weights and makes the same prediction for any input data.\r\nI use only new records in for my retrain data, about 100 records. The original train data contains 100k records.\r\n\r\nWhat data should I pass to the Fit method while retraining? Should it contain only new data or the previous set + new data?\r\n\r\nTrainer: LbfgsLogisticRegressionBinaryTrainer\r\n\r\n**To Reproduce**\r\nI tried to reporoduce it using samples code from [here](https://github.com/dotnet/machinelearning/blob/main/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LbfgsLogisticRegression.cs)\r\nI created a new small dataset using GenerateRandomDataPoints(10);\r\nThen I created another model using Fit(newSmallData, oldParameters)\r\nBehavior was the same.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6740","RelatedDescription":"Open issue \"Retrain existing model issue\" (#6740)"},{"Id":"1764198941","IsPullRequest":true,"CreatedAt":"2023-06-20T17:48:17","Actor":"michaelgsharp","Number":"6739","RawContent":null,"Title":"Fix OSX official build.","State":"closed","Body":"Fixes OSX official build.","Url":"https://github.com/dotnet/machinelearning/pull/6739","RelatedDescription":"Closed or merged PR \"Fix OSX official build.\" (#6739)"},{"Id":"1763144278","IsPullRequest":false,"CreatedAt":"2023-06-19T09:36:44","Actor":"sheldor173","Number":"6737","RawContent":null,"Title":"Segmentation Fault","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Linux 20.04.5 LTS (Focal Fossa)\r\n - Microsoft.ML Version: 3.0.0-preview.23266.6\r\n - Microsoft.ML.TimeSeries Version: 3.0.0-preview.23266.6\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nThe C# application crashes giving a **segmentation fault (core dumped)** error. \r\nThe kernel logs show this thing, \"**motadata992 kernel: [2321935.184101] aiopsengine[1265920]: segfault at 10 ip 00007f00fb38143d sp 00007f014f4fc0a8 error 4 in libMklImports.so[7f00fa469000+5888000]**\".\r\n\r\n**To Reproduce**\r\nNo reproduce steps.\r\n\r\n**Expected behavior**\r\nThe C# application should run without crashing.\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n**Additional context**\r\nBelow is the Anomaly Detector Code which uses SR-CNN approach provided by ML-Net to detect anomalies.\r\n\r\n`using System.Text;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.TimeSeries;\r\n\r\nnamespace ML.Tasks;\r\n\r\npublic class AnomalyDetector\r\n{\r\n    private readonly MLContext _mlContext;\r\n\r\n    public AnomalyDetector(MLContext mlContext)\r\n    {\r\n        _mlContext = mlContext;\r\n    }\r\n\r\n    public List<Prediction>? Predict(IDataView dataView, StringBuilder errors)\r\n    {\r\n        try\r\n        {\r\n            var period = Util.CalculatePeriodicity(_mlContext, dataView, nameof(Input.Value));\r\n\r\n            var configOptions = new SrCnnEntireAnomalyDetectorOptions\r\n            {\r\n                DetectMode = SrCnnDetectMode.AnomalyAndMargin,\r\n            };\r\n\r\n            if (period != Constants.NotAvailable)\r\n            {\r\n                configOptions.Period = period;\r\n            }\r\n\r\n            return _mlContext.Data.CreateEnumerable<Prediction>(\r\n                _mlContext.AnomalyDetection.DetectEntireAnomalyBySrCnn(dataView, nameof(Prediction.Output),\r\n                    nameof(Input.Value),\r\n                    options: configOptions), false).ToList();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Bootstrap.Logger.Error(e);\r\n\r\n            errors.Append($\"error {e.Message} occurred while detecting anomalies, stack: {e.StackTrace}\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n    public class Prediction\r\n    {\r\n        public double[] Output { get; set; } = null!;\r\n    }\r\n\r\n    public class Input\r\n    {\r\n        public double Value { get; set; }\r\n    }\r\n}`","Url":"https://github.com/dotnet/machinelearning/issues/6737","RelatedDescription":"Open issue \"Segmentation Fault\" (#6737)"},{"Id":"1763017793","IsPullRequest":false,"CreatedAt":"2023-06-19T08:25:19","Actor":"ClaraGard","Number":"6736","RawContent":null,"Title":"How to get model builder's efficiency in my code","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: e.g. Windows 10\r\n - ML.NET Version: v2.0.1\r\n - .NET Version: .NET 6.0\r\n\r\n**Describe the bug**\r\nI am trying to make a regression model using autoML, when I am using the model builder it goes through a lot of models quickly (about 300 in 100 seconds) and when I am using an autoML experiment it tries about 10 models in 100 seconds, resulting in a much less efficient model and I would like to use autoML experiements to get several models automaticaly\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Load data.csv with Model2.cs\r\n2. use the pipeline I made\r\n3. It is slow and goes through 10 models, R² = 0.02\r\n4. Load the data with model builder\r\n5. create a regression model and train it\r\n6. it is fast and goes through 300 models R²=0.06\r\n\r\n**Additional context**\r\n[FirstMLProject.zip](https://github.com/dotnet/machinelearning/files/11785933/FirstMLProject.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/6736","RelatedDescription":"Open issue \"How to get model builder's efficiency in my code\" (#6736)"},{"Id":"1757714009","IsPullRequest":false,"CreatedAt":"2023-06-14T22:07:13","Actor":"luisquintanilla","Number":"6735","RawContent":null,"Title":"MaxSkipNgramLength hard-coded to 10","State":"open","Body":"When trying to produce N-Grams larger than 10, a message is thrown.\r\n\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/22342df7fb6d7e42e0d4089c137bf43e8dec7ee9/src/Microsoft.ML.Transforms/Text/NgramTransform.cs#L1043\r\n\r\nThis is because the `MaxSkipNgramLength` is hard-coded to 10\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/22342df7fb6d7e42e0d4089c137bf43e8dec7ee9/src/Microsoft.ML.Transforms/Text/NgramUtils.cs#L43\r\n\r\nIs there a reason why this is the case? Should this be another parameter that the user can set?","Url":"https://github.com/dotnet/machinelearning/issues/6735","RelatedDescription":"Open issue \"MaxSkipNgramLength hard-coded to 10\" (#6735)"},{"Id":"1756659500","IsPullRequest":false,"CreatedAt":"2023-06-14T11:19:34","Actor":"superichmann","Number":"6732","RawContent":null,"Title":"LossFunction Clarification Needed","State":"open","Body":"It is stated in the article that: \"_This is the average of a loss function **defined by the user**, computed over all the instances in the test set._\"\r\n\r\nCould you please clarify how exactly the user can define the Loss Function? for example to calculate RMSLE value.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: eb3d3648-6535-679e-73ba-e8d530cb5c4a\r\n* Version Independent ID: 29c2deb3-934e-d802-0232-44d5627b9243\r\n* Content: [RegressionMetrics.LossFunction Property (Microsoft.ML.Data)](https://learn.microsoft.com/en-us/dotnet/api/microsoft.ml.data.regressionmetrics.lossfunction?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Data/RegressionMetrics.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Data/RegressionMetrics.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @natke\r\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/6732","RelatedDescription":"Open issue \"LossFunction Clarification Needed\" (#6732)"},{"Id":"1755881176","IsPullRequest":false,"CreatedAt":"2023-06-14T01:31:26","Actor":"kennywangjin","Number":"6731","RawContent":null,"Title":"unknown feature with suffix listed in calculated PFI results","State":"open","Body":"I'm using AutoML cli to do ML and use generated c# projects to calculate PFI. However, the PFI results look strange. There are many unkonwn features with strange suffix listed in the results. \r\n\r\n![屏幕截图 2023-06-14 092429](https://github.com/dotnet/machinelearning/assets/3364218/2a367f95-b1b4-4c52-a79f-e8e2ab388eb2)\r\n\r\nAs the screenshot shows, there are many features like 'COMPONENT.Char.<?>|j|0\". But we just have \"COMPONENT\" feature.\r\nHow could I get a clean PFI list with only my raw features (no such suffix).\r\n\r\nOr is this an intended behavior? \r\n","Url":"https://github.com/dotnet/machinelearning/issues/6731","RelatedDescription":"Open issue \"unknown feature with suffix listed in calculated PFI results\" (#6731)"},{"Id":"1754618783","IsPullRequest":false,"CreatedAt":"2023-06-13T11:01:47","Actor":"thoron","Number":"6730","RawContent":null,"Title":"'Label' not found","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n - ML.NET Version: ML.NET v2.0.1\r\n - .NET Version: NET 7\r\n\r\n**Describe the bug**\r\n\r\nAn error for missing Label in Schema when trying to load text (csv) without header row.\r\n\r\nRow example:\r\n```\r\n5;0.968795895576477;0.8838793039321899;1.0125187635421753;1.0380022525787354;1.003713607788086;0.8773788213729858;0.7508044838905334;0.7412265539169312;0.7468504905700684;0.7589845061302185;0.7755808234214783;0.7674760818481445;0.6741359829902649;0.6582905054092407;0.6679562926292419;0.6805443167686462;0.6613132357597351;0.48050951957702637;0.5232967138290405;0.5599182844161987;0.522437334060669;0.5111487507820129;0.5027106404304504\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```csharp\r\nvar ctx = new MLContext(1);\r\nvar opts = new TextLoader.Options\r\n{\r\n    HasHeader = false,\r\n    Columns = new[]\r\n    {\r\n        new TextLoader.Column(\"Label\", DataKind.UInt32, 0),\r\n        new TextLoader.Column(\"Features\", DataKind.Single, 1, 29)\r\n    },\r\n    Separators = new[] {';'},\r\n};\r\nvar loader = ctx.Data.CreateTextLoader(opts);\r\nvar data = loader.Load(@\"C:\\test.csv\");\r\nvar trainValidationData = ctx.Data.TrainTestSplit(data, testFraction: 0.2);\r\nvar pipeline = ctx.Auto()\r\n    .Featurizer(data)\r\n    .Append(ctx.Transforms.Conversion.MapValueToKey(\"Label\"))\r\n    .Append(ctx.Auto().MultiClassification());\r\nvar xx = ctx.Auto()\r\n    .CreateExperiment()\r\n    .SetPipeline(pipeline)\r\n    .SetMulticlassClassificationMetric(MulticlassClassificationMetric.MacroAccuracy)\r\n    .SetTrainingTimeInSeconds(60)\r\n    .SetDataset(trainValidationData)\r\n    .Run();\r\n```\r\n\r\nRemoving `Featurizer` does not produce any different result, same error.\r\n```csharp\r\nvar pipeline = ctx.Transforms.Conversion.MapValueToKey(\"Label\")\r\n            .Append(ctx.Auto().MultiClassification());\r\n```\r\n\r\nGenerates error:\r\n\r\n```stacktrace\r\nSystem.AggregateException : One or more errors occurred. (label column 'Label' not found (Parameter 'schema'))\r\n  ----> System.ArgumentOutOfRangeException : label column 'Label' not found (Parameter 'schema')\r\nData:\r\n  ML_IsMarked: 1\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at Microsoft.ML.AutoML.AutoMLExperiment.Run()\r\n```\r\n\r\nLoaded data looks as expected:\r\n![image](https://github.com/dotnet/machinelearning/assets/1374642/595ee738-6423-408c-9dbb-9dad16858f6e)\r\n\r\n**Expected behavior**\r\n\r\nLoading schema for AutoML when Label has been specified.\r\n\r\nMight be due to missing header row and/or not using `InferColumns`. Schema looks fine on runtime manual inspection, am I missing something?","Url":"https://github.com/dotnet/machinelearning/issues/6730","RelatedDescription":"Open issue \"'Label' not found\" (#6730)"},{"Id":"1753419819","IsPullRequest":false,"CreatedAt":"2023-06-12T19:22:58","Actor":"claudiaregio","Number":"6729","RawContent":null,"Title":"Data preview view column blocked","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Windows 11\r\n \r\n![image](https://github.com/dotnet/machinelearning/assets/19276747/b39cf29f-0140-45b2-b933-1e4383b5a0c1)\r\n\r\n\r\n\r\n**Describe the bug**\r\nPreviewing table while going through tutorial does not show columns properly/column header and values are not aligned + a small white box appears in top left when I scroll all the way to the right. \r\n\r\n![image](https://github.com/dotnet/machinelearning/assets/19276747/6aabfa8f-84dd-47a3-a7d3-c7d0628fd488) \r\n![image](https://github.com/dotnet/machinelearning/assets/19276747/840ce300-780d-4554-b129-fcb7ab3f6ab8)\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Following steps through this tutorial: https://dotnet.microsoft.com/en-us/learn/ml-dotnet/get-started-tutorial/data\r\n2. Go to \"Download and add data\" step\r\n3. Go to \"Add data\" section\r\n4. Data Preview section does not look like image \r\n\r\n**Expected behavior**\r\nA table where I can scroll and see the columns and values. \r\n\r\n**Additional context**\r\nI am able to see/things align properly when I expand the width of the VS window but I would expect the scroll of the data preview to work properly regardless of my VS window width ","Url":"https://github.com/dotnet/machinelearning/issues/6729","RelatedDescription":"Open issue \"Data preview view column blocked\" (#6729)"},{"Id":"1751118365","IsPullRequest":false,"CreatedAt":"2023-06-10T21:00:45","Actor":"torronen","Number":"6728","RawContent":null,"Title":"AutoML 2.0: Label column from training data in output schema","State":"open","Body":"Nightly build in use on .NET 7.0\r\n\r\nQ: Should AutoML 2.0 drop the original label to predict and sampling key column ?\r\n\r\n###\r\nI am using one of the apps from machinelearning-samples repo for AutoML2.0\r\n\r\nI set a column \"Person\" as sampling key. Then I set \"Result\" as the label to predict.\r\nAfter training the model and inspecting the output, I can see there are columns PredictedLabel and Resulted, as well as Person.\r\n\r\nI believe the Resulted and Person maybe should be dropped from output schema so users of the model will not be confused.\r\n\r\nShould it by done by AutoML? I do not know, but old version of AutoML dropped these colums","Url":"https://github.com/dotnet/machinelearning/issues/6728","RelatedDescription":"Open issue \"AutoML 2.0: Label column from training data in output schema\" (#6728)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-07-09T03:30:21.0074537Z","RunDurationInMilliseconds":626}