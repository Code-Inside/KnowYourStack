{"Data":{"GitHub":{"Issues":[{"Id":"2509076954","IsPullRequest":true,"CreatedAt":"2024-09-09T22:02:38","Actor":"tarekgh","Number":"7233","RawContent":null,"Title":"Fix decoding special tokens in SentencePiece tokenizer","State":"closed","Body":"There was corner case while decoding special tokens Ids in Sentence Piece tokenizer and the special tokens ids show up in the beginning of the decoding list. The change here addresses that and ensures the special tokens will get decoded as expected. ","Url":"https://github.com/dotnet/machinelearning/pull/7233","RelatedDescription":"Closed or merged PR \"Fix decoding special tokens in SentencePiece tokenizer\" (#7233)"},{"Id":"2513948053","IsPullRequest":true,"CreatedAt":"2024-09-09T13:17:30","Actor":"WeihanLi","Number":"7236","RawContent":null,"Title":"docs: update nuget package badge","State":"open","Body":"update nuget package badge\r\n\r\n- link to the absolute latest version for the preview package\r\n- add stable version","Url":"https://github.com/dotnet/machinelearning/pull/7236","RelatedDescription":"Open PR \"docs: update nuget package badge\" (#7236)"},{"Id":"2513903268","IsPullRequest":true,"CreatedAt":"2024-09-09T12:58:58","Actor":"dotnet-maestro[bot]","Number":"7235","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\r\n- **Build**: 20240909.1\r\n- **Date Produced**: September 9, 2024 8:08:00 AM UTC\r\n- **Commit**: 8260f289b9d748432a34680a1afeac677cda6049\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 10.0.0-beta.24430.1 to 10.0.0-beta.24459.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/0ed1d3dc15...8260f289b9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7235","RelatedDescription":"Open PR \"[main] Update dependencies from dotnet/arcade\" (#7235)"},{"Id":"2512081073","IsPullRequest":false,"CreatedAt":"2024-09-07T21:15:45","Actor":"80LevelElf","Number":"7234","RawContent":null,"Title":"OneDAL support for LightGBM","State":"open","Body":"According to [Intel site LightGBM should already have OneDAL support](https://www.intel.com/content/www/us/en/developer/articles/technical/improve-performance-xgboost-lightgbm-inference.html).\r\n\r\nBut right now [ML.net supports OneDAL](https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/) only for:\r\nOrdinary Least Squares | Regression\r\nL-BGFS | Classification\r\nFastTree | Regression & Classification\r\nFastForest | Regression & Classification\r\n\r\nCould you provide OneDAL support for LightGBM too?","Url":"https://github.com/dotnet/machinelearning/issues/7234","RelatedDescription":"Open issue \"OneDAL support for LightGBM\" (#7234)"},{"Id":"2506956562","IsPullRequest":false,"CreatedAt":"2024-09-05T07:09:38","Actor":"bbhxwl","Number":"7232","RawContent":null,"Title":"How can the coordinates of YOLOv5 post-processing data be displayed on the original graph?","State":"open","Body":"https://github.com/bbhxwl/AiHelper\r\n\r\nI want to create a public project for everyone to use, but I found that the x, y, width, and height values I detected are not the original coordinates, and there seems to be duplicate data in the detection?\r\n\r\nHow should I modify my code?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7232","RelatedDescription":"Open issue \"How can the coordinates of YOLOv5 post-processing data be displayed on the original graph?\" (#7232)"},{"Id":"2503771575","IsPullRequest":true,"CreatedAt":"2024-09-03T20:56:21","Actor":"LittleLittleCloud","Number":"7231","RawContent":null,"Title":"[GenAI] Add Mistral 7B Instruction V0.3","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#7169 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/7231","RelatedDescription":"Open PR \"[GenAI] Add Mistral 7B Instruction V0.3\" (#7231)"},{"Id":"2460958274","IsPullRequest":true,"CreatedAt":"2024-09-02T21:03:10","Actor":"dotnet-maestro[bot]","Number":"7218","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: c692823c-b896-437f-4f57-08dc434cc8f6\r\n- **Build**: 20240830.1\r\n- **Date Produced**: August 30, 2024 4:28:10 PM UTC\r\n- **Commit**: 0ed1d3dc15420cd41c252b0c5d9474f197a29e06\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.SignTool**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.SwaggerGenerator.MSBuild**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.XliffTasks**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 9.0.0-beta.24423.2 to 10.0.0-beta.24430.1][5]\r\n\r\n[5]: https://github.com/dotnet/arcade/compare/9159926865...0ed1d3dc15\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:c692823c-b896-437f-4f57-08dc434cc8f6)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7218","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#7218)"},{"Id":"2495569548","IsPullRequest":true,"CreatedAt":"2024-08-30T17:30:46","Actor":"LittleLittleCloud","Number":"7227","RawContent":null,"Title":"[GenAI] Add generateEmbedding API to CausalLMPipeline","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n#7169 ","Url":"https://github.com/dotnet/machinelearning/pull/7227","RelatedDescription":"Closed or merged PR \"[GenAI] Add generateEmbedding API to CausalLMPipeline\" (#7227)"},{"Id":"2495785765","IsPullRequest":true,"CreatedAt":"2024-08-30T17:30:32","Actor":"LittleLittleCloud","Number":"7228","RawContent":null,"Title":"Directly refer sql data client 4.8.6 package in GenAI tests to fix security vulnerable package","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nhttps://dnceng.visualstudio.com/internal/_componentGovernance/dotnet-machinelearning/alert/9167777?typeId=13269444\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7228","RelatedDescription":"Closed or merged PR \"Directly refer sql data client 4.8.6 package in GenAI tests to fix security vulnerable package\" (#7228)"},{"Id":"2496127778","IsPullRequest":false,"CreatedAt":"2024-08-30T03:24:44","Actor":"jalin168","Number":"7230","RawContent":null,"Title":"ML.NET ObjectDetection vs YOLOv4","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nWhy is ML.NET significantly worse than YOLOv4(AlexeyAB) in accuracy?\r\nIs the ability of the AutoFormer algorithm used by ML.NET to detect objects inherently weaker than YOLOv4(AlexeyAB)?\r\nIn the ML.NET training parameter Epoch, the accuracy will not be better with more times. Is there any way to improve the accuracy of ML.NET?\r\n\r\n**Describe the solution you'd like**\r\nMy training dataset has 16 images and my test dataset has 4 images.\r\nThe purpose is to identify specific mark in grayscale images, such as the cross mark in the picture below.\r\nComparing object detection ML.NET(Version: 16.18 for VS2019) and YOLOv4(AlexeyAB).\r\n\r\n**Describe alternatives you've considered**\r\nYOLOv4(AlexeyAB) can detect the mark correctly in all 4 images of the test dataset.\r\nThe ML.NET training parameters use the default value Epoch 5. Only 2 images can be detected correctly. \r\nIf the Epoch is changed to 50 or 500, 4 images cannot be detected.\r\n\r\n**Additional context**\r\n![mark_sample](https://github.com/user-attachments/assets/2104a7a8-6c3a-4f4e-b811-bcbb85332699)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7230","RelatedDescription":"Open issue \"ML.NET ObjectDetection vs YOLOv4\" (#7230)"},{"Id":"2495972349","IsPullRequest":false,"CreatedAt":"2024-08-30T02:00:50","Actor":"thomasd3","Number":"7229","RawContent":null,"Title":"Unable to load shared library 'MklImports' on MacOS with CLI","State":"open","Body":"I am using the CLI tool, on MacOS.\r\n\r\nMy command line is:\r\n> mlnet forecasting --dataset training.csv --validation-dataset testing.csv --train-time 100 --label-col 1 --time-col 0 --horizon 1 --has-header true\r\n\r\nI went to:\r\nhttps://learn.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/install-extra-dependencies\r\n\r\nand installed the dependency with:\r\n> wget https://raw.githubusercontent.com/Homebrew/homebrew-core/fb8323f2b170bd4ae97e1bac9bf3e2983af3fdb0/Formula/libomp.rb && brew install ./libomp.rb && brew link libomp --force\r\n\r\nlibomp is installed, I've also installed the MKL lib from Intel just in case, but I keep getting a crash:\r\n\r\n```\r\nSystem.DllNotFoundException: Unable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable:                                               dlopen(/Users/thomas/.dotnet/tools/.store/mlnet-osx-x64/16.18.2/mlnet-osx-x64/16.18.2/tools/net8.0/any/MklImports.dylib, 0x0001): tried: '/Users/thomas/.dotnet/tools/.store/mlnet-osx-x64/16.18.2/mlnet-osx-x64/16.18.2/tools/net8.0/any/MklImports.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/Users/thomas/.dotnet/tools/.store/mlnet-osx-x64/16.18.2/mlnet-osx-x64/16.18.2/tools/net8.0/any/MklImports.dylib' (no such file), '/Users/thomas/.dotnet/tools/.store/mlnet-osx-x64/16.18.2/mlnet-osx-x64/16.18.2/tools/net8.0/any/MklImports.dylib' (no such file)\r\n```\r\n\r\nWhat am I missing?","Url":"https://github.com/dotnet/machinelearning/issues/7229","RelatedDescription":"Open issue \"Unable to load shared library 'MklImports' on MacOS with CLI\" (#7229)"},{"Id":"2487654395","IsPullRequest":true,"CreatedAt":"2024-08-29T21:09:44","Actor":"mhshahmoradi","Number":"7223","RawContent":null,"Title":"Refactor Namespace and Seald Classes in Microsoft.ML.AutoML.SourceGenerator Project","State":"closed","Body":"### Summary\r\nThis PR refactors the namespace for the `Microsoft.ML.ModelBuilder.SweepableEstimator.CodeGenerator` to `Microsoft.ML.AutoML.SourceGenerator`. This change aligns the namespace with the new project structure and organizational conventions.\r\n\r\n### Changes\r\n- Updated the namespace from `Microsoft.ML.ModelBuilder.SweepableEstimator.CodeGenerator` to `Microsoft.ML.AutoML.SourceGenerator` across all files in the project.\r\n\r\n### Justification\r\nThe namespace change is intended to better reflect the purpose and context of the code within the `Microsoft.ML.AutoML.SourceGenerator` project. By aligning the namespace with the project's new structure, we improve code organization and maintain consistency with other parts of the codebase.\r\n\r\n### Impact\r\n- This change will require updating references to the affected namespace in other parts of the codebase and any related documentation or tests.\r\n- Ensure that any dependent projects or modules are updated to use the new namespace.\r\n\r\n### Testing\r\n- All existing tests have been run to ensure that the namespace change does not introduce any issues or regressions.\r\n- Verify that all references and imports in the codebase are updated accordingly.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/7223","RelatedDescription":"Closed or merged PR \"Refactor Namespace and Seald Classes in Microsoft.ML.AutoML.SourceGenerator Project\" (#7223)"},{"Id":"2493794661","IsPullRequest":false,"CreatedAt":"2024-08-29T08:32:46","Actor":"Tatyana-Stoyanova","Number":"7226","RawContent":null,"Title":"Integrating ML.Net 3.0.1 into Unity 2022.3.28f1 causes \"DllNotFoundExeption: CpuMathNative\"","State":"open","Body":"**System Information (please complete the following information):**\r\n - Windows 10\r\n - ML.NET Version: 3.0.1\r\n - Api Compatibility Level - .Net FrameWork\r\n - VS 2022 17.11.2\r\n - NuGet for Unity 4.1.1\r\n\r\n**Describe the bug**\r\nTrying to fit the model causes DllNotFoundException: CpuMathNative error in the console.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Install Microsoft.ML(3.0.1) and System.Runtime.CompilerServices.Unsafe(6.0.0) using NuGet for Unity. (other dependencies are automatically installed - such as Microsoft.ML.CpuMath.3.0.1, Microsoft.ML.DataView.3.0.1, System.Memory.4.5.5, System.Numerics.Tensors.8.0.0) \r\n2. Create TextLoader to read data from csv file, make a pipeline to preprocess data and fit the model\r\n4. See error\r\n\r\n**Expected behavior**\r\nThe fiting must create a model that is ready to be used for evaluetion and prediction.\r\n\r\n**Actual behaviour**\r\n(In Editor)\r\n\"DllNotFoundExceptionL CpuMathNative ... \"\r\n\r\n**Screenshots, Code, Sample Projects**\r\n![image](https://github.com/user-attachments/assets/03386ff6-2f94-4eaf-961a-4891c62167ca)\r\nDlls import settings\r\n![image](https://github.com/user-attachments/assets/74831d70-b896-4399-8d2e-dd19f53e44be)\r\n\r\n**Additional context**\r\nThe bug is duplicate of #6741. The proposed solution https://github.com/dotnet/machinelearning/issues/6741#issuecomment-1612111915 by @luisquintanilla does not fix the issue, because in the Microsoft.ML.CpuMath package that was importet as Nuget there was no CPUMathNative.dll, only Microsoft.ML.CPUMath.dll.\r\nActually the problem was solved with copying of the missing dll from the Minimal ML Test example posted on following issue: [MLContext.Data.LoadFromEnumerable() not working in Unity for netstandard2.0 api](https://github.com/dotnet/machinelearning/issues/5760#issue-865040147), but the CpuMathNative.dll is actually missing in the last version of Microsoft.ML.CpuMath.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7226","RelatedDescription":"Open issue \"Integrating ML.Net 3.0.1 into Unity 2022.3.28f1 causes \"DllNotFoundExeption: CpuMathNative\"\" (#7226)"},{"Id":"2493230417","IsPullRequest":false,"CreatedAt":"2024-08-29T00:42:40","Actor":"xqiu","Number":"7225","RawContent":null,"Title":"Onnx with single float output throws exception during MLContext predict","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: [Windows 11] \r\n - ML.NET Version: [ML.NET v3.0.1]\r\n - .NET Version: [.NET 8.0]\r\n - Microsoft.ML.OnnxRuntime Version: [1.1.9.1]\r\n - Microsoft.ML.OnnxTransformer Version: [1.1.9.1]\r\n - \r\n**Describe the bug**\r\nI have an onnx file with only a single float32 output.  By using the following class  to map the output with mlContext.Transforms.ApplyOnnxModel, and CreatePredictionEngine, predict function will report System.ArgumentNullException: Value cannot be null. (Parameter 'source') at Microsoft.ML.Transforms.Onnx.OnnxTransformer.Mapper.<>c__DisplayClass16_0`1.<MakeObjectGetter>\r\n\r\nI can use InferenceSession to run it without problem. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone https://github.com/xqiu/ml_onnx_output_error\r\n2. Run the program to see the bug appearance\r\n\r\nCode is:\r\n\r\n~~~\r\n    public class ModelInput\r\n    {\r\n        [ColumnName(\"input\")]\r\n        [VectorType(1, 1, 40, 40)]  // Adjust dimensions to match your model input\r\n        public float[] Features { get; set; } = new float[1 * 1 * 40 * 40];  // Flattened 4D array for ONNX input\r\n    }\r\n\r\n    public class ModelOutput\r\n    {\r\n        [ColumnName(\"output\")]\r\n        public float Prediction { get; set; }\r\n    }\r\n\r\n        public static void PredictWithMLContextSingle(string modelPath)\r\n        {\r\n            Console.WriteLine(\"\\r\\nRun PredictWithMLContext:\");\r\n\r\n            var mlContext = new MLContext();\r\n\r\n            // Define the ONNX pipeline\r\n            var pipeline = mlContext.Transforms.ApplyOnnxModel(\r\n                modelFile: modelPath,\r\n                outputColumnNames: new[] { \"output\" },\r\n                inputColumnNames: new[] { \"input\" });\r\n            // Prepare input data (replace this with your actual input data)\r\n            var input = new ModelInput();\r\n            for (int i = 0; i < input.Features.Length; i++)\r\n            {\r\n                input.Features[i] = 0.1f; // Example value, replace with your actual data\r\n            }\r\n\r\n            // Create the data view with a single item wrapped in a list\r\n            var emptyDataView = mlContext.Data.LoadFromEnumerable(new[] { input });\r\n\r\n            // Fit the pipeline\r\n            var mlModel = pipeline.Fit(emptyDataView);\r\n\r\n            // Load the model\r\n            var predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);\r\n\r\n            // Perform prediction\r\n            var output = predictionEngine.Predict(input);\r\n\r\n            Console.WriteLine(\"Using MLContext Prediction result:\");\r\n            Console.WriteLine($\"Output: {output}\");\r\n        }\r\n\r\n~~~\r\n\r\n**Expected behavior**\r\nPrediction works with MLContext.\r\n\r\n**Screenshots, Code, Sample Projects**\r\nSample code in  https://github.com/xqiu/ml_onnx_output_error \r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7225","RelatedDescription":"Open issue \"Onnx with single float output throws exception during MLContext predict\" (#7225)"},{"Id":"2471294751","IsPullRequest":true,"CreatedAt":"2024-08-28T22:35:31","Actor":"LittleLittleCloud","Number":"7220","RawContent":null,"Title":"[GenAI] Add LLaMA support","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n#7169 ","Url":"https://github.com/dotnet/machinelearning/pull/7220","RelatedDescription":"Closed or merged PR \"[GenAI] Add LLaMA support\" (#7220)"},{"Id":"2490650726","IsPullRequest":false,"CreatedAt":"2024-08-28T01:04:08","Actor":"Eddie-Hartman","Number":"7224","RawContent":null,"Title":"Blazor WASM and byte[] ONNX Support","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nI would like to be able to run ML.NET with ONNX Runtime in Blazor WASM. ML.NET should also support ONNX models using byte[] in addition to file references.\r\n\r\n**Describe the solution you'd like**\r\nI forked the repo and made an example of changes here: https://github.com/dotnet/machinelearning/compare/main...Eddie-Hartman:machinelearning:main\r\n\r\nHowever, after compiling and updating references in my own example application, I still get errors an error:\r\n```\r\nUnhandled exception rendering component: The type initializer for 'Microsoft.ML.OnnxRuntime.NativeMethods' threw an exception.\r\nSystem.TypeInitializationException: The type initializer for 'Microsoft.ML.OnnxRuntime.NativeMethods' threw an exception.\r\n ---> System.DllNotFoundException: onnxruntime\r\n   at Microsoft.ML.OnnxRuntime.NativeMethods..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions..ctor()\r\n   at Microsoft.ML.Transforms.Onnx.OnnxModel..ctor(String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, Boolean ownModelFile, IDictionary`2 shapeDictionary, Int32 recursionLimit, Nullable`1 interOpNumThreads, Nullable`1 intraOpNumThreads, Byte[] modelBytes) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 219\r\n   at Microsoft.ML.Transforms.Onnx.OnnxModel.CreateFromBytes(Byte[] modelBytes, IHostEnvironment env, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary, Int32 recursionLimit) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxUtils.cs:line 396\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs:line 265\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary, Int32 recursionLimit, Nullable`1 interOpNumThreads, Nullable`1 intraOpNumThreads, Byte[] modelBytes) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs:line 330\r\n   at Microsoft.ML.Transforms.Onnx.OnnxScoringEstimator..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary, Int32 recursionLimit, Nullable`1 interOpNumThreads, Nullable`1 intraOpNumThreads, Byte[] modelBytes) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxTransform.cs:line 927\r\n   at Microsoft.ML.OnnxCatalog.ApplyOnnxModel(TransformsCatalog catalog, OnnxOptions options, Byte[] modelBytes) in C:\\Users\\EddieHartman\\source\\repos\\machinelearning\\src\\Microsoft.ML.OnnxTransformer\\OnnxCatalog.cs:line 142\r\n   at AppFramework.ImageProcessing.ImageProcessor.ProcessImage(Stream onnxModelStream) in C:\\Users\\EddieHartman\\source\\repos\\ONNX App POC\\AppFramework\\ImageProcessing\\ImageProcessor.cs:line 41\r\n   at AppFramework.Pages.Multimedia.ProcessFile(SavedFile file) in C:\\Users\\EddieHartman\\source\\repos\\ONNX App POC\\AppFramework\\Pages\\Multimedia.razor:line 111\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at MudBlazor.MudBaseButton.OnClickHandler(MouseEventArgs ev)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)\r\n```\r\n\r\n**Additional context**\r\nMy fork above is simply a proof of concept since one of the first obstacles that I ran into was calling `mlContext.Transformers.ApplyOnnxModel` without being able to point to a file. The ONNX runtime for C# supports using byte arrays, so I added a proof of concept of support above. This code generally around this also seems like it could use cleaned up in general. For example, I removed creating a temporary copy of saving the byte[] to a file since the runtime can just use it directly. Therefore, the code around owning the model and cleaning up temporary files and holding streams open can likely all get cleaned up as well.\r\n\r\nSo once this gets fleshed out and implemented, what is the actual limitation for getting this running in Blazor WASM?\r\n\r\nI also found this issue: https://github.com/microsoft/onnxruntime/issues/14962 and would like some help to better understand why it's an actual issue and what it would take to get running.\r\n\r\nIn terms of the actual byte[] feature, I wouldn't mind spending more time fleshing it out, but I'm trying to accomplish something specific here and would like to better understand if it's at all possible and what kind of effort needs to go into getting it working between the two projects before spending a lot more time on it.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7224","RelatedDescription":"Open issue \"Blazor WASM and byte[] ONNX Support\" (#7224)"},{"Id":"2446279735","IsPullRequest":false,"CreatedAt":"2024-08-27T19:52:14","Actor":"ks1990cn","Number":"7208","RawContent":null,"Title":"Need documentation to use ML .Net for personalize recommendation ","State":"closed","Body":"Hi,\r\n\r\nI am looking for documentation to use ML .Net for personalize recommendation with AWS in real time. Iam looking for AWS personalize alternative.\r\n\r\nhttps://aws.amazon.com/blogs/architecture/architecting-near-real-time-personalized-recommendations-with-amazon-personalize/\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7208","RelatedDescription":"Closed issue \"Need documentation to use ML .Net for personalize recommendation \" (#7208)"},{"Id":"2448187812","IsPullRequest":false,"CreatedAt":"2024-08-27T19:47:15","Actor":"bbhxwl","Number":"7211","RawContent":null,"Title":"Can it be used on MAUI?","State":"closed","Body":"Can it be used on MAUI?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7211","RelatedDescription":"Closed issue \"Can it be used on MAUI?\" (#7211)"},{"Id":"2483805824","IsPullRequest":false,"CreatedAt":"2024-08-23T20:00:31","Actor":"thomasd3","Number":"7222","RawContent":null,"Title":"mlnet cli will not run binary classification, but always multiclass despite label having 2 values only.","State":"open","Body":"I have a data set that has a label made of 0 and 1, but the classification always runs as multiclass.\r\n\r\nThe command line is:\r\n> mlnet classification --dataset output.csv --label-col 7 --ignore-cols 0 5 6 8 9 10 11 12 13 14 15 16 --has-header true --name wl\r\n\r\nand I have attached the data:\r\n[output.csv](https://github.com/user-attachments/files/16733138/output.csv)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7222","RelatedDescription":"Open issue \"mlnet cli will not run binary classification, but always multiclass despite label having 2 values only.\" (#7222)"},{"Id":"2478185220","IsPullRequest":false,"CreatedAt":"2024-08-21T14:27:14","Actor":"schalke046","Number":"7221","RawContent":null,"Title":"Documentation of question and answer models","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently, I'm trying to understand and use question aber models, but somehow I'm unable to find information about it.\r\n\r\n**Describe the solution you'd like**\r\nAn example of using this kind of model by ML.Net\r\n\r\n**Describe alternatives you've considered**\r\nDocumentation page with examples to train and use\r\n\r\n**Additional context**\r\n-","Url":"https://github.com/dotnet/machinelearning/issues/7221","RelatedDescription":"Open issue \"Documentation of question and answer models\" (#7221)"},{"Id":"2468081063","IsPullRequest":false,"CreatedAt":"2024-08-15T13:43:13","Actor":"schalke046","Number":"7219","RawContent":null,"Title":"ASP.NET vs ML.Net ObjectDetection","State":"open","Body":"**System Information (please complete the following information):**\r\n - OS & Version: Docker linux\r\n - ML.NET Version: latest\r\n - .NET Version: 8.0\r\n\r\n**Describe the bug**\r\nHi all,\r\n\r\nI'm currently having an issue with object detection in the docker container by using TorchSharp-Cpu. The first object detection is going fine by having around 2 GB in use, but after more like 100 the RAM usage is going up to 4GB and more. \r\nAnd the worst part of it is that this is running out of memory after a while. \r\nLooking at the process after the usage was done, there was no decrease in memory usage happening.\r\n\r\nThe model is created by images up to 9MB PNGs but resized in the model to only 250 by 250.\r\n\r\nI was already multiple times checking the using statements and all IDisposable objects.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set Up ASP.Web API\r\n2. Add an object detection Model => train it etc.\r\n3. Add a controller to use the model\r\n4. Provide an upload function with IFormFile\r\n5. Add using on opening the IFormFileStream\r\n6. Add using for the ModelInput\r\n7. Add a result around the prediction, store the result of precision in that, and close or make a using the output image.\r\n8. Make sure all using's are there and all streams are going to be closed.\r\n9. Optional (Add a lock statement around prediction to make it anytime single-threaded)\r\n\r\n**Expected behavior**\r\nRAM usage for single-threaded usage should go not over 2.5 GB or come down after usage. Dot. Memory on Windows was only showing that there is a lot of unmanaged Memory in use (streams).\r\n\r\n**Screenshots, Code, Sample Projects**\r\n![image](https://github.com/user-attachments/assets/df8408cc-1c08-427c-9280-5a40dfb90c6d)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7219","RelatedDescription":"Open issue \"ASP.NET vs ML.Net ObjectDetection\" (#7219)"},{"Id":"2459374450","IsPullRequest":false,"CreatedAt":"2024-08-11T01:55:31","Actor":"IntegerMan","Number":"7217","RawContent":null,"Title":"Update or retire ROADMAP.md","State":"open","Body":"**System Information (please complete the following information):**\r\n- N/A\r\n\r\n**Describe the bug**\r\nhttps://github.com/dotnet/machinelearning/blob/main/ROADMAP.md is oriented around ML.NET 3.0 and may confuse others or look bad as this release has already occurred. This file comes up in SEO for searches for ML.NET 4.0 or ML.NET upcoming features.\r\n\r\n**To Reproduce**\r\nSee https://github.com/dotnet/machinelearning/blob/main/ROADMAP.md\r\n\r\n**Expected behavior**\r\nI'd love this page to get updated periodically, but barring that it should probably be removed\r\n\r\n**Screenshots, Code, Sample Projects**\r\n\r\n**Additional context**\r\nWas looking for resources to link to for ML.NET 4.0 and what to expect from ML.NET ahead for an article I'm writing.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7217","RelatedDescription":"Open issue \"Update or retire ROADMAP.md\" (#7217)"},{"Id":"2453823444","IsPullRequest":true,"CreatedAt":"2024-08-08T00:12:45","Actor":"michaelgsharp","Number":"7216","RawContent":null,"Title":"Update dependency versions.","State":"closed","Body":"This PR updates all our dependencies (minus a few that will require larger code changes).\r\n\r\nThere is a new analyzer rule is added by one of these dependencies, but we are suppressing that issue for now and @LittleLittleCloud will fix it in a separate PR.","Url":"https://github.com/dotnet/machinelearning/pull/7216","RelatedDescription":"Closed or merged PR \"Update dependency versions.\" (#7216)"},{"Id":"2450354515","IsPullRequest":false,"CreatedAt":"2024-08-06T09:07:14","Actor":"bbhxwl","Number":"7215","RawContent":null,"Title":"Yolov5    Why do the following models use the same method but have different results? Is it a C # issue?","State":"open","Body":"Why do the following models use the same method but have different results? Is it a C # issue?\r\n\r\nHow can C # achieve code with the same effect as Python?\r\n\r\n\r\n```C#\r\n// See https://aka.ms/new-console-template for more information\r\n\r\nusing System.Drawing;\r\nusing ConsoleApp3;\r\nusing Microsoft.ML.OnnxRuntime;\r\n\r\nInferenceSession session = new InferenceSession(\"D:\\\\yolov5\\\\yolov5x.onnx\");\r\nList<NamedOnnxValue> inputs = new List<NamedOnnxValue>();\r\nvar bit=(Bitmap)Bitmap.FromFile(\"C:\\\\Users\\\\47013\\\\Desktop\\\\2.jpeg\");\r\ninputs.Add(NamedOnnxValue.CreateFromTensor<float>(\"images\",test.PreprocessImage(bit)));\r\n\r\nvar results = session.Run(inputs);\r\nvar output=results.First().AsTensor<float>();\r\nvar boxes = new List<float[]>();\r\n\r\nfor (int i = 0; i < output.Dimensions[1]; i++)\r\n{\r\n    var boxData = new float[85];\r\n    for (int j = 0; j < 85; j++)\r\n    {\r\n        boxData[j] = output[0, i, j];\r\n    }\r\n    boxes.Add(boxData);\r\n}\r\n\r\nvar asd=test.DrawBoundingBoxes(bit,boxes,0.1f);\r\nasd.Save(\"test.jpg\");\r\nvar m=boxes.Max(s => s[4]);\r\nList<float> ll = new List<float>();\r\nforeach (var box in boxes)\r\n{\r\n    float confidence = box[4];\r\n    ll.Add(confidence);\r\n}\r\nvar sasd=ll.Max();\r\nConsole.WriteLine();\r\n```\r\n\r\n```\r\nimport datetime\r\n\r\nimport torch\r\n\r\n# 加载模型\r\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5x', pretrained=True)\r\n\r\n# 设置模型为评估模式\r\nmodel.eval()\r\n\r\n# 图像文件路径\r\nimg_path = 'C:\\\\Users\\\\47013\\\\Desktop\\\\新建文件夹\\\\2.jpeg'  # 替换为你自己的图像路径\r\nstart_time = datetime.datetime.now()\r\n# 进行推理\r\nresults = model(img_path)\r\nprint(datetime.datetime.now() - start_time)\r\n# 解析结果\r\nresults.print()  # 打印检测结果\r\nresults.show()   # 显示带检测框的图像\r\n\r\n# 访问结果数据\r\ndetections = results.xyxy[0]  # 访问检测结果，格式为 (x1, y1, x2, y2, confidence, class)\r\n\r\n# 打印检测框的详细信息\r\nfor *box, conf, cls in detections:\r\n    print(f\"Detected {model.names[int(cls)]} with confidence {conf:.2f} at [{box[0]:.2f}, {box[1]:.2f}, {box[2]:.2f}, {box[3]:.2f}]\")\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/7215","RelatedDescription":"Open issue \"Yolov5    Why do the following models use the same method but have different results? Is it a C # issue?\" (#7215)"},{"Id":"2449731515","IsPullRequest":false,"CreatedAt":"2024-08-06T01:12:46","Actor":"masoodafar-web","Number":"7214","RawContent":null,"Title":"Issue with onnxruntime.dll not found in .NET 7.0 project","State":"open","Body":"Hello,\r\n\r\nI am encountering an issue with my .NET 7.0 project using ONNX Runtime. Despite having Microsoft.ML.OnnxRuntime.dll in my project, the application fails with an error indicating that onnxruntime.dll cannot be found.\r\n\r\nHere are the steps I followed:\r\n\r\nI ensured onnxruntime.dll is located in bin\\Debug\\net7.0\\runtimes\\win-x64\\native.\r\nI manually copied onnxruntime.dll to bin\\Debug\\net7.0, but the issue persists.\r\nI updated my .csproj file with the following configuration to copy the DLL automatically:\r\n`\r\n<ItemGroup>\r\n    <None Update=\"runtimes\\win-x64\\native\\onnxruntime.dll\">\r\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n</ItemGroup>\r\n`\r\n The application crashes at the following line without throwing an error:\r\n `NativeApiStatus.VerifySuccess(NativeMethods.OrtCreateSessionOptions(out handle));`\r\nHowever, the problem remains unsolved. I would appreciate any guidance on resolving this issue.\r\n\r\nEnvironment:\r\n\r\n.NET 7.0\r\nMicrosoft.ML.OnnxRuntime version [1.18.1]\r\nWindows [11]\r\nThank you!","Url":"https://github.com/dotnet/machinelearning/issues/7214","RelatedDescription":"Open issue \"Issue with onnxruntime.dll not found in .NET 7.0 project\" (#7214)"},{"Id":"2449643579","IsPullRequest":false,"CreatedAt":"2024-08-05T23:33:27","Actor":"vsfeedback","Number":"7213","RawContent":null,"Title":"DataFrame LoadCsv improvements","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataFrame-LoadCsv-improvements/10714999)._\n\n---\nThe DataFrame.LoadCsv method could be improved in a number of ways:\n\n- Use double when the precision in the data allows it. Now float is always used when the data is floating point.\n- Allow the user to define NaN in floating point columns data. In R code that we are also using, NA is typically used.\n- Speed improvements if possible.\n- I think there is a problem with defining culture info in the parameter. I have to do:\nThread.CurrentThread.CurrentCulture = new CultureInfo(\"en-US\"); before the call to LoadCsv to make floating point data with decimal points load correctly (in Sweden).\n\n---\n### Original Comments\n\n#### Feedback Bot on 8/1/2024, 10:56 PM: \n\n(private comment, text removed)","Url":"https://github.com/dotnet/machinelearning/issues/7213","RelatedDescription":"Open issue \"DataFrame LoadCsv improvements\" (#7213)"},{"Id":"2448767235","IsPullRequest":false,"CreatedAt":"2024-08-05T14:56:28","Actor":"bbhxwl","Number":"7212","RawContent":null,"Title":"How to convert the following Python code into C # code to make it the same code?","State":"open","Body":"```\r\nimport torch\r\nimport torchvision.transforms as transforms\r\nfrom torchvision.models.detection import ssd300_vgg16\r\nfrom PIL import Image\r\nimport numpy as np\r\n\r\n\r\ndef preprocess_image(image_path):\r\n    \"\"\"\r\n    预处理输入图像，将其调整为模型需要的输入格式。\r\n    \"\"\"\r\n    # 定义图像转换\r\n    transform = transforms.Compose([\r\n        transforms.Resize((300, 300)),  # 调整图像大小\r\n        transforms.ToTensor(),  # 转换为张量\r\n        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # 标准化\r\n    ])\r\n\r\n    # 打开图像并应用转换\r\n    image = Image.open(image_path).convert('RGB')\r\n    image_tensor = transform(image).unsqueeze(0)  # 添加批次维度\r\n\r\n    return image_tensor\r\n\r\ndef run_inference(image_tensor, threshold=0.5):\r\n    \"\"\"\r\n    使用 SSD 模型进行推理，并根据置信度分数过滤结果。\r\n    \"\"\"\r\n    # 加载预训练的 SSD 模型\r\n    model = ssd300_vgg16(pretrained=True)\r\n    model.eval()  # 切换模型到评估模式\r\n\r\n    with torch.no_grad():\r\n        # 进行推理\r\n        predictions = model(image_tensor)\r\n\r\n    # 提取检测结果\r\n    boxes = predictions[0]['boxes'].numpy()\r\n    labels = predictions[0]['labels'].numpy()\r\n    scores = predictions[0]['scores'].numpy()\r\n\r\n    # 根据置信度分数过滤结果\r\n    filtered_boxes = boxes[scores > threshold]\r\n    filtered_labels = labels[scores > threshold]\r\n    filtered_scores = scores[scores > threshold]\r\n\r\n    return filtered_boxes, filtered_labels, filtered_scores\r\n\r\ndef print_results(boxes, labels, scores):\r\n    \"\"\"\r\n    打印检测结果。\r\n    \"\"\"\r\n    print(\"检测结果：\")\r\n    for i in range(len(labels)):\r\n        print(f\"Box: {boxes[i]}\")\r\n        print(f\"Label: {labels[i]}\")\r\n        print(f\"Score: {scores[i]:.2f}\\n\")\r\n\r\nimage_path = \"/Users/xuzhibin/Downloads/6ee927a0d4f2c9862a918798de175f5.jpg\"  \r\nimage_tensor = preprocess_image(image_path)\r\nboxes, labels, scores = run_inference(image_tensor)\r\nprint_results(boxes, labels, scores)\r\n```\r\n\r\n```\r\n\r\nusing ConsoleApp10;\r\nusing Microsoft.ML.OnnxRuntime;\r\nusing Microsoft.ML.OnnxRuntime.Tensors;\r\n\r\nstring modelPath = \"/Users/xuzhibin/Desktop/python/myScript/ssd300_vgg16.onnx\";\r\nusing var session = new InferenceSession(modelPath);\r\nvar inputData=test.PreprocessImage(\"/Users/xuzhibin/Downloads/6ee927a0d4f2c9862a918798de175f5.jpg\");\r\n// 创建张量\r\nvar inputTensor = new DenseTensor<float>(inputData, new[] { 1, 3, 300, 300 });\r\n\r\n// 设置输入\r\nvar inputs = new List<NamedOnnxValue>\r\n{\r\n    NamedOnnxValue.CreateFromTensor(\"input\", inputTensor)\r\n};\r\n\r\n// 运行推理\r\nusing IDisposableReadOnlyCollection<DisposableNamedOnnxValue> results = session.Run(inputs);\r\n\r\n// 获取输出\r\nvar boxes = results.FirstOrDefault(x => x.Name == \"boxes\").AsEnumerable<float>().ToArray();\r\nvar labels = results.FirstOrDefault(x => x.Name == \"labels\").AsEnumerable<long>().ToArray();\r\nvar scores = results.FirstOrDefault(x => x.Name == \"scores\").AsEnumerable<float>().ToArray();\r\n\r\n// 输出前几个检测结果\r\nConsole.WriteLine(\"检测结果：\");\r\nfor (int i = 0; i < Math.Min(5, labels.Length); i++)\r\n{\r\n    Console.WriteLine($\"Box: {boxes[i * 4 + 0]}, {boxes[i * 4 + 1]}, {boxes[i * 4 + 2]}, {boxes[i * 4 + 3]}\");\r\n    Console.WriteLine($\"Label: {labels[i]}\");\r\n    Console.WriteLine($\"Score: {scores[i]}\");\r\n}\r\n```\r\n```\r\nusing System.Drawing;\r\nusing System.Drawing.Imaging;\r\nusing SkiaSharp;\r\n\r\nnamespace ConsoleApp10;\r\n\r\npublic class test\r\n{\r\n    public static float[] PreprocessImage(string imagePath)\r\n    {\r\n        // 读取图像为 SKBitmap\r\n        using var inputStream = File.OpenRead(imagePath);\r\n        using var originalBitmap = SKBitmap.Decode(inputStream);\r\n        // 创建新的 Bitmap，调整到模型需要的大小\r\n        using var resizedBitmap = originalBitmap.Resize(new SKImageInfo(300, 300), SKFilterQuality.High);\r\n        // 创建数据数组\r\n        var inputData = new float[1 * 3 * 300 * 300];\r\n        int index = 0;\r\n\r\n        // 遍历每个像素，将颜色值归一化到 [0, 1] 范围\r\n        for (int y = 0; y < resizedBitmap.Height; y++)\r\n        {\r\n            for (int x = 0; x < resizedBitmap.Width; x++)\r\n            {\r\n                var pixel = resizedBitmap.GetPixel(x, y);\r\n                inputData[index++] = pixel.Red / 255.0f;\r\n                inputData[index++] = pixel.Green / 255.0f;\r\n                inputData[index++] = pixel.Blue / 255.0f;\r\n            }\r\n        }\r\n\r\n        return inputData;\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7212","RelatedDescription":"Open issue \"How to convert the following Python code into C # code to make it the same code?\" (#7212)"},{"Id":"2448172594","IsPullRequest":false,"CreatedAt":"2024-08-05T10:15:13","Actor":"bbhxwl","Number":"7210","RawContent":null,"Title":"Why is there no ResizeImages method?","State":"open","Body":"Why is there no ResizeImages method?\r\n\r\n![image](https://github.com/user-attachments/assets/a9290955-5391-4db1-9311-1334f5a56506)\r\n![image](https://github.com/user-attachments/assets/ec728fb0-9371-48b6-8fd8-ef25c4443bfe)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7210","RelatedDescription":"Open issue \"Why is there no ResizeImages method?\" (#7210)"},{"Id":"2447141026","IsPullRequest":false,"CreatedAt":"2024-08-04T13:42:12","Actor":"vpenades","Number":"7209","RawContent":null,"Title":"Support scenario:  Input Bitmap + Training = ONNX model","State":"open","Body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nRight now, ML supports several scenarios like image classification and detection which take a Bitmap as an input, and after training, it produces a ML Zip file.\r\n\r\nML also supports training over plain data, that after training, it can be exported to an ONNX model.\r\n\r\nBut there is no scenario, or example that covers both, that is: training a model using bitmaps as input, and being able to output an onnx model.\r\n\r\nApparently, the main roadblock being that the ONNX Converter toolchain being limited to a few data types, which does not include MLImage.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere's some solutions already proposed, for example: https://github.com/dotnet/machinelearning/issues/5271 proposes to exclude the input data pre-processing part of the training pipeline, which happens to be the part that cannot be exported to ONNX. Ideally, the export process would begin at the point of the pipeline where the input image has been converted to a tensor.\r\n\r\nAnother solution would be to make ONNX converter toolchain to handle any incoming MLImage type as a tensor. \r\n\r\nYet another solution would be to introduce a new \"image\" type, which is lower level and more \"palatable\" by the ONNX converter. Theoretically, this image type would represent the images in its already pre-processed state, like scaled to a fixed size.\r\n\r\nFinally, if this Bitmap + Training = ONNX scenario is already supported by the current libraries, it could be desirable to have an end-to-end example showcasing how to properly configure the input data and the pipeline so it can be successfully exported to ONNX. (And I've also looked for such an example in the examples repository with no success)\r\n\r\n**Describe alternatives you've considered**\r\n\r\nNot using ML at all and do the training with other frameworks.\r\n\r\n**Additional context**\r\n\r\nThis is a long standing issue that has been already highlighted by issues like https://github.com/dotnet/machinelearning/issues/6810, and I have to apologize for opening yet another one, but this problem seems to be kept unaswered for months (years?)...  from time to time I come here to look for news and see if the latest version of the ML libraries finally solved this problem, just to discover it remains unanswered.\r\n\r\nAdditinally, We're using OnnxRuntime at low level for inference, so we really do require to export to ONNX, ML.Zip is not an option to us.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/7209","RelatedDescription":"Open issue \"Support scenario:  Input Bitmap + Training = ONNX model\" (#7209)"},{"Id":"2443454847","IsPullRequest":true,"CreatedAt":"2024-08-02T18:44:00","Actor":"LittleLittleCloud","Number":"7207","RawContent":null,"Title":"Fix #7203","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nfix #7203 ","Url":"https://github.com/dotnet/machinelearning/pull/7207","RelatedDescription":"Closed or merged PR \"Fix #7203\" (#7207)"}],"ResultType":"GitHubIssue"}},"RunOn":"2024-09-13T03:30:21.9418104Z","RunDurationInMilliseconds":611}