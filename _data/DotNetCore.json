{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.5.2, 4.6, 4.6.1 will reach End of Support on April 26, 2022","PublishedOn":"2021-04-26T19:32:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Framework 4.5.2, 4.6, and 4.6.1 will reach end of support* on April 26, 2022. After this date, we will no longer provide updates including security fixes or technical support for these...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-5-2-4-6-4-6-1-will-reach-end-of-support-on-april-26-2022/","RawContent":null},{"Title":"Conversation about crossgen2","PublishedOn":"2021-04-22T22:05:21+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"Crossgen2 is an exciting new platform addition and part of the .NET 6 release. It is a new tool that enables both generating and optimizing code in a new way.\nThe crossgen2 project is a significant...","Href":"https://devblogs.microsoft.com/dotnet/conversation-about-crossgen2/","RawContent":null},{"Title":"What’s new in dotnet monitor","PublishedOn":"2021-04-21T19:28:17+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We&#8217;ve previously introduced dotnet monitor as an experimental tool to access diagnostics information in a dotnet process. We&#8217;re now pleased to announce dotnet monitor has graduated to a...","Href":"https://devblogs.microsoft.com/dotnet/whats-new-in-dotnet-monitor/","RawContent":null},{"Title":"Show dotnet: Build your own unit test platform? The true story of .NET nanoFramework.","PublishedOn":"2021-04-16T05:43:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi! I&#8217;m Laurent Ellerbach. I&#8217;m a Principal Software Engineer Manager at Microsoft working for the Commercial Software Engineering team. My team and I are doing co-engineering with our...","Href":"https://devblogs.microsoft.com/dotnet/show-dotnet-build-your-own-unit-test-platform-the-true-story-of-net-nanoframework/","RawContent":null},{"Title":".NET April 2021 Updates – .NET Core 3.1.14 and .NET Core 2.1.27","PublishedOn":"2021-04-13T18:26:29+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing .NET Core 3.1.14 and .NET Core 2.1.27 April updates. These updates contains reliability and other non-security improvements. See our April blog post for details on all April...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2021-updates/","RawContent":null},{"Title":"Show dotnet: Animating 40 LEDs with charlieplexing","PublishedOn":"2021-04-10T01:17:56+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For Pi day 2021, I published a fun post on how to Blink LEDs with Raspberry Pi. As part of that writeup, I wanted to include a 40 LED charlieplexing example, but couldn&#8217;t get it working. It is...","Href":"https://devblogs.microsoft.com/dotnet/show-dotnet-animating-40-leds-with-charlieplexing/","RawContent":null},{"Title":"Announcing .NET Multi-platform App UI Preview 3","PublishedOn":"2021-04-09T19:18:31+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"With .NET 6 Preview 3 we are shipping the latest progress for mobile and desktop development with .NET Multi-platform App UI. This release adds the Windows platform with WinUI 3, improves the base...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-multi-platform-app-ui-preview-3/","RawContent":null},{"Title":"Announcing .NET 6 Preview 3","PublishedOn":"2021-04-08T20:32:58+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"Today, we are delighted to release .NET 6 Preview 3. This release is dedicated almost entirely to low-level performance features. These are the types of improvements that many folks don&#8217;t...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-3/","RawContent":null},{"Title":"ML.NET Survey: Machine Learning in .NET","PublishedOn":"2021-04-08T17:14:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every year we conduct a survey to gather feedback on pain points and feature requests that help shape the direction of Machine Learning in .NET.\nThis past year we have made major improvements to...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-survey-machine-learning-in-net/","RawContent":null},{"Title":".NET April 2021 Updates – .NET 5.0.5, .NET Core 3.1.14, .NET Core 2.1.27","PublishedOn":"2021-04-06T16:45:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET April 2021 Updates. These updates contains reliability and other non-security improvements. See the individual release notes for details on updated packages.\nYou can...","Href":"https://devblogs.microsoft.com/dotnet/net-april-2021-updates/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"16112526794","Type":"IssuesEvent","CreatedAt":"2021-04-28T00:12:06","Actor":"mmitche","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/184","RelatedDescription":"Opened issue \".NET 6 will shift to a new signing certificate for some components\" (#184) at dotnet/announcements","RelatedBody":".NET 6 will shift to a new signing certificate for many of its core binaries. This shift is intended to make it easier for Windows Defender Application Control (WDAC) customers to choose whether to allow .NET 6 and beyond on their environments, without the side effects a key shared between multiple products might have.\r\n\r\n## Details\r\n\r\nToday Microsoft signs .NET artifacts with a variety of certificates. For example, NuGet packages, 3rd party binaries redistributed with .NET, Visual Studio extension packages, and some specialized debugging related binaries all have different certificates. The most common certificate is **Microsoft Corporation**, with issuer **Microsoft Code Signing PCA 2011** and thumbprint **abdca79af9dd48a0ea702ad45260b3c03093fb4b**, used to sign most executable files. .NET is switching to **.NET**, with issuer **Microsoft Code Signing PCA 2011** and thumbprint **60ff375e5669b98d43ea0e2328e618cf73c0f91d**.\r\n\r\nNot all binaries signed with **Microsoft Corporation** are shifting to the new certificate. .NET repackages a variety of assets from previous releases (e.g. targeting packs), and those will not change. Only newly built .NET 6 binaries will get the new certificate. Some tooling utilized in Visual Studio will remain on the existing cert.\r\n\r\n## Discussion\r\n---\r\nQuestions or concerns? Please discuss at https://github.com/dotnet/runtime/issues/51967"},{"Id":"16096445427","Type":"IssuesEvent","CreatedAt":"2021-04-27T00:58:02","Actor":"jamshedd","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/183","RelatedDescription":"Reopened issue \".NET Framework retiring SHA-1 content\" (#183) at dotnet/announcements","RelatedBody":"The .NET team is taking steps that will affect previously shipped .NET Framework releases and updates currently available for download from Microsoft. \r\n\r\nSee these for more information:\r\n\r\n[SHA-1 Retirement Statement](https://aka.ms/framework-sha1-retirement)\r\n[.NET Framework 4.5.2, 4.6, 4.6.1 End of Support announcement](https://aka.ms/framework-452-46-461-eos-blog)"},{"Id":"16096076403","Type":"IssuesEvent","CreatedAt":"2021-04-27T00:04:13","Actor":"jamshedd","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/183","RelatedDescription":"Closed issue \".NET Framework retiring SHA-1 content\" (#183) at dotnet/announcements","RelatedBody":"The .NET team is taking steps that will affect previously shipped .NET Framework releases and updates currently available for download from Microsoft. \r\n\r\nSee these for more information:\r\n\r\n[SHA-1 Retirement Statement](https://aka.ms/framework-sha1-retirement)\r\n[.NET Framework 4.5.2, 4.6, 4.6.1 End of Support announcement](https://aka.ms/framework-452-46-461-eos-blog)"},{"Id":"16096073525","Type":"IssuesEvent","CreatedAt":"2021-04-27T00:03:52","Actor":"jamshedd","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/183","RelatedDescription":"Opened issue \".NET Framework retiring SHA-1 content\" (#183) at dotnet/announcements","RelatedBody":"The .NET team is taking steps that will affect previously shipped .NET Framework releases and updates currently available for download from Microsoft. \r\n\r\nSee these for more information:\r\n\r\n[SHA-1 Retirement Statement](https://aka.ms/framework-sha1-retirement)\r\n[.NET Framework 4.5.2, 4.6, 4.6.1 End of Support announcement](https://aka.ms/framework-452-46-461-eos-blog)"},{"Id":"15972919480","Type":"IssuesEvent","CreatedAt":"2021-04-16T17:28:33","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/182","RelatedDescription":"Opened issue \"Migration to main completed\" (#182) at dotnet/announcements","RelatedBody":"As [previously announced](https://github.com/dotnet/announcements/issues/172), we have standardized the branch naming and use `main` as the default branch for all new repos moving forward. We have just completed the migration of all existing repos to `main` in the `dotnet` and `aspnet` organizations.\r\n\r\n![Migration status](https://user-images.githubusercontent.com/5169960/115061413-03296d00-9e9e-11eb-9c17-631237172cdb.png)\r\n\r\n## What about non-Microsoft owned repos?\r\n\r\nThere are other repos in the `dotnet` organization that aren't owned by Microsoft. It's up to the project maintainers to decide whether or not they want to rename their default branch as well. We decided that there is a value in having a unified naming convention across all our repos as opposed to having a split like \"new repos use `main`, existing repos use what they currently have\". But renaming the default branch is work and there is a reason it took as couple of months to complete the migration to `main`.\r\n\r\nIn case you're curious, [here are the steps we followed](https://aka.ms/m2m-dotnet).\r\n\r\n## What do I need to do?\r\n\r\n**You don't need to update your PRs**. If you submitted a PR against the old default branch, the GitHub tooling has automatically retargeted your PR against the new default branch (`main`).\r\n\r\nFor sanity, **you should rename the default branch in your fork as well**. When you go to your fork, GitHub will guide you through this experience:\r\n\r\n![Rename branch in fork](https://user-images.githubusercontent.com/5169960/105210186-92bdba80-5aff-11eb-99c9-0beb708fcf3f.png)\r\n\r\n**You will need to update the repos you cloned to your hard drive**. When you go to the original repository, GitHub will guide you through this experience:\r\n\r\n![Update local repo](https://user-images.githubusercontent.com/5169960/105210184-92bdba80-5aff-11eb-93a8-2b13dbbf74c8.png)\r\n\r\nFor a discussion, please use https://github.com/dotnet/arcade/issues/6825."},{"Id":"15834623314","Type":"IssuesEvent","CreatedAt":"2021-04-06T17:01:00","Actor":"rbhanda","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/181","RelatedDescription":"Opened issue \"April 2021 .NET Updates\" (#181) at dotnet/announcements","RelatedBody":"The following .NET updates were released in April 2021. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET April 2021 Updates – 5.0.5](https://devblogs.microsoft.com/dotnet/net-april-2021/)\r\n  * .NET 5.0.5 and .NET SDK 5.0.202 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.5/5.0.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n"},{"Id":"15820737111","Type":"IssuesEvent","CreatedAt":"2021-04-05T19:26:23","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/180","RelatedDescription":"Opened issue \"NuGet package restore broken on .NET 5+ with Removal of Trust of Verisign CA\" (#180) at dotnet/announcements","RelatedBody":"# NuGet package restore broken on .NET 5+ with Removal of Trust of Verisign CA\r\n\r\n[NuGet package signing verification](https://docs.microsoft.com/nuget/reference/signed-packages-reference) relies on the `VeriSign Universal Root Certification Authority` as part of establishing a chain-of-trust for NuGet packages. `VeriSign Universal Root Certification Authority` was recently removed from [NSS](https://bugzilla.mozilla.org/show_bug.cgi?id=1686854) and `ca-certificates` packages. This removal effectively breaks NuGet package signing verification, which has the result of breaking the ability to restore NuGet packages.\r\n\r\nThis break in behavior is only observed with .NET 5 and .NET 6, which have NuGet package verification enabled (and it cannot be disabled). [NET 5 NuGet Restore Failures on Linux distributions](https://github.com/NuGet/Announcements/issues/56) has been observed on some distros already and we expect it to become pervasive quickly as more distros are updated to include more recent version of `NSS` and `ca-certificates` (with the VeriSign CA removed). We are in the process of releasing updated builds of .NET 5 and .NET 6 that have NuGet package verification disabled on Linux and macOS.\r\n\r\nWe need developers, companies, and commercial providers to install (or otherwise use) updated builds of .NET 5 and .NET 6 if you rely on those .NET versions on Linux. If you adopt the updated .NET versions soon, you should not observe a break in functional behavior, and will be able to confidently update to newer versions of `NSS` and `ca-certificates` packages.\r\n\r\n## Discussion\r\n\r\nPlease share your feedback on this topic and see what others are saying at:\r\n\r\nhttps://github.com/NuGet/Home/issues/10712\r\n\r\n## Updated .NET builds\r\n\r\nNew .NET builds will be provided with NuGet package verification disabled on Linux and macOS. The following are the expected release dates:\r\n\r\n- .NET SDK 5.0.202 -- April 6, 2021.\r\n- .NET 6 Preview 3 -- April 8, 2021.\r\n\r\nNew [container images](https://hub.docker.com/_/microsoft-dotnet) will be published for Alpine, Debian, and Ubuntu on both of these dates, for the respective releases.\r\n\r\nThese builds include significant additional functionality beyond disabling NuGet package verification. We originally planned to release these builds as regular releases for all supported operating systems and architectures, targeting April 13th. We made two changes from our original release plan: earlier release dates and include the change in NuGet functionality for Linux and macOS.\r\n\r\n## Who is affected\r\n\r\n.NET 5+ users will be affected on any operating system that has removed the `VeriSign Universal Root Certification Authority`. We are maintaining a list of [Linux distros that are known to be affected](https://github.com/NuGet/Announcements/issues/56).\r\n\r\n`nuget.exe` is sometimes used on Linux with Mono. This scenario is not affected.\r\n\r\nThere has been an [industry-wide movement to distrust the VeriSign root CA](https://blog.mozilla.org/security/2018/03/12/distrust-symantec-tls-certificates/), including companies like Apple, Google, Microsoft, and Mozilla. This may mean that at anytime in the future, [Apple](https://support.apple.com/en-us/HT212140) and [Microsoft](https://ccadb-public.secure.force.com/microsoft/IncludedCACertificateReportForMSFT) can remove `VeriSign Universal Root Certification Authority` from their trusted root CA list.\r\n\r\n## Solution\r\n\r\nThe NuGet team has [disabled the package verification feature](https://github.com/NuGet/NuGet.Client/pull/3979) for macOS and Linux. If needed, we will disable the feature for Windows at a later time. This change will be available in the updated .NET builds covered earlier.\r\n\r\nWe are also [talking to some Linux distro package maintainers](https://gitlab.alpinelinux.org/alpine/ca-certificates/-/issues/1) to ask them to delay the removal of the `VeriSign Universal Root Certification Authority` (for code signing only). Even a month of grace would help a lot, to enable .NET users on Linux to adopt the newer .NET 5 and .NET 6 builds.\r\n\r\nTo clarify, this change does not affect .NET Core 3.1 and earlier versions. It does not affect .NET Framework. It does not affect any .NET functionality on Windows, at least not at this time.\r\n\r\n## More Context\r\n\r\nWe observed [NuGet Restore Issues on Debian Family Linux Distros](https://github.com/NuGet/Announcements/issues/49) in January, 2021. This led us to discover that there has been an industry-wide movement to remove the `VeriSign Universal Root Certification Authority`.\r\n\r\nNuGet has historically relied on two key certificates:\r\n\r\n- NuGet Microsoft Author Signing Certificate Update - Expired January 27th, 2021\r\n- NuGet.org Repository Signing Certificate Update - Expires April 14th, 2021\r\n\r\nAfter those certificates expire, the NuGet client falls back to [timestamp verification](https://docs.microsoft.com/nuget/reference/signed-packages-reference), which enables package verification to still function. The timestamp verification relies on VeriSign root certificate authority. The absence of this root certificate authority being available on a machine means that timestamp verification is no longer functional, which causes package signature verification to fail.\r\n\r\nSecurity is very important to us. We are putting together a plan to use a new system that will allow us to re-enable package signing verification on all supported operating systems. We will have more to share on our future plans once we are sure that all systems are once again functional.\r\n\r\n[.NET 5 NuGet Restore Failures on Linux distributions](https://github.com/NuGet/Announcements/issues/56) provides more details on error messages, affected environments, and solutions."},{"Id":"15752631045","Type":"IssuesEvent","CreatedAt":"2021-03-30T21:15:03","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/179","RelatedDescription":"Closed issue \"Preserve git refspec to local patches and branches after renamed origin's master\" (#179) at dotnet/announcements","RelatedBody":"For all those who can't pull `master`, it should have renamed to `main`.\r\n\r\nTo preserve refspec to patches and branches, just changing the `heads/master` to `heads/main` should work.\r\n\r\n```diff\r\n[remote \"origin\"]\r\n\turl = https://github.com/dotnet/your-repo\r\n-\tfetch = +refs/heads/master:refs/remotes/origin/master\r\n+\tfetch = +refs/heads/main:refs/remotes/origin/master\r\n\ttagopt = --no-tags\r\n[branch \"master\"]\r\n\tremote = origin\r\n-\tmerge = refs/heads/master\r\n+\tmerge = refs/heads/main\r\n```\r\n\r\n> Putting this out there, if anyone else facing similar issue with git."},{"Id":"15626592773","Type":"IssuesEvent","CreatedAt":"2021-03-21T13:01:45","Actor":"Nirmal4G","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/179","RelatedDescription":"Opened issue \"Preserve git refspec to local patches and branches after renamed origin's master\" (#179) at dotnet/announcements","RelatedBody":"For all those who can't pull `master`, it should have renamed to `main`.\r\n\r\nTo preserve refspec to patches and branches, just changing the `heads/master` to `heads/main` should work.\r\n\r\n```diff\r\n[remote \"origin\"]\r\n\turl = https://github.com/dotnet/your-repo\r\n-\tfetch = +refs/heads/master:refs/remotes/origin/master\r\n+\tfetch = +refs/heads/main:refs/remotes/origin/master\r\n\ttagopt = --no-tags\r\n[branch \"master\"]\r\n\tremote = origin\r\n-\tmerge = refs/heads/master\r\n+\tmerge = refs/heads/main\r\n```\r\n\r\n> Putting this out there, if anyone else facing similar issue with git."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"16216357936","Type":"PullRequestEvent","CreatedAt":"2021-05-05T20:30:57","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28168","RelatedDescription":"Closed pull request \"Release/3.1 crossdac v3.1.85\" (#28168) at dotnet/coreclr","RelatedBody":""},{"Id":"16216355840","Type":"PullRequestEvent","CreatedAt":"2021-05-05T20:30:45","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28168","RelatedDescription":"Opened pull request \"Release/3.1 crossdac v3.1.85\" (#28168) at dotnet/coreclr","RelatedBody":""},{"Id":"16216130998","Type":"PullRequestEvent","CreatedAt":"2021-05-05T20:11:37","Actor":"agocke","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28161","RelatedDescription":"Merged pull request \"[release/3.1] Port 6.0 fix to AssemblyDependencyResolver to not throw for same file\" (#28161) at dotnet/coreclr","RelatedBody":"Runtime follow up fixes for .NET 3.1 - https://github.com/dotnet/runtime/pull/42055\r\n\r\n# Description\r\nThere is a problem with resolving multiple files with the same simple name (e.g. Module, module) in case insensitive OS like Windows for AssemblyDependencyResolver. Our internal storage for such cases throws that can cause problems for users who do not expect the error.\r\n\r\n# Customer Impact\r\n\r\nReported by customer who was migrating to .Net Core from the Desktop runtime.\r\n\r\nAfter migrating the mixed-mode C++/CLI application from targeting .NET Framework over to .NET Core 3.1, several obstacles have been encountered. One of them is an exception related to adding a duplicate key to a Dictionary in the AssemblyDependencyResolver. Alternatively, they might get an exception about the assembly having already been found with a different extension. Both of these problem point back to .NET Core having a mixture of case sensitivity and insensitivity.\r\n\r\n# Regression\r\n\r\nNo, it has always existed.\r\n\r\n# Testing\r\n\r\nAdded test scenarios. \r\n\r\nA customer who ran into this in 5.0 tried the 6.0 build and reported success.\r\n\r\n# Risk\r\n\r\nLow.\r\n\r\nAlthough getting casing correct with different OSs are notoriously hard, the resolution was to make AssemblyDependencyResolver consistent with other parts of the runtime by choosing the first simple file name and not throwing afterwards for same simple filename with different casing\r\n\r\nThe 6.0 issue is https://github.com/dotnet/runtime/issues/37162"},{"Id":"16214088196","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:25:44","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28163","RelatedDescription":"Merged pull request \"[release/3.1] Fix Mac ICU errors by porting over dotnet/runtime#47346\" (#28163) at dotnet/coreclr","RelatedBody":"Changes in System.Globalization.Native:\r\n  - Replace `TRUE` with `true` and `FALSE` with `false`\r\n  - Add `#include <stdbool.h>`"},{"Id":"16214085094","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:25:28","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28162","RelatedDescription":"Merged pull request \"[release/3.1] Backport test build fix when a newer Windows SDK is installed.\" (#28162) at dotnet/coreclr","RelatedBody":"Backport https://github.com/dotnet/runtime/pull/34513. This change enables people to build coreclr on a machine with the 10.0.19041.0 Windows SDK installed.\r\n\r\nThis is a test-only change, so this has no product risk."},{"Id":"16214072443","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:24:30","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28130","RelatedDescription":"Merged pull request \"[release/3.1] Fix libunwind linking with gcc10, clang11 or -fno-common\" (#28130) at dotnet/coreclr","RelatedBody":"Linking coreclr with gcc 10 or clang 11 (both of which default to -fno-common) fails with this error:\r\n\r\n```\r\n[31%] Linking CXX shared library libdbgshim.so                                                                                                               \r\n/usr/bin/ld: ../../pal/src/libcoreclrpal.a(dyn-info-list.c.o):/home/omajid/devel/dotnet/coreclr/src/pal/src/libunwind/src/mi/dyn-info-list.c:28: multiple definition of `_U_dyn_info_list'; ../../pal/src/libcoreclrpal.a(Linit.c.o):/home/omajid/devel/dotnet/coreclr/src/pal/src/libunwind/src/x86_64/Ginit.c:52: first defined here\r\n```\r\n\r\nThis PR fixes that.\r\n\r\n~~This is of https://github.com/libunwind/libunwind/pull/166, with one change: there's no s390x file in coreclr's copy of libunwind, so I removed that chunk. Otherwise the change applies as-is.~~\r\n\r\n~~This was also added to runtime 5.0 with https://github.com/dotnet/runtime/commit/581dc193406082f76ae3c58511f724ab5d5c0d6d#diff-c144efc97b24537a136fc6842bad278829924e76dffa2f09ad1d8f078b8c116b, as part of the larger update to libunwind 1.5~~\r\n\r\n# Customer impact\r\nCustomers like Redhat cannot build .NET Core using clang11 without this fix.\r\n\r\n# Regression?\r\nNo\r\n\r\n# Testing\r\nRedhat side testing.\r\n\r\n# Risk\r\nLow, the change just adds a compiler option that doesn't affect the behavior on Clang older than 11 (the ones that we use for our product builds)"},{"Id":"16214064001","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:23:50","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28167","RelatedDescription":"Merged pull request \"Update branding to 3.1.16\" (#28167) at dotnet/coreclr","RelatedBody":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open."},{"Id":"16199607181","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:57:54","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28166","RelatedDescription":"Merged pull request \"Update branding to 2.1.29\" (#28166) at dotnet/coreclr","RelatedBody":"Prepare branch for 2.1.29 release. After merged the servising branch is considered open."},{"Id":"16199536499","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:52:06","Actor":"aik-jahoda","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28167","RelatedDescription":"Opened pull request \"Update branding to 3.1.16\" (#28167) at dotnet/coreclr","RelatedBody":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open."},{"Id":"16197475688","Type":"PullRequestEvent","CreatedAt":"2021-05-04T16:13:37","Actor":"aik-jahoda","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/28166","RelatedDescription":"Opened pull request \"Update branding to 2.1.29\" (#28166) at dotnet/coreclr","RelatedBody":"Prepare branch for 2.1.29 release. After merged the servising branch is considered open."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"16202535784","Type":"PullRequestEvent","CreatedAt":"2021-05-04T23:50:03","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13736","RelatedDescription":"Merged pull request \"Update branding for 2.1.8xx 2.1.8xx\" (#13736) at dotnet/cli","RelatedBody":""},{"Id":"16202533251","Type":"PullRequestEvent","CreatedAt":"2021-05-04T23:49:40","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13733","RelatedDescription":"Merged pull request \"Update branding for 2.1.5xx 2.1.5xx\" (#13733) at dotnet/cli","RelatedBody":""},{"Id":"16202493827","Type":"PullRequestEvent","CreatedAt":"2021-05-04T23:43:41","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13735","RelatedDescription":"Merged pull request \"Update branding for 3.1.4xx 3.1.4xx\" (#13735) at dotnet/cli","RelatedBody":""},{"Id":"16201517038","Type":"PullRequestEvent","CreatedAt":"2021-05-04T21:45:14","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13737","RelatedDescription":"Merged pull request \"Update branding for 3.1.1xx 3.1.1xx\" (#13737) at dotnet/cli","RelatedBody":""},{"Id":"16199391082","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:40:17","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13737","RelatedDescription":"Opened pull request \"Update branding for 3.1.1xx 3.1.1xx\" (#13737) at dotnet/cli","RelatedBody":""},{"Id":"16199389153","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:40:08","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13736","RelatedDescription":"Opened pull request \"Update branding for 2.1.8xx 2.1.8xx\" (#13736) at dotnet/cli","RelatedBody":""},{"Id":"16199387971","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:40:03","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/13734","RelatedDescription":"Closed pull request \"Update branding for 2.1.6xx 2.1.6xx\" (#13734) at dotnet/cli","RelatedBody":""},{"Id":"16199381673","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:39:32","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13735","RelatedDescription":"Opened pull request \"Update branding for 3.1.4xx 3.1.4xx\" (#13735) at dotnet/cli","RelatedBody":""},{"Id":"16199374236","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:38:55","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13734","RelatedDescription":"Opened pull request \"Update branding for 2.1.6xx 2.1.6xx\" (#13734) at dotnet/cli","RelatedBody":""},{"Id":"16199366666","Type":"PullRequestEvent","CreatedAt":"2021-05-04T18:38:17","Actor":"marcpopMSFT","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13733","RelatedDescription":"Opened pull request \"Update branding for 2.1.5xx 2.1.5xx\" (#13733) at dotnet/cli","RelatedBody":""},{"Id":"15955817867","Type":"PullRequestEvent","CreatedAt":"2021-04-15T14:59:29","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/13732","RelatedDescription":"Closed pull request \"Update coresetup to preview1-26216-03 (release/2.1.6xx)\" (#13732) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"15849898358","Type":"IssuesEvent","CreatedAt":"2021-04-07T15:50:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1788","RelatedDescription":"Closed issue \"Class ValueTask has different definitions between .Net Standard 2.1 and .Net 5\" (#1788) at dotnet/standard","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Class-ValueTask-has-different-definition/1384249)._\n\n---\nClass ValueTask has different definitions between .Net Standard 2.1 and .Net 5: \nstatic property ValueTask.CompletedTask and static methods ValueTask.FromResult, ValueTask.FromCanceled and ValueTask.FromException are not available in .Net Standard 2.1.\n\nRegards,\nPaco.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/29/2021, 10:45 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"15849762203","Type":"IssuesEvent","CreatedAt":"2021-04-07T15:41:49","Actor":"vsfeedback","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1788","RelatedDescription":"Opened issue \"Class ValueTask has different definitions between .Net Standard 2.1 and .Net 5\" (#1788) at dotnet/standard","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Class-ValueTask-has-different-definition/1384249)._\n\n---\nClass ValueTask has different definitions between .Net Standard 2.1 and .Net 5: \nstatic property ValueTask.CompletedTask and static methods ValueTask.FromResult, ValueTask.FromCanceled and ValueTask.FromException are not available in .Net Standard 2.1.\n\nRegards,\nPaco.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/29/2021, 10:45 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"15697191096","Type":"IssuesEvent","CreatedAt":"2021-03-26T03:55:14","Actor":"rexcfnghk","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1787","RelatedDescription":"Opened issue \"Issue with resolving between .NET Standard 2.0 and .NET Standard 2.1\" (#1787) at dotnet/standard","RelatedBody":"# Summary\r\n\r\n.NET Standard version is not resolved correctly when a transitive dependency targets multiple .NET Standard versions.\r\n\r\n# Environment\r\n\r\n- Windows 10 (19042.746)\r\n- .NET 5 SDK 5.0.201\r\n\r\n# Minimal reproducible example\r\n[bug.zip](https://github.com/dotnet/standard/files/6209239/bug.zip)\r\n\r\nThis is a three-project solution:\r\n- `TestProject1` targeting `netcoreapp3.1`\r\n- `ClassProject1` targeting `netstandard2.0`\r\n- `ClassProject2` targeting *both* `netstandard2.0` and `netstandard2.1`\r\n\r\nThe project dependency chain is: `TestProject1 -> ClassProject1 -> ClassProject2`\r\n\r\nA method (`ClassProject2Test1`) on `ClassProject2` is hidden behind a `#if NETSTANDARD2_0` preprocessor directive.\r\n\r\n# The issue\r\n\r\nThe unit test failed with a `MissingMethodException`\r\n\r\n```\r\n[xUnit.net 00:00:00.38]     TestProject1.UnitTest1.Test1 [FAIL]\r\n  Failed TestProject1.UnitTest1.Test1 [2 ms]\r\n  Error Message:\r\n   System.MissingMethodException : Method not found: 'Void ClassLibrary2.Class2.Class2Test1()'.\r\n  Stack Trace:\r\n     at ClassLibrary1.Class1.Class1Test1()\r\n   at TestProject1.UnitTest1.Test1() in C:\\Users\\rex\\source\\netstandard-bug-repro\\TestProject1\\UnitTest1.cs:line 12\r\n```\r\n\r\n# Expected result\r\n\r\nThe compiler should have resolved the chain as:\r\n\r\n`TestProject1 (.NET Core 3.1) -> ClassProject1 (.NET Standard 2.0) -> *ClassProject2 (.NET Standard 2.0)*` \r\n\r\n# Actual result\r\n\r\nThe compiler resolved the chain as:\r\n\r\n`TestProject1 (.NET Core 3.1) -> ClassProject1 (.NET Standard 2.0) -> *ClassProject2 (.NET Standard 2.1)*` \r\n\r\nWhich causes the exception because the offending method, `ClassProject2Test1`, was hidden by the `#if NETSTANDARD2_0` preprocessor directive.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"16214058266","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:23:23","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/43071","RelatedDescription":"Merged pull request \"Port regex timeout fix (test only change)\" (#43071) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/runtime/pull/47209 which causes a hang on Linux."},{"Id":"16214052989","Type":"PullRequestEvent","CreatedAt":"2021-05-05T17:23:00","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/43068","RelatedDescription":"Merged pull request \"[release/3.1] Add CentOS 9 RID and make CentOS 8 arm64 as well\" (#43068) at dotnet/corefx","RelatedBody":"# Port Description\r\n\r\nThis is the only part of https://github.com/dotnet/runtime/pull/34088 that wasn't already backported to release/3.1.\r\n\r\nhttps://www.redhat.com/en/blog/faq-centos-stream-updates says:\r\n\r\n> There will not be a CentOS Linux 9.\r\n>\r\n> CentOS Stream 9 will launch in Q2 2021 as part of the RHEL 9 development process.\r\n\r\nThat's my motivation: I want to be able to build .NET Core 3.1 for RHEL 9\r\n\r\nThe last part also means that the current parent-child relationship that we use for RHEL->CentOS in our RID graph will flip starting in 9. I dont see any immediate impact, so I think we can leave it alone for now.\r\n\r\nI got a (currently internal) build of CentOS Stream 9 and `/etc/os-release` looks like this:\r\n\r\n    $ cat /etc/os-release\r\n    NAME=\"CentOS Stream\"\r\n    VERSION=\"9\"\r\n    ID=\"centos\"\r\n    ID_LIKE=\"rhel fedora\"\r\n    VERSION_ID=\"9\"\r\n    PLATFORM_ID=\"platform:el9\"\r\n    PRETTY_NAME=\"CentOS Stream 9\"\r\n    ANSI_COLOR=\"0;31\"\r\n    CPE_NAME=\"cpe:/o:centos:centos:9\"\r\n    HOME_URL=\"https://centos.org/\"\r\n    BUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\r\n    REDHAT_SUPPORT_PRODUCT=\"Red Hat Enterprise Linux 9\"\r\n    REDHAT_SUPPORT_PRODUCT_VERSION=\"CentOS Stream\"\r\n\r\nI have been told that builds of CentOS Stream 9 should become public soon. I don't know exactly when, though.\r\n\r\n# Customer Impact\r\n\r\nThis (kind of) blocks Red Hat from building .NET Core 3.1 on RHEL 9: we can apply this patch locally, but it's probably better for everyone if it's here upstream too.\r\n\r\n# Regression\r\n\r\nThis is not a regression.\r\n\r\n# Testing\r\n\r\nI have tested that this RID update fixes the build issue for me.\r\n\r\n# Risk\r\n\r\nThe risk of this is pretty low: it's just adding RIDs."},{"Id":"16202549889","Type":"PullRequestEvent","CreatedAt":"2021-05-04T23:52:11","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/43073","RelatedDescription":"Merged pull request \"Update branding to 3.1.16\" (#43073) at dotnet/corefx","RelatedBody":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open."},{"Id":"16202530231","Type":"PullRequestEvent","CreatedAt":"2021-05-04T23:49:13","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/43072","RelatedDescription":"Merged pull request \"Update branding to 2.1.29\" (#43072) at dotnet/corefx","RelatedBody":"Prepare branch for 2.1.29 release. After merge, the servising branch is considered open."},{"Id":"16199950504","Type":"PullRequestEvent","CreatedAt":"2021-05-04T19:26:41","Actor":"aik-jahoda","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/43073","RelatedDescription":"Opened pull request \"Update branding to 3.1.16\" (#43073) at dotnet/corefx","RelatedBody":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open."},{"Id":"16199921569","Type":"PullRequestEvent","CreatedAt":"2021-05-04T19:24:13","Actor":"aik-jahoda","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/43072","RelatedDescription":"Opened pull request \"Update branding to 2.1.29\" (#43072) at dotnet/corefx","RelatedBody":"Prepare branch for 2.1.29 release. After merge, the servising branch is considered open."},{"Id":"16141550932","Type":"PullRequestEvent","CreatedAt":"2021-04-29T17:58:35","Actor":"danmoseley","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/43071","RelatedDescription":"Opened pull request \"Port regex timeout fix\" (#43071) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/runtime/pull/47209 which causes a hang on Linux."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"16220089056","Type":"PullRequestEvent","CreatedAt":"2021-05-06T04:27:56","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/53212","RelatedDescription":"Merged pull request \"Merge release/dev16.11 to release/dev16.11-vs-deps\" (#53212) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.11 into release/dev16.11-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-to-release/dev16.11-vs-deps\ngit reset --hard upstream/release/dev16.11-vs-deps\ngit merge upstream/release/dev16.11\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-to-release/dev16.11-vs-deps --force\n```\n"},{"Id":"16220088712","Type":"PullRequestEvent","CreatedAt":"2021-05-06T04:27:53","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/53209","RelatedDescription":"Merged pull request \"Merge release/dev16.11 to main\" (#53209) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.11 into main.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11\n- https://github.com/dotnet/roslyn/find/main\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-to-main\ngit reset --hard upstream/main\ngit merge upstream/release/dev16.11\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-to-main --force\n```\n"},{"Id":"16220063318","Type":"PullRequestEvent","CreatedAt":"2021-05-06T04:23:54","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/53210","RelatedDescription":"Merged pull request \"Merge release/dev16.10-vs-deps to release/dev16.11-vs-deps\" (#53210) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.10-vs-deps into release/dev16.11-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.10-vs-deps\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.10-vs-deps-to-release/dev16.11-vs-deps\ngit reset --hard upstream/release/dev16.11-vs-deps\ngit merge upstream/release/dev16.10-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.10-vs-deps-to-release/dev16.11-vs-deps --force\n```\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"16219613516","Type":"PullRequestEvent","CreatedAt":"2021-05-06T03:15:22","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/17465","RelatedDescription":"Opened pull request \"Update .NET Framework targeting pack version\" (#17465) at dotnet/sdk","RelatedBody":"Update to newly released version of [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/)\r\n\r\nFixes https://github.com/microsoft/dotnet/issues/1137\r\n\r\n@NikolaMilosavljevic @AArnott "},{"Id":"16219576890","Type":"PullRequestEvent","CreatedAt":"2021-05-06T03:09:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/17445","RelatedDescription":"Merged pull request \"[main] Update dependencies from dotnet/arcade\" (#17445) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3d9043af-0e17-4eb5-f3e3-08d8e97c775d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3d9043af-0e17-4eb5-f3e3-08d8e97c775d\r\n- **Build**: 20210504.3\r\n- **Date Produced**: 5/4/2021 9:32 PM\r\n- **Commit**: 0cfaf935894a4c98ff7445c903f1b4c32990b127\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e9fd640...0cfaf93\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:3d9043af-0e17-4eb5-f3e3-08d8e97c775d)\r\n\r\n"},{"Id":"16219093550","Type":"PullRequestEvent","CreatedAt":"2021-05-06T01:58:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/17462","RelatedDescription":"Merged pull request \"[main] Update dependencies from dotnet/aspnetcore\" (#17462) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.9\r\n- **Date Produced**: 5/6/2021 12:06 AM\r\n- **Commit**: c6713591462b6e547860f3f289472865af3602a0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/6193393...c671359\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n"},{"Id":"16219000448","Type":"IssuesEvent","CreatedAt":"2021-05-06T01:44:45","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/17463","RelatedDescription":"Closed issue \"Supporting .NET with x64 emulation on Arm64\" (#17463) at dotnet/sdk","RelatedBody":"# Supporting .NET with x64 emulation on Arm64\r\n\r\nx64 emulation has emerged as an important new scenario for Arm64 operating systems from [Apple](https://www.apple.com/mac/m1/) and [Microsoft](https://blogs.windows.com/windows-insider/2020/12/10/introducing-x64-emulation-in-preview-for-windows-10-on-arm-pcs-to-the-windows-insider-program/). This document defines the approach for supporting .NET with x64 emulation.\r\n\r\nThe overall intent of this proposal to create workflows that enable the intuitive use of the Arm64 SDK with x64 runtimes. This experience will limit the need for the x64 SDK to be used (and installed). For example, someone should be able to git clone a repository that builds and tests a .NET Core 3.1 app on an Arm64 machine, using the Arm64 `dotnet` that is on the path, and relying on natural use of the (installed) .NET Core 3.1 x64 runtime. The repo owner wouldn't need to do anything special to enable their build and test scripts to work correctly on Arm64 machines.\r\n\r\nAn earlier issue discussed enabling [dotnet [Arm64 | x64] coexistence](https://github.com/dotnet/sdk/issues/16896), in terms of a broad set of options. The initial feedback converged on providing Arm64 as a native architecture offering, just like x64 is offered on x64 machines, and as if x64 emulation on Arm64 did not exist. Conversely, the feedback suggested that x64 emulation should be provided as a secondary architecture offering, as a new scenario with a new set of gestures and experiences. This document expands on that approach.\r\n\r\nFor the purposes of this document, we will assume that the Apple and Microsoft approaches to x64 emulation are the same.\r\n\r\n## Terms\r\n\r\n- Native architecture: the instruction set that the operating system targets and supports.\r\n  - For example, the native architecture of Windows x64 running on an x64 CPU is x64.\r\n  - For example, the native architecture on Windows x86 running on either an x86 or x64 CPU is x86 (or IA32).\r\n  - For example, the native architecture of macOS Arm64 running on an Apple Silicon CPU is Arm64.\r\n- Emulation: an alternate instruction set that is supported for some purpose, such as application compatibility.\r\n  - For example, Windows x64 supports running x86 (or 32-bit) via its Wow64 subsystem.\r\n  - For example, macOS Arm64 supports running x64 via its Rosetta 2 subsystem.\r\n\r\n## Principles\r\n\r\nThe approach is based on the following principles:\r\n\r\n- .NET will have a uniform model for supporting native architectures, with little or no difference across environments, such as macOS Arm64 and Windows x64.\r\n- .NET will have a uniform model for supporting x64 emulation on Arm64, with little or no difference across environments, such as macOS Arm64 and Windows Arm64.\r\n- It is OK for a given architecture to not be uniform across its native architecture and emulated presentations, for example .NET x64 on Windows x64 vs Windows Arm64.\r\n\r\nThese principles lead to the following propositions:\r\n\r\n- The native architecture offering is the primary use case and design target.\r\n- The emulated offering is a secondary use case and may require special gestures.\r\n\r\nThose principles and propositions offer us both prioritization and degrees of freedom.\r\n\r\n## Overall approach\r\n\r\nThere are two primary challenges to solve to enable .NET code to run in x64 emulation:\r\n\r\n- x64 instruction emulation.\r\n- Enabling .NET Arm64 and x64 to coexist.\r\n\r\nWe see the first challenge as being the role of the operating system teams, from Apple (macOS) and Microsoft (Windows). A .NET x64 emulation issue could just as easily affect Java or Python, for example. Also, we don't want to regularly service multiple .NET versions to support x64 emulation on multiple operating systems. For example, Apple have been responsive to the bugs we have filed, and fixed multiple issues in public builds. It may take longer for x64 emulation issues to be resolved than native architecture issues as an inherent outcome of this approach.\r\n\r\n.NET x64 builds are now working well in Rosetta 2 on macOS. The .NET team hasn't yet tested x64 emulation (at least at depth) on Windows Arm64. We have every reason to believe that these emulation systems are high quality and will work well for .NET x64 apps as a durable feature.\r\n\r\nNote: We are not committed to resolving issues that the operating system vendor does not address in their emulation subsystem. This includes functional, performance, and security issues. You can call Microsoft support for .NET issues with x64 emulation, but that may result in an issue being filed with the operating system vendor.\r\n\r\nFor development, we recommend using the native architecture build of .NET and using emulation primarily for testing. You can rely on emulation for daily work, but it will be be a substandard experience (described later).\r\n\r\nThere are two primary reasons why you might be required to use emulation:\r\n\r\n- You rely on a .NET version that isn't built for Arm64 (for your OS).\r\n- You rely on native dependencies that are not built for Arm64 (for your OS).\r\n\r\nArm64 and x64 builds can coexist, however, only the Arm64 build will be automatically added to the `PATH`. That means that typing `dotnet` will result in using an Arm64 build of .NET, by default. It also means you will get an error if the .NET version you need isn't available for Arm64, but only via x64 emulation (even if it is installed). Going forward, we will apply the same policy to all environments, to only set the `PATH` for native architecture builds. For example, we intend to apply this policy to Windows WoW64 support (Windows x86 on Windows x64).\r\n\r\nWe consider emulated environments as secondary experiences and will require users to have more skill to configure and use them efficiently and correctly. `PATH` management can be confusing and frustrating, and we consider it an advanced experience. By only setting the `PATH` for one architecture, we can document the expected experience of using .NET without needing to clarify the order of installing Arm64 and x64 versions.\r\n\r\n.NET x64 will be usable (via emulation) without any additional configuration for scenarios that do not rely on the `PATH`. These are documented later.\r\n\r\nBoth Arm64 and x64 installs must be serviceable. For example, if a user maintains .NET 6 installations for both Arm64 and x64, they must be able to install new Arm64 and x64 .NET builds in any order to safely update their machine. Also, Windows users should be able to rely on Microsoft Update to install both Arm64 and x64 .NET updates, as appropriate, for a given machine.\r\n\r\n## Native architecture\r\n\r\nWe have adopted the practice of installing .NET to the expected and idiomatic location on each operating system in the `dotnet` directory. That's what we've done for (native architecture) x64, and we'll follow that model for Arm64.\r\n\r\n- macOS: `/usr/local/share/dotnet`\r\n- Windows `C:\\Program Files\\dotnet`\r\n\r\nThe .NET installer for each operating system will update the machine-wide path to include the `dotnet` directory. This action enables developers to type `dotnet` and use the .NET platform.\r\n\r\nOn Windows, a registry key is also set by the installer to describe that .NET is installed. It will be set on Arm64 in an analogous way as x64. The format isn't discussed in this document.\r\n\r\n## x64 emulation\r\n\r\nx64 emulation is a new scenario that requires a new model, including new experiences and gestures. Unlike the Windows Wow64 model, where the operating system establishes file and registry virtualization that provides effective guidance for platforms like .NET, x64 emulation has no similar model. A platform like .NET is on its own to choose a good model for Arm64 and x64 coexistence. It is quite likely there will be significant diversity between dev platforms on this topic, either via inherent need or the result of different and uncoordinated choices.\r\n\r\n### Install location\r\n\r\nThe x64 build will be installed within the `dotnet` directory in an `x64` folder. Within that folder, the folder and file layout will be identical to what one would find in a native architecture installation. For example, the x64 `dotnet` executable will be installed to `/usr/local/share/dotnet/x64/dotnet` on macOS. The same model will be applied to Windows.\r\n\r\nThe major advantage of this approach is that the .NET product requires very limited updates to support this system since the structure within the `x64` directory is exactly as expected, because it is identical to a native architecture installation.\r\n\r\nAny .NET version can be installed within the x64 structure. For example, you can have .NET 6 installed concurrently for Arm64 and x64. They will be concurrently usable according to experiences that will be defined shortly.\r\n\r\nOn Windows, the x64 installer will need to write a value that does not overwrite Arm64 values. The format isn't discussed in this document.\r\n\r\nmacOS Arm64 has already been released and people are already installing .NET builds on it. Inherent in this proposal is a major breaking change. If users have installed any x64 builds on macOS Arm64, they will be required to delete the `dotnet` directory on their machine and re-install .NET from scratch to ensure x64 builds are installed correctly (per this proposal).\r\n\r\nWindows Arm64 will have a similar problem if we don't implement this proposal in time. We need to talk to the Windows team about their schedule. If Microsoft releases a Windows build with x64 emulation before .NET 6, we will need to update .NET 5 to have the correct behavior to align with that release date so that Windows users don't have to deal with the same problems as macOS users (remove existing installs).\r\n\r\nAnother related but separate breaking change is that we will need to change x64 installers to have different behaviors on Arm64 (different install location; not setting the path; different reg keys on Windows). That means that old x64 installers will not be supported on Arm64. This includes both old builds for a supported release like .NET Core 3.1, and all builds for a no longer supported release like .NET Core 3.0. That's not likely to affect many people, but will need to be documented.\r\n\r\n### Applications\r\n\r\nThere are two different aspects of apps that determine the way in which they are launched.\r\n\r\n- The host that is used to launch the app.\r\n- The runtime ID that was used to build the app.\r\n\r\nThere are three host options:\r\n\r\n1. The app is self-contained and launched with its executable apphost, such as `myapp.exe` or `./myapp`. \r\n1. The app is framework-dependent and launched with its executable apphost, such as `myapp.exe` or `./myapp`.\r\n1. The app is framework-dependent and launched with the `dotnet` host, such as `dotnet myapp.dll`.\r\n\r\nNote: The second case is the default experience on Windows, while the third one is the default experience on macOS (due to notarization requirements).\r\n\r\nIn the first case, the apphost is able to launch the runtime and app in the same directory, and the application is started. As long as the app was published for `osx-arm64` or `osx-x64`, it will work. This case does not rely on the `PATH`.\r\n\r\nIn the second case, the apphost will attempt to find the required .NET architecture and version installed to known locations such as `C:\\Program Files\\dotnet` (native architecture) or `C:\\Program Files\\dotnet\\x64` (x64 emulation). The apphost for the app will be chosen and generated at build-time based on the implicit runtime ID of the SDK or explicitly defined via a CLI or msbuild property. For example `dotnet build` will produce an apphost that matches the operating system and architecture of the SDK, whereas `dotnet publish -r osx-arm64 --self-contained false` will produce a framework-dependent app with an app host for macOS Arm64. In the case that the apphost cannot find  a compatible .NET version in the known location for the given architecture, it will produce an error. A user can set `DOTNET_ROOT` to an alternative location. This case does not rely on the `PATH`.\r\n\r\nWe will need to create a `DOTNET_ROOT_X64` or `DOTNET_ROOT(x64)` ENV, to enable `DOTNET_ROOT` to apply to the native architecture. x64 apps that are already published will have no concept of a `DOTNET_ROOT_X64`, so will not work correctly.\r\n\r\nWe have two choices on how to handle that:\r\n\r\n- Require developers to rebuild apps to behave correct in the x64 emulated environment on Arm64. Rebuilding would result in using a newer apphost that understands to look for the `DOTNET_ROOT_X64` ENV.\r\n- Consider `DOTNET_ROOT` as x64-specific, and instead create a `DOTNET_ROOT_Arm64` ENV for Arm64 apps.\r\n\r\nThe first option isn't great, but is workable. The second option would be a very unfortunate long-term choice. This choice is a microcosm of the installation directory discussion that is at the heart of this document. We rejected `dotnet-x64` and `dotnet-arm64` directory names for the .NET product installation. We should also reject needing to specify an architecture for `DOTNET_ROOT` for the native architecture.\r\n\r\nNote: I'm not a fan of `DOTNET_ROOT(x64)`. It's hard to type (requires me to hold `shift` and look at my keyboard), looks inspired by `Program Files(x86)` from Windows, and generally looks funny. Please, let's adopt `DOTNET_ROOT_X64`.\r\n\r\nIn the third and last case, the `dotnet` host is used to directly launch an app via its managed entry point. In this case, the architecture has been chosen by virtue of the given `dotnet` used, either for the native or emulated architecture. The `dotnet` host (and related infrastructure) will attempt to find a compatible .NET version based on that architecture. In the case that the `dotnet` host cannot find be a compatible .NET version, it will produce an error. This case relies on the `PATH`, unless an absolute path to `dotnet` is used, such as `C:\\Program Files\\dotnet\\x64\\dotnet` or `D:\\MyPrivateDotnet\\dotnet`.\r\n\r\nIn the third case, an architecture is specified in `deps.json`, but it is not consulted/honored. That makes the experience for the second and third cases asymmetric. That's not attractive. Also, the app may reference native dependencies that are incompatible with the architecture of the given `dotnet`. One challenge is that `dotnet build` produces portable assets by default. As a result, looking to `deps.json` for an architecture isn't correct.\r\n\r\nWe can improve on the first case by writing the architecture to `runtimeconfig.json`. That's the correct file to describe fundamental scalar values about the app. This value would enable `dotnet` to either produce errors if it was an incompatible architecture for the app, or to proxy to a `dotnet` of another architecture. We should only write this value for apps that target a specific (and single) architecture, not for portable apps. As is mentioned multiple times in this document, there is no good gesture for that today. In fact, we should reconsider portable apps as a default experience.\r\n\r\n## SDK\r\n\r\nThe SDK offers many commands and scenarios and includes multiple components that are launched in varying ways. It supports cross-version and cross-architecture targeting for some scenarios and for others requires using a matching SDK and/or runtime for the version and architecture you are targeting. It is expected that this section of the document is the least complete as a result of the more complicated experiences.\r\n\r\nIn general, we expect the following:\r\n\r\n- `dotnet build` and `dotnet publish` support cross-targeting, across .NET version and CPU architecture. It doesn't matter which SDK you use to build or publish a given app provided that the SDK is the same or higher .NET version.\r\n- `dotnet build` and `dotnet publish` target the architecture of the SDK, by default. This is most relevant for producing the apphost for the app.\r\n  - For example, using the Arm64 SDK, `dotnet build` will produce an executable that is Arm64 specific and that makes the app Arm64-specific (for practical purposes). Given another gesture (which in practice doesn't exist), you could target x64, making it easier to use the Arm64 SDK for development but test with the emulated x64 SDK.\r\n  - It is inconvenient to use `dotnet build` to produce framework-dependent apps that target an explicit architecture/RID. See [.NET CLI Compatibility](https://gist.github.com/richlander/8e0d2d257f1f0d2104e0fcbb3c4ce687) for more context.\r\n  - This was demonstrated earlier by virtue of using `dotnet publish` instead of `dotnet build` for this purpose.\r\n  - We may need to improve this experience to make x64 emulation more easy to target. This problem may be less relevant for macOS (due to notarization requirements).\r\n- `dotnet run` and `dotnet test` launch an application, and require a compatible .NET runtime version for the architecture.\r\n  - In absence of a compatible version being present, the given host will present an error.\r\n  - We could consider enabling discovery and use of emulated versions of .NET when native architecture versions are not available, and vice versa.\r\n  - This scenario would happen naturally if it was straightforward to target an alternate architecture/RID, with `dotnet run` and `dotnet test`, particularly on Windows where the apphost is used by default.\r\n  - The `dotnet` host could be updated to do something similar, to make it honor the architecture present in the `deps.json` file. The Arm64 `dotnet` could proxy to the x64 `dotnet`, and vice versa. The `dotnet` host is relevant on macOS, since it is used exclusively for `dotnet run` and `dotnet test` scenarios, due to notarization requirements.\r\n  - We could simply extend `dotnet test`, for example, to accept a runtime ID, such as `dotnet test -r osx-x64`. Ideally, we could infer the operating system, and specify only the architecture, such as `dotnet test -a x64`.\r\n\r\n## User Experience\r\n\r\nWe haven't built this experience, but we can simulate much of it, both to more concretely present what is being proposed and to evaluate if the UX is tenable.\r\n\r\nI performed the following steps to create my simulation environments:\r\n\r\n- I installed .NET Core 3.1, .NET 5 and .NET 6, all as x64 version.\r\n- I moved them into an `x64` directory within the global `dotnet` directory.\r\n- I installed .NET 6 Arm64.\r\n- I validated that both x64 and Arm64 versions were functional at that point.\r\n\r\nI ran the following tests to demonstrate and evaluate the experience.\r\n\r\n### Validate Arm64 install\r\n\r\nValidate that the Arm64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-arm64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/          \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\t\t\tx64\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/dotnet  \r\n/usr/local/share/dotnet/dotnet: Mach-O 64-bit executable arm64\r\n```\r\n\r\n### Validate x64 install\r\n\r\nValidate that the x64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/x64       \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/x64/dotnet\r\n/usr/local/share/dotnet/x64/dotnet: Mach-O 64-bit executable x86_64\r\n```\r\n\r\n## Build and run .NET 5 app with Arm64\r\n\r\nThe premise of this test is that there is no Arm64 build of .NET 5 for macOS. The app builds and does not run, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj | grep Target\r\n    <TargetFramework>net5.0</TargetFramework>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 150 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net5.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.03\r\nrich@MacBook-Air dotnetapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp % dotnet ./bin/Debug/net5.0/dotnetapp.dll\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp\r\n```\r\n\r\nWe can use roll-forward tricks to coerce the app to run, and it does, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air dotnetapp % dotnet run                               \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\n## Build and run .NET 5 app with x64\r\n\r\nThe .NET 5 app should run successfully using emulation. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 5.0.5\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\n## Validate .NET 6 apps work\r\n\r\nThe previous example used a .NET 5 app. There are two concurrent .NET 6 versions installed (one for Arm64 and the other x64). Do I get Arm64 by default and can I opt to use x64? Yes.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet new console -o app\r\nGetting ready...\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 111 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app\r\nrich@MacBook-Air app % cat app.csproj| grep Target\r\n    <TargetFramework>net6.0</TargetFramework>\r\nrich@MacBook-Air app % dotnet run\r\nHello World!\r\nrich@MacBook-Air app % rm -r bin obj\r\nrich@MacBook-Air app % /usr/local/share/dotnet/x64/dotnet run\r\nHello World!\r\n```\r\n\r\n## Unit testing\r\n\r\nUnit testing is expected to require a compatible .NET version. It does.\r\n\r\nComplexapp includes an app, libraries, and tests. Let's start by running the app, repeating the exercise from above.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % export DOTNET_ROLL_FORWARD= && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=  \r\nrich@MacBook-Air complexapp % pwd  \r\n/Users/rich/git/dotnet-docker/samples/complexapp/complexapp\r\nrich@MacBook-Air complexapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air complexapp % /usr/local/share/dotnet/x64/dotnet run       \r\nstring: The quick brown fox jumps over the lazy dog\r\nreversed: god yzal eht revo spmuj xof nworb kciuq ehT\r\n```\r\n\r\nNow let's run the tests.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % cd ..\r\nrich@MacBook-Air complexapp % cd tests \r\nrich@MacBook-Air tests % pwd\r\n/Users/rich/git/dotnet-docker/samples/complexapp/tests\r\nrich@MacBook-Air tests % dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 279 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\nTesthost process exited with error: It was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\n. Please check the diagnostic logs for more information.\r\n\r\nTest Run Aborted.\r\n```\r\n\r\nAs expected, the .NET 5-based tests fail with a .NET 6 only environment. Let's try with a .NET 5 environment.\r\n\r\n```bash\r\nrich@MacBook-Air tests % /usr/local/share/dotnet/x64/dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 690 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 16 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\n```\r\n\r\nThat worked, as expected. Let's try the rollforward trick again.\r\n\r\n```bash\r\nrich@MacBook-Air tests % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air tests % dotnet test                            \r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 273 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 2 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\nrich@MacBook-Air tests % \r\n```\r\n\r\n### Using Apphost\r\n\r\nLet's see if we can get the combination of the CLI, apphost, `DOTNET_ROOT` to enable us to pivot executables to either the native or emulated architecture. This task requires a little extra finessing on macOS due to notarization. That step isn't required on Windows.\r\n\r\nLet's start with Arm64.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj \r\n<Project Sdk=\"Microsoft.NET.Sdk\" ToolsVersion=\"15.0\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 112 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.56\r\nrich@MacBook-Air dotnetapp % codesign -s - bin/Debug/net6.0/dotnetapp\r\nrich@MacBook-Air dotnetapp % ./bin/Debug/net6.0/dotnetapp\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nNow x64. This is where the CLI forces us to use `publish` instead of `build`. Ughh.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet publish -o dotnetappx64 --self-contained false -r osx-x64\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 1.2 sec).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/osx-x64/dotnetapp.dll\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetappx64/\r\nrich@MacBook-Air dotnetapp % codesign -s - dotnetappx64/dotnetapp\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air dotnetapp % ./dotnetappx64/dotnetapp \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % rm -r bin obj\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 133 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:05.20\r\n```\r\n\r\nThat worked. Once the `x64` directory is established as a known location, the `DOTNET_ROOT` ENV won't need to be set by default.\r\n\r\n## Using .NET global Tools\r\n\r\n.NET global tools are a specific apphost use case. Let's see how it plays out.\r\n\r\nLet's validate that we're starting from a clean slate.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % rm -r .dotnet/tools \r\nrich@MacBook-Air ~ % dotnet tool list -g\r\nPackage Id      Version      Commands\r\n-------------------------------------\r\n```\r\n\r\nNow let's install and use my favorite tool with the Arm64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo\r\nzsh: killed     dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % codesign -s - ~/.dotnet/tools/dotnet-runtimeinfo \r\nrich@MacBook-Air ~ % dotnet-runtimeinfo \r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nIt appears that .NET tools need to be notarized. That's a problem. After that, the tools work.\r\n\r\nGiven that the tools use apphost, let's see if we can start an Arm64 tools with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nWe can. That's not necessarily super useful, but good to know it works. Naturally, the tool sticks to being an Arm64 tools.\r\n\r\nLet's now try the opposite approach, with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool uninstall -g dotnet-runtimeinfo     \r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully uninstalled.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool list -g           \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet tool list -g \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                             \r\nFailed to load /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, error: dlopen(/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, 1): no suitable image found.  Did find:\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\nThe library libhostfxr.dylib was found, but loading it from /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib failed\r\n  - Installing .NET prerequisites might help resolve this problem.\r\n     https://go.microsoft.com/fwlink/?linkid=2063366\r\nrich@MacBook-Air ~ % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                            \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo                           \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\nInteresting. \r\n\r\n- The basic experience is identical, except the opposite of using the Arm64 SDK. As demonstrated, `dotnet-runtimeinfo` is now an x64 tool, but can be launched in all the same ways.\r\n- Tools can be discovered and managed with either the x64 or Arm64 SDKs. There is no mention of their architecture. It seems there is a flaw or a missing feature(s) there. Not a huge concern.\r\n- The `DOTNET_ROOT` ENV needs to be set (unsurprisingly) to find the .NET runtime. Once the `x64` directory is understood as a known location, that won't be necessary.\r\n- For some reason, the x64 apphost doesn't need to be notarized. That may be temporary or the permanent solution. Perhaps the x64 notarization requirements track closely to macOS x64 (native architecture).\r\n\r\n## Better x64 `dotnet` UX\r\n\r\nAll the example require using an absolute path: `/usr/local/share/dotnet/x64/dotnet`. That's pretty arduous. I had to use `which dotnet` several times to get the base `dotnet` path, as the Unix-based file system scheme is hard for me to remember. What about symbolic links or aliases?\r\n\r\nLet's start with a symbolic link.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo ln -s /usr/local/share/dotnet/x64/dotnet /usr/local/bin/dotnetx64\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % dotnetx64 new console -o app\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 147 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app \r\nrich@MacBook-Air app % dotnetx64 run\r\nHello World!\r\nrich@MacBook-Air app % cd  \r\nrich@MacBook-Air ~ % cd git/dotnet-docker/samples/dotnetapp \r\nrich@MacBook-Air dotnetapp % dotnetx64 run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % \r\n```\r\n\r\nLet's try an alias. I'll just set it directly, but you would want to set it in `.zshrc`, `.bashrc`, or the equivalent if you wanted the setting to be durable across terminal windows and sessions. Windows has similar capabilities you can use.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo rm /usr/local/bin/dotnetx64 \r\nPassword:\r\nrich@MacBook-Air ~ % dotnetx64\r\nzsh: command not found: dotnetx64\r\nrich@MacBook-Air ~ % alias dotnetx64=\"/usr/local/share/dotnet/x64/dotnet\"\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI don't think we should configure the x64 `dotnet` in either of these ways by default. They just demonstrate that users can configure their machines in ways that make them more productive, while still using .NET in a correct and supported way.\r\n\r\n## Conclusions\r\n\r\nThe good news is that the vast majority of the proposed experiences works well, and they appears largely tenable.\r\n\r\nWe should do some combination of the following, in priority order:\r\n\r\n- Update the x64 installers to install to the proposed new location on macOS and Windows Arm64 machines.\r\n- Update apphost to treat the `x64` directory as a known location (for the x64 apphost).\r\n- Enable discovery of .NET versions for all architectures on a machine, installed to known locations.\r\n  - `dotnet --info` should provide information on another architecture being present on the machine.\r\n- Improve error messages to direct users to better outcomes. \r\n  - Direct users to a required version that is already installed, but for another architecture.\r\n  - Direct users to use the other architecture because the required version is known to not be available for the current architecture (for example .NET 5 on Apple Silicon).\r\n  - Direct users to use `dotnet run` and `dotnet test` with architecture specific builds when cross architectures.\r\n- Implement the `codesign` technique used in the examples as a first class feature so that we can re-enable the apphost on macOS, for apps in general and [global tools in particular](https://github.com/dotnet/sdk/issues/17143).\r\n- Enable explicit flows from one architecture to the other, for example by enabling users to specify an alternate architecture to `dotnet run` and `dotnet test`.\r\n\r\nThe simulated example UX demonstrated above (assuming we productize it) is a great step forward compared to what we have today, but it isn't good enough to ship. We need to make the product easier to use. We know that x64 emulation will be important, at least at first. On Windows, it may be an important part of the developer experience for a long time. We need to prepare for that likely outcome, and for x64 on Arm64 machines being more relevant than x86 is on Windows x64 today.\r\n\r\nThere are developer experiences that were not tested. It is very likely that there are important experiences that still need to be considered."},{"Id":"16218985761","Type":"IssuesEvent","CreatedAt":"2021-05-06T01:42:28","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/17464","RelatedDescription":"Closed issue \"x64 emulation model\" (#17464) at dotnet/sdk","RelatedBody":"# x64 emulation model\r\n\r\nWe're working on a [plan to support .NET for x64 emulation on Arm64](https://github.com/dotnet/sdk/issues/17463), on macOS and Windows. There are multiple decision points that we are needing to navigate to make a decision. This document is intended to explore those.\r\n\r\nThe following issues are the fundamental decision points. The choices we make for each will have significant downstream and user observable impact.\r\n\r\n- Install location\r\n- Model for targeting architecture\r\n- Which .NET versions are supported (for x64 emulation)?\r\n- Quality of the experience (how polished is it?)\r\n\r\n## Install location\r\n\r\nGoal: .NET is installed to a disk location(s) that makes sense across time and space.\r\n\r\nWe have to install the .NET x64 product *somewhere* on Arm64 machines. We can install it in a `dotnet-x64` directory (or similar variant), as a peer to `dotnet` or as child of the `dotnet` directory within a new `x64` directory. We decided on the latter. The former sticks out like a sore thumb. The layout within the `x64` directory will be the exact same as a native architecture x64 installation.\r\n\r\nThe expected install location of x64 .NET on Arm64:\r\n\r\n- macOS: `/usr/local/share/dotnet/x64`\r\n- Windows: `C:\\Program Files\\dotnet\\x64`\r\n\r\nThere are a few implications of this decision.\r\n\r\n- We'll only add the parent `dotnet` directory to the `PATH`, which means that only the native architecture installation will be usable when you type `dotnet`.\r\n- It will be possible for a machine to have .NET x64 installed by itself, with no Arm64 .NET. That means that the `dotnet` directory would be empty, with the exception of the `x64` directory. It also means that the `PATH` would not be set at all (for .NET).\r\n- If x64 builds of Visual Studio for Windows or Visual Studio for Mac are installed on Arm64, then they will need to install the Arm64 .NET SDK and/or adapt those products to .NET x64 being installed in the `x64` directory.\r\n\r\nWe could install .NET x64 to another location, but the implications would be the same.\r\n\r\n## Model for targeting architecture\r\n\r\nGoal: Enable developers to produce architecture-specific assets correctly and with confidence.\r\n\r\nThe .NET application model is oriented around rid-specific apps. In particular, the apphost is rid-specific, and the apphost ia a core part of the experience. In some scenarios, you don't have to pay much attention to the rid of the apphost. For example, if you exclusively develop on *and* target Windows x64, then rid-targeting isn't really important, even though it is present. If your development and target environment differ, then you need to directly participate in rid-targeting.\r\n\r\nIn the typical scenario, you can develop on your machine, for example Windows x64, and then not need to consider rid-targeting until you are ready to test on or deploy to Linux x64, for example. x64 emulation places new requirements on developers to participate in RID-targeting during inner loop development. That's new.\r\n\r\nThe core issue is that some .NET versions are available for one rid and not the other. That means that you need to explicitly target the matching rid in some way. There are three choices for that, two of which are already supported today and one not.\r\n\r\n### Rely on the implicit rid of the SDK\r\n\r\nIn theory, the easiest approach is to simply use the matching SDK for the rid you want to target. That's the model used in the \"developing and targeting on Windows x64\" example discussed earlier.\r\n\r\nThere are problems with this model:\r\n\r\n- Using the x64 SDK will be a substandard experience, primarily due to it not being in the `PATH`. On macOS, you can either type `/usr/local/share/dotnet/x64/dotnet`, prepend that directory to the `PATH`, create a shell alias, or create a symbolic link (in `/usr/local/bin`). Some of those same options exist on Windows.\r\n- Users will find it confusing and unpleasant to need to pivot between the x64 and Arm64 SDKs as a means of targeting a .NET version (short-term problem) or RID (long-term problem).\r\n- This form of targeting will be untenable for many open source projects. Our GitHub repos don't have this problem because we always download the correct SDK via our build and test scripts. Assumption: Many other projects don't.\r\n\r\nIDEs would need to do this same pivoting. That means that they would need to install and update SDKs for two different RIDs and provide an experience for the user to switch between those SDKs, which might be the next option.\r\n\r\n### Rely on explicit RID targeting in the user project file\r\n\r\nThe .NET SDK can build for multiple TFMs and RIDs. Starting with .NET 6, it can also cross-compile for different architectures, for compiling IL to native code (crossgen2).\r\n\r\nThe premise of this option is that developers use the native architecture SDK and rely on its capability to produce compatible assets for the emulated architecture.\r\n\r\nCurrently, the best experience for explicit RID targeting is declaring the target (and singular) RID in the project file. There are other options but they don't work well.\r\n\r\nThe following project file uses explicit RID targeting, and maintains the framework-dependent default for .NET apps.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <RuntimeIdentifier>osx-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe `UseAppHost` property isn't strictly needed, but is a topic we need to resolve for macOS. It is included solely to spur conversation and ensure we don't forget a significant issue.\r\n\r\nThe upside of this plan is that this model is supported today and doesn't require any work (beyond resolving the apphost challenges on macOS). The downside is that is regression in experience. It has the following problems:\r\n\r\n- Projects files get longer and more complicated, for users that need (or are required) to use x64 emulation.\r\n- Project files are no longer portable across machines. This would be a deal killer for teams (or open source projects) that has users with multiple machine types. For example, dotnet org repos would never be able to implement this technique.\r\n\r\n### Rely on implicit RID defaults\r\n\r\nThere are two quite different user scenarios to satisfy, which don't require the same solution. The first is targeting a .NET version (like .NET Core 3.1) that is only available for one architecture for a given operating system and the second is targeting a specific architecture for testing purposes for a .NET version that is available for multiple architectures (like .NET 6). The former is a short-term problem and the latter is not.\r\n\r\nWe already have a concept of the SDK having an implicit RID for the SDK. We can pivot that by .NET version.\r\n\r\nThe following is an example of implicit RIDs we would use on macOS:\r\n\r\n- .NET 6: osx-arm64\r\n- .NET 5: osx-x64\r\n- .NET Core 3.1: osx-x64\r\n\r\nThis approach would enable developers to use the Arm64 SDK without needing any special gestures. For example `dotnet run` of a .NET 5 app using the Arm64 SDK would result in running a .NET 5 app with the x64 runtime (assuming the .NET 5 x64 runtime was installed).\r\n\r\nThis experience would also enable us to provide better error messages for users if they try to run or test a .NET 5 app with the .NET 6 SDK.\r\n\r\nThe upside of this option is that it provides automatic behaviors. There are two major downsides:\r\n\r\n- It would need to respect `DOTNET_ROLL_FORWARD` or provide some other opt-out. The lack of that could be a deal killer, particularly for global tools.\r\n- This model only works for old versions, not to .NET 6. In reality, this option is almost entirely .NET Core 3.1 specific (since .NET 5 will go EOL so soon after .NET 6 is released).\r\n\r\n## Provide a new model for RID targeting\r\n\r\nThere are multiple problems with RID-targeting today that make it inconvenient and confusing.\r\n\r\n- RID-specific apps are self-contained by default, which breaks multiple experiences.\r\n- You can specify a RID for `dotnet build` but you cannot specify that you want to maintain the framework-dependent nature of the app with another (native) CLI argument. You can use an MSBuild property for this case `/p:SelfContained=false`. That's really terrible UX.\r\n- RIDs are these special codes that are hard to remember (particularly `osx`). In the case of x64 emulation, you only want to pivot on architecture, not operating system. We should provide an easy mode to enables specifying an architecture without an OS.\r\n- An explicit RID and an implicit one are not symmetric. They are the same as it relates to apphost generation, however, the implict RID defaults to portable apps and the explicit RID defaults to architecture-specific apps. This behavior will become increasingly obvious.\r\n- `dotnet publish` of a RID-specific app produces two copies of the final app, and it isn't clear which one to use.\r\n\r\nWe haven't defined a new model. In short, it would need to resolve the problems with RID targeting that we have today.\r\n\r\nAssuming we had a new model, it would have these general characteristics:\r\n\r\n- Users can pivot between architecture or RIDs on the command-line for all the relevant .NET verbs (like `dotnet test`) while maintaining the framework-dependent nature of their app.\r\n- You can specify just architecture as an easy mode, when that's relevant.\r\n- Pivoting by architecture doesn't rewrite builds in your bin folder.\r\n- Incremental build works.\r\n- Roll forward participates in RID selection. It is easy to coerce apps to roll forward (to enable using the native architecture), particularly for `dotnet tool install`.\r\n\r\nNote: these changes may or not be breaking. There are both breaking and non-breaking options to satisfy these characteristics.\r\n\r\n## Which .NET Versions are supported with x64 emulation\r\n\r\nGoal: Support the .NET versions that developers expect to use on Arm64, particularly if an Apple Silicon Mac or Surface Pro X is their only development device.\r\n\r\nWe've just spent a lot of effort getting .NET Core 3.1 and .NET Core 3.1 to work on Apple Silicon, with Apple. Of course they are supported! Also, it would be a major regression to remove .NET Core 3.1 and .NET 5 targeting from Visual Studio for Mac users on Apple Silicon.\r\n\r\nOn the other hand, the change to install location for .NET x64 builds is very disruptive, and we'd prefer not to pay it for all versions.\r\n\r\nZooming out, all in-support versions are supported for x64 emulation. It's easiest to consider that for self-contained apps. A self-contained .NET Core 3.1 app built for `osx-x64` is supported on Apple Silicon machines.\r\n\r\nThe big question is how to manage global installs, particularly for the developer desktop. That's where the disruptive change, of requiring .NET x64 builds to install in an `x64` directory, is relevant.\r\n\r\nWe cannot make an informed decision until we understand what we're doing for RID targeting, discussed earlier. The decisions are co-dependent.\r\n\r\nWe can put some stakes in the ground (some hard, some soft):\r\n\r\n- We need x64 runtime installers.\r\n- We need x64 .NET Core 3.1 runtime installers for sure.\r\n- We can likely get away without updating/supporting x64 .NET 5 runtime installers given the proximity of .NET EOL to .NET 6 RTM.\r\n- ASP.NET Core does not have a macOS runtime installer. We may need one, dependent on our plan for the x64 .NET SDK.\r\n- We may not need to update/support x64 SDK installers, dependent on whether decisions on RID targeting mean the SDK must match the architecture or the native SDK can target either Arm64 or x64.\r\n\r\n## Proposals\r\n\r\nAs suggested, multiple of the options are co-dependent. The following section describes three options with varying UX and cost. There is some opportunity for mix and match between these options.\r\n\r\n### Option 0: Do nothing\r\n\r\nThis option articulates the no cost option.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start. You can only have one architecture installed at once.\r\n- **Supported x64 installers (for coexistence):**\r\n  - None\r\n- **Unsupported installers (for coexistence)**\r\n  -  All x64 installers\r\n\r\nNote: Every time you switch between Arm64 and x64, you need to uninstall .NET. On macOS, you have to `rm -rf` the `dotnet` directory.\r\n\r\nNote: This back-and-forth option would be untenable for VS for Mac. With this option, VS for Mac would either have to support x64 only or .NET 6+ only (as native architecture). The same thing applies to VS for Windows should it be supported (as an x64 app) on Windows Arm64.\r\n\r\nNote: Alternatively IDEs could support Arm64 with a global install and x64 to an alternative location (admin or user space). That's likely not tenable either. That means that .NET users and the IDE might install to different locations. As Microsoft (or DevDiv), if we need to durable location for .NET, then we need to define it.\r\n\r\n### Option 1: UX insensitive; cost sensitive\r\n\r\nThis option is intended as the lowest cost option. It's the MVP for x64 emulation support.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - Install ASP.NET Core 3.1 ASP.NET Core via tar.gz on macOS.\r\n- **Unsupported installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\n### Option 2: Balanced between UX and cost\r\n\r\nThis option is intended as a balance between UX and cost, and also intending to do the minimum work now while retaining the option to do more later.\r\n\r\n- **RID UX:** Rely on implicit RID defaults, per .NET version.\r\n- **SDK guidance:** Use the Arm64 .NET 6 SDK, by default. Fallback to x64, as needed.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - New x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\nNote: One oddity of this plan is that it is easier to use x64 emulation with .NET Core 3.1 than .NET 6.\r\n\r\n### Option 3: UX sensitive; cost insensitive\r\n\r\nThis option is intended as the most user friendly option. It's the best experience we could imagine providing. It is expected to be the most expensive and least defined (at least currently).\r\n\r\n- **RID UX:** New model for RID targeting\r\n- **SDK guidance:** Always use the .NET 6+ Arm64 SDK\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET 5 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - [New] x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  x64 .NET SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\n## Recommendation\r\n\r\nAs expected, the UX of these options gets considerably worse, with the options (in order).\r\n\r\nOption 1 would be a very hard to deliver as-is. The experience of using [.NET global tools](https://github.com/dotnet/sdk/issues/17241) is the worst-case experience but is generally descriptive of the UX of relying on the implicit RID targeting of the SDK for x64-only .NET versions.\r\n\r\nOption 2 is tenable. It's primary challenge is that it is a nuanced behavior, and works best for the oldest supported runtime, not the newest one. The requirement of making the implicit RID sensitive to .NET version (including for global tools) is uncosted.\r\n\r\nOption 3 is the architecturally sound option with the best UX. It provides more uniform capabilities across all .NET versions. It is also uncosted.\r\n\r\nThe cost delta between options 2 and 3 is unknown. It's quite likely that we'd decide that option 2 is a subset of option 3.\r\n\r\nActual Plan:\r\n\r\n- Commit to delivering option 1.\r\n- Cost and design options 2 and 3.\r\n- Determine if we fund options 2 and 3 in .NET 6.\r\n\r\nWe decided that option 3 will result in CLI breaking changes. While option 2 could theoretically be delivered between .NET 6 and .NET 7 with a .NET SDK update (like `6.0.200`), option 3 can only be delivered with a major release. It is also fair to note that the breaking changes associated with option 3 are not dependent on option 2. We could in theory make the breaking changes for option 3 now, enabling the remaining work to be done either before .NET 6 or in a .NET SDK update.\r\n\r\nNote: These plans assume that Visual Studio (Dev17) will not be supported on Windows Arm64 (with x64 emulation) before .NET 7. They also assume that Visual Studio for Mac will adapt to this plan, aligned with .NET 6. If those are not true, then we need to re-assess this plan.\r\n"},{"Id":"16218832457","Type":"IssuesEvent","CreatedAt":"2021-05-06T01:19:21","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/16896","RelatedDescription":"Closed issue \"RFC: dotnet [Arm64 | x64] coexistence\" (#16896) at dotnet/sdk","RelatedBody":"[Microsoft](https://blogs.windows.com/windows-insider/2020/12/10/introducing-x64-emulation-in-preview-for-windows-10-on-arm-pcs-to-the-windows-insider-program/) and [Apple](https://www.apple.com/mac/m1/) are both producing new OSes for Arm64 that support x64 emulation. For .NET, we need to determine how to support .NET Arm64 and x64 builds on those OSes in a way that offers a reasonable user experience and that has reasonable cost.\r\n\r\n## Problem to solve\r\n\r\nAs stated, we need to offer x64 and Arm64 builds of .NET within one 64-bit namespace (without much help from the OS on how to manage it). That leads to three issues:\r\n\r\n- How do we separate the products in some directory structure (peer directories or unified)?\r\n- Do customers manage using the arm64 vs arm64 product via which one is in the path (or absolute paths to dotnet)?\r\n- Do the directory names represent the product in the way we want?\r\n\r\nOne could reasonable ask why we need to support coexistence once native Arm64 build are available.\r\n\r\n- We are only building .NET 6 for Apple Arm64, and people will have legitimate need to use earlier .NET versions that are x64-only.\r\n- The situation on Windows is more favorable since both .NET 5 and 6 are built for Windows Arm64, but the general problem is the same.\r\n- The point of emulation is to enable a smooth transition to Arm64. It may take some time for people to transition to Arm64. For example, someone may be able to move to .NET 6 immediately but not to Arm64 because of a native dependency.\r\n- If we decided not to solve this problem, we'd want to consider blocking the x64 installers on macOS and Windows Arm64 machines, or at least showing a warning that there are unsolved problems that the user will likely run into.\r\n\r\n## Context\r\n\r\nThe Windows and macOS plans and implementations are similar but have key differences, per our understanding.\r\n\r\n\t- Same: No WoW64 subsystem or Program Files (x64) style experience. For example, there is no x64 command prompt.\r\n\t- Same: An executable can be universal.\r\n\t- Different: macOS universal executables are transparently restartable, while Windows ones are not.\r\n\t- Different: Windows x64 emulation is here to stay, while macOS x64 emulation will probably be removed in 3-5 years.\r\n\r\nThe following are various high-level solutions that we could employ, with pros and cons.\r\n\r\n## Status quo\r\n\r\nOn Windows x64, .NET is installed to two locations (depending on architecture):\r\n\r\n\t- C:\\Program Files\\dotnet\r\n\t- C:\\Program Files (x86)\\dotnet\r\n\r\nToday, customers need one of those two directories in the path in order to get the \"dotnet\" experience they want, like if they want a 32-bit or 64-bit \"dotnet build\".\r\n\r\nNote: There will not be a C:\\Program Files (x64) directory on Windows Arm64. We are expected to install 64-bit products (Intel and/or Arm based) in C:\\Program Files.\r\n\r\nOn macOS, .NET is installed to one location:\r\n\r\n\t- /usr/local/share/dotnet \r\n\r\n## Going forward\r\nThere will be one dotnet in the path, just like today. Much like the 32- and 64-bit support we offer on Windows, we'll offer both Arm64 and x64 builds of .NET and customers can install both or either, and can control which is in the `PATH`. That will determine if they get an Arm64 or x64 dotnet build. We are not planning on building a .NET version manager that enables switching which architecture you get. We intend to rely on the `PATH`.\r\n\r\nThe question is what structure we offer for the two 64-bit products, how intuitive that is (now and later) and how expensive that is for us to offer.\r\n\r\n### Native dotnet\r\n\r\nPremise: there is a \"dotnet\" directory on every OS, and it is the native architecture.\r\n\r\nWe'd end up with the following, on Windows and macOS, respectively:\r\n\r\n- C:\\Program Files\\dotnet\r\n- C:\\Program Files\\dotnet_x64\r\n- /usr/local/share/dotnet \r\n- /usr/local/share/dotnet_x64\r\n\r\nThis is the usual \"who gets the good name\" problem. \r\n\r\n**Pros:**\r\n- The dotnet directory is the native architecture on all Oses.\r\n- This option is particularly beneficial for macOS, since we expect x64 emulation to be taken away relatively quickly, at which point dotnet_x64 would disappear on that OS.\r\n\r\n**Cons:**\r\n- x64 directories on x64 and Arm64 machines no longer match.\r\n- x64 installers needs to change, including for 3.1 and 5.0. Hopefully, a single install can install to dotnet on an x64 machine and dotnet_x64 on an Arm64 machine. If not, we need a second set of x64 installers. That's likely untenable.\r\n- We have to break, migrate or somehow manage existing x64 .NET installs on Apple Silicon machines.\r\n\r\n### Archify dotnet\r\n\r\nPremise: fully embrace multi-arch support, with arch-specific directories.\r\n\r\nWe'd end up with the following:\r\n\r\n- C:\\Program Files\\dotnet_arm64\r\n- C:\\Program Files\\dotnet_x64\r\n- /usr/local/share/dotnet _arm64\r\n- /usr/local/share/dotnet _x64\r\n\r\nOn Arm64, we'd have these arch-specific directories. This is the \"no one gets the good name option; everybody loses\" option.\r\n\r\n**Pros:**\r\n- The directories are all self-descriptive and symmetrical.\r\n\r\n**Cons**\r\n- Same cons as \"Native dotnet\"\r\n- Install directories on Windows x64 and Windows Arm64 don't match.\r\n- We're stuck with dotnet_arm64 on macOS forever, even though that's the only architecture supported (in the long run).\r\n\r\n### Hide architecture differences\r\n\r\nPremise: These differences don't need to be so apparent. We already have version folders under dotnet. We can add arch folders (or something similar). This option has a lot of sub-options, too.\r\n\r\n**Option 1** -- Insert a new folder, with discrete .NET hives underneath:\r\n\r\n- C:\\Program Files\\dotnet\\arm64\r\n- C:\\Program Files\\dotnet\\x64\r\n- /usr/local/share/dotnet/arm64\r\n- /usr/local/share/dotnet/x64\r\n\r\n**Option 2** -- Intermix architectures in one structure (here, just shown with Windows, for simplicity):\r\n\r\n- For \"dotnet\"\r\n\t- C:\\Program Files\\dotnet\\arm64\\dotnet.exe\r\n\t- C:\\Program Files\\dotnet\\x64\\dotnet.exe\r\n- For frameworks\r\n\t- C:\\Program Files\\dotnet\\shared_arm64\\Microsoft.NETCore.App\\6.0.0-preview.3.21181.6\\\r\n\t- C:\\Program Files\\dotnet\\shared_x64\\Microsoft.NETCore.App\\6.0.0-preview.3.21181.6\\\r\n\r\nPut \"x64\" and \"arm64\" somewhere in the folder hierarchy. Where it is, is an implementation decision. It is the same (in spirit) as C:\\Windows\\Microsoft.NET\\Framework and C:\\Windows\\Microsoft.NET\\Framework64.\r\n\r\n**Option 3** -- Arm64 is native architecture with x64 intermixed in:\r\n\r\n- For \"dotnet\"\r\n\t- C:\\Program Files\\dotnet/dotnet\r\n\t- C:\\Program Files\\dotnet/x64/dotnet \r\n- For frameworks\r\n\t- C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.0-preview.3.21181.6\\\r\n\t- C:\\Program Files\\dotnet\\shared_x64\\Microsoft.NETCore.App\\6.0.0-preview.3.21181.6\\\r\n\r\n\r\n**Pros:**\r\n- We can manage Arm64 and x64 builds within a single structure in a way that we see as best, both now and over time.\r\n\r\n**Cons**\r\n- Same cons as \"Native dotnet\"\r\n\r\n### Hide architectural differences with universal binaries\r\n\r\nBoth Windows and macOS offer a form of universal binaries, which we could use as a multiplexer between the two 64bit products. There are two problems with that.\r\n\r\n- We don't have enough information in all scenarios to know which architecture is the right one.\r\n- The Windows implementation (per our understanding) isn't as feature rich as we'd need to make all scenarios work, like debuggers.\r\n\r\nWe're rejecting this option for now. We could decide to adopt this solution on macOS and not Windows, should feedback push us in that direction.\r\n\r\n### Compatibility Wins\r\n\r\nPremise: People have already installed .NET x64 on Apple Silicon machines. We need to respect that. This is the opposite of \"Native dotnet\"\r\n\r\nWe'd end up with the following:\r\n\r\n- C:\\Program Files\\dotnet_arm64\r\n- C:\\Program Files\\dotnet\r\n- /usr/local/share/dotnet _arm64\r\n- /usr/local/share/dotnet\r\n\r\n\r\n**Pros:**\r\n- Good compatibility for existing Apple Silicon .NET users.\r\n\r\n**Cons:**\r\n- Windows doesn't necessarily need this solution. We can change .NET before it ships with x64 support.\r\n- x64 gets the \"good name\" forever.\r\n\r\n\r\n## Hard design questions\r\n\r\n- **Developer UX**\r\n  - Would it be good enough to only have the platform native dotnet available on `PATH` by default (Native Dotnet solution above)? \r\n  - On Windows x64 the native .NET is typically the one on the `PATH` is already the case since typically only the x64 dotnet is on `PATH`, but it's possible to use it to build, run and test x86 apps.\r\n- **User UX**\r\n  - can we fully rely on apphost to solve the problem of picking the right archtiecture to run the app with? Different way to ask this: How common is it to run applications via \"dotnet app.dll\"?\r\n  - Is it possible to release new versions of downlevel installers (3.1 and 5) for macOS x64 and Windows x64 which would be ARM64 aware and could move the default location of the downlevel runtimes?\r\n  - How hard is it to create an x64 installer which can detect that it runs on ARM64 hardware and can change behavior based on that? This is dependent on the installer technology on Windows and macOS.\r\n\r\n## Other considerations\r\n\r\n- We probably need a `DOTNET_ROOT(x64)`, which would be analogous to the existing [`DOTNET(x86)` ENV](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet#environment-variables).\r\n- [Installers should be aware of multi-arch OSes and warn users as appropriate](https://github.com/dotnet/installer/issues/10192)\r\n\r\n"},{"Id":"16218822841","Type":"IssuesEvent","CreatedAt":"2021-05-06T01:17:54","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/17464","RelatedDescription":"Opened issue \"x64 emulation model\" (#17464) at dotnet/sdk","RelatedBody":"# x64 emulation model\r\n\r\nWe're working on a [plan to support .NET for x64 emulation on Arm64](https://github.com/dotnet/sdk/issues/17463), on macOS and Windows. There are multiple decision points that we are needing to navigate to make a decision. This document is intended to explore those.\r\n\r\nThe following issues are the fundamental decision points. The choices we make for each will have significant downstream and user observable impact.\r\n\r\n- Install location\r\n- Model for targeting architecture\r\n- Which .NET versions are supported (for x64 emulation)?\r\n- Quality of the experience (how polished is it?)\r\n\r\n## Install location\r\n\r\nGoal: .NET is installed to a disk location(s) that makes sense across time and space.\r\n\r\nWe have to install the .NET x64 product *somewhere* on Arm64 machines. We can install it in a `dotnet-x64` directory (or similar variant), as a peer to `dotnet` or as child of the `dotnet` directory within a new `x64` directory. We decided on the latter. The former sticks out like a sore thumb. The layout within the `x64` directory will be the exact same as a native architecture x64 installation.\r\n\r\nThe expected install location of x64 .NET on Arm64:\r\n\r\n- macOS: `/usr/local/share/dotnet/x64`\r\n- Windows: `C:\\Program Files\\dotnet\\x64`\r\n\r\nThere are a few implications of this decision.\r\n\r\n- We'll only add the parent `dotnet` directory to the `PATH`, which means that only the native architecture installation will be usable when you type `dotnet`.\r\n- It will be possible for a machine to have .NET x64 installed by itself, with no Arm64 .NET. That means that the `dotnet` directory would be empty, with the exception of the `x64` directory. It also means that the `PATH` would not be set at all (for .NET).\r\n- If x64 builds of Visual Studio for Windows or Visual Studio for Mac are installed on Arm64, then they will need to install the Arm64 .NET SDK and/or adapt those products to .NET x64 being installed in the `x64` directory.\r\n\r\nWe could install .NET x64 to another location, but the implications would be the same.\r\n\r\n## Model for targeting architecture\r\n\r\nGoal: Enable developers to produce architecture-specific assets correctly and with confidence.\r\n\r\nThe .NET application model is oriented around rid-specific apps. In particular, the apphost is rid-specific, and the apphost ia a core part of the experience. In some scenarios, you don't have to pay much attention to the rid of the apphost. For example, if you exclusively develop on *and* target Windows x64, then rid-targeting isn't really important, even though it is present. If your development and target environment differ, then you need to directly participate in rid-targeting.\r\n\r\nIn the typical scenario, you can develop on your machine, for example Windows x64, and then not need to consider rid-targeting until you are ready to test on or deploy to Linux x64, for example. x64 emulation places new requirements on developers to participate in RID-targeting during inner loop development. That's new.\r\n\r\nThe core issue is that some .NET versions are available for one rid and not the other. That means that you need to explicitly target the matching rid in some way. There are three choices for that, two of which are already supported today and one not.\r\n\r\n### Rely on the implicit rid of the SDK\r\n\r\nIn theory, the easiest approach is to simply use the matching SDK for the rid you want to target. That's the model used in the \"developing and targeting on Windows x64\" example discussed earlier.\r\n\r\nThere are problems with this model:\r\n\r\n- Using the x64 SDK will be a substandard experience, primarily due to it not being in the `PATH`. On macOS, you can either type `/usr/local/share/dotnet/x64/dotnet`, prepend that directory to the `PATH`, create a shell alias, or create a symbolic link (in `/usr/local/bin`). Some of those same options exist on Windows.\r\n- Users will find it confusing and unpleasant to need to pivot between the x64 and Arm64 SDKs as a means of targeting a .NET version (short-term problem) or RID (long-term problem).\r\n- This form of targeting will be untenable for many open source projects. Our GitHub repos don't have this problem because we always download the correct SDK via our build and test scripts. Assumption: Many other projects don't.\r\n\r\nIDEs would need to do this same pivoting. That means that they would need to install and update SDKs for two different RIDs and provide an experience for the user to switch between those SDKs, which might be the next option.\r\n\r\n### Rely on explicit RID targeting in the user project file\r\n\r\nThe .NET SDK can build for multiple TFMs and RIDs. Starting with .NET 6, it can also cross-compile for different architectures, for compiling IL to native code (crossgen2).\r\n\r\nThe premise of this option is that developers use the native architecture SDK and rely on its capability to produce compatible assets for the emulated architecture.\r\n\r\nCurrently, the best experience for explicit RID targeting is declaring the target (and singular) RID in the project file. There are other options but they don't work well.\r\n\r\nThe following project file uses explicit RID targeting, and maintains the framework-dependent default for .NET apps.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <RuntimeIdentifier>osx-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe `UseAppHost` property isn't strictly needed, but is a topic we need to resolve for macOS. It is included solely to spur conversation and ensure we don't forget a significant issue.\r\n\r\nThe upside of this plan is that this model is supported today and doesn't require any work (beyond resolving the apphost challenges on macOS). The downside is that is regression in experience. It has the following problems:\r\n\r\n- Projects files get longer and more complicated, for users that need (or are required) to use x64 emulation.\r\n- Project files are no longer portable across machines. This would be a deal killer for teams (or open source projects) that has users with multiple machine types. For example, dotnet org repos would never be able to implement this technique.\r\n\r\n### Rely on implicit RID defaults\r\n\r\nThere are two quite different user scenarios to satisfy, which don't require the same solution. The first is targeting a .NET version (like .NET Core 3.1) that is only available for one architecture for a given operating system and the second is targeting a specific architecture for testing purposes for a .NET version that is available for multiple architectures (like .NET 6). The former is a short-term problem and the latter is not.\r\n\r\nWe already have a concept of the SDK having an implicit RID for the SDK. We can pivot that by .NET version.\r\n\r\nThe following is an example of implicit RIDs we would use on macOS:\r\n\r\n- .NET 6: osx-arm64\r\n- .NET 5: osx-x64\r\n- .NET Core 3.1: osx-x64\r\n\r\nThis approach would enable developers to use the Arm64 SDK without needing any special gestures. For example `dotnet run` of a .NET 5 app using the Arm64 SDK would result in running a .NET 5 app with the x64 runtime (assuming the .NET 5 x64 runtime was installed).\r\n\r\nThis experience would also enable us to provide better error messages for users if they try to run or test a .NET 5 app with the .NET 6 SDK.\r\n\r\nThe upside of this option is that it provides automatic behaviors. There are two major downsides:\r\n\r\n- It would need to respect `DOTNET_ROLL_FORWARD` or provide some other opt-out. The lack of that could be a deal killer, particularly for global tools.\r\n- This model only works for old versions, not to .NET 6. In reality, this option is almost entirely .NET Core 3.1 specific (since .NET 5 will go EOL so soon after .NET 6 is released).\r\n\r\n## Provide a new model for RID targeting\r\n\r\nThere are multiple problems with RID-targeting today that make it inconvenient and confusing.\r\n\r\n- RID-specific apps are self-contained by default, which breaks multiple experiences.\r\n- You can specify a RID for `dotnet build` but you cannot specify that you want to maintain the framework-dependent nature of the app with another (native) CLI argument. You can use an MSBuild property for this case `/p:SelfContained=false`. That's really terrible UX.\r\n- RIDs are these special codes that are hard to remember (particularly `osx`). In the case of x64 emulation, you only want to pivot on architecture, not operating system. We should provide an easy mode to enables specifying an architecture without an OS.\r\n- An explicit RID and an implicit one are not symmetric. They are the same as it relates to apphost generation, however, the implict RID defaults to portable apps and the explicit RID defaults to architecture-specific apps. This behavior will become increasingly obvious.\r\n- `dotnet publish` of a RID-specific app produces two copies of the final app, and it isn't clear which one to use.\r\n\r\nWe haven't defined a new model. In short, it would need to resolve the problems with RID targeting that we have today.\r\n\r\nAssuming we had a new model, it would have these general characteristics:\r\n\r\n- Users can pivot between architecture or RIDs on the command-line for all the relevant .NET verbs (like `dotnet test`) while maintaining the framework-dependent nature of their app.\r\n- You can specify just architecture as an easy mode, when that's relevant.\r\n- Pivoting by architecture doesn't rewrite builds in your bin folder.\r\n- Incremental build works.\r\n- Roll forward participates in RID selection. It is easy to coerce apps to roll forward (to enable using the native architecture), particularly for `dotnet tool install`.\r\n\r\nNote: these changes may or not be breaking. There are both breaking and non-breaking options to satisfy these characteristics.\r\n\r\n## Which .NET Versions are supported with x64 emulation\r\n\r\nGoal: Support the .NET versions that developers expect to use on Arm64, particularly if an Apple Silicon Mac or Surface Pro X is their only development device.\r\n\r\nWe've just spent a lot of effort getting .NET Core 3.1 and .NET Core 3.1 to work on Apple Silicon, with Apple. Of course they are supported! Also, it would be a major regression to remove .NET Core 3.1 and .NET 5 targeting from Visual Studio for Mac users on Apple Silicon.\r\n\r\nOn the other hand, the change to install location for .NET x64 builds is very disruptive, and we'd prefer not to pay it for all versions.\r\n\r\nZooming out, all in-support versions are supported for x64 emulation. It's easiest to consider that for self-contained apps. A self-contained .NET Core 3.1 app built for `osx-x64` is supported on Apple Silicon machines.\r\n\r\nThe big question is how to manage global installs, particularly for the developer desktop. That's where the disruptive change, of requiring .NET x64 builds to install in an `x64` directory, is relevant.\r\n\r\nWe cannot make an informed decision until we understand what we're doing for RID targeting, discussed earlier. The decisions are co-dependent.\r\n\r\nWe can put some stakes in the ground (some hard, some soft):\r\n\r\n- We need x64 runtime installers.\r\n- We need x64 .NET Core 3.1 runtime installers for sure.\r\n- We can likely get away without updating/supporting x64 .NET 5 runtime installers given the proximity of .NET EOL to .NET 6 RTM.\r\n- ASP.NET Core does not have a macOS runtime installer. We may need one, dependent on our plan for the x64 .NET SDK.\r\n- We may not need to update/support x64 SDK installers, dependent on whether decisions on RID targeting mean the SDK must match the architecture or the native SDK can target either Arm64 or x64.\r\n\r\n## Proposals\r\n\r\nAs suggested, multiple of the options are co-dependent. The following section describes three options with varying UX and cost. There is some opportunity for mix and match between these options.\r\n\r\n### Option 0: Do nothing\r\n\r\nThis option articulates the no cost option.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start. You can only have one architecture installed at once.\r\n- **Supported x64 installers (for coexistence):**\r\n  - None\r\n- **Unsupported installers (for coexistence)**\r\n  -  All x64 installers\r\n\r\nNote: Every time you switch between Arm64 and x64, you need to uninstall .NET. On macOS, you have to `rm -rf` the `dotnet` directory.\r\n\r\nNote: This back-and-forth option would be untenable for VS for Mac. With this option, VS for Mac would either have to support x64 only or .NET 6+ only (as native architecture). The same thing applies to VS for Windows should it be supported (as an x64 app) on Windows Arm64.\r\n\r\nNote: Alternatively IDEs could support Arm64 with a global install and x64 to an alternative location (admin or user space). That's likely not tenable either. That means that .NET users and the IDE might install to different locations. As Microsoft (or DevDiv), if we need to durable location for .NET, then we need to define it.\r\n\r\n### Option 1: UX insensitive; cost sensitive\r\n\r\nThis option is intended as the lowest cost option. It's the MVP for x64 emulation support.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - Install ASP.NET Core 3.1 ASP.NET Core via tar.gz on macOS.\r\n- **Unsupported installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\n### Option 2: Balanced between UX and cost\r\n\r\nThis option is intended as a balance between UX and cost, and also intending to do the minimum work now while retaining the option to do more later.\r\n\r\n- **RID UX:** Rely on implicit RID defaults, per .NET version.\r\n- **SDK guidance:** Use the Arm64 .NET 6 SDK, by default. Fallback to x64, as needed.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - New x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\nNote: One oddity of this plan is that it is easier to use x64 emulation with .NET Core 3.1 than .NET 6.\r\n\r\n### Option 3: UX sensitive; cost insensitive\r\n\r\nThis option is intended as the most user friendly option. It's the best experience we could imagine providing. It is expected to be the most expensive and least defined (at least currently).\r\n\r\n- **RID UX:** New model for RID targeting\r\n- **SDK guidance:** Always use the .NET 6+ Arm64 SDK\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET 5 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - [New] x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  x64 .NET SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\n## Recommendation\r\n\r\nAs expected, the UX of these options gets considerably worse, with the options (in order).\r\n\r\nOption 1 would be a very hard to deliver as-is. The experience of using [.NET global tools](https://github.com/dotnet/sdk/issues/17241) is the worst-case experience but is generally descriptive of the UX of relying on the implicit RID targeting of the SDK for x64-only .NET versions.\r\n\r\nOption 2 is tenable. It's primary challenge is that it is a nuanced behavior, and works best for the oldest supported runtime, not the newest one. The requirement of making the implicit RID sensitive to .NET version (including for global tools) is uncosted.\r\n\r\nOption 3 is the architecturally sound option with the best UX. It provides more uniform capabilities across all .NET versions. It is also uncosted.\r\n\r\nThe cost delta between options 2 and 3 is unknown. It's quite likely that we'd decide that option 2 is a subset of option 3.\r\n\r\nActual Plan:\r\n\r\n- Commit to delivering option 1.\r\n- Cost and design options 2 and 3.\r\n- Determine if we fund options 2 and 3 in .NET 6.\r\n\r\nWe decided that option 3 will result in CLI breaking changes. While option 2 could theoretically be delivered between .NET 6 and .NET 7 with a .NET SDK update (like `6.0.200`), option 3 can only be delivered with a major release. It is also fair to note that the breaking changes associated with option 3 are not dependent on option 2. We could in theory make the breaking changes for option 3 now, enabling the remaining work to be done either before .NET 6 or in a .NET SDK update.\r\n\r\nNote: These plans assume that Visual Studio (Dev17) will not be supported on Windows Arm64 (with x64 emulation) before .NET 7. They also assume that Visual Studio for Mac will adapt to this plan, aligned with .NET 6. If those are not true, then we need to re-assess this plan.\r\n"},{"Id":"16218780821","Type":"IssuesEvent","CreatedAt":"2021-05-06T01:11:36","Actor":"richlander","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/17463","RelatedDescription":"Opened issue \"Supporting .NET with x64 emulation on Arm64\" (#17463) at dotnet/sdk","RelatedBody":"# Supporting .NET with x64 emulation on Arm64\r\n\r\nx64 emulation has emerged as an important new scenario for Arm64 operating systems from [Apple](https://www.apple.com/mac/m1/) and [Microsoft](https://blogs.windows.com/windows-insider/2020/12/10/introducing-x64-emulation-in-preview-for-windows-10-on-arm-pcs-to-the-windows-insider-program/). This document defines the approach for supporting .NET with x64 emulation.\r\n\r\nThe overall intent of this proposal to create workflows that enable the intuitive use of the Arm64 SDK with x64 runtimes. This experience will limit the need for the x64 SDK to be used (and installed). For example, someone should be able to git clone a repository that builds and tests a .NET Core 3.1 app on an Arm64 machine, using the Arm64 `dotnet` that is on the path, and relying on natural use of the (installed) .NET Core 3.1 x64 runtime. The repo owner wouldn't need to do anything special to enable their build and test scripts to work correctly on Arm64 machines.\r\n\r\nAn earlier issue discussed enabling [dotnet [Arm64 | x64] coexistence](https://github.com/dotnet/sdk/issues/16896), in terms of a broad set of options. The initial feedback converged on providing Arm64 as a native architecture offering, just like x64 is offered on x64 machines, and as if x64 emulation on Arm64 did not exist. Conversely, the feedback suggested that x64 emulation should be provided as a secondary architecture offering, as a new scenario with a new set of gestures and experiences. This document expands on that approach.\r\n\r\nFor the purposes of this document, we will assume that the Apple and Microsoft approaches to x64 emulation are the same.\r\n\r\n## Terms\r\n\r\n- Native architecture: the instruction set that the operating system targets and supports.\r\n  - For example, the native architecture of Windows x64 running on an x64 CPU is x64.\r\n  - For example, the native architecture on Windows x86 running on either an x86 or x64 CPU is x86 (or IA32).\r\n  - For example, the native architecture of macOS Arm64 running on an Apple Silicon CPU is Arm64.\r\n- Emulation: an alternate instruction set that is supported for some purpose, such as application compatibility.\r\n  - For example, Windows x64 supports running x86 (or 32-bit) via its Wow64 subsystem.\r\n  - For example, macOS Arm64 supports running x64 via its Rosetta 2 subsystem.\r\n\r\n## Principles\r\n\r\nThe approach is based on the following principles:\r\n\r\n- .NET will have a uniform model for supporting native architectures, with little or no difference across environments, such as macOS Arm64 and Windows x64.\r\n- .NET will have a uniform model for supporting x64 emulation on Arm64, with little or no difference across environments, such as macOS Arm64 and Windows Arm64.\r\n- It is OK for a given architecture to not be uniform across its native architecture and emulated presentations, for example .NET x64 on Windows x64 vs Windows Arm64.\r\n\r\nThese principles lead to the following propositions:\r\n\r\n- The native architecture offering is the primary use case and design target.\r\n- The emulated offering is a secondary use case and may require special gestures.\r\n\r\nThose principles and propositions offer us both prioritization and degrees of freedom.\r\n\r\n## Overall approach\r\n\r\nThere are two primary challenges to solve to enable .NET code to run in x64 emulation:\r\n\r\n- x64 instruction emulation.\r\n- Enabling .NET Arm64 and x64 to coexist.\r\n\r\nWe see the first challenge as being the role of the operating system teams, from Apple (macOS) and Microsoft (Windows). A .NET x64 emulation issue could just as easily affect Java or Python, for example. Also, we don't want to regularly service multiple .NET versions to support x64 emulation on multiple operating systems. For example, Apple have been responsive to the bugs we have filed, and fixed multiple issues in public builds. It may take longer for x64 emulation issues to be resolved than native architecture issues as an inherent outcome of this approach.\r\n\r\n.NET x64 builds are now working well in Rosetta 2 on macOS. The .NET team hasn't yet tested x64 emulation (at least at depth) on Windows Arm64. We have every reason to believe that these emulation systems are high quality and will work well for .NET x64 apps as a durable feature.\r\n\r\nNote: We are not committed to resolving issues that the operating system vendor does not address in their emulation subsystem. This includes functional, performance, and security issues. You can call Microsoft support for .NET issues with x64 emulation, but that may result in an issue being filed with the operating system vendor.\r\n\r\nFor development, we recommend using the native architecture build of .NET and using emulation primarily for testing. You can rely on emulation for daily work, but it will be be a substandard experience (described later).\r\n\r\nThere are two primary reasons why you might be required to use emulation:\r\n\r\n- You rely on a .NET version that isn't built for Arm64 (for your OS).\r\n- You rely on native dependencies that are not built for Arm64 (for your OS).\r\n\r\nArm64 and x64 builds can coexist, however, only the Arm64 build will be automatically added to the `PATH`. That means that typing `dotnet` will result in using an Arm64 build of .NET, by default. It also means you will get an error if the .NET version you need isn't available for Arm64, but only via x64 emulation (even if it is installed). Going forward, we will apply the same policy to all environments, to only set the `PATH` for native architecture builds. For example, we intend to apply this policy to Windows WoW64 support (Windows x86 on Windows x64).\r\n\r\nWe consider emulated environments as secondary experiences and will require users to have more skill to configure and use them efficiently and correctly. `PATH` management can be confusing and frustrating, and we consider it an advanced experience. By only setting the `PATH` for one architecture, we can document the expected experience of using .NET without needing to clarify the order of installing Arm64 and x64 versions.\r\n\r\n.NET x64 will be usable (via emulation) without any additional configuration for scenarios that do not rely on the `PATH`. These are documented later.\r\n\r\nBoth Arm64 and x64 installs must be serviceable. For example, if a user maintains .NET 6 installations for both Arm64 and x64, they must be able to install new Arm64 and x64 .NET builds in any order to safely update their machine. Also, Windows users should be able to rely on Microsoft Update to install both Arm64 and x64 .NET updates, as appropriate, for a given machine.\r\n\r\n## Native architecture\r\n\r\nWe have adopted the practice of installing .NET to the expected and idiomatic location on each operating system in the `dotnet` directory. That's what we've done for (native architecture) x64, and we'll follow that model for Arm64.\r\n\r\n- macOS: `/usr/local/share/dotnet`\r\n- Windows `C:\\Program Files\\dotnet`\r\n\r\nThe .NET installer for each operating system will update the machine-wide path to include the `dotnet` directory. This action enables developers to type `dotnet` and use the .NET platform.\r\n\r\nOn Windows, a registry key is also set by the installer to describe that .NET is installed. It will be set on Arm64 in an analogous way as x64. The format isn't discussed in this document.\r\n\r\n## x64 emulation\r\n\r\nx64 emulation is a new scenario that requires a new model, including new experiences and gestures. Unlike the Windows Wow64 model, where the operating system establishes file and registry virtualization that provides effective guidance for platforms like .NET, x64 emulation has no similar model. A platform like .NET is on its own to choose a good model for Arm64 and x64 coexistence. It is quite likely there will be significant diversity between dev platforms on this topic, either via inherent need or the result of different and uncoordinated choices.\r\n\r\n### Install location\r\n\r\nThe x64 build will be installed within the `dotnet` directory in an `x64` folder. Within that folder, the folder and file layout will be identical to what one would find in a native architecture installation. For example, the x64 `dotnet` executable will be installed to `/usr/local/share/dotnet/x64/dotnet` on macOS. The same model will be applied to Windows.\r\n\r\nThe major advantage of this approach is that the .NET product requires very limited updates to support this system since the structure within the `x64` directory is exactly as expected, because it is identical to a native architecture installation.\r\n\r\nAny .NET version can be installed within the x64 structure. For example, you can have .NET 6 installed concurrently for Arm64 and x64. They will be concurrently usable according to experiences that will be defined shortly.\r\n\r\nOn Windows, the x64 installer will need to write a value that does not overwrite Arm64 values. The format isn't discussed in this document.\r\n\r\nmacOS Arm64 has already been released and people are already installing .NET builds on it. Inherent in this proposal is a major breaking change. If users have installed any x64 builds on macOS Arm64, they will be required to delete the `dotnet` directory on their machine and re-install .NET from scratch to ensure x64 builds are installed correctly (per this proposal).\r\n\r\nWindows Arm64 will have a similar problem if we don't implement this proposal in time. We need to talk to the Windows team about their schedule. If Microsoft releases a Windows build with x64 emulation before .NET 6, we will need to update .NET 5 to have the correct behavior to align with that release date so that Windows users don't have to deal with the same problems as macOS users (remove existing installs).\r\n\r\nAnother related but separate breaking change is that we will need to change x64 installers to have different behaviors on Arm64 (different install location; not setting the path; different reg keys on Windows). That means that old x64 installers will not be supported on Arm64. This includes both old builds for a supported release like .NET Core 3.1, and all builds for a no longer supported release like .NET Core 3.0. That's not likely to affect many people, but will need to be documented.\r\n\r\n### Applications\r\n\r\nThere are two different aspects of apps that determine the way in which they are launched.\r\n\r\n- The host that is used to launch the app.\r\n- The runtime ID that was used to build the app.\r\n\r\nThere are three host options:\r\n\r\n1. The app is self-contained and launched with its executable apphost, such as `myapp.exe` or `./myapp`. \r\n1. The app is framework-dependent and launched with its executable apphost, such as `myapp.exe` or `./myapp`.\r\n1. The app is framework-dependent and launched with the `dotnet` host, such as `dotnet myapp.dll`.\r\n\r\nNote: The second case is the default experience on Windows, while the third one is the default experience on macOS (due to notarization requirements).\r\n\r\nIn the first case, the apphost is able to launch the runtime and app in the same directory, and the application is started. As long as the app was published for `osx-arm64` or `osx-x64`, it will work. This case does not rely on the `PATH`.\r\n\r\nIn the second case, the apphost will attempt to find the required .NET architecture and version installed to known locations such as `C:\\Program Files\\dotnet` (native architecture) or `C:\\Program Files\\dotnet\\x64` (x64 emulation). The apphost for the app will be chosen and generated at build-time based on the implicit runtime ID of the SDK or explicitly defined via a CLI or msbuild property. For example `dotnet build` will produce an apphost that matches the operating system and architecture of the SDK, whereas `dotnet publish -r osx-arm64 --self-contained false` will produce a framework-dependent app with an app host for macOS Arm64. In the case that the apphost cannot find  a compatible .NET version in the known location for the given architecture, it will produce an error. A user can set `DOTNET_ROOT` to an alternative location. This case does not rely on the `PATH`.\r\n\r\nWe will need to create a `DOTNET_ROOT_X64` or `DOTNET_ROOT(x64)` ENV, to enable `DOTNET_ROOT` to apply to the native architecture. x64 apps that are already published will have no concept of a `DOTNET_ROOT_X64`, so will not work correctly.\r\n\r\nWe have two choices on how to handle that:\r\n\r\n- Require developers to rebuild apps to behave correct in the x64 emulated environment on Arm64. Rebuilding would result in using a newer apphost that understands to look for the `DOTNET_ROOT_X64` ENV.\r\n- Consider `DOTNET_ROOT` as x64-specific, and instead create a `DOTNET_ROOT_Arm64` ENV for Arm64 apps.\r\n\r\nThe first option isn't great, but is workable. The second option would be a very unfortunate long-term choice. This choice is a microcosm of the installation directory discussion that is at the heart of this document. We rejected `dotnet-x64` and `dotnet-arm64` directory names for the .NET product installation. We should also reject needing to specify an architecture for `DOTNET_ROOT` for the native architecture.\r\n\r\nNote: I'm not a fan of `DOTNET_ROOT(x64)`. It's hard to type (requires me to hold `shift` and look at my keyboard), looks inspired by `Program Files(x86)` from Windows, and generally looks funny. Please, let's adopt `DOTNET_ROOT_X64`.\r\n\r\nIn the third and last case, the `dotnet` host is used to directly launch an app via its managed entry point. In this case, the architecture has been chosen by virtue of the given `dotnet` used, either for the native or emulated architecture. The `dotnet` host (and related infrastructure) will attempt to find a compatible .NET version based on that architecture. In the case that the `dotnet` host cannot find be a compatible .NET version, it will produce an error. This case relies on the `PATH`, unless an absolute path to `dotnet` is used, such as `C:\\Program Files\\dotnet\\x64\\dotnet` or `D:\\MyPrivateDotnet\\dotnet`.\r\n\r\nIn the third case, an architecture is specified in `deps.json`, but it is not consulted/honored. That makes the experience for the second and third cases asymmetric. That's not attractive. Also, the app may reference native dependencies that are incompatible with the architecture of the given `dotnet`. One challenge is that `dotnet build` produces portable assets by default. As a result, looking to `deps.json` for an architecture isn't correct.\r\n\r\nWe can improve on the first case by writing the architecture to `runtimeconfig.json`. That's the correct file to describe fundamental scalar values about the app. This value would enable `dotnet` to either produce errors if it was an incompatible architecture for the app, or to proxy to a `dotnet` of another architecture. We should only write this value for apps that target a specific (and single) architecture, not for portable apps. As is mentioned multiple times in this document, there is no good gesture for that today. In fact, we should reconsider portable apps as a default experience.\r\n\r\n## SDK\r\n\r\nThe SDK offers many commands and scenarios and includes multiple components that are launched in varying ways. It supports cross-version and cross-architecture targeting for some scenarios and for others requires using a matching SDK and/or runtime for the version and architecture you are targeting. It is expected that this section of the document is the least complete as a result of the more complicated experiences.\r\n\r\nIn general, we expect the following:\r\n\r\n- `dotnet build` and `dotnet publish` support cross-targeting, across .NET version and CPU architecture. It doesn't matter which SDK you use to build or publish a given app provided that the SDK is the same or higher .NET version.\r\n- `dotnet build` and `dotnet publish` target the architecture of the SDK, by default. This is most relevant for producing the apphost for the app.\r\n  - For example, using the Arm64 SDK, `dotnet build` will produce an executable that is Arm64 specific and that makes the app Arm64-specific (for practical purposes). Given another gesture (which in practice doesn't exist), you could target x64, making it easier to use the Arm64 SDK for development but test with the emulated x64 SDK.\r\n  - It is inconvenient to use `dotnet build` to produce framework-dependent apps that target an explicit architecture/RID. See [.NET CLI Compatibility](https://gist.github.com/richlander/8e0d2d257f1f0d2104e0fcbb3c4ce687) for more context.\r\n  - This was demonstrated earlier by virtue of using `dotnet publish` instead of `dotnet build` for this purpose.\r\n  - We may need to improve this experience to make x64 emulation more easy to target. This problem may be less relevant for macOS (due to notarization requirements).\r\n- `dotnet run` and `dotnet test` launch an application, and require a compatible .NET runtime version for the architecture.\r\n  - In absence of a compatible version being present, the given host will present an error.\r\n  - We could consider enabling discovery and use of emulated versions of .NET when native architecture versions are not available, and vice versa.\r\n  - This scenario would happen naturally if it was straightforward to target an alternate architecture/RID, with `dotnet run` and `dotnet test`, particularly on Windows where the apphost is used by default.\r\n  - The `dotnet` host could be updated to do something similar, to make it honor the architecture present in the `deps.json` file. The Arm64 `dotnet` could proxy to the x64 `dotnet`, and vice versa. The `dotnet` host is relevant on macOS, since it is used exclusively for `dotnet run` and `dotnet test` scenarios, due to notarization requirements.\r\n  - We could simply extend `dotnet test`, for example, to accept a runtime ID, such as `dotnet test -r osx-x64`. Ideally, we could infer the operating system, and specify only the architecture, such as `dotnet test -a x64`.\r\n\r\n## User Experience\r\n\r\nWe haven't built this experience, but we can simulate much of it, both to more concretely present what is being proposed and to evaluate if the UX is tenable.\r\n\r\nI performed the following steps to create my simulation environments:\r\n\r\n- I installed .NET Core 3.1, .NET 5 and .NET 6, all as x64 version.\r\n- I moved them into an `x64` directory within the global `dotnet` directory.\r\n- I installed .NET 6 Arm64.\r\n- I validated that both x64 and Arm64 versions were functional at that point.\r\n\r\nI ran the following tests to demonstrate and evaluate the experience.\r\n\r\n### Validate Arm64 install\r\n\r\nValidate that the Arm64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-arm64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/          \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\t\t\tx64\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/dotnet  \r\n/usr/local/share/dotnet/dotnet: Mach-O 64-bit executable arm64\r\n```\r\n\r\n### Validate x64 install\r\n\r\nValidate that the x64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/x64       \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/x64/dotnet\r\n/usr/local/share/dotnet/x64/dotnet: Mach-O 64-bit executable x86_64\r\n```\r\n\r\n## Build and run .NET 5 app with Arm64\r\n\r\nThe premise of this test is that there is no Arm64 build of .NET 5 for macOS. The app builds and does not run, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj | grep Target\r\n    <TargetFramework>net5.0</TargetFramework>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 150 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net5.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.03\r\nrich@MacBook-Air dotnetapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp % dotnet ./bin/Debug/net5.0/dotnetapp.dll\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp\r\n```\r\n\r\nWe can use roll-forward tricks to coerce the app to run, and it does, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air dotnetapp % dotnet run                               \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\n## Build and run .NET 5 app with x64\r\n\r\nThe .NET 5 app should run successfully using emulation. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 5.0.5\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\n## Validate .NET 6 apps work\r\n\r\nThe previous example used a .NET 5 app. There are two concurrent .NET 6 versions installed (one for Arm64 and the other x64). Do I get Arm64 by default and can I opt to use x64? Yes.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet new console -o app\r\nGetting ready...\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 111 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app\r\nrich@MacBook-Air app % cat app.csproj| grep Target\r\n    <TargetFramework>net6.0</TargetFramework>\r\nrich@MacBook-Air app % dotnet run\r\nHello World!\r\nrich@MacBook-Air app % rm -r bin obj\r\nrich@MacBook-Air app % /usr/local/share/dotnet/x64/dotnet run\r\nHello World!\r\n```\r\n\r\n## Unit testing\r\n\r\nUnit testing is expected to require a compatible .NET version. It does.\r\n\r\nComplexapp includes an app, libraries, and tests. Let's start by running the app, repeating the exercise from above.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % export DOTNET_ROLL_FORWARD= && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=  \r\nrich@MacBook-Air complexapp % pwd  \r\n/Users/rich/git/dotnet-docker/samples/complexapp/complexapp\r\nrich@MacBook-Air complexapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air complexapp % /usr/local/share/dotnet/x64/dotnet run       \r\nstring: The quick brown fox jumps over the lazy dog\r\nreversed: god yzal eht revo spmuj xof nworb kciuq ehT\r\n```\r\n\r\nNow let's run the tests.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % cd ..\r\nrich@MacBook-Air complexapp % cd tests \r\nrich@MacBook-Air tests % pwd\r\n/Users/rich/git/dotnet-docker/samples/complexapp/tests\r\nrich@MacBook-Air tests % dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 279 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\nTesthost process exited with error: It was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\n. Please check the diagnostic logs for more information.\r\n\r\nTest Run Aborted.\r\n```\r\n\r\nAs expected, the .NET 5-based tests fail with a .NET 6 only environment. Let's try with a .NET 5 environment.\r\n\r\n```bash\r\nrich@MacBook-Air tests % /usr/local/share/dotnet/x64/dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 690 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 16 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\n```\r\n\r\nThat worked, as expected. Let's try the rollforward trick again.\r\n\r\n```bash\r\nrich@MacBook-Air tests % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air tests % dotnet test                            \r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 273 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 2 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\nrich@MacBook-Air tests % \r\n```\r\n\r\n### Using Apphost\r\n\r\nLet's see if we can get the combination of the CLI, apphost, `DOTNET_ROOT` to enable us to pivot executables to either the native or emulated architecture. This task requires a little extra finessing on macOS due to notarization. That step isn't required on Windows.\r\n\r\nLet's start with Arm64.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj \r\n<Project Sdk=\"Microsoft.NET.Sdk\" ToolsVersion=\"15.0\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 112 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.56\r\nrich@MacBook-Air dotnetapp % codesign -s - bin/Debug/net6.0/dotnetapp\r\nrich@MacBook-Air dotnetapp % ./bin/Debug/net6.0/dotnetapp\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nNow x64. This is where the CLI forces us to use `publish` instead of `build`. Ughh.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet publish -o dotnetappx64 --self-contained false -r osx-x64\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 1.2 sec).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/osx-x64/dotnetapp.dll\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetappx64/\r\nrich@MacBook-Air dotnetapp % codesign -s - dotnetappx64/dotnetapp\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air dotnetapp % ./dotnetappx64/dotnetapp \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % rm -r bin obj\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 133 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:05.20\r\n```\r\n\r\nThat worked. Once the `x64` directory is established as a known location, the `DOTNET_ROOT` ENV won't need to be set by default.\r\n\r\n## Using .NET global Tools\r\n\r\n.NET global tools are a specific apphost use case. Let's see how it plays out.\r\n\r\nLet's validate that we're starting from a clean slate.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % rm -r .dotnet/tools \r\nrich@MacBook-Air ~ % dotnet tool list -g\r\nPackage Id      Version      Commands\r\n-------------------------------------\r\n```\r\n\r\nNow let's install and use my favorite tool with the Arm64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo\r\nzsh: killed     dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % codesign -s - ~/.dotnet/tools/dotnet-runtimeinfo \r\nrich@MacBook-Air ~ % dotnet-runtimeinfo \r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nIt appears that .NET tools need to be notarized. That's a problem. After that, the tools work.\r\n\r\nGiven that the tools use apphost, let's see if we can start an Arm64 tools with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nWe can. That's not necessarily super useful, but good to know it works. Naturally, the tool sticks to being an Arm64 tools.\r\n\r\nLet's now try the opposite approach, with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool uninstall -g dotnet-runtimeinfo     \r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully uninstalled.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool list -g           \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet tool list -g \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                             \r\nFailed to load /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, error: dlopen(/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, 1): no suitable image found.  Did find:\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\nThe library libhostfxr.dylib was found, but loading it from /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib failed\r\n  - Installing .NET prerequisites might help resolve this problem.\r\n     https://go.microsoft.com/fwlink/?linkid=2063366\r\nrich@MacBook-Air ~ % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                            \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo                           \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\nInteresting. \r\n\r\n- The basic experience is identical, except the opposite of using the Arm64 SDK. As demonstrated, `dotnet-runtimeinfo` is now an x64 tool, but can be launched in all the same ways.\r\n- Tools can be discovered and managed with either the x64 or Arm64 SDKs. There is no mention of their architecture. It seems there is a flaw or a missing feature(s) there. Not a huge concern.\r\n- The `DOTNET_ROOT` ENV needs to be set (unsurprisingly) to find the .NET runtime. Once the `x64` directory is understood as a known location, that won't be necessary.\r\n- For some reason, the x64 apphost doesn't need to be notarized. That may be temporary or the permanent solution. Perhaps the x64 notarization requirements track closely to macOS x64 (native architecture).\r\n\r\n## Better x64 `dotnet` UX\r\n\r\nAll the example require using an absolute path: `/usr/local/share/dotnet/x64/dotnet`. That's pretty arduous. I had to use `which dotnet` several times to get the base `dotnet` path, as the Unix-based file system scheme is hard for me to remember. What about symbolic links or aliases?\r\n\r\nLet's start with a symbolic link.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo ln -s /usr/local/share/dotnet/x64/dotnet /usr/local/bin/dotnetx64\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % dotnetx64 new console -o app\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 147 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app \r\nrich@MacBook-Air app % dotnetx64 run\r\nHello World!\r\nrich@MacBook-Air app % cd  \r\nrich@MacBook-Air ~ % cd git/dotnet-docker/samples/dotnetapp \r\nrich@MacBook-Air dotnetapp % dotnetx64 run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % \r\n```\r\n\r\nLet's try an alias. I'll just set it directly, but you would want to set it in `.zshrc`, `.bashrc`, or the equivalent if you wanted the setting to be durable across terminal windows and sessions. Windows has similar capabilities you can use.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo rm /usr/local/bin/dotnetx64 \r\nPassword:\r\nrich@MacBook-Air ~ % dotnetx64\r\nzsh: command not found: dotnetx64\r\nrich@MacBook-Air ~ % alias dotnetx64=\"/usr/local/share/dotnet/x64/dotnet\"\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI don't think we should configure the x64 `dotnet` in either of these ways by default. They just demonstrate that users can configure their machines in ways that make them more productive, while still using .NET in a correct and supported way.\r\n\r\n## Conclusions\r\n\r\nThe good news is that the vast majority of the proposed experiences works well, and they appears largely tenable.\r\n\r\nWe should do some combination of the following, in priority order:\r\n\r\n- Update the x64 installers to install to the proposed new location on macOS and Windows Arm64 machines.\r\n- Update apphost to treat the `x64` directory as a known location (for the x64 apphost).\r\n- Enable discovery of .NET versions for all architectures on a machine, installed to known locations.\r\n  - `dotnet --info` should provide information on another architecture being present on the machine.\r\n- Improve error messages to direct users to better outcomes. \r\n  - Direct users to a required version that is already installed, but for another architecture.\r\n  - Direct users to use the other architecture because the required version is known to not be available for the current architecture (for example .NET 5 on Apple Silicon).\r\n  - Direct users to use `dotnet run` and `dotnet test` with architecture specific builds when cross architectures.\r\n- Implement the `codesign` technique used in the examples as a first class feature so that we can re-enable the apphost on macOS, for apps in general and [global tools in particular](https://github.com/dotnet/sdk/issues/17143).\r\n- Enable explicit flows from one architecture to the other, for example by enabling users to specify an alternate architecture to `dotnet run` and `dotnet test`.\r\n\r\nThe simulated example UX demonstrated above (assuming we productize it) is a great step forward compared to what we have today, but it isn't good enough to ship. We need to make the product easier to use. We know that x64 emulation will be important, at least at first. On Windows, it may be an important part of the developer experience for a long time. We need to prepare for that likely outcome, and for x64 on Arm64 machines being more relevant than x86 is on Windows x64 today.\r\n\r\nThere are developer experiences that were not tested. It is very likely that there are important experiences that still need to be considered."},{"Id":"16218623753","Type":"PullRequestEvent","CreatedAt":"2021-05-06T00:48:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/17462","RelatedDescription":"Opened pull request \"[main] Update dependencies from dotnet/aspnetcore\" (#17462) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.9\r\n- **Date Produced**: 5/6/2021 12:06 AM\r\n- **Commit**: c6713591462b6e547860f3f289472865af3602a0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/6193393...c671359\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"595536249","IsPullRequest":true,"CreatedAt":"2020-05-07T13:22:05","Actor":"david-driscoll","Number":"182","RawContent":null,"Title":"Adding OmniSharp to projects list","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/182","RelatedDescription":"Closed or merged PR \"Adding OmniSharp to projects list\" (#182)"},{"Id":"611683931","IsPullRequest":true,"CreatedAt":"2020-05-07T13:21:08","Actor":"MarcoRossignoli","Number":"192","RawContent":null,"Title":"Update coverlet links","State":"closed","Body":"Update repo links\r\n\r\ncc: @tonerdo","Url":"https://github.com/dotnet-foundation/foundation/pull/192","RelatedDescription":"Closed or merged PR \"Update coverlet links\" (#192)"},{"Id":"609156777","IsPullRequest":true,"CreatedAt":"2020-04-29T15:53:41","Actor":"nxtn","Number":"191","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/191","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#191)"},{"Id":"601195169","IsPullRequest":true,"CreatedAt":"2020-04-29T14:06:15","Actor":"nxtn","Number":"190","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/190","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#190)"},{"Id":"600406233","IsPullRequest":true,"CreatedAt":"2020-04-29T14:06:05","Actor":"nxtn","Number":"189","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/189","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#189)"},{"Id":"599781898","IsPullRequest":true,"CreatedAt":"2020-04-14T19:06:28","Actor":"ENikS","Number":"188","RawContent":null,"Title":"Added Unity Contaienr project","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/188","RelatedDescription":"Closed or merged PR \"Added Unity Contaienr project\" (#188)"},{"Id":"598969427","IsPullRequest":true,"CreatedAt":"2020-04-13T18:28:42","Actor":"nxtn","Number":"187","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/187","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#187)"},{"Id":"598601377","IsPullRequest":true,"CreatedAt":"2020-04-13T00:27:33","Actor":"dansiegel","Number":"186","RawContent":null,"Title":"update for Prism contacts / links","State":"closed","Body":"# Description\r\n\r\nVarious updates for out of date links, License reference and project contacts","Url":"https://github.com/dotnet-foundation/foundation/pull/186","RelatedDescription":"Closed or merged PR \"update for Prism contacts / links\" (#186)"},{"Id":"597960383","IsPullRequest":true,"CreatedAt":"2020-04-10T17:34:10","Actor":"nxtn","Number":"185","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/185","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#185)"},{"Id":"597382294","IsPullRequest":true,"CreatedAt":"2020-04-10T17:33:57","Actor":"nxtn","Number":"184","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/184","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#184)"},{"Id":"595976496","IsPullRequest":true,"CreatedAt":"2020-04-10T17:33:42","Actor":"nxtn","Number":"183","RawContent":null,"Title":"Fix broken links","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/183","RelatedDescription":"Closed or merged PR \"Fix broken links\" (#183)"},{"Id":"591106079","IsPullRequest":true,"CreatedAt":"2020-04-03T14:07:19","Actor":"MikeWilliams-UK","Number":"176","RawContent":null,"Title":"Update links and name","State":"closed","Body":"* Rename from V3.1 to 2020\r\n* Update links\r\n* Update logo","Url":"https://github.com/dotnet-foundation/foundation/pull/176","RelatedDescription":"Closed or merged PR \"Update links and name\" (#176)"},{"Id":"593397853","IsPullRequest":true,"CreatedAt":"2020-04-03T14:06:53","Actor":"galvesribeiro","Number":"181","RawContent":null,"Title":"Add Docker.DotNet","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/181","RelatedDescription":"Closed or merged PR \"Add Docker.DotNet\" (#181)"},{"Id":"592950571","IsPullRequest":true,"CreatedAt":"2020-04-02T22:57:48","Actor":"terrajobst","Number":"180","RawContent":null,"Title":"Link Code of Conduct","State":"closed","Body":"See [this policy rule](https://github.com/dotnet/org-policy/blob/master/doc/PR15.md) for more details.","Url":"https://github.com/dotnet-foundation/foundation/pull/180","RelatedDescription":"Closed or merged PR \"Link Code of Conduct\" (#180)"},{"Id":"591566329","IsPullRequest":true,"CreatedAt":"2020-04-01T20:28:35","Actor":"mzorec","Number":"179","RawContent":null,"Title":"Add FlubuCore","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/179","RelatedDescription":"Closed or merged PR \"Add FlubuCore\" (#179)"},{"Id":"587112642","IsPullRequest":true,"CreatedAt":"2020-04-01T14:37:46","Actor":"ChrisSfanos","Number":"171","RawContent":null,"Title":"Create new-projects-v2.md","State":"closed","Body":"First draft of the new project onboarding workflow guide\r\n\r\n@clairernovotny  - please take a look.  I still obviously need the legal wordsmith stuff from Brad, but wanted to get a first draft written.  When we finally sign off, we can change the .NET Foundation website to point to this vs Jon's original doc","Url":"https://github.com/dotnet-foundation/foundation/pull/171","RelatedDescription":"Closed or merged PR \"Create new-projects-v2.md\" (#171)"},{"Id":"591476617","IsPullRequest":true,"CreatedAt":"2020-03-31T23:59:05","Actor":"grokys","Number":"178","RawContent":null,"Title":"Add Avalonia","State":"closed","Body":"Added the Avalonia project.","Url":"https://github.com/dotnet-foundation/foundation/pull/178","RelatedDescription":"Closed or merged PR \"Add Avalonia\" (#178)"},{"Id":"591271059","IsPullRequest":true,"CreatedAt":"2020-03-31T17:18:16","Actor":"sbwalker","Number":"177","RawContent":null,"Title":"Add Oqtane to .NET Foundation","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/177","RelatedDescription":"Closed or merged PR \"Add Oqtane to .NET Foundation\" (#177)"},{"Id":"590650300","IsPullRequest":true,"CreatedAt":"2020-03-31T12:47:04","Actor":"tidyui","Number":"175","RawContent":null,"Title":"Added Piranha CMS","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/175","RelatedDescription":"Closed or merged PR \"Added Piranha CMS\" (#175)"},{"Id":"590486634","IsPullRequest":true,"CreatedAt":"2020-03-31T00:05:11","Actor":"dmetzgar","Number":"174","RawContent":null,"Title":"Add CoreWF to projects list","State":"closed","Body":"Fixes https://github.com/UiPath-Open/corewf/issues/95","Url":"https://github.com/dotnet-foundation/foundation/pull/174","RelatedDescription":"Closed or merged PR \"Add CoreWF to projects list\" (#174)"},{"Id":"589791715","IsPullRequest":true,"CreatedAt":"2020-03-29T13:39:43","Actor":"MarcoRossignoli","Number":"173","RawContent":null,"Title":"Add Coverlet project","State":"closed","Body":"Add Coverlet project\r\n\r\nIssue ref https://github.com/tonerdo/coverlet/issues/386\r\n\r\ncc: @tonerdo @petli","Url":"https://github.com/dotnet-foundation/foundation/pull/173","RelatedDescription":"Closed or merged PR \"Add Coverlet project\" (#173)"},{"Id":"589663157","IsPullRequest":true,"CreatedAt":"2020-03-29T13:28:54","Actor":"sfmskywalker","Number":"172","RawContent":null,"Title":"Added Elsa Workflows project","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/172","RelatedDescription":"Closed or merged PR \"Added Elsa Workflows project\" (#172)"},{"Id":"585731828","IsPullRequest":true,"CreatedAt":"2020-03-27T19:06:58","Actor":"deadlyvices","Number":"170","RawContent":null,"Title":"Update chem4word.md","State":"closed","Body":"Snappier intro","Url":"https://github.com/dotnet-foundation/foundation/pull/170","RelatedDescription":"Closed or merged PR \"Update chem4word.md\" (#170)"},{"Id":"579459510","IsPullRequest":true,"CreatedAt":"2020-03-27T19:06:41","Actor":"JeremySkinner","Number":"166","RawContent":null,"Title":"Adds FluentValidation to the project list","State":"closed","Body":"As per https://github.com/dotnet-foundation/projects/issues/27","Url":"https://github.com/dotnet-foundation/foundation/pull/166","RelatedDescription":"Closed or merged PR \"Adds FluentValidation to the project list\" (#166)"},{"Id":"580245857","IsPullRequest":true,"CreatedAt":"2020-03-20T19:07:33","Actor":"jogibear9988","Number":"167","RawContent":null,"Title":"linq2db","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/167","RelatedDescription":"Closed or merged PR \"linq2db\" (#167)"},{"Id":"583379863","IsPullRequest":true,"CreatedAt":"2020-03-20T15:29:59","Actor":"bruno-garcia","Number":"168","RawContent":null,"Title":"add NuGet Trends","State":"closed","Body":"Adding NuGet Trends.\r\n/cc @clairernovotny, @joaopgrassi","Url":"https://github.com/dotnet-foundation/foundation/pull/168","RelatedDescription":"Closed or merged PR \"add NuGet Trends\" (#168)"},{"Id":"583999953","IsPullRequest":true,"CreatedAt":"2020-03-18T21:16:17","Actor":"mairaw","Number":"169","RawContent":null,"Title":"update URLs","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/169","RelatedDescription":"Closed or merged PR \"update URLs\" (#169)"},{"Id":"578962559","IsPullRequest":true,"CreatedAt":"2020-03-11T02:10:52","Actor":"SteveSyfuhs","Number":"165","RawContent":null,"Title":"Added Kerberos.NET project","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/165","RelatedDescription":"Closed or merged PR \"Added Kerberos.NET project\" (#165)"},{"Id":"578255669","IsPullRequest":true,"CreatedAt":"2020-03-11T02:06:45","Actor":"SteveSyfuhs","Number":"163","RawContent":null,"Title":"Added Kerberos.NET project","State":"closed","Body":"","Url":"https://github.com/dotnet-foundation/foundation/pull/163","RelatedDescription":"Closed or merged PR \"Added Kerberos.NET project\" (#163)"},{"Id":"578822542","IsPullRequest":true,"CreatedAt":"2020-03-11T00:55:30","Actor":"oskardudycz","Number":"164","RawContent":null,"Title":"Add Marten to DNF","State":"closed","Body":"This PR is part of the Marten onboarding process (see, https://github.com/dotnet-foundation/projects/issues/47).\r\n\r\nThis PR adds the Marten md page and entry to the main listing.","Url":"https://github.com/dotnet-foundation/foundation/pull/164","RelatedDescription":"Closed or merged PR \"Add Marten to DNF\" (#164)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"876809936","IsPullRequest":true,"CreatedAt":"2021-05-05T20:30:56","Actor":"sdmaclea","Number":"28168","RawContent":null,"Title":"Release/3.1 crossdac v3.1.85","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28168","RelatedDescription":"Closed or merged PR \"Release/3.1 crossdac v3.1.85\" (#28168)"},{"Id":"861270124","IsPullRequest":true,"CreatedAt":"2021-05-05T20:11:36","Actor":"LakshanF","Number":"28161","RawContent":null,"Title":"[release/3.1] Port 6.0 fix to AssemblyDependencyResolver to not throw for same file","State":"closed","Body":"Runtime follow up fixes for .NET 3.1 - https://github.com/dotnet/runtime/pull/42055\r\n\r\n# Description\r\nThere is a problem with resolving multiple files with the same simple name (e.g. Module, module) in case insensitive OS like Windows for AssemblyDependencyResolver. Our internal storage for such cases throws that can cause problems for users who do not expect the error.\r\n\r\n# Customer Impact\r\n\r\nReported by customer who was migrating to .Net Core from the Desktop runtime.\r\n\r\nAfter migrating the mixed-mode C++/CLI application from targeting .NET Framework over to .NET Core 3.1, several obstacles have been encountered. One of them is an exception related to adding a duplicate key to a Dictionary in the AssemblyDependencyResolver. Alternatively, they might get an exception about the assembly having already been found with a different extension. Both of these problem point back to .NET Core having a mixture of case sensitivity and insensitivity.\r\n\r\n# Regression\r\n\r\nNo, it has always existed.\r\n\r\n# Testing\r\n\r\nAdded test scenarios. \r\n\r\nA customer who ran into this in 5.0 tried the 6.0 build and reported success.\r\n\r\n# Risk\r\n\r\nLow.\r\n\r\nAlthough getting casing correct with different OSs are notoriously hard, the resolution was to make AssemblyDependencyResolver consistent with other parts of the runtime by choosing the first simple file name and not throwing afterwards for same simple filename with different casing\r\n\r\nThe 6.0 issue is https://github.com/dotnet/runtime/issues/37162","Url":"https://github.com/dotnet/coreclr/pull/28161","RelatedDescription":"Closed or merged PR \"[release/3.1] Port 6.0 fix to AssemblyDependencyResolver to not throw for same file\" (#28161)"},{"Id":"866301037","IsPullRequest":true,"CreatedAt":"2021-05-05T17:25:43","Actor":"agocke","Number":"28163","RawContent":null,"Title":"[release/3.1] Fix Mac ICU errors by porting over dotnet/runtime#47346","State":"closed","Body":"Changes in System.Globalization.Native:\r\n  - Replace `TRUE` with `true` and `FALSE` with `false`\r\n  - Add `#include <stdbool.h>`","Url":"https://github.com/dotnet/coreclr/pull/28163","RelatedDescription":"Closed or merged PR \"[release/3.1] Fix Mac ICU errors by porting over dotnet/runtime#47346\" (#28163)"},{"Id":"861909603","IsPullRequest":true,"CreatedAt":"2021-05-05T17:25:28","Actor":"jkoritzinsky","Number":"28162","RawContent":null,"Title":"[release/3.1] Backport test build fix when a newer Windows SDK is installed.","State":"closed","Body":"Backport https://github.com/dotnet/runtime/pull/34513. This change enables people to build coreclr on a machine with the 10.0.19041.0 Windows SDK installed.\r\n\r\nThis is a test-only change, so this has no product risk.","Url":"https://github.com/dotnet/coreclr/pull/28162","RelatedDescription":"Closed or merged PR \"[release/3.1] Backport test build fix when a newer Windows SDK is installed.\" (#28162)"},{"Id":"875739905","IsPullRequest":true,"CreatedAt":"2021-05-05T17:23:50","Actor":"aik-jahoda","Number":"28167","RawContent":null,"Title":"Update branding to 3.1.16","State":"closed","Body":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open.","Url":"https://github.com/dotnet/coreclr/pull/28167","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.16\" (#28167)"},{"Id":"875618518","IsPullRequest":true,"CreatedAt":"2021-05-04T18:57:53","Actor":"aik-jahoda","Number":"28166","RawContent":null,"Title":"Update branding to 2.1.29","State":"closed","Body":"Prepare branch for 2.1.29 release. After merged the servising branch is considered open.","Url":"https://github.com/dotnet/coreclr/pull/28166","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.29\" (#28166)"},{"Id":"873051115","IsPullRequest":true,"CreatedAt":"2021-04-30T18:33:53","Actor":"sywhang","Number":"28165","RawContent":null,"Title":"[release/3.1] Fix deadlock in EventPipe session stop","State":"open","Body":"Fix https://github.com/dotnet/runtime/issues/51579.\r\n\r\nThe issue was fixed in 5.0 as part of another work https://github.com/dotnet/runtime/commit/c6d1756b69ee34cb96376fedc7a72b56975fd9ba and this fix ports the relevant portions of that commit onto 3.1. \r\n\r\nOriginally reported by Service Profiler team that saw this hang in production after running service profiler for ~3 weeks.\r\n\r\n### Customer Impact\r\nThis leads to a deadlock between the diagnostics server thread and any thread that was writing an event during a session stop. The diagnostics server thread will indefinitely hang and additional trace sessions cannot be started to the customers' app. It can also affect various profilers relying on EventPipe to not be able to start/stop sessions to a running process.\r\n\r\n### Regression?\r\nNo\r\n\r\n### Risk\r\nThe code change is fairly large but has been shipped with 5.0 for a while now and didn't get any reports of similar hang.\r\n\r\nThe fix was also validated with the service profiler team with a modified version of their profiler that would aggravate the probability of the issue happening and tested for roughly ~420 days of \"real\" service profiler session and saw no hang.","Url":"https://github.com/dotnet/coreclr/pull/28165","RelatedDescription":"Open PR \"[release/3.1] Fix deadlock in EventPipe session stop\" (#28165)"},{"Id":"870402220","IsPullRequest":true,"CreatedAt":"2021-04-28T21:36:00","Actor":"sdmaclea","Number":"28164","RawContent":null,"Title":"Add crossDacMergeLatestTag.sh and docs","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28164","RelatedDescription":"Open PR \"Add crossDacMergeLatestTag.sh and docs\" (#28164)"},{"Id":"848652145","IsPullRequest":true,"CreatedAt":"2021-04-22T21:13:43","Actor":"ivdiazsa","Number":"28156","RawContent":null,"Title":"Added test comment to trigger pipelines","State":"closed","Body":"This is just a dummy PR to test something out with the pipelines. It is not intended to be merged into the product.","Url":"https://github.com/dotnet/coreclr/pull/28156","RelatedDescription":"Closed or merged PR \"Added test comment to trigger pipelines\" (#28156)"},{"Id":"857256252","IsPullRequest":true,"CreatedAt":"2021-04-13T19:30:19","Actor":"aik-jahoda","Number":"28160","RawContent":null,"Title":"merge internals 2.1.27","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28160","RelatedDescription":"Closed or merged PR \"merge internals 2.1.27\" (#28160)"},{"Id":"857196995","IsPullRequest":true,"CreatedAt":"2021-04-13T17:57:37","Actor":"sdmaclea","Number":"28159","RawContent":null,"Title":"[release/3.1-crossdac] Merge 3.1.14","State":"closed","Body":"/cc @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/28159","RelatedDescription":"Closed or merged PR \"[release/3.1-crossdac] Merge 3.1.14\" (#28159)"},{"Id":"853604820","IsPullRequest":true,"CreatedAt":"2021-04-12T16:45:56","Actor":"aik-jahoda","Number":"28158","RawContent":null,"Title":"Update branding to 3.1.15","State":"closed","Body":"This version update was probably missed in previous release, hence now we increase by 2","Url":"https://github.com/dotnet/coreclr/pull/28158","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.15\" (#28158)"},{"Id":"853568674","IsPullRequest":true,"CreatedAt":"2021-04-09T09:41:35","Actor":"aik-jahoda","Number":"28157","RawContent":null,"Title":"Update branding to 2.1.28","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28157","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.28\" (#28157)"},{"Id":"810673698","IsPullRequest":true,"CreatedAt":"2021-03-12T20:15:56","Actor":"echesakovMSFT","Number":"28149","RawContent":null,"Title":"[release/3.1] Enable additional CI testing","State":"closed","Body":"Enable additional CI testing using new Helix queue Windows.10.Arm64v8.Open.\r\n\r\n\r\n### Customer Impact\r\nNone\r\n\r\n### Testing\r\nValidated the change by manually triggering two pipelines [coreclr-ci#20210217.2](https://dev.azure.com/dnceng/public/_build/results?buildId=999073) and [coreclr-outerloop#20210217.1](https://dev.azure.com/dnceng/public/_build/results?buildId=999284)\r\n\r\n### Risk\r\nNone - the change affects testing infrastructure only\r\n\r\n\r\ncc @BruceForstall @JulieLeeMSFT @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/28149","RelatedDescription":"Closed or merged PR \"[release/3.1] Enable additional CI testing\" (#28149)"},{"Id":"825432093","IsPullRequest":true,"CreatedAt":"2021-03-11T22:30:18","Actor":"kouvel","Number":"28153","RawContent":null,"Title":"[3.1] Use native code slot for default interface methods (#25770)","State":"closed","Body":"- Partial port of https://github.com/dotnet/coreclr/pull/25770 to 3.1 (only the main change, excludes unrelated cleanup)\r\n- Use native code slot for default interface methods so that `MethodDesc::GetNativeCode()` can retrieve the current native code entry point (instead of returning null as before), and code versioning can find a matching code version from the code start address\r\n- Interface methods currently require having a precode, so the \"method entry point\" can't be used to directly store the native code entry point\r\n- Reenabled a couple of default interface method tests under GCStress\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/25690\r\n\r\n### Customer impact\r\n\r\nMostly only affects some GCStress tests. The change can have harmless non-test effects, for example a default interface method may be jitted redundantly fewer times after the change (as expected), since before the change the call to `GetNativeCode()` here would always return null for a default interface method and the method may be jitted again unnecessarily.\r\nhttps://github.com/dotnet/coreclr/blob/867aa5e1141c8801796a80171a3749d944c6b9af/src/vm/codeversion.cpp#L2304-L2309\r\n\r\nOtherwise, the main purpose of the port is to fix some GCStress tests to make CI runs more reliable and useful for testing other fixes made to 3.1.\r\n\r\n### Testing\r\n\r\n@echesakovMSFT has verified that all related GCStress failures are fixed after the change on Windows arm64 where the issues were seen.\r\n\r\n### Risk\r\n\r\nLow:\r\n- The change has been in all of the 5.0 releases\r\n- The change makes tracking of the native code for default interface methods similar to other methods that have a precode and don't have a stable entry point, so the behavior would be more consistent with other types of methods\r\n- The native code slot for default interface methods is a pointer-size extra memory per such method, it wouldn't be significant as the number of such methods is typically low compared to other types of methods, and most other methods already use a native code slot","Url":"https://github.com/dotnet/coreclr/pull/28153","RelatedDescription":"Closed or merged PR \"[3.1] Use native code slot for default interface methods (#25770)\" (#28153)"},{"Id":"807495713","IsPullRequest":true,"CreatedAt":"2021-03-10T12:31:00","Actor":"briansull","Number":"28146","RawContent":null,"Title":"[release/3.1] Backport the fix for dotnet/runtime issue 46529","State":"closed","Body":"5.0.x version of this change: https://github.com/dotnet/runtime/pull/47741\r\n\r\n### Incorrect behavior a 64-bit long with shift of 32 or more combined with a cast to int \r\n\r\nThe JIT generates incorrect code for this code pattern:\r\n\r\n`(int) (X << C)`\r\n\r\nwhere C >= 32 and\r\nand  X is anything with a potential side-effect and is 64-bit integer type\r\n\r\n## Customer Impact\r\n\r\nReported by customer who was migrating to .Net Core from the Desktop runtime.\r\n\r\n## Regression?\r\n\r\nThis is a regression that was introduced in the .Net 3.X timeframe by \r\nhttps://github.com/dotnet/coreclr/pull/19899\r\n\r\n\r\n## Risk\r\n\r\nLow\r\n\r\nFixes issue #47724","Url":"https://github.com/dotnet/coreclr/pull/28146","RelatedDescription":"Closed or merged PR \"[release/3.1] Backport the fix for dotnet/runtime issue 46529\" (#28146)"},{"Id":"809951727","IsPullRequest":true,"CreatedAt":"2021-03-10T12:26:40","Actor":"davmason","Number":"28148","RawContent":null,"Title":"GCStress eventing fix","State":"closed","Body":"Port #26776 to 3.1. \r\n\r\nEventPipe had an issue where it would see a reentrant stackwalk during GCStress, which triggers asserts on checked or debug builds.\r\n\r\n## Customer Impact\r\nHaving tests fail under GCStress means we are less confident when preparing fixes for 3.1. We could alternatively disable these tests under GCStress, but that would mean less testing when doing GCStress runs.\r\n\r\n## Testing\r\nThis fix was in master for effectively all of the 5.0 release, and I verified that it fixes the failing eventing tests by running the tests manually.\r\n\r\n## Risk\r\nThe risk is low, this fix shipped in 5.0.","Url":"https://github.com/dotnet/coreclr/pull/28148","RelatedDescription":"Closed or merged PR \"GCStress eventing fix\" (#28148)"},{"Id":"810807167","IsPullRequest":true,"CreatedAt":"2021-03-10T12:23:17","Actor":"hoyosjs","Number":"28150","RawContent":null,"Title":"[release/3.1] Fix lazy machine state unwinding for MSVC epilogues on x86","State":"closed","Body":"# Description\r\n\r\nMSVC introduced changes into their prologue/epilogue helpers. Particularly `_EH_prolog3_catch_GS_align`/`_EH_epilog3_GS_align` had a `mov esp, ebx` instruction the lazy unwinding didn't handle. This helper ended up getting called by 3 FCalls in all coreclr: \r\n\r\n- `DebugDebugger::Log`\r\n- `StubHelpers::ValidateObjec`\r\n- `COMDelegate::BindToMethodName`\r\n\r\n# Customer Impact\r\n\r\nCustomers will see seeing seemingly random behavior once one of these stubs is hit. This manifests as GC holes where the stack walking caused the GC to not find stack roots, effectively unrooting object with references in the stack. A customer reported this from their use of `Debug.WriteLine` .\r\n\r\n# Regression?\r\n\r\nYes, with respect to previous releases. The regression was caused by a native toolset update in the build agents.\r\n\r\n# Testing\r\n\r\nA repro app that used to crash in under a second using GC stress ran successfully for 12+hrs with no issues. \r\n\r\n# Risk\r\n\r\nVery targeted fix, both @jkotas and I have stepped through the unwinder logic and it's as minimally invasive as possible while preserving correctness. ","Url":"https://github.com/dotnet/coreclr/pull/28150","RelatedDescription":"Closed or merged PR \"[release/3.1] Fix lazy machine state unwinding for MSVC epilogues on x86\" (#28150)"},{"Id":"826727031","IsPullRequest":true,"CreatedAt":"2021-03-09T23:05:45","Actor":"aik-jahoda","Number":"28155","RawContent":null,"Title":"merge 2.1.26 internal","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28155","RelatedDescription":"Closed or merged PR \"merge 2.1.26 internal\" (#28155)"},{"Id":"826473207","IsPullRequest":true,"CreatedAt":"2021-03-09T19:00:51","Actor":"sdmaclea","Number":"28154","RawContent":null,"Title":"Merge tag 'v3.1.13' into release/3.1-crossdac","State":"closed","Body":"FYI @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/28154","RelatedDescription":"Closed or merged PR \"Merge tag 'v3.1.13' into release/3.1-crossdac\" (#28154)"},{"Id":"816912779","IsPullRequest":true,"CreatedAt":"2021-02-26T16:57:01","Actor":"Anipik","Number":"28151","RawContent":null,"Title":"update branding to 3.1.14","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28151","RelatedDescription":"Closed or merged PR \"update branding to 3.1.14\" (#28151)"},{"Id":"816913038","IsPullRequest":true,"CreatedAt":"2021-02-26T16:56:56","Actor":"Anipik","Number":"28152","RawContent":null,"Title":"update branding to 2.1.27","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28152","RelatedDescription":"Closed or merged PR \"update branding to 2.1.27\" (#28152)"},{"Id":"807562133","IsPullRequest":true,"CreatedAt":"2021-02-12T21:35:26","Actor":"dotnet-maestro[bot]","Number":"28147","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 88e1281a-0536-412d-736c-08d72a4ce44a\r\n- **Build**: 20210311.1\r\n- **Date Produced**: 3/11/2021 9:50 AM\r\n- **Commit**: 9467b1074927ee3fe98d539d3b72f5686c861958\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21072.7 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 2.2.0-beta.21072.7 to 2.2.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: [from 1.0.0-beta.21072.7 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21072.7 to 2.0.0-beta.21161.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/620462d...9467b10\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/28147","RelatedDescription":"Open PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#28147)"},{"Id":"807393030","IsPullRequest":true,"CreatedAt":"2021-02-12T17:04:02","Actor":"dotnet-maestro[bot]","Number":"28145","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 88e1281a-0536-412d-736c-08d72a4ce44a\r\n- **Build**: 20210210.10\r\n- **Date Produced**: 2/10/2021 9:28 PM\r\n- **Commit**: 251249a04a9686ca2660e2acaa3094446a48f10d\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21072.7 to 1.0.0-beta.21110.10][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 2.2.0-beta.21072.7 to 2.2.0-beta.21110.10][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: [from 1.0.0-beta.21072.7 to 1.0.0-beta.21110.10][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21072.7 to 2.0.0-beta.21110.10][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/620462d...251249a\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/28145","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#28145)"},{"Id":"806751414","IsPullRequest":true,"CreatedAt":"2021-02-11T21:21:42","Actor":"mmitche","Number":"28144","RawContent":null,"Title":"Fixup feeds","State":"closed","Body":"Move to myget-legacy so that everything is dev.azure.com","Url":"https://github.com/dotnet/coreclr/pull/28144","RelatedDescription":"Closed or merged PR \"Fixup feeds\" (#28144)"},{"Id":"805787779","IsPullRequest":true,"CreatedAt":"2021-02-11T16:12:12","Actor":"jashook","Number":"28142","RawContent":null,"Title":"Fix build by applying patch from master","State":"closed","Body":"This applies https://github.com/dotnet/runtime/pull/41900 to release/3.1. So that unsuspecting travelers do not need to do so in the future :)","Url":"https://github.com/dotnet/coreclr/pull/28142","RelatedDescription":"Closed or merged PR \"Fix build by applying patch from master\" (#28142)"},{"Id":"806000764","IsPullRequest":true,"CreatedAt":"2021-02-11T01:02:13","Actor":"ivdiazsa","Number":"28143","RawContent":null,"Title":"Port from 5.0: Fix Position Independent Code in CMake files","State":"open","Body":"# Port Description\r\n\r\nThis is a direct port from PR #26323 in this same repo. This one was added during .NET Core 5.0 development but there is a customer need to also have it in the .NET Core 3.1 release.\r\n\r\nIn summary, the `-pie` linker option was missing and while the code was being compiled as Position Independent, the executables weren't, and therefore ASLR was not applied to them. This resulted in them being loaded to fixed addresses, which might potentially open vulnerabilities.\r\n\r\nThis port also automates the appliance of the `-fPIC/-fPIE` settings to all targets from a single centralized setting called `CMAKE_POSITION_INDEPENDENT_CODE`, which allows CMake to apply the appropriate compiler options without further need of manual specification.\r\n\r\n# Customer Impact\r\nHaving these flags enabled provides the built binaries with an additional layer of security, which has become a necessary requirement for some compliance checks, as well as safer applications overall. This port was requested by teams in Azure.\r\n\r\n# Regression\r\nThis was not a regression.\r\n\r\n# Testing\r\nThe [checksec](https://github.com/slimm609/checksec.sh) tool was used to verify the executables and shared objects had been indeed built with `PIE` and `Full RELRO` enabled.\r\n\r\n# Risk\r\nThe risk of this is pretty low, since it's been well tested in the current `main` branch, as well as .NET 5.0 releases.","Url":"https://github.com/dotnet/coreclr/pull/28143","RelatedDescription":"Open PR \"Port from 5.0: Fix Position Independent Code in CMake files\" (#28143)"},{"Id":"805746657","IsPullRequest":true,"CreatedAt":"2021-02-10T22:19:29","Actor":"dotnet-maestro[bot]","Number":"28141","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 88e1281a-0536-412d-736c-08d72a4ce44a\r\n- **Build**: 20210122.7\r\n- **Date Produced**: 1/22/2021 7:58 PM\r\n- **Commit**: 620462dd065490620c03a80cea8e251004f6bf21\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21063.4 to 1.0.0-beta.21072.7][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 2.2.0-beta.21063.4 to 2.2.0-beta.21072.7][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: [from 1.0.0-beta.21063.4 to 1.0.0-beta.21072.7][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21063.4 to 2.0.0-beta.21072.7][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/d01f08a...620462d\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/28141","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#28141)"},{"Id":"805736028","IsPullRequest":true,"CreatedAt":"2021-02-10T17:52:21","Actor":"sdmaclea","Number":"28140","RawContent":null,"Title":"Merge v3.1.12 to release/3.1-crossdac","State":"closed","Body":"/cc @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/28140","RelatedDescription":"Closed or merged PR \"Merge v3.1.12 to release/3.1-crossdac\" (#28140)"},{"Id":"805149381","IsPullRequest":true,"CreatedAt":"2021-02-10T04:19:13","Actor":"Anipik","Number":"28139","RawContent":null,"Title":"Add Merge History ","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/28139","RelatedDescription":"Closed or merged PR \"Add Merge History \" (#28139)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"875731125","IsPullRequest":true,"CreatedAt":"2021-05-04T23:50:03","Actor":"marcpopMSFT","Number":"13736","RawContent":null,"Title":"Update branding for 2.1.8xx 2.1.8xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13736","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.8xx 2.1.8xx\" (#13736)"},{"Id":"875729869","IsPullRequest":true,"CreatedAt":"2021-05-04T23:49:39","Actor":"marcpopMSFT","Number":"13733","RawContent":null,"Title":"Update branding for 2.1.5xx 2.1.5xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13733","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.5xx 2.1.5xx\" (#13733)"},{"Id":"875730715","IsPullRequest":true,"CreatedAt":"2021-05-04T23:43:40","Actor":"marcpopMSFT","Number":"13735","RawContent":null,"Title":"Update branding for 3.1.4xx 3.1.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13735","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.4xx 3.1.4xx\" (#13735)"},{"Id":"875731234","IsPullRequest":true,"CreatedAt":"2021-05-04T21:45:13","Actor":"marcpopMSFT","Number":"13737","RawContent":null,"Title":"Update branding for 3.1.1xx 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13737","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.1xx 3.1.1xx\" (#13737)"},{"Id":"875730303","IsPullRequest":true,"CreatedAt":"2021-05-04T18:40:02","Actor":"marcpopMSFT","Number":"13734","RawContent":null,"Title":"Update branding for 2.1.6xx 2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13734","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.6xx 2.1.6xx\" (#13734)"},{"Id":"857996869","IsPullRequest":true,"CreatedAt":"2021-04-15T14:59:28","Actor":"dotnet-maestro-bot","Number":"13732","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13732","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.6xx)\" (#13732)"},{"Id":"857996746","IsPullRequest":true,"CreatedAt":"2021-04-14T17:00:06","Actor":"dotnet-maestro-bot","Number":"13731","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13731","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.5xx)\" (#13731)"},{"Id":"857996321","IsPullRequest":true,"CreatedAt":"2021-04-14T16:59:58","Actor":"dotnet-maestro-bot","Number":"13730","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.8xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13730","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.8xx)\" (#13730)"},{"Id":"857208317","IsPullRequest":true,"CreatedAt":"2021-04-13T22:00:39","Actor":"marcpopMSFT","Number":"13729","RawContent":null,"Title":"Update branding for 3.1.4xx 3.1.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13729","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.4xx 3.1.4xx\" (#13729)"},{"Id":"857200263","IsPullRequest":true,"CreatedAt":"2021-04-13T22:00:27","Actor":"marcpopMSFT","Number":"13728","RawContent":null,"Title":"Update branding for 3.1.1xx 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13728","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.1xx 3.1.1xx\" (#13728)"},{"Id":"857176706","IsPullRequest":true,"CreatedAt":"2021-04-13T20:23:49","Actor":"dotnet-maestro[bot]","Number":"13726","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 15385bb3-00bd-44e3-5c73-08d72a4d3f20\r\n- **Build**: 20210311.1\r\n- **Date Produced**: 3/11/2021 9:50 AM\r\n- **Commit**: 9467b1074927ee3fe98d539d3b72f5686c861958\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/ab42d24...9467b10\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13726","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13726)"},{"Id":"857183229","IsPullRequest":true,"CreatedAt":"2021-04-13T18:42:16","Actor":"dotnet-maestro[bot]","Number":"13727","RawContent":null,"Title":"[release/3.1.4xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a036064-b3ed-4667-c908-08d7e6f11f14)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1a036064-b3ed-4667-c908-08d7e6f11f14\r\n- **Build**: 20210311.1\r\n- **Date Produced**: 3/11/2021 9:50 AM\r\n- **Commit**: 9467b1074927ee3fe98d539d3b72f5686c861958\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/ab42d24...9467b10\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:1a036064-b3ed-4667-c908-08d7e6f11f14)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13727","RelatedDescription":"Closed or merged PR \"[release/3.1.4xx] Update dependencies from dotnet/arcade\" (#13727)"},{"Id":"851588599","IsPullRequest":true,"CreatedAt":"2021-04-07T22:52:45","Actor":"marcpopMSFT","Number":"13722","RawContent":null,"Title":"Update branding for 2.1.5xx 2.1.5xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13722","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.5xx 2.1.5xx\" (#13722)"},{"Id":"851589292","IsPullRequest":true,"CreatedAt":"2021-04-07T22:52:35","Actor":"marcpopMSFT","Number":"13723","RawContent":null,"Title":"Update branding for 2.1.8xx 2.1.8xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13723","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.8xx 2.1.8xx\" (#13723)"},{"Id":"851590078","IsPullRequest":true,"CreatedAt":"2021-04-07T22:51:55","Actor":"marcpopMSFT","Number":"13724","RawContent":null,"Title":"Update branding for 3.1.4xx 3.1.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13724","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.4xx 3.1.4xx\" (#13724)"},{"Id":"851590590","IsPullRequest":true,"CreatedAt":"2021-04-07T22:36:37","Actor":"marcpopMSFT","Number":"13725","RawContent":null,"Title":"Update branding for 3.1.1xx 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13725","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.1xx 3.1.1xx\" (#13725)"},{"Id":"833347628","IsPullRequest":true,"CreatedAt":"2021-03-22T03:43:22","Actor":"cristianosuzuki77","Number":"13721","RawContent":null,"Title":"Loc update","State":"closed","Body":"Loc update.\r\nSome files are flagging BOM differences.","Url":"https://github.com/dotnet/cli/pull/13721","RelatedDescription":"Closed or merged PR \"Loc update\" (#13721)"},{"Id":"833200255","IsPullRequest":true,"CreatedAt":"2021-03-17T02:17:07","Actor":"cristianosuzuki77","Number":"13720","RawContent":null,"Title":"Loc update","State":"closed","Body":"Updates to 2.1.5xx\r\nSeveral files are being flagged with BOM changes only.  ","Url":"https://github.com/dotnet/cli/pull/13720","RelatedDescription":"Closed or merged PR \"Loc update\" (#13720)"},{"Id":"826949194","IsPullRequest":true,"CreatedAt":"2021-03-11T17:59:09","Actor":"dotnet-maestro-bot","Number":"13711","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.6xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13711","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.6xx)\" (#13711)"},{"Id":"826948297","IsPullRequest":true,"CreatedAt":"2021-03-11T17:58:16","Actor":"dotnet-maestro-bot","Number":"13709","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.8xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13709","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.8xx)\" (#13709)"},{"Id":"827414231","IsPullRequest":true,"CreatedAt":"2021-03-11T17:57:11","Actor":"v-wuzhai","Number":"13715","RawContent":null,"Title":"Merge internal changes for 3.1.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13715","RelatedDescription":"Closed or merged PR \"Merge internal changes for 3.1.4xx\" (#13715)"},{"Id":"827407323","IsPullRequest":true,"CreatedAt":"2021-03-11T17:57:05","Actor":"v-wuzhai","Number":"13714","RawContent":null,"Title":"Merge internal changes for 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13714","RelatedDescription":"Closed or merged PR \"Merge internal changes for 3.1.1xx\" (#13714)"},{"Id":"826948483","IsPullRequest":true,"CreatedAt":"2021-03-11T17:51:50","Actor":"dotnet-maestro-bot","Number":"13710","RawContent":null,"Title":"Update coresetup to preview1-26216-03 (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/13710","RelatedDescription":"Closed or merged PR \"Update coresetup to preview1-26216-03 (release/2.1.5xx)\" (#13710)"},{"Id":"828445958","IsPullRequest":true,"CreatedAt":"2021-03-11T17:24:02","Actor":"marcpopMSFT","Number":"13718","RawContent":null,"Title":"Update branding for 3.1.4xx 3.1.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13718","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.4xx 3.1.4xx\" (#13718)"},{"Id":"828454257","IsPullRequest":true,"CreatedAt":"2021-03-11T17:22:38","Actor":"marcpopMSFT","Number":"13719","RawContent":null,"Title":"Update branding for 3.1.1xx 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13719","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.1xx 3.1.1xx\" (#13719)"},{"Id":"828131264","IsPullRequest":true,"CreatedAt":"2021-03-11T03:06:36","Actor":"dotnet-maestro[bot]","Number":"13716","RawContent":null,"Title":"[release/3.1.4xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a036064-b3ed-4667-c908-08d7e6f11f14)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 1a036064-b3ed-4667-c908-08d7e6f11f14\r\n- **Build**: 20210308.9\r\n- **Date Produced**: 3/9/2021 12:40 AM\r\n- **Commit**: ab42d248928f65dd174a2383f3256e68d9379bb7\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251249a...ab42d24\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:1a036064-b3ed-4667-c908-08d7e6f11f14)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13716","RelatedDescription":"Closed or merged PR \"[release/3.1.4xx] Update dependencies from dotnet/arcade\" (#13716)"},{"Id":"828139685","IsPullRequest":true,"CreatedAt":"2021-03-10T18:56:14","Actor":"dotnet-maestro[bot]","Number":"13717","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 15385bb3-00bd-44e3-5c73-08d72a4d3f20\r\n- **Build**: 20210308.9\r\n- **Date Produced**: 3/9/2021 12:40 AM\r\n- **Commit**: ab42d248928f65dd174a2383f3256e68d9379bb7\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251249a...ab42d24\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13717","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13717)"},{"Id":"827365757","IsPullRequest":true,"CreatedAt":"2021-03-10T17:52:11","Actor":"v-wuzhai","Number":"13713","RawContent":null,"Title":"Merge internal changes for 2.1.8xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13713","RelatedDescription":"Closed or merged PR \"Merge internal changes for 2.1.8xx\" (#13713)"},{"Id":"827334955","IsPullRequest":true,"CreatedAt":"2021-03-10T17:52:08","Actor":"v-wuzhai","Number":"13712","RawContent":null,"Title":"Merge internal changes for 2.1.5xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13712","RelatedDescription":"Closed or merged PR \"Merge internal changes for 2.1.5xx\" (#13712)"},{"Id":"816725223","IsPullRequest":true,"CreatedAt":"2021-03-01T17:30:20","Actor":"marcpopMSFT","Number":"13708","RawContent":null,"Title":"Update branding for 3.1.1xx 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13708","RelatedDescription":"Closed or merged PR \"Update branding for 3.1.1xx 3.1.1xx\" (#13708)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"852541719","IsPullRequest":false,"CreatedAt":"2021-04-07T15:50:35","Actor":"vsfeedback","Number":"1788","RawContent":null,"Title":"Class ValueTask has different definitions between .Net Standard 2.1 and .Net 5","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Class-ValueTask-has-different-definition/1384249)._\n\n---\nClass ValueTask has different definitions between .Net Standard 2.1 and .Net 5: \nstatic property ValueTask.CompletedTask and static methods ValueTask.FromResult, ValueTask.FromCanceled and ValueTask.FromException are not available in .Net Standard 2.1.\n\nRegards,\nPaco.\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/29/2021, 10:45 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/standard/issues/1788","RelatedDescription":"Closed issue \"Class ValueTask has different definitions between .Net Standard 2.1 and .Net 5\" (#1788)"},{"Id":"841566004","IsPullRequest":false,"CreatedAt":"2021-03-26T03:55:14","Actor":"rexcfnghk","Number":"1787","RawContent":null,"Title":"Issue with resolving between .NET Standard 2.0 and .NET Standard 2.1","State":"open","Body":"# Summary\r\n\r\n.NET Standard version is not resolved correctly when a transitive dependency targets multiple .NET Standard versions.\r\n\r\n# Environment\r\n\r\n- Windows 10 (19042.746)\r\n- .NET 5 SDK 5.0.201\r\n\r\n# Minimal reproducible example\r\n[bug.zip](https://github.com/dotnet/standard/files/6209239/bug.zip)\r\n\r\nThis is a three-project solution:\r\n- `TestProject1` targeting `netcoreapp3.1`\r\n- `ClassProject1` targeting `netstandard2.0`\r\n- `ClassProject2` targeting *both* `netstandard2.0` and `netstandard2.1`\r\n\r\nThe project dependency chain is: `TestProject1 -> ClassProject1 -> ClassProject2`\r\n\r\nA method (`ClassProject2Test1`) on `ClassProject2` is hidden behind a `#if NETSTANDARD2_0` preprocessor directive.\r\n\r\n# The issue\r\n\r\nThe unit test failed with a `MissingMethodException`\r\n\r\n```\r\n[xUnit.net 00:00:00.38]     TestProject1.UnitTest1.Test1 [FAIL]\r\n  Failed TestProject1.UnitTest1.Test1 [2 ms]\r\n  Error Message:\r\n   System.MissingMethodException : Method not found: 'Void ClassLibrary2.Class2.Class2Test1()'.\r\n  Stack Trace:\r\n     at ClassLibrary1.Class1.Class1Test1()\r\n   at TestProject1.UnitTest1.Test1() in C:\\Users\\rex\\source\\netstandard-bug-repro\\TestProject1\\UnitTest1.cs:line 12\r\n```\r\n\r\n# Expected result\r\n\r\nThe compiler should have resolved the chain as:\r\n\r\n`TestProject1 (.NET Core 3.1) -> ClassProject1 (.NET Standard 2.0) -> *ClassProject2 (.NET Standard 2.0)*` \r\n\r\n# Actual result\r\n\r\nThe compiler resolved the chain as:\r\n\r\n`TestProject1 (.NET Core 3.1) -> ClassProject1 (.NET Standard 2.0) -> *ClassProject2 (.NET Standard 2.1)*` \r\n\r\nWhich causes the exception because the offending method, `ClassProject2Test1`, was hidden by the `#if NETSTANDARD2_0` preprocessor directive.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1787","RelatedDescription":"Open issue \"Issue with resolving between .NET Standard 2.0 and .NET Standard 2.1\" (#1787)"},{"Id":"773128444","IsPullRequest":false,"CreatedAt":"2020-12-22T17:42:11","Actor":"rathnagiri","Number":"1786","RawContent":null,"Title":"Security Vulnerability due to System.Text.RegularExpressions","State":"open","Body":"### Problem\r\nThere is a security vulnerability with the version of System.Text.RegularExpressions that is used by dotnet standard. The vulnerable version of System.Text.RegularExpressions is 4.3.0. Please see links below for the vulnerability documentation or discussion:\r\n\r\nhttps://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2019-0820\r\nhttps://github.com/dotnet/announcements/issues/111\r\nhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820\r\nhttps://snyk.io/vuln/SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708\r\nhttps://www.whitesourcesoftware.com/vulnerability-database/CVE-2019-0820\r\n\r\nThe dotnet commit that fixed the vulnerability is https://github.com/dotnet/corefx/commit/19d4b1163d8a03dd90ff5fd1785eea6305112545\r\n\r\n### Issue:\r\nWe use whitesource and it has caught this issue with high severity. We don't consume System.Text.RegularExpressions directly but packages that use this. Therefore as a transitive dependency due to NetStandard library, which is being used by several other dotnet packages like Castle Windsor, MassTransit etc., Once an update is available the others could followup and update.\r\n\r\n### Code:\r\n\r\n[The latest version 2.0.3 of Net standard ](https://www.nuget.org/packages/NETStandard.Library/) still seem to be using System.Text.RegularExpressions version 4.3.0 as per https://github.com/dotnet/standard/blob/master/src/apicompat/netstandard/netstandard.depproj\r\n\r\n### Fix\r\nPlease update[ library](https://www.nuget.org/packages/NETStandard.Library/) targeting .netStandard 1.6 to update System.Text.RegularExpression package to latest secured version 4.3.1 to fix the security issue or kindly suggest alternatives.\r\n","Url":"https://github.com/dotnet/standard/issues/1786","RelatedDescription":"Open issue \"Security Vulnerability due to System.Text.RegularExpressions\" (#1786)"},{"Id":"761600986","IsPullRequest":false,"CreatedAt":"2020-12-15T11:17:30","Actor":"tmds","Number":"1785","RawContent":null,"Title":"mono and .NET5+","State":"closed","Body":"hi @migueldeicaza @terrajobst \r\n\r\nWill there be a version of mono that supports `net5.0`?\r\nOr is mono skipping `net5.0`, and is it a goal to support `net6.0`?","Url":"https://github.com/dotnet/standard/issues/1785","RelatedDescription":"Closed issue \"mono and .NET5+\" (#1785)"},{"Id":"757516698","IsPullRequest":false,"CreatedAt":"2020-12-05T02:37:36","Actor":"Nilotaviano","Number":"1784","RawContent":null,"Title":"ChangeToken.OnChange consumer callback isn't being triggered on Ubuntu when used in conjunction with IConfiguration.GetReloadToken()","State":"open","Body":"The code below works perfectly on Windows, but doesn't work when deployed on Ubuntu 16.10. The `configuration` is initially loaded, but is never reloaded afterwards when `appsettings.json` is modified on Ubuntu (it works on Windows and I get to see the `App Settings reloaded` log message).\r\n\r\n```\r\nprivate static AppSettings GetAppSettings()\r\n{\r\n    var configuration = new ConfigurationBuilder()\r\n        .AddJsonFile(Path.Combine(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, \"..\", \"appsettings.json\"), optional: false, reloadOnChange: true)\r\n        .Build();\r\n\r\n    ChangeToken.OnChange(() => configuration.GetReloadToken(), () =>\r\n    {\r\n        Logger.LogMessage(\"App Settings reloaded\");\r\n    });\r\n\r\n    return appSettings;\r\n}\r\n```\r\n\r\n.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;ubuntu.16.10-x64</RuntimeIdentifiers>\r\n    <PublishTrimmed>true</PublishTrimmed>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNet.SignalR.Client\" Version=\"2.4.1\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"5.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"5.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"5.0.0\" />\r\n    <PackageReference Include=\"RestSharp\" Version=\"106.11.4\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nPublish profile:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--\r\nhttps://go.microsoft.com/fwlink/?LinkID=208121. \r\n-->\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <Configuration>Release</Configuration>\r\n    <Platform>Any CPU</Platform>\r\n    <PublishDir>bin\\Release\\netcoreapp3.1\\publish\\</PublishDir>\r\n    <PublishProtocol>FileSystem</PublishProtocol>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <RuntimeIdentifier>ubuntu.16.10-x64</RuntimeIdentifier>\r\n    <SelfContained>true</SelfContained>\r\n    <PublishSingleFile>True</PublishSingleFile>\r\n    <PublishTrimmed>True</PublishTrimmed>\r\n  </PropertyGroup>\r\n</Project>\r\n```","Url":"https://github.com/dotnet/standard/issues/1784","RelatedDescription":"Open issue \"ChangeToken.OnChange consumer callback isn't being triggered on Ubuntu when used in conjunction with IConfiguration.GetReloadToken()\" (#1784)"},{"Id":"751999481","IsPullRequest":false,"CreatedAt":"2020-11-27T05:51:08","Actor":"Meenakshise","Number":"1783","RawContent":null,"Title":"Value Tuple Could not load file or assembly 'System.ValueTuple, Version=4.0.1.0, ","State":"open","Body":"[tuple-not-loading-log.txt](https://github.com/dotnet/standard/files/5606091/tuple-not-loading-log.txt)\r\n\r\nI have  web project which is targeted to 4.6.2 .net framework. This project is calling a framework library which is targeted to the same .net framework 4.6.2. But in the framework library project it is referencing the system.valuetuple of 4.3.0 via the nuget package. \r\n  <package id=\"System.ValueTuple\" version=\"4.3.0\" targetFramework=\"net461\" />\r\n\r\nThis valuetuple 4.3.0 targets .net standard 1.0 and .net framework 4.5. But our UI project is targeting 4.6.2. And we are getting this valuetuple not able to load. Could you please tell me why so ? \r\n\r\nSo if i am referencing a library that targets .net standard and .net framework of which the referencing project doesnt target to . How does the dll assemblies work here ? Really confused. Please help us\r\n\r\nBasically I am getting this error. The detailed log is attached in tuple-not-loading file. \r\n_message: \"ReflectionTypeLoadException: Could not load file or assembly 'System.ValueTuple, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\"\r\n\r\n VS 2017 IDE is used to build the project ","Url":"https://github.com/dotnet/standard/issues/1783","RelatedDescription":"Open issue \"Value Tuple Could not load file or assembly 'System.ValueTuple, Version=4.0.1.0, \" (#1783)"},{"Id":"748223490","IsPullRequest":false,"CreatedAt":"2020-11-22T11:34:20","Actor":"kyurkchyan","Number":"1782","RawContent":null,"Title":"[BUG] [UWP] GetManifestResourceInfo doesn't work on UWP","State":"open","Body":"# Summary\r\nI was trying to access Embedded resources on UWP. Something like this\r\n\r\n```C#\r\nmanifestResourceInfo = typeof(App).Assembly.GetManifestResourceInfo(\"UwpEmbeddedResourceBug.appsettings.json\");\r\n```\r\nHowever, this doesn't work on UWP, even though it works like a charm on iOS for instance. \r\nFurther, when you try to use this in UWP debug mode, it will return non-null `manifestResourceInfo`, however internally the `FileName` property will be null. But if you try to use the same on Release build, instead you will get an exception\r\n\r\n```\r\nSystem.PlatformNotSupportedException: Operation is not supported on this platform.\r\n   at System.Func`1.BeginInvoke(AsyncCallback, Object) + 0x1f\r\n   at SharedLibrary!<BaseAddress>+0x9f17d7\r\n   at UwpEmbeddedResourceBug.MainPage..ctor() + 0x3e\r\n```\r\n## Sample project\r\n[UwpEmbeddedResourceBug.zip](https://github.com/dotnet/standard/files/5579379/UwpEmbeddedResourceBug.zip)\r\n\r\n## Version info\r\n``` \r\nMicrosoft Visual Studio Community 2019\r\nVersion 16.8.1\r\nVisualStudio.16.Release/16.8.1+30711.63\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA497\r\nMicrosoft Visual C++ 2019\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nASA Service Provider   1.0\r\n\r\nASP.NET and Web Tools 2019   16.8.550.19892\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Core Razor Language Services   16.1.0.2052803+84e121f1403378489b842e1797df2f3f5a49ac3c\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.8.550.19892\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.8.550.19892\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.6.1000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   16.8.550.19892\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.6.1000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   3.8.0-5.20519.18+4c195c3ac1974edcefa76774d7a59a2350ec55fa\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.2.6 (master@34d6af2)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nJetBrains ReSharper 2020.2.4   Build 202.0.20200925.65451\r\nJetBrains ReSharper package for Microsoft Visual Studio. For more information about ReSharper, visit http://www.jetbrains.com/resharper. Copyright © 2020 JetBrains, Inc.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.6.1000.0\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.6.1000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   16.0\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.6.1000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2019 - v2.9.30924.1\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   2.1.113+g422d40002e.RR\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   16.8.43 (00471f8)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   5.8.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.62010.06180\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   16.0.21016.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.8.0-5.20519.18+4c195c3ac1974edcefa76774d7a59a2350ec55fa\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   16.8.0-beta.20507.4+da6be68280c89131cdba2045525b80890401defd\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Container Tools Extensions   1.0\r\nView, manage, and diagnose containers within Visual Studio.\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Kubernetes   1.0\r\nVisual Studio Tools for Kubernetes\r\n\r\nVisualStudio.DeviceLog   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Foo   1.0\r\nInformation about my package\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   16.8.000.255 (d16-8@d002176)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   16.8.0.507 (remotes/origin/d16-8@e87b24884)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   16.8.112 (86385a3)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   11.1.0.17 (d16-8/c0e2b8e)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: be2226b\r\n    Java.Interop: xamarin/java.interop/d16-8@79d9533\r\n    ProGuard: Guardsquare/proguard/proguard6.2.2@ebe9000\r\n    SQLite: xamarin/sqlite/3.32.1@1a3276b\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-8@2fb1cbc\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   14.4.1.3 (e30c41de3)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```","Url":"https://github.com/dotnet/standard/issues/1782","RelatedDescription":"Open issue \"[BUG] [UWP] GetManifestResourceInfo doesn't work on UWP\" (#1782)"},{"Id":"741918893","IsPullRequest":false,"CreatedAt":"2020-11-16T21:03:55","Actor":"viralmodi","Number":"1780","RawContent":null,"Title":"How to build .NET Standard based library for ARM architecture","State":"closed","Body":"We currently own a .NET Standard based library. We would like to make it work on ARM platform as well. Is there some documentation which can help understand how to go about achieving that?\r\nI searched up on MSFT docs and found a few pages but it is not clear to me all the steps needed to achieve the above based on those docs. Any help is appreciated. I would like to know ways to compile cross platform, using IDEs like Visual Studio/Rider, code/metadata modifications required to project (.csproj) files and anywhere else to achieve this?","Url":"https://github.com/dotnet/standard/issues/1780","RelatedDescription":"Closed issue \"How to build .NET Standard based library for ARM architecture\" (#1780)"},{"Id":"743421464","IsPullRequest":false,"CreatedAt":"2020-11-16T02:36:27","Actor":"ishepherd","Number":"1781","RawContent":null,"Title":"Update docs to reflect the status of .NET Standard in 2020","State":"open","Body":"My understanding is, .NET Standard isn't the plan for standard .NET anymore. [The plan is now .NET 5.](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/)\r\n\r\nThat isn't at all clear from the docs here which seem to be frozen in time. Suggest you make some slight edits to [faq.md](https://github.com/dotnet/standard/blob/master/docs/faq.md) and [README.md](https://github.com/dotnet/standard/blob/master/README.md) to reflect the new status of .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1781","RelatedDescription":"Open issue \"Update docs to reflect the status of .NET Standard in 2020\" (#1781)"},{"Id":"741314211","IsPullRequest":false,"CreatedAt":"2020-11-12T06:18:45","Actor":"amitagrawalhyd","Number":"1779","RawContent":null,"Title":"Support with Universal Windows Platform","State":"open","Body":".Net Standard 2.1 is not supporting Universal Windows Platform and when we see the following doc \"https://docs.microsoft.com/en-us/dotnet/standard/net-standard\" it is showing TBD, need your help on finalizing few things for our project, by when we can see support with UWP and which version of UWP will be supported. Early response will be helpful.","Url":"https://github.com/dotnet/standard/issues/1779","RelatedDescription":"Open issue \"Support with Universal Windows Platform\" (#1779)"},{"Id":"736344890","IsPullRequest":false,"CreatedAt":"2020-11-04T18:49:53","Actor":"vsfeedback","Number":"1778","RawContent":null,"Title":"System.Drawing.Printing.PrinterSettings slow","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/SystemDrawingPrintingPrinterSettings-/890524)._\n\n---\nHello\n\nI'm debugging a problem with the printer settings. Some calls are significant slower if the default printer is a network printer, even if I explicit set a local printer name.\n\nAfter studying referencesource I think I found the culprit.\n\nI call:\n\nvar printerSettings = new System.Drawing.Printing.PrinterSettings();\n\nprinterSettings.PrinterName = &quot;LOCALPRINTER&quot;;\n\n// the next call is slow if the OS default printer is a network printer\nvar res = printerSettings.DefaultPageSettings.PrinterResolution\n\nInternally FastDeviceCapabilities is called.\n\nFastDeviceCapabilities calls GetOutputPort. But GetOutput port return the port of the default printer and not the port of the given printer!\n\nIn addition, DeviceCapabilities is then called with a wrong combination of printer name and port, don't know if this could lead to additional problems.\n\nResolution: GetOutputPort should return the port of the given printer and not accessing the default printer at all.\n\nBest Regards,\nRaphael\n\n---\n### Original Comments\n\n#### Raphael Affolter on 1/20/2020, 04:03 AM: \n\n<p>I forgot to mention: .Net Framework 4.6.1</p>\n\n#### Feedback Bot on 1/20/2020, 06:51 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Raphael Affolter on 2/7/2020, 08:39 AM: \n\n<p>Because we print a lot, we really suffer from this performance penalty.</p><p>Also reading PaperSizes and PaperSources from the printer settings is slow caused by the same problem.</p><p>Could you please inform me about a possible fix?</p><p>Best Regards,</p><p>Raphael</p>\n\n#### Raphael Affolter on 2/7/2020, 10:33 AM: \n\n<p>In my opinion the fix is easy: replace GetOutputPort by OutputPort in the call to </p><p>FastDeviceCapabilities.</p><p>Done.</p>\n\n#### Feedback Bot on 2/27/2020, 05:40 PM: \n\nI have detected that for the last 35 days, this issue didn't have much product team activity and a very small amount of new votes or comments. Based on this, its severity, and affected area, it’s my experience that this issue is very unlikely to be fixed.\n#### Dada Huo [MSFT] on 10/20/2020, 01:57 AM: \n\n<p>Thank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from <a target='_blank' href=\"https://visualstudio.microsoft.com/downloads\">https://visualstudio.microsoft.com/downloads</a> ?</p>\n<p>If so, in order for us to investigate further, please provide more information by recording your repro steps via the Visual Studio Feedback Tool (Help -&gt; Send Feedback -&gt; Report A Problem). The feedback tool will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace). Since this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool– <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019#when-further-information-is-needed\">full instructions</a><br>\nIn our <a target='_blank' href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\">guidelines</a> , you can get tips on how to provide clear and simple reproducible steps.</p>\n<p>Get performance issues fixed quicker, please see <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019\">https://docs.microsoft.com/en-us/visualstudio/ide/how-to-increase-chances-of-performance-issue-being-fixed?view=vs-2019</a>.</p>\n<p>We look forward to hearing from you!</p>\n\n#### Raphael Affolter on 10/20/2020, 02:28 AM: \n\n<p>Thanks for answering.</p><p>The issue is not about Visual Studio, the problem is in the .Net Framework (at least 4.6.1).</p><p>By studying the source code on referencesource.microsoft.com I spotted calls to the default printer, even if I print on another printer. If the default printer is a network printer, this slows down the printing process significantly.</p><p>Please have a look if you can fix this in the .Net Framework(s).</p><p>PrinterResolution, PaperSizes and PaperSources of System.Drawing.Printing.PrinterSettings are affected.</p><p>I also mentioned a fix: replace GetOutputPort by OutputPort in the call to FastDeviceCapabilities...done.</p><p>I you need a repro project, I can provide one.</p>\n\n\n---\n### Original Solutions\n\n#### Raphael Affolter solved on 3/19/2020, 07:18 AM, 0 votes: \n\n<p>I would be helpful if at least somebody reacts on this issue. I even told you how to fix the problem...</p>\n","Url":"https://github.com/dotnet/standard/issues/1778","RelatedDescription":"Closed issue \"System.Drawing.Printing.PrinterSettings slow\" (#1778)"},{"Id":"727588709","IsPullRequest":false,"CreatedAt":"2020-10-22T17:34:59","Actor":"Joe-Sewell-PreEmptive","Number":"1777","RawContent":null,"Title":"Questions about tagging within this repository / future versions","State":"open","Body":"I was looking through this repository to determine if .NET Standard 2.1 libraries support default interface methods - it looks like they do, given the presence of `System.Runtime.CompilerServices.RuntimeFeature.DefaultImplementationsOfInterfaces`, as well as my own experimenting in VS 2019. It seems I was mistaken when thinking that this was not the case, so I'm glad this repository is easily accessible to determine this.\r\n\r\nBut while doing this, I found it difficult to determine what commits were included in this particular .NET Standard version. I see that there's a tag `v2.1.0-prerelease.19126.1`, as well as branches `release/2.0.0`, `release/3.0`, and `release/3.0-preview9`. One of the machines I tested VS 2019 on had a `netstandard.dll` assembly, itself targeting .NETStandard v2.1.0, with AssemblyInformationalVersion `1.1.0+a5b5f2e1e369972c8ff1e2183979fab6099f52ef`; this commit is part of the `release/3.0` branch. However, another machine had a same-named assembly, targeting .NETCoreApp v3.0 and AssemblyInformationalVersion `3.0.0+4ac4c0367003fe3973a3648eb0715ddb0e3bbcea`, and I don't see that commit hash in this repository.\r\n\r\nAdditionally, [this blog post](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/) states that 2.1 will be the last version, but there is another prerelease tag `v2.2.0-prerelease.19564.1` and [on GitHub](https://github.com/dotnet/standard/releases/tag/v2.2.0-prerelease.19564.1) it's labelled .NET 5.0 Preview 2.\r\n\r\nSo I have a few questions for understanding this repository:\r\n\r\n1. Since .NET Standard 2.1 is released, are there plans to continue development in this repository for e.g. the shared BCL going forward with .NET 5+?\r\n2. Are there multiple kinds of `netstandard.dll` for a single .NET Standard version? E.g. are there separate versions for .NET Framework to reference and for .NET Core / .NET 5+ to reference?\r\n3. Do the tags / branch names in this repository correspond to a .NET Standard version or something else?\r\n4. It looks like there are patch releases; are there patch versions of a single .NET Standard version?\r\n5. Are there other repositories which are being used to create `netstandard.dll`?\r\n6. Is there a way to determine, from the repository, which commit is the one used for a given release?\r\n\r\nThank you for your consideration.","Url":"https://github.com/dotnet/standard/issues/1777","RelatedDescription":"Open issue \"Questions about tagging within this repository / future versions\" (#1777)"},{"Id":"722134943","IsPullRequest":false,"CreatedAt":"2020-10-16T08:15:08","Actor":"AksTheNerd","Number":"1776","RawContent":null,"Title":"Build issues when referencing project that targets multiple frameworks C# WPF","State":"closed","Body":"I'm working on converting a large WPF solution's projects to SDK style and ran into some issues.\r\n\r\nThe solution is large with multiple projects(old style) all targeting .net452 and some nugets(some made by me) installed, targeting both .net452 and .netstandard2.1 This all seems to work fine, somehow the nuget manages to install the correct version targeting .net452.\r\n\r\nI have decided to slowly convert the projects inside the solution to SDK style targeting .net452 and .netstandard2.1 just like the nugets.\r\n\r\nThis is where the problem starts, one project was converted so far that is referenced by multiple other projects. Localy everything seems to build and run fine, however when Azure DevOps(VS version 2019) is used to build the solution there are 2 scenarios:\r\n\r\n1. The famous error message is shown:\r\n\r\n                \"Error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly \r\n                 'netstandard, Version=2.1.0.0\"\r\n\r\n2. It builds fine but on app launch it crashes with:\r\n\r\n                 \"Could not load file or assembly 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' \r\n                 or one of its dependencies. The system cannot find the file specified.\"\r\n\r\nI'm suspecting that the problem is related to referencing the SDK project, it looks like that somehow it references the .netstandard2.1 instead of the .net452.\r\n\r\nThe reason this is my suspicion is that if targetframework is set to only .net452 on the referenced project everything works fine. Google has led me to two possible solutions to tell the project what framework to use from the reference:\r\n\r\n```\r\n<ProjectReference Include=\"..\\..\\..\\..\\foo\\foo.csproj\"\r\n                  AdditionalProperties=\"TargetFramework=net452\">\r\n      <Project>{xxxxxx-xxxxxx-xxxxx-xxxxx-xxxxxxx}</Project>\r\n      <Name>foo</Name>\r\n</ProjectReference>\r\n```\r\nand\r\n\r\n```\r\n<ProjectReference Include=\"..\\..\\..\\..\\foo\\foo.csproj\">\r\n      <SetTargetFramework>TargetFramework=net452</SetTargetFramework>\r\n      <Project>{xxxxxx-xxxxxx-xxxxx-xxxxx-xxxxxxx}</Project>\r\n      <<Name>foo</Name>\r\n</ProjectReference>\r\n```\r\nThis doesn't look like it's doing anything and the problem still persists. At the moment I ran out of ideas and I'm here asking for help. Please let me know what I'm doing wrong or what else I can try.","Url":"https://github.com/dotnet/standard/issues/1776","RelatedDescription":"Closed issue \"Build issues when referencing project that targets multiple frameworks C# WPF\" (#1776)"},{"Id":"705166145","IsPullRequest":false,"CreatedAt":"2020-09-20T19:05:41","Actor":"Korporal","Number":"1775","RawContent":null,"Title":"Confusing behavior when using AssemblyInfo.cs ","State":"open","Body":"I'm completely perplexed.\r\n\r\nI created a .Net Standard 2.0 library project.\r\n\r\nI explicity added an AssemblyInfo.cs file, we need this because we use this utility to \"stamp\" our assemblies when we build them:\r\n\r\nhttps://github.com/ygoe/NetRevisionTool\r\n\r\nThat utility is run as a pre/post build event and temporarily replaces placeholders in the AssemblyInformationalVersion attribute with runtime values (like repo folder name, commit ID, branch etc etc).\r\n\r\nThe completed assembly then has this info \"burned\" into it as we go forward.\r\n\r\n.Net Standard is not working with this.\r\n\r\n1. It seems to populatethe Package Version (in the project's Package section) with whatever we put into AssemblyInfo.cs for AssemblyInformationalVersion.\r\n2. The version of the generated nuget package is always set as 1.0.0.\r\n\r\nThis is just mind blowing, is there no way we can do this seemingly simple operation any more if adopt .Net Standard?\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1775","RelatedDescription":"Open issue \"Confusing behavior when using AssemblyInfo.cs \" (#1775)"},{"Id":"702426498","IsPullRequest":false,"CreatedAt":"2020-09-16T06:07:11","Actor":"bvenhaus","Number":"1774","RawContent":null,"Title":"[UWP] HttpClientHandler - Digest Authentication Broken on Windows 10 PC","State":"closed","Body":"Just recently I found that my UWP app can no longer connect with Digest authentication on Windows 10 PCs. I'm seeing the same issue this individual posted the other day on the Microsoft Docs website.\r\nhttps://docs.microsoft.com/en-us/answers/questions/93105/httpclienthandler-does-not-work-for-authentication.html\r\n\r\nThe same code works fine on my Android, iOS, & Windows 10 Mobile devices. To take it a step further, the exact same UWP appxbundle that works on my Windows 10 Mobile Phone, does not work on my Windows 10 PC.\r\n\r\nThis is specific to only the UWP HttpClientHandler. On my Windows 10 PC, the HttpClientHandler in .NET Framework 4.8 still works fine.\r\n\r\nLike I said, this is a new issue. The System.Net.Http.HttpClientHandler on UWP definitely did support Digest up until about a week ago.\r\n\r\nMy appxbundle was built with Target version 10.0.17134, Min version 10.0.15063.\r\n\r\nI also tested with the latest & the problem still persists; Target version 10.0.18362, Min version 10.0.18362.\r\n\r\nDOES NOT WORK\r\n-------------------\r\nUWP on Windows 10 Pro 2004 19041.508\r\n\r\nWORKS\r\n--------\r\nUWP on Windows 10 Mobile 1709 10.0.15254.556\r\n.NET Framework 4.8 on Windows 10 Pro 2004 19041.508\r\nAndroid\r\niOS\r\n\r\n\r\nHere's the return response I get:\r\n\r\n{StatusCode: 401, ReasonPhrase: 'Unauthorized', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\r\n{\r\n  Server: lighttpd/1.4.35\r\n  Date: Wed, 16 Sep 2020 03:38:24 GMT\r\n  WWW-Authenticate: Digest realm=\"iPolis_00:16:6C:7A:A3:80\", nonce=\"e2f7fe3344e6b521c2b83c56aa48fc17\", qop=\"auth\"\r\n  Content-Length: 351\r\n  Content-Type: text/html\r\n}}\r\n","Url":"https://github.com/dotnet/standard/issues/1774","RelatedDescription":"Closed issue \"[UWP] HttpClientHandler - Digest Authentication Broken on Windows 10 PC\" (#1774)"},{"Id":"690833525","IsPullRequest":false,"CreatedAt":"2020-09-02T08:39:21","Actor":"kongnhin","Number":"1773","RawContent":null,"Title":"DispatchOperation.ParameterInspectors is not available in netstandard2.0","State":"open","Body":"I created a class that implement from IOperationBehavior, in the method ApplyDispatchBehavior I cannot use dispatchOperation.ParameterInspectors, it's telling that this collection is not available in netstandard2.0.\r\nI have no idea about this, can someone advice me? If there are no solution for this, I think I need to downgrade to use .net framework instead.\r\n![image](https://user-images.githubusercontent.com/10347829/91959103-6660f780-ed32-11ea-9a7e-15a5482e7b71.png)\r\n","Url":"https://github.com/dotnet/standard/issues/1773","RelatedDescription":"Open issue \"DispatchOperation.ParameterInspectors is not available in netstandard2.0\" (#1773)"},{"Id":"637700672","IsPullRequest":true,"CreatedAt":"2020-08-23T14:50:16","Actor":"dotnet-maestro[bot]","Number":"1766","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 13e4918d-b9bd-4474-29f1-08d6225f093d\r\n- **Build**: 20200819.21\r\n- **Date Produced**: 8/19/2020 11:31 PM\r\n- **Commit**: 56a95cc477558c1ccdf16d7abe962849ea970ba4\r\n- **Branch**: refs/heads/master\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n  - **Microsoft.DotNet.CodeAnalysis**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n  - **Microsoft.DotNet.GenAPI**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n  - **Microsoft.DotNet.ApiCompat**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20419.21\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1766","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1766)"},{"Id":"676597548","IsPullRequest":false,"CreatedAt":"2020-08-11T16:13:40","Actor":"snakorse","Number":"1772","RawContent":null,"Title":"Facade lib 'System.Runtime.dll' in .Net Framework 4.7.2 do not forward ICloneable type to mscorelib","State":"closed","Body":"I can't find the TypeForward definition for ICloneable in the facade lib System.Runtime.dll, does this is missing and should add it, or not include for some particular reason?","Url":"https://github.com/dotnet/standard/issues/1772","RelatedDescription":"Closed issue \"Facade lib 'System.Runtime.dll' in .Net Framework 4.7.2 do not forward ICloneable type to mscorelib\" (#1772)"},{"Id":"674703614","IsPullRequest":false,"CreatedAt":"2020-08-07T02:04:45","Actor":"gregpakes","Number":"1771","RawContent":null,"Title":"Referencing netstandard 2.0 from WebSITE targeting .Net 4.8","State":"open","Body":"I am having an issue referencing packages that target .NetStandard 2.0 from my webSITE (not application) project which targets .Net 4.8.\r\n\r\nI see the following error:\r\n\r\n\r\n> warning MSB3268: The primary reference \"D:\\a\\1\\s\\iSAMS.Web.Controls\\bin\\Release\\net48\\iSAMS.Web.Controls.dll\" could not be resolved because it has an indirect dependency on the framework assembly \"netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" which could not be resolved in the currently targeted framework. \".NETFramework,Version=v4.8\". To resolve this problem, either remove the reference \"D:\\a\\1\\s\\iSAMS.Web.Controls\\bin\\Release\\net48\\iSAMS.Web.Controls.dll\" or retarget your application to a framework version which contains \"netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\".\r\n\r\n\r\nI have already added an assembly reference to the web.config as follows but it doesn't work:\r\n\r\n```\r\n<assemblies>\r\n          <add assembly=\"netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" />\r\n....\r\n```\r\n\r\nWhat am I doing wrong?\r\n","Url":"https://github.com/dotnet/standard/issues/1771","RelatedDescription":"Open issue \"Referencing netstandard 2.0 from WebSITE targeting .Net 4.8\" (#1771)"},{"Id":"659921624","IsPullRequest":false,"CreatedAt":"2020-07-18T05:12:47","Actor":"alexkeh","Number":"1769","RawContent":null,"Title":"Add the TCP KeepAlive APIs to .NET Standard","State":"open","Body":"These 3 options are not in .netstandard 2.1 right now, do you have a plan to add them into netstandard?\r\n- TcpKeepAliveInterval\r\n- TcpKeepAliveRetryCount\r\n- TcpKeepAliveCount\r\n\r\n_Originally posted by @kerryjiang in https://github.com/dotnet/runtime/issues/24041#issuecomment-554154891_","Url":"https://github.com/dotnet/standard/issues/1769","RelatedDescription":"Open issue \"Add the TCP KeepAlive APIs to .NET Standard\" (#1769)"},{"Id":"638861635","IsPullRequest":false,"CreatedAt":"2020-06-15T13:38:04","Actor":"Pentadome","Number":"1768","RawContent":null,"Title":"AllowNullAttribute missing for EqualityComparer<T>.Equals","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1768","RelatedDescription":"Open issue \"AllowNullAttribute missing for EqualityComparer<T>.Equals\" (#1768)"},{"Id":"638622538","IsPullRequest":false,"CreatedAt":"2020-06-15T07:45:29","Actor":"Pentadome","Number":"1767","RawContent":null,"Title":"Nullable attributes have XML comments in .net core, but are missing in .Net standard 2.1","State":"open","Body":"See title ;)","Url":"https://github.com/dotnet/standard/issues/1767","RelatedDescription":"Open issue \"Nullable attributes have XML comments in .net core, but are missing in .Net standard 2.1\" (#1767)"},{"Id":"606261411","IsPullRequest":true,"CreatedAt":"2020-06-11T22:33:07","Actor":"dotnet-maestro[bot]","Number":"1759","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 13e4918d-b9bd-4474-29f1-08d6225f093d\r\n- **Build**: 20200609.1\r\n- **Date Produced**: 6/9/2020 8:21 PM\r\n- **Commit**: 54d096ee50a9bcf7ac6efd16a07d51af651d20a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.CodeAnalysis**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.GenAPI**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n  - **Microsoft.DotNet.GenFacades**: from 5.0.0-beta.20201.2 to 5.0.0-beta.20309.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1759","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1759)"},{"Id":"624353567","IsPullRequest":false,"CreatedAt":"2020-05-25T15:03:53","Actor":"JavierMendozaPaitan","Number":"1765","RawContent":null,"Title":"Problem with system.servicemodel.netnamedpipebinding class, coud not load that type ","State":"open","Body":"Hi,\r\n\r\nI wrapped a net framework lib with net standard but i got the error: Could not load type 'System.ServiceModel.NetNamedPipeBinding' from assembly 'System.ServiceModel, Version=4.0.0.0\r\n\r\nI suppose the system.servicemodel.primitive package doesn't implement this type. How to wrap and old lib which could include its old system.servicemodel lib ?","Url":"https://github.com/dotnet/standard/issues/1765","RelatedDescription":"Open issue \"Problem with system.servicemodel.netnamedpipebinding class, coud not load that type \" (#1765)"},{"Id":"623678460","IsPullRequest":false,"CreatedAt":"2020-05-23T15:04:16","Actor":"ryandanthony","Number":"1764","RawContent":null,"Title":"Any plans to support NativeLibrary in dotnet standard?","State":"open","Body":"Are there any plans, or is it even possible, to support NativeLibrary in dotnet standard?\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.nativelibrary?view=netcore-3.1\r\n\r\nI have a dotnet standard 2.1 library that needs to load a c++ library, but we want to support multiple versions of the library (linux and windows).\r\n\r\nExample usage: \r\n```C#\r\nstatic class NativeMethods\r\n{\r\n\tprivate const string LibraryName = \"something\";\r\n\tstatic NativeMethods()\r\n\t{\r\n\t\tNativeLibrary.SetDllImportResolver(typeof(NativeMethods).Assembly, ImportResolver);\r\n\t}\r\n\tprivate static IntPtr ImportResolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath)\r\n\t{\r\n\t\tIntPtr libHandle = IntPtr.Zero;\r\n\t\tif (libraryName == NativeMethods.LibraryName)\r\n\t\t{\r\n\t\t\tstring library;\r\n\t\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\r\n\t\t\t{\r\n\t\t\t\tlibrary = \"libsomething_c.so\";\t\r\n\t\t\t} \r\n\t\t\telse if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))\r\n\t\t\t{\r\n\t\t\t\tlibrary = \"libsomething_c.dylib\";\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlibrary = \"libsomething_c.dll\";\r\n\t\t\t}\r\n\t\t\tvar libraryLoaded = NativeLibrary.TryLoad(library, assembly, DllImportSearchPath.AssemblyDirectory, out libHandle);\r\n\t\t\tif (!libraryLoaded)\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception($\"Unable to Load Library: {library}\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn libHandle;\r\n\t}\r\n```\r\n\r\nAlternatively, is there another way to load a cross platform C++ code in a dotnet standard?\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1764","RelatedDescription":"Open issue \"Any plans to support NativeLibrary in dotnet standard?\" (#1764)"},{"Id":"622924911","IsPullRequest":false,"CreatedAt":"2020-05-22T03:32:32","Actor":"gzak","Number":"1763","RawContent":null,"Title":".NET Zero-copy API","State":"open","Body":"Add support for a [zero-copy API](https://en.wikipedia.org/wiki/Zero-copy), akin to java.nio.channels.FileChannel's transferTo() method.\r\n\r\n# General\r\n\r\nIt would be great if .NET had a built-in way of doing zero-copy steam transfers, especially for large blobs (like files). Most operating systems appear to support this, so it's just a matter of exposing some API to do this in .NET. By adding it to .NET standard, both .NET Core and .NET Framework can both benefit from this API.","Url":"https://github.com/dotnet/standard/issues/1763","RelatedDescription":"Open issue \".NET Zero-copy API\" (#1763)"},{"Id":"611498622","IsPullRequest":true,"CreatedAt":"2020-05-22T00:09:24","Actor":"leotsarev","Number":"1761","RawContent":null,"Title":"Oren → Claire","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1761","RelatedDescription":"Closed or merged PR \"Oren → Claire\" (#1761)"},{"Id":"616300562","IsPullRequest":false,"CreatedAt":"2020-05-12T05:03:05","Actor":"anuj272","Number":"1762","RawContent":null,"Title":"compilation error in converting .net framework to .net standard dll","State":"closed","Body":"We converted class library from .net framework to .net standard 2.0\r\nProject A conosle app in .net framework 4.6.2 starts complaining. which uses the above library.\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0433\tThe type 'XmlElementAttribute' exists in both 'System.Xml.XmlSerializer, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0433\tThe type 'ConcurrentDictionary<TKey, TValue>' exists in both 'System.Collections.Concurrent, Version=4.0.13.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0433\tThe type 'ConfigurationManager' exists in both 'System.Configuration.ConfigurationManager, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n\r\n\r\nI tried adding nuget of Microsoft.Windows.Compatibility to console app but it doesn't help.\r\nconsole app had reference to both System.Configuration.dll and system.configuration.configurationManager nuget.\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1762","RelatedDescription":"Closed issue \"compilation error in converting .net framework to .net standard dll\" (#1762)"},{"Id":"608746802","IsPullRequest":false,"CreatedAt":"2020-04-29T03:12:02","Actor":"viralmodi","Number":"1760","RawContent":null,"Title":"How to do file/folder access control when targeting .NET Standard 2.0?","State":"open","Body":"As per https://github.com/dotnet/standard/issues/15. there are not file/folder access control APIs supported in .NET standard 2.0. If I have a product/tool targeting .NET Standard 2.0 (need cross platform support), what is the best way to enable use of file access control APIs?\r\n\r\nDoes this work - https://www.nuget.org/packages/System.IO.FileSystem.AccessControl/? or do you have any other suggestion?","Url":"https://github.com/dotnet/standard/issues/1760","RelatedDescription":"Open issue \"How to do file/folder access control when targeting .NET Standard 2.0?\" (#1760)"},{"Id":"604545860","IsPullRequest":false,"CreatedAt":"2020-04-22T07:44:27","Actor":"msedi","Number":"1758","RawContent":null,"Title":"MethodImplOptions.AggressiveOptimization is nmot available in .NET Standard 2.1","State":"open","Body":"Most of our components are developed in .NET Standard 2.0. With the advent of .NET Core 3.0 MethodImplOptions.AggressiveOptimization was introduced. So we have decided to swithc to .NET Standard 2.1 and were assuming the AggressiveOptimization is available too, but it isn't. \r\n\r\n1. Is there any reason why this is so?\r\n2. What would be the impact if it's not available?\r\n3. Is there a workaround to use it?","Url":"https://github.com/dotnet/standard/issues/1758","RelatedDescription":"Open issue \"MethodImplOptions.AggressiveOptimization is nmot available in .NET Standard 2.1\" (#1758)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"871291656","IsPullRequest":true,"CreatedAt":"2021-05-05T17:23:23","Actor":"danmoseley","Number":"43071","RawContent":null,"Title":"Port regex timeout fix (test only change)","State":"closed","Body":"Port https://github.com/dotnet/runtime/pull/47209 which causes a hang on Linux.","Url":"https://github.com/dotnet/corefx/pull/43071","RelatedDescription":"Closed or merged PR \"Port regex timeout fix (test only change)\" (#43071)"},{"Id":"862973622","IsPullRequest":true,"CreatedAt":"2021-05-05T17:22:59","Actor":"omajid","Number":"43068","RawContent":null,"Title":"[release/3.1] Add CentOS 9 RID and make CentOS 8 arm64 as well","State":"closed","Body":"# Port Description\r\n\r\nThis is the only part of https://github.com/dotnet/runtime/pull/34088 that wasn't already backported to release/3.1.\r\n\r\nhttps://www.redhat.com/en/blog/faq-centos-stream-updates says:\r\n\r\n> There will not be a CentOS Linux 9.\r\n>\r\n> CentOS Stream 9 will launch in Q2 2021 as part of the RHEL 9 development process.\r\n\r\nThat's my motivation: I want to be able to build .NET Core 3.1 for RHEL 9\r\n\r\nThe last part also means that the current parent-child relationship that we use for RHEL->CentOS in our RID graph will flip starting in 9. I dont see any immediate impact, so I think we can leave it alone for now.\r\n\r\nI got a (currently internal) build of CentOS Stream 9 and `/etc/os-release` looks like this:\r\n\r\n    $ cat /etc/os-release\r\n    NAME=\"CentOS Stream\"\r\n    VERSION=\"9\"\r\n    ID=\"centos\"\r\n    ID_LIKE=\"rhel fedora\"\r\n    VERSION_ID=\"9\"\r\n    PLATFORM_ID=\"platform:el9\"\r\n    PRETTY_NAME=\"CentOS Stream 9\"\r\n    ANSI_COLOR=\"0;31\"\r\n    CPE_NAME=\"cpe:/o:centos:centos:9\"\r\n    HOME_URL=\"https://centos.org/\"\r\n    BUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\r\n    REDHAT_SUPPORT_PRODUCT=\"Red Hat Enterprise Linux 9\"\r\n    REDHAT_SUPPORT_PRODUCT_VERSION=\"CentOS Stream\"\r\n\r\nI have been told that builds of CentOS Stream 9 should become public soon. I don't know exactly when, though.\r\n\r\n# Customer Impact\r\n\r\nThis (kind of) blocks Red Hat from building .NET Core 3.1 on RHEL 9: we can apply this patch locally, but it's probably better for everyone if it's here upstream too.\r\n\r\n# Regression\r\n\r\nThis is not a regression.\r\n\r\n# Testing\r\n\r\nI have tested that this RID update fixes the build issue for me.\r\n\r\n# Risk\r\n\r\nThe risk of this is pretty low: it's just adding RIDs.","Url":"https://github.com/dotnet/corefx/pull/43068","RelatedDescription":"Closed or merged PR \"[release/3.1] Add CentOS 9 RID and make CentOS 8 arm64 as well\" (#43068)"},{"Id":"875764639","IsPullRequest":true,"CreatedAt":"2021-05-04T23:52:10","Actor":"aik-jahoda","Number":"43073","RawContent":null,"Title":"Update branding to 3.1.16","State":"closed","Body":"Prepare branch for 3.1.16 release. After merge, the servising branch is considered open.","Url":"https://github.com/dotnet/corefx/pull/43073","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.16\" (#43073)"},{"Id":"875762905","IsPullRequest":true,"CreatedAt":"2021-05-04T23:49:13","Actor":"aik-jahoda","Number":"43072","RawContent":null,"Title":"Update branding to 2.1.29","State":"closed","Body":"Prepare branch for 2.1.29 release. After merge, the servising branch is considered open.","Url":"https://github.com/dotnet/corefx/pull/43072","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.29\" (#43072)"},{"Id":"868248673","IsPullRequest":true,"CreatedAt":"2021-04-26T22:25:07","Actor":"cheenamalhotra","Number":"43070","RawContent":null,"Title":"[Release/3.1] Fix race condition issues between SinglePhaseCommit and TransactionEnded events","State":"open","Body":"Ports [dotnet/sqlclient#1042](https://github.com/dotnet/SqlClient/pull/1042) to fix below issue in System.Data.SqlClient:\r\n- [dotnet/sqlclient#729](https://github.com/dotnet/SqlClient/issues/729) System.Data.SqlClient 4.8.2 throws TransactionAbortedException (the connection has been broken)\r\n- Premier customer support: [Devdiv Ticket 1245724 ](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1245724 )\r\n\r\n### Summary\r\nA race condition exists between \"Single Phase Commit\" and \"Transaction Ended\" as both are triggered externally by delegated SqlTransaction. With new changes to doom connection in \"Transaction Ended\" Event (https://github.com/dotnet/corefx/pull/42937), \"Commit\" started failing intermittently leading to this issue. Dooming connection is essential to prevent connection re-use that leads to security issues, so that PR is valid and important.\r\n\r\nBut as a consequence, \"Commit\"'s inconsistent locking leads to this problem. Locking is essential in this part of code, but in \"Single Phase Commit\" implementation, late and split locking causes issues between Commit and Abort event handling, leading to intermittent \"Transaction Aborted Exception\".\r\n\r\nThis change in lock scope fixes the issue. It wasn't easily reproducible in Microsoft.Data.SqlClient but happens very often with System.Data.SqlClient 4.8.2 due to slow performance. Making test-case more rigorous and forcing latency while debugging aided in reproducing this issue.\r\n\r\n### Customer Impact\r\n❗ **Critical**: Premier customer application is impacted due to this issue _(followed via Emails)_.\r\n### Regression?\r\n**Yes**: Issue started occurring since System.Data.SqlClient v4.8.2 (PR #42937)\r\n\r\n### Testing\r\nIt's not possible to add test case for this behavior since it's a race condition scenario and is greatly influenced by MS DTC that manages delegated transaction completion.\r\n\r\n### Risk\r\n**Low**: This PR does not introduce any critical design changes, but only makes changes in lock scope.\r\nIssue has been verified by customers as well as with the repro apps available in issue [#729](https://github.com/dotnet/SqlClient/issues/729)\r\n\r\n\r\ncc: @danmoseley @saurabh500 @David-Engel \r\n","Url":"https://github.com/dotnet/corefx/pull/43070","RelatedDescription":"Open PR \"[Release/3.1] Fix race condition issues between SinglePhaseCommit and TransactionEnded events\" (#43070)"},{"Id":"868239289","IsPullRequest":true,"CreatedAt":"2021-04-26T22:06:22","Actor":"cheenamalhotra","Number":"43069","RawContent":null,"Title":"[Release/3.1] Fix wrong data blended with transactions in .NET Core","State":"open","Body":"Ports dotnet/sqlclient#1023 to fix a critical issue that also exists in System.Data.SqlClient:\r\n- Fixes [#980](https://github.com/dotnet/SqlClient/issues/980) SqlDataReader returns stale data\r\n\r\n### Summary\r\nWhen working with delegated transactions, completing a transaction with open resultset leads to data corruption in the connection instance that's sent back to connection pool. Because connection pooling is enabled by default, it results in the pooled connection to contain stale data from old transaction.\r\n\r\nThis issue was identified in Microsoft.Data.SqlClient but was also traced back to System.Data.SqlClient oldest version in .NET Core.\r\n\r\n### Customer Impact\r\n❗ **Critical**: This issue causes data corruption and leads to customers reading data from old query.\r\n\r\n### Regression?\r\n**No**: The issue exists since [System.Data.SqlClient v4.5.0-preview1](https://www.nuget.org/packages/System.Data.SqlClient/4.5.0-preview1-26216-02).\r\nIt was an error that occurred during port activity of System.Data.SqlClient Transaction support from .NET Framework.\r\n\r\n### Testing\r\nTest has been added to cover the wrong data flow.\r\n\r\n### Risk\r\n**Low**: Fix matches the implementation with System.Data.SqlClient (in .NET Framework) and has been verified by various members of the community. It has also been released in [Microsoft.Data.SqlClient v3.0.0-preview2](https://www.nuget.org/packages/Microsoft.Data.SqlClient/3.0.0-preview2.21106.5).\r\n\r\ncc: @danmoseley @saurabh500 @David-Engel \r\n","Url":"https://github.com/dotnet/corefx/pull/43069","RelatedDescription":"Open PR \"[Release/3.1] Fix wrong data blended with transactions in .NET Core\" (#43069)"},{"Id":"858002095","IsPullRequest":true,"CreatedAt":"2021-04-14T17:00:20","Actor":"dotnet-maestro-bot","Number":"43067","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-29916-01, servicing-29916-03, servicing-29916-01, respectively (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/43067","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-29916-01, servicing-29916-03, servicing-29916-01, respectively (release/2.1)\" (#43067)"},{"Id":"857244559","IsPullRequest":true,"CreatedAt":"2021-04-13T20:32:03","Actor":"aik-jahoda","Number":"43066","RawContent":null,"Title":"merge of 3.1.15 internals","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43066","RelatedDescription":"Closed or merged PR \"merge of 3.1.15 internals\" (#43066)"},{"Id":"857178181","IsPullRequest":true,"CreatedAt":"2021-04-13T20:27:28","Actor":"dotnet-maestro[bot]","Number":"43065","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7\r\n- **Build**: 20210311.1\r\n- **Date Produced**: 3/11/2021 9:50 AM\r\n- **Commit**: 9467b1074927ee3fe98d539d3b72f5686c861958\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 2.4.1-beta.21158.9 to 2.4.1-beta.21161.1][1]\r\n  - **Microsoft.DotNet.XUnitConsoleRunner**: [from 2.5.1-beta.21158.9 to 2.5.1-beta.21161.1][1]\r\n  - **Microsoft.DotNet.VersionTools.Tasks**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 2.2.0-beta.21158.9 to 2.2.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.CoreFxTesting**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21158.9 to 2.0.0-beta.21161.1][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 1.0.0-beta.21158.9 to 1.0.0-beta.21161.1][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/ab42d24...9467b10\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/43065","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#43065)"},{"Id":"853614733","IsPullRequest":true,"CreatedAt":"2021-04-09T14:17:57","Actor":"aik-jahoda","Number":"43064","RawContent":null,"Title":"Update branding to 3.1.15","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43064","RelatedDescription":"Closed or merged PR \"Update branding to 3.1.15\" (#43064)"},{"Id":"853573709","IsPullRequest":true,"CreatedAt":"2021-04-09T14:17:21","Actor":"aik-jahoda","Number":"43063","RawContent":null,"Title":"Update branding to 2.1.28","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43063","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.28\" (#43063)"},{"Id":"842265456","IsPullRequest":true,"CreatedAt":"2021-03-26T20:51:09","Actor":"wtgodbe","Number":"43062","RawContent":null,"Title":"Add suppressions for the hashes flagged by credscan","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43062","RelatedDescription":"Closed or merged PR \"Add suppressions for the hashes flagged by credscan\" (#43062)"},{"Id":"842150155","IsPullRequest":true,"CreatedAt":"2021-03-26T18:35:36","Actor":"aik-jahoda","Number":"43060","RawContent":null,"Title":"[3.1] Add suppression for test key data","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43060","RelatedDescription":"Closed or merged PR \"[3.1] Add suppression for test key data\" (#43060)"},{"Id":"842154105","IsPullRequest":true,"CreatedAt":"2021-03-26T18:35:12","Actor":"aik-jahoda","Number":"43061","RawContent":null,"Title":"[2.1] Add suppression for test key data","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43061","RelatedDescription":"Closed or merged PR \"[2.1] Add suppression for test key data\" (#43061)"},{"Id":"841885861","IsPullRequest":true,"CreatedAt":"2021-03-26T13:32:37","Actor":"aik-jahoda","Number":"43059","RawContent":null,"Title":"Last fix for credentials effort","State":"closed","Body":"This fix is the last change to make the repo clean.","Url":"https://github.com/dotnet/corefx/pull/43059","RelatedDescription":"Closed or merged PR \"Last fix for credentials effort\" (#43059)"},{"Id":"835999758","IsPullRequest":true,"CreatedAt":"2021-03-26T12:52:26","Actor":"aik-jahoda","Number":"43055","RawContent":null,"Title":"[2.1] Credscan followup","State":"closed","Body":"Follow up for #43052","Url":"https://github.com/dotnet/corefx/pull/43055","RelatedDescription":"Closed or merged PR \"[2.1] Credscan followup\" (#43055)"},{"Id":"834889784","IsPullRequest":true,"CreatedAt":"2021-03-26T02:04:07","Actor":"aik-jahoda","Number":"43054","RawContent":null,"Title":"[3.1] Credscan followup","State":"closed","Body":"Adds suppression messages.","Url":"https://github.com/dotnet/corefx/pull/43054","RelatedDescription":"Closed or merged PR \"[3.1] Credscan followup\" (#43054)"},{"Id":"836538475","IsPullRequest":true,"CreatedAt":"2021-03-26T02:03:58","Actor":"danmoseley","Number":"43057","RawContent":null,"Title":"[3.1] Some overlooked credscan fixes","State":"closed","Body":"@aik-jahoda this is needed in 2.1, 5.0 and main as well.\r\n\r\nI'll let CI run this test..","Url":"https://github.com/dotnet/corefx/pull/43057","RelatedDescription":"Closed or merged PR \"[3.1] Some overlooked credscan fixes\" (#43057)"},{"Id":"840928239","IsPullRequest":true,"CreatedAt":"2021-03-26T02:03:28","Actor":"aik-jahoda","Number":"43058","RawContent":null,"Title":"[2.1] Some overlooked credscan fixes","State":"closed","Body":"port of #43057","Url":"https://github.com/dotnet/corefx/pull/43058","RelatedDescription":"Closed or merged PR \"[2.1] Some overlooked credscan fixes\" (#43058)"},{"Id":"830054013","IsPullRequest":true,"CreatedAt":"2021-03-19T22:15:32","Actor":"aik-jahoda","Number":"43051","RawContent":null,"Title":"[3.1] Credscan second round","State":"closed","Body":"Second round of Credscan effort\r\n\r\nFirst we need merge https://github.com/dotnet/runtime-assets/pull/124","Url":"https://github.com/dotnet/corefx/pull/43051","RelatedDescription":"Closed or merged PR \"[3.1] Credscan second round\" (#43051)"},{"Id":"830295710","IsPullRequest":true,"CreatedAt":"2021-03-19T21:46:11","Actor":"aik-jahoda","Number":"43052","RawContent":null,"Title":"[2.1] Credscan second round","State":"closed","Body":"Second round of Credscan effort\r\n\r\nFirst we need merge dotnet/runtime-assets#124","Url":"https://github.com/dotnet/corefx/pull/43052","RelatedDescription":"Closed or merged PR \"[2.1] Credscan second round\" (#43052)"},{"Id":"836160516","IsPullRequest":true,"CreatedAt":"2021-03-19T17:35:20","Actor":"filipnavara","Number":"43056","RawContent":null,"Title":"Add Xamarin placeholders for System.Memory package","State":"closed","Body":"Ref: https://github.com/dotnet/runtime/issues/49211\r\n\r\nNot really sure how to proceed with servicing OOB package from an ancient branch like this (cc @ViktorHofer).","Url":"https://github.com/dotnet/corefx/pull/43056","RelatedDescription":"Closed or merged PR \"Add Xamarin placeholders for System.Memory package\" (#43056)"},{"Id":"830536217","IsPullRequest":true,"CreatedAt":"2021-03-12T23:01:49","Actor":"safern","Number":"43053","RawContent":null,"Title":"Bring back rhel6 build without testing","State":"closed","Body":"In: https://github.com/dotnet/corefx/pull/43039 we removed rhel6 from the builds because the test pool doesn't exist anymore. However core-setup builds are failing because we dropped support from rhel6 RID by not producing the runtime package for rhel6 for the private corefx package. Bring them back until we decide if we will support the RID or not in the upcoming servicing releases.\r\n","Url":"https://github.com/dotnet/corefx/pull/43053","RelatedDescription":"Closed or merged PR \"Bring back rhel6 build without testing\" (#43053)"},{"Id":"828142927","IsPullRequest":true,"CreatedAt":"2021-03-10T22:42:42","Actor":"dotnet-maestro[bot]","Number":"43050","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7\r\n- **Build**: 20210308.9\r\n- **Date Produced**: 3/9/2021 12:40 AM\r\n- **Commit**: ab42d248928f65dd174a2383f3256e68d9379bb7\r\n- **Branch**: refs/heads/release/3.x\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 2.4.1-beta.21110.10 to 2.4.1-beta.21158.9][1]\r\n  - **Microsoft.DotNet.XUnitConsoleRunner**: [from 2.5.1-beta.21110.10 to 2.5.1-beta.21158.9][1]\r\n  - **Microsoft.DotNet.VersionTools.Tasks**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.ApiCompat**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Feed**: [from 2.2.0-beta.21110.10 to 2.2.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.CodeAnalysis**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.CoreFxTesting**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.GenAPI**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.GenFacades**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 2.0.0-beta.21110.10 to 2.0.0-beta.21158.9][1]\r\n  - **Microsoft.DotNet.RemoteExecutor**: [from 1.0.0-beta.21110.10 to 1.0.0-beta.21158.9][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/251249a...ab42d24\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/43050","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#43050)"},{"Id":"826952682","IsPullRequest":true,"CreatedAt":"2021-03-10T19:43:13","Actor":"dotnet-maestro-bot","Number":"43049","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-29812-02, servicing-29812-01, servicing-29812-01, respectively (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/43049","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to servicing-29812-02, servicing-29812-01, servicing-29812-01, respectively (release/2.1)\" (#43049)"},{"Id":"826795467","IsPullRequest":true,"CreatedAt":"2021-03-10T17:17:13","Actor":"Anipik","Number":"43048","RawContent":null,"Title":"remove non-used harvesting feed","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43048","RelatedDescription":"Closed or merged PR \"remove non-used harvesting feed\" (#43048)"},{"Id":"821983607","IsPullRequest":true,"CreatedAt":"2021-03-10T09:16:43","Actor":"aik-jahoda","Number":"43045","RawContent":null,"Title":"Credentials fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43045","RelatedDescription":"Closed or merged PR \"Credentials fixes\" (#43045)"},{"Id":"821968003","IsPullRequest":true,"CreatedAt":"2021-03-10T09:14:20","Actor":"aik-jahoda","Number":"43044","RawContent":null,"Title":"Credentials fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43044","RelatedDescription":"Closed or merged PR \"Credentials fixes\" (#43044)"},{"Id":"826762826","IsPullRequest":true,"CreatedAt":"2021-03-09T23:06:51","Actor":"aik-jahoda","Number":"43047","RawContent":null,"Title":"Merge 3.1.13 internal","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43047","RelatedDescription":"Closed or merged PR \"Merge 3.1.13 internal\" (#43047)"},{"Id":"826727979","IsPullRequest":true,"CreatedAt":"2021-03-09T23:06:20","Actor":"aik-jahoda","Number":"43046","RawContent":null,"Title":"merge 2.1.26 internal","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/43046","RelatedDescription":"Closed or merged PR \"merge 2.1.26 internal\" (#43046)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"877026751","IsPullRequest":true,"CreatedAt":"2021-05-06T04:27:56","Actor":"dotnet-bot","Number":"53212","RawContent":null,"Title":"Merge release/dev16.11 to release/dev16.11-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.11 into release/dev16.11-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-to-release/dev16.11-vs-deps\ngit reset --hard upstream/release/dev16.11-vs-deps\ngit merge upstream/release/dev16.11\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-to-release/dev16.11-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53212","RelatedDescription":"Closed or merged PR \"Merge release/dev16.11 to release/dev16.11-vs-deps\" (#53212)"},{"Id":"877026501","IsPullRequest":true,"CreatedAt":"2021-05-06T04:27:53","Actor":"dotnet-bot","Number":"53209","RawContent":null,"Title":"Merge release/dev16.11 to main","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.11 into main.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11\n- https://github.com/dotnet/roslyn/find/main\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-to-main\ngit reset --hard upstream/main\ngit merge upstream/release/dev16.11\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-to-main --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53209","RelatedDescription":"Closed or merged PR \"Merge release/dev16.11 to main\" (#53209)"},{"Id":"877026573","IsPullRequest":true,"CreatedAt":"2021-05-06T04:23:53","Actor":"dotnet-bot","Number":"53210","RawContent":null,"Title":"Merge release/dev16.10-vs-deps to release/dev16.11-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.10-vs-deps into release/dev16.11-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.10-vs-deps\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.10-vs-deps-to-release/dev16.11-vs-deps\ngit reset --hard upstream/release/dev16.11-vs-deps\ngit merge upstream/release/dev16.10-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.10-vs-deps-to-release/dev16.11-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53210","RelatedDescription":"Closed or merged PR \"Merge release/dev16.10-vs-deps to release/dev16.11-vs-deps\" (#53210)"},{"Id":"877053731","IsPullRequest":false,"CreatedAt":"2021-05-06T04:10:15","Actor":"LyalinDotCom","Number":"53216","RawContent":null,"Title":"WPF app fails to Hot Reload after a change in a method with odd \"does not exist in current context\" error","State":"open","Body":"1. Clone repo: https://github.com/Microsoft/WPF-Samples\r\n2. Update global.json file to match your .NET version (I targeted a .NET 6 preview)\r\n3. Open solution under: WPF-Samples\\Sample Applications\\WPF Application Samples.sln\r\n4. Build the solution. It should build okay, some projects didn't load for me but that wasn't an issue\r\n5. Set startup solution as PhotoViewerDemo\r\n6. Click on a picture in the app to open the popup with just one photo in it\r\n7. Open PhotoViewer.cs, change BlackAndWhite method, make a simple change that should be supported\r\n8. Apply changes\r\n\r\n**This is what I got:**\r\n\r\nError\tCS0103\tThe name 'ViewedPhoto' does not exist in the current context\tPhotoViewerDemo\tC:\\src\\WPF-Samples\\Sample Applications\\PhotoViewerDemo\\PhotoViewer.cs\t59\tActive\r\n\r\nThis is not expected, the line of code with ViewedPhoto wasn't even something that I changed and it does exist.\r\n\r\n![image](https://user-images.githubusercontent.com/2363526/117240691-44020b00-ade6-11eb-97ef-9c6e95a10198.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/53216","RelatedDescription":"Open issue \"WPF app fails to Hot Reload after a change in a method with odd \"does not exist in current context\" error\" (#53216)"},{"Id":"877026798","IsPullRequest":true,"CreatedAt":"2021-05-06T03:59:50","Actor":"dotnet-bot","Number":"53213","RawContent":null,"Title":"Merge main to main-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from main into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/main\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/main-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/main\n# Fix merge conflicts\ngit commit\ngit push upstream merges/main-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53213","RelatedDescription":"Closed or merged PR \"Merge main to main-vs-deps\" (#53213)"},{"Id":"877051884","IsPullRequest":false,"CreatedAt":"2021-05-06T03:35:00","Actor":"wsugarman","Number":"53215","RawContent":null,"Title":"Cannot Fail Build due to IDE0003","State":"open","Body":"### Analyzer\r\n\r\n**Diagnostic ID**: [IDE0003 ](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009): `this and Me preferences`\r\n\r\n### Analyzer source\r\n\r\n**SDK**: [Built-in CA analyzers in .NET 5 SDK or later](https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis)\r\n\r\n**Version**: [SDK 5.0.202](https://dotnet.microsoft.com/download/dotnet/5.0)\r\n\r\n_AND_\r\n\r\n**NuGet Package**: [Microsoft.CodeAnalysis.NetAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers)\r\n\r\n**Version**: 5.0.3 (Latest)\r\n\r\n<!--\r\nNOTE: `Microsoft.CodeAnalysis.FxCopAnalyzers` package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK.\r\n      Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.\r\n-->\r\n\r\n### Describe the bug\r\n\r\nDespite the settings in the *.editorconfig* file, I am unable to fail my build in both Visual Studio and on the command line due to rule IDE0003.\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create a new .NET 5 console application with the following *.editorconfig*, project file, and source file\r\n\r\n```yaml\r\n# editorconfig.org\r\n\r\n# top-most EditorConfig file\r\nroot = true\r\n\r\n# C# files\r\n[*.cs]\r\n\r\n# this/me\r\ndotnet_style_qualification_for_field    = false:error\r\ndotnet_style_qualification_for_property = false:error\r\ndotnet_style_qualification_for_method   = false:error\r\ndotnet_style_qualification_for_event    = false:error\r\n\r\ndotnet_diagnostic.IDE0003.severity = error\r\n\r\n# readonly\r\n#dotnet_style_readonly_field = true:error\r\n\r\n#dotnet_diagnostic.IDE0044.severity = error\r\n\r\n# Ignore CLS Compliance attribute\r\ndotnet_diagnostic.CA1014.severity = none\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n  </PropertyGroup>\r\n\r\n  <!--ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"5.0.3\" PrivateAssets=\"All\" />\r\n  </ItemGroup-->\r\n\r\n  <PropertyGroup>\r\n    <AnalysisLevel>latest</AnalysisLevel>\r\n    <AnalysisMode>AllEnabledByDefault</AnalysisMode>\r\n    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>\r\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n```csharp\r\nusing System;\r\n\r\nnamespace AnalyzerExample\r\n{\r\n    public static class Program\r\n    {\r\n        static void Main(string[] _)\r\n        {\r\n            Console.WriteLine(new Dog(\"Fido\", 3).BarkBarkBark());\r\n        }\r\n    }\r\n\r\n    internal class Dog\r\n    {\r\n        public event Action Barking;\r\n\r\n        public string Name { get; }\r\n\r\n        private int _age;\r\n\r\n        public Dog(string name, int age)\r\n        {\r\n            // qualified property\r\n            this.Name = name;\r\n\r\n            // qualified field\r\n            this._age = age;\r\n        }\r\n\r\n        public string Bark()\r\n        {\r\n            OnBark();\r\n            return _age > 1 ? \"WOOF\" : \"woof\";\r\n        }\r\n\r\n        public string BarkBarkBark()\r\n        {\r\n            // qualified method\r\n            return string.Join(' ', this.Bark(), this.Bark(), this.Bark());\r\n        }\r\n\r\n        protected virtual void OnBark()\r\n        {\r\n            // qualified event\r\n            this.Barking?.Invoke();\r\n        }\r\n    }\r\n}\r\n```\r\n2. run `dotnet build <project file> -warnaserror`\r\n3. Observe no failure\r\n4. Uncomment the \"readonly\" *.editorconfig* settings as a sanity check\r\n    - I am unsure why I need to specify `dotnet_diagnostic.IDE0044.severity = error` in addition to `dotnet_style_readonly_field = true:error` for this to fail. Perhaps this is another problem?\r\n 5. run `dotnet build <project file> -warnaserror`\r\n 6. View errors\r\n\r\n### Expected behavior\r\nA failed build whose errors mention rule IDE0003.\r\n\r\n### Actual behavior\r\nA successful build.\r\n\r\n## Additional context\r\nVisual Studio seems to recognize the errors in its error list, but the build still **passes**:\r\n![image](https://user-images.githubusercontent.com/2955179/117237731-64c76200-ade0-11eb-9fe6-afc2a08c2a44.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/53215","RelatedDescription":"Open issue \"Cannot Fail Build due to IDE0003\" (#53215)"},{"Id":"877026905","IsPullRequest":true,"CreatedAt":"2021-05-06T03:02:21","Actor":"CyrusNajmabadi","Number":"53214","RawContent":null,"Title":"Remove bridge interface now that TS has moved to their new EA interface.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/53214","RelatedDescription":"Open PR \"Remove bridge interface now that TS has moved to their new EA interface.\" (#53214)"},{"Id":"877026637","IsPullRequest":true,"CreatedAt":"2021-05-06T03:01:42","Actor":"dotnet-bot","Number":"53211","RawContent":null,"Title":"Merge release/dev16.11-vs-deps to main-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.11-vs-deps into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-vs-deps-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/release/dev16.11-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-vs-deps-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53211","RelatedDescription":"Open PR \"Merge release/dev16.11-vs-deps to main-vs-deps\" (#53211)"},{"Id":"876995226","IsPullRequest":true,"CreatedAt":"2021-05-06T02:52:12","Actor":"CyrusNajmabadi","Number":"53208","RawContent":null,"Title":"Do not offer use-coalesce-expression in target typing scenarios","State":"closed","Body":"Fixes https://github.com/dotnet/roslyn/issues/53190","Url":"https://github.com/dotnet/roslyn/pull/53208","RelatedDescription":"Closed or merged PR \"Do not offer use-coalesce-expression in target typing scenarios\" (#53208)"},{"Id":"876757961","IsPullRequest":false,"CreatedAt":"2021-05-06T02:52:12","Actor":"gjschoneveld","Number":"53190","RawContent":null,"Title":"Suggested \"Use coalesce expression\" results in broken code","State":"closed","Body":"**Version Used**: \r\nVisual Studio Version 16.9.4\r\n\r\n**Steps to Reproduce**:\r\n1. Create a console project and enter the following code:\r\n```\r\nnamespace TestSimplification\r\n{\r\n    class Program\r\n    {\r\n        class A { }\r\n        class B { }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var a = new A();\r\n            var b = new B();\r\n\r\n            // IDE0029: Null check can be simplified\r\n            object x = a != null ? a : b;\r\n        }\r\n    }\r\n}\r\n```\r\n2. Hover your mouse above the first a in the line with 'object x = ...'\r\n3. Click the \"Use coalesce expression\"\r\n4. The line is replaced with:\r\n```\r\nobject x = a ?? b;\r\n```\r\n\r\n**Expected Behavior**:\r\nLine transformed in working code. Or no suggestion to improve it.\r\n\r\n**Actual Behavior**:\r\nCS0019: Operator '??' cannot be applied to operands of type 'Program.A' and 'Program.B'","Url":"https://github.com/dotnet/roslyn/issues/53190","RelatedDescription":"Closed issue \"Suggested \"Use coalesce expression\" results in broken code\" (#53190)"},{"Id":"876993173","IsPullRequest":false,"CreatedAt":"2021-05-06T01:38:17","Actor":"ryzngard","Number":"53207","RawContent":null,"Title":"Create integration tests for value tracking","State":"open","Body":"These need to be done before this feature is considered complete, but after ux and interaction is finalized. ","Url":"https://github.com/dotnet/roslyn/issues/53207","RelatedDescription":"Open issue \"Create integration tests for value tracking\" (#53207)"},{"Id":"876992865","IsPullRequest":true,"CreatedAt":"2021-05-06T01:37:27","Actor":"ryzngard","Number":"53206","RawContent":null,"Title":"Add progress bar to the top of value tracking","State":"open","Body":"![175268f3-97ff-4cdd-b26f-b66a12d895f0](https://user-images.githubusercontent.com/475144/117229933-d8fa0980-add0-11eb-9569-d2a185661669.gif)\r\n","Url":"https://github.com/dotnet/roslyn/pull/53206","RelatedDescription":"Open PR \"Add progress bar to the top of value tracking\" (#53206)"},{"Id":"876950364","IsPullRequest":true,"CreatedAt":"2021-05-06T01:33:10","Actor":"dotnet-bot","Number":"53203","RawContent":null,"Title":"Merge main to main-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from main into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/main\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/main-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/main\n# Fix merge conflicts\ngit commit\ngit push upstream merges/main-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53203","RelatedDescription":"Closed or merged PR \"Merge main to main-vs-deps\" (#53203)"},{"Id":"876949924","IsPullRequest":true,"CreatedAt":"2021-05-06T01:27:24","Actor":"dotnet-bot","Number":"53199","RawContent":null,"Title":"Merge release/dev16.10 to release/dev16.11","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.10 into release/dev16.11.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.10\n- https://github.com/dotnet/roslyn/find/release/dev16.11\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.10-to-release/dev16.11\ngit reset --hard upstream/release/dev16.11\ngit merge upstream/release/dev16.10\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.10-to-release/dev16.11 --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53199","RelatedDescription":"Closed or merged PR \"Merge release/dev16.10 to release/dev16.11\" (#53199)"},{"Id":"876950261","IsPullRequest":true,"CreatedAt":"2021-05-06T01:27:12","Actor":"dotnet-bot","Number":"53202","RawContent":null,"Title":"Merge release/dev16.10 to release/dev16.10-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.10 into release/dev16.10-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.10\n- https://github.com/dotnet/roslyn/find/release/dev16.10-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.10-to-release/dev16.10-vs-deps\ngit reset --hard upstream/release/dev16.10-vs-deps\ngit merge upstream/release/dev16.10\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.10-to-release/dev16.10-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53202","RelatedDescription":"Closed or merged PR \"Merge release/dev16.10 to release/dev16.10-vs-deps\" (#53202)"},{"Id":"876985960","IsPullRequest":true,"CreatedAt":"2021-05-06T01:19:37","Actor":"CyrusNajmabadi","Number":"53205","RawContent":null,"Title":"Fix NavBars for TS (aka: TypeScript and F# are different languages).","State":"open","Body":"Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1323565\r\n\r\nDespite any visions of unifying these languages, they remain distinctly separate entities.","Url":"https://github.com/dotnet/roslyn/pull/53205","RelatedDescription":"Open PR \"Fix NavBars for TS (aka: TypeScript and F# are different languages).\" (#53205)"},{"Id":"876950065","IsPullRequest":true,"CreatedAt":"2021-05-06T00:22:02","Actor":"dotnet-bot","Number":"53200","RawContent":null,"Title":"Merge release/dev16.11-vs-deps to main-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.11-vs-deps into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev16.11-vs-deps\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.11-vs-deps-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/release/dev16.11-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.11-vs-deps-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53200","RelatedDescription":"Closed or merged PR \"Merge release/dev16.11-vs-deps to main-vs-deps\" (#53200)"},{"Id":"876955007","IsPullRequest":true,"CreatedAt":"2021-05-06T00:10:41","Actor":"dibarbet","Number":"53204","RawContent":null,"Title":"Add code-remote-base to c# and vb content type definitions","State":"open","Body":"This tells the LSP client that it should activate on these content types.  How did this work before?\r\n1.  Intellicode adds this base content type to the C# content type - https://devdiv.visualstudio.com/DevDiv/_git/IntelliCode-VS?path=%2Fsrc%2FVSIX%2FIntelliCode.VSIX%2FRefactorings%2FContentTypeDefinitions.cs&_a=contents&version=GBmain\r\n2. On workspace load, we load our server ourselves.  This allows cntrl+Q to see the roslyn LSP server in C#/VB projects.\r\n3. Any other local LSP feature that works off of the buffer in VB did not work.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1302281/\r\n","Url":"https://github.com/dotnet/roslyn/pull/53204","RelatedDescription":"Open PR \"Add code-remote-base to c# and vb content type definitions\" (#53204)"},{"Id":"876950160","IsPullRequest":true,"CreatedAt":"2021-05-06T00:02:13","Actor":"dotnet-bot","Number":"53201","RawContent":null,"Title":"Merge release/dev17.0-preview1-vs-deps to main-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev17.0-preview1-vs-deps into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/release/dev17.0-preview1-vs-deps\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/release/dev17.0-preview1-vs-deps-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/release/dev17.0-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev17.0-preview1-vs-deps-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53201","RelatedDescription":"Open PR \"Merge release/dev17.0-preview1-vs-deps to main-vs-deps\" (#53201)"},{"Id":"876888642","IsPullRequest":true,"CreatedAt":"2021-05-06T00:00:14","Actor":"JoeRobich","Number":"53196","RawContent":null,"Title":"Update publish data for 16.11","State":"closed","Body":"Noticed the ExternalAccess.OmniSharp.CSharp pacakge was missing from the publish configuration. While updating I saw that we have not added 16.11 config yet.","Url":"https://github.com/dotnet/roslyn/pull/53196","RelatedDescription":"Closed or merged PR \"Update publish data for 16.11\" (#53196)"},{"Id":"876949198","IsPullRequest":true,"CreatedAt":"2021-05-06T00:00:08","Actor":"RikkiGibson","Number":"53198","RawContent":null,"Title":"Improved nullable '=='/'!=' analysis","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/53198","RelatedDescription":"Open PR \"Improved nullable '=='/'!=' analysis\" (#53198)"},{"Id":"876737860","IsPullRequest":true,"CreatedAt":"2021-05-05T22:50:00","Actor":"genlu","Number":"53188","RawContent":null,"Title":"Merge dev17.0-preview1-nopia-vs-deps to dev17.0-preview1-vs-deps","State":"closed","Body":"Brings 17.0-preview1 up to date. @JoeRobich @Cosifne @dibarbet ","Url":"https://github.com/dotnet/roslyn/pull/53188","RelatedDescription":"Closed or merged PR \"Merge dev17.0-preview1-nopia-vs-deps to dev17.0-preview1-vs-deps\" (#53188)"},{"Id":"876832068","IsPullRequest":true,"CreatedAt":"2021-05-05T22:11:47","Actor":"dotnet-bot","Number":"53195","RawContent":null,"Title":"Merge main to main-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from main into main-vs-deps.\n\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request. 🐯\n\n## Troubleshooting conflicts\n\n### Identify authors of changes which introduced merge conflicts\nScroll to the bottom, then for each file containing conflicts copy its path into the following searches:\n- https://github.com/dotnet/roslyn/find/main\n- https://github.com/dotnet/roslyn/find/main-vs-deps\n\nUsually the most recent change to a file between the two branches is considered to have introduced the conflicts, but sometimes it will be necessary to look for the conflicting lines and check the blame in each branch. Generally the author whose change introduced the conflicts should pull down this PR, fix the conflicts locally, then push up a commit resolving the conflicts.\n\n### Resolve merge conflicts using your local repo\nSometimes merge conflicts may be present on GitHub but merging locally will work without conflicts. This is due to differences between the merge algorithm used in local git versus the one used by GitHub.\n``` bash\ngit fetch --all\ngit checkout merges/main-to-main-vs-deps\ngit reset --hard upstream/main-vs-deps\ngit merge upstream/main\n# Fix merge conflicts\ngit commit\ngit push upstream merges/main-to-main-vs-deps --force\n```\n","Url":"https://github.com/dotnet/roslyn/pull/53195","RelatedDescription":"Closed or merged PR \"Merge main to main-vs-deps\" (#53195)"},{"Id":"876893873","IsPullRequest":false,"CreatedAt":"2021-05-05T22:01:57","Actor":"JoeRobich","Number":"53197","RawContent":null,"Title":"Builds reporting \"Mismatched MVIDs\" and \"Invalid file header\"","State":"open","Body":"Successful builds reporting ibc data errors.\r\n\r\n```\r\nEXEC : error : Mismatched MVIDs in ibc data [D:\\workspace\\_work\\1\\s\\src\\Workspaces\\Core\\Portable\\Microsoft.CodeAnalysis.Workspaces.csproj]\r\nEXEC : error : Mismatched MVIDs in ibc data [D:\\workspace\\_work\\1\\s\\src\\Workspaces\\Core\\Portable\\Microsoft.CodeAnalysis.Workspaces.csproj]\r\nEXEC : error : Invalid file header [D:\\workspace\\_work\\1\\s\\src\\Setup\\DevDivVsix\\CompilersPackage\\Microsoft.CodeAnalysis.Compilers.Setup.csproj]\r\nEXEC : error : Mismatched MVIDs: The ibc data was gathered using a different version of the module \"D:\\workspace\\_work\\1\\s\\artifacts\\tmp\\Release\\OptimizedAssemblies\\d8aa7574-21c9-4673-9201-05c25ec4df62\" [D:\\workspace\\_work\\1\\s\\src\\Setup\\DevDivVsix\\CompilersPackage\\Microsoft.CodeAnalysis.Compilers.Setup.csproj]\r\nEXEC : error : Mismatched MVIDs in ibc data [D:\\workspace\\_work\\1\\s\\src\\Workspaces\\Core\\Portable\\Microsoft.CodeAnalysis.Workspaces.csproj]\r\nEXEC : error : Invalid file header [D:\\workspace\\_work\\1\\s\\src\\Setup\\DevDivInsertionFiles\\DevDivInsertionFiles.csproj]\r\nEXEC : error : Mismatched MVIDs: The ibc data was gathered using a different version of the module \"D:\\workspace\\_work\\1\\s\\artifacts\\tmp\\Release\\OptimizedAssemblies\\932ed2b8-0d11-4745-8618-33ab1bc613ee\" [D:\\workspace\\_work\\1\\s\\src\\Setup\\DevDivInsertionFiles\\DevDivInsertionFiles.csproj]\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/internal/_build/results?buildId=1124245&view=results","Url":"https://github.com/dotnet/roslyn/issues/53197","RelatedDescription":"Open issue \"Builds reporting \"Mismatched MVIDs\" and \"Invalid file header\"\" (#53197)"},{"Id":"876827197","IsPullRequest":false,"CreatedAt":"2021-05-05T20:55:40","Actor":"Youssef1313","Number":"53194","RawContent":null,"Title":"Flaky test: CSharpGenerateTypeDialog.CSharpToBasic","State":"open","Body":"See https://github.com/dotnet/roslyn/pull/53110#issuecomment-832902575.\r\n\r\nNote: I believe I also met this test failing once before, so the above comment isn't the first time.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/53194","RelatedDescription":"Open issue \"Flaky test: CSharpGenerateTypeDialog.CSharpToBasic\" (#53194)"},{"Id":"876809629","IsPullRequest":false,"CreatedAt":"2021-05-05T20:30:20","Actor":"PunzunLtd","Number":"53193","RawContent":null,"Title":"When will we have code generation using net5.0 instead of netstandard2.0?","State":"open","Body":"We have a project that uses a collection of regular expressions that we used to compile into their own assembly. This assembly has been stable since 2019, meaning the last time we compiled it, we used .NET Fx 4.8, and just dropped the .dll into our .NET 5 update project.\r\n\r\nWe got all excited about the [improvements to regular expression handling](https://devblogs.microsoft.com/dotnet/regex-performance-improvements-in-net-5/) in .NET 5, so we tried running our regular expression compiler in .NET 5.\r\n\r\nWe got all sad because [DotNetCore no longer emits assemblies](https://www.github.com/dotnet/runtime/issues/15704).\r\n\r\nWe got all excited because a [source generator](https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/) is a much better solution: we get the latest runtime, we can generate the code in our deployment pipeline, etc, etc.\r\n\r\nRight now we're all sad because source generators run under netstandard2.0 only. Running them under net5.0 causes the compiler to complain \"Could not load file or assembly 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\" And [this is a known issue](https://github.com/dotnet/roslyn/issues/49249).\r\n\r\nSo. We'll downgrade our source generator to use netstandard2.0 (and refactor the C#9 syntax back to 7.3), but when the generated code runs in our net5.0 assembly, will it use the net5.0 Regex class?\r\n\r\nAnd when will net5.0 projects be able to run source generators?","Url":"https://github.com/dotnet/roslyn/issues/53193","RelatedDescription":"Open issue \"When will we have code generation using net5.0 instead of netstandard2.0?\" (#53193)"},{"Id":"876776247","IsPullRequest":false,"CreatedAt":"2021-05-05T19:42:14","Actor":"joncoello","Number":"53192","RawContent":null,"Title":"Roslyn Analyzer not clearing last diagnostic","State":"open","Body":"I have created a Roslyn Analyzer that validates text files against a set of rules and have noticed that when I fix the last issue that diagnostic does not disappear.  I have created a simple example to replicate the problem below.\r\n\r\n```csharp\r\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\r\npublic class Analyzer1Analyzer : DiagnosticAnalyzer\r\n{\r\n    public const string DiagnosticId = \"TestCompilationAnalyzer\";\r\n\r\n    private static readonly LocalizableString Title = \"TestAnalyzer\";\r\n    private static readonly LocalizableString MessageFormat = \"This message should always appear {0}\";\r\n    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, \"Test\", DiagnosticSeverity.Warning, isEnabledByDefault: true);\r\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\r\n\r\n    public override void Initialize(AnalysisContext context)\r\n    {\r\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | GeneratedCodeAnalysisFlags.ReportDiagnostics);\r\n        context.EnableConcurrentExecution();\r\n        context.RegisterAdditionalFileAction(AdditionalFileAction);\r\n    }\r\n\r\n    private void AdditionalFileAction(AdditionalFileAnalysisContext cxt)\r\n    {\r\n        var text = File.ReadAllText(cxt.AdditionalFile.Path);\r\n\r\n        if (text.Contains(\"help\"))\r\n        {\r\n            cxt.ReportDiagnostic(Diagnostic.Create(Rule, Location.None, $\"help\"));\r\n        }\r\n\r\n        if (text.Contains(\"test\"))\r\n        {\r\n            cxt.ReportDiagnostic(Diagnostic.Create(Rule, Location.None, $\"test\"));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nif I add the words help and test to my additional file both diagnostics appear but if I remove both whatever was showing last won't disappear.\r\n","Url":"https://github.com/dotnet/roslyn/issues/53192","RelatedDescription":"Open issue \"Roslyn Analyzer not clearing last diagnostic\" (#53192)"},{"Id":"876761355","IsPullRequest":false,"CreatedAt":"2021-05-05T19:19:39","Actor":"kendrahavens","Number":"53191","RawContent":null,"Title":"Avoid multiple new lines has odd interaction","State":"open","Body":"**Version Used**: Version 16.10.0 Preview 3.0 [31303.14.main]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Add multiple new lines to trigger suggestion\r\n2.  Place cursor in second line\r\n\r\n**Expected Behavior**:\r\nCtrl+. opens lightbulb suggestion\r\nHovering and clicking lightbulb icon opens lightbulb menu\r\n\r\n**Actual Behavior**:\r\nLightbulb menu is not opened when invoked from a cursor on the second line where green squiggle is.\r\n\r\n![MultiNewlines-subtitles](https://user-images.githubusercontent.com/8293542/117197011-1a23f680-ad9c-11eb-859e-5d948949120d.gif)\r\n","Url":"https://github.com/dotnet/roslyn/issues/53191","RelatedDescription":"Open issue \"Avoid multiple new lines has odd interaction\" (#53191)"},{"Id":"876748132","IsPullRequest":false,"CreatedAt":"2021-05-05T19:00:45","Actor":"RikkiGibson","Number":"53189","RawContent":null,"Title":"Missing nested nullability conversion warnings when converting to interface type","State":"open","Body":"**Version Used**: af7109e33e88aebd548fa3cf1f49a18c9fce6291\r\n\r\n**Steps to Reproduce**:\r\n\r\n[SharpLab](https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK4wD4GIaoDZ4TB4CmABCTEaQLABQ9AAgEwCMTADGY6wCwDc9egDcIyMgA9WZALxkYJAO5kAMlADOCADwAhAPYStPDgD4TZAN7ylZfYePmrAMxiyy62efUA6ACp6AZQRkWABzAAoASjIAX1jBOlFxAE9pOXCASQAlEggAEwB5GDxktU1dAyNWDgB+M0ipfjIAemayMA11MLJFMRgw+lSAbQ4AXW8XcNwCSKbWsgQAC2Q9RQ9pvDJkEicSbZgAY3ISCSOABwQoPRghOk00A4RbSt8Tegt6Mi/uAGZuVmYWleZBcCRi9CAA=)\r\n\r\n```cs\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nvar x1 = new List<Box<string>> { new Box<string> { fn = s => s.ToString() } };\r\nvar y1 = (IReadOnlyList<Box<string?>>)x1; // missing warning\r\ny1[0].fn(null); // throws null reference exception\r\n\r\nstruct Box<T>\r\n{\r\n    public Action<T> fn;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/53189","RelatedDescription":"Open issue \"Missing nested nullability conversion warnings when converting to interface type\" (#53189)"},{"Id":"876706959","IsPullRequest":false,"CreatedAt":"2021-05-05T18:03:49","Actor":"vsfeedback","Number":"53186","RawContent":null,"Title":"Suppress warrning for next line only","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Suppress-warrning-for-next-line-only/1400736)._\n\n---\nC++ can suppress warnings for the next line only, which saves me from re-enabling the warning later. C# could use this.\n\n---\n### Original Comments\n\n#### null on 4/19/2021, 04:57 AM: \n\nThank you for taking the time to provide your suggestion.  We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team.\n","Url":"https://github.com/dotnet/roslyn/issues/53186","RelatedDescription":"Open issue \"Suppress warrning for next line only\" (#53186)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"705078013","IsPullRequest":true,"CreatedAt":"2020-11-01T06:31:20","Actor":"RalfKornmannEnvision","Number":"8345","RawContent":null,"Title":"ARM64&Unix: New unwinder","State":"closed","Body":"Implements a custom unwinder for ARM64 that does not need the generic CFI based libunwind functions. This way we only need to loop just once over all used registers instead of doing the complicated CFI process.This will improve the performances for everything that needs a stack walk.\r\n\r\nAdditional unwind data are generated and stored as part of the LSDA. \r\n-4 byte for a relative offset\r\n-3 byte for the CFA\r\n-3 byte for each register that is part of the prolog save\r\n-1 byte end marker\r\n\r\nWe still keep the CFI data for the debugger. Maybe the could be removed for a build without debug information.\r\n\r\nA possible future optimization would be to introduce a compact format for the information used by the most common cases. This could be stored in the relative offset. But compared to the replacement of libunwind the wins would be rather small.\r\n\r\nThe same can be done for any  other supported architecture but each one will require a custom unwind function","Url":"https://github.com/dotnet/corert/pull/8345","RelatedDescription":"Closed or merged PR \"ARM64&Unix: New unwinder\" (#8345)"},{"Id":"727422211","IsPullRequest":true,"CreatedAt":"2020-10-30T17:18:29","Actor":"tonerdo","Number":"8370","RawContent":null,"Title":"[Interpreter] Static constructors and field access","State":"closed","Body":"Opening this here, since I don't yet have a branch in the runtimelabs repo.\r\n\r\nThis PR adds support for instance and static fields on a reference type. It interprets the following opcodes:\r\n* `ldfld`\r\n* `ldsfld`\r\n* `stfld`\r\n* `stsfld`\r\n\r\nAs a consequence of adding static field support, I also added support for interpreting static constructors on dynamically loaded types. The following scenario is now supported:\r\n\r\n```csharp\r\nclass DynamicClass1\r\n{\r\n    public string Field1;\r\n    public int Field2;\r\n    public float Field3;\r\n    public Random Field4 = new Random();\r\n\r\n    public static string StaticField1;\r\n    public static int StaticField2;\r\n    public static float StaticField3;\r\n\r\n    static DynamicClass1()\r\n    {\r\n        StaticField1 = \"statically nice!\";\r\n        StaticField2 = 10;\r\n        StaticField3 = 3.56f;\r\n    }\r\n}\r\n\r\n.....\r\n\r\npublic static void DoFields()\r\n{\r\n    DynamicClass1 class1 = new DynamicClass1();\r\n    class1.Field1 = \"nice\";\r\n    class1.Field2 = 23;\r\n    class1.Field3 = 2.5f;\r\n\r\n    Console.WriteLine(class1.Field1);\r\n    Console.WriteLine(class1.Field2);\r\n    Console.WriteLine(class1.Field3);\r\n    Console.WriteLine(class1.Field4);\r\n}\r\n\r\npublic static void DoStaticFields()\r\n{\r\n    Console.WriteLine(DynamicClass1.StaticField1);\r\n    Console.WriteLine(string.Empty);\r\n    Console.WriteLine(DynamicClass1.StaticField2);\r\n    Console.WriteLine(DynamicClass1.StaticField3);\r\n}\r\n```\r\n\r\nThe interpreter will happily load instance and static fields on both dynamically loaded types and types compiled into the native executable, while ensuring that static constructors have been run in both cases.\r\n\r\n_Note: Thread statics on dynamically loaded types are currently unsupported_\r\n\r\ncc @jkotas @MichalStrehovsky ","Url":"https://github.com/dotnet/corert/pull/8370","RelatedDescription":"Closed or merged PR \"[Interpreter] Static constructors and field access\" (#8370)"},{"Id":"729561793","IsPullRequest":false,"CreatedAt":"2020-10-26T13:26:47","Actor":"itpleb","Number":"8371","RawContent":null,"Title":"how run it on openwrt arm v7?","State":"open","Body":"how run it on openwrt arm v7?","Url":"https://github.com/dotnet/corert/issues/8371","RelatedDescription":"Open issue \"how run it on openwrt arm v7?\" (#8371)"},{"Id":"725550980","IsPullRequest":false,"CreatedAt":"2020-10-20T12:48:05","Actor":"unlimitedcoder2","Number":"8369","RawContent":null,"Title":"Fails to dotnet publish.","State":"open","Body":"I folowwed the instructons from [Here](https://github.com/dotnet/corert/tree/master/samples/WebApi) It fails to build because it cannot find objwriter\r\nThere is a `libobjwriter.so` in `.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29408-02/tools/` and I copied it to the same dir but with the name `objwriter.so` and it did not resolve the issue.\r\n\r\n```\r\nEXEC : error : Unable to load shared library 'objwriter' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libobjwriter: cannot open shared object file: No such file or directory [/home/alex/source/repos/robloxility/robloxility.csproj]\r\n  System.DllNotFoundException: Unable to load shared library 'objwriter' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libobjwriter: cannot open shared object file: No such file or directory\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.InitObjWriter(String objectFilePath, String triple)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter..ctor(String objectFilePath, NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n/home/alex/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-29408-02/build/Microsoft.NETCore.Native.targets(231,5): error MSB3073: The command \"\"/home/alex/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29408-02/tools/ilc\" @\"obj/Release/netcoreapp3.1/linux-x64/native/robloxility.ilc.rsp\"\" exited with code 1. [/home/alex/source/repos/robloxility/robloxility.csproj]\r\n```","Url":"https://github.com/dotnet/corert/issues/8369","RelatedDescription":"Open issue \"Fails to dotnet publish.\" (#8369)"},{"Id":"706262388","IsPullRequest":false,"CreatedAt":"2020-10-17T14:39:00","Actor":"teobugslayer","Number":"8347","RawContent":null,"Title":"Missing implementation of System.OperatingSystem.IsWindows","State":"closed","Body":"Hi all,\r\n\r\nI am trying to write cross-platform code and my attempt to use `IsWindows` and `IsWindowsVersionAtLeast` fails:\r\n\r\n```\r\n  Generating native code\r\nEXEC : warning : Method `[ZX]ZX.ConsoleDisplay.Init(int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: Boolean System.OperatingSystem.IsWindows() [C:\\Dev\\ZX\\ZX\\ZX.csproj]\r\nEXEC : warning : Method `[ZX]ZX.Program.ValidateCanRun()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] MissingMethod: Boolean System.OperatingSystem.IsWindowsVersionAtLeast(Int32, Int32, Int32, Int32) [C:\\Dev\\ZX\\ZX\\ZX.csproj]\r\n```\r\n\r\nWhat are my options to rectify the problem?","Url":"https://github.com/dotnet/corert/issues/8347","RelatedDescription":"Closed issue \"Missing implementation of System.OperatingSystem.IsWindows\" (#8347)"},{"Id":"723206180","IsPullRequest":false,"CreatedAt":"2020-10-16T14:53:15","Actor":"atErik","Number":"8368","RawContent":null,"Title":"Great Project","State":"closed","Body":"Hi,  \r\nthis transpiler should be improved further.\r\ni have Starred this project.\r\n\r\nBTW , i have mentioned it here in SO(StackOverflow) site , would you please upvote it [here](https://stackoverflow.com/questions/64180191/) ( please upvote my Question+Answer, both ) if you find it useful or if you think it will be helpful for other users related to this type of transpiler projects.  \r\n( and please downvote user Caleb's answer, as that is incorrect answer . Correct-answer must answer my questions first , My question is about \"Transpiler\" tools & which \"transpiler\" tool can keep high-level algorithms/structures intact , Question/article is NOT about language learning, when to transpile & when-not, etc.  \r\nIn SO site, user Flimzy (and Caleb) doesn't give advice When \"C/C++\",etc to \"Go\" conversion related question is posted or when \"C/C++\" is criticized , But when \"Go\"-to-\"C/C++\",etc conversion Question is posted or when Google based products (like \"Go\"-language) are criticized , then those users, especially Flimzy \"Close\" the question & downvotes, & gives many un-asked advices, etc, Because those users are Google PUSHERS & google based product (like \"Go\") PUSHERS . Google Crimes<sup>[1](https://en.wikipedia.org/wiki/Criticism_of_Google), [2](https://en.wikipedia.org/wiki/Google_litigation), [3](https://www.bbc.com/news/business-52887340), [4](https://www.reuters.com/article/us-alphabet-google-privacy-lawsuit-idUSKBN23933H), [5](https://www.nytimes.com/2020/09/21/technology/google-antitrust-justice-department.html), [6](https://www.nationalreview.com/news/department-of-justice-state-attorneys-general-to-sue-google-for-antitrust-violations-report/)</sup>. Problems in \"Go\"<sup>[1](https://bravenewgeek.com/go-is-unapologetically-flawed-heres-why-we-use-it/)</sup>. )\r\n\r\nThanks.\r\n\r\nEDIT : added a line that i have Starred this project.","Url":"https://github.com/dotnet/corert/issues/8368","RelatedDescription":"Closed issue \"Great Project\" (#8368)"},{"Id":"723040495","IsPullRequest":false,"CreatedAt":"2020-10-16T09:07:22","Actor":"andreakarasho","Number":"8367","RawContent":null,"Title":"GitHub actions - clang fails on Ubuntu","State":"closed","Body":"I'm playing a little bit with gh actions.\r\nTo compile the application i need to setup 3 envs [windows, macOS, linux].\r\n\r\nOn Ubuntu i get this error when publishing the file:\r\n\r\n```\r\n/usr/bin/clang\r\n  Generating native code\r\n  /usr/bin/ld: cannot find -lgssapi_krb5\r\n```","Url":"https://github.com/dotnet/corert/issues/8367","RelatedDescription":"Closed issue \"GitHub actions - clang fails on Ubuntu\" (#8367)"},{"Id":"719590628","IsPullRequest":true,"CreatedAt":"2020-10-16T02:54:11","Actor":"Rattenkrieg","Number":"8364","RawContent":null,"Title":"prevent runtime shutdown while foreground threads keep running","State":"closed","Body":"- [x] hack code\r\n- [x] make `GC_Scenarios._BinTree_thdtree_thdtree_._BinTree_thdtree_thdtree_sh`, `GC_Scenarios._BinTree_thdtreegrowingobj_thdtreegrowingobj_._BinTree_thdtreegrowingobj_thdtreegrowingobj_sh`, `GC_Scenarios._BinTree_thdtreelivingobj_thdtreelivingobj_._BinTree_thdtreelivingobj_thdtreelivingobj_sh` green\r\nI have issues with `./tests/runtest.sh release -coreclr Top200` either hanging on these three or exiting with 134 code.\r\nWhen I run it manually by `CORE_ROOT=./tests_downloaded/CoreCLR/Tests/Core_Root ./tests_downloaded/CoreCLR/GC/Scenarios/BinTree/thdtreegrowingobj/thdtreegrowingobj.sh` everithing works fine. I guess I've introduced some threading issue to xUnit runners.\r\n- [x] find some tests for foreground threads in CoreCLR or make our own \r\n\r\n\r\nSimplified logic adopted from CoreCLR with no additional states like `m_UnstartedThreadCount`, `m_PendingThreadCount` etc.\r\n","Url":"https://github.com/dotnet/corert/pull/8364","RelatedDescription":"Closed or merged PR \"prevent runtime shutdown while foreground threads keep running\" (#8364)"},{"Id":"714300525","IsPullRequest":true,"CreatedAt":"2020-10-15T00:10:17","Actor":"kant2002","Number":"8355","RawContent":null,"Title":"Display which type providing compiler helper is missing","State":"closed","Body":"I add these changes when I attempt to troubleshoot custom runtime and it failed that type was missing without indication why it want that type in first place. Have to know method which compiler want to use helps me troubleshoot what I should do.","Url":"https://github.com/dotnet/corert/pull/8355","RelatedDescription":"Closed or merged PR \"Display which type providing compiler helper is missing\" (#8355)"},{"Id":"721081874","IsPullRequest":false,"CreatedAt":"2020-10-14T02:25:12","Actor":"jkotas","Number":"8366","RawContent":null,"Title":"This repo is going to be archived on October 31, 2020","State":"open","Body":"We are centralizing all experimental projects based on dotnet/runtime in a new https://github.com/dotnet/runtimelab repo. More details about this effort are in https://github.com/dotnet/runtime/issues/35609 .\r\n\r\nRuntime optimized for AOT and RyuJIT codegen backend that were the two largest and most mature CoreRT components have been moved to their new place at https://github.com/dotnet/runtimelab/tree/feature/NativeAOT . The engineering infrastructure is setup, the packages are being published to a new NuGet feed and we are ready to start taking contributions. As with any new developer workflow, we know that there will be rough edges. Please help us smooth them out!\r\n\r\nCoreRT is dead, long live NativeAOT!\r\n\r\nWe would like to keep the experiments in dotnet/runtimelab more focused. Let’s use this issue to discuss what else would make sense to move over and in what form. I will be happy to sponsor experiments with significant interest. This includes the wasm target that @yowl has been relentlessly working on.","Url":"https://github.com/dotnet/corert/issues/8366","RelatedDescription":"Open issue \"This repo is going to be archived on October 31, 2020\" (#8366)"},{"Id":"718828491","IsPullRequest":false,"CreatedAt":"2020-10-13T13:40:40","Actor":"ryancheung","Number":"8363","RawContent":null,"Title":"Ubuntu 20.04 dotnet publish failed","State":"closed","Body":"Command: `dotnet publish -r linux-x64 -c Release`\r\nCoreRT publish failed in ubuntu 20.04 with the following build error:\r\n\r\n***\r\n  /usr/bin/clang\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n  /usr/bin/ld: cannot find ***-lgssapi_krb5***\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/home/ryan/XXX/XXX_Client/Client.DesktopGL/Client.DesktopGL.csproj]\r\n/home/ryan/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/build/Microsoft.NETCore.Native.targets(327,5): error MSB3073: The command \"clang \"obj/Release/netcoreapp3.1/linux-x64/native/Client.DesktopGL.o\" -o \"bin/Release/netcoreapp3.1/linux-x64/native/Client.DesktopGL\" /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/sdk/libbootstrapper.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/sdk/libRuntime.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/sdk/libSystem.Private.CoreLib.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/sdk/libSystem.Private.TypeLoader.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/framework/libSystem.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/framework/libSystem.Globalization.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/framework/libSystem.IO.Compression.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/framework/libSystem.Net.Security.Native.a /home/ryan/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-29228-02/framework/libSystem.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt -Wl,--discard-all -Wl,--gc-sections\" exited with code 1. [/home/ryan/XXX/XXX_Client/Client.DesktopGL/Client.DesktopGL.csproj]\r\n***\r\n\r\nTemporary workaround I found:\r\n1. `cd /usr/lib/x86_64-linux-gnu`\r\n2. `sudo ln -s libgssapi_krb5.so.2.2 libgssapi_krb5.so`","Url":"https://github.com/dotnet/corert/issues/8363","RelatedDescription":"Closed issue \"Ubuntu 20.04 dotnet publish failed\" (#8363)"},{"Id":"720044433","IsPullRequest":false,"CreatedAt":"2020-10-13T10:03:24","Actor":"darderik","Number":"8365","RawContent":null,"Title":"Question about Marshalling of data structures across C++/C#","State":"closed","Body":"Hello, following the solution provided to the issue [#6984 ](https://github.com/dotnet/corert/issues/6984) , I tried playing around with the return of data structures from C++ to C#, as i couldn't find an issue related to this kind of operation, I thought about opening one in order to receive a few heads-up on the topic.\r\n\r\n\r\nC++ Code\r\n```\r\nstruct myStruct {\r\n    int ok;\r\n    string testStr;\r\n} ;\r\nextern \"C\" myStruct entry() {\r\n    myStruct myStu;\r\n    myStu.ok = 1;\r\n    myStu.testStr = \"hello\";\r\n    return myStu;\r\n}\r\n```\r\n\r\nC# Code\r\n```\r\nnamespace CppInterop\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            dynamic ok = entry();\r\n        }\r\n        [DllImport(\"*\")]\r\n        public extern static dynamic entry();\r\n    }\r\n}\r\n```\r\n\r\n\r\nAs expected, i get this error\r\n```\r\nUnhandled Exception: System.Exception: Method '[CppInterop]CppInterop.Program.entry()' requires marshalling that is not yet supported by this compiler.\r\n   at CppInterop.Program.entry() + 0x30\r\n   at CppInterop!<BaseAddress>+0x1e9b2d\r\nAborted\r\n```\r\n\r\nI was wondering if there was another way (as I know that dynamic isn't  aot friendly at all) to pass data structures (or objects) back from cpp , in the particular case that i know exactly how is the passed object structured.\r\nThank you for the help 👍 ","Url":"https://github.com/dotnet/corert/issues/8365","RelatedDescription":"Closed issue \"Question about Marshalling of data structures across C++/C#\" (#8365)"},{"Id":"718717259","IsPullRequest":false,"CreatedAt":"2020-10-10T22:48:19","Actor":"Rattenkrieg","Number":"8362","RawContent":null,"Title":"Error on tests/runtest.sh -coreclr All","State":"open","Body":"Tested on Fedora 32, as per `runtest.cmd` should affect Windows as well.\r\nOn \"all\" selection `-test_filter_path` parameter for `tests/CoreCLR/runtest.py` is omitted and we getting into this branch:\r\nhttps://github.com/dotnet/corert/blob/b06c72e12f24523dfe58717328a3de1b9f37a397/tests/CoreCLR/runtest.py#L1873-L1874\r\nThere is no `tests/issues.targets` file. Probably [this one](https://github.com/dotnet/runtime/blob/master/src/tests/issues.targets) meant to be used but somehow wasn't added. Git history gives no clue.\r\nI see this wasn't detected because `tests/runtest.sh -coreclr` defaults to Top200.","Url":"https://github.com/dotnet/corert/issues/8362","RelatedDescription":"Open issue \"Error on tests/runtest.sh -coreclr All\" (#8362)"},{"Id":"718107191","IsPullRequest":false,"CreatedAt":"2020-10-09T13:41:43","Actor":"maikebing","Number":"8361","RawContent":null,"Title":"What's the difference between corert  and   runtimelab‘s  NativeAOT ？","State":"closed","Body":" ","Url":"https://github.com/dotnet/corert/issues/8361","RelatedDescription":"Closed issue \"What's the difference between corert  and   runtimelab‘s  NativeAOT ？\" (#8361)"},{"Id":"715288580","IsPullRequest":true,"CreatedAt":"2020-10-09T12:23:48","Actor":"drvoss","Number":"8358","RawContent":null,"Title":"Update LoadLibrary.c","State":"closed","Body":"Support Visual C++ compiler","Url":"https://github.com/dotnet/corert/pull/8358","RelatedDescription":"Closed or merged PR \"Update LoadLibrary.c\" (#8358)"},{"Id":"717888122","IsPullRequest":false,"CreatedAt":"2020-10-09T06:24:33","Actor":"DenMpei","Number":"8360","RawContent":null,"Title":"Generating native code with Grpc.Core","State":"open","Body":"Good day!\r\n\r\nI hit the following issue:\r\ndotnet publish -r win-x64 leads to numerous compilation errors\r\n\r\n![image](https://user-images.githubusercontent.com/7982187/95550016-e56fdc80-0a10-11eb-86f1-3de6b52cbe58.png)\r\n\r\nInside the package is used Grpc.Core 2.28.1\r\n\r\n![image](https://user-images.githubusercontent.com/7982187/95549756-85793600-0a10-11eb-8411-a9149078d7ea.png)\r\n\r\nСompile with Microsoft.DotNet.ILCompiler 1.0.0-alpha-29408-02\r\n\r\nAdding code from [this issue](https://github.com/dotnet/corert/issues/6375) doesn't help\r\n\r\nI ask to give advice to solve the problem.\r\nRegards.","Url":"https://github.com/dotnet/corert/issues/8360","RelatedDescription":"Open issue \"Generating native code with Grpc.Core\" (#8360)"},{"Id":"715809353","IsPullRequest":false,"CreatedAt":"2020-10-06T15:48:07","Actor":"kant2002","Number":"8359","RawContent":null,"Title":"\"The input line is too long\" during build","State":"open","Body":"When I build CoreRT from command line in x64 dev command line there error after some time\r\n\r\n```\r\n>build.cmd\r\nDoing a clean build\r\n\r\nCould Not Find D:\\d\\kant\\GitHub\\dotnet\\corert\\bin\\Logs\\*_Windows_NT__x64__Debug.*\r\nChecking pre-requisites...\r\n\r\nCommencing CoreRT Repo build\r\n\r\nCommencing build of native components for Windows_NT.x64.Debug\r\n\r\nThe input line is too long.\r\nThe syntax of the command is incorrect.\r\n```\r\n\r\nMy prior experience suggest that this is happens during call of \r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86_amd64\r\n```\r\n\r\nThis is happens IIRC due to long PATH variable.","Url":"https://github.com/dotnet/corert/issues/8359","RelatedDescription":"Open issue \"\"The input line is too long\" during build\" (#8359)"},{"Id":"713872400","IsPullRequest":true,"CreatedAt":"2020-10-05T13:52:47","Actor":"yowl","Number":"8352","RawContent":null,"Title":"Wasm: dont `RhpAssignRef` static fields","State":"closed","Body":"This PR changes the implementation of `stsfld` so that `RhpAssignRef` is not called when storing a gc  pointer in a static field.  For example, previous to this change, https://github.com/dotnet/corert/blob/145402e00724acbc9e7636739140fb84f7d64845/src/System.Private.CoreLib/shared/System/AttributeUsageAttribute.cs#L23 resulted in a call to `RhpAssignRef` in the cctor.\r\n\r\n","Url":"https://github.com/dotnet/corert/pull/8352","RelatedDescription":"Closed or merged PR \"Wasm: dont `RhpAssignRef` static fields\" (#8352)"},{"Id":"709808614","IsPullRequest":true,"CreatedAt":"2020-10-05T03:15:02","Actor":"yowl","Number":"8350","RawContent":null,"Title":"Wasm: add support for most of the conv_ovf operations","State":"closed","Body":"This PR adds support for overflow checking for Wasm for most of the Conv_Ovf opcodes. Still to do are two of native int: `Conv_Ovf_I`, `Conv_Ovf_I_Un` . (`Conv_Ovf_U` is included here).  Was going to wait until c#9 was available to do the missing ones.","Url":"https://github.com/dotnet/corert/pull/8350","RelatedDescription":"Closed or merged PR \"Wasm: add support for most of the conv_ovf operations\" (#8350)"},{"Id":"714361340","IsPullRequest":true,"CreatedAt":"2020-10-05T02:02:26","Actor":"yowl","Number":"8357","RawContent":null,"Title":"Wasm: clean up ovf switch for floats.","State":"closed","Body":"This PR removes the TODO and switches for the add/sub/mul _ovf op codes for floats as they dont apply.","Url":"https://github.com/dotnet/corert/pull/8357","RelatedDescription":"Closed or merged PR \"Wasm: clean up ovf switch for floats.\" (#8357)"},{"Id":"714319950","IsPullRequest":false,"CreatedAt":"2020-10-04T13:58:23","Actor":"kengwang","Number":"8356","RawContent":null,"Title":"\"Segmentation fault\" on CentOS 7.8","State":"open","Body":"When I tried to start the program, it echoed `Segmentation fault`\r\nIt is alright running on Ubuntu.\r\n\r\n> Build on ubuntu-16.04\r\n> Run on CentOS Linux release 7.8.2003 (Core)\r\n\r\nHow could i deal with it","Url":"https://github.com/dotnet/corert/issues/8356","RelatedDescription":"Open issue \"\"Segmentation fault\" on CentOS 7.8\" (#8356)"},{"Id":"714296090","IsPullRequest":false,"CreatedAt":"2020-10-04T11:45:29","Actor":"kant2002","Number":"8354","RawContent":null,"Title":"CoreRT slower then regular .NET","State":"open","Body":"I thinking about checking how CoreRT works for the Wavelets and decide to use https://github.com/codeprof/TurboWavelets.Net as starting point.\r\n\r\nI migrate project to new SDK format and add Benchmarks.Net using samples provided.\r\n\r\nTo my disappointment regular .NET seems to be faster then CoreRT. \r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.12.1.1420-nightly, OS=Windows 10.0.18363.1082 (1909/November2019Update/19H2)\r\nIntel Core i7-6700HQ CPU 2.60GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=5.0.100-rc.1.20452.10\r\n  [Host]     : .NET 5.0.0 (5.0.20.45114), X64 RyuJIT\r\n  .NET 5.0   : .NET 5.0.0 (5.0.20.45114), X64 RyuJIT\r\n  CoreRt 5.0 : .NET 5.0.29330.02 @BuiltBy: dlab14-DDVSOWINAGE075 @Branch: master @Commit: 145402e00724acbc9e7636739140fb84f7d64845, X64 AOT\r\n\r\n\r\n|                Method |        Job |    Runtime |      Mean |    Error |   StdDev | Ratio | RatioSD |\r\n|---------------------- |----------- |----------- |----------:|---------:|---------:|------:|--------:|\r\n| Waveletimageupscaling |   .NET 5.0 |   .NET 5.0 | 155.72 ms | 3.267 ms | 9.426 ms |  1.00 |    0.00 |\r\n| Waveletimageupscaling | CoreRt 5.0 | CoreRt 5.0 | 167.68 ms | 3.303 ms | 9.478 ms |  1.08 |    0.09 |\r\n|                       |            |            |           |          |          |       |         |\r\n|      AdaptiveDeadzone |   .NET 5.0 |   .NET 5.0 |  30.40 ms | 0.588 ms | 0.764 ms |  1.00 |    0.00 |\r\n|      AdaptiveDeadzone | CoreRt 5.0 | CoreRt 5.0 |  33.79 ms | 0.683 ms | 1.763 ms |  1.14 |    0.08 |\r\n```\r\n\r\nSo I have generic questions.\r\n1. Does this results expected with CPU-bound workloads.\r\n2. What can I do to look more closely on this particular case.","Url":"https://github.com/dotnet/corert/issues/8354","RelatedDescription":"Open issue \"CoreRT slower then regular .NET\" (#8354)"},{"Id":"713880348","IsPullRequest":true,"CreatedAt":"2020-10-02T22:17:06","Actor":"yowl","Number":"8353","RawContent":null,"Title":"Wasm: Use the property for ShadowStackTop to ensure global exists","State":"closed","Body":"Depending on input, the first call to a RawPInvoke could occur before the shadow stack global was added.  This change requests the global via the property getter to ensure it is created before use.","Url":"https://github.com/dotnet/corert/pull/8353","RelatedDescription":"Closed or merged PR \"Wasm: Use the property for ShadowStackTop to ensure global exists\" (#8353)"},{"Id":"710664867","IsPullRequest":true,"CreatedAt":"2020-09-29T11:40:22","Actor":"tonerdo","Number":"8351","RawContent":null,"Title":"[Interpreter] Static constructors and field access","State":"closed","Body":"This PR adds support for instance and static fields on a reference type. It interprets the following opcodes:\r\n* `ldfld`\r\n* `ldsfld`\r\n* `stfld`\r\n* `stsfld`\r\n\r\nAs a consequence of adding static field support, I also added support for interpreting static constructors on dynamically loaded types. The following scenario is now supported:\r\n\r\n```csharp\r\nclass Class1\r\n{\r\n    public string Field1;\r\n    public int Field2;\r\n    public float Field3;\r\n\r\n    public static string StaticField1;\r\n    public static int StaticField2;\r\n    public static float StaticField3;\r\n\r\n    [ThreadStatic]\r\n    public static int ThreadStaticField1;\r\n\r\n    static Class1()\r\n    {\r\n        StaticField1 = \"statically nice!\";\r\n        StaticField2 = 10;\r\n        StaticField3 = 3.56f;\r\n        ThreadStaticField1 = 56;\r\n    }\r\n}\r\n\r\n.....\r\n\r\npublic static void DoFields()\r\n{\r\n    Class1 class1 = new Class1();\r\n    class1.Field1 = \"nice\";\r\n    class1.Field2 = 23;\r\n    class1.Field3 = 2.5f;\r\n\r\n    Console.WriteLine(class1.Field1);\r\n    Console.WriteLine(class1.Field2);\r\n    Console.WriteLine(class1.Field3);\r\n}\r\n\r\npublic static void DoStaticFields()\r\n{\r\n    Console.WriteLine(Class1.StaticField1);\r\n    Console.WriteLine(String.Empty);\r\n    Console.WriteLine(Class1.StaticField2);\r\n    Console.WriteLine(Class1.StaticField3);\r\n    Console.WriteLine(Class1.ThreadStaticField1);\r\n}\r\n```\r\n\r\nThe interpreter will happily load instance and static fields on both dynamically loaded types and types compiled into the native executable, while ensuring that static constructors have been run in both cases.\r\n","Url":"https://github.com/dotnet/corert/pull/8351","RelatedDescription":"Closed or merged PR \"[Interpreter] Static constructors and field access\" (#8351)"},{"Id":"709649946","IsPullRequest":false,"CreatedAt":"2020-09-27T02:19:00","Actor":"yowl","Number":"8349","RawContent":null,"Title":"Wasm: conv_r_un/4 should set to postive or negative infinity when too large","State":"open","Body":"","Url":"https://github.com/dotnet/corert/issues/8349","RelatedDescription":"Open issue \"Wasm: conv_r_un/4 should set to postive or negative infinity when too large\" (#8349)"},{"Id":"709582502","IsPullRequest":false,"CreatedAt":"2020-09-26T17:59:41","Actor":"yowl","Number":"8348","RawContent":null,"Title":"Question: ImportConvert unsigned parameter is always false","State":"open","Body":"`ImportConvert` in https://github.com/dotnet/corert/blob/145402e00724acbc9e7636739140fb84f7d64845/src/Common/src/TypeSystem/IL/ILImporter.cs#L745-L766 is always passed `false` for the `unsigned` parameter (the last parameter), even on the unsigned conversions, `conv_ovf_u1`  Is there a reason for that?","Url":"https://github.com/dotnet/corert/issues/8348","RelatedDescription":"Open issue \"Question: ImportConvert unsigned parameter is always false\" (#8348)"},{"Id":"704206710","IsPullRequest":true,"CreatedAt":"2020-09-22T00:29:41","Actor":"RalfKornmannEnvision","Number":"8343","RawContent":null,"Title":"ARM64: RhpGcPoll","State":"closed","Body":"- Initial port of GCProbe.S for ARM64\r\n- Ensure RhpGcPoll & RhpGcPollRare are working","Url":"https://github.com/dotnet/corert/pull/8343","RelatedDescription":"Closed or merged PR \"ARM64: RhpGcPoll\" (#8343)"},{"Id":"705253015","IsPullRequest":false,"CreatedAt":"2020-09-21T03:12:25","Actor":"Powerlated","Number":"8346","RawContent":null,"Title":"Unhandled Exception: ILCompiler.CodeGenerationFailedException: Code generation failed for method ","State":"open","Body":"```\r\nUnhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception: Unhandled Exception:\r\n  Unhandled Exception:\r\n  Unhandled Exception:\r\n  Unhandled Exception: ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,ShaderType,string&,int32[])'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,ShaderType,string&,int32&)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,ShaderType,string&,int32*)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,All,string&,int32[])'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,ShaderType,string&,int32[])'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,All,string&,int32*)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,All,string&,int32&)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,All,string&,int32*)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,ShaderType,string&,int32*)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,ShaderType,string&,int32&)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(uint32,All,string&,int32[])'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()ILCompiler.CodeGenerationFailedException: Code generation failed for method '[OpenTK]OpenTK.Graphics.ES30.GL+Qcom.ExtGetProgramBinarySource(int32,All,string&,int32&)'\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethod(MethodCodeNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.CompileSingleMethod(CorInfoImpl corInfo, MethodCodeNode methodCodeNodeNeedingCode)\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\nI am attempting to `dotnet publish -r win-x64 -c Release` a program and I receieve this error after the `Generating compatible native code.` message.","Url":"https://github.com/dotnet/corert/issues/8346","RelatedDescription":"Open issue \"Unhandled Exception: ILCompiler.CodeGenerationFailedException: Code generation failed for method \" (#8346)"},{"Id":"704803194","IsPullRequest":true,"CreatedAt":"2020-09-19T05:02:42","Actor":"toddsharpe","Number":"8344","RawContent":null,"Title":"Merge pull request #1 from dotnet/master","State":"closed","Body":"Updating CoreRT","Url":"https://github.com/dotnet/corert/pull/8344","RelatedDescription":"Closed or merged PR \"Merge pull request #1 from dotnet/master\" (#8344)"},{"Id":"704118291","IsPullRequest":true,"CreatedAt":"2020-09-18T14:58:08","Actor":"RalfKornmannEnvision","Number":"8342","RawContent":null,"Title":"ARM64: Additional debug checks during exception handling","State":"closed","Body":"- Reenable stored register trashing as the debugger has no issues with it.\r\n- Implement missing call to RhpValidateExInfoPop","Url":"https://github.com/dotnet/corert/pull/8342","RelatedDescription":"Closed or merged PR \"ARM64: Additional debug checks during exception handling\" (#8342)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"877032327","IsPullRequest":true,"CreatedAt":"2021-05-06T03:15:21","Actor":"dsplaisted","Number":"17465","RawContent":null,"Title":"Update .NET Framework targeting pack version","State":"open","Body":"Update to newly released version of [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/)\r\n\r\nFixes https://github.com/microsoft/dotnet/issues/1137\r\n\r\n@NikolaMilosavljevic @AArnott ","Url":"https://github.com/dotnet/sdk/pull/17465","RelatedDescription":"Open PR \"Update .NET Framework targeting pack version\" (#17465)"},{"Id":"876394045","IsPullRequest":true,"CreatedAt":"2021-05-06T03:09:50","Actor":"dotnet-maestro[bot]","Number":"17445","RawContent":null,"Title":"[main] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3d9043af-0e17-4eb5-f3e3-08d8e97c775d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3d9043af-0e17-4eb5-f3e3-08d8e97c775d\r\n- **Build**: 20210504.3\r\n- **Date Produced**: 5/4/2021 9:32 PM\r\n- **Commit**: 0cfaf935894a4c98ff7445c903f1b4c32990b127\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Arcade.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.SignTool**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n  - **Microsoft.DotNet.Helix.Sdk**: [from 6.0.0-beta.21253.2 to 6.0.0-beta.21254.3][1]\r\n\r\n[1]: https://github.com/dotnet/arcade/compare/e9fd640...0cfaf93\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:3d9043af-0e17-4eb5-f3e3-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17445","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/arcade\" (#17445)"},{"Id":"876973275","IsPullRequest":true,"CreatedAt":"2021-05-06T01:58:53","Actor":"dotnet-maestro[bot]","Number":"17462","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.9\r\n- **Date Produced**: 5/6/2021 12:06 AM\r\n- **Commit**: c6713591462b6e547860f3f289472865af3602a0\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.8 to 6.0.0-preview.5.21255.9][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/6193393...c671359\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17462","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17462)"},{"Id":"876982713","IsPullRequest":false,"CreatedAt":"2021-05-06T01:44:44","Actor":"richlander","Number":"17463","RawContent":null,"Title":"Supporting .NET with x64 emulation on Arm64","State":"closed","Body":"# Supporting .NET with x64 emulation on Arm64\r\n\r\nx64 emulation has emerged as an important new scenario for Arm64 operating systems from [Apple](https://www.apple.com/mac/m1/) and [Microsoft](https://blogs.windows.com/windows-insider/2020/12/10/introducing-x64-emulation-in-preview-for-windows-10-on-arm-pcs-to-the-windows-insider-program/). This document defines the approach for supporting .NET with x64 emulation.\r\n\r\nThe overall intent of this proposal to create workflows that enable the intuitive use of the Arm64 SDK with x64 runtimes. This experience will limit the need for the x64 SDK to be used (and installed). For example, someone should be able to git clone a repository that builds and tests a .NET Core 3.1 app on an Arm64 machine, using the Arm64 `dotnet` that is on the path, and relying on natural use of the (installed) .NET Core 3.1 x64 runtime. The repo owner wouldn't need to do anything special to enable their build and test scripts to work correctly on Arm64 machines.\r\n\r\nAn earlier issue discussed enabling [dotnet [Arm64 | x64] coexistence](https://github.com/dotnet/sdk/issues/16896), in terms of a broad set of options. The initial feedback converged on providing Arm64 as a native architecture offering, just like x64 is offered on x64 machines, and as if x64 emulation on Arm64 did not exist. Conversely, the feedback suggested that x64 emulation should be provided as a secondary architecture offering, as a new scenario with a new set of gestures and experiences. This document expands on that approach.\r\n\r\nFor the purposes of this document, we will assume that the Apple and Microsoft approaches to x64 emulation are the same.\r\n\r\n## Terms\r\n\r\n- Native architecture: the instruction set that the operating system targets and supports.\r\n  - For example, the native architecture of Windows x64 running on an x64 CPU is x64.\r\n  - For example, the native architecture on Windows x86 running on either an x86 or x64 CPU is x86 (or IA32).\r\n  - For example, the native architecture of macOS Arm64 running on an Apple Silicon CPU is Arm64.\r\n- Emulation: an alternate instruction set that is supported for some purpose, such as application compatibility.\r\n  - For example, Windows x64 supports running x86 (or 32-bit) via its Wow64 subsystem.\r\n  - For example, macOS Arm64 supports running x64 via its Rosetta 2 subsystem.\r\n\r\n## Principles\r\n\r\nThe approach is based on the following principles:\r\n\r\n- .NET will have a uniform model for supporting native architectures, with little or no difference across environments, such as macOS Arm64 and Windows x64.\r\n- .NET will have a uniform model for supporting x64 emulation on Arm64, with little or no difference across environments, such as macOS Arm64 and Windows Arm64.\r\n- It is OK for a given architecture to not be uniform across its native architecture and emulated presentations, for example .NET x64 on Windows x64 vs Windows Arm64.\r\n\r\nThese principles lead to the following propositions:\r\n\r\n- The native architecture offering is the primary use case and design target.\r\n- The emulated offering is a secondary use case and may require special gestures.\r\n\r\nThose principles and propositions offer us both prioritization and degrees of freedom.\r\n\r\n## Overall approach\r\n\r\nThere are two primary challenges to solve to enable .NET code to run in x64 emulation:\r\n\r\n- x64 instruction emulation.\r\n- Enabling .NET Arm64 and x64 to coexist.\r\n\r\nWe see the first challenge as being the role of the operating system teams, from Apple (macOS) and Microsoft (Windows). A .NET x64 emulation issue could just as easily affect Java or Python, for example. Also, we don't want to regularly service multiple .NET versions to support x64 emulation on multiple operating systems. For example, Apple have been responsive to the bugs we have filed, and fixed multiple issues in public builds. It may take longer for x64 emulation issues to be resolved than native architecture issues as an inherent outcome of this approach.\r\n\r\n.NET x64 builds are now working well in Rosetta 2 on macOS. The .NET team hasn't yet tested x64 emulation (at least at depth) on Windows Arm64. We have every reason to believe that these emulation systems are high quality and will work well for .NET x64 apps as a durable feature.\r\n\r\nNote: We are not committed to resolving issues that the operating system vendor does not address in their emulation subsystem. This includes functional, performance, and security issues. You can call Microsoft support for .NET issues with x64 emulation, but that may result in an issue being filed with the operating system vendor.\r\n\r\nFor development, we recommend using the native architecture build of .NET and using emulation primarily for testing. You can rely on emulation for daily work, but it will be be a substandard experience (described later).\r\n\r\nThere are two primary reasons why you might be required to use emulation:\r\n\r\n- You rely on a .NET version that isn't built for Arm64 (for your OS).\r\n- You rely on native dependencies that are not built for Arm64 (for your OS).\r\n\r\nArm64 and x64 builds can coexist, however, only the Arm64 build will be automatically added to the `PATH`. That means that typing `dotnet` will result in using an Arm64 build of .NET, by default. It also means you will get an error if the .NET version you need isn't available for Arm64, but only via x64 emulation (even if it is installed). Going forward, we will apply the same policy to all environments, to only set the `PATH` for native architecture builds. For example, we intend to apply this policy to Windows WoW64 support (Windows x86 on Windows x64).\r\n\r\nWe consider emulated environments as secondary experiences and will require users to have more skill to configure and use them efficiently and correctly. `PATH` management can be confusing and frustrating, and we consider it an advanced experience. By only setting the `PATH` for one architecture, we can document the expected experience of using .NET without needing to clarify the order of installing Arm64 and x64 versions.\r\n\r\n.NET x64 will be usable (via emulation) without any additional configuration for scenarios that do not rely on the `PATH`. These are documented later.\r\n\r\nBoth Arm64 and x64 installs must be serviceable. For example, if a user maintains .NET 6 installations for both Arm64 and x64, they must be able to install new Arm64 and x64 .NET builds in any order to safely update their machine. Also, Windows users should be able to rely on Microsoft Update to install both Arm64 and x64 .NET updates, as appropriate, for a given machine.\r\n\r\n## Native architecture\r\n\r\nWe have adopted the practice of installing .NET to the expected and idiomatic location on each operating system in the `dotnet` directory. That's what we've done for (native architecture) x64, and we'll follow that model for Arm64.\r\n\r\n- macOS: `/usr/local/share/dotnet`\r\n- Windows `C:\\Program Files\\dotnet`\r\n\r\nThe .NET installer for each operating system will update the machine-wide path to include the `dotnet` directory. This action enables developers to type `dotnet` and use the .NET platform.\r\n\r\nOn Windows, a registry key is also set by the installer to describe that .NET is installed. It will be set on Arm64 in an analogous way as x64. The format isn't discussed in this document.\r\n\r\n## x64 emulation\r\n\r\nx64 emulation is a new scenario that requires a new model, including new experiences and gestures. Unlike the Windows Wow64 model, where the operating system establishes file and registry virtualization that provides effective guidance for platforms like .NET, x64 emulation has no similar model. A platform like .NET is on its own to choose a good model for Arm64 and x64 coexistence. It is quite likely there will be significant diversity between dev platforms on this topic, either via inherent need or the result of different and uncoordinated choices.\r\n\r\n### Install location\r\n\r\nThe x64 build will be installed within the `dotnet` directory in an `x64` folder. Within that folder, the folder and file layout will be identical to what one would find in a native architecture installation. For example, the x64 `dotnet` executable will be installed to `/usr/local/share/dotnet/x64/dotnet` on macOS. The same model will be applied to Windows.\r\n\r\nThe major advantage of this approach is that the .NET product requires very limited updates to support this system since the structure within the `x64` directory is exactly as expected, because it is identical to a native architecture installation.\r\n\r\nAny .NET version can be installed within the x64 structure. For example, you can have .NET 6 installed concurrently for Arm64 and x64. They will be concurrently usable according to experiences that will be defined shortly.\r\n\r\nOn Windows, the x64 installer will need to write a value that does not overwrite Arm64 values. The format isn't discussed in this document.\r\n\r\nmacOS Arm64 has already been released and people are already installing .NET builds on it. Inherent in this proposal is a major breaking change. If users have installed any x64 builds on macOS Arm64, they will be required to delete the `dotnet` directory on their machine and re-install .NET from scratch to ensure x64 builds are installed correctly (per this proposal).\r\n\r\nWindows Arm64 will have a similar problem if we don't implement this proposal in time. We need to talk to the Windows team about their schedule. If Microsoft releases a Windows build with x64 emulation before .NET 6, we will need to update .NET 5 to have the correct behavior to align with that release date so that Windows users don't have to deal with the same problems as macOS users (remove existing installs).\r\n\r\nAnother related but separate breaking change is that we will need to change x64 installers to have different behaviors on Arm64 (different install location; not setting the path; different reg keys on Windows). That means that old x64 installers will not be supported on Arm64. This includes both old builds for a supported release like .NET Core 3.1, and all builds for a no longer supported release like .NET Core 3.0. That's not likely to affect many people, but will need to be documented.\r\n\r\n### Applications\r\n\r\nThere are two different aspects of apps that determine the way in which they are launched.\r\n\r\n- The host that is used to launch the app.\r\n- The runtime ID that was used to build the app.\r\n\r\nThere are three host options:\r\n\r\n1. The app is self-contained and launched with its executable apphost, such as `myapp.exe` or `./myapp`. \r\n1. The app is framework-dependent and launched with its executable apphost, such as `myapp.exe` or `./myapp`.\r\n1. The app is framework-dependent and launched with the `dotnet` host, such as `dotnet myapp.dll`.\r\n\r\nNote: The second case is the default experience on Windows, while the third one is the default experience on macOS (due to notarization requirements).\r\n\r\nIn the first case, the apphost is able to launch the runtime and app in the same directory, and the application is started. As long as the app was published for `osx-arm64` or `osx-x64`, it will work. This case does not rely on the `PATH`.\r\n\r\nIn the second case, the apphost will attempt to find the required .NET architecture and version installed to known locations such as `C:\\Program Files\\dotnet` (native architecture) or `C:\\Program Files\\dotnet\\x64` (x64 emulation). The apphost for the app will be chosen and generated at build-time based on the implicit runtime ID of the SDK or explicitly defined via a CLI or msbuild property. For example `dotnet build` will produce an apphost that matches the operating system and architecture of the SDK, whereas `dotnet publish -r osx-arm64 --self-contained false` will produce a framework-dependent app with an app host for macOS Arm64. In the case that the apphost cannot find  a compatible .NET version in the known location for the given architecture, it will produce an error. A user can set `DOTNET_ROOT` to an alternative location. This case does not rely on the `PATH`.\r\n\r\nWe will need to create a `DOTNET_ROOT_X64` or `DOTNET_ROOT(x64)` ENV, to enable `DOTNET_ROOT` to apply to the native architecture. x64 apps that are already published will have no concept of a `DOTNET_ROOT_X64`, so will not work correctly.\r\n\r\nWe have two choices on how to handle that:\r\n\r\n- Require developers to rebuild apps to behave correct in the x64 emulated environment on Arm64. Rebuilding would result in using a newer apphost that understands to look for the `DOTNET_ROOT_X64` ENV.\r\n- Consider `DOTNET_ROOT` as x64-specific, and instead create a `DOTNET_ROOT_Arm64` ENV for Arm64 apps.\r\n\r\nThe first option isn't great, but is workable. The second option would be a very unfortunate long-term choice. This choice is a microcosm of the installation directory discussion that is at the heart of this document. We rejected `dotnet-x64` and `dotnet-arm64` directory names for the .NET product installation. We should also reject needing to specify an architecture for `DOTNET_ROOT` for the native architecture.\r\n\r\nNote: I'm not a fan of `DOTNET_ROOT(x64)`. It's hard to type (requires me to hold `shift` and look at my keyboard), looks inspired by `Program Files(x86)` from Windows, and generally looks funny. Please, let's adopt `DOTNET_ROOT_X64`.\r\n\r\nIn the third and last case, the `dotnet` host is used to directly launch an app via its managed entry point. In this case, the architecture has been chosen by virtue of the given `dotnet` used, either for the native or emulated architecture. The `dotnet` host (and related infrastructure) will attempt to find a compatible .NET version based on that architecture. In the case that the `dotnet` host cannot find be a compatible .NET version, it will produce an error. This case relies on the `PATH`, unless an absolute path to `dotnet` is used, such as `C:\\Program Files\\dotnet\\x64\\dotnet` or `D:\\MyPrivateDotnet\\dotnet`.\r\n\r\nIn the third case, an architecture is specified in `deps.json`, but it is not consulted/honored. That makes the experience for the second and third cases asymmetric. That's not attractive. Also, the app may reference native dependencies that are incompatible with the architecture of the given `dotnet`. One challenge is that `dotnet build` produces portable assets by default. As a result, looking to `deps.json` for an architecture isn't correct.\r\n\r\nWe can improve on the first case by writing the architecture to `runtimeconfig.json`. That's the correct file to describe fundamental scalar values about the app. This value would enable `dotnet` to either produce errors if it was an incompatible architecture for the app, or to proxy to a `dotnet` of another architecture. We should only write this value for apps that target a specific (and single) architecture, not for portable apps. As is mentioned multiple times in this document, there is no good gesture for that today. In fact, we should reconsider portable apps as a default experience.\r\n\r\n## SDK\r\n\r\nThe SDK offers many commands and scenarios and includes multiple components that are launched in varying ways. It supports cross-version and cross-architecture targeting for some scenarios and for others requires using a matching SDK and/or runtime for the version and architecture you are targeting. It is expected that this section of the document is the least complete as a result of the more complicated experiences.\r\n\r\nIn general, we expect the following:\r\n\r\n- `dotnet build` and `dotnet publish` support cross-targeting, across .NET version and CPU architecture. It doesn't matter which SDK you use to build or publish a given app provided that the SDK is the same or higher .NET version.\r\n- `dotnet build` and `dotnet publish` target the architecture of the SDK, by default. This is most relevant for producing the apphost for the app.\r\n  - For example, using the Arm64 SDK, `dotnet build` will produce an executable that is Arm64 specific and that makes the app Arm64-specific (for practical purposes). Given another gesture (which in practice doesn't exist), you could target x64, making it easier to use the Arm64 SDK for development but test with the emulated x64 SDK.\r\n  - It is inconvenient to use `dotnet build` to produce framework-dependent apps that target an explicit architecture/RID. See [.NET CLI Compatibility](https://gist.github.com/richlander/8e0d2d257f1f0d2104e0fcbb3c4ce687) for more context.\r\n  - This was demonstrated earlier by virtue of using `dotnet publish` instead of `dotnet build` for this purpose.\r\n  - We may need to improve this experience to make x64 emulation more easy to target. This problem may be less relevant for macOS (due to notarization requirements).\r\n- `dotnet run` and `dotnet test` launch an application, and require a compatible .NET runtime version for the architecture.\r\n  - In absence of a compatible version being present, the given host will present an error.\r\n  - We could consider enabling discovery and use of emulated versions of .NET when native architecture versions are not available, and vice versa.\r\n  - This scenario would happen naturally if it was straightforward to target an alternate architecture/RID, with `dotnet run` and `dotnet test`, particularly on Windows where the apphost is used by default.\r\n  - The `dotnet` host could be updated to do something similar, to make it honor the architecture present in the `deps.json` file. The Arm64 `dotnet` could proxy to the x64 `dotnet`, and vice versa. The `dotnet` host is relevant on macOS, since it is used exclusively for `dotnet run` and `dotnet test` scenarios, due to notarization requirements.\r\n  - We could simply extend `dotnet test`, for example, to accept a runtime ID, such as `dotnet test -r osx-x64`. Ideally, we could infer the operating system, and specify only the architecture, such as `dotnet test -a x64`.\r\n\r\n## User Experience\r\n\r\nWe haven't built this experience, but we can simulate much of it, both to more concretely present what is being proposed and to evaluate if the UX is tenable.\r\n\r\nI performed the following steps to create my simulation environments:\r\n\r\n- I installed .NET Core 3.1, .NET 5 and .NET 6, all as x64 version.\r\n- I moved them into an `x64` directory within the global `dotnet` directory.\r\n- I installed .NET 6 Arm64.\r\n- I validated that both x64 and Arm64 versions were functional at that point.\r\n\r\nI ran the following tests to demonstrate and evaluate the experience.\r\n\r\n### Validate Arm64 install\r\n\r\nValidate that the Arm64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-arm64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/          \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\t\t\tx64\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/dotnet  \r\n/usr/local/share/dotnet/dotnet: Mach-O 64-bit executable arm64\r\n```\r\n\r\n### Validate x64 install\r\n\r\nValidate that the x64 install looks good. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % ls /usr/local/share/dotnet/x64       \r\nLICENSE.txt\t\thost\t\t\tshared\r\nThirdPartyNotices.txt\tpacks\t\t\ttemplates\r\ndotnet\t\t\tsdk\r\nrich@MacBook-Air ~ % file /usr/local/share/dotnet/x64/dotnet\r\n/usr/local/share/dotnet/x64/dotnet: Mach-O 64-bit executable x86_64\r\n```\r\n\r\n## Build and run .NET 5 app with Arm64\r\n\r\nThe premise of this test is that there is no Arm64 build of .NET 5 for macOS. The app builds and does not run, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj | grep Target\r\n    <TargetFramework>net5.0</TargetFramework>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 150 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net5.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.03\r\nrich@MacBook-Air dotnetapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp % dotnet ./bin/Debug/net5.0/dotnetapp.dll\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air dotnetapp\r\n```\r\n\r\nWe can use roll-forward tricks to coerce the app to run, and it does, as expected.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air dotnetapp % dotnet run                               \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\n## Build and run .NET 5 app with x64\r\n\r\nThe .NET 5 app should run successfully using emulation. It does.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet --version\r\n6.0.100-preview.3.21202.5\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 5.0.5\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\n## Validate .NET 6 apps work\r\n\r\nThe previous example used a .NET 5 app. There are two concurrent .NET 6 versions installed (one for Arm64 and the other x64). Do I get Arm64 by default and can I opt to use x64? Yes.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet new console -o app\r\nGetting ready...\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 111 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app\r\nrich@MacBook-Air app % cat app.csproj| grep Target\r\n    <TargetFramework>net6.0</TargetFramework>\r\nrich@MacBook-Air app % dotnet run\r\nHello World!\r\nrich@MacBook-Air app % rm -r bin obj\r\nrich@MacBook-Air app % /usr/local/share/dotnet/x64/dotnet run\r\nHello World!\r\n```\r\n\r\n## Unit testing\r\n\r\nUnit testing is expected to require a compatible .NET version. It does.\r\n\r\nComplexapp includes an app, libraries, and tests. Let's start by running the app, repeating the exercise from above.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % export DOTNET_ROLL_FORWARD= && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=  \r\nrich@MacBook-Air complexapp % pwd  \r\n/Users/rich/git/dotnet-docker/samples/complexapp/complexapp\r\nrich@MacBook-Air complexapp % dotnet run\r\nIt was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\n\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\nrich@MacBook-Air complexapp % /usr/local/share/dotnet/x64/dotnet run       \r\nstring: The quick brown fox jumps over the lazy dog\r\nreversed: god yzal eht revo spmuj xof nworb kciuq ehT\r\n```\r\n\r\nNow let's run the tests.\r\n\r\n```bash\r\nrich@MacBook-Air complexapp % cd ..\r\nrich@MacBook-Air complexapp % cd tests \r\nrich@MacBook-Air tests % pwd\r\n/Users/rich/git/dotnet-docker/samples/complexapp/tests\r\nrich@MacBook-Air tests % dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 269 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 279 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\nTesthost process exited with error: It was not possible to find any compatible framework version\r\nThe framework 'Microsoft.NETCore.App', version '5.0.0' was not found.\r\n  - The following frameworks were found:\r\n      6.0.0-preview.3.21201.4 at [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nYou can resolve the problem by installing the specified framework and/or SDK.\r\nThe specified framework can be found at:\r\n  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&framework_version=5.0.0&arch=arm64&rid=osx.11.0-arm64\r\n. Please check the diagnostic logs for more information.\r\n\r\nTest Run Aborted.\r\n```\r\n\r\nAs expected, the .NET 5-based tests fail with a .NET 6 only environment. Let's try with a .NET 5 environment.\r\n\r\n```bash\r\nrich@MacBook-Air tests % /usr/local/share/dotnet/x64/dotnet test\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 601 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 690 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 16 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\n```\r\n\r\nThat worked, as expected. Let's try the rollforward trick again.\r\n\r\n```bash\r\nrich@MacBook-Air tests % export DOTNET_ROLL_FORWARD=LatestMajor && export DOTNET_ROLL_FORWARD_TO_PRERELEASE=1\r\nrich@MacBook-Air tests % dotnet test                            \r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libbar/libbar.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/libfoo.csproj (in 260 ms).\r\n  Restored /Users/rich/git/dotnet-docker/samples/complexapp/tests/tests.csproj (in 273 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  libfoo -> /Users/rich/git/dotnet-docker/samples/complexapp/libfoo/bin/Debug/netstandard2.0/libfoo.dll\r\n  libbar -> /Users/rich/git/dotnet-docker/samples/complexapp/libbar/bin/Debug/netstandard2.0/libbar.dll\r\n  tests -> /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll\r\nTest run for /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (.NETCoreApp,Version=v5.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.10.0-preview-20210317-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nA total of 1 test files matched the specified pattern.\r\n\r\nPassed!  - Failed:     0, Passed:     2, Skipped:     0, Total:     2, Duration: 2 ms - /Users/rich/git/dotnet-docker/samples/complexapp/tests/bin/Debug/net5.0/tests.dll (net5.0)\r\nrich@MacBook-Air tests % \r\n```\r\n\r\n### Using Apphost\r\n\r\nLet's see if we can get the combination of the CLI, apphost, `DOTNET_ROOT` to enable us to pivot executables to either the native or emulated architecture. This task requires a little extra finessing on macOS due to notarization. That step isn't required on Windows.\r\n\r\nLet's start with Arm64.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % pwd\r\n/Users/rich/git/dotnet-docker/samples/dotnetapp\r\nrich@MacBook-Air dotnetapp % cat dotnetapp.csproj \r\n<Project Sdk=\"Microsoft.NET.Sdk\" ToolsVersion=\"15.0\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\nrich@MacBook-Air dotnetapp % dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 112 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.56\r\nrich@MacBook-Air dotnetapp % codesign -s - bin/Debug/net6.0/dotnetapp\r\nrich@MacBook-Air dotnetapp % ./bin/Debug/net6.0/dotnetapp\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nNow x64. This is where the CLI forces us to use `publish` instead of `build`. Ughh.\r\n\r\n```bash\r\nrich@MacBook-Air dotnetapp % dotnet publish -o dotnetappx64 --self-contained false -r osx-x64\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 1.2 sec).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/osx-x64/dotnetapp.dll\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetappx64/\r\nrich@MacBook-Air dotnetapp % codesign -s - dotnetappx64/dotnetapp\r\nrich@MacBook-Air dotnetapp % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air dotnetapp % ./dotnetappx64/dotnetapp \r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % rm -r bin obj\r\nrich@MacBook-Air dotnetapp % /usr/local/share/dotnet/x64/dotnet build\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-07+073022eb4 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /Users/rich/git/dotnet-docker/samples/dotnetapp/dotnetapp.csproj (in 133 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n  dotnetapp -> /Users/rich/git/dotnet-docker/samples/dotnetapp/bin/Debug/net6.0/dotnetapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:05.20\r\n```\r\n\r\nThat worked. Once the `x64` directory is established as a known location, the `DOTNET_ROOT` ENV won't need to be set by default.\r\n\r\n## Using .NET global Tools\r\n\r\n.NET global tools are a specific apphost use case. Let's see how it plays out.\r\n\r\nLet's validate that we're starting from a clean slate.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % rm -r .dotnet/tools \r\nrich@MacBook-Air ~ % dotnet tool list -g\r\nPackage Id      Version      Commands\r\n-------------------------------------\r\n```\r\n\r\nNow let's install and use my favorite tool with the Arm64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo\r\nzsh: killed     dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % codesign -s - ~/.dotnet/tools/dotnet-runtimeinfo \r\nrich@MacBook-Air ~ % dotnet-runtimeinfo \r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nIt appears that .NET tools need to be notarized. That's a problem. After that, the tools work.\r\n\r\nGiven that the tools use apphost, let's see if we can start an Arm64 tools with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo\r\n**.NET information\r\nVersion: 6.0.0\r\nFrameworkDescription: .NET 6.0.0-preview.3.21201.4\r\nLibraries version: 6.0.0-preview.3.21201.4\r\nLibraries hash: 236cb21e3c1992c8cee6935ce67e2125ac4687e8\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: Arm64\r\nProcessorCount: 8\r\n```\r\n\r\nWe can. That's not necessarily super useful, but good to know it works. Naturally, the tool sticks to being an Arm64 tools.\r\n\r\nLet's now try the opposite approach, with the x64 SDK.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % dotnet tool uninstall -g dotnet-runtimeinfo     \r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully uninstalled.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool install -g dotnet-runtimeinfo\r\nYou can invoke the tool using the following command: dotnet-runtimeinfo\r\nTool 'dotnet-runtimeinfo' (version '1.0.4') was successfully installed.\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet tool list -g           \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet tool list -g \r\nPackage Id              Version      Commands          \r\n-------------------------------------------------------\r\ndotnet-runtimeinfo      1.0.4        dotnet-runtimeinfo\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                             \r\nFailed to load /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, error: dlopen(/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib, 1): no suitable image found.  Did find:\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\n\t/usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib: mach-o, but wrong architecture\r\nThe library libhostfxr.dylib was found, but loading it from /usr/local/share/dotnet/host/fxr/6.0.0-preview.3.21201.4/libhostfxr.dylib failed\r\n  - Installing .NET prerequisites might help resolve this problem.\r\n     https://go.microsoft.com/fwlink/?linkid=2063366\r\nrich@MacBook-Air ~ % export DOTNET_ROOT=/usr/local/share/dotnet/x64\r\nrich@MacBook-Air ~ % dotnet-runtimeinfo                            \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % /usr/local/share/dotnet/x64/dotnet runtimeinfo \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n\r\nrich@MacBook-Air ~ % dotnet runtimeinfo                           \r\n**.NET information\r\nVersion: 5.0.5\r\nFrameworkDescription: .NET 5.0.5\r\nLibraries version: 5.0.5\r\nLibraries hash: 2f740adc1457e8a28c1c072993b66f515977eb51\r\n\r\n**Environment information\r\nOSDescription: Darwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\nOSVersion: Unix 11.3.0\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\n```\r\n\r\nInteresting. \r\n\r\n- The basic experience is identical, except the opposite of using the Arm64 SDK. As demonstrated, `dotnet-runtimeinfo` is now an x64 tool, but can be launched in all the same ways.\r\n- Tools can be discovered and managed with either the x64 or Arm64 SDKs. There is no mention of their architecture. It seems there is a flaw or a missing feature(s) there. Not a huge concern.\r\n- The `DOTNET_ROOT` ENV needs to be set (unsurprisingly) to find the .NET runtime. Once the `x64` directory is understood as a known location, that won't be necessary.\r\n- For some reason, the x64 apphost doesn't need to be notarized. That may be temporary or the permanent solution. Perhaps the x64 notarization requirements track closely to macOS x64 (native architecture).\r\n\r\n## Better x64 `dotnet` UX\r\n\r\nAll the example require using an absolute path: `/usr/local/share/dotnet/x64/dotnet`. That's pretty arduous. I had to use `which dotnet` several times to get the base `dotnet` path, as the Unix-based file system scheme is hard for me to remember. What about symbolic links or aliases?\r\n\r\nLet's start with a symbolic link.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo ln -s /usr/local/share/dotnet/x64/dotnet /usr/local/bin/dotnetx64\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\nrich@MacBook-Air ~ % dotnetx64 new console -o app\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on app/app.csproj...\r\n  Determining projects to restore...\r\n  Restored /Users/rich/app/app.csproj (in 147 ms).\r\nRestore succeeded.\r\n\r\nrich@MacBook-Air ~ % cd app \r\nrich@MacBook-Air app % dotnetx64 run\r\nHello World!\r\nrich@MacBook-Air app % cd  \r\nrich@MacBook-Air ~ % cd git/dotnet-docker/samples/dotnetapp \r\nrich@MacBook-Air dotnetapp % dotnetx64 run\r\n         42\r\n         42              ,d                             ,d\r\n         42              42                             42\r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM\r\na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42\r\n8b       42 8b       d8  42    42       42 8PP\"\"\"\"\"\"\"   42\r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,\r\n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428\r\n\r\n.NET 6.0.0-preview.3.21201.4\r\nDarwin 20.4.0 Darwin Kernel Version 20.4.0: Fri Mar  5 01:14:02 PST 2021; root:xnu-7195.101.1~3/RELEASE_ARM64_T8101\r\n\r\nOSArchitecture: X64\r\nProcessorCount: 8\r\nrich@MacBook-Air dotnetapp % \r\n```\r\n\r\nLet's try an alias. I'll just set it directly, but you would want to set it in `.zshrc`, `.bashrc`, or the equivalent if you wanted the setting to be durable across terminal windows and sessions. Windows has similar capabilities you can use.\r\n\r\n```bash\r\nrich@MacBook-Air ~ % sudo rm /usr/local/bin/dotnetx64 \r\nPassword:\r\nrich@MacBook-Air ~ % dotnetx64\r\nzsh: command not found: dotnetx64\r\nrich@MacBook-Air ~ % alias dotnetx64=\"/usr/local/share/dotnet/x64/dotnet\"\r\nrich@MacBook-Air ~ % dotnetx64\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nrich@MacBook-Air ~ % dotnetx64 --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.3.21202.5\r\n Commit:    aee38a6dd4\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.3\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/x64/sdk/6.0.100-preview.3.21202.5/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.3.21201.4\r\n  Commit:  236cb21e3c\r\n\r\n.NET SDKs installed:\r\n  3.1.408 [/usr/local/share/dotnet/x64/sdk]\r\n  5.0.202 [/usr/local/share/dotnet/x64/sdk]\r\n  6.0.100-preview.3.21202.5 [/usr/local/share/dotnet/x64/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.3.21201.13 [/usr/local/share/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.3.21201.4 [/usr/local/share/dotnet/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nI don't think we should configure the x64 `dotnet` in either of these ways by default. They just demonstrate that users can configure their machines in ways that make them more productive, while still using .NET in a correct and supported way.\r\n\r\n## Conclusions\r\n\r\nThe good news is that the vast majority of the proposed experiences works well, and they appears largely tenable.\r\n\r\nWe should do some combination of the following, in priority order:\r\n\r\n- Update the x64 installers to install to the proposed new location on macOS and Windows Arm64 machines.\r\n- Update apphost to treat the `x64` directory as a known location (for the x64 apphost).\r\n- Enable discovery of .NET versions for all architectures on a machine, installed to known locations.\r\n  - `dotnet --info` should provide information on another architecture being present on the machine.\r\n- Improve error messages to direct users to better outcomes. \r\n  - Direct users to a required version that is already installed, but for another architecture.\r\n  - Direct users to use the other architecture because the required version is known to not be available for the current architecture (for example .NET 5 on Apple Silicon).\r\n  - Direct users to use `dotnet run` and `dotnet test` with architecture specific builds when cross architectures.\r\n- Implement the `codesign` technique used in the examples as a first class feature so that we can re-enable the apphost on macOS, for apps in general and [global tools in particular](https://github.com/dotnet/sdk/issues/17143).\r\n- Enable explicit flows from one architecture to the other, for example by enabling users to specify an alternate architecture to `dotnet run` and `dotnet test`.\r\n\r\nThe simulated example UX demonstrated above (assuming we productize it) is a great step forward compared to what we have today, but it isn't good enough to ship. We need to make the product easier to use. We know that x64 emulation will be important, at least at first. On Windows, it may be an important part of the developer experience for a long time. We need to prepare for that likely outcome, and for x64 on Arm64 machines being more relevant than x86 is on Windows x64 today.\r\n\r\nThere are developer experiences that were not tested. It is very likely that there are important experiences that still need to be considered.","Url":"https://github.com/dotnet/sdk/issues/17463","RelatedDescription":"Closed issue \"Supporting .NET with x64 emulation on Arm64\" (#17463)"},{"Id":"876985253","IsPullRequest":false,"CreatedAt":"2021-05-06T01:42:27","Actor":"richlander","Number":"17464","RawContent":null,"Title":"x64 emulation model","State":"closed","Body":"# x64 emulation model\r\n\r\nWe're working on a [plan to support .NET for x64 emulation on Arm64](https://github.com/dotnet/sdk/issues/17463), on macOS and Windows. There are multiple decision points that we are needing to navigate to make a decision. This document is intended to explore those.\r\n\r\nThe following issues are the fundamental decision points. The choices we make for each will have significant downstream and user observable impact.\r\n\r\n- Install location\r\n- Model for targeting architecture\r\n- Which .NET versions are supported (for x64 emulation)?\r\n- Quality of the experience (how polished is it?)\r\n\r\n## Install location\r\n\r\nGoal: .NET is installed to a disk location(s) that makes sense across time and space.\r\n\r\nWe have to install the .NET x64 product *somewhere* on Arm64 machines. We can install it in a `dotnet-x64` directory (or similar variant), as a peer to `dotnet` or as child of the `dotnet` directory within a new `x64` directory. We decided on the latter. The former sticks out like a sore thumb. The layout within the `x64` directory will be the exact same as a native architecture x64 installation.\r\n\r\nThe expected install location of x64 .NET on Arm64:\r\n\r\n- macOS: `/usr/local/share/dotnet/x64`\r\n- Windows: `C:\\Program Files\\dotnet\\x64`\r\n\r\nThere are a few implications of this decision.\r\n\r\n- We'll only add the parent `dotnet` directory to the `PATH`, which means that only the native architecture installation will be usable when you type `dotnet`.\r\n- It will be possible for a machine to have .NET x64 installed by itself, with no Arm64 .NET. That means that the `dotnet` directory would be empty, with the exception of the `x64` directory. It also means that the `PATH` would not be set at all (for .NET).\r\n- If x64 builds of Visual Studio for Windows or Visual Studio for Mac are installed on Arm64, then they will need to install the Arm64 .NET SDK and/or adapt those products to .NET x64 being installed in the `x64` directory.\r\n\r\nWe could install .NET x64 to another location, but the implications would be the same.\r\n\r\n## Model for targeting architecture\r\n\r\nGoal: Enable developers to produce architecture-specific assets correctly and with confidence.\r\n\r\nThe .NET application model is oriented around rid-specific apps. In particular, the apphost is rid-specific, and the apphost ia a core part of the experience. In some scenarios, you don't have to pay much attention to the rid of the apphost. For example, if you exclusively develop on *and* target Windows x64, then rid-targeting isn't really important, even though it is present. If your development and target environment differ, then you need to directly participate in rid-targeting.\r\n\r\nIn the typical scenario, you can develop on your machine, for example Windows x64, and then not need to consider rid-targeting until you are ready to test on or deploy to Linux x64, for example. x64 emulation places new requirements on developers to participate in RID-targeting during inner loop development. That's new.\r\n\r\nThe core issue is that some .NET versions are available for one rid and not the other. That means that you need to explicitly target the matching rid in some way. There are three choices for that, two of which are already supported today and one not.\r\n\r\n### Rely on the implicit rid of the SDK\r\n\r\nIn theory, the easiest approach is to simply use the matching SDK for the rid you want to target. That's the model used in the \"developing and targeting on Windows x64\" example discussed earlier.\r\n\r\nThere are problems with this model:\r\n\r\n- Using the x64 SDK will be a substandard experience, primarily due to it not being in the `PATH`. On macOS, you can either type `/usr/local/share/dotnet/x64/dotnet`, prepend that directory to the `PATH`, create a shell alias, or create a symbolic link (in `/usr/local/bin`). Some of those same options exist on Windows.\r\n- Users will find it confusing and unpleasant to need to pivot between the x64 and Arm64 SDKs as a means of targeting a .NET version (short-term problem) or RID (long-term problem).\r\n- This form of targeting will be untenable for many open source projects. Our GitHub repos don't have this problem because we always download the correct SDK via our build and test scripts. Assumption: Many other projects don't.\r\n\r\nIDEs would need to do this same pivoting. That means that they would need to install and update SDKs for two different RIDs and provide an experience for the user to switch between those SDKs, which might be the next option.\r\n\r\n### Rely on explicit RID targeting in the user project file\r\n\r\nThe .NET SDK can build for multiple TFMs and RIDs. Starting with .NET 6, it can also cross-compile for different architectures, for compiling IL to native code (crossgen2).\r\n\r\nThe premise of this option is that developers use the native architecture SDK and rely on its capability to produce compatible assets for the emulated architecture.\r\n\r\nCurrently, the best experience for explicit RID targeting is declaring the target (and singular) RID in the project file. There are other options but they don't work well.\r\n\r\nThe following project file uses explicit RID targeting, and maintains the framework-dependent default for .NET apps.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <RuntimeIdentifier>osx-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe `UseAppHost` property isn't strictly needed, but is a topic we need to resolve for macOS. It is included solely to spur conversation and ensure we don't forget a significant issue.\r\n\r\nThe upside of this plan is that this model is supported today and doesn't require any work (beyond resolving the apphost challenges on macOS). The downside is that is regression in experience. It has the following problems:\r\n\r\n- Projects files get longer and more complicated, for users that need (or are required) to use x64 emulation.\r\n- Project files are no longer portable across machines. This would be a deal killer for teams (or open source projects) that has users with multiple machine types. For example, dotnet org repos would never be able to implement this technique.\r\n\r\n### Rely on implicit RID defaults\r\n\r\nThere are two quite different user scenarios to satisfy, which don't require the same solution. The first is targeting a .NET version (like .NET Core 3.1) that is only available for one architecture for a given operating system and the second is targeting a specific architecture for testing purposes for a .NET version that is available for multiple architectures (like .NET 6). The former is a short-term problem and the latter is not.\r\n\r\nWe already have a concept of the SDK having an implicit RID for the SDK. We can pivot that by .NET version.\r\n\r\nThe following is an example of implicit RIDs we would use on macOS:\r\n\r\n- .NET 6: osx-arm64\r\n- .NET 5: osx-x64\r\n- .NET Core 3.1: osx-x64\r\n\r\nThis approach would enable developers to use the Arm64 SDK without needing any special gestures. For example `dotnet run` of a .NET 5 app using the Arm64 SDK would result in running a .NET 5 app with the x64 runtime (assuming the .NET 5 x64 runtime was installed).\r\n\r\nThis experience would also enable us to provide better error messages for users if they try to run or test a .NET 5 app with the .NET 6 SDK.\r\n\r\nThe upside of this option is that it provides automatic behaviors. There are two major downsides:\r\n\r\n- It would need to respect `DOTNET_ROLL_FORWARD` or provide some other opt-out. The lack of that could be a deal killer, particularly for global tools.\r\n- This model only works for old versions, not to .NET 6. In reality, this option is almost entirely .NET Core 3.1 specific (since .NET 5 will go EOL so soon after .NET 6 is released).\r\n\r\n## Provide a new model for RID targeting\r\n\r\nThere are multiple problems with RID-targeting today that make it inconvenient and confusing.\r\n\r\n- RID-specific apps are self-contained by default, which breaks multiple experiences.\r\n- You can specify a RID for `dotnet build` but you cannot specify that you want to maintain the framework-dependent nature of the app with another (native) CLI argument. You can use an MSBuild property for this case `/p:SelfContained=false`. That's really terrible UX.\r\n- RIDs are these special codes that are hard to remember (particularly `osx`). In the case of x64 emulation, you only want to pivot on architecture, not operating system. We should provide an easy mode to enables specifying an architecture without an OS.\r\n- An explicit RID and an implicit one are not symmetric. They are the same as it relates to apphost generation, however, the implict RID defaults to portable apps and the explicit RID defaults to architecture-specific apps. This behavior will become increasingly obvious.\r\n- `dotnet publish` of a RID-specific app produces two copies of the final app, and it isn't clear which one to use.\r\n\r\nWe haven't defined a new model. In short, it would need to resolve the problems with RID targeting that we have today.\r\n\r\nAssuming we had a new model, it would have these general characteristics:\r\n\r\n- Users can pivot between architecture or RIDs on the command-line for all the relevant .NET verbs (like `dotnet test`) while maintaining the framework-dependent nature of their app.\r\n- You can specify just architecture as an easy mode, when that's relevant.\r\n- Pivoting by architecture doesn't rewrite builds in your bin folder.\r\n- Incremental build works.\r\n- Roll forward participates in RID selection. It is easy to coerce apps to roll forward (to enable using the native architecture), particularly for `dotnet tool install`.\r\n\r\nNote: these changes may or not be breaking. There are both breaking and non-breaking options to satisfy these characteristics.\r\n\r\n## Which .NET Versions are supported with x64 emulation\r\n\r\nGoal: Support the .NET versions that developers expect to use on Arm64, particularly if an Apple Silicon Mac or Surface Pro X is their only development device.\r\n\r\nWe've just spent a lot of effort getting .NET Core 3.1 and .NET Core 3.1 to work on Apple Silicon, with Apple. Of course they are supported! Also, it would be a major regression to remove .NET Core 3.1 and .NET 5 targeting from Visual Studio for Mac users on Apple Silicon.\r\n\r\nOn the other hand, the change to install location for .NET x64 builds is very disruptive, and we'd prefer not to pay it for all versions.\r\n\r\nZooming out, all in-support versions are supported for x64 emulation. It's easiest to consider that for self-contained apps. A self-contained .NET Core 3.1 app built for `osx-x64` is supported on Apple Silicon machines.\r\n\r\nThe big question is how to manage global installs, particularly for the developer desktop. That's where the disruptive change, of requiring .NET x64 builds to install in an `x64` directory, is relevant.\r\n\r\nWe cannot make an informed decision until we understand what we're doing for RID targeting, discussed earlier. The decisions are co-dependent.\r\n\r\nWe can put some stakes in the ground (some hard, some soft):\r\n\r\n- We need x64 runtime installers.\r\n- We need x64 .NET Core 3.1 runtime installers for sure.\r\n- We can likely get away without updating/supporting x64 .NET 5 runtime installers given the proximity of .NET EOL to .NET 6 RTM.\r\n- ASP.NET Core does not have a macOS runtime installer. We may need one, dependent on our plan for the x64 .NET SDK.\r\n- We may not need to update/support x64 SDK installers, dependent on whether decisions on RID targeting mean the SDK must match the architecture or the native SDK can target either Arm64 or x64.\r\n\r\n## Proposals\r\n\r\nAs suggested, multiple of the options are co-dependent. The following section describes three options with varying UX and cost. There is some opportunity for mix and match between these options.\r\n\r\n### Option 0: Do nothing\r\n\r\nThis option articulates the no cost option.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start. You can only have one architecture installed at once.\r\n- **Supported x64 installers (for coexistence):**\r\n  - None\r\n- **Unsupported installers (for coexistence)**\r\n  -  All x64 installers\r\n\r\nNote: Every time you switch between Arm64 and x64, you need to uninstall .NET. On macOS, you have to `rm -rf` the `dotnet` directory.\r\n\r\nNote: This back-and-forth option would be untenable for VS for Mac. With this option, VS for Mac would either have to support x64 only or .NET 6+ only (as native architecture). The same thing applies to VS for Windows should it be supported (as an x64 app) on Windows Arm64.\r\n\r\nNote: Alternatively IDEs could support Arm64 with a global install and x64 to an alternative location (admin or user space). That's likely not tenable either. That means that .NET users and the IDE might install to different locations. As Microsoft (or DevDiv), if we need to durable location for .NET, then we need to define it.\r\n\r\n### Option 1: UX insensitive; cost sensitive\r\n\r\nThis option is intended as the lowest cost option. It's the MVP for x64 emulation support.\r\n\r\n- **RID UX:** Rely on the implicit rid of the SDK\r\n- **SDK guidance:** Use the .NET 6 SDK (x64 or Arm64) that matches the process type you want to start.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - Install ASP.NET Core 3.1 ASP.NET Core via tar.gz on macOS.\r\n- **Unsupported installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\n### Option 2: Balanced between UX and cost\r\n\r\nThis option is intended as a balance between UX and cost, and also intending to do the minimum work now while retaining the option to do more later.\r\n\r\n- **RID UX:** Rely on implicit RID defaults, per .NET version.\r\n- **SDK guidance:** Use the Arm64 .NET 6 SDK, by default. Fallback to x64, as needed.\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 SDK\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - New x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  Pre .NET 6 x64 SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\nNote: One oddity of this plan is that it is easier to use x64 emulation with .NET Core 3.1 than .NET 6.\r\n\r\n### Option 3: UX sensitive; cost insensitive\r\n\r\nThis option is intended as the most user friendly option. It's the best experience we could imagine providing. It is expected to be the most expensive and least defined (at least currently).\r\n\r\n- **RID UX:** New model for RID targeting\r\n- **SDK guidance:** Always use the .NET 6+ Arm64 SDK\r\n- **Supported x64 installers (for coexistence):**\r\n  - x64 .NET 6 runtimes\r\n  - x64 .NET 5 runtimes\r\n  - x64 .NET Core 3.1 runtimes\r\n  - [New] x64 .NET 3.1+ ASP.NET Core runtimes for macOS\r\n- **Unsupported x64 installers (for coexistence)**\r\n  -  x64 .NET SDKs\r\n\r\nNote: If we provide new x64 macOS installers, we should consider doing same for Arm64.\r\n\r\n## Recommendation\r\n\r\nAs expected, the UX of these options gets considerably worse, with the options (in order).\r\n\r\nOption 1 would be a very hard to deliver as-is. The experience of using [.NET global tools](https://github.com/dotnet/sdk/issues/17241) is the worst-case experience but is generally descriptive of the UX of relying on the implicit RID targeting of the SDK for x64-only .NET versions.\r\n\r\nOption 2 is tenable. It's primary challenge is that it is a nuanced behavior, and works best for the oldest supported runtime, not the newest one. The requirement of making the implicit RID sensitive to .NET version (including for global tools) is uncosted.\r\n\r\nOption 3 is the architecturally sound option with the best UX. It provides more uniform capabilities across all .NET versions. It is also uncosted.\r\n\r\nThe cost delta between options 2 and 3 is unknown. It's quite likely that we'd decide that option 2 is a subset of option 3.\r\n\r\nActual Plan:\r\n\r\n- Commit to delivering option 1.\r\n- Cost and design options 2 and 3.\r\n- Determine if we fund options 2 and 3 in .NET 6.\r\n\r\nWe decided that option 3 will result in CLI breaking changes. While option 2 could theoretically be delivered between .NET 6 and .NET 7 with a .NET SDK update (like `6.0.200`), option 3 can only be delivered with a major release. It is also fair to note that the breaking changes associated with option 3 are not dependent on option 2. We could in theory make the breaking changes for option 3 now, enabling the remaining work to be done either before .NET 6 or in a .NET SDK update.\r\n\r\nNote: These plans assume that Visual Studio (Dev17) will not be supported on Windows Arm64 (with x64 emulation) before .NET 7. They also assume that Visual Studio for Mac will adapt to this plan, aligned with .NET 6. If those are not true, then we need to re-assess this plan.\r\n","Url":"https://github.com/dotnet/sdk/issues/17464","RelatedDescription":"Closed issue \"x64 emulation model\" (#17464)"},{"Id":"876936673","IsPullRequest":true,"CreatedAt":"2021-05-06T00:45:31","Actor":"dotnet-maestro[bot]","Number":"17459","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.8\r\n- **Date Produced**: 5/5/2021 11:10 PM\r\n- **Commit**: 6193393b793e556d21fd307cdf4d2ed36de93823\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.6 to 6.0.0-preview.5.21255.8][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/4d31911...6193393\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17459","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17459)"},{"Id":"876939797","IsPullRequest":false,"CreatedAt":"2021-05-05T23:36:02","Actor":"benaadams","Number":"17461","RawContent":null,"Title":"Current 6.0 SDK building in VS errors with 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found.","State":"open","Body":"In VS building a mostly empty web project fails with \r\n```\r\n1>------ Rebuild All started: Project: WebApplication1, Configuration: Release Any CPU ------\r\n1>C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.5.21255.14\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.ImportWorkloads.props(14,3):\r\n error : C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.5.21255.14\\Sdks\\Microsoft.NET.SDK.WorkloadAutoImportPropsLocator\\Sdk not found.\r\n Check that a recent enough .NET SDK is installed and/or increase the version specified in global.json.\r\n\r\n1>C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.5.21255.14\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.ImportWorkloads.props(14,38):\r\n error MSB4236: The SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found.\r\n\r\n1>Done building project \"WebApplication1.csproj\" -- FAILED.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n```\r\nAt CLI it suceeds by has a different warning (which is https://github.com/dotnet/sdk/issues/17388)\r\n```\r\nMicrosoft (R) Build Engine version 16.11.0-preview-21254-21+e73d08c28 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored C:\\Users\\thund\\source\\repos\\WebApplication1\\WebApplication1\\WebApplication1.csproj (in 62 ms).\r\n  You are using a preview version of .NET. See: https://aka.ms/dotnet-core-preview\r\n\r\nC:\\Program Files\\dotnet\\sdk\\6.0.100-preview.5.21255.14\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5):\r\n warning NETSDK1048: 'AdditionalProbingPaths' were specified for GenerateRuntimeConfigurationFiles,\r\n but are being skipped because 'RuntimeConfigDevPath' is empty. \r\n\r\n[C:\\Users\\thund\\source\\repos\\WebApplication1\\WebApplication1\\WebApplication1.csproj]\r\n  WebApplication1 -> C:\\Users\\thund\\source\\repos\\WebApplication1\\WebApplication1\\bin\\Debug\\net6.0\\win-x64\\WebApplication1.dll\r\n\r\nBuild succeeded.\r\n```","Url":"https://github.com/dotnet/sdk/issues/17461","RelatedDescription":"Open issue \"Current 6.0 SDK building in VS errors with 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found.\" (#17461)"},{"Id":"876936867","IsPullRequest":true,"CreatedAt":"2021-05-05T23:28:20","Actor":"pranavkm","Number":"17460","RawContent":null,"Title":"Update the conventions for discovering and invoking metadata update handlers","State":"open","Body":"* Introduce ClearCache and UpdateApplication action names\r\n* Invoke actions in topologically sorted order.\r\n\r\nContributes to https://github.com/dotnet/runtime/issues/51545","Url":"https://github.com/dotnet/sdk/pull/17460","RelatedDescription":"Open PR \"Update the conventions for discovering and invoking metadata update handlers\" (#17460)"},{"Id":"876892392","IsPullRequest":true,"CreatedAt":"2021-05-05T23:25:09","Actor":"dotnet-maestro[bot]","Number":"17457","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.6\r\n- **Date Produced**: 5/5/2021 9:17 PM\r\n- **Commit**: 4d3191176696d69a289ec465c38f2374553ed324\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.4 to 6.0.0-preview.5.21255.6][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/58b4f96...4d31911\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17457","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17457)"},{"Id":"876892438","IsPullRequest":true,"CreatedAt":"2021-05-05T23:20:14","Actor":"dotnet-maestro[bot]","Number":"17458","RawContent":null,"Title":"[main] Update dependencies from mono/linker","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4a865c13-5e52-41f5-3916-08d8e9750bf8)\r\n## From https://github.com/mono/linker\r\n- **Subscription**: 4a865c13-5e52-41f5-3916-08d8e9750bf8\r\n- **Build**: 20210505.1\r\n- **Date Produced**: 5/5/2021 9:47 PM\r\n- **Commit**: 031093e11a60c54f06348208fdf91b67f49b5f1c\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NET.ILLink.Analyzers**: [from 6.0.100-preview.5.21254.1 to 6.0.100-preview.5.21255.1][1]\r\n  - **Microsoft.NET.ILLink.Tasks**: [from 6.0.100-preview.5.21254.1 to 6.0.100-preview.5.21255.1][1]\r\n\r\n[1]: https://github.com/mono/linker/compare/4afa105...031093e\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4a865c13-5e52-41f5-3916-08d8e9750bf8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17458","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from mono/linker\" (#17458)"},{"Id":"876819786","IsPullRequest":true,"CreatedAt":"2021-05-05T21:55:49","Actor":"dotnet-maestro[bot]","Number":"17456","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.4\r\n- **Date Produced**: 5/5/2021 8:26 PM\r\n- **Commit**: 58b4f96fe3fc06cd0fa8848601fa798f2d93e303\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.3 to 6.0.0-preview.5.21255.4][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/4d97221...58b4f96\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17456","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17456)"},{"Id":"876309175","IsPullRequest":true,"CreatedAt":"2021-05-05T21:40:56","Actor":"dotnet-maestro[bot]","Number":"17441","RawContent":null,"Title":"[release/5.0.3xx] Update dependencies from microsoft/vstest","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b4754456-bab5-48e6-093c-08d8ff7930ba)\r\n## From https://github.com/microsoft/vstest\r\n- **Subscription**: b4754456-bab5-48e6-093c-08d8ff7930ba\r\n- **Build**: 20210505-01\r\n- **Date Produced**: 5/5/2021 10:32 AM\r\n- **Commit**: 655e643718ed2da9fff4c3b3d65cafc79a0ecb97\r\n- **Branch**: refs/heads/rel/16.10\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NET.Test.Sdk**: [from 16.10.0-release-20210504-02 to 16.10.0-release-20210505-01][1]\r\n\r\n[1]: https://github.com/microsoft/vstest/compare/2acc8af...655e643\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:b4754456-bab5-48e6-093c-08d8ff7930ba)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17441","RelatedDescription":"Closed or merged PR \"[release/5.0.3xx] Update dependencies from microsoft/vstest\" (#17441)"},{"Id":"876813845","IsPullRequest":true,"CreatedAt":"2021-05-05T20:36:37","Actor":"sfoslund","Number":"17455","RawContent":null,"Title":"Workload manifest updates PR feedback","State":"open","Body":"Responding to after the fact feedback on https://github.com/dotnet/sdk/pull/16891","Url":"https://github.com/dotnet/sdk/pull/17455","RelatedDescription":"Open PR \"Workload manifest updates PR feedback\" (#17455)"},{"Id":"876724459","IsPullRequest":true,"CreatedAt":"2021-05-05T19:32:37","Actor":"dotnet-maestro[bot]","Number":"17452","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.3\r\n- **Date Produced**: 5/5/2021 5:50 PM\r\n- **Commit**: 4d97221b4dcc06455d0897c9ff886e0b24e33ca3\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.2 to 6.0.0-preview.5.21255.3][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/a6c7f76...4d97221\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17452","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17452)"},{"Id":"876737663","IsPullRequest":false,"CreatedAt":"2021-05-05T18:46:15","Actor":"alexrp","Number":"17454","RawContent":null,"Title":"GenerateToolsSettingsFile causes incremental build issues","State":"open","Body":"The `GenerateToolsSettingsFile` task unconditionally writes `DotnetToolSettings.xml` on every build. This causes issues with incremental builds; specifically, `dotnet pack` will always generate a fresh package because the `GenerateNuspec` target considers this file as one of its inputs.\r\n\r\nI'm not sure what the proper fix is here. Maybe `GenerateToolsSettingsFile` should compare the generated document with the existing file and only write the document if it's different?","Url":"https://github.com/dotnet/sdk/issues/17454","RelatedDescription":"Open issue \"GenerateToolsSettingsFile causes incremental build issues\" (#17454)"},{"Id":"876727059","IsPullRequest":false,"CreatedAt":"2021-05-05T18:31:23","Actor":"MihaZupan","Number":"17453","RawContent":null,"Title":"GenerateRuntimeConfigurationFiles error when updating to preview.5.21253.6","State":"open","Body":"I'm seeing the following build error when using SDK version [`6.0.100-preview.5.21253.6`](https://dev.azure.com/dnceng/internal/_build/results?buildId=1119161&view=results) or newer:\r\n\r\n> .dotnet\\sdk\\6.0.100-preview.5.21253.6\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(255,5): error NETSDK1048: 'AdditionalProbingPaths' were specified for GenerateRuntimeConfigurationFiles, but are being skipped because 'RuntimeConfigDevPath' is empty.\r\n\r\nThe error is not present with [`6.0.100-preview.5.21253.4`](https://dev.azure.com/dnceng/internal/_build/results?buildId=1118972&view=results).\r\n\r\nJudging from the error message and time of the SDK builds, I assume this has to do with #17014?\r\n\r\nIs there something we have to update in our repo to work around this issue?\r\n\r\n(For reference, we're hitting this in microsoft/reverse-proxy#972 when trying to move to net6.0 targets)","Url":"https://github.com/dotnet/sdk/issues/17453","RelatedDescription":"Open issue \"GenerateRuntimeConfigurationFiles error when updating to preview.5.21253.6\" (#17453)"},{"Id":"876669813","IsPullRequest":true,"CreatedAt":"2021-05-05T18:25:42","Actor":"dotnet-maestro[bot]","Number":"17449","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.2\r\n- **Date Produced**: 5/5/2021 4:42 PM\r\n- **Commit**: a6c7f768ef10b8bce34f5db7c8a8594106efb8a5\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21255.1 to 6.0.0-preview.5.21255.2][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/987f20c...a6c7f76\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17449","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17449)"},{"Id":"876712308","IsPullRequest":false,"CreatedAt":"2021-05-05T18:11:10","Actor":"daniv-msft","Number":"17451","RawContent":null,"Title":"CLI's --list-runtimes doesn't work well with UTF-8 characters","State":"open","Body":"Hello,\r\n\r\nMy product relies on the .NET CLI for some operations, and specifically parses the output of the \"dotnet --list-runtimes\" command.\r\nThis doesn't work well however whenever a runtime is present on a path containing UTF-8 characters, as the CLI seem to convert these characters to something else:\r\n![image](https://user-images.githubusercontent.com/48293037/117188984-813cad80-ad92-11eb-94c1-9ff8790a575d.png)\r\n\r\n.NET CLI version: 5.0.202","Url":"https://github.com/dotnet/sdk/issues/17451","RelatedDescription":"Open issue \"CLI's --list-runtimes doesn't work well with UTF-8 characters\" (#17451)"},{"Id":"876683194","IsPullRequest":true,"CreatedAt":"2021-05-05T17:51:51","Actor":"dotnet-maestro[bot]","Number":"17450","RawContent":null,"Title":"[release/6.0.1xx-preview4] Update dependencies from dotnet/msbuild","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:f3da650c-3ec0-4a87-5a84-08d8ff79a3bc)\r\n## From https://github.com/dotnet/msbuild\r\n- **Subscription**: f3da650c-3ec0-4a87-5a84-08d8ff79a3bc\r\n- **Build**: 20210505.15\r\n- **Date Produced**: 5/5/2021 5:16 PM\r\n- **Commit**: b02f8de7e24d541df1d8c7d71cf8036d0ce91213\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Build.Localization**: [from 16.11.0-preview-21254-21 to 17.0.0-preview-21255-15][1]\r\n  - **Microsoft.Build**: [from 16.11.0-preview-21254-21 to 17.0.0-preview-21255-15][1]\r\n\r\n[1]: https://github.com/dotnet/msbuild/compare/e73d08c...b02f8de\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:f3da650c-3ec0-4a87-5a84-08d8ff79a3bc)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17450","RelatedDescription":"Closed or merged PR \"[release/6.0.1xx-preview4] Update dependencies from dotnet/msbuild\" (#17450)"},{"Id":"876608961","IsPullRequest":true,"CreatedAt":"2021-05-05T17:13:17","Actor":"dotnet-maestro[bot]","Number":"17448","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210505.1\r\n- **Date Produced**: 5/5/2021 3:42 PM\r\n- **Commit**: 987f20cae50649d94d53e0a082f5c84aaea0e868\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21254.21 to 6.0.0-preview.5.21255.1][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/665ea2f...987f20c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17448","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17448)"},{"Id":"876395902","IsPullRequest":true,"CreatedAt":"2021-05-05T14:37:35","Actor":"dotnet-maestro[bot]","Number":"17446","RawContent":null,"Title":"[release/5.0.3xx] Update dependencies from dotnet/roslyn","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:85f5ec6e-f5c5-4359-f8d5-08d8ff79321c)\r\n## From https://github.com/dotnet/roslyn\r\n- **Subscription**: 85f5ec6e-f5c5-4359-f8d5-08d8ff79321c\r\n- **Build**: 20210504.26\r\n- **Date Produced**: 5/4/2021 7:09 PM\r\n- **Commit**: 7b996850bb82a370ca74c3f57e0a4d4df1c90049\r\n- **Branch**: refs/heads/main-vs-deps\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Net.Compilers.Toolset**: [from 4.0.0-2.21254.8 to 4.0.0-2.21254.26][1]\r\n\r\n[1]: https://github.com/dotnet/roslyn/compare/28bd07c...7b99685\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:85f5ec6e-f5c5-4359-f8d5-08d8ff79321c)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17446","RelatedDescription":"Closed or merged PR \"[release/5.0.3xx] Update dependencies from dotnet/roslyn\" (#17446)"},{"Id":"876383716","IsPullRequest":true,"CreatedAt":"2021-05-05T13:47:16","Actor":"dotnet-maestro[bot]","Number":"17442","RawContent":null,"Title":"[release/5.0.3xx] Update dependencies from dotnet/msbuild","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08d8569c-a921-4400-1fc7-08d8c8766580)\r\n## From https://github.com/dotnet/msbuild\r\n- **Subscription**: 08d8569c-a921-4400-1fc7-08d8c8766580\r\n- **Build**: 20210504.21\r\n- **Date Produced**: 5/4/2021 10:25 PM\r\n- **Commit**: e73d08c28b0d4f72bf6cf6ad9a412f35b477a430\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Build.Localization**: [from 16.10.0-preview-21253-02 to 16.11.0-preview-21254-21][1]\r\n  - **Microsoft.Build**: [from 16.10.0-preview-21253-02 to 16.11.0-preview-21254-21][1]\r\n\r\n[1]: https://github.com/dotnet/msbuild/compare/fa96a2a...e73d08c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:08d8569c-a921-4400-1fc7-08d8c8766580)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17442","RelatedDescription":"Closed or merged PR \"[release/5.0.3xx] Update dependencies from dotnet/msbuild\" (#17442)"},{"Id":"876401121","IsPullRequest":true,"CreatedAt":"2021-05-05T13:38:12","Actor":"dotnet-maestro[bot]","Number":"17447","RawContent":null,"Title":"[main] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdbeb850-6d82-4277-c391-08d8e9750d9d)\r\n## From https://github.com/dotnet/templating\r\n- **Subscription**: bdbeb850-6d82-4277-c391-08d8e9750d9d\r\n- **Build**: 20210505.2\r\n- **Date Produced**: 5/5/2021 12:11 PM\r\n- **Commit**: 8c00090eab4bbdade8e6b2d820558a24bb1c894f\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.TemplateSearch.Common**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n  - **Microsoft.TemplateEngine.Utils**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n  - **Microsoft.TemplateEngine.Orchestrator.RunnableProjects**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n  - **Microsoft.TemplateEngine.Cli**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n  - **Microsoft.TemplateEngine.Abstractions**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n  - **Microsoft.DotNet.Common.ItemTemplates**: [from 6.0.100-preview.5.21253.2 to 6.0.100-preview.5.21255.2][1]\r\n\r\n[1]: https://github.com/dotnet/templating/compare/7e14ef4...8c00090\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:bdbeb850-6d82-4277-c391-08d8e9750d9d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17447","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/templating\" (#17447)"},{"Id":"876393138","IsPullRequest":true,"CreatedAt":"2021-05-05T13:33:40","Actor":"dotnet-maestro[bot]","Number":"17444","RawContent":null,"Title":"[main] Update dependencies from dotnet/msbuild","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b9c2fc1-dee5-447e-827b-08d8e9754760)\r\n## From https://github.com/dotnet/msbuild\r\n- **Subscription**: 9b9c2fc1-dee5-447e-827b-08d8e9754760\r\n- **Build**: 20210504.21\r\n- **Date Produced**: 5/4/2021 10:25 PM\r\n- **Commit**: e73d08c28b0d4f72bf6cf6ad9a412f35b477a430\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.Build.Localization**: [from 16.10.0-preview-21253-02 to 16.11.0-preview-21254-21][1]\r\n  - **Microsoft.Build**: [from 16.10.0-preview-21253-02 to 16.11.0-preview-21254-21][1]\r\n\r\n[1]: https://github.com/dotnet/msbuild/compare/fa96a2a...e73d08c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:9b9c2fc1-dee5-447e-827b-08d8e9754760)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17444","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/msbuild\" (#17444)"},{"Id":"876391500","IsPullRequest":true,"CreatedAt":"2021-05-05T13:21:16","Actor":"dotnet-maestro[bot]","Number":"17443","RawContent":null,"Title":"[main] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:aa69f164-2492-460a-3914-08d8e9750bf8)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: aa69f164-2492-460a-3914-08d8e9750bf8\r\n- **Build**: 20210504.12\r\n- **Date Produced**: 5/5/2021 8:00 AM\r\n- **Commit**: 65020c946254c9a99497f4fdfa4136131f51f913\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.NETCore.DotNetHostResolver**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.NETCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.NET.HostModel**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.Extensions.DependencyModel**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.NETCore.App.Host.win-x64**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **Microsoft.NETCore.App.Ref**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **System.Reflection.MetadataLoadContext**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **System.Resources.Extensions**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **System.CodeDom**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **System.Security.Cryptography.ProtectedData**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **System.Text.Encoding.CodePages**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n  - **VS.Redist.Common.NetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21253.3 to 6.0.0-preview.5.21254.12][1]\r\n\r\n[1]: https://github.com/dotnet/runtime/compare/bb2d2c4...65020c9\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:aa69f164-2492-460a-3914-08d8e9750bf8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17443","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/runtime\" (#17443)"},{"Id":"876085844","IsPullRequest":true,"CreatedAt":"2021-05-05T06:59:56","Actor":"dotnet-maestro[bot]","Number":"17439","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210504.21\r\n- **Date Produced**: 5/5/2021 5:08 AM\r\n- **Commit**: 665ea2f868d916693ad1e243959349fa8e6d9647\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21254.20 to 6.0.0-preview.5.21254.21][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/eaf7639...665ea2f\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17439","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17439)"},{"Id":"876097635","IsPullRequest":false,"CreatedAt":"2021-05-05T06:14:12","Actor":"sahaaditya62","Number":"17440","RawContent":null,"Title":"dotnet build throwing error \"dotnet build Microsoft (R) Build Engine version 16.9.0+57a23d249 for .NET Copyright (C) Microsoft Corporation. All rights reserved.    ","State":"open","Body":"dotnet build\r\nMicrosoft (R) Build Engine version 16.9.0+57a23d249 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: The \"ResolveTargetingPackAssets\" task failed unexpectedly. [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: System.IO.FileNotFoundException: Could not find file '/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/data/FrameworkList.xml'. [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: File name: '/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/data/FrameworkList.xml' [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlTextReaderImpl.FinishInitUriString() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.AddReferencesFromFrameworkList(String frameworkListPath, String targetingPackRoot, String targetingPackDllFolder, ITaskItem targetingPack, List`1 referenceItems) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.ExecuteCore() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: The \"ResolveTargetingPackAssets\" task failed unexpectedly. [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: System.IO.FileNotFoundException: Could not find file '/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/data/FrameworkList.xml'. [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018: File name: '/usr/share/dotnet/packs/Microsoft.NETCore.App.Ref/5.0.0/data/FrameworkList.xml' [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlTextReaderImpl.FinishInitUriString() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.AddReferencesFromFrameworkList(String frameworkListPath, String targetingPackRoot, String targetingPackDllFolder, ITaskItem targetingPack, List`1 referenceItems) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.ExecuteCore() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n/usr/share/dotnet/sdk/5.0.202/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(326,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/aditya/dotnetproject/demo1/demo1.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.82\r\n","Url":"https://github.com/dotnet/sdk/issues/17440","RelatedDescription":"Open issue \"dotnet build throwing error \"dotnet build Microsoft (R) Build Engine version 16.9.0+57a23d249 for .NET Copyright (C) Microsoft Corporation. All rights reserved.    \" (#17440)"},{"Id":"876033773","IsPullRequest":true,"CreatedAt":"2021-05-05T05:53:02","Actor":"dotnet-maestro[bot]","Number":"17437","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210504.20\r\n- **Date Produced**: 5/5/2021 3:23 AM\r\n- **Commit**: eaf763996a447a5671b679e8e6edeb90d1578918\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21254.19 to 6.0.0-preview.5.21254.20][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/264b68c...eaf7639\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17437","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17437)"},{"Id":"876007079","IsPullRequest":true,"CreatedAt":"2021-05-05T04:37:10","Actor":"dotnet-maestro[bot]","Number":"17436","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210504.19\r\n- **Date Produced**: 5/5/2021 1:54 AM\r\n- **Commit**: 264b68cf9dc17b0e865b7fab6d6d55367523af0b\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21254.16 to 6.0.0-preview.5.21254.19][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/0c33806...264b68c\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17436","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17436)"},{"Id":"875982696","IsPullRequest":true,"CreatedAt":"2021-05-05T03:27:02","Actor":"dotnet-maestro[bot]","Number":"17435","RawContent":null,"Title":"[main] Update dependencies from dotnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n## From https://github.com/dotnet/aspnetcore\r\n- **Subscription**: 4491d9a4-839d-4af5-f3e4-08d8e97c775d\r\n- **Build**: 20210504.16\r\n- **Date Produced**: 5/5/2021 12:43 AM\r\n- **Commit**: 0c338065fcc16d90c3173c56f4f7a1d8f28fb922\r\n- **Branch**: refs/heads/main\r\n\r\n[DependencyUpdate]: <> (Begin)\r\n\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.App.Runtime.win-x64**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.App.Ref.Internal**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Analyzers**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **dotnet-user-secrets**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **dotnet-dev-certs**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.App.Ref**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.CodeAnalysis.Razor**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.TestHost**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **VS.Redist.Common.AspNetCore.SharedFramework.x64.6.0**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Components.Analyzers**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Razor.Language**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Mvc.Razor.Extensions**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Mvc.Api.Analyzers**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.Mvc.Analyzers**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat**: [from 6.0.0-preview.5.21254.9 to 6.0.0-preview.5.21254.16][1]\r\n\r\n[1]: https://github.com/dotnet/aspnetcore/compare/4a377ae...0c33806\r\n\r\n[DependencyUpdate]: <> (End)\r\n\r\n\r\n[marker]: <> (End:4491d9a4-839d-4af5-f3e4-08d8e97c775d)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/17435","RelatedDescription":"Closed or merged PR \"[main] Update dependencies from dotnet/aspnetcore\" (#17435)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"869369627","IsPullRequest":false,"CreatedAt":"2021-04-28T00:12:05","Actor":"mmitche","Number":"184","RawContent":null,"Title":".NET 6 will shift to a new signing certificate for some components","State":"open","Body":".NET 6 will shift to a new signing certificate for many of its core binaries. This shift is intended to make it easier for Windows Defender Application Control (WDAC) customers to choose whether to allow .NET 6 and beyond on their environments, without the side effects a key shared between multiple products might have.\r\n\r\n## Details\r\n\r\nToday Microsoft signs .NET artifacts with a variety of certificates. For example, NuGet packages, 3rd party binaries redistributed with .NET, Visual Studio extension packages, and some specialized debugging related binaries all have different certificates. The most common certificate is **Microsoft Corporation**, with issuer **Microsoft Code Signing PCA 2011** and thumbprint **abdca79af9dd48a0ea702ad45260b3c03093fb4b**, used to sign most executable files. .NET is switching to **.NET**, with issuer **Microsoft Code Signing PCA 2011** and thumbprint **60ff375e5669b98d43ea0e2328e618cf73c0f91d**.\r\n\r\nNot all binaries signed with **Microsoft Corporation** are shifting to the new certificate. .NET repackages a variety of assets from previous releases (e.g. targeting packs), and those will not change. Only newly built .NET 6 binaries will get the new certificate. Some tooling utilized in Visual Studio will remain on the existing cert.\r\n\r\n## Discussion\r\n---\r\nQuestions or concerns? Please discuss at https://github.com/dotnet/runtime/issues/51967","Url":"https://github.com/dotnet/announcements/issues/184","RelatedDescription":"Open issue \".NET 6 will shift to a new signing certificate for some components\" (#184)"},{"Id":"868291321","IsPullRequest":false,"CreatedAt":"2021-04-27T00:03:51","Actor":"jamshedd","Number":"183","RawContent":null,"Title":".NET Framework retiring SHA-1 content","State":"open","Body":"The .NET team is taking steps that will affect previously shipped .NET Framework releases and updates currently available for download from Microsoft. \r\n\r\nSee these for more information:\r\n\r\n[SHA-1 Retirement Statement](https://aka.ms/framework-sha1-retirement)\r\n[.NET Framework 4.5.2, 4.6, 4.6.1 End of Support announcement](https://aka.ms/framework-452-46-461-eos-blog)","Url":"https://github.com/dotnet/announcements/issues/183","RelatedDescription":"Open issue \".NET Framework retiring SHA-1 content\" (#183)"},{"Id":"860019790","IsPullRequest":false,"CreatedAt":"2021-04-16T17:28:32","Actor":"terrajobst","Number":"182","RawContent":null,"Title":"Migration to main completed","State":"open","Body":"As [previously announced](https://github.com/dotnet/announcements/issues/172), we have standardized the branch naming and use `main` as the default branch for all new repos moving forward. We have just completed the migration of all existing repos to `main` in the `dotnet` and `aspnet` organizations.\r\n\r\n![Migration status](https://user-images.githubusercontent.com/5169960/115061413-03296d00-9e9e-11eb-9c17-631237172cdb.png)\r\n\r\n## What about non-Microsoft owned repos?\r\n\r\nThere are other repos in the `dotnet` organization that aren't owned by Microsoft. It's up to the project maintainers to decide whether or not they want to rename their default branch as well. We decided that there is a value in having a unified naming convention across all our repos as opposed to having a split like \"new repos use `main`, existing repos use what they currently have\". But renaming the default branch is work and there is a reason it took as couple of months to complete the migration to `main`.\r\n\r\nIn case you're curious, [here are the steps we followed](https://aka.ms/m2m-dotnet).\r\n\r\n## What do I need to do?\r\n\r\n**You don't need to update your PRs**. If you submitted a PR against the old default branch, the GitHub tooling has automatically retargeted your PR against the new default branch (`main`).\r\n\r\nFor sanity, **you should rename the default branch in your fork as well**. When you go to your fork, GitHub will guide you through this experience:\r\n\r\n![Rename branch in fork](https://user-images.githubusercontent.com/5169960/105210186-92bdba80-5aff-11eb-99c9-0beb708fcf3f.png)\r\n\r\n**You will need to update the repos you cloned to your hard drive**. When you go to the original repository, GitHub will guide you through this experience:\r\n\r\n![Update local repo](https://user-images.githubusercontent.com/5169960/105210184-92bdba80-5aff-11eb-93a8-2b13dbbf74c8.png)\r\n\r\nFor a discussion, please use https://github.com/dotnet/arcade/issues/6825.","Url":"https://github.com/dotnet/announcements/issues/182","RelatedDescription":"Open issue \"Migration to main completed\" (#182)"},{"Id":"851621247","IsPullRequest":false,"CreatedAt":"2021-04-06T17:01:00","Actor":"rbhanda","Number":"181","RawContent":null,"Title":"April 2021 .NET Updates","State":"open","Body":"The following .NET updates were released in April 2021. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET April 2021 Updates – 5.0.5](https://devblogs.microsoft.com/dotnet/net-april-2021/)\r\n  * .NET 5.0.5 and .NET SDK 5.0.202 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.5/5.0.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n  *    .NET Core 3.1.14 and .NET SDK 3.1.114 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.14/3.1.14.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.1))\r\n  *    .NET Core 2.1.27 and .NET SDK 2.1.523 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.27/2.1.27.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1))\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/181","RelatedDescription":"Open issue \"April 2021 .NET Updates\" (#181)"},{"Id":"850601710","IsPullRequest":false,"CreatedAt":"2021-04-05T19:26:22","Actor":"richlander","Number":"180","RawContent":null,"Title":"NuGet package restore broken on .NET 5+ with Removal of Trust of VeriSign CA","State":"open","Body":"# NuGet package restore broken on .NET 5+ with Removal of Trust of VeriSign CA\r\n\r\n[NuGet package signing verification](https://docs.microsoft.com/nuget/reference/signed-packages-reference) relies on the `VeriSign Universal Root Certification Authority` as part of establishing a chain-of-trust for NuGet packages. `VeriSign Universal Root Certification Authority` was recently removed from [NSS](https://bugzilla.mozilla.org/show_bug.cgi?id=1686854) and `ca-certificates` packages. This removal effectively breaks NuGet package signing verification, which has the result of breaking the ability to restore NuGet packages.\r\n\r\nThis break in behavior is only observed with .NET 5 and .NET 6, which have NuGet package verification enabled (and it cannot be disabled). [NET 5 NuGet Restore Failures on Linux distributions](https://github.com/NuGet/Announcements/issues/56) has been observed on some distros already and we expect it to become pervasive quickly as more distros are updated to include more recent version of `NSS` and `ca-certificates` (with the VeriSign CA removed). We are in the process of releasing updated builds of .NET 5 and .NET 6 that have NuGet package verification disabled on Linux and macOS.\r\n\r\nWe need developers, companies, and commercial providers to install (or otherwise use) updated builds of .NET 5 and .NET 6 if you rely on those .NET versions on Linux. If you adopt the updated .NET versions soon, you should not observe a break in functional behavior, and will be able to confidently update to newer versions of `NSS` and `ca-certificates` packages.\r\n\r\nUpdates: \r\n- [NuGet repository signature certificate will expire on April 14th, 2021](https://github.com/NuGet/Announcements/issues/58)\r\n- [.NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates](https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/) (NuGet blog)\r\n- [.NET April 2021 Updates – 5.0.5](https://devblogs.microsoft.com/dotnet/net-april-2021-updates/) (.NET blog)\r\n- [.NET 6 Preview 3](https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-3/)\r\n\r\n## Discussion\r\n\r\nPlease share your feedback on this topic and see what others are saying at:\r\n\r\nhttps://github.com/NuGet/Home/issues/10712\r\n\r\n## Updated .NET builds\r\n\r\nNew .NET builds will be provided with NuGet package verification disabled on Linux and macOS. The following are the expected release dates:\r\n\r\n- [.NET SDK 5.0.202](https://dotnet.microsoft.com/download/dotnet/5.0) -- April 6, 2021.\r\n- [.NET 6 Preview 3](https://dotnet.microsoft.com/download/dotnet/6.0) -- April 8, 2021.\r\n\r\nNew [container images](https://hub.docker.com/_/microsoft-dotnet) will be published for Alpine, Debian, and Ubuntu on both of these dates, for the respective releases.\r\n\r\nThese builds include significant additional functionality beyond disabling NuGet package verification. We originally planned to release these builds as regular releases for all supported operating systems and architectures, targeting April 13th. We made two changes from our original release plan: earlier release dates and include the change in NuGet functionality for Linux and macOS.\r\n\r\n## Who is affected\r\n\r\n.NET 5+ users will be affected on any operating system that has removed the `VeriSign Universal Root Certification Authority`. We are maintaining a list of [Linux distros that are known to be affected](https://github.com/NuGet/Announcements/issues/56).\r\n\r\n`nuget.exe` is sometimes used on Linux with Mono. This scenario is not affected.\r\n\r\nThere has been an [industry-wide movement to distrust the VeriSign root CA](https://blog.mozilla.org/security/2018/03/12/distrust-symantec-tls-certificates/), including companies like Apple, Google, Microsoft, and Mozilla. This may mean that at anytime in the future, [Apple](https://support.apple.com/en-us/HT212140) and [Microsoft](https://ccadb-public.secure.force.com/microsoft/IncludedCACertificateReportForMSFT) can remove `VeriSign Universal Root Certification Authority` from their trusted root CA list.\r\n\r\n## Solution\r\n\r\nThe NuGet team has [disabled the package verification feature](https://github.com/NuGet/NuGet.Client/pull/3979) for macOS and Linux. If needed, we will disable the feature for Windows at a later time. This change will be available in the updated .NET builds covered earlier.\r\n\r\nWe are also [talking to some Linux distro package maintainers](https://gitlab.alpinelinux.org/alpine/ca-certificates/-/issues/1) to ask them to delay the removal of the `VeriSign Universal Root Certification Authority` (for code signing only). Even a month of grace would help a lot, to enable .NET users on Linux to adopt the newer .NET 5 and .NET 6 builds.\r\n\r\nTo clarify, this change does not affect .NET Core 3.1 and earlier versions. It does not affect .NET Framework. It does not affect any .NET functionality on Windows, at least not at this time.\r\n\r\n## More Context\r\n\r\nWe observed [NuGet Restore Issues on Debian Family Linux Distros](https://github.com/NuGet/Announcements/issues/49) in January, 2021. This led us to discover that there has been an industry-wide movement to remove the `VeriSign Universal Root Certification Authority`.\r\n\r\nNuGet has historically relied on two key certificates:\r\n\r\n- NuGet Microsoft Author Signing Certificate Update - Expired January 27th, 2021\r\n- NuGet.org Repository Signing Certificate Update - Expires April 14th, 2021\r\n\r\nAfter those certificates expire, the NuGet client falls back to [timestamp verification](https://docs.microsoft.com/nuget/reference/signed-packages-reference), which enables package verification to still function. The timestamp verification relies on VeriSign root certificate authority. The absence of this root certificate authority being available on a machine means that timestamp verification is no longer functional, which causes package signature verification to fail.\r\n\r\nSecurity is very important to us. We are putting together a plan to use a new system that will allow us to re-enable package signing verification on all supported operating systems. We will have more to share on our future plans once we are sure that all systems are once again functional.\r\n\r\n[.NET 5 NuGet Restore Failures on Linux distributions](https://github.com/NuGet/Announcements/issues/56) provides more details on error messages, affected environments, and solutions.","Url":"https://github.com/dotnet/announcements/issues/180","RelatedDescription":"Open issue \"NuGet package restore broken on .NET 5+ with Removal of Trust of VeriSign CA\" (#180)"},{"Id":"837071846","IsPullRequest":false,"CreatedAt":"2021-03-30T21:15:03","Actor":"Nirmal4G","Number":"179","RawContent":null,"Title":"Preserve git refspec to local patches and branches after renamed origin's master","State":"closed","Body":"For all those who can't pull `master`, it should have renamed to `main`.\r\n\r\nTo preserve refspec to patches and branches, just changing the `heads/master` to `heads/main` should work.\r\n\r\n```diff\r\n[remote \"origin\"]\r\n\turl = https://github.com/dotnet/your-repo\r\n-\tfetch = +refs/heads/master:refs/remotes/origin/master\r\n+\tfetch = +refs/heads/main:refs/remotes/origin/master\r\n\ttagopt = --no-tags\r\n[branch \"master\"]\r\n\tremote = origin\r\n-\tmerge = refs/heads/master\r\n+\tmerge = refs/heads/main\r\n```\r\n\r\n> Putting this out there, if anyone else facing similar issue with git.","Url":"https://github.com/dotnet/announcements/issues/179","RelatedDescription":"Closed issue \"Preserve git refspec to local patches and branches after renamed origin's master\" (#179)"},{"Id":"826383777","IsPullRequest":false,"CreatedAt":"2021-03-09T18:01:29","Actor":"rbhanda","Number":"178","RawContent":null,"Title":"Microsoft Security Advisory CVE-2021-26701 | .NET Core Remote Code Execution Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2021-26701 | .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/49377\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerable package is [System.Text.Encodings.Web](https://www.nuget.org/packages/System.Text.Encodings.Web/) . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.\r\n\r\nVulnerable package versions:\r\n\r\nAny .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web  package with a vulnerable version listed below.\r\n\r\nPackage Name| Vulnerable Versions| Secure Versions\r\n:----- | :----: | -----:\r\n[System.Text.Encodings.Web](https://www.nuget.org/packages/System.Text.Encodings.Web/)| 4.0.0 - 4.5.0 <br> 4.6.0-4.7.1 <br> 5.0.0  | 4.5.1 <br>4.7.2 <br>5.0.1\r\n\r\nPlease validate that each of the .NET versions you are using is in support. Security updates are only provided for [supported .NET versions](https://github.com/dotnet/core/blob/main/releases.md).\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 5.0, .NET Core 3.1 or .NET Core 2.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n* If you're using .NET 5.0, you should download and install Runtime 5.0.4 or SDK 5.0.104 (for Visual Studio 2019 v16.8) from https://dotnet.microsoft.com/download/dotnet-core/5.0.\r\n\r\n* If you're using .NET Core 3.1, you should download and install Runtime 3.1.13 or SDK 3.1.113 (for Visual Studio 2019 v16.4) or 3.1.407 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\n* If you're using .NET Core 2.1, you should download and install Runtime 2.1.26 or SDK 2.1.522 (for Visual Studio 2019 v15.9) or 2.1.814 from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n\r\n.NET 5.0, .NET Core 3.1 and .NET Core 2.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core or .NET 5, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2021-26701](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26701)\r\n\r\n### Revisions\r\n\r\nV1.0 (March 09, 2021): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2021-03-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/178","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2021-26701 | .NET Core Remote Code Execution Vulnerability\" (#178)"},{"Id":"826382587","IsPullRequest":false,"CreatedAt":"2021-03-09T18:00:38","Actor":"rbhanda","Number":"177","RawContent":null,"Title":"March 2021 .NET Updates","State":"open","Body":"The following .NET updates were released in March 2021. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET March 2021 Updates – 5.0.4, 3.1.13, 2.1.26](https://devblogs.microsoft.com/dotnet/net-march-2021/)\r\n  * .NET 5.0.4 and .NET SDK 5.0.104 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.4/5.0.4.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n  *    .NET Core 3.1.13 and .NET SDK 3.1.113 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.13/3.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.1))\r\n  *    .NET Core 2.1.26 and .NET SDK 2.1.522 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.26/2.1.26.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1))\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/177","RelatedDescription":"Open issue \"March 2021 .NET Updates\" (#177)"},{"Id":"804795571","IsPullRequest":false,"CreatedAt":"2021-02-09T18:17:29","Actor":"rbhanda","Number":"176","RawContent":null,"Title":"Microsoft Security Advisory CVE-2021-24112 | .NET 5 and .NET Core Remote Code Execution Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2021-24112 | .NET 5 and .NET Core Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA remote code execution vulnerability exists when parsing certain types of graphics files. This vulnerability only exists on systems running on MacOS or Linux.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/48066\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET 5.0, .NET Core 3.1, or .NET Core 2.1 application running on .NET 5.0.2, .NET Core 3.1.11, or .NET Core 2.1.24 or lower, respectively.\r\n\r\nPlease note that .NET Core 3.0 is out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 5.0, .NET Core 3.1 or .NET Core 2.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n* If you're using .NET 5.0, you should download and install Runtime 5.0.3 or SDK 5.0.103 (for Visual Studio 2019 v16.8) from https://dotnet.microsoft.com/download/dotnet-core/5.0.\r\n\r\n* If you're using .NET Core 3.1, you should download and install Runtime 3.1.12 or SDK 3.1.112 (for Visual Studio 2019 v16.4) or 3.1.405 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\n* If you're using .NET Core 2.1, you should download and install Runtime 2.1.25 or SDK 2.1.521 (for Visual Studio 2019 v15.9) or 2.1.813 from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n\r\n.NET 5.0, .NET Core 3.1 and .NET Core 2.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core or .NET 5, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2021-24112](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24112)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 09, 2021): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2021-02-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/176","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2021-24112 | .NET 5 and .NET Core Remote Code Execution Vulnerability\" (#176)"},{"Id":"804794018","IsPullRequest":false,"CreatedAt":"2021-02-09T18:15:20","Actor":"rbhanda","Number":"175","RawContent":null,"Title":" Microsoft Security Advisory CVE-2021-1721 | .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2021-1721 | .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 5, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial-of-service vulnerability exists when creating HTTPS web request during X509 certificate chain building.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/48067\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET 5.0, .NET Core 3.1, or .NET Core 2.1 application running on .NET 5.0.2, .NET Core 3.1.11, or .NET Core 2.1.24 or lower, respectively.\r\n\r\nPlease note that .NET Core 3.0 is out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 5.0, .NET Core 3.1 or .NET Core 2.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n* If you're using .NET 5.0, you should download and install Runtime 5.0.3 or SDK 5.0.103 (for Visual Studio 2019 v16.8) from https://dotnet.microsoft.com/download/dotnet-core/5.0.\r\n\r\n* If you're using .NET Core 3.1, you should download and install Runtime 3.1.12 or SDK 3.1.112 (for Visual Studio 2019 v16.4) or 3.1.405 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1.\r\n\r\n* If you're using .NET Core 2.1, you should download and install Runtime 2.1.25 or SDK 2.1.521 (for Visual Studio 2019 v15.9) or 2.1.813 from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n\r\n.NET 5.0, .NET Core 3.1 and .NET Core 2.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core or .NET 5, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2021-1721](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1721)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 09, 2021): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2021-02-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/175","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2021-1721 | .NET Core Denial of Service Vulnerability\" (#175)"},{"Id":"804791013","IsPullRequest":false,"CreatedAt":"2021-02-09T18:10:59","Actor":"rbhanda","Number":"174","RawContent":null,"Title":"February 2021 .NET Updates","State":"open","Body":"The following .NET updates were released in February 2021. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET February 2021 Updates – 5.0.3, 3.1.12, 2.1.25](https://devblogs.microsoft.com/dotnet/net-february-2021/)\r\n  * .NET 5.0.3 and .NET SDK 5.0.103 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.3/5.0.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n  *    .NET Core 3.1.12 and .NET SDK 3.1.112 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.12/3.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.1))\r\n  *    .NET Core 2.1.25 and .NET SDK 2.1.521 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.25/2.1.25.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1))\r\n\r\n\r\n<h2>.NET Framework</h2>\r\n\r\n* [February 2021 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-february-security-and-quality-rollup/)\r\n* [February 2021 Cumulative Update Preview](https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-net-framework/)\r\n* [February 2021 Cumulative Update Preview for Windows 10 2004 and newer versions](https://devblogs.microsoft.com/dotnet/net-framework-february-2021-cumulative-update-preview-for-windows-10-2004-windows-server-version-2004-windows-10-version-20h2-and-windows-server-version-20h2/)\r\n\r\n</br>\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/174","RelatedDescription":"Open issue \"February 2021 .NET Updates\" (#174)"},{"Id":"746031367","IsPullRequest":false,"CreatedAt":"2021-01-28T19:44:42","Actor":"samsp-msft","Number":"168","RawContent":null,"Title":"Survey: Repo contribution experience, Fall 2020","State":"closed","Body":"We normally focus on how to improve the product, but we’re also turning our focus to improving the open source project. Periodically we are running a survey to collect feedback on your experience working with our repos. We did one back in May, and as its been about 6 months, its about time for another. We’ve created a survey to better understand your individual experience of participating and contributing in this project.\r\n\r\nWe would appreciate your feedback so we can work to address shortcomings and missed opportunities. If you don’t supply contact details, then responses will be anonymous.\r\n\r\n[Survey](https://www.surveymonkey.com/r/92RLF7R?Source=dotnet/announcements)\r\n\r\nThank you for your time!\r\n\r\n## Discussion ##\r\nFor discussion, please go to dotnet/runtime#44903.\r\n","Url":"https://github.com/dotnet/announcements/issues/168","RelatedDescription":"Closed issue \"Survey: Repo contribution experience, Fall 2020\" (#168)"},{"Id":"795455899","IsPullRequest":false,"CreatedAt":"2021-01-27T21:26:00","Actor":"MichaelSimons","Number":"173","RawContent":null,"Title":"NuGet restore failing on .NET 5 for Debian-based OSes","State":"open","Body":"# NuGet restore failing on .NET 5 for Debian-based OSes\r\n \r\n.NET 5 restore is broken for Debian-based operating systems including Docker thus resulting in error messages like:\r\n \r\n```\r\nerror NU3037: Package 'System.Memory 4.5.3' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n```\r\n \r\nPlease follow the [NuGet Announcement](https://github.com/NuGet/Announcements/issues/49) for the latest details on the issue.\r\n","Url":"https://github.com/dotnet/announcements/issues/173","RelatedDescription":"Open issue \"NuGet restore failing on .NET 5 for Debian-based OSes\" (#173)"},{"Id":"790168090","IsPullRequest":false,"CreatedAt":"2021-01-20T17:15:34","Actor":"terrajobst","Number":"172","RawContent":null,"Title":"The dotnet org will rename all default branches to main","State":"open","Body":"We have decided to unify the naming of our default branches to `main`. All new repos will already use this naming. Over the next couple of months, we're going to rename the branches in our existing repos as well. We're using [GitHub's new tooling](https://github.blog/changelog/2021-01-19-support-for-renaming-an-existing-branch/) to make sure branch policies and PRs are automatically updated.\r\n\r\nHowever, this still requires some changes from you as well. This announcement describes the process and what you need to do on your end.\r\n\r\n## Process\r\n\r\nWe'll start with a smaller list of repos and grow from there. Theses are the planned starting repos:\r\n\r\n* [dotnet/project-system](https://github.com/dotnet/project-system) ✔ \r\n* [dotnet/llvm-project](https://github.com/dotnet/llvm-project) ✔\r\n* [dotnet/icu](https://github.com/dotnet/icu) ✔\r\n* [dotnet/xharness](https://github.com/dotnet/xharness) ✔\r\n* [mono/linker](https://github.com/mono/linker) ✔\r\n* [dotnet/docker-tools](https://github.com/dotnet/docker-tools) ✔\r\n* [dotnet/wcf](https://github.com/dotnet/wcf) ✔\r\n* [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore) ✔\r\n* [dotnet/iot](https://github.com/dotnet/iot) ✔\r\n* [dotnet/winforms](https://github.com/dotnet/winforms) ✔\r\n\r\nWe're starting with a smaller list to ensure we catch all cases where we need to update corresponding configuration in our Arcade-based tooling (see [this fantastic blog post](https://devblogs.microsoft.com/dotnet/a-deep-dive-into-how-net-builds-and-ships/) on how we build .NET).\r\n\r\nOnce we have validated our checklist, each repo admin will rename the default branch at their own pace. We expect to complete all repos in the next couple of months.\r\n\r\n## What you can expect\r\n\r\n*We have a detailed guide you can find at <https://aka.ms/m2m-dotnet>. This is only the essentials.*\r\n\r\nWe'll add a sticky issue to each repo when we're about to rename the branch. We'll do this a few days before and we'll leave it there for two weeks.\r\n\r\n**You don't need to update your PRs**. If you submitted a PR against the old default branch, the GitHub tooling will automatically retarget your PR against the new default branch (main).\r\n\r\nFor sanity, **you should rename the default branch in your fork as well**. When you go to your fork, GitHub will guide you through this experience:\r\n\r\n![Rename branch in fork](https://user-images.githubusercontent.com/5169960/105210186-92bdba80-5aff-11eb-99c9-0beb708fcf3f.png)\r\n\r\n**You will need to update the repos you cloned to your hard drive**. When you go to the original repository, GitHub will guide you through this experience:\r\n\r\n![Update local repo](https://user-images.githubusercontent.com/5169960/105210184-92bdba80-5aff-11eb-93a8-2b13dbbf74c8.png)\r\n\r\nFor a discussion, please use https://github.com/dotnet/arcade/issues/6825.","Url":"https://github.com/dotnet/announcements/issues/172","RelatedDescription":"Open issue \"The dotnet org will rename all default branches to main\" (#172)"},{"Id":"784480708","IsPullRequest":false,"CreatedAt":"2021-01-12T18:30:01","Actor":"rbhanda","Number":"171","RawContent":null,"Title":"January 2021 .NET Updates","State":"open","Body":"The following .NET updates were released in January 2021. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET January 2021 Updates – 5.0.2, 3.1.11, 2.1.24](https://devblogs.microsoft.com/dotnet/net-january-2021/)\r\n  * .NET 5.0.2 and .NET SDK 5.0.102 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.2/5.0.2.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n  *    .NET Core 3.1.11 and .NET SDK 3.1.111 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.11/3.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.1))\r\n  *    .NET Core 2.1.24 and .NET SDK 2.1.520 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.24/2.1.24.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1))\r\n\r\n</br>\r\n<h2>.NET Framework</h2>\r\n\r\n* [.NET Framework January Security and Quality Rollup Update](https://devblogs.microsoft.com/dotnet/net-framework-january-security-and-quality-rollup-update/)\r\n\r\n</br>\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/171","RelatedDescription":"Open issue \"January 2021 .NET Updates\" (#171)"},{"Id":"784470551","IsPullRequest":false,"CreatedAt":"2021-01-12T18:19:41","Actor":"rbhanda","Number":"170","RawContent":null,"Title":" Microsoft Security Advisory CVE-2021-1723 | ASP.NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2021-1723 | .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core and ASP.NET 5. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial-of-service vulnerability exists in the way Kestrel parses HTTP/2 requests. The security update addresses the vulnerability by fixing the way the Kestrel parses HTTP/2 requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/aspnetcore/issues/29236\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 3.1 or .NET 5.0 application running on .NET Core 3.1.10 or .NET 5.0.1 or lower respectively.\r\n\r\nPlease note that .NET Core 3.0 is out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core 3.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* If you are using .NET Core 3.1, you should download and install Runtime 3.1.11 or SDK 3.1.111 (for Visual Studio 2019 v16.4) or 3.1.405 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n* If you are using .NET 5.0, you should download and install Runtime 5.0.2 or SDK 5.0.102 (for Visual Studio 2019 v16.8) from https://dotnet.microsoft.com/download/dotnet-core/5.0\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnetcore/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2021-1723](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1723)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 12, 2021): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2021-01-12_\r\n","Url":"https://github.com/dotnet/announcements/issues/170","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2021-1723 | ASP.NET Core Denial of Service Vulnerability\" (#170)"},{"Id":"759718417","IsPullRequest":false,"CreatedAt":"2020-12-08T19:30:20","Actor":"rbhanda","Number":"169","RawContent":null,"Title":"December 2020 .NET Updates","State":"open","Body":"The following .NET updates were released in December 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET December 2020 Updates – 5.0.1](https://devblogs.microsoft.com/dotnet/net-december-2020/)\r\n  * .NET 5.0.1 and .NET SDK 5.0.101 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.1/5.0.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n\r\n</br>\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/169","RelatedDescription":"Open issue \"December 2020 .NET Updates\" (#169)"},{"Id":"740056275","IsPullRequest":false,"CreatedAt":"2020-11-10T16:26:54","Actor":"rbhanda","Number":"167","RawContent":null,"Title":"November 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on November 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET </h2>\r\n\r\n* [.NET November 2020 Updates – 5.0](https://devblogs.microsoft.com/dotnet/announcing-net-5-0/)\r\n  * .NET 5.0 and .NET SDK 5.0.100 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0.0/5.0.0.md) | [Download](https://dotnet.microsoft.com/download/dotnet/5.0))\r\n\r\n</br>\r\n\r\n* [.NET Core November 2020 Updates – 3.1.10](https://devblogs.microsoft.com/dotnet/net-core-november-2020/)\r\n  * .NET Core 3.1.10 and .NET Core SDK 3.1.110 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.10/3.1.10.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1))\r\n\r\n<h2>.NET Framework </h2>\r\n\r\n* [November 2020 Security and Quality Rollup Updates](https://devblogs.microsoft.com/dotnet/net-framework-november-2020-security-and-quality-rollup-updates/)\r\n\r\n* [November 2020 Cumulative Update Preview](https://devblogs.microsoft.com/dotnet/net-framework-november-2020-cumulative-update-preview/)\r\n\r\n* [November 2020 Cumulative Update Preview for Windows 10 2004 and Windows Server, version 2004](https://devblogs.microsoft.com/dotnet/net-framework-november-2020-cumulative-update-preview-for-windows-10-2004-and-windows-server-version-2004/)\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/167","RelatedDescription":"Open issue \"November 2020 .NET Updates\" (#167)"},{"Id":"720690315","IsPullRequest":false,"CreatedAt":"2020-10-13T19:01:25","Actor":"TaraOverfield","Number":"166","RawContent":null,"Title":"October 2020 .NET Updates ","State":"open","Body":"The following .NET updates were released on October 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET Core</h2>\r\n\r\n* [October 2020 Updates – 2.1.23 and 3.1.9](https://devblogs.microsoft.com/dotnet/net-core-october-2020/)\r\n  * .NET Core 3.1.9 and .NET Core SDK 3.1.109 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.9/3.1.9.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1))\r\n   * .NET Core 2.1.23 and .NET Core SDK 2.1.811 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.23/2.1.23.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1))\r\n* .[NET Core support for Ubuntu 20.10](https://github.com/dotnet/core/issues/5017)\r\n* .[NET Core Support for Fedora 33](https://github.com/dotnet/core/issues/5018)\r\n\r\n<h2>.NET Framework</h2>\r\n\r\n* [October 2020 Security and Quality Rollup Updates](https://devblogs.microsoft.com/dotnet/net-framework-october-2020-security-and-quality-rollup-updates/)\r\n* [Republishing of July 2020 Security Only Updates](https://devblogs.microsoft.com/dotnet/net-framework-republishing-of-july-2020-security-only-updates/)\r\n* [October 2020 Cumulative Update Preview Update](https://devblogs.microsoft.com/dotnet/net-framework-october-2020-cumulative-update-preview-update/)\r\n* [October 2020 Cumulative Update Preview Update for Windows 10 2004 and Windows Server, version 2004](https://devblogs.microsoft.com/dotnet/net-framework-october-2020-cumulative-update-preview-update-for-windows-10-2004-and-windows-server-version-2004/)\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/166","RelatedDescription":"Open issue \"October 2020 .NET Updates \" (#166)"},{"Id":"696061299","IsPullRequest":false,"CreatedAt":"2020-09-08T17:44:01","Actor":"rbhanda","Number":"165","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-1045 | Microsoft ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2020-1045 | Microsoft ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA security feature bypass vulnerability exists in the way Microsoft ASP.NET Core parses encoded cookie names.\r\n\r\nThe ASP.NET Core cookie parser decodes entire cookie strings which could allow a malicious attacker to set a second cookie with the name being percent encoded.\r\n\r\nThe security update addresses the vulnerability by fixing the way the ASP.NET Core cookie parser handles encoded names.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/aspnetcore/issues/25701\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 3.1 application running on .NET Core 3.1.7 or lower\r\n* Any .NET Core 2.1 application running on .NET Core 2.1.21 or lower\r\n\r\nPlease note that .NET Core 3.0 is now out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core 3.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* You should download and install Runtime 3.1.8 or SDK 3.1.108 (for Visual Studio 2019 v16.4) or 3.1.402 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2020-1045](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1045)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 8, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-09-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/165","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-1045 | Microsoft ASP.NET Core Security Feature Bypass Vulnerability\" (#165)"},{"Id":"696046001","IsPullRequest":false,"CreatedAt":"2020-09-08T17:20:15","Actor":"TaraOverfield","Number":"164","RawContent":null,"Title":"September 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n<h2>.NET Core</h2>\r\n\r\n* [September 2020 Updates – 2.1.22 and 3.1.8](https://devblogs.microsoft.com/dotnet/net-core-september-2020/)\r\n  * .NET Core 3.1.8 and .NET Core SDK 3.1.108 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.8/3.1.8.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1))\r\n   * .NET Core 2.1.22 and .NET Core SDK 2.1.810 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.22/2.1.22.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1))\r\n\r\n<h2>.NET Framework</h2>\r\n\r\n* [September 2020 Security and Quality Rollup Updates](https://devblogs.microsoft.com/dotnet/net-framework-september-2020-security-and-quality-rollup-updates/)\r\n* [September 2020 Cumulative Update Preview](https://devblogs.microsoft.com/dotnet/net-framework-september-2020-cumulative-update-preview-update/)\r\n* [October 1, 2020 Cumulative Update Preview Update for Windows 10, version 2004 and Windows Server, version 2004](https://devblogs.microsoft.com/dotnet/net-framework-october-1-2020-cumulative-update-preview-update-for-windows-10-version-2004-and-windows-server-version-2004/)\r\n\r\n<h2>.NET Support Policies</h2>\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://dotnet.microsoft.com/platform/support/policy/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/164","RelatedDescription":"Open issue \"September 2020 .NET Updates\" (#164)"},{"Id":"677090197","IsPullRequest":false,"CreatedAt":"2020-08-11T18:15:32","Actor":"rbhanda","Number":"163","RawContent":null,"Title":"August 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on August 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n**.NET Core**\r\n---\r\n* [August 2020 Updates – 2.1.21 and 3.1.7](https://devblogs.microsoft.com/dotnet/net-core-august-2020/)\r\n  * .NET Core 3.1.7 and .NET Core SDK 3.1.107 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.7/3.1.7.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1))\r\n   * .NET Core 2.1.21 and .NET Core SDK 2.1.809 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.21/2.1.21.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1))\r\n\r\n## .NET Framework\r\n* [August 2020 Security and Quality Rollup Updates](https://devblogs.microsoft.com/dotnet/net-framework-august-2020-security-and-quality-rollup-updates/)\r\n\r\n* [August 2020 Cumulative Update Preview](https://devblogs.microsoft.com/dotnet/august-2020-cumulative-update-preview/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/163","RelatedDescription":"Open issue \"August 2020 .NET Updates\" (#163)"},{"Id":"677046311","IsPullRequest":false,"CreatedAt":"2020-08-11T17:08:44","Actor":"rbhanda","Number":"162","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-1597 | ASP.NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2020-1597 | ASP.NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how the ASP.NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/aspnetcore/issues/24796\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 3.1 application running on .NET Core 3.1.6 or lower\r\n* Any .NET Core 2.1 application running on .NET Core 2.1.20 or lower\r\n\r\nPlease note that .NET Core 3.0 is now out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core 3.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* You should download and install Runtime 3.1.7 or SDK 3.1.107 (for Visual Studio 2019 v16.4) or 3.1.401 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2020-1597](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1597)\r\n\r\n### Revisions\r\n\r\nV1.0 (August 11, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-08-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/162","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-1597 | ASP.NET Core Denial of Service Vulnerability\" (#162)"},{"Id":"658602325","IsPullRequest":false,"CreatedAt":"2020-07-16T21:51:58","Actor":"clairernovotny","Number":"161","RawContent":null,"Title":"Moving microsoft/MSBuild to dotnet/MSBuild","State":"open","Body":"Early next week, we are planning to move `microsoft/msbuild` to `dotnet/msbuild` as part of some maintenance activities of .NET Foundation projects. There should be no impact on forks or links as GitHub will redirect them to the new location.\r\n\r\nPlease let us know if you have any concerns!\r\n\r\n\r\n### Discussion\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/microsoft/msbuild/issues/5523","Url":"https://github.com/dotnet/announcements/issues/161","RelatedDescription":"Open issue \"Moving microsoft/MSBuild to dotnet/MSBuild\" (#161)"},{"Id":"656777247","IsPullRequest":false,"CreatedAt":"2020-07-14T17:27:22","Actor":"rbhanda","Number":"160","RawContent":null,"Title":"July 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on July 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n**.NET Core**\r\n---\r\n* [July 2020 Updates – 2.1.20 and 3.1.6](https://devblogs.microsoft.com/dotnet/net-core-july-2020/)\r\n  * .NET Core 3.1.6 and .NET Core SDK 3.1.106 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.6/3.1.6.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1))\r\n   * .NET Core 2.1.20 and .NET Core SDK 2.1.808 ([Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.20/2.1.20.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1))\r\n* [.NET Core support for Ubuntu 19.10 -- EOL](https://github.com/dotnet/core/issues/4925)\r\n\r\n## .NET Framework\r\n* [July 2020 Security and Quality Rollup Updates]( https://devblogs.microsoft.com/dotnet/net-framework-july-2020-security-and-quality-rollup-updates/)\r\n\r\n* [July 2020 Cumulative Update Preview](https://devblogs.microsoft.com/dotnet/net-framework-july-2020-cumulative-update-preview/)\r\n\r\n* [July 2020 Cumulative Update Preview for Windows 10, version 2004](https://devblogs.microsoft.com/dotnet/net-framework-july-2020-cumulative-update-preview-for-windows-10-version-2004/)\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/160","RelatedDescription":"Open issue \"July 2020 .NET Updates\" (#160)"},{"Id":"656765637","IsPullRequest":false,"CreatedAt":"2020-07-14T17:06:53","Actor":"rbhanda","Number":"159","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-1147 | .NET Core Remote Code Execution Vulnerability ","State":"open","Body":"# Microsoft Security Advisory CVE-2020-1147 | .NET Core Remote Code Execution Vulnerability \r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a remote code execution vulnerability exists in .NET software when the software fails to check the source markup of an XML file. An attacker who successfully exploited the vulnerability could run arbitrary code in the context of the current user.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to an ASP.NET Core application, or other application that parses certain types of XML.\r\n\r\nThe security update addresses the vulnerability by restricting  the types that are allowed to be present in the XML payload.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/39296\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 2.1 application running on .NET Core 2.1.19 or lower\r\n* Any .NET Core 3.1 application running on .NET Core 3.1.5 or lower\r\n* Any .NET 5 application running on .NET 5 Preview 6 or lower\r\n\r\nPlease note that .NET Core 3.0 is now out of support and all applications should be updated to 3.1.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core 3.1. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* You should download and install Runtime 3.1.6 or SDK 3.1.106 (for Visual Studio 2019 v16.4) or 3.1.302 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2020-1147](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1147)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 14, 2020): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2020-07-14_\r\n","Url":"https://github.com/dotnet/announcements/issues/159","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-1147 | .NET Core Remote Code Execution Vulnerability \" (#159)"},{"Id":"635635668","IsPullRequest":false,"CreatedAt":"2020-06-09T17:37:53","Actor":"rbhanda","Number":"158","RawContent":null,"Title":"June 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on June 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n**.NET Core**\r\n---\r\n* [June 2020 Updates – 2.1.19 and 3.1.5](https://devblogs.microsoft.com/dotnet/net-core-june-2020/)\r\n   * .NET Core 3.1.5 and .NET Core SDK 3.1.105( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.5/3.1.5.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1) )\r\n   * .NET Core 2.1.19 and .NET Core SDK 2.1.807 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.19/2.1.19.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1) )\r\n* [Alpine 3.12 ](https://github.com/dotnet/core/issues/4750) is now  supported.","Url":"https://github.com/dotnet/announcements/issues/158","RelatedDescription":"Open issue \"June 2020 .NET Updates\" (#158)"},{"Id":"635626476","IsPullRequest":false,"CreatedAt":"2020-06-09T17:22:15","Actor":"blowdart","Number":"157","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability [Update]","State":"open","Body":"# Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability which exists when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to the .NET Core application.\r\n\r\n_The update addresses the vulnerability by correcting how the .NET Core web application handles web requests. The previous update contained an incomplete fix, the runtime and SDK version numbers have now been updated to the runtimes and SDKs that have the complete fix. This new issue has been created for users which subscribe to the announcements via email or other automated means which may not show issue changes._\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/36313\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 2.1 application running on .NET Core 2.1.18 or lower\r\n* Any .NET Core 3.1 application running on .NET Core 3.1.4 or lower\r\n* Any .NET 5 application running on .NET 5 Preview 3 or lower\r\n\r\nPlease note that .NET Core 3.0 is now out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 2.1 you should download and install Runtime 2.1.19 or SDK 2.1.515 (for Visual Studio 2017 v15.9), 2.1.612 (for Visual Studio 2019 v16.0) or 2.1.807 (for Visual Studio 2019 v16.2 or later) from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET Core 3.1 you should download and install Runtime 3.1.5 or SDK 3.1.105 (for Visual Studio 2019 v16.4) or 3.1.301 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n* For machines running .NET 5 Preview you should download and install .NET 5 Preview 4 when available from https://dotnet.microsoft.com/download/dotnet/5.0\r\n\r\nIf you have multiple affected versions you must update the runtime or SDKs for each version.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2020-1108](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1108)\r\n\r\n### Revisions\r\n\r\nV1.1 (June 9, 2020): Versions that contain the patch updated.\r\nV1.0 (May 12, 2020): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2020-06-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/157","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability [Update]\" (#157)"},{"Id":"617017419","IsPullRequest":false,"CreatedAt":"2020-05-12T22:57:13","Actor":"blowdart","Number":"156","RawContent":null,"Title":"Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability which exists when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to the .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/runtime/issues/36313\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n* Any .NET Core 2.1 application running on .NET Core 2.1.18 or lower\r\n* Any .NET Core 3.1 application running on .NET Core 3.1.4 or lower\r\n* Any .NET 5 application running on .NET 5 Preview 3 or lower\r\n\r\nPlease note that .NET Core 3.0 is now out of support and all applications should be updated to 3.1.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a runtime or SDK with a version listed in [affected software](#affected-software) you are exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed. If you have installed one or more .NET Core SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio which will also update your .NET Core SDKs.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```txt\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n* For machines running .NET Core 2.1 you should download and install Runtime 2.1.19 or SDK 2.1.515 (for Visual Studio 2017 v15.9), 2.1.612 (for Visual Studio 2019 v16.0) or 2.1.807 (for Visual Studio 2019 v16.2 or later) from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET Core 3.1 you should download and install Runtime 3.1.5 or SDK 3.1.105 (for Visual Studio 2019 v16.4) or 3.1.301 (for Visual Studio 2019 v16.5 or later) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n* For machines running .NET 5 Preview you should download and install .NET 5 Preview 4 when available from https://dotnet.microsoft.com/download/dotnet/5.0\r\n\r\nIf you have multiple affected versions you must update the runtime or SDKs for each version.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core GitHub organization. The main repos are located at https://github.com/dotnet/runtime and https://github.com/dotnet/aspnet/. The Announcements repo (https://github.com/dotnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2020-1108](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1108)\r\n\r\n### Revisions\r\n\r\nV1.1 (June 9, 2020): Versions that contain the patch updated.\r\nV1.0 (May 12, 2020): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2020-06-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/156","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2020-1108 | .NET Core Denial of Service Vulnerability\" (#156)"},{"Id":"616825277","IsPullRequest":false,"CreatedAt":"2020-05-12T17:19:31","Actor":"TaraOverfield","Number":"155","RawContent":null,"Title":"May 2020 .NET Updates","State":"open","Body":"The following .NET updates were released on May 2020. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2020 Security and Quality Rollup Updates](https://devblogs.microsoft.com/dotnet/net-framework-may-2020-security-and-quality-rollup-updates/)\r\n\r\n## .NET Core\r\n* [May 2020 Updates – 2.1.18 and 3.1.4](https://devblogs.microsoft.com/dotnet/net-core-may-2020/)\r\n\r\n * .NET Core 3.1.4 and .NET Core SDK 3.1.104 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.4/3.1.4.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/3.1) )\r\n \r\n* .NET Core 2.1.18 and .NET Core SDK 2.1.806 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.18/2.1.18.md) | [Download](https://www.microsoft.com/net/download/dotnet-core/2.1) \r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/155","RelatedDescription":"Open issue \"May 2020 .NET Updates\" (#155)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1390098241232977928","CreatedAt":"2021-05-06T00:17:02+00:00","UserScreenname":"dotnet","Text":"How do you do smarter testing? \n\n#dotNETRocks talks to @SimonCropp about Verify, and how snapshots can help you loo… https://t.co/TayaXsczHk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1390059981362302981","CreatedAt":"2021-05-05T21:45:00+00:00","UserScreenname":"dotnet","Text":"This week on #OnDotNET Live we'll be catching up with @briacht and @ljquintanilla to see some of the latest updates… https://t.co/P7hpr9PW2U","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":12,"RawContent":null},{"Id":"1390050997658165250","CreatedAt":"2021-05-05T21:09:18+00:00","UserScreenname":"dotnet","Text":"In this short #OnDotNET episode, @paladique and @CecilPhillip teach us about the using static directive in #CSharp.… https://t.co/gZCFbNIV4Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":13,"FavoriteCount":2,"RawContent":null},{"Id":"1390005882663096322","CreatedAt":"2021-05-05T18:10:02+00:00","UserScreenname":"dotnet","Text":"Here's a pretty cool blog post with a Q&amp;A conversation between @runfaster2000 and Simon Nattress about crossgen2, t… https://t.co/n7bMovZjl3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"1389970647078604805","CreatedAt":"2021-05-05T15:50:01+00:00","UserScreenname":"dotnet","Text":"Take control of your DbContext! \n\nJoin the #EntityFramework #EFCore team with guest @onthedrift2 to discuss his EFC… https://t.co/smPdCiZyxU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":16,"RawContent":null},{"Id":"1389969444496187398","CreatedAt":"2021-05-05T15:45:14+00:00","UserScreenname":"dotnet","Text":"In this C# Language Highlight video @davidpine7 &amp; @cecilphillip  go over Property Pattern Matching!\n\nhttps://t.co/RyCNap4Mqs #csharp #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"1389745415709503489","CreatedAt":"2021-05-05T00:55:01+00:00","UserScreenname":"dotnet","Text":"...found @thepracticaldev, this post shows us how easy it is to build a Sentiment Analysis Prediction Model with… https://t.co/kMY7uv01L3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":63,"FavoriteCount":16,"RawContent":null},{"Id":"1389693068790665221","CreatedAt":"2021-05-04T21:27:01+00:00","UserScreenname":"dotnet","Text":"Windows Forms has been a solid UI framework for creating rich desktop client apps for the Windows Desktop.\n\nIn this… https://t.co/Ecn2xuK4qz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":23,"FavoriteCount":6,"RawContent":null},{"Id":"1389644753134882817","CreatedAt":"2021-05-04T18:15:02+00:00","UserScreenname":"dotnet","Text":"Hey WCF developers! \n\nHappening soon... learn about how the gRPC framework can help you build networked services an… https://t.co/hHccW7GfAU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":8,"RawContent":null},{"Id":"1389643486782181376","CreatedAt":"2021-05-04T18:10:00+00:00","UserScreenname":"dotnet","Text":"Join us for On .NET this Thursday 🎉\n\nAdding Machine Learning to your .NET Apps with ML .NET with @briacht &amp;… https://t.co/lr5YrriUVF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":13,"RawContent":null},{"Id":"1389601254981177346","CreatedAt":"2021-05-04T15:22:11+00:00","UserScreenname":"dotnet","Text":"Happening soon on our Twitch channel... The #ASPNET team is designing new patterns to enable creating an API in… https://t.co/KYbW1qwtPT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":18,"RawContent":null},{"Id":"1389505079942778881","CreatedAt":"2021-05-04T09:00:01+00:00","UserScreenname":"dotnet","Text":"🖖 - 💙 - 🤝 - 😍 -🙏 -  💜 - 👊 - 🙇 - 🤝 - 🕺- 🤟 - 🤍 - 🤗 - 👏 - 🧑‍💻 - 🙌 https://t.co/YMEkU6kzHz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":301,"FavoriteCount":43,"RawContent":null},{"Id":"1389349051653578754","CreatedAt":"2021-05-03T22:40:01+00:00","UserScreenname":"dotnet","Text":"Today on #AzureFunBytes, @ChristosMatskas gives us a look into authentication, authorization, and Azure AD as he he… https://t.co/aKWPGtSOFz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1389297209951375363","CreatedAt":"2021-05-03T19:14:01+00:00","UserScreenname":"dotnet","Text":"We are excited to introduce a major update to dotnet monitor and want your feedback. \n\nLearn more about what this u… https://t.co/Bo9ZFwIGMU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":119,"FavoriteCount":35,"RawContent":null}]}},"RunOn":"2021-05-06T05:30:26.5469797Z","RunDurationInMilliseconds":10721}