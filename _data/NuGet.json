{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"31985154906","Type":"PullRequestEvent","CreatedAt":"2023-09-20T22:18:38","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9669","RelatedDescription":"Opened pull request \"Move to latest ServerCommon for new Service Bus SDK\" (#9669) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/5011\r\n\r\nSummary of changes:\r\n- Update to new ServerCommon version (depends on https://github.com/NuGet/ServerCommon/pull/412)\r\n- Pull in new Azure Service Bus SDK (Azure.Messaging.ServiceBus) as part of ServerCommon and associated API changes\r\n- Add global.json to eliminate Roslyn analyzer warnings about ambient .NET SDK 7 or 8.\r\n  - This was making it hard for me to assess that I wasn't introducing more warnings.\r\n- Introduce `ServiceBusConfiguration.ManagedIdentityClientId` to pass user-assignment managed identity client ID in\r\n   - We used to do this with an environment variable, not it's explicit\r\n- Update web.config since NuGetGallery binding redirects changed a lot with this update\r\n\r\nNote that the `Close` of the Service Bus sender is no longer sync. It's `CloseAsync`. This means it leaves an un-awaited Task. This is acceptable because the instance is a singleton in the DI container meaning this will only happen when the process is shutting down (graceful app service shutdown) when associated handled will be released anyway."},{"Id":"31977317612","Type":"PullRequestEvent","CreatedAt":"2023-09-20T16:14:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9652","RelatedDescription":"Merged pull request \"Azure AD Rebranding\" (#9652) at NuGet/NuGetGallery","RelatedBody":"Change \"Azure AD\" to \"Microsoft Entra ID\"\r\n\r\nAddresses https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1869215"},{"Id":"31953664360","Type":"PullRequestEvent","CreatedAt":"2023-09-19T22:01:49","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9668","RelatedDescription":"Opened pull request \"Admin Panel for Popularity Transfers\" (#9668) at NuGet/NuGetGallery","RelatedBody":"## Admin Panel for Popularity Transfers\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4746\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3a6ef4ec-da95-483c-bad5-89c51673afd1)\r\n\r\nYou can now enter a list of packages you want to transfer popularity from, and a list of packages you want to transfer to. \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/4c162811-b05c-4460-9517-9351f5f52ae8)\r\n\r\nIt then validates your input. \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/265a5abb-3199-4e48-9005-ea26e7e660df)\r\n\r\nSubmitting your changes updates the DB with new entries in the PackageRenames table.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/9aff4cfb-4b08-45a0-816b-114f1af9e8ed)\r\n\r\n<details><summary>DB changes</summary>\r\n\r\nYou can see the new Serilog (Key = 11) --> Moq (Key = 9) entry\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/6a315e46-0686-4776-be62-56fefa752dee)\r\n</details> \r\n\r\n<details><summary>Error Handling</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5d5dc90a-b10f-4884-80f0-a51795ef7a83)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/dea204c9-20bc-44c1-8691-7438c1c4418a)\r\n</details> \r\n\r\n**NOTE:** Our current playbook asks us to delete any existing popularity transfers for the 'From' packages, so the popularity transfer operation deletes previous entries from the DB. Let me know if this doesn't sound right, or we want to give the DRIs more information/options on what to do with existing popularity transfers. Currently, we just show a warning when we validate the input, and then if a user submits the changes, then we remove all previous entries.\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/ddb3f6ec-1f79-4256-a17b-a8aa068140b9)"},{"Id":"31920590739","Type":"PullRequestEvent","CreatedAt":"2023-09-18T20:07:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9640","RelatedDescription":"Merged pull request \"Fix Update-Database.ps1 to work on DevBox\" (#9640) at NuGet/NuGetGallery","RelatedBody":"On DevBox, global packages folder location is overridden using NUGET_PACKAGES environment variable. This currently breaks the Update-Database.ps1 script, which assumes GPF is at the default location: %userprofile%\\.nuget\\packages.\r\n\r\nNuGet Client docs: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders"},{"Id":"31919057445","Type":"IssuesEvent","CreatedAt":"2023-09-18T18:58:18","Actor":"Spork-Schivago","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9667","RelatedDescription":"Opened issue \"[Feature]: using custom PackageAuthenticationService class\" (#9667) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nNuGet.Server supports the use API keys, however, this support is very premative.    For example, NuGet.Server does not support retrieving api keys from secret managers like the Vault. \n\n### The Elevator Pitch\n\nI would like to use my own custom PackageAuthenticationService that implements a more secure approach, such as using ephemeral API keys from the Vault.  I have modified the PackageAuthenticationService and added it to my ASP.NET Web Application (NET Framework) project but there doesn't seem to be any clear way to set NuGet.Server to use my custom class over it's built in one, maybe besides writing a custom resolver and setting NuGetODataConfig.cs to use my resolver instead.\r\n\r\nIs there a way to accomplish what I want to accomplish, and if not, can it be implemented?   So NuGet.Server uses a custom PackageAuthenticationService?   Thanks. \n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"31984964218","Type":"PullRequestEvent","CreatedAt":"2023-09-20T22:06:36","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12890","RelatedDescription":"Opened pull request \"label/stale/close community PR\" (#12890) at NuGet/Home","RelatedBody":"Fixes: https://github.com/NuGet/Client.Engineering/issues/2484\r\n"},{"Id":"31977969374","Type":"PullRequestEvent","CreatedAt":"2023-09-20T16:40:47","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/pull/12704","RelatedDescription":null,"RelatedBody":"This proposal introduces two new ways to filter and sort packages in Visual Studio's NuGet Package Manager experience.\r\n\r\n[Rendered Proposal](https://github.com/NuGet/Home/blob/6225561b2aa85ddfe55024344155c7ec82ff8973/proposed/2023/vs-filters.md)\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉"},{"Id":"31977527746","Type":"IssuesEvent","CreatedAt":"2023-09-20T16:23:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12889","RelatedDescription":"Opened issue \"Add nullable annotations to NuGet.LibraryModel\" (#12889) at NuGet/Home","RelatedBody":"[NuGet.LibraryModel](https://www.nuget.org/packages/NuGet.LibraryModel) is a package that is part of the [NuGet Client SDK](https://learn.microsoft.com/en-us/nuget/reference/nuget-client-sdk). We are adding null annotations, so projects using [nullable reference types](https://learn.microsoft.com/dotnet/csharp/nullable-references) will benefit from compiler null checking, leading to improved software reliability (fewer NullReferenceExceptions).\r\n\r\nGenerally when annotating nulls we try to avoid making any breaking API or ABI changes. However, the following changes have been made in order to allow the compiler to provide everyone with the most useful nullable warnings.\r\n\r\nProjects that use this package and enable nullable checks might find that upgrading to a version of the package that now has nullable annotations will generate warnings that previously did not generate warnings. This is a natural consequence of annotating the assembly where it previously lacked annotations.\r\n\r\nIn addition, the following breaking changes were implemented:\r\n \r\n## Using the `required` modifier on some class properties\r\n\r\nThe following classes are affected: `Library`\r\n\r\n[C#11 introduced the `required` modifier](https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/required). It means that projects creating instances of these type will be required to use the [object initializer syntax](https://learn.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers), and if any property marked as `required` is not assigned a value, the compiler will generate an error. We also provide constructors with all the required properties as constructor parameters.\r\n\r\nWhile my own testing was not exhaustive, it appears that projects targeting lower C# language versions will still provide correct required property compiler checks as long as the compiler supports C#11. Therefore, if your project builds with the latest .NET SDK or Visual Studio (including MSBuild for command line builds), you should be able to use either the object initializer syntax, or a suitable constructor.\r\n\r\nHowever, if you're using an older version of Visual Studio, MSBuild, or the .NET SDK (for example, using a *global.json* file to pin to .NET 6 SDK), you will get a compiler error saying the constructor is obsolete when using the default constructor, or any other constructor that does not have a parameter for every required property. In this case, you should use a different constructor overload that the compiler does not consider obsolete.\r\n"},{"Id":"31977098035","Type":"IssuesEvent","CreatedAt":"2023-09-20T16:06:42","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12878","RelatedDescription":"Closed issue \"NuGet.Build.Tasks.Pack.targets: Could not find a part of path\" (#12878) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\ndotnet 7.0.100\n\n### Worked before?\n\nI don't know, I havent' tried it before.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI'm having several projects, some of them are .NET7, .NET Framework 4.8, .NET Standard 2.0.\r\nIt seems on all projects dotnet pack works, but not on .NET standard projects. It stops with the error: ```Could not find a part of the path ```.\r\n\r\nThe reason seems to be due to a change in the output path:\r\n\r\n```\r\n<Project DefaultTargets=\"Build\">\r\n\t<Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)..\\'))\" />\r\n\r\n\t<PropertyGroup>\r\n\t\t<OutputPath>$(BuildRoot)\\_Build\\$(Configuration)\\Apps\\$(MSBuildProjectName)</OutputPath>\r\n\t\t<OutDir>$(OutputPath)</OutDir>\r\n\t</PropertyGroup>\r\n</Project>\r\n```\r\n\r\nand the output for all project is exactly dropped into the given folders:\r\n\r\n`_Build\\Debug\\Assemblies\\ipipe.DataCollections.SourceGeneration\\ipipe.DataCollections.SourceGeneration.dll`\r\n\r\nbut the packing tries to locate the output in\r\n\r\n`_Build\\Debug\\Assemblies\\ipipe.DataCollections.SourceGeneration\\netstandard2.0\\win-x64`\r\n\r\n\r\nIt doesn't matter if I call `dotnet pack` or if I use the `Pack` method directly from Visual Studio.\r\n\r\nIs this a known behavior?\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-21T03:30:23.8567876Z","RunDurationInMilliseconds":1067}