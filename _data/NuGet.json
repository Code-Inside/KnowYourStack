{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33667008517","Type":"PullRequestEvent","CreatedAt":"2023-11-28T00:59:16","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9740","RelatedDescription":"Opened pull request \"[Vulnerabilities]Adding new Job for updating v3 Vulnerabilities files.\" (#9740) at NuGet/NuGetGallery","RelatedBody":"This is the first proposal for a new job to automatically update the v3 Vulnerability files.\r\nThis should implement the design indicated at https://github.com/NuGet/Engineering/pull/4940\r\n\r\nMuch of the mechanics of pulling from GitHub are tested in the GitHubVulnerabilities2Db.Facts project.\r\n\r\nThe primary work is done in the FlushAsync method starting at line 53 of src/GitHubVulnerabilities2v3/Extensions/BlobStorageVulnerabilityWriter.cs\r\n\r\nSummary of intended flow:\r\n1. Read the date in the cursor and determine if the run is an update run or a full regeneration run\r\n2. Query GitHub and collect vulnerabilities starting at the date in the cursor and running up to now.\r\n3. For regeneration run, update index.json, base.json, and push an empty update.json. Update cursor to now.\r\n4. For update run, Check the special case\r\n5. The special case is when we see the same vulnerability URL in the update that already exists in base. For this case, we skip this update and regenerate on the next run.\r\n6. Otherwise, update the update.json and index.json. Cursor should NOT be changed."},{"Id":"33661554056","Type":"PullRequestEvent","CreatedAt":"2023-11-27T20:31:49","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9739","RelatedDescription":"Opened pull request \"Prevent snupkg validation failure for malformed nupkg\" (#9739) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5039\r\n\r\nSummary of the changes (in less than 80 characters):\r\n\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/e9167840-afc8-4c6a-bbc2-cbefb6f884e8)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/59518dc8-82c7-40c1-ae95-a746f6aa4efd)\r\n"},{"Id":"33635568776","Type":"IssuesEvent","CreatedAt":"2023-11-27T04:35:51","Actor":"robertmclaws","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9738","RelatedDescription":"Opened issue \"[Feature]: Shields.io in README.md\" (#9738) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nREADME.md only supports images from an allow-listed set of domains. \n\n### The Elevator Pitch\n\nShields.io should be added to that list of domains available for README.md. Then we would be able to support features like this from our GitHub readme.md file:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/1657085/1e88fbb6-2368-45de-ab6f-73f54ff45adf)\r\n\n\n### Additional Context and Details\n\nI think it's important because people deserve to have more control over our badges, and shields.io allows for a range of customizations that only require URL querystring adjustments."},{"Id":"33619299938","Type":"PullRequestEvent","CreatedAt":"2023-11-26T00:27:38","Actor":"bruno-garcia","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9737","RelatedDescription":"Opened pull request \"link to nugettrends.com\" (#9737) at NuGet/NuGetGallery","RelatedBody":"NuGet Trends is a .NET Foundation project: https://github.com/dotnet/nuget-trends\r\n\r\nAdding a link on the package details' right panel.\r\n\r\nDisclaimer: I'm on a Mac and can't really build things without several hacks locally so expect a few CI runs to get this right"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33658743370","Type":"IssuesEvent","CreatedAt":"2023-11-27T18:29:40","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13044","RelatedDescription":"Opened issue \"PackageSourceMappingActionViewModel should handle interactions with model\" (#13044) at NuGet/Home","RelatedBody":""},{"Id":"33623916348","Type":"IssuesEvent","CreatedAt":"2023-11-26T11:53:11","Actor":"WolfgangHG","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13043","RelatedDescription":"Opened issue \"Nuget Central Package Management: behaviour with \"VersionOverride\" is strange\" (#13043) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n\"nuget.exe\" reports 6.8.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI played with CPM and package references with \"VersionOverrides\", and I think I found a place where the behavior is a bit strange.\r\n\r\nAttached sample contains a \"Directory.Packages.props\" with a reference to an older \"Newtonsoft.Json\" version.\r\n[NugetCPMOverride.zip](https://github.com/NuGet/Home/files/13466656/NugetCPMOverride.zip)\r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProject \"ClassLibraryOne\" uses this reference:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\n\r\n\"ClassLibraryTwo\" overrides the Newtonsoft version, and also introduced a completely new package:\r\n\r\n```\r\n    <PackageReference Include=\"System.DirectoryServices\" VersionOverride=\"7.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" VersionOverride=\"13.0.1\"/>\r\n```\r\n\r\nWhen updating the Newtonsoft reference in Nuget Package manager, it switches only the version in \"Directory.Packages.props\" to the newest version, but not the differing version in \"ClassLibraryTwo\". But I think this behavior is OK, as the library is reported on the \"Consolidate\" tab.\r\n\r\nBut Nuget cannot handle the reference \"System.Directory.Services\" very well: it adds an entry to \"Directory.Packages.props\", but does not update the \"VersionOverride\".\r\nThis is \"Directory.Packages.props\":\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\" />\r\n    <PackageVersion Include=\"System.DirectoryServices\" Version=\"8.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe csproj file is unchanged:\r\n```\r\n    <PackageReference Include=\"System.DirectoryServices\" VersionOverride=\"7.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" VersionOverride=\"13.0.1\"/>\r\n```\r\n\r\nAnd this version mismatch is not reported on the \"Consolidate\" tab, and the package update is shown again in the Nuget package manager when you open it next. So you are in an update cycle.\r\n\r\nI would expect Nuget to update the \"VersionOverride\" in case the package is not defined in \"Directory.Packages.props\".\r\n\r\nI probably could have worked around it by adding a \"Directory.Packages.props\" file to \"ClassLibraryTwo\" and import the base file. But the \"VersionOverride\" seems to be a simpler feature to add local package references to subprojects ;-).\n\n### Verbose Logs\n\n_No response_"},{"Id":"33616775068","Type":"IssuesEvent","CreatedAt":"2023-11-25T17:49:31","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12917","RelatedDescription":"Closed issue \"Help Us Improve Our Open Source Repositories!\" (#12917) at NuGet/Home","RelatedBody":"We'd love to hear from those of you who participate often in our open source project and let us know how we're doing as maintainers.\r\n\r\nWhether you've been involved for a while now or you're relatively new to open source, please let us know about your experience by [taking a survey that will take a couple minutes](https://www.surveymonkey.com/r/BMMSK9F).\r\n\r\nThank you kindly!"},{"Id":"33615410321","Type":"IssuesEvent","CreatedAt":"2023-11-25T14:46:48","Actor":"WeihanLi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13042","RelatedDescription":"Opened issue \"How should I get the latest package version using `NuGet.Client`\" (#13042) at NuGet/Home","RelatedBody":""},{"Id":"33615314143","Type":"IssuesEvent","CreatedAt":"2023-11-25T14:33:23","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12407","RelatedDescription":"Closed issue \"Plan for NuGet in 2023\" (#12407) at NuGet/Home","RelatedBody":"Today we are excited to share with you the plan for NuGet and NuGet.org. This issue contains summary of the plan for the year and acts as a place for you to leave feedback.\r\n\r\nThis plan is a collection of input from many stakeholders and outlines where we intend to invest our time in NuGet and NuGet.org.\r\n\r\n> **IMPORTANT**\r\n> This plan is not a commitment; it will evolve as we continue to learn throughout the release. Some things that are not currently planned for NuGet may get pulled in. Some things currently planned may even be pushed out.\r\n\r\n# General information\r\n\r\nNuGet has a major release following [NuGet 6.4](https://docs.microsoft.com/nuget/release-notes/nuget-6.4) and is currently scheduled for release in November 2023 at the same time as .NET 8.\r\n\r\nNuGet will align with the [.NET support policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core) and will therefore be a long-term support (LTS) release.\r\n\r\nNuGet.org does not currently follow any specific schedule and releases features & bug fixes regularly throughout the year.\r\n\r\n### Breaking changes\r\n\r\nNuGet may contain a small number of breaking changes as we continue to evolve NuGet with the .NET platform. Our goal is to minimize breaking changes as much as possible to keep you productive when upgrading. You'll be able to find them at the [.NET 8 Breaking Changes](https://learn.microsoft.com/en-us/dotnet/core/compatibility/8.0).\r\n\r\n## Themes\r\n\r\nThe large investments in NuGet are the following themes:\r\n\r\n### Highly Requested Features\r\n\r\nAs always, a major input into our planning process comes from [votes (👍) for features on GitHub](https://github.com/NuGet/Home/blob/dev/CONTRIBUTING.md#before-submitting-an-issue).\r\n\r\nThese features are areas we are actively engaged in with regards to designing, implementing, and polishing the respective experiences for.\r\n\r\n#### Security\r\n\r\n- https://github.com/NuGet/Home/issues/8087\r\n- https://github.com/NuGet/Home/issues/1851\r\n- https://github.com/NuGet/Home/issues/11262\r\n- https://github.com/NuGet/Home/issues/10730\r\n- https://github.com/NuGet/Home/issues/12015\r\n- https://github.com/NuGet/Home/issues/4387\r\n- https://github.com/NuGet/Home/issues/12497\r\n\r\n#### Tooling\r\n\r\n- https://github.com/NuGet/Home/issues/9015\r\n\r\n#### Season of Giving\r\n\r\n- https://github.com/NuGet/Home/issues/7752\r\n- https://github.com/NuGet/Home/issues/8476\r\n- https://github.com/NuGet/Home/issues/8420\r\n- https://github.com/NuGet/Home/issues/7912\r\n- https://github.com/NuGet/Home/issues/6938\r\n- https://github.com/NuGet/Home/issues/6437\r\n- https://github.com/NuGet/Home/issues/6279\r\n- https://github.com/NuGet/Home/issues/6060\r\n- https://github.com/NuGet/Home/issues/5713\r\n- https://github.com/NuGet/Home/issues/5556\r\n- https://github.com/NuGet/Home/issues/5138\r\n- https://github.com/NuGet/Home/issues/4879\r\n- https://github.com/NuGet/Home/issues/4855\r\n- https://github.com/NuGet/Home/issues/4254\r\n- https://github.com/NuGet/Home/issues/4103\r\n\r\n#### NuGet Gallery\r\n\r\n- https://github.com/NuGet/NuGetGallery/issues/3098\r\n- https://github.com/NuGet/NuGetGallery/issues/8773\r\n- https://github.com/NuGet/NuGetGallery/issues/8964\r\n- https://github.com/NuGet/NuGetGallery/issues/9339\r\n- https://github.com/NuGet/NuGetGallery/issues/7297\r\n\r\n### .NET Platforms and Ecosystem\r\n\r\nMuch of the work planned for NuGet involves improving the package management experience for .NET across different platforms and ecosystem. This involves work in NuGet to ensure a great experience across .NET technologies.\r\n\r\n- https://github.com/NuGet/Home/issues/10430\r\n- https://github.com/NuGet/Home/issues/10872\r\n- https://github.com/NuGet/Home/issues/5154\r\n\r\n### Migrating to .NET\r\n\r\nNuGet has always [supported many scenarios for package management](https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference). In our continued efforts to help you migrate to the latest version of .NET, we will be working on improvements to the [Upgrade Assistant](https://github.com/dotnet/upgrade-assistant) and core package management experiences to help you migrate your project to use the latest version of NuGet.\r\n\r\n## Performance\r\n\r\nWith each [new release of NuGet & Visual Studio comes a plethora of performance improvements](https://devblogs.microsoft.com/visualstudio/performance-improvements-in-nuget/) when restoring NuGet packages, managing project dependencies, and browsing for the next great package to include in your solution. We will continue to invest time to improve your experiences every .NET & Visual Studio release.\r\n\r\n# Feedback\r\n\r\nYour feedback is important to us. The best way to indicate the importance of an issue is to vote (👍) for that [issue on GitHub](https://github.com/NuGet/Home/issues) and [Visual Studio Developer Community](https://developercommunity.visualstudio.com/). We use this data to help us with our regular planning so we can work on the things that matter most to you.\r\n\r\nPlease **comment on this issue** if you believe we are missing something that is critical for NuGet, or are focusing on the wrong areas. Give us a little bit of context as to why you believe so and feel free to upvote each other's comments to help us make changes to our future plans.\r\n\r\nHuge thanks to @ajcvickers and the Entity Framework Core team for a wonderful format and forum to discuss product plans in OSS. 🎉\r\n\r\nLast year's plan can be found in https://github.com/NuGet/Home/issues/11571"},{"Id":"33612955842","Type":"IssuesEvent","CreatedAt":"2023-11-25T09:20:15","Actor":"WolfgangHG","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13041","RelatedDescription":"Opened issue \"Nuget Central Package Management cannot update versions in imported \"Directory.Packages.props\" files with non-default name\" (#13041) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n\"nuget.exe\" reports 6.8.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhile experimenting with CPM, I first tried something similar to this rather weird structure of nuget CPM declarations:\r\n\r\nIn the solution root, there sits a \"Directory.Packages.props\" file that imports a file \"Included_Directory.Packages.props\". \r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <Import Project=\".\\Included_Directory.Packages.props\" />\r\n  <ItemGroup>\r\n    <!--Additional package versions -->\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis file \"Included_Directory.Packages.props\" defines a version for \"Newtonsoft.Json\":\r\n```\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe projects declare a package reference:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\n\r\nWhen using Nuget Package Manager to update \"Newtonsoft.Json\", it does not update the version in \"Included_Directory.Packages.props\" but overwrites the version in each project file:\r\n```\r\n  <ItemGroup>\r\n    <PackageVersion Update=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n  </ItemGroup>\r\n```\r\n\r\nSee attached sample (with original state - you have to update \"Newtonsoft.Json\" to reproduce the problem): [NugetCPM_NonDefault.zip](https://github.com/NuGet/Home/files/13463457/NugetCPM_NonDefault.zip)\r\n\r\n\r\nMy reason for doing something like this: I have a rather large tools solution with a lot of utility dlls, and I have an application that references those utility dlls (by including copies of the tools dll in a local folder and referencing those dlls instead of using Nuget package references - due to historical reasons :-( ). So I want to copy the \"Directory.Packages.props\" from the utility solution to the application solution with a different name, and import it in the application solution \"Directory.Packages.props\". When updating a nuget package, VS would modify each project file instead of trying to write to the imported \"Directory.Packages.props\".\r\n\r\n\r\n\r\nIt works when the imported file has the name \"Directory.Packages.props\" and is just placed in a subdir. So, this would be the workaround for me.\r\nHere is a sample with this workaround:\r\n[NugetCPM_Default.zip](https://github.com/NuGet/Home/files/13463458/NugetCPM_Default.zip)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33597530913","Type":"IssuesEvent","CreatedAt":"2023-11-24T11:40:38","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13040","RelatedDescription":"Opened issue \"[Bug Bash] An error “Type universe cannot resolve assembly: System.Runtime” occurs when uninstalling the top-level package “Microsoft.NETCore.UniversalWindowsPlatform” whose transitive package should not be uninstalled\" (#13040) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.9.0.45\n\n### Worked before?\n\nIt also reproes on 17.6 (D17.6\\34302.98) & 16.11 (D16.11\\34301.259)\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\tCreate a C# UWP project in VS and open the PM UI of the project.\r\n2.\tRight-click the project in Solution Explorer and select “Manage NuGet Packages…” menu item to open PM UI.\r\n3.\tGo to “Installed” tab and uninstall the top-level package: “Microsoft.NETCore.UniversalWindowsPlatform” whose transitive package should not be uninstalled.\r\n4.\tBuild the project.\r\n\r\n#### Expected:\r\nIn step3 NuGet should remind user that the top-level package should not be uninstalled since its transitive package: “NETStandard.Library” (which depends on package “System.Runtime”) should not be uninstalled. [At least warn people the uninstallation would bring error and how to resolve it].\r\n\r\n#### Actual:\r\nNo warning is provided in step3 and there is an error “Type universe cannot resolve assembly: System.Runtime” in the Error List window after step4 as below. And the error message doesn’t tell people how to resolve it.\r\n![image](https://github.com/NuGet/Home/assets/20632625/3973cdef-679a-4f5e-b765-fb807392b173)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33592755595","Type":"IssuesEvent","CreatedAt":"2023-11-24T08:25:25","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13039","RelatedDescription":"Closed issue \"Microsoft.EntityFrameworkCore.Sqlite how to prevent all the runtime binaries from being emitted? \" (#13039) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n7.0.402\n\n### Worked before?\n\nUnsure\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI've logged this here https://github.com/dotnet/efcore/issues/32382\r\n\r\nWe have a project which only runs on windows x64 and uses Microsoft.EntityFrameworkCore.Sqlite\r\n\r\nI notice in the bin folder there are sqlite dependencies for just about every computer on earth... How can we prevent these from being emitted?\r\n\r\nand was asked to follow up with nuget team\r\n\r\nWe use efcore in our project however we only target win-x64 environments, can nuget do something to allow efcore to only emit the architecture files needed for supported architectures.\n\n### Verbose Logs\n\n_No response_"},{"Id":"33585492245","Type":"IssuesEvent","CreatedAt":"2023-11-23T22:31:51","Actor":"catmanjan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13039","RelatedDescription":"Opened issue \"Microsoft.EntityFrameworkCore.Sqlite how to prevent all the runtime binaries from being emitted? \" (#13039) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n7.0.402\n\n### Worked before?\n\nUnsure\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI've logged this here https://github.com/dotnet/efcore/issues/32382\r\n\r\nWe have a project which only runs on windows x64 and uses Microsoft.EntityFrameworkCore.Sqlite\r\n\r\nI notice in the bin folder there are sqlite dependencies for just about every computer on earth... How can we prevent these from being emitted?\r\n\r\nand was asked to follow up with nuget team\r\n\r\nWe use efcore in our project however we only target win-x64 environments, can nuget do something to allow efcore to only emit the architecture files needed for supported architectures.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-28T03:30:21.4711644Z","RunDurationInMilliseconds":1089}