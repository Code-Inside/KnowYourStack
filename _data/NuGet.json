{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42415672476","Type":"PullRequestEvent","CreatedAt":"2024-09-30T23:47:16","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10194","RelatedDescription":"Merged pull request \"FI main to dev\" (#10194) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"42415239254","Type":"PullRequestEvent","CreatedAt":"2024-09-30T23:20:11","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10194","RelatedDescription":"Opened pull request \"FI main to dev\" (#10194) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"42415092969","Type":"PullRequestEvent","CreatedAt":"2024-09-30T23:11:25","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10193","RelatedDescription":"Merged pull request \"Fix for issues with root page styling\" (#10193) at NuGet/NuGetGallery","RelatedBody":"We only have [custom styles](https://github.com/NuGet/NuGetGallery/blob/f1434e76555bf7c8f8b29b0e9a7d08f1f1b76982/src/Bootstrap/less/theme/base.less#L624-L636) for when `id=\"/\"`, no need to have it specified in any other case. Also fixes incorrect styling when query parameters are present for the root page.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5636"},{"Id":"42414782707","Type":"PullRequestEvent","CreatedAt":"2024-09-30T22:52:50","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10193","RelatedDescription":"Opened pull request \"Fix for issues with root page styling\" (#10193) at NuGet/NuGetGallery","RelatedBody":"We only have [custom styles](https://github.com/NuGet/NuGetGallery/blob/f1434e76555bf7c8f8b29b0e9a7d08f1f1b76982/src/Bootstrap/less/theme/base.less#L624-L636) for when `id=\"/\"`, no need to have it specified in any other case. Also fixes incorrect styling when query parameters are present for the root page.\r\n"},{"Id":"42410319545","Type":"IssuesEvent","CreatedAt":"2024-09-30T19:41:46","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10178","RelatedDescription":"Closed issue \"Adding https://skillicons.dev to trusted domains\" (#10178) at NuGet/NuGetGallery","RelatedBody":"Allowing https://skillicons.dev icons to be rendered in readmes.\r\n\r\nExamples\r\n\r\n1. https://skillicons.dev/icons?i=dotnet\r\n2. https://skillicons.dev/icons?i=docker"},{"Id":"42345141912","Type":"PullRequestEvent","CreatedAt":"2024-09-27T18:44:58","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10192","RelatedDescription":"Opened pull request \"Support blob hierarchy operations with a custom delimiter\" (#10192) at NuGet/NuGetGallery","RelatedBody":"#### PR Summary\nIntroduces a `delimiter` parameter to the `AzureStorage` class and its methods for blob hierarchy operations.\n- `AzureStorage.cs`: Added `_delimiter` field, updated constructor, `List`, and `ListAsync` methods to use `delimiter`.\n- `AzureStorageFactory.cs`: Added `_delimiter` field, updated constructor, and `Create` method to pass `delimiter`.\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/5645"},{"Id":"42272419022","Type":"PullRequestEvent","CreatedAt":"2024-09-25T20:12:10","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10184","RelatedDescription":"Merged pull request \"Secret injected IConfigurationSection and IConfiguration wrappers.\" (#10184) at NuGet/NuGetGallery","RelatedBody":"Secret injected wrappers for `IConfigurationSection` and `IConfiguration` to provide the ability to inject secrets when we are not constructing the whole configuration stack from scratch (Azure Functions, for example).\r\nPulled out from internal project with minimal changes."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42412990860","Type":"IssuesEvent","CreatedAt":"2024-09-30T21:22:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11625","RelatedDescription":"Closed issue \"[DCR]: Show transitive origins in `dotnet list package --include-transitive`\" (#11625) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\ndotnet.exe\r\n\r\n### Current Behavior\r\n\r\n#### Command\r\n\r\n```\r\n> dotnet list package --include-transitive\r\n```\r\n\r\n#### Output\r\n\r\n```\r\nProject 'projectA' has the following package references\r\n   [net6.0]:\r\n   Transitive Package                        Resolved\r\n   > Microsoft.TestPlatform.ObjectModel      17.0.0\r\n   > Microsoft.TestPlatform.TestHost         17.0.0\r\n   > Newtonsoft.Json                         12.0.1\r\n   > Newtonsoft.Json.Bson                    1.0.2\r\n   > NuGet.Frameworks                        5.0.0\r\n   > PeterO.Cbor                             4.5.2\r\n   > PeterO.Numbers                          1.8.2\r\n   > PeterO.URIUtility                       1.0.0\r\n   > projectB                                1.0.0\r\n   > System.Reflection.Metadata              1.6.0\r\n\r\nProject 'projectB' has the following package references\r\n   [net6.0]:\r\n   Top-level Package                      Requested   Resolved\r\n   > Microsoft.TestPlatform.TestHost      17.0.0      17.0.0\r\n   > Newtonsoft.Json.Bson                 1.0.2       1.0.2\r\n   > PeterO.Cbor                          4.5.2       4.5.2\r\n\r\n   Transitive Package                        Resolved\r\n   > Microsoft.TestPlatform.ObjectModel      17.0.0\r\n   > Newtonsoft.Json                         12.0.1\r\n   > NuGet.Frameworks                        5.0.0\r\n   > PeterO.Numbers                          1.8.2\r\n   > PeterO.URIUtility                       1.0.0\r\n   > System.Reflection.Metadata              1.6.0\r\n```\r\n\r\n\r\n### Desired Behavior\r\n\r\nAdd an additional column that indicates which package/project brought a given transitive package. Example:\r\n\r\n#### Command\r\n\r\n```\r\n> dotnet list package --include-transitive\r\n```\r\n\r\n#### Output\r\n\r\n```\r\nProject 'projectA' has the following package references\r\n   [net6.0]:\r\n   Transitive Package                        Resolved    Origin(s)\r\n   > Microsoft.TestPlatform.ObjectModel      17.0.0      projectB\r\n   > Microsoft.TestPlatform.TestHost         17.0.0      projectB\r\n   > Newtonsoft.Json                         12.0.1      projectB\r\n   > Newtonsoft.Json.Bson                    1.0.2       projectB\r\n   > NuGet.Frameworks                        5.0.0       projectB\r\n   > PeterO.Cbor                             4.5.2       projectB\r\n   > PeterO.Numbers                          1.8.2       projectB\r\n   > PeterO.URIUtility                       1.0.0       projectB\r\n   > projectB                                1.0.0       projectB\r\n   > System.Reflection.Metadata              1.6.0       projectB\r\n\r\nProject 'projectB' has the following package references\r\n   [net6.0]:\r\n   Top-level Package                      Requested   Resolved\r\n   > Microsoft.TestPlatform.TestHost      17.0.0      17.0.0\r\n   > Newtonsoft.Json.Bson                 1.0.2       1.0.2\r\n   > PeterO.Cbor                          4.5.2       4.5.2\r\n\r\n   Transitive Package                        Resolved   Origin(s)\r\n   > Microsoft.TestPlatform.ObjectModel      17.0.0     Microsoft.TestPlatform.TestHost/17.0.0\r\n   > Newtonsoft.Json                         12.0.1     Newtonsoft.Json.Bson/1.0.2;Microsoft.TestPlatform.TestHost/17.0.0\r\n   > NuGet.Frameworks                        5.0.0      Microsoft.TestPlatform.TestHost/17.0.0\r\n   > PeterO.Numbers                          1.8.2      PeterO.Cbor/4.5.2\r\n   > PeterO.URIUtility                       1.0.0      PeterO.Cbor/4.5.2\r\n   > System.Reflection.Metadata              1.6.0      Microsoft.TestPlatform.TestHost/17.0.0\r\n```\r\n\r\n\r\n### Additional Context\r\n\r\nSee proposal https://github.com/NuGet/Home/blob/dev/accepted/2022/dotnet-nuget-why-proposal.md\r\nIssue filed from PR comment https://github.com/NuGet/NuGet.Client/pull/4465#discussion_r809593140 "},{"Id":"42412904092","Type":"IssuesEvent","CreatedAt":"2024-09-30T21:19:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13805","RelatedDescription":"Closed issue \"[Transitive's in Solution PM UI] Improve localization and narrator\" (#13805) at NuGet/Home","RelatedBody":""},{"Id":"42412423280","Type":"IssuesEvent","CreatedAt":"2024-09-30T21:00:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13753","RelatedDescription":"Closed issue \"Allow packages to suppress NuGetAudit warnings from their transitive dependencies\" (#13753) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe, NuGet SDK\r\n\r\n### The Elevator Pitch\r\n\r\nIn some cases, the transitive dependency with a vulnerability cannot be updated because there's no fixed version yet or it contains breaking changes, and the users of the package aren't exposed to the vulnerability due to the way the transitive dependency is used. For such cases something like `<NuGetAuditSuppress Include=\"https://github.com/advisories/XXXX\" Justification=\"\" />` should be flowed through in the package to the users but apply only to the dependencies brought by this package.\r\n\r\n### Additional Context and Details\r\n\r\nThere should be a way to see the warnings suppressed in this way, related to https://github.com/NuGet/Home/issues/13518"},{"Id":"42412216047","Type":"IssuesEvent","CreatedAt":"2024-09-30T20:52:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13733","RelatedDescription":"Closed issue \"[Bug Bash] Expected error disappear and restore will be successful after the TLS certificate validation is re-enabled\" (#13733) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 9.0.100-rc.2.24420.21\r\n\r\n### Worked before?\r\n\r\nIt is not a regression since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1.\t[Patch  dotnet  SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (patch 9.0.1xx with Nupkgs of the NuGet build you are testing). \r\n2.\tOpen a command prompt (called prompt1), go to the PatchedSDK folder and create a .NET SDK project with command `dotnet new console  -n NetCoreConsole `\r\n3.\tIn the solution folder, create a file named nuget.config with the following content: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\"/> \r\n  </packageSources> \r\n</configuration> \r\n```\r\n4.\tOpen the .csproj file for your project and insert the following package reference within an ItemGroup: \r\n```\r\n<ItemGroup> \r\n  <PackageReference Include=\"abcdefghijkl\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n5.\tOpen the \"...\\Entropy\\filebackedserver\\filebackedserver\\filebackedserver.csproj\" and update the <TargetFramework> property to 'net9.0'. \r\n6.\tOpen a second command prompt (called prompt2), go to the PatchedSDK folder and build the server by running:  \r\n`dotnet build   ...\\Entropy\\filebackedserver\\filebackedserver\\filebackedserver.csproj `\r\n7.\tStart the local server by executing: \r\n`dotnet run --project  ...\\Entropy\\filebackedserver\\filebackedserver\\filebackedserver.csproj `\r\n8.\tSwitch back to the first terminal where your original project is located (prompt1) and run \r\n`dotnet restore …\\NetCoreConsole.csproj `\r\n9.\tModify the nuget.config file to disable TLS certificate validation as follows: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\" disableTLSCertificateValidation=\"true\"/> \r\n  </packageSources> \r\n</configuration> \r\n```\r\n10.\t Run dotnet restore again: `dotnet restore …\\NetCoreConsole.csproj`\r\n11.\tModify the nuget.config file to re-enable the TLS certificate validation as follows: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\" /> \r\n  </packageSources> \r\n</configuration> \r\n```\r\n12.\tRun dotnet restore again: `dotnet restore …\\NetCoreConsole.csproj`\r\n#### Expected Result:\r\nThis should result in a \"TLS validation failed\" error or \"Unable to load the service index\" error in step12 as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/81d2ef03-362b-4741-9c29-b7ce1fff6396)\r\n#### Actual Result:\r\nNo error shows and restoring is successful in step12.\r\n![image](https://github.com/user-attachments/assets/ef0c3229-9caa-40f4-a5c0-3d87380bd00b)\r\n\r\n\r\n#### Notes:\r\n1.Repro rate: 100%\r\n2.The feature works well in step8 (the expected error shows). if you re-enable the TLS certificate validation, it will fail. This doesn't make sense."},{"Id":"42411988438","Type":"IssuesEvent","CreatedAt":"2024-09-30T20:44:00","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13828","RelatedDescription":"Opened issue \"Detect if restore used NuGetAudit or not for PackageReference projects with static graph restore\" (#13828) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nContinuation of\r\n* https://github.com/NuGet/Home/issues/13778\r\n\r\nAdd the same support when `RestoreUseStaticGraphEvaluation` is set to true\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42405003162","Type":"IssuesEvent","CreatedAt":"2024-09-30T16:41:28","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13823","RelatedDescription":"Closed issue \"Signing:  key not disposed\" (#13823) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nlatest\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nIn [`NuGet.Packaging.Signing.CertificateUtility.IsCertificatePublicKeyValid(...)`](https://github.com/NuGet/NuGet.Client/blob/b43ffa23bd5e6d0261a9d951c0e70483126f9c55/src/NuGet.Core/NuGet.Packaging/Signing/Utility/CertificateUtility.cs#L156-L166) an `System.Security.Cryptography.RSA` object is created but not disposed.\n\n### Verbose Logs\n\n_No response_"},{"Id":"42382999745","Type":"IssuesEvent","CreatedAt":"2024-09-30T06:33:03","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13825","RelatedDescription":"Opened issue \"[Cross-platform Dotnet NuGet Sign] Creating a new test certificate fails with the message “The specified item is no longer valid. It may have been deleted from the keychain” on MacOS Sequoia 15.0 \" (#13825) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK Version: 8.0.403-servicing.24463.3  \n\n### Worked before?\n\nThis is a regression since it doesn’t repro on .NET SDK Version: 8.0.402-servicing.24419.7 patched with Dev\\6.12.0.87. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Notes:    \r\n\r\n1. The repro rate is 100%.   \r\n2. This issue reproes on MacOS: Sequoia 15.0, it doesn’t repro on MacOS Sonoma 14.6.1. \r\n\r\n \r\n\r\n#### Steps:  \r\n\r\n1. [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703): Patch dotnet SDK. \r\n2. Go to the patchedSDK folder and try to create a new test certificate with the command below:  \r\n`./dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net8.0 --password password `\r\n\r\n     \r\n\r\n#### Expected:  \r\n\r\nCreating the new test certificate is successful. \r\n\r\n#### Actual:        \r\n\r\nCreating a new test certificate fails with the message “The specified item is no longer valid. It may have been deleted from the keychain” as below:\r\n![Unbenannt](https://github.com/user-attachments/assets/83ccd406-22d8-4a65-a89c-d6681b5a7ecb)\n\n### Verbose Logs\n\n_No response_"},{"Id":"42361564852","Type":"IssuesEvent","CreatedAt":"2024-09-28T20:13:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13813","RelatedDescription":"Closed issue \"Transitive analyzers/source generators flow through by default?!\" (#13813) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.100\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nIt's mentioned in the official documentation that the default value of `PrivateAssets` for a `<PackageReference>` is `contentfiles;analyzers;build` — see [this](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets:~:text=contentfiles%3Banalyzers%3Bbuild); which, as far as I understand, is supposed to mean that if:\r\n\r\n1. Project `A` references package `B`\r\n2. Package `B` references package `C` containing analyzers/source generators\r\nThen the analyzers/source generators from `C` would not flow through to `A`.\r\n\r\nThis, however, doesn't seem to be the case, which I find perplexing. Here's a minimal reproduction: https://github.com/aradalvand/nuget-transitive-analyzer-test\r\n\r\nSteps to reproduce:\r\n1. `git clone https://github.com/aradalvand/nuget-transitive-analyzer-test`\r\n2. `dotnet build`\r\n\r\nHere is the `ThePackage`'s `.nuspec` contents:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>ThePackage</id>\r\n    <version>1.0.0</version>\r\n    <authors>ThePackage</authors>\r\n    <description>Package Description</description>\r\n    <repository type=\"git\" />\r\n    <dependencies>\r\n      <group targetFramework=\"net8.0\">\r\n        <dependency id=\"Riok.Mapperly\" version=\"3.6.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\nNotice `exclude=\"Build,Analyzers\"`.\r\n\r\nHowever, when you run `dotnet build` on the repro linked above, to build the `ConsumingThePackage` project, you'll see that Mapperly's source generators (which was referenced in `ThePackage`) are actually run in `ConsumingThePackage`. This is precisely against what `exclude=\"Build,Analyzers\"` suggests.\r\n\r\nWhat am I missing?! This is extremely surprising, given what the docs say.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42361563696","Type":"IssuesEvent","CreatedAt":"2024-09-28T20:13:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13813","RelatedDescription":"Closed issue \"Transitive analyzers/source generators flow through by default?!\" (#13813) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.100\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nIt's mentioned in the official documentation that the default value of `PrivateAssets` for a `<PackageReference>` is `contentfiles;analyzers;build` — see [this](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets:~:text=contentfiles%3Banalyzers%3Bbuild); which, as far as I understand, is supposed to mean that if:\r\n\r\n1. Project `A` references package `B`\r\n2. Package `B` references package `C` containing analyzers/source generators\r\nThen the analyzers/source generators from `C` would not flow through to `A`.\r\n\r\nThis, however, doesn't seem to be the case, which I find perplexing. Here's a minimal reproduction: https://github.com/aradalvand/nuget-transitive-analyzer-test\r\n\r\nSteps to reproduce:\r\n1. `git clone https://github.com/aradalvand/nuget-transitive-analyzer-test`\r\n2. `dotnet build`\r\n\r\nHere is the `ThePackage`'s `.nuspec` contents:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>ThePackage</id>\r\n    <version>1.0.0</version>\r\n    <authors>ThePackage</authors>\r\n    <description>Package Description</description>\r\n    <repository type=\"git\" />\r\n    <dependencies>\r\n      <group targetFramework=\"net8.0\">\r\n        <dependency id=\"Riok.Mapperly\" version=\"3.6.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\nNotice `exclude=\"Build,Analyzers\"`.\r\n\r\nHowever, when you run `dotnet build` on the repro linked above, to build the `ConsumingThePackage` project, you'll see that Mapperly's source generators (which was referenced in `ThePackage`) are actually run in `ConsumingThePackage`. This is precisely against what `exclude=\"Build,Analyzers\"` suggests.\r\n\r\nWhat am I missing?! This is extremely surprising, given what the docs say.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-01T03:30:23.2561907Z","RunDurationInMilliseconds":911}