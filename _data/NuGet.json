{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"27324700905","Type":"IssuesEvent","CreatedAt":"2023-02-25T00:13:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9354","RelatedDescription":"Reopened issue \"[NuGet.org Bug]: Information on the `Script & Interactive` usage tab isn't quite accurate \" (#9354) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nThe `Script & Interactive` tab shows informational text that could use an update. \r\n\r\n> #r directive can be used in F# Interactive, C# scripting and .NET Interactive. Copy this into the interactive tool or source code of the script to reference the package. \r\n\r\nI'd suggest two changes:\r\n\r\n* The NuGet support for `#r` is not present in C# scripting. \r\n* The VS Code extension for .NET Interactive is now called [Polyglot Notebooks](https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/). (.NET Interactive is also available in other places, so this name change doesn't apply universally.) Mentioning .NET Interactive **_and_** Polyglot Notebooks might be helpful.\r\n\r\n\n\n### Repro Steps\n\n1. Open a package URL, e.g.  https://www.nuget.org/packages/Apache.Arrow/\r\n2. Click the `Script & Interactive` tab\n\n### Expected Behavior\n\nThe wording could be more accurate.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/547415/214192932-b1fa8a27-ce95-4d75-a11e-21e17274383c.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"27324697138","Type":"IssuesEvent","CreatedAt":"2023-02-25T00:13:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9355","RelatedDescription":"Reopened issue \"[NuGet.org Bug]: The rendering of code block in Readme shows the light grey shade. \" (#9355) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe rendering of code block in Readme shows the light grey shade at each line. This looks not pretty and doesn't align with official documents.\n\n### Repro Steps\n\nOpen any package with the code block in Readme: https://www.nuget.org/packages/Newtonsoft.Json\r\n\r\nThere is the light grey shade at each line of the code block:\r\n![image](https://user-images.githubusercontent.com/41028779/214198811-570ada55-fd22-41de-b921-29f6cd16920b.png)\r\n\r\nHaving the similar rendering of code block as official documents will look much better and support package authors to use this feature.\n\n### Expected Behavior\n\nNo shade at each line of the code block in Readme.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"27324057249","Type":"IssuesEvent","CreatedAt":"2023-02-24T23:12:23","Actor":"RiadGahlouz","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9355","RelatedDescription":"Closed issue \"[NuGet.org Bug]: The rendering of code block in Readme shows the light grey shade. \" (#9355) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe rendering of code block in Readme shows the light grey shade at each line. This looks not pretty and doesn't align with official documents.\n\n### Repro Steps\n\nOpen any package with the code block in Readme: https://www.nuget.org/packages/Newtonsoft.Json\r\n\r\nThere is the light grey shade at each line of the code block:\r\n![image](https://user-images.githubusercontent.com/41028779/214198811-570ada55-fd22-41de-b921-29f6cd16920b.png)\r\n\r\nHaving the similar rendering of code block as official documents will look much better and support package authors to use this feature.\n\n### Expected Behavior\n\nNo shade at each line of the code block in Readme.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"27324057091","Type":"IssuesEvent","CreatedAt":"2023-02-24T23:12:22","Actor":"RiadGahlouz","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9354","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Information on the `Script & Interactive` usage tab isn't quite accurate \" (#9354) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nThe `Script & Interactive` tab shows informational text that could use an update. \r\n\r\n> #r directive can be used in F# Interactive, C# scripting and .NET Interactive. Copy this into the interactive tool or source code of the script to reference the package. \r\n\r\nI'd suggest two changes:\r\n\r\n* The NuGet support for `#r` is not present in C# scripting. \r\n* The VS Code extension for .NET Interactive is now called [Polyglot Notebooks](https://devblogs.microsoft.com/dotnet/dotnet-interactive-notebooks-is-now-polyglot-notebooks/). (.NET Interactive is also available in other places, so this name change doesn't apply universally.) Mentioning .NET Interactive **_and_** Polyglot Notebooks might be helpful.\r\n\r\n\n\n### Repro Steps\n\n1. Open a package URL, e.g.  https://www.nuget.org/packages/Apache.Arrow/\r\n2. Click the `Script & Interactive` tab\n\n### Expected Behavior\n\nThe wording could be more accurate.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/547415/214192932-b1fa8a27-ce95-4d75-a11e-21e17274383c.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"27324056536","Type":"PullRequestEvent","CreatedAt":"2023-02-24T23:12:19","Actor":"RiadGahlouz","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9401","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.02.23]RI of dev into main\" (#9401) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"27323368288","Type":"PullRequestEvent","CreatedAt":"2023-02-24T22:18:49","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9404","RelatedDescription":"Opened pull request \"[WCP]alt attribute for img tag\" (#9404) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\nuse reg to add alt = image to fix accessibility.\r\n\r\nThis is short term quick fix. we need come up a better long-term solution. \r\nFor now, image just temporary image description.   \r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4784"},{"Id":"27314622018","Type":"IssuesEvent","CreatedAt":"2023-02-24T14:48:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9403","RelatedDescription":"Closed issue \"[NuGet.org Bug]: \" (#9403) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nHi Team,\r\n\r\nI am trying to build our dotnet application with an automated Jenkins pipeline. The steps include: dotnet restore -> dotnet publish -> docker build. However, during the restore step when the process would download packages from https://api.nuget.org/v3/index.json, I get the errors which you can see below.\r\n\r\nThe occurrence of the errors and the number of affected packages is completely RANDOM. Sometimes they don't appear at all, sometimes I see these errors in the build log, but not breaking it, and sometimes the build breaks.\r\nI've been getting these errors since a couple of days\n\n### Repro Steps\n\nSince these errors appear randomly, I am not sure there are exact steps to reproduce the issue. These are the steps used by me, that get the error:\r\n- Jenkins job running a shell script\r\n- Script executing dotnet restore, dotnet publish, docker build commands\r\n\r\nThis solution worked perfectly thus far\n\n### Expected Behavior\n\nPackages can be downloaded from https://api.nuget.org/v3/index.json during dotnet restore, consistently without errors\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/61154662/221184392-9769f778-1cfc-4bd4-acc6-c15c1195cb4a.png)\r\n![image](https://user-images.githubusercontent.com/61154662/221184112-15bdce2c-603e-4292-8d0e-2ae459728294.png)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"27319764133","Type":"IssuesEvent","CreatedAt":"2023-02-24T18:42:24","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9466","RelatedDescription":"Closed issue \"[CPVM-OnBoard] Support inheritance across Directory.packages.props\" (#9466) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\n> Can Directory.Packages.props be arranged in multiple levels of the tree, such that different subtrees can have different default versions of packages? Is the goal to eventually aggregate the multi-level files so that the closest one overrides the parent ones but inherits what it doesn't change? Alternatively I suppose we can simply define the overrides in the nearer one and then <Import> the original one, since given the behavior you said it has, the subsequent ones that conflict will be ignored.\r\n\r\n\r\n\r\n"},{"Id":"27319677688","Type":"IssuesEvent","CreatedAt":"2023-02-24T18:37:34","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12229","RelatedDescription":"Closed issue \"[Bug]: Disable the Update/Install button for floating versions in CPM in PMUI\" (#12229) at NuGet/Home","RelatedBody":"CPM doesn't allow the usage of Floating Versions, disable this in the PM UI "},{"Id":"27319463723","Type":"IssuesEvent","CreatedAt":"2023-02-24T18:25:52","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12285","RelatedDescription":"Closed issue \"CPM opt in detection in VS and commandline is different\" (#12285) at NuGet/Home","RelatedBody":"1. dotnet new classlib\r\n1. Change the project file to\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally >true</ManagePackageVersionsCentrally>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Versioning\" Version=\"6.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n1. Restore on the commandline (succeed)\r\n1. Load in VS.\r\n![image](https://user-images.githubusercontent.com/2878341/204876611-ad4c60bd-f9d7-47c8-9474-5a2a01bcfc21.png)\r\n\r\n\r\nThe checks in VS and commandline are different. The reason is that the commandline implementation checks for the existence of the directory.packages.props file, but the VS one does not. \r\n\r\nThese should be the same. \r\n\r\n2 ideas: \r\n\r\n- Do not require the directory.packages.props file to exist. This would be the project would fail on the commandline as well.\r\n- set the ManagePackageVersionsCentrally property to true if and only if, the prop value is true and the file was imported. This would allow nomination to just work. "},{"Id":"27308931266","Type":"IssuesEvent","CreatedAt":"2023-02-24T10:32:59","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12454","RelatedDescription":"Opened issue \"[Cross-platform Sign Verify] Redundant error NU3034 appears multiple times after restoring the project with an expired certificate package added on Windows\" (#12454) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n .NET SDK 7.0.104\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\tExecute the [Pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2.\tWhere <NotBefore> and <NotAfter> are datetime values that mark a 10-minute period starting now, create a short-lived test code signing certificate that will expire 10 minutes from now. \r\n              On Windows: ` .\\dotnet\\dotnet.exe run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0 -- -nb \"<NotBefore>\" -na \"<NotAfter>\"  `\r\n3.\tWhere <CertificateFilePath> is the file path to the .cer or .pem file in step 1 and <VersionedSdkDirectoryPath> is the directory path for the versioned .NET SDK directory (e.g.:  ./dotnet/dotnet/sdk/7.0.100), add trust for the certificate: \r\n              On Windows: ` .\\dotnet\\dotnet.exe run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath> `\r\n4.\tWhere <PackageId> is the test package ID and <PfxFilePath> is the file path to the .pfx file, sign the test package: \r\n              On Windows:  `.\\dotnet\\dotnet.exe nuget sign .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> `\r\n5.\tVerify that 1 warning displays in the output from the previous step: \r\n      warn : NU3002: The '--timestamper' option was not provided. The signed package will not be timestamped. To learn more about this option, please visit https://docs.microsoft.com/dotnet/core/tools \r\n6.\tCreate a test project: \r\n              On Windows:  `mkdir .\\test && pushd .\\test && ..\\dotnet\\dotnet.exe new console && copy ..\\NuGet.config.template .\\NuGet.config  `\r\n7.\tUpdate NuGet.config to reference the SHA-256 fingerprint of the short-lived certificate created in step 2. \r\n8.\tClear local NuGet resources and previous restore results: \r\n               On Windows:  `rd /s /q .\\obj && ..\\dotnet\\dotnet.exe nuget locals --clear all  `\r\n9.\tWhere <PackageId> is the test package ID, add a package reference to the test package when the time is expired: \r\n               On Windows: ` ..\\dotnet\\dotnet.exe add package <PackageId> --version 1.0.0 `\r\n10.\tVerify the results of the previous step. \r\n              On Windows, the operation failed with the following messages: \r\n              info : X.509 certificate chain validation will use the default trust store selected by .NET. \r\na.\terror: NU3037: Package '<PackageId> 1.0.0' from source 'E:\\testpass\\<PackageId>\\bin\\Debug': The author primary signature validity period has expired. \r\n11.\tRepeat step 8. \r\n12.\tWhere <PackageId> is the test package ID, edit test.csproj to include the following element directly inside the root <configuration> element: \r\n```\r\n              <ItemGroup> \r\n                 <PackageReference Include=\"<PackageId>\" Version=\"1.0.0\" /> \r\n              </ItemGroup> \r\n```\r\n13.\tRestore: \r\n              On Windows:  `..\\dotnet\\dotnet.exe restore -v detailed`\r\n\r\n#### Expected:\r\nWhere <PackageId> is the test package ID, verify the results of the previous step. \r\n       On Windows, the operation failed with the following messages: \r\na.\tX.509 certificate chain validation will use the default trust store selected by .NET. \r\nb.\tPackageSignatureVerificationLog: PackageIdentity: <PackageId>.1.0.0 Source: E:\\testpass\\<PackageId>\\bin\\Debug PackageSignatureValidity: True \r\nc.\tBuild FAILED. \r\n         E:\\testpass\\test\\test.csproj : warning NU3027: Package '<PackageId> 1.0.0' from source 'E:\\testpass\\<PackageId>\\bin\\Debug': The signature should be timestamped to enable long-term signature validity after the certificate has expired. \r\n         E:\\testpass\\test\\test.csproj : error NU3037: Package '<PackageId> 1.0.0' from source 'E:\\testpass\\<PackageId>\\bin\\Debug': The author primary signature validity period has expired. \r\n         1 Warning(s) \r\n         1 Error(s) \r\n#### Actual:\r\nRedundant error NU3034 appears multiple times as below screenshot.\r\n![3MoreNU3034ErrorAfterRestore](https://user-images.githubusercontent.com/20632625/221156167-32642e62-9c45-43e1-9456-38efe76412bc.png)\r\n#### Notes:\r\n1.\tIt also reproes on the test case “[Cross-platform verify:  signed package with untrusted author certificate](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FCross-platform%20verify%20%20tampered%20signed%20package%7Cec78d709-cbfc-4ecd-b068-85de4584ff38%2F%29&wdorigin=703)”\r\n2.\tIt doesn’t repro on .NET SDK 7.0.103.\r\n3.\tIt just repro on Windows platform.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"27174265829","Type":"IssuesEvent","CreatedAt":"2023-02-17T22:51:59","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/60","RelatedDescription":"Closed issue \"NuGet.org migration towards a new multi-CDN infrastructure\" (#60) at NuGet/Announcements","RelatedBody":"In the coming weeks, nuget.org will be migrating towards a new multi-CDN infrastructure that will improve the experience of our users. This change allows our team flexibility to switch to a back-up provider in the case that one CDN is down, which will broaden coverage for our users.\r\n\r\nSome changes are coming for older TLS cipher suites, which may result in connectivity issues. From our data we believe this will affect only a small percentage of requests. We will be monitoring all feedback channels during the migration to assess impact and adjust our roll-out timeline as needed.\r\n\r\nBelow, we provide resources to determine whether you will be affected by this change. This utilizes the [.NET CLI](https://dotnet.microsoft.com/) to install a package from our pre-production (INT) environment which tests connectivity:\r\n\r\n\r\n```\r\nmkdir cdn-test\r\ncd cdn-test\r\ndotnet new classlib\r\ndotnet add package BaseTestPackage.NetStandard --source https://apiint.nugettest.org/v3/index.json\r\n```\r\n\r\nIf you are experiencing connectivity issues while connecting to nuget.org or restoring packages from https://api.nuget.org/v3/index.json, such as:\r\n\r\n\"The SSL connection could not be established\"\r\n\r\nPlease ensure that TLS 1.2 and any of the following cipher suites have been enabled on your machine:\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\r\n\r\nIf you have any questions, do reach out to us at support@nuget.org or by commenting on the discussion issue: NuGet/Home#11058"},{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1625612488216649729","CreatedAt":"2023-02-14T21:46:34+00:00","UserScreenname":"nuget","Text":"📦 Search by Target Framework on https://t.co/F9kiKfvqkS 📦\n\n🔭 Improved package compatibility discovery\n📊 New sorts a… https://t.co/Xojm66sLar","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":33,"FavoriteCount":22,"RawContent":null},{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":47,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-02-25T03:30:26.4412722Z","RunDurationInMilliseconds":1268}