{"Data":{"Blog":{"FeedItems":[{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"36625120758","Type":"IssuesEvent","CreatedAt":"2024-03-17T20:49:55","Actor":"sabinaqurbanova","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9861","RelatedDescription":"Opened issue \"Cant download packages from NuGet on Visual Studio 2022 v17.8.5\" (#9861) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nHi. I cant download packages from NuGet, im getting an errors like below in screenshot:\r\n![1111111111](https://github.com/NuGet/NuGetGallery/assets/125729415/18fdef07-5758-454f-befe-1f6e485804f1)\r\n\r\nThis is result of \"dotnet nuget verify\" command:\r\n```\r\nC:\\Users\\sabina\\Desktop>dotnet nuget verify \"system.data.sqlclient.4.8.6.nupkg\" -v d\r\nX.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\nX.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\n\r\nVerifying System.Data.SqlClient.4.8.6\r\nC:\\Users\\sabina\\Desktop\\system.data.sqlclient.4.8.6.nupkg\r\nSignature Hash Algorithm: SHA256\r\n\r\nSignature type: Author\r\nVerifying the author primary signature with certificate:\r\n  Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\r\n  SHA1 hash: F25C45D17C53D4E0D1DC9FB9DFD0731FCF904B77\r\n  SHA256 hash: 566A31882BE208BE4422F7CFD66ED09F5D4524A5994F50CCC8B05EC0528C1353\r\n  Issued by: CN=DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1, O=\"DigiCert, Inc.\", C=US\r\n  Valid from: 27.07.2023 04:00:00 to 18.10.2026 03:59:59\r\ntrace:       Subject Name: CN=DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1, O=\"DigiCert, Inc.\", C=US\r\ntrace:       SHA1 hash: 7B0F360B775F76C94A12CA48445AA2D2A875701C\r\ntrace:       SHA256 hash: 46011EDE1C147EB2BC731A539B7C047B7EE93E48B9D3C3BA710CE132BBDFAC6B\r\ntrace:       Issued by: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:       Valid from: 29.04.2021 04:00:00 to 29.04.2036 03:59:59\r\ntrace:             Subject Name: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             SHA1 hash: DDFB16CD4931C973A2037D3FC83A4D7D775D05E4\r\ntrace:             SHA256 hash: 552F7BDCF1A7AF9E6CE672017F4F12ABF77240C78E761AC203D1D9D20AC89988\r\ntrace:             Issued by: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             Valid from: 01.08.2013 17:00:00 to 15.01.2038 16:00:00\r\nTimestamp: 27.10.2023 04:01:10\r\nVerifying author primary signature's timestamp with timestamping service certificate:\r\n  Subject Name: CN=DigiCert Timestamp 2023, O=\"DigiCert, Inc.\", C=US\r\n  SHA1 hash: 66F02B32C2C2C90F825DCEAA8AC9C64F199CCF40\r\n  SHA256 hash: D2F6E46DED7422CCD1D440576841366F828ADA559AAE3316AF4D1A9AD40C7828\r\n  Issued by: CN=DigiCert Trusted G4 RSA4096 SHA256 TimeStamping CA, O=\"DigiCert, Inc.\", C=US\r\n  Valid from: 14.07.2023 04:00:00 to 14.10.2034 03:59:59\r\ntrace:       Subject Name: CN=DigiCert Trusted G4 RSA4096 SHA256 TimeStamping CA, O=\"DigiCert, Inc.\", C=US\r\ntrace:       SHA1 hash: B6C8AF834D4E53B673C76872AA8C950C7C54DF5F\r\ntrace:       SHA256 hash: 281734D4592D1291D27190709CB510B07E22C405D5E0D6119B70E73589F98ACF\r\ntrace:       Issued by: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:       Valid from: 23.03.2022 04:00:00 to 23.03.2037 03:59:59\r\ntrace:             Subject Name: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             SHA1 hash: A99D5B79E9F1CDA59CDAB6373169D5353F5874C6\r\ntrace:             SHA256 hash: 33846B545A49C9BE4903C60E01713C1BD4E4EF31EA65CD95D69E62794F30B941\r\ntrace:             Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             Valid from: 01.08.2022 04:00:00 to 10.11.2031 03:59:59\r\ntrace:                   Subject Name: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:                   SHA1 hash: 0563B8630D62D75ABBC8AB1E4BDFB5A899B24D43\r\ntrace:                   SHA256 hash: 3E9099B5015E8F486C00BCEA9D111EE721FABA355A89BCF1DF69561E3DC6325C\r\ntrace:                   Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:                   Valid from: 10.11.2006 04:00:00 to 10.11.2031 04:00:00\r\n\r\nSignature type: Repository\r\nService index: https://api.nuget.org/v3/index.json\r\nOwners: dotnetframework, Microsoft\r\nVerifying the repository countersignature with certificate:\r\n  Subject Name: CN=NuGet.org Repository by Microsoft, O=NuGet.org Repository by Microsoft, L=Redmond, S=Washington, C=US\r\n  SHA1 hash: 68FC37CCC293766A607DBC26A26DF371B0249328\r\n  SHA256 hash: 5A2901D6ADA3D18260B9C6DFE2133C95D74B9EEF6AE0E5DC334C8454D1477DF4\r\n  Issued by: CN=DigiCert SHA2 Assured ID Code Signing CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\n  Valid from: 16.02.2021 04:00:00 to 16.05.2024 03:59:59\r\ntrace:       Subject Name: CN=DigiCert SHA2 Assured ID Code Signing CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:       SHA1 hash: 92C1588E85AF2201CE7915E8538B492F605B80C6\r\ntrace:       SHA256 hash: 51044706BD237B91B89B781337E6D62656C69F0FCFFBE8E43741367948127862\r\ntrace:       Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:       Valid from: 22.10.2013 17:00:00 to 22.10.2028 16:00:00\r\ntrace:             Subject Name: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             SHA1 hash: 0563B8630D62D75ABBC8AB1E4BDFB5A899B24D43\r\ntrace:             SHA256 hash: 3E9099B5015E8F486C00BCEA9D111EE721FABA355A89BCF1DF69561E3DC6325C\r\ntrace:             Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             Valid from: 10.11.2006 04:00:00 to 10.11.2031 04:00:00\r\nTimestamp: 09.01.2024 18:41:28\r\nVerifying repository countersignature's timestamp with timestamping service certificate:\r\n  Subject Name: CN=DigiCert Timestamp 2023, O=\"DigiCert, Inc.\", C=US\r\n  SHA1 hash: 66F02B32C2C2C90F825DCEAA8AC9C64F199CCF40\r\n  SHA256 hash: D2F6E46DED7422CCD1D440576841366F828ADA559AAE3316AF4D1A9AD40C7828\r\n  Issued by: CN=DigiCert Trusted G4 RSA4096 SHA256 TimeStamping CA, O=\"DigiCert, Inc.\", C=US\r\n  Valid from: 14.07.2023 04:00:00 to 14.10.2034 03:59:59\r\ntrace:       Subject Name: CN=DigiCert Trusted G4 RSA4096 SHA256 TimeStamping CA, O=\"DigiCert, Inc.\", C=US\r\ntrace:       SHA1 hash: B6C8AF834D4E53B673C76872AA8C950C7C54DF5F\r\ntrace:       SHA256 hash: 281734D4592D1291D27190709CB510B07E22C405D5E0D6119B70E73589F98ACF\r\ntrace:       Issued by: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:       Valid from: 23.03.2022 04:00:00 to 23.03.2037 03:59:59\r\ntrace:             Subject Name: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             SHA1 hash: A99D5B79E9F1CDA59CDAB6373169D5353F5874C6\r\ntrace:             SHA256 hash: 33846B545A49C9BE4903C60E01713C1BD4E4EF31EA65CD95D69E62794F30B941\r\ntrace:             Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:             Valid from: 01.08.2022 04:00:00 to 10.11.2031 03:59:59\r\ntrace:                   Subject Name: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:                   SHA1 hash: 0563B8630D62D75ABBC8AB1E4BDFB5A899B24D43\r\ntrace:                   SHA256 hash: 3E9099B5015E8F486C00BCEA9D111EE721FABA355A89BCF1DF69561E3DC6325C\r\ntrace:                   Issued by: CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US\r\ntrace:                   Valid from: 10.11.2006 04:00:00 to 10.11.2031 04:00:00\r\n\r\nSuccessfully verified package 'System.Data.SqlClient.4.8.6'.\r\n```\n\n### Repro Steps\n\n...\n\n### Expected Behavior\n\n...\n\n### Screenshots\n\n...\n\n### Additional Context and logs\n\n..."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"36628078165","Type":"IssuesEvent","CreatedAt":"2024-03-18T01:45:48","Actor":"konjac","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13330","RelatedDescription":"Opened issue \"Target nuget.exe to .Net Core\" (#13330) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nThe current nuget.exe is targeting .Net framework. Users on Linux are using Mono as a workaround. \r\n\r\nBut Mono is on the deprecation path. It could be more friendly if nuget.exe could be executed on Linux through .Net Core.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"36612443803","Type":"IssuesEvent","CreatedAt":"2024-03-16T19:41:38","Actor":"IoIxD","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13329","RelatedDescription":"Opened issue \"dotnet new console hangs\" (#13329) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.102\n\n### Worked before?\n\nFirst time using .NET\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Get Fedora Linux 39, Kernel version 6.7.7\r\n2. Install `dotnet` via `dnf`. Install `nuget` through there too.\r\n3. Run `dotnet new console` or `dotnet restore`\r\n4. It hangs while \"determining projects to restore\".\r\n\r\nI have confirmed I can reach the nuget api via `curl https://api.nuget.org/v3/index.json`. Also, my $HOME variable does not have a slash after it. I'm also not using a Docker container.\r\n\r\nThis is a duplicate of #12467 but that one ended in the author saying it \"fixed itself\". This, of course, does not apply to me. \r\nSomebody in that thread said they \"couldn't easily test arch linux\", do know that [Fedora is avaliable under WSL just like Arch](https://apps.microsoft.com/detail/9npcp8drchsn?hl=en-US&gl=US)\n\n### Verbose Logs\n\n```shell\n➜  onedrive98 dotnet new console           \r\n\r\nWelcome to .NET 8.0!\r\n---------------------\r\nSDK Version: 8.0.102\r\n\r\n----------------\r\nWrite your first app: https://aka.ms/dotnet-hello-world\r\nFind out what's new: https://aka.ms/dotnet-whats-new\r\nExplore documentation: https://aka.ms/dotnet-docs\r\nReport issues and find source on GitHub: https://github.com/dotnet/core\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli\r\n--------------------------------------------------------------------------------------\r\nThe template \"Console App\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRestoring /home/gavin/Projects/onedrive98/onedrive98.csproj:\r\n  Determining projects to restore...\n```\n"},{"Id":"36608367778","Type":"IssuesEvent","CreatedAt":"2024-03-16T12:17:51","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13328","RelatedDescription":"Opened issue \"Update repo .vsconfig\" (#13328) at NuGet/Home","RelatedBody":"The repo `.vsconfig` can be imported in the Visual Studio Installer to ensure that all the VS components needed to build the repo, and run tests, are installed.  Note, Apex/E2E tests additionally need UWP components, which are not included, the `.vsconfig` is just enough to run CLI tests."},{"Id":"36599923988","Type":"IssuesEvent","CreatedAt":"2024-03-15T21:12:51","Actor":"linhvuquach","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13327","RelatedDescription":"Opened issue \"Long Execution Time for dotnet restore in OpenShift Build Pipeline\" (#13327) at NuGet/Home","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nDuring our build pipeline execution on OpenShift, we've encountered a significant delay specifically with the dotnet restore command in the Dockerfile. This delay is causing notable slowdowns in our overall build process.\r\n\r\nMy Dockerfile\r\n```\r\n#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.\r\n\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\r\nWORKDIR /app\r\nEXPOSE 8080\r\nEXPOSE 8081\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\r\nARG BUILD_CONFIGURATION=Release\r\nARG HTTP_PROXY=\"<my-url-local-proxy>\"\r\nENV DOTNET_NUGET_SIGNATURE_VERIFICATION=false\r\nWORKDIR /src\r\nCOPY [\"My.API/My.API.csproj\", \"My.API/\"]\r\nCOPY [\"My.Application/My.Application.csproj\", \"My.Application/\"]\r\nCOPY [\"My.Infrastructure/My.Infrastructure.csproj\", \"My.Infrastructure/\"]\r\nCOPY \"My.API/nuget.config\" .\r\n\r\nRUN dotnet restore -v diag \"./My.API/./My.API.csproj\"\r\nCOPY . .\r\nWORKDIR \"/src/My.API\"\r\nRUN dotnet build \"./My.API.csproj\" -c $BUILD_CONFIGURATION -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish \"./My.API.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\n\r\nENTRYPOINT [\"dotnet\", \"My.API.dll\"]\r\n```\r\n\r\nMy nugget.config\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\n##### Version\r\nI'm using openshift version 4.\r\n\r\n##### Current Result\r\n- Local result: I can work fine with my Dockerfile in my local.\r\n- OpenShift result: The dotnet restore operation consistently takes 1-hour duration and seems to time out during the MSBuild within our OpenShift build pipeline.\n\n### Repro Steps\n\nI can build a simple Dockerfile .NET API application. Then you can set up a simple trigger CI to Openshift to build the pipeline.\r\n\r\nAt the step build the pipeline you will face this issue (dotnet restore).\n\n### Expected Behavior\n\nThe Openshift pipeline can build successfully the Dotnet Docker image.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n##### Additional Information\r\n- I saw a make sense information about NuGet signed-package verification https://github.com/NuGet/Home/issues/13062 and additional `ENV DOTNET_NUGET_SIGNATURE_VERIFICATION=false` in Dockerfile. But it didn't resolve yet.\r\n  - You also need it for more information: https://learn.microsoft.com/en-us/dotnet/core/tools/nuget-signed-package-verification\r\n- In my Dockerfile I also add a Proxy variable and use nuget.config file. You can look at it above.\r\n- I tried to create another Node simple application image. But it also stuck on the `npm install` step. I think the same concept with the `dotnet restore` command.\r\n- I'm always looking at my resource quota. I don't see CPU, memory,... reach limit: \r\n![image](https://github.com/openshift/origin/assets/26388126/a4749036-28ce-444c-b5b9-ea6104fec799)\r\n- I also tried to change  `aspnet:8.0` to `aspnet:7.0`. It still didn't success\r\n\r\nAny insights or guidance will be expected. Thank you for your attention to this matter."},{"Id":"36599024004","Type":"IssuesEvent","CreatedAt":"2024-03-15T20:27:14","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13307","RelatedDescription":"Closed issue \"dotnet list package: fails when using <PROJECT | SOLUTION> argument\" (#13307) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\ndotnet 8.0.200 (NuGet 6.9.1.3)\r\n\r\n### Worked before?\r\n\r\nDon't know\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nWith the `dotnet list` command; `<PROJECT | SOLUTION>` (project or solution file path) is an optional argument meant to be supported:\r\n\r\n```bash\r\n> dotnet list -h\r\n\r\nDescription:\r\n  List references or packages of a .NET project.\r\n\r\nUsage:\r\n  dotnet list [<PROJECT | SOLUTION>] [command] [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>  The project or solution file to operate on. If a file is not specified, the command will search the current directory for one. [default: /home/me/repos/myrepo/src]\r\n\r\nOptions:\r\n  -?, -h, --help  Show command line help.\r\n\r\n\r\nCommands:\r\n  package    List all package references of the project or solution.\r\n  reference  List all project-to-project references of the project.\r\n```\r\n\r\nUnfortunately it does not work in latest .NET SDK (8.0.200).\r\n\r\n## Scenarios ##\r\n1. The `<PROJECT | SOLUTION>` argument is a **DIRECTORY** path\r\n2. The `<PROJECT | SOLUTION>` argument is **NOT** provided\r\n3. The `<PROJECT | SOLUTION>` argument is a **SOLUTION** file path\r\n4. The `<PROJECT | SOLUTION>` argument is a **PROJECT** file path\r\n\r\n## Expected behavior ##\r\nFor the 4 described scenarios, the following strategy is applied by most of the .NET SDK commands when determining which .NET project files to process:\r\n\r\n1. Scenario 1\r\n    * If **multiple** `SOLUTION` files are found in directory, message _\"Specify which project or solution file to use...\"_ + `error exit code`\r\n    * Else if a **single** `SOLUTION` file is found in directory, use that solution file/all projects referenced in solution file.\r\n    * Else if **multiple** `PROJECT` files are found in directory, message _\"Specify which project or solution file to use...\"_ + `error exit code`\r\n    * Else if a **single** `PROJECT` file is found in directory, use that file.\r\n2. Scenario 2: Same as 1. using `cwd` as directory\r\n3. Scenario 3: Use the solution file/all projects referenced in solution file.\r\n4. Scenario 4: Use the project file.\r\n\r\n## Actual behavior ##\r\n_NB! The actual behavior was tested on both Windows and Linux_\r\n\r\n1. Scenario 1: **Actual behavior does NOT meet expected behavior when using relative paths**:\r\n    ```bash\r\n    > dotnet list src/ package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MySolution.sln/src/nuget.config'.\r\n    error:   Could not find a part of the path '/home/me/repos/myrepo/src/MySolution.sln/src'.\r\n    \r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n    \r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config file and folder path_\r\n\r\n2. Scenario 2: **Actual behavior consistent with expected.**\r\n\r\n3. Scenario 3: **Actual behavior does NOT meet expected behavior when using relative path**:\r\n    ```bash\r\n    > dotnet list MySolution.sln package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MySolution.sln/nuget.config'.\r\n    error:   The file '/home/me/repos/myrepo/src/MySolution.sln' already exists.\r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n    \r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config path - and also the strange error that the file already exists_\r\n\r\n4. Scenario 4: **Actual behavior consistent if the specified project file is in `cwd`, otherwise path needs to be absolute.** \r\n    Example when specifying a project file in a different folder than `cwd`:\r\n    ```bash\r\n    > dotnet list MyProject/MyProject.csproj package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MyProject/MyProject.csproj/nuget.config'.\r\n    error:   The file '/home/me/repos/myrepo/src/MyProject/MyProject.csproj' already exists.\r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n    \r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config path - and also the strange error that the file already exists_\r\n\r\n## Expected NuGet.Config search strategy ##\r\nThe reason for the problems described above seem to be that the tool does not correctly determine where to find a NuGet.Config file. I therefore also list what I believe should be the expected NuGet config file search strategy for the 4 described scenarios:\r\n\r\n1. Scenario 1: Search the directory and recursively search parent directories until NuGet config file is found.\r\n2. Scenario 2: Search `cwd` and recursively search parent directories until NuGet config file is found.\r\n3. Scenario 3: Search the directory containing the solution file and recursively search parent directories until NuGet config file is found.\r\n4. Scenario 4: Search the directory containing the project file and recursively search parent directories until NuGet config file is found.\r\n \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"36597298859","Type":"IssuesEvent","CreatedAt":"2024-03-15T19:11:46","Actor":"bengtr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13326","RelatedDescription":"Opened issue \"Inconsistent restore results based on restore order\" (#13326) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, NuGet.exe, NuGet SDK\n\n### Product Version\n\nnuget 6.9.1.3, net6\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n# Context\r\nWe use nuget packages for our native libraries but I think this may apply to any kind of package.\r\n\r\nOur packages are built as follows:\r\n\r\nA package containing binary files, one file `CopyBinaries.targets` to copy these files to output using `ReferenceCopyLocalPaths` and files in `build` and `buildTransitive` importing `CopyBinaries.targets` each.\r\n```\r\n.\r\n└── MyPackage-binaries/\r\n    ├── build/\r\n    │   └── MyPackage-binaries.targets\r\n    ├── buildCommon/\r\n    │   └── CopyBinaries.targets\r\n    ├── buildTransitive/\r\n    │   └── MyPackage-binaries.targets\r\n    ├── nativecontent/\r\n    │   └── bin/\r\n    │       └── MyPackage.dll\r\n    └── MyPackage-binaries.nuspec\r\n```\r\n\r\nA package containing lib/header files, and a targets file setting `AdditionalLibraryDirectories`, `AdditionalIncludeDirectories` etc.\r\nThis package has the package above as a dependency.\r\n```\r\nLib/header package:\r\n.\r\n└── MyPackage/\r\n    ├── build/\r\n    │   └── native/\r\n    │       └── MyPackage.targets\r\n    ├── nativecontent/\r\n    │   ├── lib/\r\n    │   │   └── MyPackage.lib\r\n    │   └── include/\r\n    │       └── MyPackage.h\r\n    └── MyPackage.nuspec\r\n```\r\n\r\nWe have project `A` which is a Net6 C++/CLI project using `PackageReference` to consume `MyPackage` directly and `MyPackage-binaries` through the transitive dependency. This works fine if `A` is not referenced anywhere itself.\r\n\r\nHowever, when we add a managed Net6 project `B` to the solution referencing `A` the result is different and dependent on the order the projects are restored. If `A` is restored first targets files from both packages are imported correctly. But if `B` is restored first project `A` only consumes the transitive package and not the directly referenced one. As the restore order can change the outcome is unpredictable and `A` may not compile when it otherwise does.\r\n\r\n# Expected Behavior\r\nThe generated `A.vcxproj.nuget.g.targets` imports `MyPackage\\build\\native\\MyPackage.targets` and `MyPackage-binaries\\buildTransitive\\MyPackage-binaries.targets` regardless of restore order.\r\n\r\n# Actual Behavior\r\nIf the transitive project `B` is restored first the project `A` will only consume the transitive package.\r\n\r\n# Workaround\r\nAdd a `MyPackage\\buildTransitive\\MyPackage.targets` file mimicking the `MyPackage\\build\\native\\MyPackage.targets` file. This would import vcxproj related tags into unrelated transitive projects however.\r\n\r\n# Reproduction Steps\r\nUsing the archive below run a clean on the project `NativeCore` to make sure the `nuget.g.targets` file will be regenerated and then call either `nuget.exe restore` from CLI or rebuild that project from within VS/MsBuild. Most of the times `NativeCore` is restored first but when not the build fails as the header can't be found.\r\n\r\n[NugetIssueReportData.zip](https://github.com/NuGet/Home/files/14619517/NugetIssueReportData.zip)\r\nThe file contains three nuget packages:\r\n- NativeTestPackage: Include a header `test_include.h` into a vcxproj and transitively consume binaries through the next package\r\n- NativeTestPackage-binaries: Copy a dummy file `thiswouldbeadll.txt` to the output\r\n- NativeTestPackageWithTransitive: Same as `NativeTestPackage` but with a `buildTransitive` folder showing the workaround.\r\n\r\nIt also contains a VS solution with the following projects:\r\n\r\n- `NativeCore`: C++/CLI project targeting net6 and referencing `MyNativePackage`\r\n- `NetCoreTransitive` referencing the former\r\n\r\n# Analysis\r\n\r\nI just compiled and debugged into a custom build of nuget.exe briefly but it appears when assets are resolved through a transitive project first the `LibraryIncludeFlags` do not contain `LibraryIncludeFlags.Build`. As assets are only resolved once before restoring all projects a following projects would find the asset to have been listed with no native targets files to import.\n\n### Verbose Logs\n\n_No response_"},{"Id":"36583599576","Type":"IssuesEvent","CreatedAt":"2024-03-15T11:39:26","Actor":"springy76","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13325","RelatedDescription":"Opened issue \"Static graph-based restore failed with exit code '1' but did not log an error.\" (#13325) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 7 & 8\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI have no clue as the error just happens randomly, started weeks ago only inside builds of docker containers using .NET SDK docker containers (ran by local gitlab runners). A retry/restart of the gitlab job (within pipeline) always succeeds on next try.\r\n(What have been the reasons for docker, solving the \"runs on my machine\" problem?)\r\n\r\nBut meanwhile it started to happen outside of docker related jobs, too.\n\n### Verbose Logs\n\n```shell\n> dotnet restore \"MyApp.csproj\"\r\n\r\n/usr/share/dotnet/sdk/8.0.202/NuGet.RestoreEx.targets(19,5): error : Static graph-based restore failed with exit code '1' but did not log an error. Please file an issue at https://github.com/NuGet/Home.\n```\n"},{"Id":"36579162627","Type":"IssuesEvent","CreatedAt":"2024-03-15T09:12:30","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13324","RelatedDescription":"Closed issue \"Small Typo\" (#13324) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nOther/NA\r\n\r\n### Product Version\r\n\r\nwiki\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nNone\r\n\r\n### Repro Steps & Context\r\n\r\nhttps://github.com/NuGet/Home/wiki/Allow-package--authors-to-define-build-assets-transitive-behavior#problem\r\n\r\n=> And it will hard for Project A to understand the root cause.\r\n\r\nshould be\r\n\r\n=> And it will **be** hard for Project A to understand the root cause.\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"36578022607","Type":"IssuesEvent","CreatedAt":"2024-03-15T08:32:06","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13227","RelatedDescription":"Closed issue \"Visual Studio package manager does not respect \"no_proxy\" configuration\" (#13227) at NuGet/Home","RelatedBody":"The Windows proxy credentials dialog always pops up when I try to browse a package source in Visual Studio for which I set `no_proxy` in `C:\\Users\\me\\AppData\\Roaming\\NuGet\\NuGet.Config`:\r\n\r\n```\r\n<configuration>\r\n  <config>\r\n    <add key=\"no_proxy\" value=\"https://artifactory.mycompany.net\" />\r\n```\r\n\r\n![image](https://github.com/NuGet/Home/assets/20680759/16e9796a-dcd3-45bd-be16-1ce3c37373a6)\r\n\r\nThe package source\r\n\r\n- is hosted by Artifactory\r\n- requires authentication\r\n- `packageSourceCredentials` is set in NuGet.Config using an Identity Token for Artifactory as password.\r\n\r\nWindows proxy settings:\r\n\r\n- Automatically detect settings OFF\r\n- Use setup script ON\r\n- The script sets DIRECT for *.mycompany.net\r\n\r\nMicrosoft Visual Studio\r\n\r\n- Professional 2022 (64-bit)\r\n- Version 17.8.6\r\n\r\nAdditional info\r\n\r\n- May be related to https://github.com/dotnet/sdk/issues/22942"},{"Id":"36578021905","Type":"IssuesEvent","CreatedAt":"2024-03-15T08:32:05","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13228","RelatedDescription":"Closed issue \"Getting HTTP response status 403 when browsing Artifactory package source in Visual Studio Package manager\" (#13228) at NuGet/Home","RelatedBody":"### To reproduce\r\n\r\nBrowse packages in Visual Studio Package manager by selecting an Artifactory nuget package source that requires authentication.\r\n`packageSourceCredentials` is set in `NuGet.config` with the personal Identity Token generated by Artifactory as password.\r\n\r\n### Details\r\n\r\nVisual Studio Package manager does not respond to challenge `WWW-Authenticate: Basic` according to Fiddler. Only one round trip occurs with Artifactory package source in that the request is responded with `403` HTTP status and `WWW-Authenticate: Basic` header set.\r\nNo subsequent requests are made by Visual Studio.\r\n\r\n### Further technical details\r\n\r\n- Microsoft Visual Studio Professional 2022 (64-bit) Version 17.8.6\r\n- NuGet Package Manager 6.8.0\r\n- Artifactory EnterpriseX license 7.71.8 rev 77108900\r\n- It may be related to https://github.com/NuGet/Home/issues/13227"},{"Id":"36577991934","Type":"IssuesEvent","CreatedAt":"2024-03-15T08:30:57","Actor":"tomap","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13324","RelatedDescription":"Opened issue \"Small Typo\" (#13324) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nwiki\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nhttps://github.com/NuGet/Home/wiki/Allow-package--authors-to-define-build-assets-transitive-behavior#problem\r\n\r\n=> And it will hard for Project A to understand the root cause.\r\n\r\nshould be\r\n\r\n=> And it will be hard for Project A to understand the root cause.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-03-18T03:30:18.5109853Z","RunDurationInMilliseconds":1012}