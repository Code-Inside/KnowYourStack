{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40367953203","Type":"PullRequestEvent","CreatedAt":"2024-07-22T22:39:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10076","RelatedDescription":"Closed pull request \"Clean up build infra to make a repository merge easier\" (#10076) at NuGet/NuGetGallery","RelatedBody":"Similar to https://github.com/NuGet/NuGet.Jobs/pull/1217 and https://github.com/NuGet/ServerCommon/pull/434.\r\n\r\nI would like to try a repository merge (monorepo-ish). That is, merging NuGet Server OSS repositories into fewer (perhaps just one). To make this easier, I want to clean up and align our build infra, which is a case where the same file names exist in several repos, making a repo merge have merge conflicts.\r\n\r\nSummary of changes\r\n- Move to Central Package Management\r\n- Update .gitignore to latest\r\n- Update `.nuget/packages.config` (solution level packages), move to root for better visibility\r\n- Rename `SimpleVersion` and `SemanticVersion` to `GalleryAssemblyVersion` and `GalleryPackageVersion`\r\n- Fix some PowerShell functions to use allowed verbs\r\n- Delete build.cmd, buildandtest.ps1, and several other unused scripts since these are not used by our CI or releases at all.\r\n- More some stuff from `SdkProjects.props` to `Directory.Build.props` so more happens on all projects\r\n- Clean up NuGet.config to match other repos\r\n- Fix broken UTs in `GitHubVulnerabilities2v3.Facts`\r\n- Fix teammate name in Team.json\r\n- Move to latest xunit and fix associated warnings/errors (caught several test failures missed before)\r\n- Align dependency versions with latest across ServerCommon and NuGet.Jobs"},{"Id":"40365521693","Type":"IssuesEvent","CreatedAt":"2024-07-22T20:42:21","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9814","RelatedDescription":"Closed issue \"[Bug Bash] Improve tooltip information on TFM badges\" (#9814) at NuGet/NuGetGallery","RelatedBody":"## Problem\r\n\r\nThe two colors on the TFM badges can be confusing, and we don't explain it anywhere on the search page. We need to make the asset/computed difference clearer.\r\n\r\n## Solution\r\n\r\nThe badges currently say:\r\n`This package is compatible with this framework or higher.`\r\n\r\nDepending on whether it's an asset or computed framework, we should change it to:\r\n* Asset framework:\r\n  `This package targets <framework>. The package is compatible with this framework or higher.`\r\n* Computed framework\r\n  `This package is compatible with <framework> or higher.`\r\n\r\nThis would also fix this accessibility bug: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1970927/?view=edit\r\n"},{"Id":"40362537023","Type":"PullRequestEvent","CreatedAt":"2024-07-22T18:44:22","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10077","RelatedDescription":"Merged pull request \"Update to latest Xunit and Moq, fix test bugs, stop suppressing analyzers\" (#10077) at NuGet/NuGetGallery","RelatedBody":"Currently we have a bunch of test bugs that are hidden by these problems:\r\n\r\n- We are on old Xunit. Newer Xunit has improved source analyzers to show problems\r\n   - Example problem: methods missing `[Fact]` or `[Theory]` meaning test cases weren't running at all\r\n   - Example problem: unawaited `Task` or `async void` resulting assert does not get observed\r\n   - Example problem: unused parameter in `[Theory]` meaning only one variant of the test was really running\r\n- `test.ps1` had broken file paths in several cases... meaning the UT projects weren't event running\r\n\r\nSummary of changes:\r\n- Move to xunit 2.9.0, xunit.runner.visualstudio 2.8.2 (latest) and clean up dependencies on Xunit\r\n- Clean up minor build warnings\r\n- Delete `.editorconfig`. All it does is suppress everything meaning these warnings/errors were hidden!\r\n- Fix tests broken and unobserved due to `test.ps1` path issue\r\n- Improve `test.ps1` to catch when tests don't produce result XML\r\n- Use `Assert.Single`, `Assert.Empty`, `Assert.Contains`, etc per the Xunit analyzer\r\n- Suppress `xUnit1015` in two cases where we have a child class provide test data to a parent class `[MemberData]` (weird, but works)\r\n- Suppress `xUnit1032` in `AccountsControllerFacts` since we provide child classes for this generic class meaning the tests do actually run\r\n- Improved the read only mode checks in `EntitiesContext`. It was possible to work around the check via `SaveChanges` variants\r\n- Skip `MvcBuildViews=true` when building debug. This makes `build.ps1` faster locally, does not affect CI/release. \r\n- Move to Moq 4.20.70, set up HTTP response code due to changes in Moq\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/5427."},{"Id":"40360544949","Type":"IssuesEvent","CreatedAt":"2024-07-22T17:31:16","Actor":"lostmsu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10078","RelatedDescription":"Opened issue \"[Feature]: Show aggregate information about package dependencies\" (#10078) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nThe well-known problem of NPM package bloat.\n\n### The Elevator Pitch\n\nWhen I am looking for packages, information like download size of the package itself is insufficient to make an informed decision.\r\n\r\nIt would be nice to have the following information on the main package page:\r\n- total size of all dependencies\r\n- number of transitive dependencies\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40357145895","Type":"PullRequestEvent","CreatedAt":"2024-07-22T15:37:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10077","RelatedDescription":"Opened pull request \"Update to latest Xunit, fix test bugs, stop suppressing analyzers\" (#10077) at NuGet/NuGetGallery","RelatedBody":"Currently we have a bunch of test bugs that are hidden by these problems:\r\n\r\n- We are on old Xunit. Newer Xunit has improved source analyzers to show problems\r\n   - Example problem: methods missing `[Fact]` or `[Theory]` meaning test cases weren't running at all\r\n   - Example problem: unawaited `Task` or `async void` resulting assert does not get observed\r\n   - Example problem: unused parameter in `[Theory]` meaning only one variant of the test was really running\r\n- `test.ps1` had broken file paths in several cases... meaning the UT projects weren't event running\r\n\r\nI did not move to the latest `Moq` since it causes our controller mocks to not work. I didn't want to chase down that problem right now.\r\n\r\nSummary of changes:\r\n- Move to xunit 2.9.0, xunit.runner.visualstudio 2.8.2 (latest) and clean up dependencies on Xunit\r\n- Clean up minor build warnings\r\n- Fix tests broken and unobserved due to `test.ps1` path issue\r\n- Improve `test.ps1` to catch when tests don't produce result XML\r\n- Use `Assert.Single`, `Assert.Empty`, `Assert.Contains`, etc per the Xunit analyzer\r\n- Suppress `xUnit1015` in two cases where we have a child class provide test data to a parent class `[MemberData]` (weird, but works)\r\n- Suppress `xUnit1032` in `AccountsControllerFacts` since we provide child classes for this generic class meaning the tests do actually run\r\n- Improved the read only mode checks in `EntitiesContext`. It was possible to work around the check via `SaveChanges` variants"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40366644873","Type":"IssuesEvent","CreatedAt":"2024-07-22T21:30:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12443","RelatedDescription":"Closed issue \"Central Package Management causes build failure without PackageReference\" (#12443) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet SDK\n\n### Product Version\n\n7.0.200-preview.22628.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen using Central Package Management I may have a number of projects within a given solution. Some of those projects may contain Package References which are required because they are core projects without Framework references. When using .NET MAUI the SDK provides Implicitly Defined Package References. This fails when a PackageVersion exists within the Directory.Packages.props even though the Maui project does not include a PackageReference to the package.\r\n\r\nhttps://github.com/dotnet/maui/blob/5b6663d61c922f6c971542e8f8751303a53ed364/src/Workload/Microsoft.Maui.Sdk/Sdk/BundledVersions.in.targets#L63-L81\r\n\r\n```xml\r\n<!-- Directory.Packages.Props -->\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"SomeVersion\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n<!-- Some Services Project -->\r\n<Project Sdk=\"Microsoft.Net.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n<!-- Project Targeting Maui-->\r\n<Project Sdk=\"Microsoft.Net.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net7.0-ios;net7.0-android;net7.0-etc</TargetFrameworks>\r\n    <UseMaui>true</UseMaui>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nIn the scenario shown here... the Services Project would work just fine as expected, however the Maui project wouldn't due to the Implicitly Defined References.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40366538166","Type":"IssuesEvent","CreatedAt":"2024-07-22T21:25:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13477","RelatedDescription":"Closed issue \"Update CPM opt-in documentation\" (#13477) at NuGet/Home","RelatedBody":"https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management#enabling-central-package-management needs to say that ManagePackageVersionsCentrally is not needed with 6.10 and all the equivalent versions if DBP exists.\r\n\r\nWork was done in https://github.com/NuGet/Home/issues/11834. \r\n\r\ncc @jeffkl "},{"Id":"40366514967","Type":"IssuesEvent","CreatedAt":"2024-07-22T21:24:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11491","RelatedDescription":"Closed issue \"DependencyGraphRestoreUtility.RestoreAsync should take an args object to minimize public API changes.\" (#11491) at NuGet/Home","RelatedBody":"See https://github.com/NuGet/NuGet.Client/pull/4359/files#r779572952\r\n\r\ncc @zivkan "},{"Id":"40365789956","Type":"IssuesEvent","CreatedAt":"2024-07-22T20:53:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13642","RelatedDescription":"Closed issue \"dotnet add package stops checking sources on the first failure http code\" (#13642) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\nNuGet Command Line 6.10.0.97; .NET SDK:  Version:           8.0.300  Commit:            326f6e68b2  Workload version:  8.0.300-manifests.5273bb1c  MSBuild version:   17.10.4+10fbfbf2e\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\ndotnet/sdk#42245\r\nIn short, have a source that 503's and it'll prevent you from using `dotnet add package <name>` without `--source` or disabling the failing source.\r\n\r\n### Verbose Logs\r\n\r\nCan't get them because the dotnet-tools source (`https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json`) doesn't respond with 503 anymore and `--verbosity diag` seems to be undocumented (I looked yesterday specifically for any verbosity option in the `dotnet` docs and didn't see anything)."},{"Id":"40365575466","Type":"IssuesEvent","CreatedAt":"2024-07-22T20:44:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13639","RelatedDescription":"Closed issue \"Make 'why' command available in NuGet.Commands\" (#13639) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet SDK\n\n### Current Behavior\n\n`dotnet nuget why` can only be used from the CLI, as the API is internal in `NuGet.CommandLine.XPlat`.\n\n### Desired Behavior\n\n`dotnet nuget why` command should be available as public in `NuGet.Commands`.\n\n### Additional Context\n\nWe want to use the results of the `dotnet nuget why` command in automated reports for our developers.\r\nWe therefore desire to use the NuGet SDK to get the \"why\" data programmatically and make several processes easier."},{"Id":"40365413508","Type":"IssuesEvent","CreatedAt":"2024-07-22T20:37:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13638","RelatedDescription":"Closed issue \"[Bug Bash] Punctuation located incorrectly in the bottom-text of the “License Acceptance” dialog \" (#13638) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.12.0.32\n\n### Worked before?\n\nIt is not a regression since it reproes on D16.11\\34601.136 and D17.10\\34904.84. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**    \r\n\r\n1. Create a C# Console App (.NET Framework) project in VS. \r\n2. Right-click the project in “Solution Explorer” window and select \"Manage NuGet Packages…\" menu item to open PM UI. \r\n3. Go to \"Browse\" tab and install a package (for example: Microsoft.EntityFrameworkCore). \r\n4. Click the “Apply\" button in the “Preview Changes” window. \r\n5. Observe the bottom-text in the “License Acceptance” dialog. \r\n\r\n**Expected:**      \r\nThe comma and full-stop should be located outside of the double-quote.\r\n\r\n**Actual:** \r\nThe comma and full-stop were located inside of the double-quote as below: \r\n![image](https://github.com/user-attachments/assets/ee9e9a95-1ed7-4fc7-ac6e-8979e1efdbda)\r\n\r\n\r\nNotes:     \r\n1.Repro rate: 100%. \r\n2.It only reproes on ENU, doesn’t repro on loc languages. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40364874007","Type":"IssuesEvent","CreatedAt":"2024-07-22T20:16:04","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13640","RelatedDescription":"Closed issue \"[Localization] Revert latest changes from 6.11.x branch \" (#13640) at NuGet/Home","RelatedBody":"Localization team made a huge change in the localization of that branch, since this could be a potential risk a future release, we need to revert them and ask them to stop updating the localization in this branch. "},{"Id":"40340644745","Type":"IssuesEvent","CreatedAt":"2024-07-22T07:23:13","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12950","RelatedDescription":"Closed issue \"Cannot install, uninstall, or update ANY packages if one NuGet source is unreachable\" (#12950) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nConsider this scenario:\r\n\r\nNuGet sources configured in Visual Studio:\r\n1. nuget.org (https://api.nuget.org/v3/index.json)\r\n2. GitHub (personal repo https://nuget.pkg.github.com/l33tc0d3r/index.json, needs authentication)\r\n3. CONTOSODEV (corporate server \\\\CONTOSODEV\\\\NuGet, needs VPN connection)\r\n\r\nSource mappings configured in Visual Studio:\r\n|Package|Source|\r\n|---|---|\r\n| com.contoso.* | CONTOSODEV |\r\n| l33tc0d3r.* | GitHub |\r\n| * | nuget.org |\r\n\r\nPackages installed in the open project:\r\n - com.contoso.discombobulator\r\n - l33tc0d3r.freakui3\r\n - Newtonsoft.Json\r\n\r\nNow when you want to update Newtonsoft.Json you can't if:\r\n\r\n1. You aren't connected to the corporate VPN\r\n2. You don't provide credentials for private GitHub packages repo (VS does not remember password across sessions*)\r\n\r\nYou cannot even remove the existing packages or install any new ones from nuget.org which should be possible even without having explicit mappings.\r\n\r\nI do understand the compatibility and security concerns if you were to fall back to different package repository, but this is beyond ridiculous and user-hostile behavior. If a package was installed from nuget.org, it's maintenance should not be affected by other sources being temporarily inaccessible.\n\n### Desired Behavior\n\n1. If a user tries to update or remove a package installed from a specific source and that source is accessible that should succeed &mdash; it shouldn't be all or nothing.\r\n2. If there is a mapping that says download `*.com.contoso` from `\\\\CONTOSODEV\\NuGet` and everything else from nuget.org and a user tries to install `Rick.Mapperly` that should succeed even if `\\\\CONTOSODEV\\NuGet` is not accessible otherwise what's the point in having source mappings in the first place?\r\n\n\n### Additional Context\n\n* Visual Studio does not save password for GitHub packages despite the checkbox \"Remember password\" being checked. That's a separate bug I guess should be reported."},{"Id":"40333745367","Type":"IssuesEvent","CreatedAt":"2024-07-22T00:26:29","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13647","RelatedDescription":"Opened issue \"PERF: NnuGet Cloning operations are showing heavily in allocations during VS solution load\" (#13647) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Open VS, wait for everything to settle\r\n2) Start profiler\r\n3) Open vs-platform solution\r\n4) Wait for things to settle, stop profiler\r\n\r\n*** interesting bit from memory profile ***\r\n![image](https://github.com/user-attachments/assets/ca1026fa-21d3-4d87-b8b3-c64fa7d5d63c)\n\n### Verbose Logs\n\n_No response_"},{"Id":"40329741537","Type":"IssuesEvent","CreatedAt":"2024-07-21T16:08:46","Actor":"cremor","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13646","RelatedDescription":"Opened issue \"Improve the PM UI (especially update) experience for CPM transitively pinned packages\" (#13646) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nImagine the following situation: You work in a solution that uses Central Package Management and want to update your dependencies via the VS Package Management UI. Your solution also has some transitively pinned packages. The update process currently looks like this:\r\n\r\nFirst, you open the PM UI for the whole solution and update the direct dependencies. This is simple and well supported in the GUI.\r\n\r\nBut then you have to do the following, all of which are not supported in the GUI at all as far as I know:\r\n1. Figure out which transitive dependencies are pinned.\r\n2. Manually check for each transitively pinned package:\r\n   1. Is the transitively pinned package still a dependency? (Maybe the direct dependencies don't reference that pinned package any more.)\r\n   2. Is transitive pinning still required? (Maybe the direct dependencies have been updated to already reference the pinned version.)\r\n   3. Is there an update available for the transitively pinned package?\r\n\r\nIn my opinion all those points should be supported in the PM UI.\r\n\r\nThe most important point for me would be the update check. Couldn't the PM UI show available updates to transitively pinned packages in the same list as it shows updates for direct dependencies?\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40326813489","Type":"IssuesEvent","CreatedAt":"2024-07-21T11:02:09","Actor":"Kongpc14567","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13645","RelatedDescription":"Opened issue \"KAMPANAT THUMWONG \" (#13645) at NuGet/Home","RelatedBody":""},{"Id":"40319950493","Type":"IssuesEvent","CreatedAt":"2024-07-20T18:33:14","Actor":"baronfel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13644","RelatedDescription":"Opened issue \"Fetching Vulnerability Resources doesn't respect cancellation\" (#13644) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 9 preview 7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis requires a vulnerability information provider to have a network problem, either simulated or real. For me, the Azure outage this Thursday evening presented such that when I cancelled a `dotnet build` of the dotnet/sdk repo MSBuild attempted to cancel the build but the Restore continued - I got error messages like the following after the 90s timeout finished:\r\n\r\n```\r\nE:\\Code\\dotnet-sdk\\src\\Layout\\toolset-tasks\\toolset-tasks.csproj : error NU1900: Warning As Error: Error occurred while getting package vulnerability data: Unable to load the service index for source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json.\r\n```\r\nand\r\n```\r\nE:\\Code\\dotnet-sdk\\artifacts\\bin\\redist\\Debug\\dotnet\\sdk\\9.0.100-dev\\NuGet.targets(180,5): warning MSB4220: Waiting for the currently executing task \"RestoreTask\" to cancel.\r\n```\r\n\r\nTo me this felt like a classic case of not passing a CTok, or using CTok.None. I dug into the RestoreTask and found that \r\n\r\n* RestoreDoes set up and [pass a CTok](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L163)\r\n* Restores are [run for each request](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Build.Tasks/BuildTasksUtility.cs#L251)\r\n* Also run [here](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/RestoreRunner.cs#L251)\r\n* Audit [is performed](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/RestoreCommand.cs#L336-L337), which requires\r\n* packages vulnerabilities to [be checked](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/RestoreCommand.cs#L513), which requires\r\n* [fetching vulnerability data](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/AuditUtility.cs#L90), which requires\r\n* querying vulnerability data [from the configured providers](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/AuditUtility.cs#L332)\r\n\r\nThrough this whole chain the CTok is flowed in a way that makes sense to me. However, the Vulnerability provider interface seems to accept a CTok, but [not use it](https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/src/NuGet.Core/NuGet.Commands/RestoreCommand/VulnerabilityInformationProvider.cs#L34), perhaps for caching purposes?\r\n\r\nI think if this was changed to accept the flowed-in CTok in some way that Restore would be properly cancellable again.\r\n* \n\n### Verbose Logs\n\n```shell\nI don't have standalone logs, but I did include some error messages above.\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-07-23T03:30:19.699405Z","RunDurationInMilliseconds":1169}