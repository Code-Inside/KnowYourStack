{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"24287865633","Type":"PullRequestEvent","CreatedAt":"2022-09-29T01:08:11","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9255","RelatedDescription":"Merged pull request \"Add ASE regions to allowed regions\" (#9255) at NuGet/NuGetGallery","RelatedBody":"Adds ASE regions to allowed configuration list."},{"Id":"24285414097","Type":"PullRequestEvent","CreatedAt":"2022-09-28T21:33:03","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9261","RelatedDescription":"Opened pull request \"Refactored PackageService code for use by Search-by-TFM\" (#9261) at NuGet/NuGetGallery","RelatedBody":"We need to reuse some asset framework logic from NuGetGallery in Catalog2AzureSearch for Search-by-TFM, and moving this logic to NuGetGallery.Core would allow us to reuse this code with minimal changes.\r\n\r\nThis change:\r\n* Creates the AssetFrameworkService, which now holds the asset framework logic in its GetAssetFrameworks method\r\n* Redirects the previous GetSupportedFrameworks method in PackageService (NuGetGallery.Services) to this logic\r\n\r\nAll previous tests passed after this change."},{"Id":"24285337015","Type":"PullRequestEvent","CreatedAt":"2022-09-28T21:27:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9260","RelatedDescription":"Opened pull request \"Address three CodeQL errors\" (#9260) at NuGet/NuGetGallery","RelatedBody":"First, ignore moment.js issues by classifying it as a library.\r\nSecond, resolve an escaping issue by using a built-in jQuery method.\r\nThird, supress a usage of MD5 for backwards compatibility reasons.\r\n"},{"Id":"24281331517","Type":"IssuesEvent","CreatedAt":"2022-09-28T17:41:02","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9257","RelatedDescription":"Closed issue \"[NuGet.org Bug]: SearchQueryService (primary) returns stale data\" (#9257) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nIt looks like primary SearchQueryService returns stale data when package information queried. I observe the same stale total downloads count for my package for several days (see repro steps).\n\n### Repro Steps\n\n1. Execute https://api.nuget.org/v3/index.json.\r\n2. Take primary SearchQueryService URL; at the moment it's https://azuresearch-usnc.nuget.org/query.\r\n3. Execute https://azuresearch-usnc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi.\r\n4. Look into `totalDownloads` field, it's value is `36891` and this value is not changed from 21 Sept, although if you look into the package page (https://www.nuget.org/packages/Melanchall.DryWetMidi), you'll see that real total downloads count is `37.2K`. Also latest version downloads count is incorrect too.\r\n\r\nBut if you query information by secondary SearchQueryService (https://azuresearch-ussc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi), you'll get more accurate value `37062` at the moment of this issue created (although the value is smaller than on nuget.org).\n\n### Expected Behavior\n\nPrimary SearchQueryService returns correct downloads numbers. Right now secondary one returns more correct info, but I think _primary_ word means we should rely on it. Right now it seems you don't provide reliable way to get a package downloads statistics via API.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/26361185/192592218-014acd90-8e27-499e-86ee-7880ff02c781.png)\r\n\r\n![image](https://user-images.githubusercontent.com/26361185/192592553-43f4abec-d8ce-42ca-b4a5-ac45a8573183.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24281227308","Type":"IssuesEvent","CreatedAt":"2022-09-28T17:35:24","Actor":"dtivel","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9259","RelatedDescription":"Opened issue \"NuGet.org:  transition away from deprecated Symantec timestamping service\" (#9259) at NuGet/NuGetGallery","RelatedBody":"NuGet.org (DEV, INT, and PROD environments) use the deprecated Symantec timestamping service for repository signing and countersigning NuGet packages.  The industry-wide deprecated status of the service led to the [2021 incident on Linux](https://github.com/NuGet/Home/issues/10491). \r\n\r\nWe need to move away from this service to another service in good standing for all new packages pushed to NuGet.org.\r\n\r\nCC @joelverhagen"},{"Id":"24263299064","Type":"IssuesEvent","CreatedAt":"2022-09-28T02:19:16","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9258","RelatedDescription":"Opened issue \"[NuGet.org Bug]: The link for owner request is broken in the email.\" (#9258) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe email link doesn't point to www.nuget.org.\n\n### Repro Steps\n\nAdd a package owner and check the received link in the email.\n\n### Expected Behavior\n\nThe link should be workable. What about scenarios?\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24262171267","Type":"PullRequestEvent","CreatedAt":"2022-09-28T00:33:12","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9256","RelatedDescription":"Merged pull request \"Add missing binding redirect for Microsoft.Owin\" (#9256) at NuGet/NuGetGallery","RelatedBody":"Resolves issue caused by https://github.com/NuGet/NuGetGallery/pull/9254."},{"Id":"24258405302","Type":"IssuesEvent","CreatedAt":"2022-09-27T19:59:05","Actor":"jmecosta","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9222","RelatedDescription":"Closed issue \"[NuGet.org Bug]: code signing certificates\" (#9222) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nWe have a bigger wider organization in nuget that we want everyone to use in the company.  However some of the groups don't have signing certificates and nuget.org prevents their packages from being uploaded because other users in the organization have uploaded their certificate that they want use when delivering their packages.\r\n\r\nWe don't want people in the company to user other organizations. \r\n\r\nHow we handle different maturity of teams inside the same organization? \r\n\r\nIs the only option  to force them to buy a certificate even tough they really don't need it?\r\n\r\nThanks in advance\n\n### Repro Steps\n\nNot applicable\n\n### Expected Behavior\n\nNot applicable\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24255313858","Type":"IssuesEvent","CreatedAt":"2022-09-27T17:15:08","Actor":"melanchall","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9257","RelatedDescription":"Opened issue \"[NuGet.org Bug]: SearchQueryService (primary) returns stale data\" (#9257) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nIt looks like primary SearchQueryService returns stale data when package information queried. I observe the same stale total downloads count for my package for several days (see repro steps).\n\n### Repro Steps\n\n1. Execute https://api.nuget.org/v3/index.json.\r\n2. Take primary SearchQueryService URL; at the moment it's https://azuresearch-usnc.nuget.org/query.\r\n3. Execute https://azuresearch-usnc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi.\r\n4. Look into `totalDownloads` field, it's value is `36891` and this value is not changed from 21 Sept, although if you look into the package page (https://www.nuget.org/packages/Melanchall.DryWetMidi), you'll see that real total downloads count is `37.2K`. Also latest version downloads count is incorrect too.\r\n\r\nBut if you query information by secondary SearchQueryService (https://azuresearch-ussc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi), you'll get more accurate value `37062` at the moment of this issue created (although the value is smaller than on nuget.org).\n\n### Expected Behavior\n\nPrimary SearchQueryService returns correct downloads numbers. Right now secondary one returns more correct info, but I think _primary_ word means we should rely on it. Right now it seems you don't provide reliable way to get a package downloads statistics via API.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/26361185/192592218-014acd90-8e27-499e-86ee-7880ff02c781.png)\r\n\r\n![image](https://user-images.githubusercontent.com/26361185/192592553-43f4abec-d8ce-42ca-b4a5-ac45a8573183.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24254748069","Type":"PullRequestEvent","CreatedAt":"2022-09-27T16:46:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9256","RelatedDescription":"Opened pull request \"Add missing binding redirect for Microsoft.Owin\" (#9256) at NuGet/NuGetGallery","RelatedBody":"Resolves issue caused by https://github.com/NuGet/NuGetGallery/pull/9254."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"24287499119","Type":"IssuesEvent","CreatedAt":"2022-09-29T00:33:14","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9612","RelatedDescription":"Closed issue \"Cannot Step Into NuGet Source Code\" (#9612) at NuGet/Home","RelatedBody":"I'm going over some simple C# .NET Core code that deals with package dependencies, using the NuGet SDK itself (code [here](https://github.com/NuGet/Home/issues/6188)). So I've created a sample project in VS 2019 and used that code.\r\n\r\nI'd like to do a step-into with Visual Studio, to see exactly what NuGet methods are called, so need to make sure the symbols I'm using match whatever version the libraries the code uses. So I don't leave things to chance, and install the 5.6.0 version of the NuGet packages the code needs (`NuGet.Protocol` and `NuGet.DependencyResolver.Core`, with their required dependencies installed automatically) from VS's own Package Manager UI. I build the project, go to the `bin` folder and record the exact file version of the `NuGet.Protocol` .dll: 5.6.0.6591. I'm pretty sure the other assemblies included in the NuGet packages use the same version, based on the fact that there are dedicated Powershell scripts inside the NuGet's own tooling that look to rewrite the version when needed for all.\r\n\r\nI clone the `NuGet.Client` GitHub repo locally. I switch to the `5.6.0.6591` tag, and build using the instructions in the `CONTRIBUTING.md` file. I go to the `artifacts` folder, where each project has its output assemblies and symbol files. I add the path to both folders containing the files I'm after, going with `netstandard2.0` folder due to the framework I'm targeting (.NET Core). Casually looking over one of the .dll within, I notice that the file version is 5.6.0.41820, clearly different from what I was expecting. Sure enough, adding both folders (corresponding to the 2 NuGet packages) to the symbol path in VS doesn't have any effect - as stepping into the code doesn't even trigger the symbols loading, let alone go into the NuGet source code.\r\n\r\nAnother hint that things don't quite match what I expect is that the .nupkg packages created right at the end of the build process have a names such as `NuGet.Protocol.5.6.0-zlocal.41820.nupkg`.\r\n\r\nI'm pretty certain VS is configured to correctly process symbols, as I can step through .NET Core's own source code for methods invoked from the project mentioned above, after VS downloads automatically the required sources.\r\n\r\nIs there any way to step into the NuGet source code in the context above ? Or is it something I've got wrong in the whole setup ?"},{"Id":"24286657251","Type":"IssuesEvent","CreatedAt":"2022-09-28T23:12:13","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12121","RelatedDescription":"Closed issue \"[Bug]: Make static restore graph evaluation long path aware\" (#12121) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nall versions since static restore added\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUse the NUGET_PACKAGES environment variable, or `globalPackagesFolder` config in a `nuget.config` file to set the GPF to a path of around 200 characters long. Then, restore a project with `msbuild -t:restore -p:RestoreUseStaticGraphEvaluation=true` from a Developer PowerShell. Make sure the registry/group policy setting for long paths is enabled, and this restore will fail. But if you remove `-p:RestoreUseStaticGraphEvaluation=true` from the arguments, it will work.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24285087787","Type":"IssuesEvent","CreatedAt":"2022-09-28T21:11:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11434","RelatedDescription":"Closed issue \"[Feature]: nuget CLI should know options \"--version\" and \"--help\"\" (#11434) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nMy first invocations of brew-installed nuget (`brew install nuget`):\r\n```\r\n$ nuget --help\r\nUnknown command: '--help'\r\nNuGet.Commands.CommandException: Unknown command: '--help'\r\n  at NuGet.CommandLine.CommandManager.GetCommand (System.String commandName) [0x0004e] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n  at NuGet.CommandLine.CommandLineParser.ParseCommandLine (System.Collections.Generic.IEnumerable`1[T] commandLineArgs) [0x00016] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x0012b] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n```\r\n```\r\n$ nuget --version\r\nUnknown command: '--version'\r\nNuGet.Commands.CommandException: Unknown command: '--version'\r\n  at NuGet.CommandLine.CommandManager.GetCommand (System.String commandName) [0x0004e] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n  at NuGet.CommandLine.CommandLineParser.ParseCommandLine (System.Collections.Generic.IEnumerable`1[T] commandLineArgs) [0x00016] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x0012b] in <3468606d201847a5b9ffe12c0a3e91c9>:0 \r\n```\r\nYeah, that doesn't shine.\r\nSure I got the right `nuget`? \r\n\r\nJust any serious CLI will support `--help` and `--version`.  How difficult to implement is that?\n\n### Additional Context and Details\n\n```\r\n$ which nuget\r\n/usr/local/bin/nuget\r\n\r\n$ l $(which nuget)\r\n/usr/local/bin/nuget -> ../Cellar/nuget/5.11.0/bin/nuget\r\n```\r\n"},{"Id":"24284758346","Type":"IssuesEvent","CreatedAt":"2022-09-28T20:51:31","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12103","RelatedDescription":"Closed issue \"[Bug]: IVsPackageInstallerServices APIs sometimes throw ProjectNotNominatedException\" (#12103) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nVS 17.2 and higher\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nNote, this affects developers of VS extensions, not directly customers using VS (unless the extension calls the NuGet API and doesn't handle this scenario).\r\n\r\nWe detected this via telemetry, so I'm not entirely sure under what scenarios it happens (I was unable to reproduce, doing some quick tests). Anyway, VS extension developers can call into NuGet's IVsPackageInstallerServices APIs, but under (known) scenarios, it will throw a ProjectNotNominatedException (which is private/internal to NuGet, so extension developers need to catch InvalidOperationException). Before VS17.2, the same scenario likely also threw an InvalidOperationException, but the exception type & message might not have been so clear why.\r\n\r\nThis happens because of the way that CPS PackageReference projects work in Visual Studio. CPS is (or was) the Common Project System (now just called the [Visual Studio Project System](https://github.com/microsoft/VSProjectSystem)). The design, in order to reduce UI delays and do more work in parallel on background threads, is much more async than previous project systems. The flow is that the project system does the minimal synchronous project loading on the UI thread, then does more project loading on a background thread, then when it's ready it notifies NuGet about the project, and all relevant NuGet properties and items, via an API called `IVsSolutionRestoreService3.NominateProjectAsync`. Until this time NuGet doesn't know that the project supports Nuget, it doesn't know what TFMs the project has, it doesn't know which, if any, packages it references. Therefore, there's a lot of NuGet functionality, like `GetInstalledPackages()` that can't work until the project is nominated.\r\n\r\nNote, there are APIs that allow extensions to get notifications that the project is ready, so extension developers should design their extension to handle this asynchronous nature of Visual Studio, even if it does make the code more complex. NuGet will stop collecting telemetry when this scenario is encountered, since it's, unfortunately, not actionable by us given the synchronous nature of the current APIs.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24283907951","Type":"IssuesEvent","CreatedAt":"2022-09-28T20:01:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4327","RelatedDescription":"Closed issue \"NuGet restore doesn't throw error when Allow NuGet to download pacakges disabled\" (#4327) at NuGet/Home","RelatedBody":"Steps:\r\n1. Disable Allow NuGet to download missing packages option from tools-> options -> NuGet Package Manager\r\n2. create a class library\r\n3. install newtonsoft.json and select PackageReference as package management format\r\n4. manually delete this newtonsoft.json package from the global packages folder\r\n5. now, do restore. It will show restore succeed and all packages are installed. But this package is not present. Besides, it shows a warning in Error List window, and ask to run restore. But restore doesn't do anything when you disabled that option.\r\n\r\nExpected:\r\nIdeally NuGet restore would have thrown a error similar to it does for Package.Config case like below. Same issue is there for .net core projects as well (for anything which depends on PackageReference).\r\n\r\n`One or more NuGet packages need to be restored but couldn't be because consent has not been granted. To give consent, open the Visual Studio Options dialog, click on the Package Manager node and check 'Allow NuGet to download missing packages during build.' You can also give consent by setting the environment variable 'EnableNuGetPackageRestore' to 'true'.`"},{"Id":"24282311436","Type":"IssuesEvent","CreatedAt":"2022-09-28T18:33:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4388","RelatedDescription":"Closed issue \"Nuget pack allows multiple files with the same path to be added to a package\" (#4388) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: `3.5.0.1938`\r\nWorked in: `2.8.60717.93`\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create the following folder structure\r\n```\r\nRoot\r\n| - Folder1\r\n| | - SomeFile.txt\r\n| - Folder2\r\n| | - SomeFile.txt\r\n| - Folder3\r\n  | SomeFile.txt\r\n```\r\n\r\n2. In the root, add the following nuspec as `root.nuspec'\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package>\r\n  <metadata>\r\n    <id>Root.Error</id>\r\n    <version>0.0.0</version>\r\n    <authors>Kieranties</authors>\r\n    <owners>Kieranties</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Shows Error</description>\r\n    <copyright>Kieranties</copyright>\r\n  </metadata>\r\n  <files>    \r\n    <file  src=\"Folder*\\SomeFile.*\"  target=\"lib\\net462\"  />\r\n  </files>\r\n</package>\r\n```\r\n\r\n3. Run `nuget pack` in the root folder.\r\n\r\n## Expected Result\r\nI expected the pack to fail, due to having the same file packed multiple times.  I expected the same error output as version 2.8.60717.93\r\n\r\n```\r\nC:\\root\r\n> nuget pack\r\nAttempting to build package from 'root.nuspec'.\r\nlib\\net462\\SomeFile.txt\r\nCannot add part for the specified URI because it is already in the package.\r\n```\r\n## Actual Result\r\nThe pack succeeds and results in a nuget package that cannot be installed or extracted via zip utilities (see image for package contents)\r\n![errorpackage](https://cloud.githubusercontent.com/assets/351423/22251857/300acb22-e244-11e6-8162-a23e3afba0cd.PNG)\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n```\r\nNuGet Version: 3.5.0.1938\r\nAttempting to build package from 'root.nuspec'.\r\n\r\nId: Root.Error\r\nVersion: 0.0.0\r\nAuthors: Kieranties\r\nDescription: Shows Error\r\nDependencies: None\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'lib/net462/SomeFile.txt'.\r\nAdded file 'lib/net462/SomeFile.txt'.\r\nAdded file 'lib/net462/SomeFile.txt'.\r\nAdded file 'package/services/metadata/core-properties/c3408a9ca1e2478da98d9856766d0e69.psmdcp'.\r\nAdded file 'Root.Error.nuspec'.\r\n\r\nSuccessfully created package 'C:\\root\\Root.Error.0.0.0.nupkg'.\r\n```\r\n\r\n### Sample Project\r\n\r\n[repro.zip](https://github.com/NuGet/Home/files/726971/repro.zip)\r\n\r\n\r\n"},{"Id":"24266283519","Type":"IssuesEvent","CreatedAt":"2022-09-28T06:34:42","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12122","RelatedDescription":"Opened issue \"Test NuGet.Protocol.FuncTest.PluginTests.GetOrCreateAsync_WithUnhandledExceptionInPlugin_Throws is flaky\" (#12122) at NuGet/Home","RelatedBody":"It's been failing very regularly recently: \r\n![image](https://user-images.githubusercontent.com/5030577/192705205-73d1046a-3e9f-47cb-bd8e-abde9d802d24.png)\r\n\r\nTest error message:\r\n\r\n```text\r\nPlugin 'Plugin.Testable' failed within 10.139 seconds with exit code 57005.\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\nStack trace:\r\n\r\n```text\r\n   at NuGet.Protocol.FuncTest.PluginTests.<GetOrCreateAsync_WithUnhandledExceptionInPlugin_Throws>d__7.MoveNext() in D:\\a\\_work\\1\\s\\test\\NuGet.Core.FuncTests\\NuGet.Protocol.FuncTest\\PluginTests.cs:line 66\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n"},{"Id":"24263211497","Type":"IssuesEvent","CreatedAt":"2022-09-28T02:11:09","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12121","RelatedDescription":"Opened issue \"[Bug]: Make static restore graph evaluation long path aware\" (#12121) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nall versions since static restore added\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUse the NUGET_PACKAGES environment variable, or `globalPackagesFolder` config in a `nuget.config` file to set the GPF to a path of around 200 characters long. Then, restore a project with `msbuild -t:restore -p:RestoreUseStaticGraphEvaluation=true` from a Developer PowerShell. Make sure the registry/group policy setting for long paths is enabled, and this restore will fail. But if you remove `-p:RestoreUseStaticGraphEvaluation=true` from the arguments, it will work.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24251130849","Type":"IssuesEvent","CreatedAt":"2022-09-27T14:17:06","Actor":"odalet","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12119","RelatedDescription":"Opened issue \"[DCR]: Dependent project does not generate nuget package when multiple TFMs\" (#12119) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\n> Note that I first raised this issue in the [msbuild repository](https://github.com/dotnet/msbuild/issues/7911) but it was suggested to me this should rather belong here. So Here it goes.\r\n\r\nConsider this scenario:\r\n\r\n* Lib1.csproj multi-targets `net48` and `net6.0` and has `GeneratePackageOnBuild` set to `true`\r\n* Lib2.csproj does the same\r\n* Lib1.csproj references Lib2.csproj (both are part of the same solution)\r\n\r\nNow, let's `dotnet build Lib1.csproj`:\r\n\r\n* It generates Lib2 assemblies (one for each target),\r\n* It genrates Lib1 assemblies (one for each target)\r\n* It generates Lib1 `nupkg`\r\n* **It does not generate Lib2 `nupkg` though**\r\n\r\n> NB: this does not happen when building the solution in VS\r\n\r\n\n\n### Desired Behavior\n\n`Lib2.nupkg` should be generated\r\n\r\nI understand it is probably not straightforward, but according to the _least surprise_ principle, I think it'd be desirable.\n\n### Additional Context\n\n### Steps to Reproduce\r\n* See attached solution: [MultipleTfmsNugetRepro.zip](https://github.com/NuGet/Home/files/9656759/MultipleTfmsNugetRepro.zip)\r\n* Then:\r\n  ```sh\r\n  cd .....\\Lib1\r\n  dotnet build\r\n  ```\r\n* `Lib1.nupkg` is created in `Lib1\\bin\\Debug`\r\n* `Lib2.nupkg` is not `Lib2\\bin\\Debug`\r\n\r\nI also attached the corresponding binlog (build in release configuration this time): [binlog.zip](https://github.com/NuGet/Home/files/9656760/binlog.zip)\r\n\r\n\r\n### Analysis\r\n\r\nI've skimmed through the binlog and I think it boils down to `IsInnerBuild = true`preventing Lib2's nuget package from being generated. Here is what I guess happens:\r\n\r\n* Because Lib1 is a multi-targeting project, it is split into 2 pseudo-projects: one for each TFM \r\n* Thanks to the project reference, each one of these pseudo-projects transitively builds Lib2 (only for the TFM it is compatible with) in `IsInnerBuild = true` mode.\r\n  * This gives us Lib2 assemblies both for `net48` and `net6.0` targets\r\n  * And obviously Lib1 assemblies as well for both targets\r\n* Back to Lib1, the root project goes on with building the nuget package and it is generated (and as expected references `Lib1.nupkg`)\r\n* However, because Lib2 is never built with `IsInnerBuild = false`, its package is never generated.\r\n\r\n### Versions & Configurations\r\n\r\n* Visual Studio v17.2.2\r\n* `dotnet --version`: 6.0.303"},{"Id":"24249451687","Type":"IssuesEvent","CreatedAt":"2022-09-27T13:13:33","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12118","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform Sign Verify] An error NU1101 occurred after adding package to the test project and restoring the project on MacBook\" (#12118) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 7.0.100-rtm.22476.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Detailed repro steps\r\n1.\tExecute the [pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2.\tCreate a test code signing certificate. \r\nOn macOS:`  ./dotnet/dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net7.0 `\r\nThis will create a test code signing certificate. \r\nKeep the output of this tool.  You will refer to it in later steps. \r\n3.\tWhere <PackageId> is the test package ID and <PfxFilePath> is the file path to the .pfx file, sign the test package: \r\n        On macOS:`  ./dotnet/dotnet nuget sign ./<PackageId>/bin/Debug/<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> `\r\n4.\tVerify that the previous step succeeded with the following warnings. \r\na.\twarn : NU3002: The '--timestamper' option was not provided. The signed package will not be timestamped. To learn more about this option, please visit https://docs.microsoft.com/dotnet/core/tools \r\nb.\twarn : NU3018: UntrustedRoot: self-signed certificate \r\n5.\tCreate a test project: \r\n       On macOS:  `mkdir ./test && pushd ./test && ../dotnet/dotnet new console && cp ../NuGet.config.template ./NuGet.config `\r\n6.\tUpdate NuGet.config to reference the SHA-256 fingerprint of the certificate created in step 2. \r\n7.\tClear local NuGet resources and previous restore results: \r\n       On macOS: ` rm -r -f ./obj && ../dotnet/dotnet nuget locals --clear all `\r\n8.\tWhere <PackageId> is the test package ID, add a package reference to the test package: \r\n       On macOS: ` ../dotnet/dotnet add package <PackageId> --version 1.0.0 `\r\n9.\tVerify the results of the previous step. \r\n       On macOS, the operation succeeded with no warnings or errors. \r\ninfo : X.509 certificate chain validation will use the fallback certificate bundle at '/home/dtivel/testpass/dotnet/sdk/7.0.100-preview.7.22376.5/trustedroots/codesignctl.pem'. \r\n10.\tRepeat step 7. \r\n11.\tWhere <PackageId> is the test package ID, edit test.csproj to include the following element directly inside the root <configuration> element: \r\n```\r\n<ItemGroup> \r\n<PackageReference Include=\"<PackageId>\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n12.\tRestore: \r\n        On macOS: ` ../dotnet/dotnet restore -v detailed.`\r\n\r\n#### Expected\r\nThere is no error NU1101 shows in step8 and step12.\r\n\r\n#### Actual\r\nThere is error NU1101 shows in step8 and step12 as below.\r\n![image](https://user-images.githubusercontent.com/20632625/192535655-46255f0f-63e0-4b43-8006-076439de2d6c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/20632625/192535698-b80ef2d5-3ae7-4787-97d2-153d3ae93fa7.png)\r\n\r\n#### Note:\r\n1.It is not a regression.\r\n2.Only repro on MacOS.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24244962120","Type":"IssuesEvent","CreatedAt":"2022-09-27T09:47:46","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12117","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform Sign Verify] Command “powershell.exe  -Command Compress-Archive -Path” failed to execute since .nupkg is not supported\" (#12117) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 7.0.100-rtm.22476.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n## Repro steps: \r\n1. Execute the [pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2. Add trust for the certificate:` .\\dotnet\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>`\r\n3. Sign the test package:` .\\dotnet\\dotnet nuget sign .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> --timestamper http://timestamp.digicert.com/`\r\n4. Verify that the previous step succeeded with no warnings or errors.\r\n5. Modify the signed package:` powershell.exe  -Command Compress-Archive -Path .\\NuGet.config.template -Update -DestinationPath .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg`\r\n\r\n## Expected:\r\nThe command should be executed successfully.\r\n\r\n## Actual:\r\nThe command failed to execute as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/192493744-7b5a5cbd-92d6-4d49-9a6d-2c3311696ca8.png)\r\n\r\n## Note:\r\nIt is not a regression.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24236703152","Type":"IssuesEvent","CreatedAt":"2022-09-27T00:25:56","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11923","RelatedDescription":"Closed issue \"[Bug]: Visual Studio Installed Packages page is slow to load\" (#11923) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nVisual Studio 2022\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nThe Installed packages page in the Visual Studio Package Management UI can be slow to load.\r\n\r\nPart of the reason for this slowness is `HttpClientHandler`'s `MaxConnectionsPerServer` setting, which by default is 2.\r\n\r\nIncreasing this value results in a much faster load time. In the attached video, setting `MaxConnectionsPerServer` to 20 reduces the time taken from ~42 seconds to ~14 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201348-58856ed2-804b-4a0f-8180-ef0abffe3bb5.mp4\r\n\r\nThis can be further improved by changing `PackageMetadataResourceV3.GetMetadataAsync` to make its API requests concurrently. In the attached video, the time taken is further reduced to ~5 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201934-63a15ea5-00dc-4c0c-bd4e-27b8383cd86f.mp4\r\n\r\nThe diff for these changes can be found here: https://github.com/mjolka/NuGet.Client/commit/6da131780ccf74c1d4de9306804c295f5462e57b\r\n\r\nThis is the project file I used to test with:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"AWSSDK.Core\" Version=\"3.7.12.3\" />\r\n    <PackageReference Include=\"AWSSDK.S3\" Version=\"3.7.9.19\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager\" Version=\"3.7.2.59\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager.Caching\" Version=\"1.0.4\" />\r\n    <PackageReference Include=\"MassTransit\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"MassTransit.RabbitMQ\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.6\" />\r\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.5\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.2.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n````\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"24236387817","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:57:31","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12116","RelatedDescription":"Opened issue \"[Bug]: Address CA2213 warnings\" (#12116) at NuGet/Home","RelatedBody":"Address new CA2213 warnings which were suppressed in  "},{"Id":"24236126704","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:33:33","Actor":"jonreis","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12115","RelatedDescription":"Opened issue \"[Bug]: dotnet list package --vulnerable --include-transitive does not report all vulnerable packages\" (#12115) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet v6.0.401\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nMySql.Data v8.0.24 uses 2 transitive packages with security vulnerabilities:\r\n\r\n1) BouncyCastle v1.85 has security vulnerability [CVE-2020-15522](https://github.com/advisories/GHSA-6xx3-rg99-gc3p) yet when I run the nuget vulnerability check, it is not reported.\r\n2) Google.Protobuf [CVE-2021-22570](https://github.com/advisories/GHSA-77rm-9x9h-xj3g)\r\n\r\nTransitive Package for Google.Protobuf is reported, but not BouncyCastle\r\n\r\nTo Reproduce:\r\n1. Create a project that includes MySql.Data v8.0.24\r\n2. Run: dotnet list package --vulnerable --include-transitive\r\n\r\nOutput from tool\r\n[net48]:\r\nTransitive Package Resolved Severity Advisory URL\r\nGoogle.Protobuf 3.14.0 High https://github.com/advisories/GHSA-77rm-9x9h-xj3g\r\n\r\nOther details:\r\nAdvisory: https://github.com/advisories/GHSA-6xx3-rg99-gc3p\r\nBouncyCastle release notes: https://www.bouncycastle.org/csharp/\r\nNIST: https://nvd.nist.gov/vuln/detail/cve-2020-15522\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"23723590840","Type":"IssuesEvent","CreatedAt":"2022-08-30T17:25:48","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Opened issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":126,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2022-09-29T03:30:25.2695667Z","RunDurationInMilliseconds":1350}