{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"36071807355","Type":"PullRequestEvent","CreatedAt":"2024-02-28T02:30:15","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9834","RelatedDescription":"Opened pull request \"[ReleasePrep][2024.02.27] RI of dev into main\" (#9834) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"36071230586","Type":"PullRequestEvent","CreatedAt":"2024-02-28T01:55:12","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9833","RelatedDescription":"Merged pull request \"[ReleasePrep][2024.02.27] FI of main into dev\" (#9833) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"36067575380","Type":"PullRequestEvent","CreatedAt":"2024-02-27T22:34:22","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9833","RelatedDescription":"Opened pull request \"[ReleasePrep][2024.02.27] FI of main into dev\" (#9833) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"36067179310","Type":"PullRequestEvent","CreatedAt":"2024-02-27T22:17:31","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9832","RelatedDescription":"Opened pull request \"Downloads page changed\" (#9832) at NuGet/NuGetGallery","RelatedBody":"The download page is now updated. Here's how it looked like before:\r\n<img width=\"878\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/844e62df-5794-4520-8f20-56d41ee3880b\">\r\n\r\nHere is how it looks like now:\r\n<img width=\"891\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/98630c30-36ea-4532-ac3b-1d0086453d1f\">\r\n\r\nRationale for changes:\r\nHaving old versions of VS is not relevant anymore.\r\nThe list of versions has been updated and approved in a different PR.\r\nThere is no warning message anymore because the versions included are supported.\r\n\r\nTesting:\r\nGo to [this file](https://github.com/NuGet/NuGet.Services.Index/blob/main/PROD/dist.nuget.org-index/index.json). Click on \"raw\" (see image)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/c801df72-b56e-4560-9c7c-fe17ae58ea76)\r\n\r\nCopy the URL of the raw file. Now, go to Downloads.cshtml line 86 and instead of //dist.nuget.org/index.json, paste the URL you previously copied. Run the code. Go to Downloads. Older versions of win-x86 should be collapsible. There should also be a red message indicating that these versions are unsupported.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5067"},{"Id":"36037951289","Type":"IssuesEvent","CreatedAt":"2024-02-27T06:59:10","Actor":"linhvuquach","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9830","RelatedDescription":"Opened issue \"Long Execution Time for dotnet restore in OpenShift Build Pipeline\" (#9830) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nDuring our build pipeline execution on OpenShift, we've encountered a significant delay specifically with the dotnet restore command in the Dockerfile. This delay is causing notable slowdowns in our overall build process.\r\n\r\nMy Dockerfile\r\n```\r\n#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.\r\n\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\r\nWORKDIR /app\r\nEXPOSE 8080\r\nEXPOSE 8081\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\r\nARG BUILD_CONFIGURATION=Release\r\nARG HTTP_PROXY=\"<my-url-local-proxy>\"\r\nENV DOTNET_NUGET_SIGNATURE_VERIFICATION=false\r\nWORKDIR /src\r\nCOPY [\"My.API/My.API.csproj\", \"My.API/\"]\r\nCOPY [\"My.Application/My.Application.csproj\", \"My.Application/\"]\r\nCOPY [\"My.Infrastructure/My.Infrastructure.csproj\", \"My.Infrastructure/\"]\r\nCOPY \"My.API/nuget.config\" .\r\n\r\nRUN dotnet restore -v diag \"./My.API/./My.API.csproj\"\r\nCOPY . .\r\nWORKDIR \"/src/My.API\"\r\nRUN dotnet build \"./My.API.csproj\" -c $BUILD_CONFIGURATION -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish \"./My.API.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\n\r\nENTRYPOINT [\"dotnet\", \"My.API.dll\"]\r\n```\r\n\r\nMy nugget.config\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\n##### Version\r\nI'm using openshift version 4.\r\n\r\n##### Current Result\r\n- Local result: I can work fine with my Dockerfile in my local.\r\n- OpenShift result: The dotnet restore operation consistently takes 1-hour duration and seems to time out during the MSBuild within our OpenShift build pipeline.\n\n### Repro Steps\n\nI can build a simple Dockerfile .NET API application. Then you can set up a simple trigger CI to Openshift to build the pipeline.\r\n\r\nAt the step build the pipeline you will face this issue (dotnet restore).\n\n### Expected Behavior\n\nThe Openshift pipeline can build successfully the Dotnet Docker image.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n##### Additional Information\r\n- I saw a make sense information about NuGet signed-package verification https://github.com/NuGet/Home/issues/13062 and additional `ENV DOTNET_NUGET_SIGNATURE_VERIFICATION=false` in Dockerfile. But it didn't resolve yet.\r\n  - You also need it for more information: https://learn.microsoft.com/en-us/dotnet/core/tools/nuget-signed-package-verification\r\n- In my Dockerfile I also add a Proxy variable and use nuget.config file. You can look at it above.\r\n- I tried to create another Node simple application image. But it also stuck on the `npm install` step. I think the same concept with the `dotnet restore` command.\r\n- I'm always looking at my resource quota. I don't see CPU, memory,... reach limit: \r\n![image](https://github.com/openshift/origin/assets/26388126/a4749036-28ce-444c-b5b9-ea6104fec799)\r\n- I also tried to change  `aspnet:8.0` to `aspnet:7.0`. It still didn't success\r\n\r\nAny insights or guidance will be expected. Thank you for your attention to this matter."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"36066735702","Type":"IssuesEvent","CreatedAt":"2024-02-27T21:58:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12307","RelatedDescription":"Closed issue \"Warn when vulnerabilities are detected during packages.config restore\" (#12307) at NuGet/Home","RelatedBody":"- [x] https://github.com/NuGet/NuGet.Client/pull/5383\r\n- [x] Design configuration knobs (if any) for packages.config restore - https://github.com/NuGet/Home/pull/13154\r\n- [x] https://github.com/NuGet/Home/issues/13253\r\n- [ ] Add telemetry for package vulnerability checking at packages.config restore time\r\n- [ ] Enable vulnerability checking by default \r\n- [ ] https://github.com/NuGet/docs.microsoft.com-nuget/issues/3247"},{"Id":"36063574676","Type":"IssuesEvent","CreatedAt":"2024-02-27T19:54:01","Actor":"vexx32","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13273","RelatedDescription":"Opened issue \"NuGet.exe pack does not error when file names collide with folder names, creating packages with odd/invalid unpacking behaviour\" (#13273) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.8.0.131\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nAttempt to pack a package with the following structure:\r\n\r\n```\r\n| package-name.nuspec\r\n| bin/\r\n  |- file.txt\r\n| extensionless-file\r\n```\r\n\r\nthe files' contents other than the nuspec do not matter. nuspec contents:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>package-name</id>\r\n    <version>1.0.0</version>\r\n    <title>test-package</title>\r\n    <authors>author name</authors>\r\n    <owners>author name</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Test package to check extensionless files.</description>\r\n    <summary>Test package</summary>\r\n  </metadata>\r\n  <files>\r\n\t<file src=\"bin\\*\" target=\"bin\" />\r\n\t<file src=\"extensionless-file\" target=\"bin\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\n> **Note:** if the `target` attribute for the extensionless file is defined as `bin\\` instead of `bin`, the archive simply does not contain the extensionless file _at all_, seemingly being skipped when packing, without any warning or errors being emitted. A package like this is not malformed, but it is missing files the user tried to include, without notifying the user of any issues.\r\n\r\nOnce the package is packed (I just used `nuget pack`), the package can be inspected with a tool like 7zip to note that it contains _both_ a `bin` file and a `bin` folder. When these files are extracted onto a filesystem, things get weird, it will either give an access denied error or ask about overwriting file/folder contents, depending on the tool used to unpack the nupkg.\r\n\r\nThis was first noticed because attempting to upload a package malformed in this way causes a 500 Internal Server Error when uploading to the Chocolatey Community Repository, as it does some inspection and unpacking of uploaded packages; see https://github.com/chocolatey/home/issues/303\n\n### Verbose Logs\n\n_No response_"},{"Id":"36062338285","Type":"IssuesEvent","CreatedAt":"2024-02-27T19:09:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13272","RelatedDescription":"Opened issue \"Audit result caching service should react to solution changes\" (#13272) at NuGet/Home","RelatedBody":""},{"Id":"36062281224","Type":"IssuesEvent","CreatedAt":"2024-02-27T19:07:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13271","RelatedDescription":"Opened issue \"Display a vulnerability info bar when there's vulnerabilities in packages.config based projects.\" (#13271) at NuGet/Home","RelatedBody":""},{"Id":"36061927973","Type":"IssuesEvent","CreatedAt":"2024-02-27T18:54:39","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13270","RelatedDescription":"Opened issue \"Avoid cloning objects during restore in Visual Studio\" (#13270) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nCommand-line based restore is short lived and creates PackageSpec objects as input to restore.  In code paths for command-line based restores, the `PackageSpec` objects are not cloned.  However, since Visual Studio is a long running process, these objects are cloned since they could be mutated during restore.\n\n### Desired Behavior\n\nWe should make `PackageSpec` immutable or clone the object only if necessary.  At the moment the objects are cloned just to be safe which allocates unnecessarily.\n\n### Additional Context\n\nCommand-line based restores were fixed via https://github.com/NuGet/NuGet.Client/pull/5645 and https://github.com/NuGet/NuGet.Client/pull/3094"},{"Id":"36059980422","Type":"IssuesEvent","CreatedAt":"2024-02-27T17:45:44","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13267","RelatedDescription":"Closed issue \"NU1008 error with CPM and csproj having custom targets\" (#13267) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual studio 17.9.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nCreate a csproj with this content\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netstandard2.0</TargetFramework>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"NSwag.MSBuild\">\r\n\t\t  <PrivateAssets>all</PrivateAssets>\r\n\t\t  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n\t\t</PackageReference>\r\n\t</ItemGroup>\r\n\r\n\t<Target Name=\"GenerateCs\" Inputs=\"openapi.json\" Outputs=\"$(IntermediateOutputPath)RestService.g.cs\" BeforeTargets=\"CoreCompile\">\r\n\t\t<Exec Command=\"$(NSwagExe) openapi2csclient /input:openapi.json /output:$(IntermediateOutputPath)RestService.g.cs\" />\r\n\t</Target>\r\n\r\n</Project>\r\n```\r\n\r\nand a Directory.packages.props with this content\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"NSwag.MSBuild\" Version=\"14.0.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIn visual studio there is this error\r\n![image](https://github.com/NuGet/Home/assets/20659365/70d49f01-1fdf-4847-b49a-0c94dd37190a)\r\n\r\nBut after a manual restore with `dotnet restore` we do not have anymore error. It occurs only inside visual studio\n\n### Verbose Logs\n\n_No response_"},{"Id":"36055196707","Type":"IssuesEvent","CreatedAt":"2024-02-27T15:32:47","Actor":"jonathanpeppers","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13269","RelatedDescription":"Opened issue \"[.NET 9 Preview 3] no-op restore is no longer a no-op\" (#13269) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-preview.3.24126.2\n\n### Worked before?\n\n.NET SDK 9.0.100-preview.2.24122.3\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe discovered here a test failure: https://github.com/xamarin/xamarin-android/pull/8763\r\n\r\nThe underlying cause appears to be:\r\n```\r\nThe restore inputs for 'UnnamedProject' have changed. Continuing restore.\r\n```\r\n\r\nThis was an incremental build with no changes to the project.\r\n\r\nDigging deeper, the offending build seems to have some NuGet sources listed twice:\r\n```diff\r\n++https://api.nuget.org/v3/index.json\r\n++https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\r\nhttps://api.nuget.org/v3/index.json\r\nhttps://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\r\n```\r\nSo there must be something that adds extra feeds, making the no-op restore skip? so it runs a full restore?\n\n### Verbose Logs\n\n```shell\nHere are two `.binlog` files, `install2.binlog` restores as expected, `install3.binlog` does not:\n```\n"},{"Id":"36048046425","Type":"IssuesEvent","CreatedAt":"2024-02-27T12:19:50","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13268","RelatedDescription":"Opened issue \"Reduce allocations in calling IVsProjectAdpater.IsCapabilityMatchAsync\" (#13268) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n17.9\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nWhile investigating a customer issue last week, I noticed that `VsProjectAdapter.IsCapabilityMatchAsync` is an async method, only because it used `SwitchToMainThreadAsync`, but it was only called from a single place which already switched to the main thread.\r\n\r\nThis will only reduce two heap allocations per project in the solution, but it's a trivial improvement.\n\n### Verbose Logs\n\n_No response_"},{"Id":"36046571041","Type":"IssuesEvent","CreatedAt":"2024-02-27T11:31:58","Actor":"mdegroux","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13267","RelatedDescription":"Opened issue \"NU1008 error with csproj having custom targets\" (#13267) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual studio 17.9.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nCreate a csproj with this content\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>netstandard2.0</TargetFramework>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"NSwag.MSBuild\">\r\n\t\t  <PrivateAssets>all</PrivateAssets>\r\n\t\t  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n\t\t</PackageReference>\r\n\t</ItemGroup>\r\n\r\n\t<Target Name=\"GenerateCs\" Inputs=\"openapi.json\" Outputs=\"$(IntermediateOutputPath)RestService.g.cs\" BeforeTargets=\"CoreCompile\">\r\n\t\t<Exec Command=\"$(NSwagExe) openapi2csclient /input:openapi.json /output:$(IntermediateOutputPath)RestService.g.cs\" />\r\n\t</Target>\r\n\r\n</Project>\r\n```\r\n\r\nand a Directory.packages.props with this content\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"NSwag.MSBuild\" Version=\"14.0.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIn visual studio there is this error\r\n![image](https://github.com/NuGet/Home/assets/20659365/70d49f01-1fdf-4847-b49a-0c94dd37190a)\r\n\r\nBut after a manual restore with `dotnet restore` we do not have anymore error. It occurs only inside visual studio\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-02-28T03:30:18.1044385Z","RunDurationInMilliseconds":998}