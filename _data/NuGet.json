{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 â€“ Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 â€“ Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 â€“ The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"35058181409","Type":"IssuesEvent","CreatedAt":"2024-01-23T17:24:18","Actor":"beeme1mr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9785","RelatedDescription":"Opened issue \"[Feature]: Allow images from githubusercontent.com\" (#9785) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nPlease add support for githubusercontent.com so that generated by [contrib.rocks](https://contrib.rocks/preview) can be displayed on NuGet.\n\n### Additional Context and Details\n\nHere's the readme we would like to include.\r\n"},{"Id":"35052590507","Type":"IssuesEvent","CreatedAt":"2024-01-23T14:39:38","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9784","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Number of downloads changes among web and mobile.\" (#9784) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nOn last view, I realized number of downloads don't change on web view and I was suspecting if there is a problem through data. Then I checked, new versions of packages' download count and check mobile view to see same result. Interestingly, mobile view show correct number of downloads while web view doesn't.\n\n### Repro Steps\n\n1. Open URL on web view. https://www.nuget.org/profiles/Okullu\r\n2. Open URL on mobile view. https://www.nuget.org/profiles/Okullu\n\n### Expected Behavior\n\nSame number of downloads on both usage of same web site.\n\n### Screenshots\n\nMobile view:\r\n![photo_2024-01-23_17-36-22](https://github.com/NuGet/NuGetGallery/assets/4971757/cd22f130-df9e-410c-b74a-ad176073bbd1)\r\n\r\nWeb view: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/f30d0759-dee5-4b32-ac6e-f86a48ee1a07)\r\n\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35043127333","Type":"IssuesEvent","CreatedAt":"2024-01-23T09:35:13","Actor":"gimbling-away","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9769","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Unable to access api.nuget.org using the .NET SDK, but can access it using curl or Firefox.\" (#9769) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nWhen I do `dotnet restore`, it times out while fetching https://api.nuget.org/v3/index.json but I can access it using curl or open it in Firefox.\r\n\r\nNote: I honestly have no idea whether this is a .NET SDK bug or a NuGet.org problem. The original issue at `dotnet/sdk` for this is https://github.com/dotnet/sdk/issues/37673. I did see similar issues regarding connectivity to the API in this repo, so felt this should be the place. I apologize if this is the wrong place. ðŸ˜…\n\n### Repro Steps\n\n- Open any .NET project\r\n- Run `dotnet restore`\r\n\n\n### Expected Behavior\n\nNot time out\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/93856041/e3249471-68e1-4a0a-9922-61feca67d1e4)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35001640250","Type":"IssuesEvent","CreatedAt":"2024-01-22T04:09:07","Actor":"SimonCropp","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9783","RelatedDescription":"Opened issue \"Given fuget is always down should it be rmoved as a link from the gallery?\" (#9783) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"35063176708","Type":"IssuesEvent","CreatedAt":"2024-01-23T20:36:25","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13186","RelatedDescription":"Opened issue \"Owner package metadata is an array in JSON but a string in Protocol types\" (#13186) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nOther/NA\n\n### Current Behavior\n\nOwner metadata is provided as an array, but Protocol immediately converts this to a comma-delmited string upon parsing the data.\n\n### Desired Behavior\n\nPreserve the array of owners so that the enumeration can be used by NuGet Client.\n\n### Additional Context\n\n_No response_"},{"Id":"35061356954","Type":"IssuesEvent","CreatedAt":"2024-01-23T19:21:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13185","RelatedDescription":"Opened issue \"ExecuteNuGetProjectActionsAsync_MultipleBuildIntegratedProjects is a buggy test\" (#13185) at NuGet/Home","RelatedBody":""},{"Id":"35059883631","Type":"IssuesEvent","CreatedAt":"2024-01-23T18:26:05","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13181","RelatedDescription":"Closed issue \"Unable to use GlobalPackageReference with Directory.Packages.Props and CPM disabled\" (#13181) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe, Visual Studio Package Management UI, NuGet SDK\r\n\r\n### Product Version\r\n\r\nNuGet Version: 5.8.1.7021, .NET SDK (8.0.101)\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nSubject: Issue with Central Package Management and Transitive Pinning in Mono Repo Migration\r\n\r\n### Description\r\n\r\nWe are currently in the process of migrating our solutions within a mono repo to utilize Central Package Management (CPM) along with Transitive Pinning. The current setup involves a mono repo structure with a common `Packages.props` file and multiple solutions within the \"Solutions\" directory. The solutions rely on a `GlobalPackageReference` defined in the common `Packages.props` file.\r\n\r\nThe migration plan involves moving solutions one by one and updating the package management configuration. For instance, when migrating \"Solution1,\" the new structure would be as follows:\r\n\r\n```\r\nRepository\r\n|-- Solutions\r\n|   |-- Directory.Packages.Props    (Common Central Package Management configuration with transitive pinned packages (PackageVersion and GlobalPackageReference)\r\n|   |-- Solution1\r\n|       |-- Directory.Packages.Props (Solution-specific configuration:<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>, <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>,<Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n|   |-- Solution2 (to be migrated later)\r\n|       |-- Directory.Packages.Props (Solution-specific configuration: <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>, <Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n|   |-- Solution3 (to be migrated later)\r\n|       |-- Directory.Packages.Props (Solution-specific configuration: <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>, <Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n```\r\n\r\nThe issue arises when attempting to use the same `Directory.Packages.Props` file for both CPM-enabled and CPM-disabled solutions. Solutions with `ManagePackageVersionsCentrally` set as true can successfully retrieve the `GlobalPackageReference` from the parent `Directory.Packages.Props` file. However, solutions with `ManagePackageVersionsCentrally` set as false are unable to access these packages from the parent file.\r\n\r\n**Previously, we had a `Packages.props` file in the root of our repository, but eve after adding `Directory.Packages.props` to the service, it would read the `PropertyGroup` tag from `Directory.Packages.props` inside the solution, but read the `ItemGroup` tag from `Properties.props` which is the most weird behavior** \r\n### Expected Behavior\r\n\r\nIdeally, we would like to have a single `Directory.Packages.Props` file that accommodates both CPM-enabled and CPM-disabled solutions, ensuring that all solutions can access the necessary packages.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Migrate a solution to use Central Package Management with Transitive Pinning.\r\n2. Ensure that the `Directory.Packages.Props` file for the migrated solution includes `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` and `<CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>`.\r\n3. Migrate another solution, but set `ManagePackageVersionsCentrally` to false for this solution.\r\n4. Observe that Solution2 is unable to retrieve the necessary packages from the parent Directory.Packages.Props file.\r\n\r\nIf there is a workaround or solution to enable the use of the same file for both CPM-enabled and CPM-disabled solutions, please provide guidance.\r\n\r\nThank you for your assistance in resolving this issue.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"35057972630","Type":"IssuesEvent","CreatedAt":"2024-01-23T17:17:48","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13184","RelatedDescription":"Opened issue \"LibraryDependency creates a collection that is mostly empty\" (#13184) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe `LibraryDependency` creates a list for warnings but in a lot of code paths it ends up being empty so there's no need to allocate the list and instead it could be an empty singleton.\n\nhttps://github.com/NuGet/NuGet.Client/blob/a6fff16af6f44927a83851448a99beb1d2801600/src/NuGet.Core/NuGet.LibraryModel/LibraryDependency.cs#L22\n\nOriginally reported internally: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1826369\n\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"35057708575","Type":"IssuesEvent","CreatedAt":"2024-01-23T17:09:03","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13183","RelatedDescription":"Opened issue \"PackageSpecWriter should write out original string for versions instead of allocating a new one (1.4% of high-GC sessions, 152 MB/s at worst)\" (#13183) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe `SetCentralDependencies` method writes out the PackageVersion items to the `project.assets.json` and uses the normalized version.  This section is only read by our reader which parses it again during read so there's no need to allocate another string and instead should just write out the original string.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/PackageSpecWriter.cs#L668\n\nOriginally reported internally: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1828422\n\n### Verbose Logs\n\n_No response_"},{"Id":"35056839184","Type":"IssuesEvent","CreatedAt":"2024-01-23T16:41:49","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13182","RelatedDescription":"Opened issue \"SetCentralDependencies is calling OrderBy without specifying comparison defaulting to cultural-sensitive compare\" (#13182) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe `SetCentralDependencies` method writes the PackageVersion items to the `project.assets.json`.  It sorts the list but doesn't specify a string comparer which defaults to a culture-sensitive comparer.  This leads to wasted CPU time.  Instead, it should specify `StringComparer.OrdinalIgnoreCase` since the list is already de-duplicated.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/PackageSpecWriter.cs#L666\n\n### Verbose Logs\n\n_No response_"},{"Id":"35052859246","Type":"IssuesEvent","CreatedAt":"2024-01-23T14:47:18","Actor":"ashafique2","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13181","RelatedDescription":"Opened issue \"Unable to use GlobalPackageReference with Directory.Packages.Props and CPM disabled\" (#13181) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe, Visual Studio Package Management UI, NuGet SDK\n\n### Product Version\n\nNuGet Version: 5.8.1.7021, .NET SDK (8.0.101)\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nSubject: Issue with Central Package Management and Transitive Pinning in Mono Repo Migration\r\n\r\n### Description\r\n\r\nWe are currently in the process of migrating our solutions within a mono repo to utilize Central Package Management (CPM) along with Transitive Pinning. The current setup involves a mono repo structure with a common `Packages.props` file and multiple solutions within the \"Solutions\" directory. The solutions rely on a `GlobalPackageReference` defined in the common `Packages.props` file.\r\n\r\nThe migration plan involves moving solutions one by one and updating the package management configuration. For instance, when migrating \"Solution1,\" the new structure would be as follows:\r\n\r\n```\r\nRepository\r\n|-- Solutions\r\n|   |-- Directory.Packages.Props    (Common Central Package Management configuration)\r\n|   |-- Solution1\r\n|       |-- Directory.Packages.Props (Solution-specific configuration: : <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>, <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>,<Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n|   |-- Solution2 (to be migrated later)\r\n|       |-- Directory.Packages.Props (Solution-specific configuration: <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>, <Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n|   |-- Solution3 (to be migrated later)\r\n|       |-- Directory.Packages.Props (Solution-specific configuration: <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>, <Import Project=\"$([MSBuild]::GetPathOfFileAbove('Directory.Packages.props', '$(MSBuildThisFileDirectory)..\\'))\" />)\r\n```\r\n\r\nThe issue arises when attempting to use the same `Directory.Packages.Props` file for both CPM-enabled and CPM-disabled solutions. Solutions with `ManagePackageVersionsCentrally` set as true can successfully retrieve the `GlobalPackageReference` from the parent `Directory.Packages.Props` file. However, solutions with `ManagePackageVersionsCentrally` set as false are unable to access these packages from the parent file.\r\n\r\n### Expected Behavior\r\n\r\nIdeally, we would like to have a single `Directory.Packages.Props` file that accommodates both CPM-enabled and CPM-disabled solutions, ensuring that all solutions can access the necessary packages.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Migrate a solution to use Central Package Management with Transitive Pinning.\r\n2. Ensure that the `Directory.Packages.Props` file for the migrated solution includes `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` and `<CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>`.\r\n3. Migrate another solution, but set `ManagePackageVersionsCentrally` to false for this solution.\r\n4. Observe that Solution2 is unable to retrieve the necessary packages from the parent Directory.Packages.Props file.\r\n\r\nIf there is a workaround or solution to enable the use of the same file for both CPM-enabled and CPM-disabled solutions, please provide guidance.\r\n\r\nThank you for your assistance in resolving this issue.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35033592987","Type":"IssuesEvent","CreatedAt":"2024-01-23T01:13:57","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13180","RelatedDescription":"Opened issue \"`BuildAssetsUtilsTests` tests shouldn't depend on host machine envvars\" (#13180) at NuGet/Home","RelatedBody":"On my Windows machine, I have envvar `NUGET_PACKAGES` set. This should not be causing a test to fail.\r\n\r\n>      Assert.Equal() Failure\r\n>             Î“Ã¥Ã´ (pos 0)\r\n>   Expected: $(UserProfile)\\.nuget\\packages\\\r\n>   Actual:   C:\\.tools\\\r\n>             Î“Ã¥Ã¦ (pos 0)\r\n>     Stack Trace:\r\n>        at NuGet.Commands.Test.BuildAssetsUtilsTests.BuildAssetsUtils_ReplaceWithUserProfileMacro() in C:\\NuGet.Client\\test\\NuGet.Core.Tests\\NuGet.Commands.Test\\BuildAssetsUtilsTests.cs:line 209\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/c6ac0757eb928b9d62bfd608608f4ddda1fc6d74/test/NuGet.Core.Tests/NuGet.Commands.Test/BuildAssetsUtilsTests.cs#L203"},{"Id":"35033323986","Type":"IssuesEvent","CreatedAt":"2024-01-23T00:56:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13179","RelatedDescription":"Opened issue \"Address nullability suppressions in NuGet.VisualStudio.Internal.Contracts\" (#13179) at NuGet/Home","RelatedBody":"See: https://github.com/NuGet/NuGet.Client/pull/5582#discussion_r1460633179"},{"Id":"35030330082","Type":"PullRequestEvent","CreatedAt":"2024-01-22T22:08:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13176","RelatedDescription":"Merged pull request \"Delete accepted/2023/image.png\" (#13176) at NuGet/Home","RelatedBody":"I must have mistakenly dropped this file in to the parent directory. It doesn't appear to be used, so just deleting the image."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us atâ€¯[support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-24T03:30:19.4377395Z","RunDurationInMilliseconds":1032}