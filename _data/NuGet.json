{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34323848520","Type":"PullRequestEvent","CreatedAt":"2023-12-20T22:54:28","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9766","RelatedDescription":"Merged pull request \"[2023.12.20]RI of dev into main\" (#9766) at NuGet/NuGetGallery","RelatedBody":"This RI is necessary to update main to match an internal build script update."},{"Id":"34323010716","Type":"PullRequestEvent","CreatedAt":"2023-12-20T22:02:04","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9766","RelatedDescription":"Opened pull request \"[20923.12.20]RI of dev into main\" (#9766) at NuGet/NuGetGallery","RelatedBody":"This RI is necessary to update main to match an internal build script update."},{"Id":"34321890112","Type":"PullRequestEvent","CreatedAt":"2023-12-20T21:00:26","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9740","RelatedDescription":"Merged pull request \"[Vulnerabilities]Adding new Job for updating v3 Vulnerabilities files.\" (#9740) at NuGet/NuGetGallery","RelatedBody":"This is the first proposal for a new job to automatically update the v3 Vulnerability files.\r\nThis should implement the design indicated at https://github.com/NuGet/Engineering/pull/4940\r\n\r\nMuch of the mechanics of pulling from GitHub are tested in the GitHubVulnerabilities2Db.Facts project.\r\n\r\nThe primary work is done in the FlushAsync method starting at line 53 of src/GitHubVulnerabilities2v3/Extensions/BlobStorageVulnerabilityWriter.cs\r\n\r\nSummary of intended flow:\r\n1. Read the date in the cursor and determine if the run is an update run or a full regeneration run\r\n2. Query GitHub and collect vulnerabilities starting at the date in the cursor and running up to now.\r\n3. For regeneration run, update index.json, base.json, and push an empty update.json. Update cursor to now.\r\n4. For update run, Check the special case\r\n5. The special case is when we see the same vulnerability URL in the update that already exists in base. For this case, we skip this update and regenerate on the next run.\r\n6. Otherwise, update the update.json and index.json. Cursor should NOT be changed."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34326557397","Type":"IssuesEvent","CreatedAt":"2023-12-21T02:32:57","Actor":"xiaoshiyi123","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13101","RelatedDescription":"Opened issue \"Do not use an exact version, but cause NU1106.\" (#13101) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK:  Version:   7.0.404  Commit:    22f221a24c\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI created a project and referenced two packages.\r\n```\r\n<ItemGroup>\r\n\t<PackageReference Include=\"Microsoft.Management.Services.CloudPC.Reporting.Extensions\" Version=\"2.1.0\"/>\r\n\t<PackageReference Include=\"Microsoft.CloudManagedDesktop.ReliabilityCommon.Core.Function\" Version=\"1.0.2537.81\"/>\r\n</ItemGroup>\r\n```\r\nThese two packages depend on some same packages but not the same version.\r\n![image](https://github.com/NuGet/Home/assets/36906182/93ee8d86-45d4-4f89-881f-f76f208d079b)\r\n\r\n**What I expected:**\r\nAs documents mentioned, [lowest applicable version](https://learn.microsoft.com/en-us/nuget/concepts/dependency-resolution#lowest-applicable-version) rule will applied and version 5.1.8 can be chosen.\r\n\r\n**What I got:**\r\n`Unable to satisfy conflicting requests for 'Microsoft.CloudManagedDesktop.Core.Flighting': Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.1.8) (via package/Microsoft.CloudManagedDesktop.ReliabilityCommon.Core.Function 1.0.2537.81), Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.0.6) (via package/Microsoft.Management.Services.CloudPC.Reporting.Client 2.1.0), Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.0.6) (via package/Microsoft.Management.Services.CloudPC.AzureWrappers 5.0.6) Framework: (.NETCoreApp,Version=v6.0)`\r\n\r\nI know how to fix it, just apply [direct-dependency-wins](https://learn.microsoft.com/en-us/nuget/concepts/dependency-resolution#direct-dependency-wins) rule, but I do not understand why this error happened.\r\n![image](https://github.com/NuGet/Home/assets/36906182/6f4c9e34-7028-4455-9fd3-633586bcec1d)\r\n\r\nCan you help me answer this question? If necessary, please correct this erroneous statement and update this case in the documentation. Thank you.\r\n\n\n### Verbose Logs\n\n```shell\nDetails can be found in [project.assets.json](http://home.xiaoshiyi.online:177/kodbox/?explorer/share/fileOut&shareID=99ZiI39A&path=%7BshareItemLink%3A99ZiI39A%7D%2F&name=/project.assets.json&download=1)\n```\n"},{"Id":"34318065238","Type":"IssuesEvent","CreatedAt":"2023-12-20T17:53:29","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12456","RelatedDescription":"Closed issue \"dotnet list package --vulnerable requires constant login to 3rd party nuget feed\" (#12456) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK  7.0.200\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOn calling `dotnet list package --interactive --vulnerable` I have to constantly sign in via the web browser for an internal nuget feed.\r\n\r\nWithout the `--vulnerable` switch it seems to use my cached login and I don't even need to login once.\r\n\r\nExpected behavior:\r\n\r\nI would expect to login at most once for the command to finish.\r\n\r\nLog Output:\r\n[log.txt](https://github.com/NuGet/Home/files/10848428/log.txt)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34317792917","Type":"IssuesEvent","CreatedAt":"2023-12-20T17:40:53","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12540","RelatedDescription":"Closed issue \"NuGet.Build.Tasks caches CredentialProvider device flow timeout.\" (#12540) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nMSBuild.exe\r\n\r\n### Product Version\r\n\r\nNuget 6.5.0.149 (does not seems to be fixed in recent code yet)\r\n\r\n### Worked before?\r\n\r\nunknown\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nWe are working on MSBuild server which is concept of long running process which will execute consequent builds so it can effectively reuse memory caches between builds.  People were reporting intermittent inability to use interactive restore.\r\n\r\n### Analysis\r\nRoot cause: Task caches result of timeouted CredentialProvider device flow. Consequent runs do not call CredentialProvider and use cached failure value.\r\n\r\nCache is rooted by: https://github.com/NuGet/NuGet.Client/blob/3a0c9a47e24642bb4a4465dec7b4d1c379367855/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpHandlerResourceV3.cs#L40\r\n\r\nResult is \"wrongly\" identified as cacheable at line nr 125 bellow:\r\nhttps://github.com/NuGet/NuGet.Client/blob/3a0c9a47e24642bb4a4465dec7b4d1c379367855/src/NuGet.Core/NuGet.Credentials/CredentialService.cs#L106-L129\r\n\r\nThere also seems to to be related bug in CredetionProvider which causes null exception as can be seen in log bellow.\r\nhttps://github.com/microsoft/artifacts-credprovider/blob/e19f61d6c0697a73fb6b08cd3c9c687f9aa97d36/CredentialProvider.Microsoft/CredentialProviders/Vsts/AdalTokenProvider.cs#L46-L59\r\nConstructor on line 59 fails on null exception when it timeouted because it will pass in null as argument.\r\n\r\n### Repro steps\r\nIt is hard to repro with existing MSBuild as it has some workarounds around this bug.\r\nI do not believe repro is necessary, log and analysis seem to be enough to understand root cause of this bug.\r\nHowever if I would need to repro it I would:\r\n\r\n- prepare project which needs interactive restore\r\n- create console app and link it with msbuild.dll\r\n- in that console app hardcore it to build given project twice\r\n- let first project build timeout on sing in requests\r\n- observe second build to fail without sign in prompt\r\n\r\nIf repro is really needed please ping me and I can help with building it or testing it.\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\nBellow is related part from msbuild binlog. I believe it is giving us enough context and it validates above analysis:\r\n\r\nRestoreTask\r\n    Assembly = E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.dll\r\n    Parameters\r\n        RestoreRecursive = True\r\n        HideWarningsAndErrors = False\r\n        Interactive = True\r\n        RestoreGraphItems\r\n            89980f99-15df-4772-8794-ae61c4040b7c\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Type = RestoreSpec\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n            a7b10e3c-a242-45e1-9a8a-7cd9788b5806\r\n                SkipContentFileWrite = \r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                FallbackFolders = C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\r\n                NuGetLockFilePath = \r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                RestoreLockedMode = \r\n                Sources = https://api.nuget.org/v3/index.json;https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json;C:\\Program Files\\dotnet\\library-packs\r\n                Type = ProjectSpec\r\n                Version = 1.0.0\r\n                _CentralPackageVersionsEnabled = \r\n                ValidateRuntimeAssets = false\r\n                CrossTargeting = \r\n                WarningsAsErrors = ;NU1605;SYSLIB0011\r\n                RestorePackagesWithLockFile = \r\n                RestoreLegacyPackagesDirectory = \r\n                ProjectStyle = PackageReference\r\n                RuntimeSupports = \r\n                TreatWarningsAsErrors = false\r\n                RuntimeIdentifiers = ;win-x64\r\n                WarningsNotAsErrors = \r\n                NoWarn = 1701;1702;IL2121\r\n                CentralPackageTransitivePinningEnabled = \r\n                OutputPath = E:\\dev-tmp\\testme\\obj\\\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                ProjectPath = E:\\dev-tmp\\testme\\testme.csproj\r\n                CentralPackageVersionOverrideEnabled = \r\n                ProjectName = testme\r\n                PackagesPath = E:\\NugetCache\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n                ConfigFilePaths = E:\\dev-tmp\\testme\\NuGet.Config;C:\\Users\\rokon\\AppData\\Roaming\\NuGet\\NuGet.Config;C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config;C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n            e03d5822-4e87-4b9a-a152-87a2f333388b\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Id = AutoMapper\r\n                Type = Dependency\r\n                TargetFrameworks = net7.0\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n                VersionRange = 12.0.1-internal\r\n            8d872925-d5bd-4302-98b5-efc38531415c\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Id = Microsoft.NETCore.App.Runtime.win-x64\r\n                Type = DownloadDependency\r\n                TargetFrameworks = net7.0\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n                VersionRange = [7.0.4]\r\n            a581f697-aa82-448b-a2cb-0f01094a052b\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Id = Microsoft.WindowsDesktop.App.Runtime.win-x64\r\n                Type = DownloadDependency\r\n                TargetFrameworks = net7.0\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n                VersionRange = [7.0.4]\r\n            91bd029f-4c9f-4b40-b3d6-932225623961\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Id = Microsoft.AspNetCore.App.Runtime.win-x64\r\n                Type = DownloadDependency\r\n                TargetFrameworks = net7.0\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n                VersionRange = [7.0.4]\r\n            d9b10af3-489e-4d5a-a97c-3630d09daf6b\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                Id = Microsoft.NETCore.App\r\n                Type = FrameworkReference\r\n                TargetFrameworks = net7.0\r\n                PrivateAssets = All\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n            915d08f7-e433-42e0-a656-3bb8c6ac8301\r\n                MSBuildSourceProjectFile = E:\\dev-tmp\\testme\\testme.csproj\r\n                TargetFrameworkProfile = \r\n                TargetFramework = net7.0\r\n                TargetFrameworkIdentifier = .NETCoreApp\r\n                ProjectUniqueName = E:\\dev-tmp\\testme\\testme.csproj\r\n                AssetTargetFallback = ;net461;net462;net47;net471;net472;net48;net481\r\n                PackageTargetFallback = \r\n                Type = TargetFrameworkInformation\r\n                TargetPlatformVersion = \r\n                TargetPlatformMoniker = \r\n                TargetFrameworkMoniker = .NETCoreApp,Version=v7.0\r\n                MSBuildSourceTargetName = _IsProjectRestoreSupported\r\n                RuntimeIdentifierGraphPath = C:\\Program Files\\dotnet\\sdk\\7.0.202\\RuntimeIdentifierGraph.json\r\n                CLRSupport = \r\n                TargetPlatformIdentifier = \r\n                TargetFrameworkVersion = v7.0\r\n                TargetPlatformMinVersion = \r\n                OriginalItemSpec = E:\\dev-tmp\\testme\\testme.csproj\r\n    (in) RestoreGraphItems Count '8'\r\n    (in) RestoreDisableParallel 'False'\r\n    (in) RestoreNoCache 'False'\r\n    (in) RestoreIgnoreFailedSources 'False'\r\n    (in) RestoreRecursive 'True'\r\n    (in) RestoreForce 'False'\r\n    (in) HideWarningsAndErrors 'False'\r\n    (in) RestoreForceEvaluate 'False'\r\n    (in) RestorePackagesConfig 'False'\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.Packaging, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Packaging.dll, MVID: 4682e763-f450-447f-93b4-5dfc8ab16e13, AppDomain: [Default])\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.LibraryModel, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.LibraryModel.dll, MVID: bbcf1ffb-8b16-4c3c-a4db-e6730ea0b62d, AppDomain: [Default])\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.Protocol, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Protocol.dll, MVID: 942c272f-5083-46e2-b29d-da0f828a8326, AppDomain: [Default])\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.Credentials, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Credentials.dll, MVID: 6953f29b-c883-4d0c-b809-46e2cc1d14f0, AppDomain: [Default])\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.PackageManagement, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.PackageManagement.dll, MVID: a090fa76-1ca0-4832-bd5a-af4375e13f8f, AppDomain: [Default])\r\n    X.509 certificate chain validation will use the default trust store selected by .NET.\r\n    X.509 certificate chain validation will use the default trust store selected by .NET.\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): NuGet.DependencyResolver.Core, Version=6.5.0.149, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.DependencyResolver.Core.dll, MVID: 4741d55d-6810-4900-ac9d-f4cce6ed0c09, AppDomain: [Default])\r\n    Running restore with 24 concurrent jobs.\r\n    Reading project file\r\n        Reading project file E:\\dev-tmp\\testme\\testme.csproj.\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 (location: C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime.Serialization\\v4.0_4.0.0.0__b77a5c561934e089\\System.Runtime.Serialization.dll, MVID: e0272679-dd10-40b0-adef-29cb5a2d4ab0, AppDomain: [Default])\r\n    The restore inputs for 'testme' have changed. Continuing restore.\r\n    Restoring packages for\r\n        Restoring packages for E:\\dev-tmp\\testme\\testme.csproj...\r\n        Restoring packages for .NETCoreApp,Version=v7.0...\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Net.Http\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Net.Http.dll, MVID: 16bc693b-b84a-493b-8a40-c4959d218321, AppDomain: [Default])\r\n    Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 (location: C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll, MVID: 46b0a213-4517-4c10-8daa-3339b363ef3b, AppDomain: [Default])\r\n    GET\r\n          GET https://api.nuget.org/v3-flatcontainer/automapper/index.json\r\n    Using C:\\Users\\rokon\\.nuget\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe as a credential provider plugin.\r\n    OK\r\n          OK https://api.nuget.org/v3-flatcontainer/automapper/index.json 126ms\r\n        [CredentialProvider.103634]Running in plug-in mode\r\n        [CredentialProvider.103634]Command-line v0.1.25+cb125622a8f121aadf3e82f315b06fdb42198585: \"C:\\Users\\rokon\\.nuget\\plugins\\netfx\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe\" -Plugin\r\n        [CredentialProvider.103635]Handling 'Request' 'Initialize'. Time elapsed in ms: 1 - Payload: {\"ClientVersion\":\"6.5.0\",\"Culture\":\"en-US\",\"RequestTimeout\":\"00:00:30\"}\r\n        [CredentialProvider.103635]Sending response: 'Request' 'Initialize'. Time elapsed in ms: 1\r\n        [CredentialProvider.103635]Time elapsed in milliseconds after sending response 'Request' 'Initialize': 1\r\n        [CredentialProvider.103635]Handling 'Request' 'GetOperationClaims'. Time elapsed in ms: 0 - Payload: {}\r\n        [CredentialProvider.103635]Sending response: 'Request' 'GetOperationClaims'. Time elapsed in ms: 4\r\n        [CredentialProvider.103635]Time elapsed in milliseconds after sending response 'Request' 'GetOperationClaims': 6\r\n        [CredentialProvider.103635]Handling 'Request' 'SetLogLevel'. Time elapsed in ms: 0 - Payload: {\"LogLevel\":\"Debug\"}\r\n        [CredentialProvider]Sending response: 'Request' 'SetLogLevel'. Time elapsed in ms: 1\r\n        [CredentialProvider]Time elapsed in milliseconds after sending response 'Request' 'SetLogLevel': 3\r\n        [CredentialProvider]Handling 'Request' 'GetAuthenticationCredentials'. Time elapsed in ms: 1 - Payload: {\"Uri\":\"https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\",\"IsRetry\":false,\"IsNonInteractive\":false,\"CanShowDialog\":false}\r\n        [CredentialProvider]Creating a progress reporter with interval: 00:00:02\r\n        [CredentialProvider]Handling auth request, Uri: https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json, IsRetry: False, IsNonInteractive: False, CanShowDialog: False\r\n        [CredentialProvider]URI: https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]VstsBuildTaskServiceEndpointCredentialProvider - This credential provider must be run under the Team Build tasks for NuGet with external endpoint credentials. Appropriate environment variable needs to be set.\r\n        [CredentialProvider]Skipping NuGetCredentialProvider.CredentialProviders.VstsBuildTaskServiceEndpoint.VstsBuildTaskServiceEndpointCredentialProvider, cannot provide credentials for https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]VstsBuildTaskCredentialProvider - This credential provider must be run under the Team Build tasks for NuGet. Appropriate environment variables must be set.\r\n        [CredentialProvider]Skipping NuGetCredentialProvider.CredentialProviders.VstsBuildTask.VstsBuildTaskCredentialProvider, cannot provide credentials for https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]GET https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]VstsCredentialProvider - Detected a hosted Azure DevOps Service.\r\n        [CredentialProvider]Using NuGetCredentialProvider.CredentialProviders.Vsts.VstsCredentialProvider to try to get credentials for https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json.\r\n        [CredentialProvider]IsRetry: False\r\n        [CredentialProvider]Could not find cached SessionToken for https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]GET https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]Found AAD Authority from 401 headers: https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47\r\n        [CredentialProvider]VstsCredentialProvider - Using AAD authority: https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47\r\n        [CredentialProvider]VstsCredentialProvider - Attempting to acquire bearer token using provider 'ADAL Cache'\r\n        [CredentialProvider]VstsCredentialProvider - Bearer token provider 'ADAL Cache' didn't acquire a token\r\n        [CredentialProvider]VstsCredentialProvider - Attempting to acquire bearer token using provider 'ADAL Windows Integrated Authentication'\r\n        [CredentialProvider]VstsCredentialProvider - Bearer token provider 'ADAL Windows Integrated Authentication' didn't acquire a token\r\n        [CredentialProvider]VstsCredentialProvider - Not running bearer token provider 'ADAL UI'\r\n        [CredentialProvider]VstsCredentialProvider - Attempting to acquire bearer token using provider 'ADAL Device Code'\r\n        [CredentialProvider]DeviceFlow: https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]ATTENTION: User interaction required. \r\n\r\n    **********************************************************************\r\n\r\n    To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code C2YA83482 to authenticate.\r\n\r\n    **********************************************************************\r\n\r\n    Errors\r\n        E:\\dev\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(132,5):     [CredentialProvider]Device flow authentication failed. User was presented with device flow, but didn't react within 90 seconds. [E:\\dev-tmp\\testme\\testme.csproj]\r\n        E:\\dev-tmp\\testme\\testme.csproj error NU1301: Unable to load the service index for source https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json. [E:\\dev-tmp\\testme\\testme.csproj]\r\n        [CredentialProvider]VstsCredentialProvider - Bearer token provider 'ADAL Device Code' failed with exception:\\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NuGetCredentialProvider.CredentialProviders.Vsts.AdalTokenProvider.<AcquireTokenWithDeviceFlowAsync>d__6.MoveNext() in E:\\A\\_work\\998\\s\\CredentialProvider.Microsoft\\CredentialProviders\\Vsts\\AdalTokenProvider.cs:line 59\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGetCredentialProvider.CredentialProviders.Vsts.DeviceCodeFlowBearerTokenProvider.<GetTokenAsync>d__9.MoveNext() in E:\\A\\_work\\998\\s\\CredentialProvider.Microsoft\\CredentialProviders\\Vsts\\BearerTokenProviders.cs:line 122\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGetCredentialProvider.CredentialProviders.Vsts.VstsCredentialProvider.<HandleRequestAsync>d__8.MoveNext() in E:\\A\\_work\\998\\s\\CredentialProvider.Microsoft\\CredentialProviders\\Vsts\\VstsCredentialProvider.cs:line 117\r\n        [CredentialProvider]VstsCredentialProvider - Could not obtain credentials for https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        [CredentialProvider]Unable to acquire credentials.\r\n        [CredentialProvider]Sending response: 'Request' 'GetAuthenticationCredentials'. Time elapsed in ms: 91130\r\n        [CredentialProvider]Time elapsed in milliseconds after sending response 'Request' 'GetAuthenticationCredentials': 91131\r\n    Assets file\r\n        Writing assets file to disk. Path: E:\\dev-tmp\\testme\\obj\\project.assets.json\r\n    Cache file\r\n        Writing cache file to disk. Path: E:\\dev-tmp\\testme\\obj\\project.nuget.cache\r\n    dg file\r\n        Persisting dg to E:\\dev-tmp\\testme\\obj\\testme.csproj.nuget.dgspec.json\r\n    Failed to restore E:\\dev-tmp\\testme\\testme.csproj (in 1.65 min).\r\n    NuGet Config files used:\r\n        E:\\dev-tmp\\testme\\NuGet.Config\r\n        C:\\Users\\rokon\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n        C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config\r\n        C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n    Feeds used:\r\n        https://api.nuget.org/v3/index.json\r\n        https://pkgs.dev.azure.com/dnceng/internal/_packaging/7.0.100-rc.1.22429.3-shipping/nuget/v3/index.json\r\n        C:\\Program Files\\dotnet\\library-packs\r\n```\r\n"},{"Id":"34309955957","Type":"IssuesEvent","CreatedAt":"2023-12-20T13:00:33","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13009","RelatedDescription":"Closed issue \"Enable dotnet add package with CPM\" (#13009) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n7.0.402\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nIf I use CPM to control package versions I'm unable to add a package with this command\r\n\r\n`dotnet add package Testcontainers.MsSql`\r\n\r\n> error: Projects that use central package version management should not define the version on the PackageReference items but on the PackageVersion items: Microsoft.NET.Test.Sdk;NUnit;NUnit.Analyzers;NUnit3TestAdapter;coverlet.collector\r\n\r\nI expect to still be able to add a package.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"34303729733","Type":"IssuesEvent","CreatedAt":"2023-12-20T09:03:52","Actor":"koma-tompit","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13100","RelatedDescription":"Opened issue \"Installation path differs from install path when using PackagePathResolver in .NET 8\" (#13100) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Packaging: 6.8.0.131, Dotnet info: Host:   Version:      8.0.0   Architecture: x64   Commit:       5535e31a71   RID:          linux-x64  .NET SDKs installed:   No SDKs were found.  .NET runtimes installed:   Microsoft.AspNetCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]   Microsoft.NETCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App] \n\n### Worked before?\n\nWorks fine with .NET 7.0.14\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nRelevant code:\r\n\r\n```\r\nvar packageExtractionContext = new PackageExtractionContext(PackageSaveMode.Defaultv3, XmlDocFileSaveMode.None, null, Logger);\r\nvar frameworkReducer = new FrameworkReducer();\r\nvar result = new PackageDescriptor();\r\nIEnumerable<SourcePackageDependencyInfo> packages = new List<SourcePackageDependencyInfo>(); //Is actually a function parameter, filled with dependencies\r\nvar RootPath = \"/home/user/packages/\";\r\n\r\nforeach (var installer in packages)\r\n{\r\n  PackageReaderBase packageReader;\r\n\r\n  var installedPath = PathResolver.GetInstalledPath(installer);\r\n  \r\n  if (string.IsNullOrEmpty(installedPath)) //In this case, always returns null, as packages are not installed\r\n  {\r\n    var downloadResource = await installer.Source.GetResourceAsync<DownloadResource>(CancellationToken.None);\r\n    var downloadResult = await downloadResource.GetDownloadResourceResultAsync(installer, new PackageDownloadContext(CacheContext), RootDirectory, Logger, CancellationToken.None);\r\n  \r\n    packageReader = downloadResult.PackageReader;\r\n  }\r\n  else\r\n    packageReader = new PackageFolderReader(installedPath);\r\n  \r\n  //PathResolver.GetInstallPath(installer) returns a path I cannot access at the moment, for example /home/user/packages/Newtonsoft.Json/3.0.5/\r\n  //The actual path on the drive is /home/user/packages/newtonsoft.json/3.0.5/\r\n  var folder = Path.Combine(PathResolver.GetInstallPath(installer), installer.Version.ToString());\r\n  //The code then proceeds to extract dlls by using the folder and some other parameters. As the folder is invalid, the application crashes\r\n}\r\n```\r\n\r\nI made a workaround for this in our resolver, where I replace the package id in the path with a lowercase version, which temporarily resolved the issue when using packages to compile c# scripts in runtime.\r\n\r\nThe problem is the Razor view resolver, which is out of reach of modification and complains of the same error:\r\n\r\nCannot find compilation library location for package 'System.Security.Cryptography.Pkcs' at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies) at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths() ...\r\n\r\nThis happens when compiling a razor view at runtime which is dependant on a NuGet package.\r\n\r\nWhat I find strange is that this appears to work under Windows and a WSL2 Debian installation, and in docker using mcr.microsoft.com/dotnet/aspnetcore:7.0, but consistently crashes in docker, using the mcr.microsoft.com/dotnet/aspnetcore:8.0 image. The only difference there being the project sdk versions, so one built with .NET 7 and the latter, crashing one, with .NET 8.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34299900958","Type":"IssuesEvent","CreatedAt":"2023-12-20T05:53:10","Actor":"bhaeussermann","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13099","RelatedDescription":"Opened issue \"Packages can't be retrieved from restored packages folders due to unexpected letter casing in nuspec file\" (#13099) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Commands package version 6.8.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI need to restore NuGet packages to folders via a Linux Docker container (of a Docker image `nuget-restore`) and include these folders in a second Docker image `nuget-get-packages` in order to load the packages from within a container of this image.\r\n\r\nHowever, the casing of the restored nuspec file differs from what is expected by the `LocalFolderUtility.GetPackagesV3()` method and so the package is not loaded by that method.\r\n\r\nWhen I perform either the package restore or get-packages operation directly on my Windows PC then getting the packages from the folders works fine (presumably due to file paths being case-insensitive in Windows). Therefore, the minimal reproduction of this issue for me is to perform both operations via Docker containers (I have Docker Desktop installed which is set to use Linux containers).\r\n\r\nHere's my program for the first Docker image `nuget-restore`:\r\n\r\n```\r\nusing NuGet.Commands;\r\nusing NuGet.Common;\r\nusing NuGet.Configuration;\r\nusing NuGet.Frameworks;\r\nusing NuGet.LibraryModel;\r\nusing NuGet.Packaging;\r\nusing NuGet.Packaging.Core;\r\nusing NuGet.ProjectModel;\r\nusing NuGet.Protocol;\r\nusing NuGet.Protocol.Core.Types;\r\nusing NuGet.Versioning;\r\nusing System.Runtime.Versioning;\r\n\r\nconst string packageFolderPath = @\"/packages\";\r\nDirectory.CreateDirectory(packageFolderPath);\r\n\r\nawait RestoreAsync(packageFolderPath);\r\n\r\nstatic async Task RestoreAsync(string packageFolderPath)\r\n{\r\n    var packages = new[] { new PackageIdentity(\"NuGet.Commands\", new NuGetVersion(6, 8, 0)) };\r\n\r\n    var frameworkName = new FrameworkName(\".NETCoreApp,Version=v6.0\");\r\n    var targetFramework = new NuGetFramework(frameworkName.Identifier, frameworkName.Version, string.Empty, new Version());\r\n    var machineWideSettings = new MachineWideSettings();\r\n    var defaultSettings = Settings.LoadDefaultSettings(null, null, machineWideSettings);\r\n\r\n    using var sourceCacheContext = new SourceCacheContext();\r\n\r\n    var restoreArgs = new RestoreArgs\r\n    {\r\n        AllowNoOp = true,\r\n        CacheContext = sourceCacheContext,\r\n        CachingSourceProvider = new CachingSourceProvider(new PackageSourceProvider(defaultSettings)),\r\n        ConfigFile = null,\r\n        DisableParallel = false,\r\n        Runtimes = new HashSet<string>(),\r\n        FallbackRuntimes = new HashSet<string>(),\r\n        RequestProviders = new List<IRestoreRequestProvider>(),\r\n        Sources = new List<string>(),\r\n        GlobalPackagesFolder = null,\r\n        HideWarningsAndErrors = false,\r\n        Inputs = new List<string>(),\r\n        IsLowercaseGlobalPackagesFolder = false,\r\n        LockFileVersion = null,\r\n        ValidateRuntimeAssets = null,\r\n        Log = NullLogger.Instance,\r\n        MachineWideSettings = machineWideSettings,\r\n        PackageSaveMode = PackageSaveMode.Defaultv3\r\n    };\r\n    restoreArgs.PreLoadedRequestProviders.Add(\r\n        new DependencyGraphSpecRequestProvider(\r\n    new RestoreCommandProvidersCache(),\r\n    GetDependencyGraph(packages)));\r\n\r\n    var restoreSummary = await RestoreRunner.RunAsync(restoreArgs);\r\n\r\n    var errors = restoreSummary.SelectMany(rs => rs.Errors);\r\n    if (errors.Any())\r\n    {\r\n        throw new Exception(\"Failed restoring packages.\",\r\n            new AggregateException(errors.Select(e => new Exception(e.Message)).ToArray()));\r\n    }\r\n\r\n\r\n    DependencyGraphSpec GetDependencyGraph(IEnumerable<PackageIdentity> packages)\r\n    {\r\n        var dependencyGraphSpec = new DependencyGraphSpec();\r\n\r\n        foreach (var package in packages)\r\n        {\r\n            VersionRange versionRange = new(package.Version);\r\n            string uniqueName = $\"{package.Id}-{targetFramework}-{versionRange.ToNormalizedString()}\".ToLowerInvariant();\r\n            string projectFilePath = Path.Combine(packageFolderPath, $\"{package.Id}{package.Version}.csproj\");\r\n            var packageSpec = new PackageSpec\r\n            {\r\n                Name = uniqueName,\r\n                FilePath = projectFilePath,\r\n                Dependencies = { },\r\n                TargetFrameworks =\r\n                {\r\n                    new TargetFrameworkInformation\r\n                    {\r\n                        TargetAlias = targetFramework!.GetShortFolderName(),\r\n                        FrameworkName = targetFramework,\r\n                        Dependencies =\r\n                        {\r\n                            new LibraryDependency\r\n                            {\r\n                                LibraryRange = new(package.Id, versionRange, LibraryDependencyTarget.Package)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                RestoreMetadata = new()\r\n                {\r\n                    ProjectStyle = ProjectStyle.PackageReference,\r\n                    ProjectName = uniqueName,\r\n                    ProjectUniqueName = uniqueName,\r\n                    OutputPath = Path.Combine(packageFolderPath, \".restore\", package.Id, package.Version.ToString()),\r\n                    ProjectPath = projectFilePath,\r\n                    PackagesPath = packageFolderPath,\r\n                    FallbackFolders = { },\r\n                    Sources = { new PackageSource(\"https://api.nuget.org/v3/index.json\") },\r\n                    OriginalTargetFrameworks = { targetFramework.GetShortFolderName() },\r\n                    TargetFrameworks =\r\n                    {\r\n                        new ProjectRestoreMetadataFrameworkInfo\r\n                        {\r\n                            TargetAlias = targetFramework.GetShortFolderName(),\r\n                            FrameworkName = targetFramework\r\n                        }\r\n                    },\r\n                    ProjectWideWarningProperties = new WarningProperties()\r\n                }\r\n            };\r\n\r\n            dependencyGraphSpec.AddProject(packageSpec);\r\n            dependencyGraphSpec.AddRestore(packageSpec.Name);\r\n        }\r\n\r\n        return dependencyGraphSpec;\r\n    }\r\n}\r\n\r\ninternal class MachineWideSettings : IMachineWideSettings\r\n{\r\n    private readonly Lazy<ISettings> settings;\r\n\r\n    public MachineWideSettings()\r\n    {\r\n        var baseDirectory = NuGetEnvironment.GetFolderPath(NuGetFolderPath.MachineWideConfigDirectory);\r\n        this.settings = new Lazy<ISettings>(() => NuGet.Configuration.Settings.LoadMachineWideSettings(baseDirectory));\r\n    }\r\n\r\n    public ISettings Settings => this.settings.Value;\r\n}\r\n```\r\n\r\nHere's the _Dockerfile_ for creating the image `nuget-restore`:\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\r\nCOPY NuGetPackageRestore.csproj src/NuGetPackageRestore.csproj\r\nCOPY Program.cs src/Program.cs\r\nRUN dotnet publish --output out src\r\n\r\nFROM mcr.microsoft.com/dotnet/runtime:6.0 AS final\r\nWORKDIR /app\r\nCOPY --from=build out .\r\nENTRYPOINT [\"dotnet\", \"NuGetPackageRestore.dll\"]\r\n```\r\n\r\nBuild the image:\r\n```\r\ndocker build -t nuget-restore .\r\n```\r\n\r\nRun the image, binding the packages folder to a folder on the host:\r\n```\r\ndocker run -it --rm --mount type=bind,source=c:\\temp\\packages,destination=/packages nuget-restore\r\n```\r\n\r\nHere's my program for getting the packages from the restored folders:\r\n\r\n```\r\nusing NuGet.Common;\r\nusing NuGet.Protocol;\r\n\r\nconst string packageFolderPath = @\"/packages\";\r\nDirectory.CreateDirectory(packageFolderPath);\r\n\r\nGetPackages(packageFolderPath);\r\n\r\nstatic void GetPackages(string packageFolderPath)\r\n{\r\n    var packages = LocalFolderUtility.GetPackagesV3(packageFolderPath, new ConsoleLogger());\r\n    Console.WriteLine(\"Packages resolved: \" + packages.Count());\r\n    Console.WriteLine(string.Join(Environment.NewLine, packages.Select(p => $\"{p.Identity.Id}, {p.Identity.Version}\")));\r\n}\r\n\r\ninternal class ConsoleLogger : LoggerBase\r\n{\r\n    public override void Log(ILogMessage message)\r\n    {\r\n        Console.WriteLine($\"\\t{message.Level}: {message.Message}\");\r\n    }\r\n\r\n    public override Task LogAsync(ILogMessage message)\r\n    {\r\n        return Task.Run(() => Log(message));\r\n    }\r\n}\r\n```\r\n\r\nHere's the _Dockerfile_ for creating the image `nuget-get-packages`. Note the step that copies the restored _packages_ folder into the image.\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\r\nCOPY NuGetGetPackages.csproj src/NuGetGetPackages.csproj\r\nCOPY Program.cs src/Program.cs\r\nRUN dotnet publish --output out src\r\n\r\nFROM mcr.microsoft.com/dotnet/runtime:6.0 AS final\r\nCOPY packages packages\r\nWORKDIR /app\r\nCOPY --from=build out .\r\nENTRYPOINT [\"dotnet\", \"NuGetGetPackages.dll\"]\r\n```\r\n\r\nMove the restored _packages_ folder into the folder of the project and build the image:\r\n```\r\ndocker build -t nuget-get-packages .\r\n```\r\n\r\nRun the image:\r\n```\r\ndocker run -it --rm nuget-get-packages\r\n```\r\n\r\nThe program output is:\r\n```\r\nPackages resolved: 0\r\n```\r\n\r\nLooking at the log-output, there are many logs like:\r\n```\r\nDebug: Missing /packages/nuget.commands/6.8.0/nuget.commands.nuspec\r\n```\r\n\r\nLooking at the restored packages folders I note that the relevant file name isn't _nuget.commands.nuspec_ but _NuGet.Commands.nuspec_ and this is clearly the reason the nuspec file isn't found and getting the packages fails.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34293764001","Type":"IssuesEvent","CreatedAt":"2023-12-19T22:15:53","Actor":"lifengl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13098","RelatedDescription":"Opened issue \"NuGet restore always touched the project.assets.json file even no content is changed when it needs log error messages.\" (#13098) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.9\n\n### Worked before?\n\nnot sure\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nTry to create a project with NuGet package reference to 'Newtonsoft.Json' 12.0.3.\r\n\r\nClose/reopen the solution, the project.assets.json file is touched every time, with extra evaluation and design time builds.  Touching the file without any content change would lead the project system to constantly discard project cache state, and repeat the NuGet restore logic.\r\n\r\nThe restore logic should skip updating the file in this case (as long as the original file matching the end result.)\n\n### Verbose Logs\n\n```shell\nin the assets file with this section:\r\n\r\n  \"logs\": [\r\n    {\r\n      \"code\": \"NU1903\",\r\n      \"level\": \"Error\",\r\n      \"message\": \"Warning As Error: Package 'Newtonsoft.Json' 12.0.3 has a known high severity vulnerability, https://github.com/advisories/GHSA-5crp-9r3c-p9vr\",\r\n      \"libraryId\": \"Newtonsoft.Json\",\r\n      \"targetGraphs\": [\r\n        \".NETCoreApp,Version=v3.1\"\r\n      ]\r\n    }\r\n\r\nit would keep being updated, even the content is not changed.\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-21T03:30:19.7430115Z","RunDurationInMilliseconds":1223}