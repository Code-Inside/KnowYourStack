{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"41231682734","Type":"PullRequestEvent","CreatedAt":"2024-08-22T01:36:48","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10149","RelatedDescription":"Opened pull request \"Fix sign for int repo\" (#10149) at NuGet/NuGetGallery","RelatedBody":"Partially addresses https://github.com/NuGet/Engineering/issues/5593\r\nSo far both this repo and other internal repo both compile without sign.proj error."},{"Id":"41228970459","Type":"PullRequestEvent","CreatedAt":"2024-08-21T22:39:45","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10148","RelatedDescription":"Opened pull request \"Agr stsdk ft advay26\" (#10148) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5440\r\n\r\n### Background\r\n\r\nThis migrates some of the Validation Jobs to use MSI with the new SDKs. I've deployed these changes to DEV using these config files: https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGetDeployment/pullrequest/2473, and E2E tests pass + I don't see any exceptions in AI logs.\r\n\r\nThese are the jobs I tested:\r\n- [[NuGet][Continuous] Validation.Orchestrator](https://devdiv.visualstudio.com/DevDiv/_release?_a=releases&view=all&definitionId=1617)\r\n- [[NuGet][Continuous] Validation.Symbols.Job](https://devdiv.visualstudio.com/DevDiv/_release?_a=releases&view=all&definitionId=1584)\r\n- [[NuGet][Continuous] Validation.SymbolsOrchestrator](https://devdiv.visualstudio.com/DevDiv/_release?_a=releases&view=all&definitionId=1605)\r\n- [[NuGet][Daily] Validation.PackageSigning.RevalidateCertificate](https://devdiv.visualstudio.com/DevDiv/_release?_a=releases&view=all&definitionId=1609)\r\n\r\n### Description of the changes\r\n\r\n1. @agr added support for the new SDK and MSI setup with the first few commits here. Some of these changes touch other jobs/projects too, like `GitHubIndexer` and `NuGet.Services.V3`. I haven't tested these jobs.\r\n2. `Validation.Common.Job` had a reference for `WindowsAzure.Storage` that I had to remove. `NuGet.Services.V3` is downstream and consumes this package via `Validation.Common.Job`, so I had to add an explicit reference to this package in `NuGet.Services.V3`.\r\n3. Configured the Lease service (used by the Validation Orchestrator jobs) to use MSI\r\n4. There's some minor refactoring in `src/NuGetGallery.Core/Services/CloudBlobClientWrapper.cs`. I wanted to reuse some of the code in a private method there, so I extracted the logic to a public helper method in a new class: `src/NuGetGallery.Core/Extensions/ConnectionStringExtensions.cs`. If people have ideas on how to manage this better, I'm happy to hear them and make changes!\r\n\r\n**Note:** `Validation.Common.Job` is consumed by many other projects and jobs, both in this repo and in `NuGet.Internal.Jobs`, so we will want to test everything together as well."},{"Id":"41226460983","Type":"PullRequestEvent","CreatedAt":"2024-08-21T20:41:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10147","RelatedDescription":"Merged pull request \"Move SecretDictionary away from sync-over-async\" (#10147) at NuGet/NuGetGallery","RelatedBody":"The new KeyVault SDK has a sync path that we can use. This adds `GetSecret` methods in addition to `GetSecretAsync` methods. The `SecretDictionary` can now use proper sync methods all the way through.\r\n\r\nI saw MonitoringProcessor deadlock in DEV and INT, but not in PROD, all on the same bits. I captured a dump and saw it blocked on async KeyVault APIs inside a sync context. I believe this is a sync-over-async deadlock.\r\n\r\nProgress on https://github.com/NuGet/NuGetGallery/issues/10146.\r\n"},{"Id":"41222460885","Type":"PullRequestEvent","CreatedAt":"2024-08-21T18:12:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10147","RelatedDescription":"Opened pull request \"Move SecretDictionary away from sync-over-async\" (#10147) at NuGet/NuGetGallery","RelatedBody":"The new KeyVault SDK has a sync path that we can use. This adds `GetSecret` methods in addition to `GetSecretAsync` methods. The `SecretDictionary` can now use proper sync methods all the way through.\r\n\r\nI saw MonitoringProcessor deadlock in DEV and INT, but not in PROD, all on the same bits. I captured a dump and saw it blocked on async KeyVault APIs inside a sync context. I believe this is a sync-over-async deadlock.\r\n\r\nProgress on https://github.com/NuGet/NuGetGallery/issues/10146.\r\n"},{"Id":"41222259021","Type":"IssuesEvent","CreatedAt":"2024-08-21T18:05:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10146","RelatedDescription":"Opened issue \"[NuGet.org Bug]: MonitoringProcessor can hang in KV secret injection\" (#10146) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI noticed this bug in DEV and in INT but, thankfully, not in PROD. \r\n\r\nThe `SecretDictionary` type of ours is used by `Ng` for storing secrets. It uses our `ISecretInjectory.InjectAsync` but is a sync context. We can change this to be sync all the way down to avoid deadlocks. \n\n### Repro Steps\n\nLet MonitoringProcessor restart. It does so every 24 hours. Sometimes, it will hang on secret injection.\n\n### Expected Behavior\n\nThis job should not hang. We should avoid sync-over-async.\n\n### Screenshots\n\n<img width=\"853\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ba8dbaa6-4aab-4d2b-b7e5-59c8b640a0ad\">\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"41220966477","Type":"PullRequestEvent","CreatedAt":"2024-08-21T17:19:48","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10144","RelatedDescription":"Merged pull request \"[ReleasePrep][2024.08.20] RI dev to main\" (#10144) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"41219423112","Type":"IssuesEvent","CreatedAt":"2024-08-21T16:26:26","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9921","RelatedDescription":"Closed issue \"[NuGet.org Bug]: many catalog package details leaves are redundant (duplicate) because of improper deprecation no-oping\" (#9921) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nAs part of https://github.com/NuGet/NuGetGallery/issues/8873, I was interested in implementing proper no-oping for deprecation. This is to ensure that redundant API calls do not easily cause many unnecessary V3 catalog leaves and therefore load on the DB.\r\n\r\nI did a data investigation with NuGet.Insights to see how often duplicate catalog leaves occurred. It turns out... a lot!\r\n\r\nOf catalog leaves with deprecation information, over 15% are duplicate, i.e. their mutable metadata (listed, vulnerabilities, and deprecation) are the same as the previous leaf for that same package.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nlet LeafCount = toscalar(NiCatalogLeafItems | count);\r\nSameAsPreviousLeaves\r\n| summarize LeavesWithDeprecation = count(), DuplicateLeaves = countif(SameAsPrevious)\r\n| extend TotalLeaves = LeafCount\r\n| extend ['Duplicate % of total'] = round(100.0 * DuplicateLeaves / TotalLeaves, 2)\r\n| extend ['Duplicate % of deprecated'] = round(100.0 * DuplicateLeaves / LeavesWithDeprecation, 2)\r\n```\r\n\r\n|LeavesWithDeprecation|DuplicateLeaves|TotalLeaves|Duplicate % of total|Duplicate % of deprecated|\r\n|---|---|---|---|---|\r\n|684887|103619|12725635|0.81|15.13|\r\n\r\nI believe this is made even worse for users that have access to the deprecation API private preview. It's easy to re-request deprecation of a growing set of versions with the API and cause a growing wave of duplicate deprecations. `azure-sdk` is at the top of the deprecation list because it is enabled for the deprecation API.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nSameAsPreviousLeaves\r\n| summarize DeprecationCount = count(), DuplicateCount = countif(SameAsPrevious) by Identity, LowerId\r\n| join kind=inner NiPackageOwners on LowerId\r\n| project LowerId, Identity, Owners, DeprecationCount, DuplicateCount\r\n| mv-expand Owner = Owners to typeof(string)\r\n| summarize DeprecationCount = sum(DeprecationCount), DuplicateCount = sum(DuplicateCount) by Owner\r\n| order by DuplicateCount desc\r\n| extend ['Duplicate %'] = round(100.0 * DuplicateCount / DeprecationCount, 2)\r\n| take 10\r\n```\r\n\r\n|Owner|DeprecationCount|DuplicateCount|Duplicate %|\r\n|---|---|---|---|\r\n|Microsoft|112632|55381|49.17|\r\n|azure-sdk|74116|52725|71.14|\r\n|monk.soul|73453|21262|28.95|\r\n|chinadotnet|61946|17637|28.47|\r\n|dotnetchina|61946|17637|28.47|\r\n|Thinkka|3860|3497|90.6|\r\n|nugetservicebus|4296|3030|70.53|\r\n|AppInsightsSdk|4168|2770|66.46|\r\n|RabbitFoot|15833|1990|12.57|\r\n|furion.net|6501|1847|28.41|\r\n\r\nWe should implement proper no-oping in `PackageDeprecationService`. Currently the code updates the `LastEdited` field on ALL packages in the deprecation batch if there is ANY change (rather than no-oping on a package-by-package basis).\r\nhttps://github.com/NuGet/NuGetGallery/blob/f58a360a3e081f633eb7b0791b0de625d2bb9399/src/NuGetGallery/Services/PackageDeprecationService.cs#L103-L110\n\n### Repro Steps\n\n1. Deprecate version X and Y of a package via the UI.\r\n2. Deprecate version X, Y, and Z of a package via the UI, carefully selecting the same deprecation settings as the previous step.\r\n\n\n### Expected Behavior\n\nVersion Z should only have it's `LastEdited` value updated.\r\n\r\nActual: X, Y, and Z have their `LastEdited` value updated.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"41227514930","Type":"IssuesEvent","CreatedAt":"2024-08-21T21:25:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13689","RelatedDescription":"Closed issue \"'dotnet list package --vulnerable' checks packages in all sources even when package source mapping is enabled\" (#13689) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/13688\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **mikolajpiecuch** August  8, 2024</sup>\r\nHi, I observe some strange behaviour as follows. I've configured a package source mapping for my repo (defined in Nuget.config in repo root). I use nuget.org with a pattern of \"\\*\" and my private repo with a pattern of \"MyName.\\*\". While restoring, nugets are fetched correctly from these two sources. Unfortunately, when I call 'dotnet list package', it seems to call all my sources for all packages - e.g. GET request for Microsoft.* packages is sent to my private nuget registry. Why doesn't 'dotnet list package --vulnerable' take Nuget.config into account?</div>\r\n\r\nBecause of that I see a lot of requests on my private server that could be limited only to my packages"},{"Id":"41227479061","Type":"IssuesEvent","CreatedAt":"2024-08-21T21:24:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13266","RelatedDescription":"Closed issue \"[FEATURE] Support deprecation warnings at restore time\" (#13266) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nTL;DR - Support deprecated metadata similar to what we did with security vulnerability auditing in .NET 8 timeframe.\r\n\r\nhttps://github.com/NuGet/Home/blob/dev/accepted/2022/vulnerabilities-in-restore.md#surfacing-deprecation-information\r\n\r\n### Additional Context and Details\r\n\r\n_No response_\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉"},{"Id":"41224602589","Type":"IssuesEvent","CreatedAt":"2024-08-21T19:29:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13720","RelatedDescription":"Closed issue \"NuGetAuditSuppress is ignored by dotnet list package\" (#13720) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK:  Version:           8.0.401  Commit:            811edcc344  MSBuild version:   17.11.4+37eb419ad\n\n### Worked before?\n\nno\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nAdding `NuGetAuditSuppress` should suppress warnings about vulnerable packages. It does so for `dotnet restore` but not for `dotnet list package --vulnerable --include-transitive`.\r\n\r\nNot sure if this is intended or if the feature has been changed on the way. The [original proposal](https://github.com/NuGet/Home/blob/9d98231d88d70b18e61b37079f725e410ee0e6a0/accepted/2023/NuGetAudit-supress-advisory.md) looks like this was originally planned stating as summary:\r\n\r\n> Provide a syntax that allows developers to give a list of URLs that NuGet will no longer warn about in restore (NuGetAudit) or dotnet list package --vulnerable.\r\n\r\nI know there is FR #11926 - but there it looks like this behavior is expected, too.\r\n\r\n### To Reproduce\r\n\r\n+ Use the following project file and reference a package with a known vulnerability\r\n+ list the known advisories to be ignored\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n      <PackageReference Include=\"IdentityServer4\" Version=\"4.1.2\" />\r\n  </ItemGroup>\r\n\r\n  <!--<ItemGroup>\r\n    <NuGetAuditSuppress Include=\"https://github.com/advisories/GHSA-ff4q-64jc-gx98\" />\r\n    <NuGetAuditSuppress Include=\"https://github.com/advisories/GHSA-55p7-v223-x366\" />\r\n  </ItemGroup>-->\r\n\r\n</Project>\r\n```\r\n\r\nThen run:\r\n\r\n`dotnet list package --vulnerable --include-transitive`\r\n\r\nThis gets us the following output:\r\n\r\n```\r\nThe following sources were used:\r\n   https://api.nuget.org/v3/index.json\r\n   C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n\r\nProject `AuditSuppressTest` has the following vulnerable packages\r\n   [net8.0]:\r\n   Top-level Package      Requested   Resolved   Severity   Advisory URL\r\n   > IdentityServer4      4.1.2       4.1.2      Moderate   https://github.com/advisories/GHSA-ff4q-64jc-gx98\r\n                                                 Moderate   https://github.com/advisories/GHSA-55p7-v223-x366\r\n\r\n   Transitive Package                           Resolved   Severity   Advisory URL\r\n   > Microsoft.IdentityModel.JsonWebTokens      5.6.0      Moderate   https://github.com/advisories/GHSA-59j7-ghrg-fj52\r\n   > Newtonsoft.Json                            12.0.2     High       https://github.com/advisories/GHSA-5crp-9r3c-p9vr\r\n   > System.IdentityModel.Tokens.Jwt            5.6.0      Moderate   https://github.com/advisories/GHSA-59j7-ghrg-fj52\r\n   > System.Text.Encodings.Web                  4.7.0      Critical   https://github.com/advisories/GHSA-ghhp-997w-qr28\r\n```\r\n\r\nI expected it to be silent there as well.\r\n\r\nBest regards.\r\n\r\nPS:\r\n\r\nOpened it on [dotnet SDK](https://github.com/dotnet/sdk/issues/42832) first. They pointed me here.\n\n### Verbose Logs\n\n_No response_"},{"Id":"41215766759","Type":"PullRequestEvent","CreatedAt":"2024-08-21T14:41:39","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13723","RelatedDescription":"Merged pull request \"Move Owner Author Spec to Implemented folder\" (#13723) at NuGet/Home","RelatedBody":""},{"Id":"41200290530","Type":"PullRequestEvent","CreatedAt":"2024-08-21T07:05:01","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/10386","RelatedDescription":"Closed pull request \"Add developer testing design proposal\" (#10386) at NuGet/Home","RelatedBody":""},{"Id":"41200259589","Type":"IssuesEvent","CreatedAt":"2024-08-21T07:03:53","Actor":"davidKolar175","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13728","RelatedDescription":"Closed issue \"Directoy.packages.props not being loaded when building on Linux\" (#13728) at NuGet/Home","RelatedBody":"## Description\r\nHello, I have a repository where I newly added `Directory.packages.props` file to have a centralized package management. The problem is that build on my Linux machine is not working while Windows and Mac build with no issue. I do believe that I am using appropriate versions of dotnet sdk. At the end of the build I'm getting error:\r\n\r\n```\r\n/home/kolard/Desktop/TEAF/Server2/Src/TescoSW.Server2.MinimalAPIDemo/TescoSW.Server2.MinimalAPIDemo.csproj : error NU1107: Version conflict detected for Microsoft.OData.Edm. Install/reference Microsoft.OData.Edm 7.6.0 directly to project TescoSW.Server2.MinimalAPIDemo to resolve this issue.  [/home/kolard/Desktop/TEAF/Server2/Src/TescoSW.Server2.sln]\r\n```\r\n\r\nThis is caused by by the msbuild not knowing, what version of referenced packages it should use. And as I said, the same repository build on any other platforms is build without issue.\r\n\r\n### NuGet Product Used\r\ndotnet.exe\r\n\r\n### Product Version\r\nOS: AlmaLinux 9.4 and also Ubuntu 20.04.6 LTS\r\n\r\n.NET SDKs installed:\r\n  6.0.425 [/home/kolard/dotnet/sdk]\r\n  8.0.401 [/home/kolard/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.33 [/home/kolard/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [/home/kolard/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [/home/kolard/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [/home/kolard/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n### Impact\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\nJust create new Console app, add Direcory.packages.props and use any nuget package. Then build the solution and you will most definitelly have warning in the console about incorrect version of dotnet.\r\n\r\n```\r\n/home/kolard/Desktop/ConsoleTest/ConsoleTest.csproj : warning NU1604: Project dependency Moq does not contain an inclusive lower bound. Include a lower bound in the dependency version to ensure consistent restore results. [/home/kolard/Desktop/ConsoleTest/ConsoleTest.generated.sln]\r\n```\r\n\r\n## Ms"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-22T03:30:18.5533649Z","RunDurationInMilliseconds":829}