{"Data":{"Blog":{"FeedItems":[{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13646136815","Type":"PullRequestEvent","CreatedAt":"2020-09-25T22:23:09","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8219","RelatedDescription":"Merged pull request \"Darken the orange buttons for accessibility\" (#8219) at NuGet/NuGetGallery","RelatedBody":"For WCAG 2.1, web components must have a 3:1 contrast ratio. This darkens both the \"search\" button in the header as well as the \"copy\" button for installation instructions.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/737941/94200502-5d65d080-fe6f-11ea-9860-c4ffe1a83351.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/737941/94318820-31fde700-ff3e-11ea-914a-e3f74808316a.png)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8195"},{"Id":"13644501078","Type":"IssuesEvent","CreatedAt":"2020-09-25T19:00:14","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8197","RelatedDescription":"Closed issue \"Remove SHA-1 verification in package signature job \" (#8197) at NuGet/NuGetGallery","RelatedBody":"When NuGet client v5.8 is released, upgrade. "},{"Id":"13644492995","Type":"IssuesEvent","CreatedAt":"2020-09-25T18:59:25","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8224","RelatedDescription":"Opened issue \"Miss alt attribute for feedback\" (#8224) at NuGet/NuGetGallery","RelatedBody":"Title: WCAG 1.1.1: Ensures <img> elements have alternate text or a role of none or presentation (img)\nTags: Accessibility, WCAG 1.1.1, image-alt\n\nIssue: Ensures <img> elements have alternate text or a role of none or presentation (image-alt - https://dequeuniversity.com/rules/axe/4.0/image-alt?application=msftAI)\n\nTarget application: NuGet Gallery | Home - https://www.nuget.org/\n\nElement path: iframe[src=\"\"];img\n\nSnippet: <img src=\"https://d6tizftlrpuof.cloudfront.net/themes/production/microsoft-nuget-button-5e3ed075d5d2d6d1f91dfb8fd5e15d01.png\" width=\"40\" height=\"130\">\n\nHow to fix: \nFix any of the following:\n  Element does not have an alt attribute\n  aria-label attribute does not exist or is empty\n  aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty\n  Element has no title attribute or the title attribute is empty\n  Element's default semantics were not overridden with role=\"presentation\"\n  Element's default semantics were not overridden with role=\"none\"\n\nEnvironment: Chrome version 85.0.4183.121\n\n====\n\nThis accessibility issue was found using Accessibility Insights for Web 2.21.1 (axe-core 4.0.1), a tool that helps find and fix accessibility issues. Get more information & download this tool at http://aka.ms/AccessibilityInsights."},{"Id":"13643961921","Type":"IssuesEvent","CreatedAt":"2020-09-25T18:02:37","Actor":"chgill-MSFT","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8223","RelatedDescription":"Opened issue \"When creating a new API key, glob pattern description for \"Alpha.*\" is misleading\" (#8223) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nWhen creating a new API key, the glob pattern description for **Alpha.*** is misleading as Alpha.* will select package that begin with \"Alpha.\" not \"Alpha\" in general.\r\n\r\n![image](https://user-images.githubusercontent.com/15097183/94299927-4ccc5d80-ff36-11ea-83a7-68171b90d646.png)\r\n\r\nSuggested correction:\r\n\r\n- Alpha* will select any package that has an ID beginning with _Alpha_, such as \"AlphaCore\" or \"Alpha.Core\"\r\n- Alpha.* will select any package that has an ID beginning with _Alpha.*_, such as \"Alpha.Core\" or \"Alpha.Tools\"\r\n\r\n### To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n1. Use glob pattern \"Alpha.*\"\r\n2. Get confused when \"AlphaCore\" is not selected based on the description."},{"Id":"13643307906","Type":"IssuesEvent","CreatedAt":"2020-09-25T16:54:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8222","RelatedDescription":"Opened issue \"Enable seeing ALL \"used by\" NuGet packages and GitHub repos, not just top 5\" (#8222) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem?\r\n\r\nToday, on the package details page, you can only see the top 5 NuGet packages and GitHub repositories that depend on a package.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/94294651-fac71000-ff14-11ea-9c60-ebcfeba01260.png)\r\n\r\nIn this example, there are 27.6K other packages that depend on Newtonsoft.Json but there is no way to see them.\r\n\r\n### Describe the solution you'd like\r\n\r\nAdd some link, like this:\r\n\r\n![image](https://user-images.githubusercontent.com/94054/94294267-6b216180-ff14-11ea-97b8-1185866f0240.png)\r\n\r\nThis could take you to the normal package list used for search or for the profile page but scoped to the dependent list.\r\n\r\nIt's not clear how the list would look for GitHub repositories.\r\n\r\n### Additional context\r\n\r\nWe have at least one internal partner that has asked for this information. If I recall correctly, several 3rd party customers asked for the full list for the GitHub Used By, which has been a feature for longer.\r\n\r\n### Workaround\r\n\r\nYou can write some code to enumerate the catalog API and find all packages that dependent on a NuGet package.\r\nhttps://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages\r\n\r\nIn the package details catalog leaf is a `dependencyGroups` property. For example:\r\nhttps://api.nuget.org/v3/catalog0/data/2020.07.14.15.04.58/microsoft.extensions.dependencymodel.3.1.6.json\r\n![image](https://user-images.githubusercontent.com/94054/94294558-dbc87e00-ff14-11ea-8645-64c10256924e.png)\r\n\r\nThere is no easy way to replicate the GitHub dependents list."},{"Id":"13640007581","Type":"IssuesEvent","CreatedAt":"2020-09-25T12:02:46","Actor":"MazeOfFate","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8221","RelatedDescription":"Opened issue \"NuGet.Server problems to setting up\" (#8221) at NuGet/NuGetGallery","RelatedBody":"I have an issue on setting up my private NuGet.Server on a IIS Server.\r\nPlease note that the site is using http and https is handle on a F5 part.\r\n\r\nThe issue is located on the download package feature.\r\nMy NuGet.Server instance is accessible at https://myNuget/Feed and a virtual path /Feed is in place on my IIS instance.\r\n\r\nDuring a NuGet restore, the URL called is for example:\r\nhttps://myNuget/Feed/nuget/Packages(Id='Gelf4Net',Version='2.0.3')\r\nBut the download URL delivered by NuGet.Server instance is:\r\nhttp://myNuget/nuget/Packages(Id='Gelf4Net',Version='2.0.3')/Download\r\nIn consequence, the package is not found...\r\n\r\nDo you know if it is possible to configure the URL sent by the NuGet.Server in order to request an https URL and with the virtual path /Feed?\r\n\r\nThanks for your help.\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13656480559","Type":"IssuesEvent","CreatedAt":"2020-09-28T02:51:26","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10072","RelatedDescription":"Opened issue \"Enabled structured logging for metrics in NuGet.Build.Tasks\" (#10072) at NuGet/Home","RelatedBody":"MSBuild has an API [`IBuildEngine5.LogTelemetry`](https://github.com/dotnet/msbuild/blob/aed5e7ed0b7e031d3e486c63b206902bf825b128/src/Framework/IBuildEngine5.cs#L18) which does **not** send any telemetry, but allows any MSBuild loggers passed in on the command line, which receive [`IDictionary<string, string>` property bags](https://github.com/dotnet/msbuild/blob/aed5e7ed0b7e031d3e486c63b206902bf825b128/src/Build/BackEnd/Components/Logging/ILoggingService.cs#L502). This allows anyone writing a MSBuild logger to more easily capture NuGet restore metrics, without having to do string parsing.\r\n\r\nNuGet already has some telemetry infrastructure can be reused:\r\n* Restore already calls `NuGet.Common.TelemetryActivity.EmitTelemetryEvent`, which is a no-op outside of Visual Studio.\r\n* Therefore, `RestoreTask` can create its own implementation of `INuGetTelemetryService` which calls MSBuild's `LogTelemetry`\r\n* RestoreTaskEx (static graph restore) is probably going to be much more tricky. Need to investigate how logging works there, but the same concept applies.\r\n\r\nThis allows anyone interested, particularly Microsoft's internal engineering system teams, to pass their custom MSBuild logger on the command line, and it can receive more detailed performance information, and easily obtain numbers without having to do string parsing, regex, substring, etc.\r\n"},{"Id":"13654968143","Type":"IssuesEvent","CreatedAt":"2020-09-27T19:56:50","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10071","RelatedDescription":"Opened issue \"Replace remaining XAML-drawn icons with Image Service icons\" (#10071) at NuGet/Home","RelatedBody":"**Blocked by**: https://devdiv-design.visualstudio.com/D3%20Studio/_workitems/edit/12595\r\nRemove and replace XAML-drawn icons with Image Service, once they are available per this blocking issue.  \r\n\r\nCancel/Download are available today, but are very thin and may not work well in our UI. I believe new icons are being created per issue.\r\nFor the ones that already had close matches, they'll be removed as part of https://github.com/nuget/home/issues/9789\r\n\r\n## Cancel option?\r\nI did find a possible replacement for the Cancel (\"X\"), but it's very thin and may be too difficult to see. (particularly on Dark theme). Code change: https://github.com/NuGet/NuGet.Client/commit/06902c0a18d480f962295c3cde602a2733ccbb23. \r\n\r\n@JonDouglas can comment on these samples:\r\n![image](https://user-images.githubusercontent.com/49205731/94374270-17ac4080-00d9-11eb-96e0-0c8f42319a6f.png)\r\n![image](https://user-images.githubusercontent.com/49205731/94374273-19760400-00d9-11eb-8428-548725f3f93d.png)\r\n![image](https://user-images.githubusercontent.com/49205731/94374277-1b3fc780-00d9-11eb-9848-73643fde41a0.png)\r\n![image](https://user-images.githubusercontent.com/49205731/94374278-1c70f480-00d9-11eb-98de-7cb6e6b88c7a.png)\r\n\r\n## XAML-drawn icons which don't currently have close matches in ImageService:\r\nIcon | PackageIconMonikers | src\\NuGet.Clients\\NuGet.PackageManagement.UI\\Xamls\\\r\n-- | -- | --\r\n![image](https://user-images.githubusercontent.com/49205731/94374239-d7e55900-00d8-11eb-94a4-192f788e9433.png)  | PrefixReservedIndicator | PrefixReservedIndicator.xaml\r\n![image](https://user-images.githubusercontent.com/49205731/94374246-e5024800-00d8-11eb-8a49-b681b222b679.png) | UpdateAvailableIndicator | UpdateAvailableIndicator.xaml\r\n  \r\n![image](https://user-images.githubusercontent.com/49205731/94374251-ea5f9280-00d8-11eb-9dd8-6b8c224d7178.png) | UninstallIndicator | UninstallIndicator.xaml\r\n \r\n![image](https://user-images.githubusercontent.com/49205731/94374253-ee8bb000-00d8-11eb-96e4-5087b9c4bede.png) | DownloadIndicator | DownloadIndicator.xaml\r\n\r\n"},{"Id":"13653105792","Type":"IssuesEvent","CreatedAt":"2020-09-27T11:02:09","Actor":"SimonCropp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7305","RelatedDescription":"Closed issue \"unlist the out of date wiki\" (#7305) at NuGet/Home","RelatedBody":"can u remove the nuget wiki so it doenst show up in search results https://github.com/NuGet/Home/wiki/Adding-nuget-pack-as-a-msbuild-target"},{"Id":"13646131768","Type":"IssuesEvent","CreatedAt":"2020-09-25T22:22:23","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10070","RelatedDescription":"Opened issue \"Nuget PMUI throws StreamJsonRPC exception\" (#10070) at NuGet/Home","RelatedBody":"## Detailed repro steps so we can see the same problem\nNot sure if it's regression.\n\n1. Open Nuget.Client source code in VS\n2. Install Text2Xml(v 1.1.0) package into all projects.\n3. Try to downgrade Text2Xml(v 1.0.1) version.\n![Error1.PNG](https://images.zenhubusercontent.com/5eb1d84a3cd56675c3efe510/eef97020-4a36-4d02-b443-feeb6a8835ef)\n"},{"Id":"13645606501","Type":"IssuesEvent","CreatedAt":"2020-09-25T21:08:00","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10069","RelatedDescription":"Opened issue \"Nuget PMC memory usage - Add new telemetries to track events related to PMC and Powershell usage.\" (#10069) at NuGet/Home","RelatedBody":"Child of https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1167790.\n\nRecently decided not to act on [decrease PMC usage](https://github.com/NuGet/Home/issues/9988) issue. We suspect it's highly unlikely problem to happen. To better understand this problem we add this telemetries.\n\n"},{"Id":"13645157465","Type":"IssuesEvent","CreatedAt":"2020-09-25T20:14:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9568","RelatedDescription":"Closed issue \"Understand and improve the batching strategy for implicit restores\" (#9568) at NuGet/Home","RelatedBody":"Related to https://github.com/NuGet/Home/issues/9567 & https://github.com/NuGet/Home/issues/9566.\r\n\r\nSpecifically concerned with start-up scenarios."},{"Id":"13645106671","Type":"IssuesEvent","CreatedAt":"2020-09-25T20:08:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10068","RelatedDescription":"Opened issue \"Improve the no-op hashing performance\" (#10068) at NuGet/Home","RelatedBody":"Currently the no-op hash is calculated by creating a json string of the dependency graph spec for said project. \r\nThis involves a lot of duplicate + using jsonwriter for hash is not ideal.\r\n\r\nThis issue tracks the investigation for improving that hashing performance.\r\n\r\nI discussed with @cristinamanum and @zivkan \r\n\r\nThe suggestion is move to a normal hashing function instead of using the package specwriter. \r\nThe challenge is that we don't know if the package spec is mutated during restore.\r\n\r\nGiven that here are the options. \r\n\r\n* Consider setting a Locked property, to disable mutation after a certain point.\r\n* Use an intermediate class that can generate the hashcode on demand (this will require coordination to ensure the hash generation is synchronized).\r\n* Restore Runner before invoking the restore command can prepopulate the hash code for all the package specs. \r\n\r\nThis is expected to be a long investigation, because while perf is one goal, we need to ensure this doesn't get regressed in the future. \r\n\r\nI did prototype these changes and it showed a significant improvement for large slns with deep project graphs, up to 2-4x faster hash generation. The hash generation right now is about ~30% of the time spent in the restore part (not dg spec generation). \r\n\r\nSo cmd could see numbers like 7s to 6.8s, but VS will relatively better perf, example, 1.1s -> 900ms. "},{"Id":"13644217692","Type":"IssuesEvent","CreatedAt":"2020-09-25T18:30:02","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10067","RelatedDescription":"Opened issue \"Enhance telemetry with new information\" (#10067) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\nEnhance the existing telemetry events with information for:\r\n\r\n- [ ] CommitAsync duration\r\n\r\n- [ ] Graph - WalkAsync duration \r\n\r\n- [ ] Graph - analyze and graph creation duration\r\n\r\n- [ ] The count of central package versions\r\n\r\n\r\n\r\n\r\n"},{"Id":"13644062602","Type":"IssuesEvent","CreatedAt":"2020-09-25T18:13:22","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9827","RelatedDescription":"Closed issue \"Show requested version in the Solution Level UI\" (#9827) at NuGet/Home","RelatedBody":"Currently we only show the installed version in the Solution Level, we are going to add a column \"Requested\" version. \r\nIt only applies to PackageReference projects."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":28,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-09-28T05:30:37.3627846Z","RunDurationInMilliseconds":1730}