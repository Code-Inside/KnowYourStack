{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32094969970","Type":"PullRequestEvent","CreatedAt":"2023-09-26T00:07:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9673","RelatedDescription":"Merged pull request \"Move to latest NuGet.Jobs packages to align with ServerCommon update\" (#9673) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/4992"},{"Id":"32094480578","Type":"PullRequestEvent","CreatedAt":"2023-09-25T23:28:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9673","RelatedDescription":"Opened pull request \"Move to latest NuGet.Jobs packages to align with ServerCommon update\" (#9673) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/4992"},{"Id":"32092200157","Type":"PullRequestEvent","CreatedAt":"2023-09-25T21:08:17","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9671","RelatedDescription":"Merged pull request \"Improve text, fix typo\" (#9671) at NuGet/NuGetGallery","RelatedBody":"It's not cohesive to read this text, improved it."},{"Id":"32091207401","Type":"PullRequestEvent","CreatedAt":"2023-09-25T20:21:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9672","RelatedDescription":"Merged pull request \"Move from ADAL to MSAL\" (#9672) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/4992\r\n\r\nSummary of the changes:\r\n- Drop `Microsoft.IdentityModel.Clients.ActiveDirectory` (ADAL), pick up `Microsoft.Identity.Client` (MSAL)\r\n- Move to latest ServerCommon to pull in MSAL move\r\n- Drop unnecessary ADAL reference\r\n- Update build tools to latest to drop ADAL reference in a tool\r\n- The NuGet.Jobs update is for the Service Bus update, I'll come back later with another NuGet.Jobs update once ServerCommon has gotten there\r\n- Resolve minor DevSkim warnings"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32094745751","Type":"IssuesEvent","CreatedAt":"2023-09-25T23:50:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12902","RelatedDescription":"Closed issue \"[Question | Bug?] Restore fails to GeneratePathProperty or copy content to output directory if obj folder is missing\" (#12902) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, MSBuild.exe\r\n\r\n### Product Version\r\n\r\ndotnet 8.1 RC\r\n\r\n### Worked before?\r\n\r\nNever tried\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nMy project uses the dotnet CLI directly instead of using a standard C# project structure with the root project having a solution. Instead I have a parent msbuild project file that invokes child msbuild projects. Some of those child projects are C# projects and some are just generic build files not attached to a standard msbuild project type like C#. I happen to be using VSCode for development to invoke the command line.\r\n\r\nSuffice it to say, the child C# projects are not committed to source control with their obj or bin folders and they contain package references. When somebody checks out the project, the intent is for the build to restore everything including the package references.\r\n\r\nThe C# project files are setup to perform a pre build nuget restore, which ends up generating the obj folder and the nuget packages are successfully restored globally. The issue I am having is that if the obj and bin folders are missing the first time a user does a build (or the user does a clean, because I have the clean target delete obj & bin), then the nuget restore only restores the packages and the obj folder for the project. If the package contains content that needs to be copied to the output directory on package restore, nuget does not perform the copy. If a second build is performed with the obj folder present from the previous restore, the package content is copied successfully to the output folder. This behavior seems to be the same for the GeneratePathProperty. The package reference path is only generated if the obj folder is already present on restore.\r\n\r\nAfter some testing and digging, it just seems like nuget needs to take the extra step of completing its work if the obj folder is absent. If the obj folder is absent and a restore is performed, it is generating the obj folder, restoring the packages to the global .nuget folder but is stopping there. It should lastly perform the content copy. I think the .g.props file that is generated within the obj folder is controlling that content copy as it contains all the paths to the content to copy, it's just not being invoked when nuget has to firstly generate the file.\r\n\r\nWhen the automatic copy on fresh restore failed, I tried using the GeneratePathProperty to manually execute an msbuild copy task to copy what I needed.. only to find out that it seems like the property is not generated unless obj (an .g.props) exists first. I need a way for the restore to work fully if the obj folder is absent on a fresh restore. If this comes from the built in copy or from me manually writing a copy task using GeneratePathProperty, it doesn't matter, I just need one or both to work.\r\n\r\nThe overall issue is that it is a bad omen to tell users of my project that they need to restore / build the project twice whenever they firstly clone the project or do a full clean. I think this has been mentioned elsewhere in the forum, but nuget restore should work fully from a fresh restore (no obj or bin folders). Saying that the built in msbuild clean target never touches the obj folder or the obj folder is restored by VSCode / Visual Studio with \"normal\" solution project structures, is not very valid. A clean should wipe out everything (the entire cache which includes the obj folder) and start from a fresh slate.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32094744624","Type":"IssuesEvent","CreatedAt":"2023-09-25T23:50:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/12902","RelatedDescription":"Reopened issue \"[Question | Bug?] Restore fails to GeneratePathProperty or copy content to output directory if obj folder is missing\" (#12902) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, MSBuild.exe\r\n\r\n### Product Version\r\n\r\ndotnet 8.1 RC\r\n\r\n### Worked before?\r\n\r\nNever tried\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nMy project uses the dotnet CLI directly instead of using a standard C# project structure with the root project having a solution. Instead I have a parent msbuild project file that invokes child msbuild projects. Some of those child projects are C# projects and some are just generic build files not attached to a standard msbuild project type like C#. I happen to be using VSCode for development to invoke the command line.\r\n\r\nSuffice it to say, the child C# projects are not committed to source control with their obj or bin folders and they contain package references. When somebody checks out the project, the intent is for the build to restore everything including the package references.\r\n\r\nThe C# project files are setup to perform a pre build nuget restore, which ends up generating the obj folder and the nuget packages are successfully restored globally. The issue I am having is that if the obj and bin folders are missing the first time a user does a build (or the user does a clean, because I have the clean target delete obj & bin), then the nuget restore only restores the packages and the obj folder for the project. If the package contains content that needs to be copied to the output directory on package restore, nuget does not perform the copy. If a second build is performed with the obj folder present from the previous restore, the package content is copied successfully to the output folder. This behavior seems to be the same for the GeneratePathProperty. The package reference path is only generated if the obj folder is already present on restore.\r\n\r\nAfter some testing and digging, it just seems like nuget needs to take the extra step of completing its work if the obj folder is absent. If the obj folder is absent and a restore is performed, it is generating the obj folder, restoring the packages to the global .nuget folder but is stopping there. It should lastly perform the content copy. I think the .g.props file that is generated within the obj folder is controlling that content copy as it contains all the paths to the content to copy, it's just not being invoked when nuget has to firstly generate the file.\r\n\r\nWhen the automatic copy on fresh restore failed, I tried using the GeneratePathProperty to manually execute an msbuild copy task to copy what I needed.. only to find out that it seems like the property is not generated unless obj (an .g.props) exists first. I need a way for the restore to work fully if the obj folder is absent on a fresh restore. If this comes from the built in copy or from me manually writing a copy task using GeneratePathProperty, it doesn't matter, I just need one or both to work.\r\n\r\nThe overall issue is that it is a bad omen to tell users of my project that they need to restore / build the project twice whenever they firstly clone the project or do a full clean. I think this has been mentioned elsewhere in the forum, but nuget restore should work fully from a fresh restore (no obj or bin folders). Saying that the built in msbuild clean target never touches the obj folder or the obj folder is restored by VSCode / Visual Studio with \"normal\" solution project structures, is not very valid. A clean should wipe out everything (the entire cache which includes the obj folder) and start from a fresh slate.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32094744126","Type":"IssuesEvent","CreatedAt":"2023-09-25T23:50:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12902","RelatedDescription":"Closed issue \"[Question | Bug?] Restore fails to GeneratePathProperty or copy content to output directory if obj folder is missing\" (#12902) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, MSBuild.exe\r\n\r\n### Product Version\r\n\r\ndotnet 8.1 RC\r\n\r\n### Worked before?\r\n\r\nNever tried\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nMy project uses the dotnet CLI directly instead of using a standard C# project structure with the root project having a solution. Instead I have a parent msbuild project file that invokes child msbuild projects. Some of those child projects are C# projects and some are just generic build files not attached to a standard msbuild project type like C#. I happen to be using VSCode for development to invoke the command line.\r\n\r\nSuffice it to say, the child C# projects are not committed to source control with their obj or bin folders and they contain package references. When somebody checks out the project, the intent is for the build to restore everything including the package references.\r\n\r\nThe C# project files are setup to perform a pre build nuget restore, which ends up generating the obj folder and the nuget packages are successfully restored globally. The issue I am having is that if the obj and bin folders are missing the first time a user does a build (or the user does a clean, because I have the clean target delete obj & bin), then the nuget restore only restores the packages and the obj folder for the project. If the package contains content that needs to be copied to the output directory on package restore, nuget does not perform the copy. If a second build is performed with the obj folder present from the previous restore, the package content is copied successfully to the output folder. This behavior seems to be the same for the GeneratePathProperty. The package reference path is only generated if the obj folder is already present on restore.\r\n\r\nAfter some testing and digging, it just seems like nuget needs to take the extra step of completing its work if the obj folder is absent. If the obj folder is absent and a restore is performed, it is generating the obj folder, restoring the packages to the global .nuget folder but is stopping there. It should lastly perform the content copy. I think the .g.props file that is generated within the obj folder is controlling that content copy as it contains all the paths to the content to copy, it's just not being invoked when nuget has to firstly generate the file.\r\n\r\nWhen the automatic copy on fresh restore failed, I tried using the GeneratePathProperty to manually execute an msbuild copy task to copy what I needed.. only to find out that it seems like the property is not generated unless obj (an .g.props) exists first. I need a way for the restore to work fully if the obj folder is absent on a fresh restore. If this comes from the built in copy or from me manually writing a copy task using GeneratePathProperty, it doesn't matter, I just need one or both to work.\r\n\r\nThe overall issue is that it is a bad omen to tell users of my project that they need to restore / build the project twice whenever they firstly clone the project or do a full clean. I think this has been mentioned elsewhere in the forum, but nuget restore should work fully from a fresh restore (no obj or bin folders). Saying that the built in msbuild clean target never touches the obj folder or the obj folder is restored by VSCode / Visual Studio with \"normal\" solution project structures, is not very valid. A clean should wipe out everything (the entire cache which includes the obj folder) and start from a fresh slate.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32093710580","Type":"PullRequestEvent","CreatedAt":"2023-09-25T22:33:53","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/12890","RelatedDescription":"Merged pull request \"label/stale/close community PR\" (#12890) at NuGet/Home","RelatedBody":"Fixes: https://github.com/NuGet/Client.Engineering/issues/2484\r\n"},{"Id":"32093184152","Type":"IssuesEvent","CreatedAt":"2023-09-25T22:01:58","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12801","RelatedDescription":"Closed issue \"CPM: PackageVersion metadata should be copied to PackageReference items\" (#12801) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nMSBuild.exe\r\n\r\n### Current Behavior\r\n\r\n- When using the NuGet Central Package Management feature, if additional metadata is defined on the `PackageVersion` item it is not copied to the corresponding `PackageReference`. I am specifically interested in the `PrivateAssets` metadata. I realize that the `PackageReference` can specify this, but it is easier to do this in the global package `.props` file instead of requiring all projects to specify it.\r\n\r\n### Desired Behavior\r\n\r\nAny metadata specified on the `PackageVersion` item should be copied to the corresponding `PackageReference` item. If the `PackageReference` already contains a value for the specified metadata then it should probably take precedence over the global value.\r\n\r\n### Additional Context\r\n\r\nThe [Microsoft.Build.CentralPackageVersions](https://github.com/microsoft/MSBuildSdks/tree/main/src/CentralPackageVersions) implementation handled this without issue because it relied on using `<PackageReference Update=\"xyz\" />` instead of mapping a different item."},{"Id":"32092054397","Type":"IssuesEvent","CreatedAt":"2023-09-25T21:01:14","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12868","RelatedDescription":"Closed issue \"Disabled checkbox in Dark mode is not distinguishable\" (#12868) at NuGet/Home","RelatedBody":"Include prerelease is enabled, Show vulnerable only is disabled\r\n![image](https://github.com/NuGet/Home/assets/43253759/a160538a-1638-48a2-a2d0-5839ffeed5aa)\r\n"},{"Id":"32091582584","Type":"IssuesEvent","CreatedAt":"2023-09-25T20:38:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12892","RelatedDescription":"Closed issue \"[Accessibility] The Vulnerabilities InfoBar link “Manage NuGet Packages” have two right-borders when focused on by Tab \" (#12892) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.8.0.115\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:     \r\n\r\n1. Create a C# Console App (.Net core) project.     \r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n\r\n3. Select the package source: “nuget.org” near the gear button.   \r\n\r\n4. Go to the \"Browse\" tab and search for a vulnerable package (e.g. \"Newtonsoft.Json\").  \r\n\r\n5. Select a vulnerable package version (e.g. 12.0.1) and click the “Install” button. \r\n\r\n6. Focus on the “Manage NuGet Packages” link by tab. \r\n\r\n   \r\n\r\n#### Expected:   \r\n\r\nThe Vulnerabilities InfoBar link “Manage NuGet Packages” only has one right-border.   \r\n\r\n#### Actual:      \r\n\r\nThe Vulnerabilities InfoBar link “Manage NuGet Packages” have two right-borders as below: \r\n\r\n\r\n![Screenshot 2023-09-21 024347](https://github.com/NuGet/Home/assets/84695155/79272f1a-794c-4063-976f-88be1ab0fe9c)\r\n\r\n\r\n#### Note:  \r\n\r\n1. The repro rate is 100%.      \r\n\r\n2. This is not a regression, since it is a new feature change.  \n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-26T03:30:22.2382564Z","RunDurationInMilliseconds":1071}