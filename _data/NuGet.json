{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34662904842","Type":"PullRequestEvent","CreatedAt":"2024-01-08T21:44:16","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9764","RelatedDescription":"Merged pull request \"Show TFM badges in package search results\" (#9764) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9629\r\n\r\nThis adds TFM badges to package search results:\r\n- We can choose to show either just asset frameworks, or both asset and computed frameworks. This will be based on whether the user selects the 'Include Computed Frameworks' checkbox in the new search filters (will be added with a later change). \r\n- We will show the lowest (asset/computed) version TFM from each of the 4 Framework generations (`.NET`, `.NET Core`, `.NET Standard`, `.NET Framework`).\r\n- The badges will link to the package's frameworks tab.\r\n- The TFM badges will be behind a feature flight.\r\n\r\nWe are reusing code previously written to display TFM badges on the package details page, but this needed some refactoring (See `src/NuGetGallery.Core/Frameworks/PackageFrameworkCompatibilityFactory.cs`) that touched a lot of different files.\r\n\r\nThe changes were primarily made in these files:\r\n\r\n- `src/NuGetGallery.Core/*`\r\n- `src/NuGetGallery/Controllers/PackagesController.cs`\r\n- `src/NuGetGallery/Helpers/ViewModelExtensions/ListPackageItemViewModelFactory.cs`\r\n- `src/NuGetGallery/Infrastructure/Lucene/ExternalSearchService.cs`\r\n- `src/NuGetGallery/ViewModels/ListPackageItemViewModel.cs`\r\n- `src/NuGetGallery/Views/Packages/_SupportedFrameworksBadges.cshtml`\r\n- `src/NuGetGallery/Views/Shared/_ListPackage.cshtml`\r\n- `tests/NuGetGallery.Core.Facts/Frameworks/PackageFrameworkCompatibilityFactoryFacts.cs`\r\n\r\nThe remaining files were changed either as a result of refactoring, or to add the feature flight for this change.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/1e9a3102-07f9-4a86-adf1-1cc86a62dcfe)\r\n\r\nAfter this change,\r\n\r\nSearch page (only asset frameworks):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3d67338c-88cd-48da-8a7e-6b1e8c96fdb2)\r\n\r\nSearch page (including computed frameworks):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3b182be0-e3b3-4b07-b7d2-ad0662a52283)\r\n\r\nWith deprecation/vulnerability indicators:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/b31d84cd-1991-458e-9451-954372939fa0)\r\n\r\nProfiles page:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3aa1c319-c5f3-48cd-9e2a-d4ec44d42e69)\r\n\r\nPackage Details page and the Frameworks tab (**Unchanged**):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/cd40560e-aafe-4903-bccf-0ea5f6ba9d35)\r\n"},{"Id":"34658621877","Type":"PullRequestEvent","CreatedAt":"2024-01-08T18:29:59","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9767","RelatedDescription":"Merged pull request \"Abstract typosquatting\" (#9767) at NuGet/NuGetGallery","RelatedBody":"Tracking issue: https://github.com/NuGet/Engineering/issues/4815\r\nSee at tracking issue for related PRs.\r\n"},{"Id":"34627104387","Type":"IssuesEvent","CreatedAt":"2024-01-07T08:50:19","Actor":"WithLithum","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9773","RelatedDescription":"Opened issue \"[Feature]: Allow images from Codeberg.org\" (#9773) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nAllow `readme.md` to reference images from `Codeberg.org`, specifically, `https://codeberg.org/*/*/raw/*/*/**.*` where `*` means a single directory while `**` means any directory or multiple directories. For example, the link to the one of the official logos of Codeberg in the official icon repository is `https://codeberg.org/Codeberg/Design/raw/branch/main/logo/icon/png/codeberg-logo_icon_blue-64x64.png`.\n\n### Additional Context and Details\n\n`Codeberg.org` is a FOSS-only code hosting platformed based on Forgejo, which is a soft fork of Gitea."},{"Id":"34587609862","Type":"PullRequestEvent","CreatedAt":"2024-01-05T01:38:15","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9739","RelatedDescription":"Merged pull request \"Prevent nupkg validation failure for malformed nupkg\" (#9739) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5039\r\n\r\nInstead of packages getting stuck in the validation pipeline, reject them earlier due to the double slash in the path.\r\n\r\n1. Double backslashes\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/0657d1fb-dfd3-4fa4-a6df-68ffbd799147)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/e9167840-afc8-4c6a-bbc2-cbefb6f884e8)\r\n\r\n1. Double forwardslashes\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/9db5cee9-a07e-498a-985e-0387995a5f3b)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/59518dc8-82c7-40c1-ae95-a746f6aa4efd)\r\n\r\n**After this change rejects earlier with message:**\r\nDouble forwardslash: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/c6f78ee8-2ed6-45a8-b109-31f56fc10c08)\r\n\r\nDouble backslash: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/cbc22868-99a8-4bfa-a3fc-c52ddef7b7a7)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34663248206","Type":"IssuesEvent","CreatedAt":"2024-01-08T22:01:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9866","RelatedDescription":"Closed issue \"Bad UX to get to NuGet from the \"Manage NuGet Packages\" screen\" (#9866) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1126396/bad-ux-to-get-to-nuget-from-the-manage-nuget-packa.html)._\n\n---\nRight-click a csproj project, select \"Manage NuGet Packages...\", the familiar screen appears for managing packages.\n\nLet's say you want to visit a package's page on NuGet for some additional information so you start quickly visually scanning your screen for any nuget links. The one that you'll spot first is **the Report Abuse link**, that you can then use to further navigate back to the package's page. In my case the situation is extra bad because the ReportAbuse part is wrapped to the next line.\n\n---\n### Original Comments\n\n#### Feedback Bot on 7/27/2020, 07:20 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Leftyx on 7/28/2020, 01:13 AM: \n\n<p>eh eh. I always do that.</p><p>The \"Report abuse\" is the most clicked url on the web, especially cause most packages don't have the link to the nuget packages, just the report abuse page.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"34663192605","Type":"IssuesEvent","CreatedAt":"2024-01-08T21:59:04","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9399","RelatedDescription":"Closed issue \"Adopt MIT license\" (#9399) at NuGet/Home","RelatedBody":"See also https://github.com/dotnet/roslyn/commit/0d04884c243978cdd609e219fdb63cb58ebec69d"},{"Id":"34663175243","Type":"IssuesEvent","CreatedAt":"2024-01-08T21:58:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13016","RelatedDescription":"Closed issue \"Add support for ECDSA certificates\" (#13016) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nIn May 2021, the minimum RSA key size for code signing and EV code signing was increased to 3072 bits as a result of the adoption of new CA/B standards. In addition, the private keys for those certificates are required to be stored securely (eg you cannot generate a CSR yourself and store the key locally). Many code signing certificate vendors have been using Yubikey FIPS tokens as a compliant way of meeting the storage requirements (private key storage must be on an HSM _or token_ that is FIPS 140-2/CC EAL4+ or equivalent). They do this by attestation using PIV - however, the PIV standard does not support RSA keys greater than 2048 bits, so, neither does the Yubikey. \r\n\r\nAs older 2048 bit certificates expire, or are rekeyed / regenerated, this poses a problem: Nuget does not support ECDSA, and Yubikeys do not support RSA > 2048. Many vendors are simply migrating users to ECDSA (as a for instance, mine did) to get around the Yubikey issue, because many other tools (including signtool) work just fine with ECDSA. If you order a new certificate from a vendor and order a token - you are almost assuredly receiving ECDSA on a FIPS Yubikey.\r\n\r\nAs far as I can tell (and I would be happy to be wrong) this leaves no path for many smaller organizations or users that does not involve either:\r\n\r\n* expensive HSMs (even a \"low end\" Yubikey HSM is $950 for a FIPS-certified version, and this cannot be used with my vendor, as an example, without undergoing an expensive (multiple $K) auditing process)\r\n* generally terrible third party tooling (such as a cloud signing service).\r\n\r\nI feel fairly strongly that:\r\n\r\n1. I should not have to use a third party tool written in Java to sign my nuget packages (what my vendor suggested)\r\n2. I should not need to spend thousands of dollars to sign Nuget packages\r\n\r\nI would suspect I am not alone in this regard. \r\n\r\n\n\n### Additional Context and Details\n\nI see that this was discussed previously in https://github.com/NuGet/Home/issues/11232 and I am hoping that two years later there will be a different response or a little bit more discussion.\r\n\r\nThank you for your time reading this and your efforts on Nuget. I appreciate both.\r\n"},{"Id":"34662917950","Type":"IssuesEvent","CreatedAt":"2024-01-08T21:44:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13096","RelatedDescription":"Closed issue \"All user to add comments on a installed nuget package\" (#13096) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/All-user-to-add-comments-on-a-installed-/10363496)._\n\n---\nIt would be helpful to us if you were to have the ability to add a user comment on installed nuget packages.  We have many instances that we cannot update a package because of some bug or other issue.  If we had the ability to comment and also put an icon on the package that was installed, we would not run into issues of installing package updates that may give us an issue.\n\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/15/2023, 11:05 PM: \n\n(private comment, text removed)"},{"Id":"34658705041","Type":"IssuesEvent","CreatedAt":"2024-01-08T18:33:30","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13140","RelatedDescription":"Opened issue \"Cancelling static graph-based restore does not end the restore process\" (#13140) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nStatic graph-based restore launches an external process and waits for it to return:\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/StaticGraphRestoreTaskBase.cs#L184\n\nHowever, the code passes a cancellation token which is fired when the user cancels a build via CTRL+C.  The `catch` code is there to return `true` so that cancelled builds don't \"fail\" but it does not kill the process.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/StaticGraphRestoreTaskBase.cs#L211-L217\n\nThe `try...catch` which handles cancellation should be moved to surround just the `Semaphore.Wait()` since that's the only call that would throw an `OperationCanceledException`.  The proceeding code would then kill the process and return `true` in the case where the user canceled the build.\n\n### Verbose Logs\n\n_No response_"},{"Id":"34657982337","Type":"IssuesEvent","CreatedAt":"2024-01-08T18:03:06","Actor":"FerdinandStapenhorst","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13139","RelatedDescription":"Opened issue \"Nuget.exe not installing latest package\" (#13139) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.8.0.131\n\n### Worked before?\n\nno\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nSee screen shot:\r\n- I update to latest nuget.exe\r\n- I deleted all local package versions from .nuget folder\r\n- I list the latest package which is 10.1.20\r\n- I run install and only the previous version is found\r\n\r\n<img width=\"1207\" alt=\"Screenshot 2024-01-08 at 19 02 09\" src=\"https://github.com/NuGet/Home/assets/118904606/b8286c6c-ee8e-435d-8d6d-367280af80cb\">\r\n\n\n### Verbose Logs\n\n```shell\nC:\\WINDOWS\\system32>nuget list DrivveDmXmlServer.Distribution -source https://172.20.0.7:8443/repository/nuget-hosted/ -Verbosity detailed\r\nNuGet Version: 6.8.0.131\r\nEnhanced retry: HttpRetryHandler is in a state that retry would have been abandoned or not waited if it were not enabled.\r\n  GET https://172.20.0.7:8443/repository/nuget-hosted/$metadata\r\n  OK https://172.20.0.7:8443/repository/nuget-hosted/$metadata 421ms\r\nEnhanced retry: HttpRetryHandler is in a state that retry would have been abandoned or not waited if it were not enabled.\r\n  GET https://172.20.0.7:8443/repository/nuget-hosted/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm='DrivveDmXmlServer.Distribution'&targetFramework=''&includePrerelease=false&$skip=0&$top=30&semVerLevel=2.0.0\r\n  OK https://172.20.0.7:8443/repository/nuget-hosted/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm='DrivveDmXmlServer.Distribution'&targetFramework=''&includePrerelease=false&$skip=0&$top=30&semVerLevel=2.0.0 705ms\r\nDrivveDmXmlServer.Distribution\r\n 10.1.20\r\n DrivveDmXmlServer Distribution\r\n\r\n\r\nC:\\WINDOWS\\system32>nuget install DrivveDmXmlServer.Distribution -source https://172.20.0.7:8443/repository/nuget-hosted/ -Verbosity detailed\r\nNuGet Version: 6.8.0.131\r\nFeeds used:\r\n  https://172.20.0.7:8443/repository/nuget-hosted/\r\n\r\nInstalling package 'DrivveDmXmlServer.Distribution' to 'C:\\WINDOWS\\system32'.\r\n  CACHE https://172.20.0.7:8443/repository/nuget-hosted/FindPackagesById()?id='DrivveDmXmlServer.Distribution'&semVerLevel=2.0.0\r\n\r\n\r\nAttempting to gather dependency information for package 'DrivveDmXmlServer.Distribution.10.1.19' with respect to project 'C:\\WINDOWS\\system32', targeting 'Any,Version=v0.0'\r\nPackage DrivveDmXmlServer.Distribution from source Drivve Intern gathered from cache.\r\nTotal number of results gathered : 1\r\nGathering dependency information took 31 ms\r\nSummary of time taken to gather dependencies per source :\r\nAttempting to resolve dependencies for package 'DrivveDmXmlServer.Distribution.10.1.19' with DependencyBehavior 'Lowest'\r\nResolving dependency information took 0 ms\r\nResolving actions to install package 'DrivveDmXmlServer.Distribution.10.1.19'\r\nResolved actions to install package 'DrivveDmXmlServer.Distribution.10.1.19'\r\nRetrieving package 'DrivveDmXmlServer.Distribution 10.1.19' from 'Drivve Intern'.\r\n  GET https://172.20.0.7:8443/repository/nuget-hosted/DrivveDmXmlServer.Distribution/10.1.19\r\n  OK https://172.20.0.7:8443/repository/nuget-hosted/DrivveDmXmlServer.Distribution/10.1.19 2170ms\r\nAcquiring lock for the installation of DrivveDmXmlServer.Distribution 10.1.19\r\nAcquired lock for the installation of DrivveDmXmlServer.Distribution 10.1.19\n```\n"},{"Id":"34657717011","Type":"IssuesEvent","CreatedAt":"2024-01-08T17:52:02","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13138","RelatedDescription":"Opened issue \"ResolvedDependencyKey should be struct to reduce memory allocations\" (#13138) at NuGet/Home","RelatedBody":"The `NuGet.Commands.ResolvedDependencyKey` class is allocated a lot during dependency resolution and instead could be a `struct` which would reduce memory usage.  This would be a breaking change for any user who is using the API.  This is a list of the public APIs that will change:\n\n```\nNuGet.Commands.ResolvedDependencyKey.Equals(NuGet.Commands.ResolvedDependencyKey other) -> bool\nNuGet.Commands.ResolvedDependencyKey.ResolvedDependencyKey() -> void\nstatic NuGet.Commands.ResolvedDependencyKey.operator !=(NuGet.Commands.ResolvedDependencyKey left, NuGet.Commands.ResolvedDependencyKey right) -> bool\nstatic NuGet.Commands.ResolvedDependencyKey.operator ==(NuGet.Commands.ResolvedDependencyKey left, NuGet.Commands.ResolvedDependencyKey right) -> bool\nstatic NuGet.Commands.UnexpectedDependencyMessages.DependencyRangeHasMissingExactMatch(NuGet.Commands.ResolvedDependencyKey dependency) -> bool\n```"},{"Id":"34648184161","Type":"IssuesEvent","CreatedAt":"2024-01-08T12:34:35","Actor":"cesar2","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13137","RelatedDescription":"Closed issue \"500 (Internal Server Error) response when running dotnet list package --vulnerable \" (#13137) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nHi, I need to [Scan NuGet Packages for Security Vulnerabilities](https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/) and I created a test project, installed a vulnerable nuget package on purpose (System.Net.Http 4.1.4) to test the command:\r\n\r\n![image](https://github.com/NuGet/Home/assets/5868552/c8fa9c57-9826-4827-ad06-89766f501145)\r\n\r\nIt works when I run without the vulnerability flag, but I get a server error when adding the --vulnerable flag:\r\n\r\n![image](https://github.com/NuGet/Home/assets/5868552/c782a9f6-ba0e-4b21-9514-575934551593)\r\n\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34646867278","Type":"IssuesEvent","CreatedAt":"2024-01-08T11:45:36","Actor":"cesar2","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13137","RelatedDescription":"Opened issue \"500 (Internal Server Error) response when running dotnet list package --vulnerable \" (#13137) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nHi, I need to [Scan NuGet Packages for Security Vulnerabilities](https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/) and I created a test project, installed a vulnerable nuget package on purpose (System.Net.Http 4.1.4) to test the command:\r\n\r\n![image](https://github.com/NuGet/Home/assets/5868552/c8fa9c57-9826-4827-ad06-89766f501145)\r\n\r\nIt works when I run without the vulnerability flag, but I get a server error when adding the --vulnerable flag:\r\n\r\n![image](https://github.com/NuGet/Home/assets/5868552/c782a9f6-ba0e-4b21-9514-575934551593)\r\n\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-09T03:30:21.588783Z","RunDurationInMilliseconds":2066}