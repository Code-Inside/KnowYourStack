{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12967649298","Type":"IssuesEvent","CreatedAt":"2020-07-21T03:40:49","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8116","RelatedDescription":"Opened issue \"Take gitHubDatabaseKey out of vulnerability category entries\" (#8116) at NuGet/NuGetGallery","RelatedBody":"No need to reflow after this change. This value isn't being propagated to metadata, and won't be documented, so it can just be the format for future catalog updates."},{"Id":"12964756257","Type":"PullRequestEvent","CreatedAt":"2020-07-20T21:03:05","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8115","RelatedDescription":"Opened pull request \"Add functional tests on Gallery for Advanced Search\" (#8115) at NuGet/NuGetGallery","RelatedBody":"This PR adds some basic functional tests on the Gallery for Advanced Search. Stuff being tested:\r\n\r\n- package type filter (dependency, template and a random type \"ARandomType\")\r\n- total downloads sorting\r\n- last updated sorting"},{"Id":"12964287823","Type":"IssuesEvent","CreatedAt":"2020-07-20T20:14:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8114","RelatedDescription":"Opened issue \"[Heartbeats noise] Auxiliary2AzureSearch can crash due to TaskCanceledException\" (#8114) at NuGet/NuGetGallery","RelatedBody":"A `TaskCanceledException` can be throw sometimes when indexing documents to Azure Search. This can cause the job to crash. It should be verified that retries are enabled for this type of exception. By default, they are not."},{"Id":"12964116719","Type":"IssuesEvent","CreatedAt":"2020-07-20T19:56:06","Actor":"jkonicki","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8110","RelatedDescription":"Closed issue \"Unable to publish packages to nuget with \"Kubernetes\" anywhere in package name\" (#8110) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWhen trying to publish, with nuget cli, a new package under our reserved prefix `Steeltoe` we are getting a message that \"This package ID has been reserved.\" message.  \r\n\r\nThis appears to only happen to our package with the word `Kubernetes` in the package name.  \r\n```\r\n“Steeltoe.Common.Kubernetes.3.0.0-m3.nupkg' already exists at feed 'https://www.nuget.org/api/v2/package'.\r\n2020-07-14T19:16:15.4087082Z This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID.”\r\n```\r\n\r\nI excluded this specific package and all other packages published without a problem, until it got to another package with the work `Kubernetes` in it. The same \"This package ID has been reserved\" message came up.   \r\n```\r\n2020-07-14T20:00:22.2858563Z Package 'D:\\a\\r1\\a\\_SteeltoeOSS.steeltoe\\Packages\\Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.nupkg' already exists at feed 'https://www.nuget.org/api/v2/package'.\r\n2020-07-14T20:00:22.2867646Z This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID.\r\n2020-07-14T20:00:22.2957046Z Pushing Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n2020-07-14T20:00:22.2958465Z   PUT https://www.nuget.org/api/v2/symbolpackage/\r\n2020-07-14T20:00:22.3862872Z   NotFound https://www.nuget.org/api/v2/symbolpackage/ 90ms\r\n2020-07-14T20:00:22.6729059Z nuget : Response status code does not indicate success: 404 (Not Found).\r\n2020-07-14T20:00:22.6730012Z At D:\\a\\_temp\\94375afb-439d-46a9-bff8-2ce95a337705.ps1:7 char:6\r\n2020-07-14T20:00:22.6731312Z +      nuget push $_ *** -So ...\r\n2020-07-14T20:00:22.6732742Z +      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2020-07-14T20:00:22.6824420Z     + CategoryInfo          : NotSpecified: (Response status...04 (Not Found).:String) [], RemoteException\r\n2020-07-14T20:00:22.6828244Z     + FullyQualifiedErrorId : NativeCommandError\r\n```\r\nWhen I excluded all Kubernetes named packages, publishing completed, but obviously without all the packages I need. \r\n\r\n\r\n**>>> Is there some sort of reserved term for `*Kubernetes*` for NuGet?  If yes, why? and how do I get approval?  Or is there some other issue we are not seeing?**\r\n\r\nThanks.\r\n\r\n\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. nuget push D:\\a\\r1\\a\\_SteeltoeOSS.steeltoe\\Packages\\Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.nupkg $(NuGetApiKey) -Source https://api.nuget.org/v3/index.json -SkipDuplicate -Verbosity detailed\r\n\r\n### Expected behavior\r\nThe Package should publish if it is using my prefix no matter what follows.\r\n\r\n"},{"Id":"12964112109","Type":"IssuesEvent","CreatedAt":"2020-07-20T19:55:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8062","RelatedDescription":"Reopened issue \"Durable cursor sometimes fails due to storage timeout\" (#8062) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nCatalog2Registration should have retries on Blob Storage. This exception was logged:\r\n\r\n```\r\n\"Job Failed to Run\": \"Microsoft.WindowsAzure.Storage.StorageException: The client could not finish the operation within specified timeout. ---> System.TimeoutException: The client could not finish the operation within specified timeout.\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.WindowsAzure.Storage.Core.Executor.Executor.EndExecuteAsync[T](IAsyncResult result) in c:\\Program Files (x86)\\Jenkins\\workspace\\release_dotnet_master\\Lib\\ClassLibraryCommon\\Core\\Executor\\Executor.cs:line 51\r\n   at Microsoft.WindowsAzure.Storage.Core.Util.AsyncExtensions.<>c__DisplayClass7.<CreateCallbackVoid>b__5(IAsyncResult ar) in c:\\Program Files (x86)\\Jenkins\\workspace\\release_dotnet_master\\Lib\\ClassLibraryCommon\\Core\\Util\\AsyncExtensions.cs:line 121\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.AzureStorage.<OnLoadAsync>d__19.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\AzureStorage.cs:line 356\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.Storage.<LoadAsync>d__17.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\Storage.cs:line 107\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.Storage.<LoadStringAsync>d__19.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\Storage.cs:line 152\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.DurableCursor.<LoadAsync>d__5.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\DurableCursor.cs:line 34\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Catalog2Registration.Catalog2RegistrationCommand.<ExecuteAsync>d__9.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Catalog2RegistrationCommand.cs:line 88\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Catalog2Registration.Catalog2RegistrationCommand.<ExecuteAsync>d__8.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Catalog2RegistrationCommand.cs:line 49\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Job.<Run>d__1.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Job.cs:line 23\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.JobRunner.<JobLoop>d__14.MoveNext() in E:\\A\\_work\\3286\\s\\src\\NuGet.Jobs.Common\\JobRunner.cs:line 265\r\nRequest Information\r\nRequestID:\r\nRequestDate:\r\nStatusMessage:\r\nErrorCode:\r\n\"\r\n```\r\n\r\n### To Reproduce\r\n\r\nSee if you can put a delegating handler in the request pipeline.\r\nAdd a host name mapping for the Azure Blob Storage to 192.168.255.255. \r\n\r\n### Expected behavior\r\n\r\nThere should be retries. It's not clear that there are retries implemented in the code. Let's verify retries occur for exceptions like these."},{"Id":"12963755322","Type":"IssuesEvent","CreatedAt":"2020-07-20T19:18:58","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8100","RelatedDescription":"Closed issue \"Remove TLS banner\" (#8100) at NuGet/NuGetGallery","RelatedBody":"A month had passed since NuGet.org had TLS 1.0/1.1 support disabled. It is time to drop the banner with the announcement.\r\nTop search results for the error you get when you try restoring packages on affected systems although not ideal do contain a fix that should help on the majority of the systems ([Google](https://www.google.com/search?q=nuget+Could+not+create+SSL%2FTLS+secure+channel), [Bing](https://www.bing.com/search?q=nuget+Could+not+create+SSL%2FTLS+secure+channel)), so people should be able to self-help."},{"Id":"12963376339","Type":"PullRequestEvent","CreatedAt":"2020-07-20T18:41:06","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8113","RelatedDescription":"Merged pull request \"Apply fix\" (#8113) at NuGet/NuGetGallery","RelatedBody":"This PR fixes an alignment issue of the \"Filter\" button for small screens:\r\n\r\n## Before:\r\n![image](https://user-images.githubusercontent.com/65630625/87970580-f48a6280-ca91-11ea-8882-1696b6ea1b45.png)\r\n\r\n## After:\r\n![image](https://user-images.githubusercontent.com/65630625/87970657-09ff8c80-ca92-11ea-84e2-4e7c010792fc.png)\r\n\r\n"},{"Id":"12963025383","Type":"PullRequestEvent","CreatedAt":"2020-07-20T18:06:15","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8113","RelatedDescription":"Opened pull request \"Apply fix\" (#8113) at NuGet/NuGetGallery","RelatedBody":"This PR fixes an alignment issue of the \"Filter\" button for small screens:\r\n\r\n## Before:\r\n![image](https://user-images.githubusercontent.com/65630625/87970580-f48a6280-ca91-11ea-8882-1696b6ea1b45.png)\r\n\r\n## After:\r\n![image](https://user-images.githubusercontent.com/65630625/87970657-09ff8c80-ca92-11ea-84e2-4e7c010792fc.png)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12968123235","Type":"IssuesEvent","CreatedAt":"2020-07-21T04:58:14","Actor":"drewgillies","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9823","RelatedDescription":"Closed issue \"Show transitive packages for PackageReference projects in PMUI\" (#9823) at NuGet/Home","RelatedBody":"Show transitive packages for PackageReference type projects in PMUI\r\n\r\nSpec: https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages"},{"Id":"12968105202","Type":"IssuesEvent","CreatedAt":"2020-07-21T04:55:17","Actor":"drewgillies","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9823","RelatedDescription":"Opened issue \"Show transitive packages for PackageReference projects in PMUI\" (#9823) at NuGet/Home","RelatedBody":"Show transitive packages for PackageReference type projects in PMUI\r\n\r\nSpec: https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages"},{"Id":"12967454685","Type":"IssuesEvent","CreatedAt":"2020-07-21T03:10:12","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9759","RelatedDescription":"Closed issue \"[Test Failure] None package is showed under ‘Reference’ node in ‘Solution Explorer’ after installing package with ‘PackageReference’ format \" (#9759) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet Version:** Dev\\5.7.0.6689\r\n**VS Version:** Master\\30306.116\r\n**OS Version:** Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n1. Install VS: [https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3869190&view=ms.vss-build-web.run-extensions-tab](url)\r\n2. Install NuGet Client: [\\\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Dev\\5.7.0.6689\\artifacts\\VS15\\NuGet.Tools.vsix](url)\r\n\r\n## Repro steps: \r\n\r\n1. Create a C# Console App (.Net Framework) project.\r\n2. ‘Tools’->’NuGet Package Manager’->’ Package Manager Settings’->check in ‘Allow format section on first package install ’.\r\n3. Open ‘Manager NuGet Packages…’.\r\n4. Install package ‘Newtonsoft.json’ with **‘PackageReference**’ format.\r\n\r\n## Expected:\r\nThe Package should be showed under ‘Reference’ node in ‘Solution Explorer’.\r\n\r\n## Actual:\r\nNone package is showed under ‘Reference’ node in ‘Solution Explorer’ as below screenshot.\r\n![bug0707](https://user-images.githubusercontent.com/20632775/86763199-bd6f8680-c079-11ea-99f6-7097b901a1ca.png)\r\n\r\n## Notes: \r\n1. The issue repro on VS Master\\30306.116 with implicit NuGet Client Dev\\5.7.0.6677.\r\n2. The issue didn’t repro on UWP project and .NET Core project.\r\n\r\n\r\n"},{"Id":"12967022134","Type":"IssuesEvent","CreatedAt":"2020-07-21T02:05:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9822","RelatedDescription":"Opened issue \"Reduce resource contain at solution load time cause by blocking a threadpool thread with BlockingCollection.Take\" (#9822) at NuGet/Home","RelatedBody":"At solution load time, we listen for nominations and we try to batch as many of them into one restore operation. \r\n\r\nWe either wait for all projects to get nominated or for 20s.\r\n\r\nTrick is we are waiting by blocking a threadpool thread: https://github.com/NuGet/NuGet.Client/blob/4a02c08cb2cfb87c77f0d378e361052944b8f3aa/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L491. \r\n"},{"Id":"12966979739","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:58:50","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9812","RelatedDescription":"Closed issue \"FileAndForget posts a new event for every point of usage\" (#9812) at NuGet/Home","RelatedBody":"## Details about Problem\n\nFor fire-and-forget asynchronous code, we are currently using VSTelemetryHelpers.FireAndForget helper to log any failures from detached async code. This method is implements so that there is a specific event for every point of failure.\n\nFor GDPR categorization and ease of investigating those failures, it may be useful to always post same event, and carry additional context information in description and exception stack trace."},{"Id":"12966915668","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:48:52","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9600","RelatedDescription":"Closed issue \"dotnet list should support --verbosity\" (#9600) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\ndotnet.exe --version: 3.1.202\r\nOS version: Windows 10, version 1909\r\nWorked before? no\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new project, e.g. `dotnet new console`\r\n1. Add a package, e.g. `dotnet add package NuGet.Packaging`\r\n1. List deprecated packages, e.g. `dotnet list package --deprecated`\r\n\r\nNo HTTP `GET` and `OK` log lines are visible, unlike `dotnet restore --verbosity normal`, `dotnet nuget push`, and `dotnet nuget delete`. Especially when listing many packages or using `--include-transitive` it can lead to the command hanging for a long time without any visible output.\r\n\r\nIt would be helpful to have a verbosity switch like `dotnet restore` such as `--verbosity normal` to show the HTTP spew. This would allow understanding why the operation is slow and if one particular source is behaving badly.\r\n\r\nYou can do this investigation with restore via `dotnet restore --verbosity normal`.\r\n\r\nI think it's right that the log lines are not shown by default (there are a lot sometimes) but there should be a way to see them without launching Fiddler or some other MITM proxy.\r\n\r\nI think it's hardcoded to not allow this here:\r\nhttps://github.com/NuGet/NuGet.Client/blob/eb9ad919724e5ef435d6321b775868c9f2c0f9a2/src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/PackageReferenceCommands/ListPackage/ListPackageCommandRunner.cs#L649\r\n\r\n### Verbose Logs\r\n\r\n> Please include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nWell, that's the problem... 😂\r\n\r\n```\r\nPS C:\\Users\\joelv\\Desktop\\testproj> dotnet list package --deprecated --verbosity diag\r\nUnrecognized command or argument '--verbosity'\r\nUnrecognized command or argument 'diag'\r\nUsage: dotnet list <PROJECT | SOLUTION> package [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>   The project or solution file to operate on. If a file is not specified, the command will search the current directory for one.\r\n\r\nOptions:\r\n  -h, --help                                Show command line help.\r\n  --outdated                                Lists packages that have newer versions.\r\n  --deprecated                              Lists packages that have been deprecated.\r\n  --framework <FRAMEWORK | FRAMEWORK\\RID>   Chooses a framework to show its packages. Use the option multiple times for multiple frameworks.\r\n  --include-transitive                      Lists transitive and top-level packages.\r\n  --include-prerelease                      Consider packages with prerelease versions when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --highest-patch                           Consider only the packages with a matching major and minor version numbers when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --highest-minor                           Consider only the packages with a matching major version number when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --config <CONFIG_FILE>                    The path to the NuGet config file to use. Requires the '--outdated' or '--deprecated' option.\r\n  --source <SOURCE>                         The NuGet sources to use when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --interactive                             Allows the command to stop and wait for user input or action (for example to complete authentication).\r\n```\r\n\r\n### Sample Project\r\n\r\n[testproj.zip](https://github.com/NuGet/Home/files/4672506/testproj.zip)\r\n"},{"Id":"12966827153","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:36:35","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9821","RelatedDescription":"Opened issue \"NuGet.CommandLine.XPlat should not have public APIs\" (#9821) at NuGet/Home","RelatedBody":"`NuGet.CommandLine.XPlat` is an executable, not a class library, that is the entry point to the `dotnet nuget` CLI, plus some other `dotnet` CLI commands such as `dotnet add package`, and `dotnet list package`.\r\n\r\nUnlike `NuGet.CommandLine`, which is also an exe, but is packed into a nupkg in the `tools\\` directory and therefore cannot be referenced by a project`, `NuGet.CommandLine.XPlat` is packed like a class library and can be referenced by projects. The reason the project is packed into a nupkg is because this is how we insert into the .NET SDK and `dotnet` CLI.\r\n\r\nHowever, maintaining API and ABI compatibility requires an unreasonable burden that is unreasonable for a project that is not intended to be a class library. Here is an example of this burden affecting productivity: https://github.com/NuGet/NuGet.Client/pull/3480#discussion_r454718106\r\n\r\nThis would be made worse when we start using the PublicApiAnalyzers: https://github.com/NuGet/NuGet.Client/pull/3512\r\n\r\nIdeally we should change how we insert into the .NET SDK, so that this package is no longer being uploaded to nuget.org, but that requires much more effort than changing the visibility of all classes in the project. Therefore, I propose we change all APIs to `internal` in `NuGet.CommandLine.XPlat`."},{"Id":"12964654288","Type":"IssuesEvent","CreatedAt":"2020-07-20T20:52:14","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9652","RelatedDescription":"Closed issue \"nuget.exe, install-package, install-module: newtonsoft being used by another process\" (#9652) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1064525/nugetexe-install-package-install-module-newtonsoft.html)._\n\n---\n[regression] [worked-in:16.6.0]\r\nThe process cannot access the file Newtonsoft.Json.dll because it is being used by another process.\n\n* VS2019 16.6.1 - Manage Nuget Packages (Install button), Package Manager Console (Install-Package)\n* Powershell 7.1 command line: Install-Module\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 6/3/2020, 11:42 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"12964604124","Type":"IssuesEvent","CreatedAt":"2020-07-20T20:46:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9643","RelatedDescription":"Closed issue \"ContentFiles from Link'ed Files not in correct folder\" (#9643) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nmsbuild / VS\r\n\r\nNuGet version (x.x.x.xxx): 5.6.0.5\r\n\r\ndotnet.exe --version (if appropriate): 3.1.300\r\n\r\nVS version (if appropriate): 16.6.1\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version: no\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nWhen adding contentFiles into a nuget package via the `<Content>` node inside a CSPROJ file, the correct subfolder is not taken into consideration and the file is put into the `contentFiles\\{lang}\\{arch}\\` root folder.\r\nThis only happens for elements with a `<Link>`'ed reference. Local files are put into the respective folders correctly.\r\n\r\nThis is how my csproj looks like\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"SubFolder\\LocalFile.txt\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Include=\"..\\LinkedFile.txt\" Link=\"SubFolder\\LinkedFile.txt\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Include=\"SubFolder\\LocalFile.txt\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nThis is how it looks in VisualStudio\r\n![image](https://user-images.githubusercontent.com/237891/83642729-81935e00-a5af-11ea-87b3-a0177d7c35d9.png)\r\n\r\nAnd this is how it looks like in the final nuget package\r\n![image](https://user-images.githubusercontent.com/237891/83642795-940d9780-a5af-11ea-91bc-92709d647dfe.png)\r\n\r\nMy understanding is, that this is a bug and that the folder structure created via the csrpoj file should be the same within `contentFiles`, no matter whether it's a linked or local file.\r\n\r\n...\r\n\r\n\r\n### Sample Project\r\n[ContentFilesFromLinksMissingFolder.zip](https://github.com/NuGet/Home/files/4723641/ContentFilesFromLinksMissingFolder.zip)\r\n\r\n\r\n"},{"Id":"12964447860","Type":"IssuesEvent","CreatedAt":"2020-07-20T20:30:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9627","RelatedDescription":"Closed issue \"Is it possible to copy contentFiles to executable project's output only?\" (#9627) at NuGet/Home","RelatedBody":"Let's assume I have the following project structure:\r\n\r\n```\r\nExecutableProject\r\n│\r\n└── Project A\r\n    │\r\n    └── Project B\r\n        │\r\n        └── ContentFilesNugetPackage\r\n```\r\n\r\nThe NuGet package contains some assets which are required by Library B at runtime.\r\nThe nuspec file for the package looks like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\r\n    <metadata>\r\n        <id>test.package</id>\r\n        <version>1.0.0</version>\r\n        <description>Test content</description>\r\n        <authors>demo</authors>\r\n\t\t\r\n        <contentFiles>\r\n            <files include=\"**/*\" buildAction=\"content\" copyToOutput=\"true\" flatten=\"false\" />\r\n        </contentFiles>\r\n    </metadata>\r\n</package>\r\n```\r\n\r\nThis setup actually works. The assets will be copied to the executable project's output path on build.\r\n\r\n### the problem\r\n\r\nThe assets will not only be copied to the ExecutableProject's output path, but also to the output paths of Project A and Project B.\r\nThis is a problem in case there are a lot of nuget packages, there are a lot of asset files and the project dependency graph is deep, because it  increases the build time.\r\n\r\nIs it possible to build the nuget package in a way so that the contentFiles are copied to executable project's output only?\r\nI'm thinking of a behavior like runtime files, but I want to be able to include any file (not just assemblies) and keep the folder hierarchy.\r\n\r\nI have tried different combinations of buildAction, copyToOutput and PrivateAssets (in Project B) but I couldn't get it to work.\r\nEither the assets are copied to all related project's output paths, or the assets aren't copied at all.\r\n\r\nIs the scenario I describe supported by NuGet?\r\n\r\n### demo project\r\n\r\nI have built a small projects which demonstrates the problem:\r\n[nuget-issue-demo.zip](https://github.com/NuGet/Home/files/4703451/nuget-issue-demo.zip)\r\n\r\n### tools versions\r\n\r\nnuget.exe: 5.6.0.6591\r\ndotnet.exe: 3.1.201\r\nVisual Studio: 16.5.4"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-21T05:30:43.9994716Z","RunDurationInMilliseconds":1822}