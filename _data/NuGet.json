{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33439853159","Type":"PullRequestEvent","CreatedAt":"2023-11-17T19:13:13","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9710","RelatedDescription":"Merged pull request \"Fixing popularity transfer download count bug, surfacing additional validation info\" (#9710) at NuGet/NuGetGallery","RelatedBody":"1. The Popularity Transfer Admin Panel has a bug where it shows version-specific download counts for packages, rather than the package registration's download count, which is what we want (we transfer popularity from one package registration to another). I had to refactor some code to get that data correctly. This now works:\r\n(DEV packages: https://dev.nugettest.org/packages/Newtonsoft.Json/)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/cfb0981a-0010-420b-95e6-4a25811e3eef)\r\n\r\n\r\n2. I also added some more validation info to the Admin Panel page, which should save us from having to go look in the SQL DB manually every time every time: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2650b9a4-7113-429b-8f71-1dcf02f1f2a6)\r\n"},{"Id":"33438585783","Type":"PullRequestEvent","CreatedAt":"2023-11-17T18:13:18","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9733","RelatedDescription":"Merged pull request \"Refactored FrameworkCompatibilityService for use in NuGet.Jobs\" (#9733) at NuGet/NuGetGallery","RelatedBody":"We want to reuse the `FrameworkCompatibilityService` in the NuGet.Jobs repo to get packages' computed frameworks in the Search index-builder jobs. To make this code easier to reuse, I made it a static class. I also updated all its existing references and tests.\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/4979"},{"Id":"33432077602","Type":"IssuesEvent","CreatedAt":"2023-11-17T14:07:01","Actor":"IrinaPykhova","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9734","RelatedDescription":"Opened issue \"[NuGet.org Bug]: net8.0-windows does not show as a computed compatible framework for a net6.0-windows and net7.0-windows packages\" (#9734) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWe are developing .Net controls for different platforms. This month we tested all our controls for compatibility with .Net 8. .Net 6 packages are fully compatible and can work under .Net 8, but Nuget.org doesn't show net8.0-windows in the list of computed frameworks for all the packages which target net6.0-windows.\r\nThe same happens with other platforms like Android or iOS: https://github.com/NuGet/NuGetGallery/issues/9711\r\n\r\nNuget.org only shows net8.0 for all platforms if original target is net6.0 without platform specifier. But it is not possible to use for WinForms or WPF packages.\n\n### Repro Steps\n\nOpen this link: https://www.nuget.org/packages/C1.WPF.Core/7.0.20233.662#supportedframeworks-body-tab\n\n### Expected Behavior\n\nnet8.0-windows should present in the list of additional computed target frameworks\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/19591075/e4005849-0a3b-4939-bfe6-bb08848be3fd)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33444578005","Type":"IssuesEvent","CreatedAt":"2023-11-17T23:54:19","Actor":"gmartinka","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13022","RelatedDescription":"Closed issue \"Solution level NuGetAuditLevel settings\" (#13022) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nVisual Studio Package Management UI\r\n\r\n### The Elevator Pitch\r\n\r\nWhen dealing with a solution with a lot of projects it is difficult to delay dealing with the `NuGetAudit `errors. \r\n\r\nA solution level `NuGetAuditLevel` setting to adjust the entire solution would be appreciated. \r\n\r\n### Additional Context and Details\r\n\r\nMy solution uses `TreatWarningsAsErrors` and after updating VS to 17.8.0 I now have 26 failed projects in my solution due to nuget audit errors. My team has opted to work on these package updates on a separate timeline which means I need a way to proceed with my work without updating. Changing the audit level in 26 projects is annoying and I will want to change it back when I push my work so that the vulnerabilities stay visible. "},{"Id":"33443874194","Type":"IssuesEvent","CreatedAt":"2023-11-17T22:54:32","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12991","RelatedDescription":"Closed issue \"Add responsive testing section in UI guidelines doc.\" (#12991) at NuGet/Home","RelatedBody":"We can improve our UI development process by adding responsive testing in multiple resolutions. "},{"Id":"33443564563","Type":"PullRequestEvent","CreatedAt":"2023-11-17T22:32:23","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13024","RelatedDescription":"Opened pull request \"Technical explanation for `disableTLSCertificateValidation`\" (#13024) at NuGet/Home","RelatedBody":"Adds technical explanation for implementing a `disableTLSCertificateValidation` option which allows disabling TLS certificate validation."},{"Id":"33443177972","Type":"IssuesEvent","CreatedAt":"2023-11-17T22:09:08","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13023","RelatedDescription":"Opened issue \"Disable TLS certificate validation when `disableTLSCertificateValidation` is set in the config file.\" (#13023) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nDisable TLS certificate validation for the HTTP client handler when `disableTLSCertificateValidation` is set in the config file.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33443030145","Type":"IssuesEvent","CreatedAt":"2023-11-17T22:00:24","Actor":"gmartinka","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13022","RelatedDescription":"Opened issue \"Solution level NuGetAuditLevel settings\" (#13022) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nWhen dealing with a solution with a lot of projects it is difficult to delay dealing with the NuGetAudit errors. \r\n\r\nA solution level NuGetAuditLevel setting to adjust the entire solution would be appreciated. \n\n### Additional Context and Details\n\nAfter updating VS to 17.8.0 I now have 26 failed projects in my solution due to nuget audit errors. My team has opted to work on these package updates on a separate timeline which means I need a way to proceed with my work without updating. Changing the audit level in 26 projects is annoying and I will want to change it back when I push my work so that the vulnerabilities stay visible. "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-19T03:30:19.9341595Z","RunDurationInMilliseconds":1088}