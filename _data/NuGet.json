{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43137790550","Type":"PullRequestEvent","CreatedAt":"2024-10-23T16:23:35","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10236","RelatedDescription":"Merged pull request \"Revert \"Improve API key v4 implementation based on internal feedback\"\" (#10236) at NuGet/NuGetGallery","RelatedBody":"Reverts NuGet/NuGetGallery#10234.\r\n\r\nThis place needs to be updated first to detect the new format:\r\nhttps://github.com/microsoft/security-utilities/blob/dd491f725a22796e25b52ccb677d305558793f29/src/Microsoft.Security.Utilities.Core/PreciselyClassifiedSecurityKeys/SEC101_030_NuGetApiKey.cs#L15"},{"Id":"43102808400","Type":"PullRequestEvent","CreatedAt":"2024-10-22T19:51:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10234","RelatedDescription":"Merged pull request \"Improve API key v4 implementation based on internal feedback\" (#10234) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/5678.\r\n\r\nThis is a non-breaking change.\r\n\r\nSummary of changes:\r\n- Improve comments in `ApiKeyV4`\r\n- Use `ToUpperInvariant` instead of `ToUpper` (no need to be culture specific)\r\n- Use crypto random for 16 bytes instead of `Guid.NewGuid()`.\r\n   - Technically this increases the entropy of the secret byte portion from 122 bits ([per docs](https://learn.microsoft.com/en-us/dotnet/api/system.guid.newguid?view=net-8.0#remarks)) to 128 bits."},{"Id":"43102194938","Type":"PullRequestEvent","CreatedAt":"2024-10-22T19:30:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10234","RelatedDescription":"Opened pull request \"Improve API key v4 implementation based on internal feedback\" (#10234) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/5678.\r\n\r\nThis is a non-breaking change.\r\n\r\nSummary of changes:\r\n- Improve comments in `ApiKeyV4`\r\n- Use `ToUpperInvariant` instead of `ToUpper` (no need to be culture specific)\r\n- Use crypto random for 16 bytes instead of `Guid.NewGuid()`.\r\n   - Technically this increases the entropy of the secret byte portion from 122 bits ([per docs](https://learn.microsoft.com/en-us/dotnet/api/system.guid.newguid?view=net-8.0#remarks)) to 128 bits."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43142823070","Type":"IssuesEvent","CreatedAt":"2024-10-23T19:03:54","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13876","RelatedDescription":"Opened issue \"Debugging large repos with static graph-based restore is slow\" (#13876) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nAt the moment when debugging static graph-based restores, an MSBuild binary log is created automatically.  However, when repositories are quite big, I've noticed that the MSBuild portion of the restore takes a long time.  This is because the MSBuild binary logger is including all of the project evaluations, imports, and misc files.\n\n### Desired Behavior\n\nI had static graph-based restore automatically generate a binary log when debugging as a convivence when developing the feature.  However, now its probably not necessary.\n\n### Additional Context\n\n_No response_"},{"Id":"43102901160","Type":"IssuesEvent","CreatedAt":"2024-10-22T19:55:08","Actor":"richlander","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13873","RelatedDescription":"Opened issue \"Requests to support .NET Team Workflows\" (#13873) at NuGet/Home","RelatedBody":"We've been using Audit. Here are some requests, categorized by need.\r\n\r\nIn general, we want Audit to be a great dev tool and not to be enabled in CI (in its current form). This duality-experience isn't well-supported today.\r\n\r\n## Dev-time\r\n\r\n- `dotnet add package` should fail for vulnerable packages. It's not obvious why success + warn is the best model, particularly for conservative organizations.\r\n- `dotnet add package` should have some form of `--transitive-cpm` as a CLI gesture for adding transitive CPM dependencies.\r\n- `dotnet list package --include-transitive --vulnerable` seems like a lot of ceremony to get a full list of vulnerable packages. There should be a low-ceremony way to get this information.\r\n\r\n## CI\r\n\r\n- A commit check (like how linters work) would be a great way to run Audit. This means that if a PR was green and a new relevant vulnerability was published, the PR would still be mergeable with no warnings. This is the same way linters work. If the source doesn't change, there are no new errors.\r\n- Post-merge, CI builds never fail due to Audit and Audit doesn't download the vulnerability data since it isn't being used.\r\n- We don't need to add nuget.org as an audit source. Every AzDo feed should expose the same information. It's just a feature of both nuget.org and Azdo.\r\n\r\n## Auxiliary testing\r\n\r\n- There is a good pattern to re-enable Audit for non-CI builds, like a rolling build.\r\n- There is a way to use Audit with additional (pre-disclosure) vulnerability information.\r\n- Audit also flags deprecated packages, which are assumed vulnerable.\r\n\r\n## Binary layouts\r\n\r\n- We also ship apps (primarily tools). These often get scanned in container images by third party scanners. We'd like to be able to scan apps using the same database. `cargo audit` supports this, for example.\r\n\r\n## Publisher tools\r\n\r\n- More streamlined model for deprecating packages.\r\n"},{"Id":"43063902133","Type":"IssuesEvent","CreatedAt":"2024-10-21T21:18:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13872","RelatedDescription":"Closed issue \"NuGet.Versioning.NuGetVersion can incorrectly report `IsSemVer2 == true` when version includes build metadata\" (#13872) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Versioning 6.11.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI am attempting to use the `NuGet.Versioning` package to report the version of our code to end-users. However, I am noticing some weirdness with printing version strings:\r\n\r\n```csharp\r\nNuGetVersion.Parse(\"1.2.3.0+abcd\").ToString(); // returns 1.2.3\r\nNuGetVersion.Parse(\"1.2.3.0\").ToString(); // returns 1.2.3.0\r\n```\r\n\r\nI believe this is a result of the following:\r\n\r\n```csharp\r\nNuGetVersion.Parse(\"1.2.3.4\").IsSemVer2; // returns false\r\nNuGetVersion.Parse(\"1.2.3.4+abcd\").IsSemVer2; // returns true, but I would expect false\r\nSemanticVersion.TryParse(\"1.2.3.4+abcd\", out var semVer); // returns false\r\n```\r\n\r\n**Is this expected behavior, or should `IsSemVer2` take into account whether it is a four-part version?** Currently, `IsSemVer2` returns `true` whenever the version has build metadata attached to it. This probably used to not matter as much, but with the .NET 8 SDK the `AssemblyInformationalVersionAttribute` now appends commit information by default (see [here](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/source-link)).\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-24T03:30:20.2617171Z","RunDurationInMilliseconds":821}