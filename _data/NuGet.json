{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42991737570","Type":"PullRequestEvent","CreatedAt":"2024-10-18T17:26:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10231","RelatedDescription":"Merged pull request \"Use discard _ for fire and forget task\" (#10231) at NuGet/NuGetGallery","RelatedBody":"Thanks for the recommendation, @jimmylewis!\r\n\r\nThis improves on top of https://github.com/NuGet/NuGetGallery/pull/10229 and is clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42989455534","Type":"PullRequestEvent","CreatedAt":"2024-10-18T16:02:35","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10231","RelatedDescription":"Opened pull request \"Use discard _ for fire and forget task\" (#10231) at NuGet/NuGetGallery","RelatedBody":"Thanks for the recommendation, @jimmylewis!\r\n\r\nThis improves on top of https://github.com/NuGet/NuGetGallery/pull/10229 and is clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42982680946","Type":"IssuesEvent","CreatedAt":"2024-10-18T12:46:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10230","RelatedDescription":"Closed issue \"[NuGet.org Bug]: XML Comments in Code Block not rendered in nuget.org\" (#10230) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI have created several pacakges, and for those packages I have created README.md files. Those markdown files contain XML code blocks. Within those code blocks I have added XML comments to remove irrelevant content (so I can focus the reader on the releavent stuff). However, when I publish those packages, the README content that is rendered on nuget.org does not show those XML comments (presumably because they are also HTML comments).\r\n\r\nYou can see an example of the behaviour here, in this package\r\n* https://www.nuget.org/packages/PlayNicely.Projects/1.1.3-beta-550#example\r\n\r\nYet, when rendered in gitlab, it works as expected\r\n* https://gitlab.com/play-nicely/foundation/-/tree/main/Code/PlayNicely.Projects/PN.Projects?ref_type=heads#example\r\n\n\n### Repro Steps\n\n1. Create a package with a README.md file.\r\n2. Add a code block to the readme file, ```xml\r\n3. Add an XML comment to the code block\r\n4. Publish the package\r\n5. \n\n### Expected Behavior\n\nThe comment should be rendered correctly.\n\n### Screenshots\n\n![readme-good](https://github.com/user-attachments/assets/97028afd-9f60-46aa-81d5-de074f66e0b8)\r\n![README-bad](https://github.com/user-attachments/assets/c466e68c-214d-459b-8c1a-a79b2ccbe4bd)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42972005670","Type":"IssuesEvent","CreatedAt":"2024-10-18T07:11:14","Actor":"kepboy","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10230","RelatedDescription":"Opened issue \"[NuGet.org Bug]: XML Comments in Code Block not rendered in nuget.org\" (#10230) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI have created several pacakges, and for those packages I have created README.md files. Those markdown files contain XML code blocks. Within those code blocks I have added XML comments to remove irrelevant content (so I can focus the reader on the releavent stuff). However, when I publish those packages, the README content that is rendered on nuget.org does not show those XML comments (presumably because they are also HTML comments).\r\n\r\nYou can see an example of the behaviour here, in this package\r\n* https://www.nuget.org/packages/PlayNicely.Projects/1.1.3-beta-550#example\r\n\r\nYet, when rendered in gitlab, it works as expected\r\n* https://gitlab.com/play-nicely/foundation/-/tree/main/Code/PlayNicely.Projects/PN.Projects?ref_type=heads#example\r\n\n\n### Repro Steps\n\n1. Create a package with a README.md file.\r\n2. Add a code block to the readme file, ```xml\r\n3. Add an XML comment to the code block\r\n4. Publish the package\r\n5. \n\n### Expected Behavior\n\nThe comment should be rendered correctly.\n\n### Screenshots\n\n![readme-good](https://github.com/user-attachments/assets/97028afd-9f60-46aa-81d5-de074f66e0b8)\r\n![README-bad](https://github.com/user-attachments/assets/c466e68c-214d-459b-8c1a-a79b2ccbe4bd)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42963707697","Type":"PullRequestEvent","CreatedAt":"2024-10-17T23:27:33","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10111","RelatedDescription":"Closed pull request \"[SDK Migration] Monitoring jobs\" (#10111) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Updated `CommandHelpers.GetBlobServiceClient` and `CommandHelpers.GetQueueServiceClient` to use MSI.\r\n* These changes affects all `NgJob` `LoopingJob` based jobs.\r\n  * Catalog2Dnx\r\n  * Catalog2Icon\r\n  * Catalog2Monitoring\r\n  * Db2Catalog\r\n  * Db2Monitoring\r\n  * Monitoring2Monitoring\r\n  * MonitoringProcessor"},{"Id":"42952532488","Type":"PullRequestEvent","CreatedAt":"2024-10-17T16:13:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10229","RelatedDescription":"Merged pull request \"Suppress warning on CS4014\" (#10229) at NuGet/NuGetGallery","RelatedBody":"These are fire and forget tasks performed during app shutdown.\r\n\r\nThese errors appear in the IDE due to our .editorconfig settings, and can be suppressed. \r\n\r\nThis is a little clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42999580939","Type":"IssuesEvent","CreatedAt":"2024-10-18T23:54:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13871","RelatedDescription":"Closed issue \"PackageReference and PackageVersion specified with different casing leads to issues in static graph restore\" (#13871) at NuGet/Home","RelatedBody":""},{"Id":"42996389673","Type":"IssuesEvent","CreatedAt":"2024-10-18T20:34:39","Actor":"cyungmann","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13872","RelatedDescription":"Opened issue \"NuGet.Versioning.NuGetVersion can incorrectly report `IsSemVer2 == true` when version includes build metadata\" (#13872) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Versioning 6.11.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI am attempting to use the `NuGet.Versioning` package to report the version of our code to end-users. However, I am noticing some weirdness with printing version strings:\r\n\r\n```csharp\r\nNuGetVersion.Parse(\"1.2.3.0+abcd\").ToString(); // returns 1.2.3\r\nNuGetVersion.Parse(\"1.2.3.0\").ToString(); // returns 1.2.3.0\r\n```\r\n\r\nI believe this is a result of the following:\r\n\r\n```csharp\r\nNuGetVersion.Parse(\"1.2.3.4\").IsSemVer2; // returns false\r\nNuGetVersion.Parse(\"1.2.3.4+abcd\").IsSemVer2; // returns true, but I would expect false\r\nSemanticVersion.TryParse(\"1.2.3.4+abcd\", out var semVer); // returns false\r\n```\r\n\r\n**Is this expected behavior, or should `IsSemVer2` take into account whether it is a four-part version?** Currently, `IsSemVer2` returns `true` whenever the version has build metadata attached to it. This probably used to not matter as much, but with the .NET 8 SDK the `AssemblyInformationalVersionAttribute` now appends commit information by default (see [here](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/source-link)).\n\n### Verbose Logs\n\n_No response_"},{"Id":"42996038647","Type":"IssuesEvent","CreatedAt":"2024-10-18T20:19:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13871","RelatedDescription":"Opened issue \"PackageReference and PackageVersion specified with different casing leads to issues in static graph restore\" (#13871) at NuGet/Home","RelatedBody":""},{"Id":"42994366652","Type":"IssuesEvent","CreatedAt":"2024-10-18T19:07:52","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13870","RelatedDescription":"Closed issue \"Azure.Core 1.44.1 with bug on Dependency System.Memory.Data 6.0.0 for instruction BinaryData.Empty.ToString()\" (#13870) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n.NET 8\n\n### Worked before?\n\nAzure.Core 1.43.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nCreate console app with .NET 8\r\nInstall NuGet package Azure.Core 1.44.1 (with Dependency System.Memory.Data 6.0.0)\r\nWrite this code line: string data = BinaryData.Empty.ToString();\r\nRun...\r\nYou get: System.ArgumentNullException: 'Value cannot be null. (Parameter 'bytes')'\n\n### Verbose Logs\n\n_No response_"},{"Id":"42993595573","Type":"IssuesEvent","CreatedAt":"2024-10-18T18:38:11","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13862","RelatedDescription":"Closed issue \"Nuget restore and Visual Studio build produce different project.assets.json files with C++/CLI transitive references\" (#13862) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\n- NuGet Version 6.9.1.3\r\n- Visual Studio 2022 Version 17.8.5\r\n\r\n### Repro Steps & Context\r\n`nuget restore SOLUTION` and building the solution in Visual Studio produce differend `projet.asstes.json` files. Transitive referenced packages are missing in the asset file when doing nuget restore. To reproduce it, it is important to have Visual Studio closed when doing nuget restore.\r\n \r\nProject dependency structure to reproduce: C# .net8 -> C++/CLI .net8 -> C# net8 -> nuget-package\r\n\r\nIn my example project: ApplicationUtils -> ToolsCoreDynLib -> Utils -> System.Collections.Immutable\r\n [ProjectAssetJsonTests.zip](https://github.com/user-attachments/files/17407136/ProjectAssetJsonTests.zip)\r\n\r\n\r\nCompare the two `project.assets.json`:\r\n![2024-10-17 08_54_01-Window](https://github.com/user-attachments/assets/bf20fbe3-d585-4ead-b41c-941afbc6fa70)\r\n**-> ToolsCoreDynLib is missing the dependency to Utils**\r\n\r\n\r\n### Verbose Logs\r\n\r\n`project.assets.json` of ApplicationUtils\r\n\r\nFirst part after nuget restore solution:\r\n> {\r\n> \r\n>   \"version\": 3,\r\n>   \"targets\": {\r\n>     \"net8.0-windows7.0\": {\r\n>       \"ToolsCoreDynLib/1.0.0\": {\r\n>         \"type\": \"project\",\r\n>         \"compile\": {\r\n>           \"bin/placeholder/ToolsCoreDynLib.dll\": {}\r\n>         },\r\n>         \"runtime\": {\r\n>           \"bin/placeholder/ToolsCoreDynLib.dll\": {}\r\n>         }\r\n>       }\r\n>     }\r\n>   },\r\n>   \"libraries\": {\r\n>     \"ToolsCoreDynLib/1.0.0\": {\r\n>       \"type\": \"project\",\r\n>       \"path\": \"../ToolsCoreDynLib/ToolsCoreDynLib.vcxproj\",\r\n>       \"msbuildProject\": \"../ToolsCoreDynLib/ToolsCoreDynLib.vcxproj\"\r\n>     }\r\n>   },`\r\n\r\n\r\n\r\n\r\n  \r\nFirst part after Visual Studio solution build:\r\n>  {\r\n> \r\n>   \"version\": 3,\r\n>   \"targets\": {\r\n>     \"net8.0-windows7.0\": {\r\n>       \"System.Collections.Immutable/8.0.0\": {\r\n>         \"type\": \"package\",\r\n>         \"compile\": {\r\n>           \"lib/net8.0/System.Collections.Immutable.dll\": {\r\n>             \"related\": \".xml\"\r\n>           }\r\n>         },\r\n>         \"runtime\": {\r\n>           \"lib/net8.0/System.Collections.Immutable.dll\": {\r\n>             \"related\": \".xml\"\r\n>           }\r\n>         },\r\n>         \"build\": {\r\n>           \"buildTransitive/net6.0/_._\": {}\r\n>         }\r\n>       },\r\n>       \"ToolsCoreDynLib/1.0.0\": {\r\n>         \"type\": \"project\",\r\n>         \"dependencies\": {\r\n>           \"Utils\": \"1.0.0\"\r\n>         },\r\n>         \"compile\": {\r\n>           \"bin/placeholder/ToolsCoreDynLib.dll\": {}\r\n>         },\r\n>         \"runtime\": {\r\n>           \"bin/placeholder/ToolsCoreDynLib.dll\": {}\r\n>         }\r\n>       },\r\n>       \"Utils/1.0.0\": {\r\n>         \"type\": \"project\",\r\n>         \"framework\": \".NETCoreApp,Version=v8.0\",\r\n>         \"dependencies\": {\r\n>           \"System.Collections.Immutable\": \"8.0.0\"\r\n>         },\r\n>         \"compile\": {\r\n>           \"bin/placeholder/Utils.dll\": {}\r\n>         },\r\n>         \"runtime\": {\r\n>           \"bin/placeholder/Utils.dll\": {}\r\n>         }\r\n>       }\r\n>     }\r\n>   },\r\n>   \"libraries\": {\r\n>     \"System.Collections.Immutable/8.0.0\": {\r\n>       \"sha512\": \"AurL6Y5BA1WotzlEvVaIDpqzpIPvYnnldxru8oXJU2yFxFUy3+pNXjXd1ymO+RA0rq0+590Q8gaz2l3Sr7fmqg==\",\r\n>       \"type\": \"package\",\r\n>       \"path\": \"system.collections.immutable/8.0.0\",\r\n>       \"files\": [\r\n>         \".nupkg.metadata\",\r\n>         \".signature.p7s\",\r\n>         \"Icon.png\",\r\n>         \"LICENSE.TXT\",\r\n>         \"PACKAGE.md\",\r\n>         \"THIRD-PARTY-NOTICES.TXT\",\r\n>         \"buildTransitive/net461/System.Collections.Immutable.targets\",\r\n>         \"buildTransitive/net462/_._\",\r\n>         \"buildTransitive/net6.0/_._\",\r\n>         \"buildTransitive/netcoreapp2.0/System.Collections.Immutable.targets\",\r\n>         \"lib/net462/System.Collections.Immutable.dll\",\r\n>         \"lib/net462/System.Collections.Immutable.xml\",\r\n>         \"lib/net6.0/System.Collections.Immutable.dll\",\r\n>         \"lib/net6.0/System.Collections.Immutable.xml\",\r\n>         \"lib/net7.0/System.Collections.Immutable.dll\",\r\n>         \"lib/net7.0/System.Collections.Immutable.xml\",\r\n>         \"lib/net8.0/System.Collections.Immutable.dll\",\r\n>         \"lib/net8.0/System.Collections.Immutable.xml\",\r\n>         \"lib/netstandard2.0/System.Collections.Immutable.dll\",\r\n>         \"lib/netstandard2.0/System.Collections.Immutable.xml\",\r\n>         \"system.collections.immutable.8.0.0.nupkg.sha512\",\r\n>         \"system.collections.immutable.nuspec\",\r\n>         \"useSharedDesignerContext.txt\"\r\n>       ]\r\n>     },\r\n>     \"ToolsCoreDynLib/1.0.0\": {\r\n>       \"type\": \"project\",\r\n>       \"path\": \"../ToolsCoreDynLib/ToolsCoreDynLib.vcxproj\",\r\n>       \"msbuildProject\": \"../ToolsCoreDynLib/ToolsCoreDynLib.vcxproj\"\r\n>     },\r\n>     \"Utils/1.0.0\": {\r\n>       \"type\": \"project\",\r\n>       \"path\": \"../Utils/Utils.csproj\",\r\n>       \"msbuildProject\": \"../Utils/Utils.csproj\"\r\n>     }\r\n>   },\r\n"},{"Id":"42985114728","Type":"IssuesEvent","CreatedAt":"2024-10-18T13:55:10","Actor":"Riccardonewall1985","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13870","RelatedDescription":"Opened issue \"Azure.Core 1.44.1 with bug on Dependency System.Memory.Data 6.0.0 for instruction BinaryData.Empty.ToString()\" (#13870) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n.NET 8\n\n### Worked before?\n\nAzure.Core 1.43.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nCreate console app with .NET 8\r\nInstall NuGet package Azure.Core 1.44.1 (with Dependency System.Memory.Data 6.0.0)\r\nWrite this code line: string data = BinaryData.Empty.ToString();\r\nRun...\r\nYou get: System.ArgumentNullException: 'Value cannot be null. (Parameter 'bytes')'\n\n### Verbose Logs\n\n_No response_"},{"Id":"42973509088","Type":"IssuesEvent","CreatedAt":"2024-10-18T08:00:54","Actor":"leppie","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13868","RelatedDescription":"Opened issue \"Filenames incorrectly unescaped when extracting\" (#13868) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nall of them\n\n### Worked before?\n\nprobably not\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nNot sure if this affects  normal packages too, but I assume so.\r\n\r\nConsider you have filenames that are not valid on all filesystems, eg `:123` . Not valid on Windows. \r\n\r\nNow you rename them to be URI encoded, it becomes `%3a123` . Valid on all filesystems. Good.\r\n\r\nPack a nuget tool/package with that filename.\r\n\r\nInspect the package. All good, file is still escaped in the zip archive.\r\n\r\nNow install tool.\r\n\r\nLinux:\r\n\r\nExtracts fine. Filename is now `:123` . Not good. \r\n\r\nWindows: \r\n\r\n```\r\nUnhandled exception: System.IO.IOException: The filename, directory name, or volume label syntax is incorrect. : 'C:\\Users\\leppie\\.dotnet\\tools\\.store\\.stage\\w05qmr5c.1n5\\<remove>\\:123.sls'.\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.File.Create(String path)\r\n   at NuGet.Packaging.StreamExtensions.Testable.MmapCopy(Stream inputStream, String fileFullPath, Int64 size)\r\n   at NuGet.Packaging.StreamExtensions.Testable.CopyToFile(Stream inputStream, String fileFullPath)\r\n   at NuGet.Packaging.PackageFileExtractor.ExtractPackageFile(String source, String target, Stream stream)\r\n   at NuGet.Packaging.PackageArchiveReader.CopyFiles(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token)\r\n   at NuGet.Packaging.PackageReaderBase.CopyFilesAsync(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken)\r\n   at NuGet.Packaging.PackageExtractor.ExtractPackageAsync(String source, Stream packageStream, PackagePathResolver packagePathResolver, PackageExtractionContext packageExtractionContext, CancellationToken token, Guid parentId)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.ExtractPackageAsync(String packagePath, DirectoryPath targetFolder)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.ExtractPackageAsync(String packagePath, DirectoryPath targetFolder)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.DownloadAndExtractPackage(PackageId packageId, INuGetPackageDownloader nugetPackageDownloader, String packagesRootPath, NuGetVersion packageVersion, PackageSourceLocation packageSourceLocation, Boolean includeUnlisted)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.<>c__DisplayClass8_0.<InstallPackage>b__0()\r\n   at Microsoft.DotNet.Cli.TransactionalAction.Run[T](Func`1 action, Action commit, Action rollback)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.<>c__DisplayClass22_0.<ExecuteInstallCommand>b__1()\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.RunWithHandlingInstallError(Action installAction, PackageId packageId)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.ExecuteInstallCommand(PackageId packageId)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallCommand.Execute()\r\n   at System.CommandLine.Invocation.InvocationPipeline.Invoke(ParseResult parseResult)\r\n   at System.CommandLine.ParseResult.Invoke()\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, TimeSpan startupTime, ITelemetry telemetryClient)\r\n```\r\n\r\nNow it unescaped the filename again and ended up with invalid filenames. \r\n\r\nThe relevant code is here. \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/8a5348f76ab0d2338dad0555f4abd7b59598c793/src/NuGet.Core/NuGet.Packaging/PackageArchiveReader.cs#L317\r\n\r\nMakes no indication why the filename is getting unescaped.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-20T03:30:21.4449004Z","RunDurationInMilliseconds":865}