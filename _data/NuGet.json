{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26752875153","Type":"PullRequestEvent","CreatedAt":"2023-01-30T21:09:21","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9364","RelatedDescription":"Merged pull request \"[TFM] net6.0-windows7.0 compatibility added.\" (#9364) at NuGet/NuGetGallery","RelatedBody":"## Description\r\nWe use NuGet client sdk in order to create a compatibility matrix for displaying TFMs on nuget.org. Currently there is no knowledge on nuget client sdk on what net5+ platform version exists (like net6.0-windows7.0) and they are not computed.\r\n\r\n## Changes\r\n* net6.0-windows7.0 compatibility has been hardcoded with known values.\r\n* This compatibility will only show if a package contains that specific TFM in their assets.\r\n\r\n## Screenshots\r\n\r\n![Before](https://user-images.githubusercontent.com/17834924/214958483-83ed5463-ce87-4a93-86e0-de2ceedfe872.png)\r\n\r\n![After](https://user-images.githubusercontent.com/17834924/214958491-6f98386b-02b2-4d79-b40c-baa369998355.png)\r\n\r\n## Notes\r\n* Why doesn't these PR cover all the other versions?\r\n  * We don't know the exhaustive compatibility on platform versions. \r\n* For further improvements we will need to collaborate with NuGet client and dotnet sdk: https://github.com/NuGet/Engineering/issues/4730. \r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9337"},{"Id":"26707933555","Type":"PullRequestEvent","CreatedAt":"2023-01-27T20:03:39","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9362","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.01.26]RI of dev into main\" (#9362) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"26686078592","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:03:55","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9364","RelatedDescription":"Opened pull request \"[TFM] net6.0-windows7.0 compatibility added.\" (#9364) at NuGet/NuGetGallery","RelatedBody":"## Description\r\nWe use NuGet client sdk in order to create a compatibility matrix for displaying TFMs on nuget.org. Currently there is no knowledge on nuget client sdk on what net5+ platform version exists (like net6.0-windows7.0) and they are not computed.\r\n\r\n## Changes\r\n* net6.0-windows7.0 compatibility has been hardcoded with known values.\r\n* This compatibility will only show if a package contains that specific TFM in their assets.\r\n\r\n## Screenshots\r\n\r\n![Before](https://user-images.githubusercontent.com/17834924/214958483-83ed5463-ce87-4a93-86e0-de2ceedfe872.png)\r\n\r\n![After](https://user-images.githubusercontent.com/17834924/214958491-6f98386b-02b2-4d79-b40c-baa369998355.png)\r\n\r\n## Notes\r\n* Why doesn't these PR cover all the other versions?\r\n  * We don't know the exhaustive compatibility on platform versions. \r\n* For further improvements we will need to collaborate with NuGet client and dotnet sdk: https://github.com/NuGet/Engineering/issues/4730. \r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9337"},{"Id":"26684823144","Type":"IssuesEvent","CreatedAt":"2023-01-26T20:55:54","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9363","RelatedDescription":"Opened issue \"[Deployment] 2023.01.26\" (#9363) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n## Changes\r\n* https://github.com/NuGet/NuGetGallery/pull/9361\r\n* https://github.com/NuGet/NuGetGallery/pull/9357\r\n* https://github.com/NuGet/NuGetGallery/pull/9342\r\n* https://github.com/NuGet/NuGetGallery/pull/9348\r\n* https://github.com/NuGet/NuGetGallery/pull/9349\r\n\r\n## Progress\r\n* [ ] Merge PR: https://github.com/NuGet/NuGetGallery/pull/9362\r\n* [ ] Build:\r\n* [ ] Release\r\n* [ ] DEV\r\n* [ ] INT\r\n* [ ] PROD\r\n\r\n# Stats.CreateAzureCdnWarehouseReports job\r\n## Changes\r\n* https://github.com/NuGet/NuGet.Jobs/pull/1124\r\n\r\n## Progress\r\n* [ ] Release: https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1424727\r\n* [x] DEV\r\n* [ ] INT\r\n* [ ] PROD"},{"Id":"26684785417","Type":"PullRequestEvent","CreatedAt":"2023-01-26T20:53:46","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9362","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.01.26]RI of dev into main\" (#9362) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26756159038","Type":"IssuesEvent","CreatedAt":"2023-01-31T00:29:58","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12393","RelatedDescription":"Opened issue \"If creating the PM UI window fails for any reason, display a message to the user\" (#12393) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.5\n\n### Worked before?\n\nN/A\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nAdd exception handling, so that if creating the PM UI window fails for any reason, display a message to the user.\n\n### Verbose Logs\n\n_No response_"},{"Id":"26755823436","Type":"IssuesEvent","CreatedAt":"2023-01-31T00:06:29","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12386","RelatedDescription":"Closed issue \"Backport https://github.com/NuGet/NuGet.Client/pull/4850 to release-6.3.x (6.0.4xx)\" (#12386) at NuGet/Home","RelatedBody":".NET 6.0.4xx SDK already backported a [change](https://github.com/dotnet/sdk/commit/dd40395b67e42c330397ba96308fd6817c070d67) that switched from the single CS+TS CTL to separate CS and TS CTL's.\r\n\r\nWe need to backport https://github.com/NuGet/NuGet.Client/pull/4850 to release-6.3.x.  This is necessary to be able to enable future CTL updates in the .NET 6.0.4xx SDK."},{"Id":"26754104211","Type":"IssuesEvent","CreatedAt":"2023-01-30T22:13:47","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12125","RelatedDescription":"Closed issue \"[CPM]: Transitive pinning feature should allow for pinning a minimum version\" (#12125) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe\n\n### The Elevator Pitch\n\nInstead of pinning only a specific version of a transitive dependency, we would like to pin a minimum version (or version range) for the package.  That way if a particular dependency tree used a higher version that the pinned version no error would occur, making it easier to maintain the pinned version.\n\n### Additional Context and Details\n\nOne of the uses for transitive pinning in Central Package Management will be for avoiding vulnerable versions of packages.  For example, we recently had to update dependencies for Newtonsoft.Json because versions prior to 13.0.1 had a vulnerability.  Using transitive pinning to pin version 13.0.1 for all projects is a great way to make sure none of them pick up a vulnerable version in their respective dependency trees.\r\nHowever, in the future, when one of our dependencies uses version 13.0.2, the project with that dependency will now get a package downgrade error (NU1109).  Now I have to maintain the pinned version along with my direct dependencies even though none of my projects directly depend on it.  I would prefer to have a way to pin a minimum version (or version range) instead of a specific version of a transitive package.  In other words, a way to tell CPM that Newtonsoft.Json needs to be >= 13.0.1 instead of strictly equal to 13.0.1."},{"Id":"26754050800","Type":"IssuesEvent","CreatedAt":"2023-01-30T22:10:58","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12381","RelatedDescription":"Closed issue \"Package not found while restoring causes ArgumentNullException\" (#12381) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Commands 6.4.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSee the following code used for restoring a NuGet package:\r\n\r\n```\r\npublic async Task RestoreAsync()\r\n{\r\n    var packageToRestore = new PackageIdentity(\"FluentAssertions\", NuGetVersion.Parse(\"6.8.0\"));\r\n\r\n    var progressCallback = new Action<string, TraceLevel>((message, traceLevel) => Console.WriteLine(message));\r\n    var machineWideSettings = new MachineWideSettings();\r\n    var settings = Settings.LoadDefaultSettings(null, null, machineWideSettings);\r\n\r\n    using var sourceCacheContext = new SourceCacheContext();\r\n    var restoreArgs = new RestoreArgs\r\n    {\r\n        AllowNoOp = true,\r\n        CacheContext = sourceCacheContext,\r\n        CachingSourceProvider = new CachingSourceProvider(new PackageSourceProvider(settings)),\r\n        ConfigFile = null,\r\n        DisableParallel = false,\r\n        Runtimes = new HashSet<string>(),\r\n        FallbackRuntimes = new HashSet<string>(),\r\n        RequestProviders = new List<IRestoreRequestProvider>(),\r\n        Sources = new List<string>(),\r\n        GlobalPackagesFolder = null,\r\n        HideWarningsAndErrors = false,\r\n        Inputs = new List<string>(),\r\n        IsLowercaseGlobalPackagesFolder = false,\r\n        LockFileVersion = null,\r\n        ValidateRuntimeAssets = null,\r\n        Log = Logger.Create(progressCallback),\r\n        MachineWideSettings = machineWideSettings,\r\n        PackageSaveMode = PackageSaveMode.Defaultv3\r\n    };\r\n    restoreArgs.PreLoadedRequestProviders.Add(\r\n        new DependencyGraphSpecRequestProvider(\r\n            new RestoreCommandProvidersCache(),\r\n            GetDependencyGraph(packageToRestore)));\r\n\r\n    await RestoreRunner.RunAsync(restoreArgs);\r\n}\r\n\r\nprivate DependencyGraphSpec GetDependencyGraph(PackageIdentity package)\r\n{\r\n    var frameworkName = new FrameworkName(\".NETCoreApp,Version=v6.0\");\r\n\r\n    var packageSpec = ToolRestoreUtility.GetSpec(\r\n        Path.Combine(Path.GetTempPath(), $\"{package.Id}{package.Version}.csproj\"),\r\n        package.Id,\r\n        new VersionRange(package.Version),\r\n        new NuGetFramework(frameworkName.Identifier, frameworkName.Version, \".NETCoreApp\", new Version(\"6.0\")),\r\n        Path.Combine(Path.GetTempPath(), \"TestNuGet\"),\r\n        new List<string>(),\r\n        new List<PackageSource> { new PackageSource(@\"https://api.nuget.org/v3/index.json\") },\r\n        new WarningProperties());\r\n\r\n    var dependencyGraphSpec = new DependencyGraphSpec();\r\n    dependencyGraphSpec.AddProject(packageSpec);\r\n    dependencyGraphSpec.AddRestore(packageSpec.Name);\r\n    return dependencyGraphSpec;\r\n}\r\n```\r\n\r\nRunning the code unchanged works. However, if I either:\r\n- change the ID of the `PackageIdentity` to a package that does not exist, eg. \"NonExistent\", or\r\n- change the version to one that doesn't exist, eg. \"99.0.0\"\r\n\r\nI get the exception `System.ArgumentNullException : Value cannot be null. (Parameter 'path')`\r\nI would expect a more informative exception.\r\n\r\nThe same exception also occurs when restoring while the package source cannot be reached (eg. internet connection down).\r\nTo reproduce:\r\n- Debug the code and set a breakpoint on the first line of the method\r\n- Clear the _%temp%\\TestNuGet_ folder\r\n- Clear the NuGet cache\r\n- Disable all network adaptors that connect to the internet\r\n- Continue debugging\r\n\r\nThe exact same `ArgumentNullException` is thrown.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"26753999392","Type":"IssuesEvent","CreatedAt":"2023-01-30T22:08:20","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12375","RelatedDescription":"Closed issue \"Restoring sln file restores project with improper configuration/platform pairs\" (#12375) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild version \"17.4.1+9a89d02ff\"\n\n### Worked before?\n\nUnsure\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI am trying to port a solution to .Net 6. In the process, I've noticed a weird issue with the restore. In VS, everything works fine. However, when building from MSBuild, I am getting extra assemblies copied to my output folder which shouldn't be there based on the configuration.\r\n\r\nAfter analysis of the binlog, I've narrowed it down to the combination of NuGet and a project with a conditional `ProjectReference`. Under some `Configuration` values, I have a reference to the project or not. However, when building with the `Configuration` that shouldn't have this project referred, it still gets copied (along with its dependencies) to the output. The reason seems to be from the fact that I am restoring a solution file. More specifically, I have :\r\n\r\n- Sln file\r\n  - Solution Configuration|Platform pairs : `Debug|x64` and `Release|x64`\r\n- Multiple csproj, each with their own set of Configuration|Platform pair, which don't necessarily match\r\n\r\nWhen looking at the evaluation of the restore project in the binlog, it becomes pretty clear what the source of the problem is : when doing the restoring evaluation in the csproj, `Configuration` and `Platform` end up being those of the solution, and not those of the actual project being restored. This is why the unreferenced project ends up copied, because NuGet evaluated it in a Configuration|Platform pair where the `ProjectReference` is actually used.\r\n\r\nI narrowed down the actual source of the issue, which is the `_LoadRestoreGraphEntryPoints`, more specifically, the `GetRestoreSolutionProjectsTask` task inside the target. The `RestoreGraphProjectInputItems` items generated are of the following fashion :\r\n\r\n```\r\n<RestoreGraphProjectInputItems Include=\"Path/to/the/file.csproj\" >\r\n  <AdditionalProperties>Configuration=Release; Platform=x64</AdditionalProperties>\r\n  <Platform>AnyCPU</Platform>\r\n  <Configuration>RedactedProjectConfiguration</Configuration>\r\n  <ToolsVersion>Current</ToolsVersion>\r\n  <SkipNonexistentProjects>Build</SkipNonexistentProjects>\r\n</RestoreGraphProjectInputItems>\r\n```\r\n\r\nAnd that's where the problem becomes (relatively) clear. The `AdditionalProperties` are passed straight to the restore MSBuild tasks, and they contain the solution configuration/platform pairs, which override the whole thing and cause the issue. The reason why I'm suggesting this is a problem coming from `GetRestoreSolutionProjectsTask` is because this task takes into input `ProjectReference` from the solution, which, in this case, can be of the `.metaproj` variety. This task then removes the .metaproj and considers it as a valid restore input. Which is fair, except for the fact that the csproj and its metaproj file are actually different : specifically, a metaproj file seems to be a wrapper on top of the csproj, and works based on Solution-level logic (i.e. Solution-level configuration and platform), while the csproj is actually based on that csproj' configuration and platform. When going from a metaproj back to a csproj, we are forgetting to go back from the solution configuration/platform to the csproj configuration/platform.\r\n\r\nI have a solution to circumvent the issue, though it is not exactly long-term proof : we can add the following `after.$(SolutionName).sln.targets` file next to the solution, with the following content :\r\n\r\n```\r\n<Project>\r\n  <Target Name=\"_PatchNugetSolutionProjectReferences\" DependsOnTargets=\"_LoadRestoreGraphEntryPoints\" BeforeTargets=\"_FilterRestoreGraphProjectInputItems\" Returns=\"@(RestoreGraphProjectInputItems)\">\r\n    <ItemGroup>\r\n      <RestoreGraphProjectInputItems Update=\"$(RestoreGraphProjectInput)\">\r\n        <AdditionalProperties>Configuration=%(RestoreGraphProjectInputItems.Configuration); Platform=%(RestoreGraphProjectInputItems.Platform)</AdditionalProperties>\r\n      </RestoreGraphProjectInputItems>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nWith this, I'm doing (essentially) what I'm saying is missing, i.e. regenerate the `AdditionalProperties` for the projects based on the actual `Configuration`/`Platform` pair that's provided and that the csproj will run on normally. It's not exactly perfect (this relies on the fact that `AdditionalProperties` only contains Configuration and Platform, and that the `Configuration` and `Platform` metadata attributes are indeed the csproj-level Configuration and Platform.\r\n\r\nThis solution seems to be sufficient on my end to circumvent the issue, but I think a proper fix would make more sense. I'm willing to give it a try if that can help, however I am unsure if what I'm proposing, even if cleaned up, is sufficient. A cleaner version of what I did would be to parse and rewrite the `AdditionalProperties` in `GetRestoreSolutionProjectsTask` to only modify `Configuration` and `Platform`. However, we'd still rely on the (maybe correct, but I'm not sure) assumption that the `Configuration` and `Platform` metadata are the actual csproj-level properties.\n\n### Verbose Logs\n\n_No response_"},{"Id":"26753917070","Type":"IssuesEvent","CreatedAt":"2023-01-30T22:04:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10235","RelatedDescription":"Closed issue \"Icon file validation by analyzing file content\" (#10235) at NuGet/Home","RelatedBody":"When working with embedded icon, at pack time, validate that icon file is, in fact, an image.\r\n\r\nTo doing so, NuGet should verify if those files complies with supported image formats: PNG and JPEG.\r\n\r\nWe cannot rely on WPF at pack time because NuGet is intended to work cross-platform and currently , WPF only works with Windows.\r\n\r\nA possible solution would be to check magic numbers in file headers. "},{"Id":"26753911262","Type":"IssuesEvent","CreatedAt":"2023-01-30T22:03:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10936","RelatedDescription":"Closed issue \"Remove Obsolete public APIs \" (#10936) at NuGet/Home","RelatedBody":"In https://github.com/NuGet/NuGet.Client/pull/4020, we reviewed unused parameters in shipped public APIs.\n\nThe goal of this task is to remove public APIs marked as obsolete. The plan is to remove those APIs in the next minor release, saying, 6.1 or later.\n\n"},{"Id":"26753712017","Type":"IssuesEvent","CreatedAt":"2023-01-30T21:52:38","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9082","RelatedDescription":"Closed issue \"'Manage NuGet Packages for Solution' should provide UI to limit versions for packages\" (#9082) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/801970/manage-nuget-packages-for-solution-should-provide.html)._\n\n---\nIf I want to ensure that my Visual Studio solution does not update a package beyond a certain version, I can manually edit the packages.config file, but there should be a UI in 'Manage NuGet Packages for Solution' for this task.\n\nhttps://docs.microsoft.com/en-us/nuget/concepts/package-versioning#semantic-versioning-200\n\nMy common scenario is that I want to ensure that I get all of the latest updates for Umbraco and related packages, but I do not want to be offered any that require me to upgrade Umbraco from version 7 to version 8.\n\nIf I do not manually edit the packages.config with:\n`allowedVersion=(,8.0)`\n... I get a lot of \"noise\" in the UI for package updates I would not want.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/1/2019, 00:21 AM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-01-31T03:30:24.8599181Z","RunDurationInMilliseconds":1349}