{"Data":{"Blog":{"FeedItems":[{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14500678648","Type":"PullRequestEvent","CreatedAt":"2020-12-11T18:23:02","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8292","RelatedDescription":"Merged pull request \"Markdig version update\" (#8292) at NuGet/NuGetGallery","RelatedBody":"Update markdig with latest version to have all new features\r\n\r\n- Update markdig to latest version 0.22.0\r\n\r\n- New extension added: \r\n   table, tasklist, autolink, emoji\r\n\r\n\r\n- Feature flag was added\r\n\r\n\r\nBelow showed the table, autolink, emoji render difference with two libs\r\nOld CommonMark render: \r\n![NuGet Gallery _ Manage Package ReadmeWithURLTest33](https://user-images.githubusercontent.com/64443925/99625395-069af400-29e5-11eb-83b3-a5a30ef57eb9.gif)\r\n\r\nNew Markdig render: \r\n![NuGet Gallery _ Manage Package xiaodaidaitest](https://user-images.githubusercontent.com/64443925/99625465-2f22ee00-29e5-11eb-908a-3d4212856d94.gif)\r\n\r\nDetails comparison about Markdig and CommonMark, please check out OneNote: Markdig vs CommonMark \r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3429"},{"Id":"14494687242","Type":"IssuesEvent","CreatedAt":"2020-12-11T10:08:09","Actor":"losolio","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8344","RelatedDescription":"Closed issue \"Cannot convert account to organization\" (#8344) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nError when converting account to organization\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Log with my account `losol`, go to this URL 'https://www.nuget.org/account/transform.', add losolio as new admin\r\n1. Log in as losolio, go to `https://www.nuget.org/account/Organizations`\r\n2. Perform this operation: accept joining organization by clicking the V\r\n3. See error: Oops! Error 500 - Internal Server Error. An error occurred while processing your request. We really messed up this time...\r\n\r\n### Expected behavior\r\nJoining losol organization\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14511412839","Type":"IssuesEvent","CreatedAt":"2020-12-12T22:11:17","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10362","RelatedDescription":"Closed issue \"Replace GetService with GetServiceAsync in NuGet.Clients, Part 1\" (#10362) at NuGet/Home","RelatedBody":"Here addressing \"Recommended practice of acquiring VS services is always calling `GetServiceAsync` to avoid the high risk of deadlock\". \nSince there are 34 GetService() calls to be replaced in 24 files we're doing it incrementally, this is part1 of [issue#3784](https://github.com/nuget/home/issues/3784) .\nI'm not going to list which of 34 occurance of `GetService()` calls are addressed now. Because I'm going to created sheet with detailed explanation for how each of 34 instances are addressed, for example some of them may not need to be replaced then I'll explain why."},{"Id":"14508633540","Type":"IssuesEvent","CreatedAt":"2020-12-12T14:32:38","Actor":"Sergio0694","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10375","RelatedDescription":"Opened issue \"Proposal: option to hide dependency APIs if consumers don't reference them too\" (#10375) at NuGet/Home","RelatedBody":"## Overview\r\n\r\nThere are cases where library authors need to add a dependency on NuGet packages, but without having consumers of their library (and not the dependency as well) to automatically have access to those APIs **unless explicitly referenced**.\r\n\r\nThe main idea is: some dependency should only be viewed as **implementation details** for a library.\r\nThis is due to a number of reasons:\r\n\r\n1. These APIs might not conceptually make sense to be exposed together with a library. As an example, I'm working on [ComputeSharp](https://github.com/Sergio0694/ComputeSharp), which is a high-level, easy to use library to do GPU processing in C#. This library has a dependency on [TerraFX.Interop.Windows](https://github.com/terrafx/terrafx.interop.windows), which provides extremely low-level bindings for Windows APIs. I don't want consumers of my library to also have TerraFX APIs pop up in their IntelliSense. These APIs are just an implementation detail for me, and conceptually they have nothing to do with what ComputeSharp aims to be - a high-level and accessible library.\r\n2. Having these APIs being exposed caused a potentially breaking dependency for consumers. Consider the case for ComputeSharp as before. If one day I wanted to change my backend for whatever reasons, and some consumers were using APIs from TerraFX as well, updating ComputeSharp would be a breaking change, even if I'd only be changing an internal implementation detail, and nothing on my public API surface.\r\n\r\nPoint 1. is the one I care about in particular. That's the same reason why me and many other library authors take special care in trimming the public API surface as much as possible to keep it clean - having every single indirect API being automatically visible to consumers completely undermines this, especially when these APIs are very different from the design of the library itself.\r\n\r\n## Proposed solution\r\n\r\nThis proposal is to add a new property that can be added to `PackageReference` items (eg. `PubliclyVisible`, defaulting to `true` for backwards compatibility) that when set to `false` would cause the following behavior:\r\n\r\n- APIs from these dependencies would not be visible for consumers. As in, trying to use them would fail to build.\r\n- Consumers would need to manually add a dependency to that package in their own project to see/use them.\r\n- These dependencies would still be visible when installing the NuGet package, as is today.\r\n\r\n## Alternative solutions (not viable)\r\n\r\n- Ask maintainers of these dependencies to provide source-only packages as well. This is clearly not viable in the majority of cases, and would be bad for code size anyway since consumers would end up with duplicated code across different assemblies.\r\n- Keep a local fork of needed packages and use them as private assets. This is not viable either as it would require a lot of work for library authors to keep forks in sync, not to mention this would have the same exact issue with duplicated code.\r\n\r\n"},{"Id":"14504734556","Type":"IssuesEvent","CreatedAt":"2020-12-12T01:52:44","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/10336","RelatedDescription":"Reopened issue \"Cannot open the NuGet Package manager\" (#10336) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/Cannot-open-Nuget-browser/1265371)._\n\n---\n[severity:I'm unable to use this version] [regression] [worked-in:16.8.2]\r\nManaging Nuget packages > Browse brings up the following error\n! [image.png] (https://aka.ms/dc/image?name=Bca4ae68667b4419392c520bf946e165d637416996804221774_20201123-144121-image.png&tid=ca4ae68667b4419392c520bf946e165d637416996804221774)\n\nHave restarted computer/VS\n\nVS: 16.8.2 \n! [image.png] (https://aka.ms/dc/image?name=B7bd6f85befdd40a6aa964320715f6281637416997462030978_20201123-144227-image.png&tid=7bd6f85befdd40a6aa964320715f6281637416997462030978)\n\nI did update from VS16.8.1 the other day, not sure if it was part of the upgrade or not\n\nAny help would be appreciated\n\nThanks\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/22/2020, 10:51 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"14504732198","Type":"IssuesEvent","CreatedAt":"2020-12-12T01:52:17","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10336","RelatedDescription":"Closed issue \"Cannot open the NuGet Package manager\" (#10336) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/Cannot-open-Nuget-browser/1265371)._\n\n---\n[severity:I'm unable to use this version] [regression] [worked-in:16.8.2]\r\nManaging Nuget packages > Browse brings up the following error\n! [image.png] (https://aka.ms/dc/image?name=Bca4ae68667b4419392c520bf946e165d637416996804221774_20201123-144121-image.png&tid=ca4ae68667b4419392c520bf946e165d637416996804221774)\n\nHave restarted computer/VS\n\nVS: 16.8.2 \n! [image.png] (https://aka.ms/dc/image?name=B7bd6f85befdd40a6aa964320715f6281637416997462030978_20201123-144227-image.png&tid=7bd6f85befdd40a6aa964320715f6281637416997462030978)\n\nI did update from VS16.8.1 the other day, not sure if it was part of the upgrade or not\n\nAny help would be appreciated\n\nThanks\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/22/2020, 10:51 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"14504242145","Type":"IssuesEvent","CreatedAt":"2020-12-12T00:29:47","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8867","RelatedDescription":"Reopened issue \"Pack includes content brought in through dependency packages into the current project's package (SDK based projects only)\" (#8867) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS 2019 \r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 16.3.8\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10.0.14393 x64\r\n\r\nWorked before? If so, with which NuGet version: -\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nI have been using the `PrivateAssets=\"all\"` option for a long time. It works great for `PackageReference`. Now I needed to use some content file in my project and I could not achieve the desired behavior with `PrivateAssets=\"all\"`. I want to build \"base\" package with one file `data.json` which should be consumed in \"top\" package but should not be exposed further to consumers of the \"top\" package.\r\n\r\nMy \"base\" package:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"data.json\">\r\n      <PackagePath>contentFiles/any/any/data.json</PackagePath>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe result seems to be good for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69996708-a573d980-1563-11ea-8069-bb275803e1fb.png)\r\n\r\nMy \"top\" package:\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"BasePackage\" Version=\"1.0.0\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe Result is unexpected for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69997235-bc66fb80-1564-11ea-8c80-23e46bfa7cdb.png)\r\n\r\nWhy is the file again in the content section? This file is a development dependency, some sort of settings file. The \"base\" package is a package with Roslyn analyzers and the settings file - `data.json`. I do not present the analyzers used for clarity. For them, `PrivateAssets` works as it should - they do not fall into the dependencies of the \"base\" package. But for the settings file - `data.json`, I can’t get the same behavior.\r\n\r\nI spent a lot of time resolving this issue and it seems to me that I do not see any obvious solution, which is somewhere nearby. I will be very grateful for the advice.\r\n\r\n"},{"Id":"14500941525","Type":"IssuesEvent","CreatedAt":"2020-12-11T18:45:52","Actor":"madelson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10374","RelatedDescription":"Opened issue \"Restore fails with NU1004 after running nuget restore with -ForceEvaluate\" (#10374) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThis has some of the same symptoms as https://github.com/NuGet/Home/issues/9332 but may not be the same issue; it happened under different circumstances and this time I was able to assembly a small solution that can reproduce the problem.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):  5.8.0.6930\r\n\r\ndotnet.exe --version (if appropriate): n/a\r\n\r\nVS version (if appropriate): 16.8.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10\r\n\r\nWorked before? If so, with which NuGet version: 5.3?\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Unzip attached Repro.zip archive\r\n\r\n2. Restore the repro solution with nuget.exe and -ForceEvaluate => should succeed\r\n```\r\nnuget restore -ForceEvaluate Repro.sln\r\n```\r\n\r\n3. Restore the repro solution with nuget.exe and -LockedMode => should FAIL!\r\n```\r\nnuget restore -LockedMode Repro.sln\r\n```\r\n\r\n### Verbose Logs\r\n```\r\nNU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\nNU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\n\r\n```\r\n\r\n### Sample Solution\r\n[Repro.zip](https://github.com/NuGet/Home/files/5680970/Repro.zip)\r\n\r\n\r\n\r\n\r\n"},{"Id":"14500269348","Type":"IssuesEvent","CreatedAt":"2020-12-11T17:48:30","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10366","RelatedDescription":"Closed issue \"PrivateAssets not considered for ProjectReference node\" (#10366) at NuGet/Home","RelatedBody":"I have an \"old style\" .NET framework project which is used to create a Nuget package. The project itself is using other NuGet packages and project references. For the used NuGet packages the PackageReference format is used. In order to use the msbuild \"pack\" target a reference to the \"NuGet.Build.Tasks.Pack\" package was added.\r\n\r\nProblem: The package will be created but the project to project references will be treated as Nuget References. Even after adding the \"PrivateAssets=all\" to the project reference node, they are still handled as NuGet references instead of packaging/including the project references to the package."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1334226716139655171","CreatedAt":"2020-12-02T20:03:32+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nHave you recently experienced issues with your NuGet connectors? You may have been impacted… https://t.co/98KJJGhYEW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":6,"RawContent":null},{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-12-13T05:30:37.5985928Z","RunDurationInMilliseconds":2014}