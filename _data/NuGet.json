{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"35001640250","Type":"IssuesEvent","CreatedAt":"2024-01-22T04:09:07","Actor":"SimonCropp","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9783","RelatedDescription":"Opened issue \"Given fuget is always down should it be rmoved as a link from the gallery?\" (#9783) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"35033592987","Type":"IssuesEvent","CreatedAt":"2024-01-23T01:13:57","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13180","RelatedDescription":"Opened issue \"`BuildAssetsUtilsTests` tests shouldn't depend on host machine envvars\" (#13180) at NuGet/Home","RelatedBody":"On my Windows machine, I have envvar `NUGET_PACKAGES` set. This should not be causing a test to fail.\r\n\r\n>      Assert.Equal() Failure\r\n>             Γåô (pos 0)\r\n>   Expected: $(UserProfile)\\.nuget\\packages\\\r\n>   Actual:   C:\\.tools\\\r\n>             Γåæ (pos 0)\r\n>     Stack Trace:\r\n>        at NuGet.Commands.Test.BuildAssetsUtilsTests.BuildAssetsUtils_ReplaceWithUserProfileMacro() in C:\\NuGet.Client\\test\\NuGet.Core.Tests\\NuGet.Commands.Test\\BuildAssetsUtilsTests.cs:line 209\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/c6ac0757eb928b9d62bfd608608f4ddda1fc6d74/test/NuGet.Core.Tests/NuGet.Commands.Test/BuildAssetsUtilsTests.cs#L203"},{"Id":"35033323986","Type":"IssuesEvent","CreatedAt":"2024-01-23T00:56:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13179","RelatedDescription":"Opened issue \"Address nullability suppressions in NuGet.VisualStudio.Internal.Contracts\" (#13179) at NuGet/Home","RelatedBody":"See: https://github.com/NuGet/NuGet.Client/pull/5582#discussion_r1460633179"},{"Id":"35030330082","Type":"PullRequestEvent","CreatedAt":"2024-01-22T22:08:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13176","RelatedDescription":"Merged pull request \"Delete accepted/2023/image.png\" (#13176) at NuGet/Home","RelatedBody":"I must have mistakenly dropped this file in to the parent directory. It doesn't appear to be used, so just deleting the image."},{"Id":"35029359487","Type":"IssuesEvent","CreatedAt":"2024-01-22T21:25:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13094","RelatedDescription":"Closed issue \"Symbol loading from external server\" (#13094) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Symbol-loading-from-external-server/1553736)._\n\n---\nHello,\n\nI would like to ask for feature which allows moving the process of loading symbols from external service like Azure DevOps, Microsoft Symbols and Nuget.org Symbols to the background. It prevents developer if he is interested into debugging fast only some part of code that does not use external sources at first.\n\nThe origin of the problem is when you use project with many dependencies that does not have published symbols.\nAs there is a cache for already found symbols that speed up symbol loading and downloading process, there is no process while loading symbols that speeds up determining that some symbols will be not available at all. Thought, each time starting the debug session, the symbol loading will try to find not published symbols on remote servers, if you use more than 1 remote location that will take extra time too. You can of course add manually the name of libraries that does not publish symbols to options in Visual Studio, but it is very time consuming process when you need to as 25-50 libraries like so.\nMore over each and every developer will have to do this, as those settings are local to the IDE installation.\n\nTherefore one of the proposals I suggest is to put loading into background, so developer can already work with locally available symbols which should be loaded first. And the experience will be better each time the VS finds more symbols on remote server.\n\nSecond option that I would suggest is a some button or dialog that summaries not found symbols in external servers, and be able to add them to exclusions so VS does not try to find them again. The problem with solution as so, is that VS will not try to get symbols once those will become available and will require manual action.\n\nBest regards,\nMaciej Klemarczyk\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/14/2021, 03:00 AM: \n\n(private comment, text removed)"},{"Id":"35028365122","Type":"PullRequestEvent","CreatedAt":"2024-01-22T20:43:47","Actor":"baronfel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13177","RelatedDescription":"Opened pull request \"Add proposal for a workload packagetype for NuGet\" (#13177) at NuGet/Home","RelatedBody":"After some discussion today with members of the SDK, MAUI, and Aspire teams, we think that for high-profile frameworks like MAUI/Aspire the NuGet.org search experience for users is muddled by the inclusion of Workload-related packages in the search results.\r\n\r\nWe think that given workloads are A Thing ™️ in the .NET Ecosystem at this point, it makes sense to recognize them and allow tools to filter them.  Please let me know what you think!"},{"Id":"35028350739","Type":"PullRequestEvent","CreatedAt":"2024-01-22T20:43:09","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13176","RelatedDescription":"Opened pull request \"Delete accepted/2023/image.png\" (#13176) at NuGet/Home","RelatedBody":"I must have mistakenly dropped this file in to the parent directory. It doesn't appear to be used, so just deleting the image."},{"Id":"35012747367","Type":"IssuesEvent","CreatedAt":"2024-01-22T12:00:11","Actor":"jvmdc","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13175","RelatedDescription":"Opened issue \"Restore with locked-mode and no lockfile should fail\" (#13175) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.100\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. Create a project without a lock-file, but with some dependency\r\n2. Run dotnet restore --locked-mode\r\n3. See that the project restore succeeds\r\n\r\nMy expectation would be that if I am attempting to force the project to restore using a locked mode, it would fail if no such lock is available. The project *will* fail if the file is present, but out of date or just plain empty.\r\n\r\nContext: Building a centralized CI/CD setup in which I want to enforce the use of lock files to ensure reproducible builds. It seems there is no command that ensures a lock file is actually present built-in to the client. \r\n\r\nA workaround which I am currently using is to simply check for the presence of the file using a shell script wherever I detect a project-file. Built-in support in Nuget would be nice instead though, to make sure I do not miss corner-cases (e.g. not detecting a project file, not detecting a lock file whose location was changed through the `NuGetLockFilePath` parameter in the project file)\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-23T03:30:20.2434768Z","RunDurationInMilliseconds":1111}