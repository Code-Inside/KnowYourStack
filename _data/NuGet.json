{"Data":{"Blog":{"FeedItems":[{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null},{"Title":"Happy 10th Birthday, NuGet!","PublishedOn":"2021-01-14T01:29:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet 1.0 was released on January 13th, 2011 – 10 years and 4 major version releases ago. Since then, NuGet.org has grown to host a large and vibrant package ecosystem with over 230 thousand unique...","Href":"https://devblogs.microsoft.com/nuget/happy-10th-birthday-nuget/","RawContent":null},{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"15415510574","Type":"PullRequestEvent","CreatedAt":"2021-03-05T02:46:54","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8444","RelatedDescription":"Closed pull request \"change condition\" (#8444) at NuGet/NuGetGallery","RelatedBody":"This is fix for bug I found  with PR https://github.com/NuGet/NuGetGallery/pull/8406\r\n\r\nExpect legacy readme work when uploading package without embedded readme\r\n\r\nWithout changes: legacy readme container invisable at upload package page if we upload package without embedded readme\r\n<img width=\"783\" alt=\"wrongreadme\" src=\"https://user-images.githubusercontent.com/64443925/110058365-0f56d200-7d17-11eb-8c25-a63eb4bd7bbf.PNG\">\r\n\r\nAfter changes:   legacy readme container display when package has legacy readme\r\n<img width=\"845\" alt=\"pic\" src=\"https://user-images.githubusercontent.com/64443925/110058783-de2ad180-7d17-11eb-986e-f455d0131aa1.PNG\">\r\n\r\nNo problem with embedded readme\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3507"},{"Id":"15415442225","Type":"PullRequestEvent","CreatedAt":"2021-03-05T02:36:54","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8444","RelatedDescription":"Opened pull request \"change condition\" (#8444) at NuGet/NuGetGallery","RelatedBody":"This is fix for bug I found  with PR https://github.com/NuGet/NuGetGallery/pull/8406\r\n\r\nExpect legacy readme work when uploading package without embedded readme\r\n\r\nWithout changes: legacy readme container invisable at upload package page if we upload package without embedded readme\r\n<img width=\"783\" alt=\"wrongreadme\" src=\"https://user-images.githubusercontent.com/64443925/110058365-0f56d200-7d17-11eb-8c25-a63eb4bd7bbf.PNG\">\r\n\r\nAfter changes:   legacy readme container display when package has legacy readme\r\n<img width=\"845\" alt=\"pic\" src=\"https://user-images.githubusercontent.com/64443925/110058783-de2ad180-7d17-11eb-986e-f455d0131aa1.PNG\">\r\n\r\nNo problem with embedded readme\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3507"},{"Id":"15415348487","Type":"PullRequestEvent","CreatedAt":"2021-03-05T02:23:40","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8443","RelatedDescription":"Opened pull request \"Fix condition with readme container\" (#8443) at NuGet/NuGetGallery","RelatedBody":"This is fix for bug I found  with PR https://github.com/NuGet/NuGetGallery/pull/8406\r\n\r\nWithout changes: legacy readme container invisable at upload package page if we upload package without embedded readme\r\n\r\nAfter changes:   legacy readme container display when package has legacy readme\r\n\r\nNo problem with embedded readme\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3507"},{"Id":"15412596007","Type":"IssuesEvent","CreatedAt":"2021-03-04T21:01:30","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8135","RelatedDescription":"Closed issue \"Marketplace data improvement for publishers\" (#8135) at NuGet/NuGetGallery","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/566663/marketplace-data-improvement-for-publishers.html)._\n\n---\n<p>Hello </p> <p>Is it possible to get historical data displayed for publishers - from the time the extension was published. Currently it is limited to past 180 days window, which is very limiting. Can you expand that to as much as possible. </p><p></p><p>I am primarily interested in two improvements</p><p>  \n</p><p>1. Extending the current report window (180 days). Idealy this window would be 1 year +... if not, since the very first day extension was introduced on the marketplace.</p> <p>  \n</p><p>2. Ability to filter by geography - per country and continent... when this info is known. I am OK with having a pool of people who are also 'unknown' if geo info is not available. </p><p>Thanks</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 5/14/2019, 01:52 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>\n#### Mads Kristensen [MSFT] on 6/10/2019, 11:20 AM: \n\n<p>Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input</p>\n\n#### Stefan Stefanov on 7/2/2019, 10:50 AM: \n\n<p>I also believe this would be very beneficial, as the current date is not enough to make any conclusions.</p>\n\n#### Gabriel Torok on 12/2/2019, 06:10 AM: \n\n<p>Likewise, this would be helpful for us as well.</p>\n\n#### Katie DeSantis on 12/2/2019, 06:32 AM: \n\n<p>We too would benefit from this information</p>\n\n#### Dan Wright on 12/2/2019, 08:44 AM: \n\n<p>This would be really beneficial for us too. </p><p>Thanks. </p>\n\n#### andre rolle on 12/2/2019, 03:35 PM: \n\n<p>Yes we definitely need this information to help improve our capabilities in improving how we create and published our application in visual studios marketplace.</p>\n\n#### andre rolle on 12/2/2019, 03:49 PM: \n\n<p>The management of Microsoft would change there mind in extending the 90 days to at least 1 year if possible. We as developers and others who interact with creating and publishing an application or software to visual studios marketplace. Really need this information to improve everything we do to make our app 100% functional an smooth going.</p>\n"},{"Id":"15412523003","Type":"PullRequestEvent","CreatedAt":"2021-03-04T20:54:55","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8406","RelatedDescription":"Merged pull request \"Image allowlist \" (#8406) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* check domain for most of image source\r\n* check specific path for github badge, there are security vulnerabilities if we only check the github.com domain, we are doing same behavior what VS market doing. \r\n* allow raw.github.com/ raw.githubusercontent.com/ user-images.githubusercontent.com/ camo.githubusercontent.com\r\n* replace nofollow  with noopener noreferrer nofollow\r\n    * nooperner open new tab for links, prevent malicious attacker from using window.opener to change the content of originating page \r\n    * noreferrer similar to noopener, especially in older browsers, it make sense to use both\r\n\r\nTodo: \r\n\r\nDocumentation page about allowlist that customer could refer to\r\nWarning need to be updated with reference above\r\nupload page \r\n<img width=\"893\" alt=\"upload\" src=\"https://user-images.githubusercontent.com/64443925/110016254-aac95200-7cd9-11eb-9a88-83a6dd8dd7b9.PNG\">\r\nmanage package page\r\n<img width=\"897\" alt=\"manage\" src=\"https://user-images.githubusercontent.com/64443925/110016261-ac931580-7cd9-11eb-9bac-782a7dfff313.PNG\">\r\ndisplay package page\r\n<img width=\"585\" alt=\"display\" src=\"https://user-images.githubusercontent.com/64443925/110016382-cf252e80-7cd9-11eb-8d32-609f5105f47b.PNG\">\r\n\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3507"},{"Id":"15412462665","Type":"PullRequestEvent","CreatedAt":"2021-03-04T20:49:21","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8442","RelatedDescription":"Merged pull request \"Updating the client libraries to 5.9\" (#8442) at NuGet/NuGetGallery","RelatedBody":"Finally addresses https://github.com/NuGet/NuGetGallery/issues/8280.\r\n\r\nMostly brings support for `MIT-0` license in license expressions. Techincally, we only needed to update `NuGet.Packaging` to get it, but I had all client libraries updated to have their versions aligned.\r\n\r\nHad to update some tests due to a [bugfix](https://github.com/NuGet/Home/issues/10177) in the client library."},{"Id":"15411838240","Type":"PullRequestEvent","CreatedAt":"2021-03-04T19:54:53","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8442","RelatedDescription":"Opened pull request \"Updating the client libraries to 5.9\" (#8442) at NuGet/NuGetGallery","RelatedBody":"Finally addresses https://github.com/NuGet/NuGetGallery/issues/8280.\r\n\r\nMostly brings support for `MIT-0` license in license expressions. Techincally, we only needed to update `NuGet.Packaging` to get it, but I had all client libraries updated to have their versions aligned.\r\n\r\nHad to update some tests due to a [bugfix](https://github.com/NuGet/Home/issues/10177) in the client library."},{"Id":"15398492647","Type":"PullRequestEvent","CreatedAt":"2021-03-04T00:08:44","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8434","RelatedDescription":"Merged pull request \"Implementation of Cake tab with instructions for NuGet packages\" (#8434) at NuGet/NuGetGallery","RelatedBody":"Add installation instructions of NuGet packages in Cake scripts.\r\n\r\nCredits to Nils Andresen ( @nils-a ), member of the Cake team, who did all the hard work :muscle:\r\n\r\n| :jigsaw: | Packages identified as Cake extension of type \"Addin\" (via tags) |\r\n|:---: | --- |\r\n| | ![image](https://user-images.githubusercontent.com/177608/109409604-86344980-796a-11eb-8f93-c147eabf07ac.png) |\r\n| | Packages of type `Dependency` that have the tag `cake-addin` |\r\n\r\n---\r\n\r\n| :jigsaw: | Packages identified as Cake extension of type \"Module\" (via tags) |\r\n|:---: | --- |\r\n| | ![image](https://user-images.githubusercontent.com/177608/109409748-a0baf280-796b-11eb-8b8b-eef7d283b870.png) |\r\n| | Packages of type `Dependency` that have the tag `cake-module` |\r\n\r\n---\r\n\r\n| :jigsaw: | Packages identified as Cake extension of type \"Recipe\" (via tags) |\r\n|:---: | --- |\r\n| | ![image](https://user-images.githubusercontent.com/177608/109409832-4ec69c80-796c-11eb-91c5-68e2739689dd.png) |\r\n| | Packages of type `Dependency` that have the tag `cake-recipe` |\r\n\r\n---\r\n\r\n| :package: | Packages identified as Dependency (via PackageType) |\r\n|:---: | --- |\r\n| | ![image](https://user-images.githubusercontent.com/177608/109409850-73227900-796c-11eb-8dd1-b03e93939255.png) |\r\n| | Packages of type `Dependency` |\r\n\r\n---\r\n\r\n/cc @joelverhagen\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8381"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"15415934209","Type":"IssuesEvent","CreatedAt":"2021-03-05T03:48:18","Actor":"fmir864","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10630","RelatedDescription":"Opened issue \"Nuget replacement tokens not reading from AssemblyInfo class\" (#10630) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nProduct version: 5.9.0\r\n\r\nWorked before? If so, with which NuGet version: 5.5.1\r\n\r\n## Repro steps and/or sample project\r\n\r\n1. Create a C# class library Project with .net framework 4.8\r\n2. Modify `AssemblyInfo` as follows;\r\n\r\n```\r\n[assembly: AssemblyVersion(\"2.0.0.0\")]\r\n[assembly: AssemblyFileVersion(\"2.0.0.0\")]\r\n[assembly: AssemblyInformationalVersion(\"2.0.0\")]\r\n```\r\n3. Create a `nuspec` file using below command\r\n`nuget spec MyProject.csproj`\r\n\r\n4. `nuspec` generated as below;\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package >\r\n  <metadata>\r\n    <id>$id$</id>\r\n    <version>$version$</version>\r\n    <title>$title$</title>\r\n    <authors>$author$</authors>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>$description$</description>\r\n    <releaseNotes></releaseNotes>\r\n    <copyright>$copyright$</copyright>\r\n    <tags>tags1 tags2</tags>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\n5. Pack with following command;\r\n\r\n`nuget pack .\\MyProject.csproj -verbosity detailed `\r\n\r\n6. Getting an error as follows;\r\n\r\n```\r\nNuGet Version: 5.9.0.7134\r\nAttempting to build package from 'MyProject.csproj'.\r\nMSBuild auto-detection: using msbuild version '16.4.0.56107' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nPacking files from 'E:\\Clone\\MyProject\\MyProject\\bin\\Debug'.\r\nCould not load file or assembly 'file:///E:\\bin\\nuget.exe' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)\r\nUsing 'MyProject.nuspec' for metadata.\r\nAuthors is required.\r\nDescription is required.\r\nSystem.Exception: Authors is required.\r\nDescription is required.\r\n   at NuGet.Packaging.Manifest.Validate(Manifest manifest)\r\n   at NuGet.Packaging.Manifest.ReadFrom(Stream stream, Func`2 propertyProvider, Boolean validateSchema)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessNuspec(PackageBuilder builder, String basePath)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n```\r\n\r\n7. I gave values for author and description in the `nuspec` file and ran `pack` again (Given in `AssemblyInfo` but it's not replacing the tokens)\r\n\r\n```\r\nNuGet Version: 5.9.0.7134\r\nAttempting to build package from 'MyProject.csproj'.\r\nMSBuild auto-detection: using msbuild version '16.4.0.56107' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nPacking files from 'E:\\Clone\\MyProject\\MyProject\\bin\\Debug'.\r\nCould not load file or assembly 'file:///E:\\bin\\nuget.exe' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)\r\nUsing 'MyProject.nuspec' for metadata.\r\nAdd file 'E:\\Clone\\MyProject\\MyProject\\bin\\Debug\\MyProject.dll' to package as 'lib\\net48\\MyProject.dll'\r\nFound packages.config. Using packages listed as dependencies\r\n\r\nId: MyProject\r\nVersion: 1.0.0\r\nAuthors: AA\r\nDescription: AA\r\nTags: tags1, tags2\r\nDependencies: log4net [2.0.12, ), Microsoft.ReportingServices.ReportViewerControl.Winforms [150.1440.0, ), Microsoft.SqlServer.Types [14.0.1016.290, ), System.Runtime.CompilerServices.Unsafe [5.0.0, ), System.Windows.Interactivity.WPF [2.0.20525, ), Unity [5.11.10, )\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'MyProject.nuspec'.\r\nAdded file 'lib/net48/MyProject.dll'.\r\nAdded file 'package/services/metadata/core-properties/3e75407b72454e6eb1bcbe849f8fcc10.psmdcp'.\r\n\r\nWARNING: NU5128: Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below:\r\n- Add a dependency group for .NETFramework4.8 to the nuspec\r\nSuccessfully created package 'E:\\Clone\\MyProject\\MyProject\\MyProject.1.0.0.nupkg'.\r\n```\r\n\r\n8. Now `nupkg` created but always with version 1.0.0, the error I've noticed is `Could not load file or assembly 'file:///E:\\bin\\nuget.exe' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)`. This somehow ignores the metadata tokens replaced from `AssemblyInfo`\r\n9. Tested with 5.7, 5.8.1 as well, same result but 5.5.1 works fine\r\n\r\n### Verbose Logs\r\n\r\n```\r\nNuGet Version: 5.9.0.7134\r\nAttempting to build package from 'MyProject.csproj'.\r\nMSBuild auto-detection: using msbuild version '16.4.0.56107' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nPacking files from 'E:\\Clone\\MyProject\\MyProject\\bin\\Debug'.\r\nCould not load file or assembly 'file:///E:\\bin\\nuget.exe' or one of its dependencies. Operation is not supported. (Exception from HRESULT: 0x80131515)\r\nUsing 'MyProject.nuspec' for metadata.\r\nAuthors is required.\r\nDescription is required.\r\nSystem.Exception: Authors is required.\r\nDescription is required.\r\n   at NuGet.Packaging.Manifest.Validate(Manifest manifest)\r\n   at NuGet.Packaging.Manifest.ReadFrom(Stream stream, Func`2 propertyProvider, Boolean validateSchema)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessNuspec(PackageBuilder builder, String basePath)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n```\r\n"},{"Id":"15415755744","Type":"IssuesEvent","CreatedAt":"2021-03-05T03:21:51","Actor":"wli3","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10629","RelatedDescription":"Opened issue \"native assets in subfolders are not respected\" (#10629) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#16211**\r\n- Please respond to @stevenbrix.\r\n\r\n---\r\n\r\n_From @stevenbrix on Thursday, March 4, 2021 6:39:41 PM_\r\n\r\nIf you have a NuGet package with native assets in subfolders:\r\n\r\n```\r\nruntimes\\win10-x86\\native\\foo.dll\r\nruntimes\\win10-x86\\native\\en-us\\foo.dll.mui\r\n```\r\n\r\nThe .NET SDK copies these to the same location, and you lose the `en-us` locale subfolder.  This happens with both `Build` and `Publish` targets."},{"Id":"15415360438","Type":"PullRequestEvent","CreatedAt":"2021-03-05T02:25:20","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/10628","RelatedDescription":"Opened pull request \"initial draft of dotnet nuget trusted-signers commands spec\" (#10628) at NuGet/Home","RelatedBody":"This spec is for #8053 \r\n\r\n(note: I'm not going to be around until next Tuesday, so feel free to treat this as a first draft and make your own modifications if we need to land this asap.)\r\n\r\nWe'll also want Kathleen to take a look at this, but I don't remember her GH handle :("},{"Id":"15414903455","Type":"IssuesEvent","CreatedAt":"2021-03-05T01:20:13","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10627","RelatedDescription":"Opened issue \"Tab ordering for the project grid's Version and Installed column headers is incorrect\" (#10627) at NuGet/Home","RelatedBody":"## Details about Problem\n\nIn the Solution PMUI, the projects grid's Version and Installed column headers have their tab ordering reversed. The Version column appears first but when tabbing through, keyboard focus goes from the Checkbox to Project to Installed to Version columns. It should go Checkbox -> Project -> Version -> Installed.\n\nNuGet product used (NuGet.exe | Visual Studio | MSBuild.exe | dotnet.exe): Visual Studio\n\nProduct version: 16.10 Preview 2.0\n\nWorked before? If so, with which NuGet version: Don't know\n\n## Repro steps and/or sample project\n\nOpen the Solution PMUI, select a package to populate the details pane, then tab through the UI controls until you get to the Project grid. Tab through the grid columns and notice the tab ordering of the column headers: Checkbox -> Project -> Installed -> Version but the columns appear in the order Checkbox, Project, Version, Installed.\n\n### Verbose Logs\n\nN/A\n"},{"Id":"15414802175","Type":"IssuesEvent","CreatedAt":"2021-03-05T01:06:24","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10619","RelatedDescription":"Closed issue \"Add a new dotnet sign at src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/Signing/SignCommand.cs\" (#10619) at NuGet/Home","RelatedBody":"Note that this new command should perform similar input validation as the existing NuGet.exe sign command at src/NuGet.Clients/NuGet.CommandLine/Commands/SignCommand.cs. For example, some option combinations are invalid/required.\r\nBecause the argument can expand to multiple packages, the new sign command must support multiple packages. (I think the spec has a typo in that the sign usage example should show ...* as the verify command does.) SignArgs.PackagePath should be deprecated in favor of a new IReadOnlyList PackagePaths property."},{"Id":"15414765095","Type":"IssuesEvent","CreatedAt":"2021-03-05T01:01:38","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10626","RelatedDescription":"Opened issue \"Check formats of certificate used for signing cross all platforms\" (#10626) at NuGet/Home","RelatedBody":"Check formats of certificate used for signing cross all platforms. \r\ne.g. .pfx (used on Windows), .pem (used on Linux)\r\nCheck if we support the formats according to document, and according the code. Check if there is any inconsistency."},{"Id":"15414664265","Type":"IssuesEvent","CreatedAt":"2021-03-05T00:48:04","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10625","RelatedDescription":"Opened issue \"Add/update dotnet documentation for the sign command`\" (#10625) at NuGet/Home","RelatedBody":"The priority of this issue might be lower than other tasks in the epic."},{"Id":"15414654807","Type":"IssuesEvent","CreatedAt":"2021-03-05T00:46:49","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10624","RelatedDescription":"Opened issue \"Add to dotnet autocompletion for the sign command.\" (#10624) at NuGet/Home","RelatedBody":"The priority of this task is lower than other tasks in the epic."},{"Id":"15414639427","Type":"IssuesEvent","CreatedAt":"2021-03-05T00:44:50","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10623","RelatedDescription":"Opened issue \"Add unit tests to check if argument parsing is correct for dotnet nuget sign command\" (#10623) at NuGet/Home","RelatedBody":"We had [NuGetSignCommandTest.cs](https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.CommandLine.Test/NuGetSignCommandTest.cs) to test if the argument parsing is correct in the NuGet.exe sign command.\r\nSince we have different code for argument parsing between NuGet.exe sign and dotnet.exe nuget sign, we need to have the equivalent tests for dotnet.exe nuget sign.\r\n\r\nWe need to: Create tests in \\test\\NuGet.Core.FuncTests\\NuGet.XPlat.FuncTest\\XplatSignTests.cs, tests if the argument combinations are parsed correctly.\r\n\r\nThis might be difficult as it's not as easy as nuget cli to get the parsed arguments to verify.\r\n\r\nBut other xplat command (e.g. sources add/list etc.), we add tests into dotnet.integration.tests (functional tests) to test the argument parsing.\r\nSo we might have to do that if unit tests are difficult to add."},{"Id":"15414561427","Type":"IssuesEvent","CreatedAt":"2021-03-05T00:34:27","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10622","RelatedDescription":"Opened issue \"Add more unit tests in SignCommandRunner\" (#10622) at NuGet/Home","RelatedBody":"The existing tests in [SignCommandRunnerTests](https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Core.Tests/NuGet.Commands.Test/SignCommandRunnerTests.cs) test only exceptions and error cases.\r\nWe need to expand SignCommandRunnerTests to verify different options on all platforms with following positive tests.\r\n\r\n- When the certificate is a file path.\r\n- When the certificate is in a certificate store.\r\n- When the certificate is password-protected.\r\n\r\nAfter checking, the certificate used in current SignCommandRunnerTests doesn't have private key, so it won't work for positive cases ( it's okey to use that for negative cases).  \r\nFor password-protected case, we test when --interactive is false."},{"Id":"15414432923","Type":"IssuesEvent","CreatedAt":"2021-03-05T00:17:57","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10621","RelatedDescription":"Opened issue \"Add functional tests in dotnet.integrated.tests for dotnet nuget sign, and verify on all platforms\" (#10621) at NuGet/Home","RelatedBody":"Exit code, output, errors, etc. for argument validation failures.\r\nWith valid arguments the command creates a good, signed package.\r\n\r\nThe tests will need two fixtures: one for patching dotnet and another for setting up CA, TSA for signing.\r\nSome other infrastructures might also need to be set up. e.g. https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.CommandLine.Test/MockServer.cs\r\n\r\nRefactoring or duplicating might be needed (project NuGet.Clients.Tests targets only to net472, which is not applicable for dotnet.integration.tests) to make the tests to be added into dotnet.integration.tests be able to use the following:\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.CommandLine.Test/MockServer.cs\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/test/TestUtilities/Test.Utility/TestServer/PortReserver.cs\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.CommandLine.Test/PortReserver.cs\r\n"},{"Id":"15413081436","Type":"IssuesEvent","CreatedAt":"2021-03-04T21:46:49","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10620","RelatedDescription":"Opened issue \"Dotnet nuget sign : Respect the --interactive option. \" (#10620) at NuGet/Home","RelatedBody":"Note that the option has flipped from NuGet.exe's -NonInteractive option.\r\n\r\nSee all comments in NuGet/NuGet.Client#3069.\r\nPropagating the NonInteractive option from SignArgs in SignCommandRunner seems like the best option.\r\nIf the default behavior must change as a result of this work, please sync with Claire Novotny.\r\nIt may be worth adding a test for the non-interactive case. The test may actually be provided by a later task below."},{"Id":"15413034393","Type":"IssuesEvent","CreatedAt":"2021-03-04T21:42:15","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10619","RelatedDescription":"Opened issue \"Add a new dotnet sign at src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/Signing/SignCommand.cs\" (#10619) at NuGet/Home","RelatedBody":"Note that this new command should perform similar input validation as the existing NuGet.exe sign command at src/NuGet.Clients/NuGet.CommandLine/Commands/SignCommand.cs. For example, some option combinations are invalid/required.\r\nBecause the argument can expand to multiple packages, the new sign command must support multiple packages. (I think the spec has a typo in that the sign usage example should show ...* as the verify command does.) SignArgs.PackagePath should be deprecated in favor of a new IReadOnlyList PackagePaths property."},{"Id":"15412512978","Type":"IssuesEvent","CreatedAt":"2021-03-04T20:53:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10435","RelatedDescription":"Closed issue \"Remove dead code (TabItemButtonAutomationPeer)\" (#10435) at NuGet/Home","RelatedBody":"I don't believe this is doing anything...\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.PackageManagement.UI/Automation/TabItemButtonAutomationPeer.cs"},{"Id":"15411496599","Type":"IssuesEvent","CreatedAt":"2021-03-04T19:26:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5886","RelatedDescription":"Closed issue \"Move the MSBuild detecting logic to a library different than NuGet.Commandline\" (#5886) at NuGet/Home","RelatedBody":"The MSBuild Toolset detection logic currently resides in NuGet.Commandline.\r\nWe'd like to use this code in different scenarios, like tests etc and make it accessible to anyone. \r\n\r\n//cc\r\n@emgarten @zhili1208 "},{"Id":"15410733059","Type":"IssuesEvent","CreatedAt":"2021-03-04T18:21:51","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10593","RelatedDescription":"Closed issue \" [Request] install command should install with v3 folder layout\" (#10593) at NuGet/Home","RelatedBody":"As noted here https://github.com/NuGet/Home/discussions/10579 the install command lacks the ability to install the package in the v3 folder layout.\r\n\r\n**Expected result:**\r\n\r\nEvery command nuget CLI has to offer should be ported to the new v3 layout, either by re-defining the \"default\" behaviour or by giving an additional argument to change the behvaviour.\r\n\r\nI would suggest that every command should behave identically regarding the v3 layout, so all commands should default to v3 layout or give an argument, from a consumer point of view currently it seems half-baked where some commands do v3 layout while others don't.\r\n\r\n**Actual result:**\r\n\r\nThe `install` command doesn't \"respect\" the new folder layout and still uses the \"old\" layout, while other commands like `add` already do the \"new\" layout.\r\n\r\nI lack the knowledge if the `install` command is the only command which uses the \"old\" layout."},{"Id":"15410631689","Type":"IssuesEvent","CreatedAt":"2021-03-04T18:13:39","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10578","RelatedDescription":"Closed issue \"Wrongly resolved transitive references with centrally managed package versions\" (#10578) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThere seems to be an incorrect behavior regarding the resolution of transitive NuGet package references (not explicitly mentioned in the project file) when using centrally managed package versions (https://github.com/NuGet/Home/issues/6764).\r\n\r\n`dotnet.exe` (.NET SDK) version is `5.0.101`.\r\nThe problem has also been encountered with `MSBuild.exe` versions `16.7.3`, `16.8.2`, `16.8.3`, and `16.8.5`.\r\n\r\nConsider we have a C# project (`ProjectA`). This project depends on a project (`ProjectB`) as well as a package (`Package1`) that depends on another package (`Package2`) not mentioned in the project file: \r\n\r\n```\r\nProjectA <- ProjectB\r\n    ^\r\n    +------ Package1 <- Package2\r\n\r\n// (where A <- B means that A depends on B).\r\n```\r\n\r\nWe are trying to apply custom metadata to `Package1` resolution, say `ExcludeAssets=runtime`. The status quo is to apply these metadata to all its references, transitively.\r\n\r\n## Repro steps and/or sample project\r\n\r\nUsing the metadata mentioned above, `ExcludeAssets=runtime` applied on `Package1`, we expect `Package2` resolution to also exclude `runtime` assets, Or at least this is currently the case when not using centrally managed package versions:\r\n\r\nProjectA.cspoj\r\n```xml\r\n<PackageReference Include=\"Package1\" Version=\"2.0.0\" ExcludeAssets=\"runtime\" />\r\n```\r\n\r\nCommand\r\n```\r\ndotnet restore\r\n```\r\n\r\nproject.assets.json (`ProjectA`)\r\n```json\r\n\"Package1/2.0.0\": {\r\n  \"type\": \"package\",\r\n  \"dependencies\": {\r\n    \"Package2\": \"2.0.0\"\r\n  },\r\n  \"compile\": {\r\n    \"ref/netstandard2.0/Package1.dll\": {}\r\n  },\r\n  \"runtime\": {\r\n    \"lib/netstandard2.0/_._\": {}\r\n  }\r\n},\r\n\"Package2/2.0.0\": {\r\n  \"type\": \"package\",\r\n  \"compile\": {\r\n    \"ref/netstandard2.0/Package2.dll\": {}\r\n  },\r\n  \"runtime\": {\r\n    \"lib/netstandard2.0/_._\": {}\r\n  }\r\n}\r\n```\r\n\r\nIn comparison, the behavior with centrally managed package versions is:\r\n\r\nCommand\r\n```\r\ndotnet restore -p:ManagePackageVersionsCentrally=true\r\n```\r\n\r\nproject.assets.json (`ProjectA`)\r\n```diff\r\n\"Package1/2.0.0\": {\r\n  \"type\": \"package\",\r\n  \"dependencies\": {\r\n    \"Package2\": \"2.0.0\"\r\n  },\r\n  \"compile\": {\r\n    \"ref/netstandard2.0/Package1.dll\": {}\r\n  },\r\n  \"runtime\": {\r\n    \"lib/netstandard2.0/_._\": {}\r\n  }\r\n},\r\n\"Package2/2.0.0\": {\r\n  \"type\": \"package\",\r\n  \"compile\": {\r\n    \"ref/netstandard2.0/Package2.dll\": {}\r\n  },\r\n  \"runtime\": {\r\n-   \"lib/netstandard2.0/_._\": {}\r\n+   \"lib/netstandard2.0/Package2.dll\": {}\r\n  }\r\n}\r\n```\r\n\r\nIt appears that this is due to the fact that, when using centrally managed package versions, `Package1` is wrongly mentioned as a dependency of `ProjectB` (therefore its dependencies are transitively resolved) even if `ProjectB` does not depend on any package:\r\n\r\nproject.assets.json (`ProjectA`)\r\n```diff\r\n\"ProjectB/1.0.0\": {\r\n  \"type\": \"project\",\r\n  \"framework\": \".NETStandard,Version=v2.0\",\r\n+ \"dependencies\": {\r\n+   \"Package1\": \"2.0.0\"\r\n+ },\r\n  \"compile\": {\r\n    \"bin/placeholder/ProjectB.dll\": {}\r\n  },\r\n  \"runtime\": {\r\n    \"bin/placeholder/ProjectB.dll\": {}\r\n  }\r\n}\r\n```\r\n\r\nhttps://github.com/joeltankam/central-packages-sample repository showcase this with `Package1` being `System.Reflection.Emit.Lightweight` and `Package2` being `System.Reflection.Emit.ILGeneration`.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"15322501248","Type":"IssuesEvent","CreatedAt":"2021-02-25T20:01:29","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"15038151714","Type":"PullRequestEvent","CreatedAt":"2021-02-02T17:07:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Announcements/pull/52","RelatedDescription":"Merged pull request \"Add templates\" (#52) at NuGet/Announcements","RelatedBody":"Adds issue & pr templates."},{"Id":"15035390299","Type":"PullRequestEvent","CreatedAt":"2021-02-02T14:05:33","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/pull/52","RelatedDescription":"Opened pull request \"Add templates\" (#52) at NuGet/Announcements","RelatedBody":"Adds issue & pr templates."},{"Id":"15022864314","Type":"IssuesEvent","CreatedAt":"2021-02-01T17:28:44","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/50","RelatedDescription":"Closed issue \"nuget restore failing on ubuntu 20.04 NU3037\" (#50) at NuGet/Announcements","RelatedBody":"error NU3028: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\nerror NU3037: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n\r\ndigital ocean droplet\r\n   Static hostname: docker-ubuntu-s-1vcpu-1gb-nyc1-01\r\n         Icon name: computer-vm\r\n           Chassis: vm\r\n        Machine ID: f2e66c689e42d45004bbde355fa93999\r\n           Boot ID: 89ad10aa73104cb59022bb6129cbf062\r\n    Virtualization: kvm\r\n  Operating System: Ubuntu 20.04.1 LTS\r\n            Kernel: Linux 5.4.0-58-generic\r\n      Architecture: x86-64\r\n"},{"Id":"15018569152","Type":"IssuesEvent","CreatedAt":"2021-02-01T12:24:44","Actor":"hmaiga","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/51","RelatedDescription":"Closed issue \"Still have NuGet Restore Issues on Debian 10\" (#51) at NuGet/Announcements","RelatedBody":"The isssue seems to be marked as resolved #49 but i'm still facing the same issue on Debian 10.\r\n```\r\n  Determining projects to restore...\r\n/builds/company/modules/myproject/myproject.Tests/myproject.Tests.csproj : error NU3028: Package 'Microsoft.IdentityModel.Logging 5.6.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\n/builds/company/modules/myproject/myproject/myproject.csproj : error NU3028: Package 'System.Security.Principal.Windows 4.5.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain \r\n.......\r\n```\r\n\r\nOS Version:\r\nPRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"10\"\r\nVERSION=\"10 (buster)\"\r\nVERSION_CODENAME=buster\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n\r\nDid i miss something 🤔 ?"},{"Id":"15018262203","Type":"IssuesEvent","CreatedAt":"2021-02-01T11:59:07","Actor":"hmaiga","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/51","RelatedDescription":"Opened issue \"Still have NuGet Restore Issues on Debian 10\" (#51) at NuGet/Announcements","RelatedBody":"The isssue seems to be marked as resolved #49 but i'm still facing the same issue on Debian 10.\r\n```\r\n  Determining projects to restore...\r\n/builds/campany/modules/myproject/myproject.Tests/myproject.Tests.csproj : error NU3028: Package 'Microsoft.IdentityModel.Logging 5.6.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\n/builds/campany/modules/myproject/myproject/myproject.csproj : error NU3028: Package 'System.Security.Principal.Windows 4.5.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain \r\n.......\r\n```\r\n\r\nOS Version:\r\nPRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"10\"\r\nVERSION=\"10 (buster)\"\r\nVERSION_CODENAME=buster\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n\r\nDid i miss something 🤔 ?"},{"Id":"15011306391","Type":"IssuesEvent","CreatedAt":"2021-01-31T21:13:04","Actor":"TomCJones","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/50","RelatedDescription":"Opened issue \"nuget restore failing on ubuntu 20.04 NU3037\" (#50) at NuGet/Announcements","RelatedBody":"error NU3028: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\nerror NU3037: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n\r\ndigital ocean droplet\r\n   Static hostname: docker-ubuntu-s-1vcpu-1gb-nyc1-01\r\n         Icon name: computer-vm\r\n           Chassis: vm\r\n        Machine ID: f2e66c689e42d45004bbde355fa93999\r\n           Boot ID: 89ad10aa73104cb59022bb6129cbf062\r\n    Virtualization: kvm\r\n  Operating System: Ubuntu 20.04.1 LTS\r\n            Kernel: Linux 5.4.0-58-generic\r\n      Architecture: x86-64\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1367169420729208836","CreatedAt":"2021-03-03T17:46:05+00:00","UserScreenname":"nuget","Text":"🙌 New post just dropped 🙌\n\nWe're upping our security game by enabling you to find package vulnerabilities on… https://t.co/RPeN1KzPG9","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":81,"FavoriteCount":35,"RawContent":null},{"Id":"1366458126141120525","CreatedAt":"2021-03-01T18:39:39+00:00","UserScreenname":"nuget","Text":"🙌 New post just dropped 🙌\n\nLate last year we launched a https://t.co/F9kiKfvqkS survey to ask customers about their… https://t.co/mgpdDNj3is","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1366422928519233536","CreatedAt":"2021-03-01T16:19:47+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nIf you have a moment, please take some time to leave us feedback! We really appreciate it ♥ https://t.co/we1sP6mT8q","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1365020887758614529","CreatedAt":"2021-02-25T19:28:35+00:00","UserScreenname":"nuget","Text":"🔐 https://t.co/F9kiKfvqkS security update 🔐\n\nThe https://t.co/F9kiKfvqkS repository signing certification will be u… https://t.co/jur1vcuf0B","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1362857576422137856","CreatedAt":"2021-02-19T20:12:21+00:00","UserScreenname":"nuget","Text":"🙌 New doc just dropped! 🙌\n\nCheck out our latest recommendations to help secure your software supply chain, for pack… https://t.co/odu3ygBOvR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"1355252975678189569","CreatedAt":"2021-01-29T20:34:23+00:00","UserScreenname":"nuget","Text":"For users affected by the Debian 10 Buster CA Certificate issue, we now have a documented mitigation available.\n\nPl… https://t.co/VhGXtYI6aj","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":12,"FavoriteCount":8,"RawContent":null},{"Id":"1354633996202700808","CreatedAt":"2021-01-28T03:34:47+00:00","UserScreenname":"nuget","Text":"📢 For .NET Docker users, we have published new images that mitigate these issues by using a pre-release version of… https://t.co/eWBiUMyYhr","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":41,"FavoriteCount":26,"RawContent":null},{"Id":"1354552703150649351","CreatedAt":"2021-01-27T22:11:45+00:00","UserScreenname":"nuget","Text":"Please see our official announcement for our latest understanding of the root cause of this issue and recommended w… https://t.co/zAQswryI8d","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1354464163653890051","CreatedAt":"2021-01-27T16:19:55+00:00","UserScreenname":"nuget","Text":"(1/2) Here's what we've gathered to far:\n\n.NET 5 restore appears to be broken on some operating systems resulting i… https://t.co/KFwSxsi2rY","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"1354455557541933056","CreatedAt":"2021-01-27T15:45:44+00:00","UserScreenname":"nuget","Text":"⚠ Degradation notification ⚠\n\nSignature verification for Microsoft packages is failing in some scenarios due to a c… https://t.co/EisS5l9A3o","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":42,"FavoriteCount":24,"RawContent":null},{"Id":"1349825493265231872","CreatedAt":"2021-01-14T21:07:30+00:00","UserScreenname":"nuget","Text":"Thanks for the birthday wishes everyone! 🥳🥳🥳\n\nThank you to all of the team members (past and present), external con… https://t.co/mWYE55Bh9b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2021-03-05T05:30:31.5003468Z","RunDurationInMilliseconds":1707}