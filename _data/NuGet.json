{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44467715159","Type":"PullRequestEvent","CreatedAt":"2024-12-04T14:58:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10286","RelatedDescription":"Merged pull request \"[OIDC 8] Evaluate federated credential and generate API key\" (#10286) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10285.\r\n\r\nThis is the second PR in addition to https://github.com/NuGet/NuGetGallery/pull/10269 which implements the core business logic of the OIDC feature. This PR introduces a high-level `FederatedCredentialService` with a `GenerateApiKeyAsync` method.\r\n\r\nGiven a NuGet.org username and a bearer token (JWT), this method:\r\n1. Gets federated credential policies for the provided user\r\n2. Evaluates each policy to see if it applies to the bearer token (via a dependency interface)\r\n3. The first matching policy (if any) is used to create short-lived API key.\r\n4. The API key in plaintext is returned to the caller.\r\n\r\nA new token exchange HTTP API endpoint will be added in a future PR to call this new method.\r\n\r\nWriting out new audit entries will come in a future PR.\r\n\r\nThis new method uses another class to evaluate the list of polices against the bearer token (which internally includes checking the format and validity of the bearer token):\r\nhttps://github.com/NuGet/NuGetGallery/blob/4ca98319e435a60807ff8a52735f5da12b68add8/src/NuGetGallery.Services/Authentication/Federated/FederatedCredentialEvaluator.cs#L40\r\n\r\nThe new `GenerateApiKeyAsync` method is responsible for the following validations:\r\n- The username must refer to a valid, non-deleted, non-locked user account.\r\n- Handling the result of the policy evaluation (bad token, no matching policy, matching policy)\r\n- The package owner on the selected policy must be a valid, non-deleted, non-locked user or organization account.\r\n- The user must have access to the package owner (e.g. member of the organization)\r\n- The federated credential has not already been used (reject token replay)  "},{"Id":"44444207929","Type":"PullRequestEvent","CreatedAt":"2024-12-04T01:35:50","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10283","RelatedDescription":"Merged pull request \"Log enrichment with entry assembly metadata\" (#10283) at NuGet/NuGetGallery","RelatedBody":"Currently there is no way to figure out what version of job is running from logs. This change adds a property to all log messages with build information:\r\n\r\n![image](https://github.com/user-attachments/assets/b5b63b3a-b3f2-4e5e-9e0d-22a82aeeb896)\r\n\r\nWill save us some time when we need to figure out what exactly is running.\r\n\r\nDoesn't work for Gallery (i.e. logs are not enriched), but for Gallery it's not an issue in the first place, so I wasn't looking for ways to make it work there as well."},{"Id":"44437182116","Type":"PullRequestEvent","CreatedAt":"2024-12-03T20:25:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10285","RelatedDescription":"Merged pull request \"[OIDC 7] DB migration for federated credentials, associate policy with API key\" (#10285) at NuGet/NuGetGallery","RelatedBody":"> [!IMPORTANT]\r\n> This PR contains a DB migration. During deployment, we must execute Entity Framework DB migrations prior to deploying the new code.\r\n\r\nProgress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10269.\r\n\r\nThis PR introduces database changes to support the OIDC feature. We are adding two new tables and adding a new column to the existing `Credentials` table.\r\n\r\n- **New table:** `FederatedCredentialPolicies` - this stores criteria to evaluate a federated credentials like OIDC JWTs. See [`FederatedCredentialEvaluator`](https://github.com/NuGet/NuGetGallery/blob/4ca98319e435a60807ff8a52735f5da12b68add8/src/NuGetGallery.Services/Authentication/Federated/FederatedCredentialEvaluator.cs) to see how the columns are used.\r\n  - Foreign key links to `Users` via the `CreatedByUserKey` and `PackageOwnerUserKey` columns.\r\n  - There are two 1:N (one to many) relationships from user to federated credential policy, one to track who created the policy (user only) and one to track which package owner.\r\n- **New table:** `FederatedCredentials` - this stored federated credentials that have been used, in order to detect token replay. \r\n  - This table links to the `FederatedCredentialPolicies` table *without a foreign key*. If a policy is deleted, the federated credential record should not be removed, otherwise replay could occur. It is totally possible for a federated credential record to refer to a policy key that no longer exists. I added the column so we have a persistent record of the policy that was used to accept the federated credential. This can be used to correlate with existing records or make sense of audit logs.\r\n  - This table has a unique index on the `Identity` string column so we can detect replay (duplicate `uti` or `jti` JWT claims).\r\n- **New column:** optional `FederatedCredentialPolicyKey` on the `Credentials` table - this allows us to associate a policy with a short-lived API key that was created. In audit logs this will allow us to correlate a federated credential (JWT claims) with an API key that is used for a privileged action. Also, it allows us to delete short-lived API keys if the policy is deleted (manual revocation).\r\n   - This is a new 1:N (one to many) relationship from policy to credential (API key). It is possible for API keys and other credential types to have no related policy. It is possible for a policy to have no related credentials. The application ensures only API keys relate to policies, although the DB schema does allow non-API key credentials to have a policy key (due to our generic `Credentials` table design).\r\n\r\nSQL:\r\n```sql\r\nCREATE TABLE [dbo].[FederatedCredentialPolicies] (\r\n    [Key] [int] NOT NULL IDENTITY,\r\n    [Created] [datetime2](7) NOT NULL,\r\n    [LastMatched] [datetime2](7),\r\n    [TypeKey] [int] NOT NULL,\r\n    [Criteria] [nvarchar](max) NOT NULL,\r\n    [CreatedByUserKey] [int] NOT NULL,\r\n    [PackageOwnerUserKey] [int] NOT NULL,\r\n    CONSTRAINT [PK_dbo.FederatedCredentialPolicies] PRIMARY KEY ([Key])\r\n)\r\nCREATE INDEX [IX_CreatedByUserKey] ON [dbo].[FederatedCredentialPolicies]([CreatedByUserKey])\r\nCREATE INDEX [IX_PackageOwnerUserKey] ON [dbo].[FederatedCredentialPolicies]([PackageOwnerUserKey])\r\nCREATE TABLE [dbo].[FederatedCredentials] (\r\n    [Key] [int] NOT NULL IDENTITY,\r\n    [TypeKey] [int] NOT NULL,\r\n    [FederatedCredentialPolicyKey] [int] NOT NULL,\r\n    [Identity] [nvarchar](64),\r\n    [Created] [datetime2](7) NOT NULL,\r\n    [Expires] [datetime2](7),\r\n    CONSTRAINT [PK_dbo.FederatedCredentials] PRIMARY KEY ([Key])\r\n)\r\nCREATE INDEX [IX_FederatedCredentialPolicyKey] ON [dbo].[FederatedCredentials]([FederatedCredentialPolicyKey])\r\nCREATE UNIQUE INDEX [IX_Identity] ON [dbo].[FederatedCredentials]([Identity])\r\nALTER TABLE [dbo].[Credentials] ADD [FederatedCredentialPolicyKey] [int]\r\nCREATE INDEX [IX_FederatedCredentialPolicyKey] ON [dbo].[Credentials]([FederatedCredentialPolicyKey])\r\nALTER TABLE [dbo].[Credentials] ADD CONSTRAINT [FK_dbo.Credentials_dbo.FederatedCredentialPolicies_FederatedCredentialPolicyKey] FOREIGN KEY ([FederatedCredentialPolicyKey]) REFERENCES [dbo].[FederatedCredentialPolicies] ([Key])\r\nALTER TABLE [dbo].[FederatedCredentialPolicies] ADD CONSTRAINT [FK_dbo.FederatedCredentialPolicies_dbo.Users_CreatedByUserKey] FOREIGN KEY ([CreatedByUserKey]) REFERENCES [dbo].[Users] ([Key])\r\nALTER TABLE [dbo].[FederatedCredentialPolicies] ADD CONSTRAINT [FK_dbo.FederatedCredentialPolicies_dbo.Users_PackageOwnerUserKey] FOREIGN KEY ([PackageOwnerUserKey]) REFERENCES [dbo].[Users] ([Key])\r\n```"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44472047288","Type":"IssuesEvent","CreatedAt":"2024-12-04T16:48:18","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13960","RelatedDescription":"Closed issue \"Refactor RestoreCommand.ExecuteAsync()\" (#13960) at NuGet/Home","RelatedBody":"The `RestoreCommand.ExecuteAsync()` method is long and complicated to read. Refactor it into multiple methods."},{"Id":"44470232103","Type":"IssuesEvent","CreatedAt":"2024-12-04T15:59:54","Actor":"Gambero81","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13987","RelatedDescription":"Opened issue \"Version conflict with Nuget.Frameworks.dll in .Net SDK 9.0.101\" (#13987) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Framework.dll 9.0.101\n\n### Worked before?\n\nsdk 8.0.307\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\ni use roslyn libraries to analyze my project.\r\nafter update my project to net9, roslyn code has stopped working.\r\n\r\nsome code to reproduce the issue:\r\n\r\n```\r\nvar solutionFilePath = \"c:\\myPath\\mySolution.sln\";\r\nvar projectName = \"MyProject\";\r\n\r\nusing (var workspace = MSBuildWorkspace.Create())\r\n{\r\n   var solution = await workspace.OpenSolutionAsync(solutionFilePath);\r\n   var project = solution.Projects.FirstOrDefault(p => p.Name.Equals(projectName));\r\n   if (project == null)\r\n   {\r\n       HandleError($\"Progetto {projectName} non trovato nella solution!\");\r\n       return null;\r\n   }\r\n   var compilation = await project.GetCompilationAsync();\r\n\r\n  //after call to project.GetCompilationAsync if i watch workspace.Diagnostics \r\n  //it give me a lot of errors relative to assembly NuGet.Frameworks (see verbose log section)\r\n}\r\n```\r\n\r\nerrors are like 'Could not load file or assembly 'NuGet.Frameworks, Version=6.12.2.1'\r\n\r\nNOTE: the references version of NuGet.Frameworks library is 6.12.1.1\r\n\r\nthe version it not found because simply DOES NOT EXIST (6.12.1.1 is the last one available on nuget)\r\n\r\nthese errors cause all the code analysis to fail...\r\n\r\na similar issue is this one: https://github.com/NuGet/Home/issues/13746 who is closed but NOT RESOLVED: the workaround suggested (using the old framework version) does NOT WORK with a project compiled in NET9.\r\n\r\nany help?\r\n\r\nThanks\r\n\r\n\r\n\n\n### Verbose Logs\n\n```shell\n[Error] Msbuild failed when processing the file 'C:\\ARTInvoiceManager\\ARTInvoiceManager.Server\\ARTInvoiceManager.Server.csproj' with message: C:\\Program Files\\dotnet\\sdk\\9.0.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets: (90, 5): errore imprevisto dell'attività \"ProcessFrameworkReferences\".\r\nSystem.IO.FileLoadException: Could not load file or assembly 'NuGet.Frameworks, Version=6.12.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)\r\nFile name: 'NuGet.Frameworks, Version=6.12.2.1, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n ---> System.IO.FileLoadException: Could not load file or assembly 'C:\\Program Files\\dotnet\\sdk\\9.0.101\\NuGet.Frameworks.dll'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)\r\nFile name: 'C:\\Program Files\\dotnet\\sdk\\9.0.101\\NuGet.Frameworks.dll'\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingLoad(AssemblyName assemblyName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\r\n   at Microsoft.NET.Build.Tasks.ProcessFrameworkReferences.<>c.<AddPacksForFrameworkReferences>b__233_0(ITaskItem item)\r\n   at System.Linq.Enumerable.ArraySelectIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.IEnumerableWhereIterator`1.ToList()\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at Microsoft.NET.Build.Tasks.ProcessFrameworkReferences.AddPacksForFrameworkReferences(List`1 packagesToDownload, List`1 runtimeFrameworks, List`1 targetingPacks, List`1 runtimePacks, List`1 unavailableRuntimePacks, List`1& knownRuntimePacksForTargetFramework)\r\n   at Microsoft.NET.Build.Tasks.ProcessFrameworkReferences.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\n```\n"},{"Id":"44457049291","Type":"IssuesEvent","CreatedAt":"2024-12-04T10:17:40","Actor":"Aldebaran91","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13984","RelatedDescription":"Opened issue \"\"License Acceptence\" window should be extended by \"changed from ... to ...\" and \"new not known license model for package ...\"\" (#13984) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nSome software vendors change the licence model of their nuget after a new version. For example, Extended.Wpf.Toolkit has changed its licence model several times.\r\n\r\nFrom Version 3.6.0 with MS-PL to 3.7.0 to \"Xceed Software License\" (for non-commercial use).\r\n\r\nI want a big red call sign to indicate that the licence has changed from the previous version. I only want to check/read the licence once when installing. This extension would help companies avoid using nuget versions that are not allowed because they have changed the licence to non-commercial use.\r\n\r\nFor \"Extended.Wpf.Toolkit\" it didn't even showed me the \"License Acceptence\" window when I updated the nuget.\r\n\r\nMy second suggestion is that Visual Studio allows me to white list license models like \"MS-PL\" or \"MIT\" which I checked for my company. The \"License Acceptence\" window should show me that there is a non accepted new license model.\r\n\r\n![nugetlicenseacceptance](https://github.com/user-attachments/assets/326cd5f6-c310-400b-ba6e-c59605b5ef9a)\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"44456146819","Type":"IssuesEvent","CreatedAt":"2024-12-04T09:54:23","Actor":"Aldebaran91","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13983","RelatedDescription":"Opened issue \"Bug in \"packageSourceMapping\" ignores pattern\" (#13983) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.12.3\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nExample:\r\n\r\n1) Create nuget Package called \"Microsoft.Data.SqlClient\" and add it to your nuget feed in Azure DevOps with nuget package Version \"1.0.0.0\". Version must be below the current Version of \"Microsoft.Data.SqlClient\" on nuget.org.\r\n2) Install package from private Azure DevOps feed in your C# project.\r\n3) Create nuget.config with \"packageSourceMapping\". Like this\r\n\r\n``` xm\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>  \r\n\t<packageSources>\r\n\t\t<add key=\"MyFeed\" value=\"privatedevopsaddress/mycollection/_packaging/myfeed/nuget/v3/index.json\" />\r\n\t\t<add key=\"MyFeed2\" value=\"privatedevopsaddress/mycollection/_packaging/myfeed2/nuget/v3/index.json\" />\r\n\t\t<add key=\"MyFeed3\" value=\"privatedevopsaddress/mycollection/_packaging/myfeed3/nuget/v3/index.json\" />\r\n\t\t<add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n\t</packageSources>\r\n\r\n  <packageSourceMapping>\r\n\t\t<packageSource key=\"MyFeed\">\r\n\t\t\t<package pattern=\"Microsoft.Data.SqlClient\" />\r\n\t\t\t<package pattern=\"MyFeed.*\" />\r\n\t\t</packageSource>\r\n\t\t<packageSource key=\"MyFeed2\">\r\n\t\t\t<package pattern=\"MyFeed2.*\" />\r\n\t\t</packageSource>\r\n\t\t<packageSource key=\"MyFeed3\">\r\n\t\t\t<package pattern=\"MyFeed3.*\" />\r\n\t\t</packageSource>\r\n\t\t<packageSource key=\"nuget.org\">\r\n\t\t\t<package pattern=\"*\" />\r\n\t\t</packageSource>\r\n  </packageSourceMapping>\r\n  \r\n</configuration>\r\n```\r\nand add it to your nuget packagemanager in Visual Studio.\r\n4) Open nuget package manager in Visual Studio 2022.\r\n5) Go to tab \"Updates\".\r\n6) Change package source to \"All\"\r\n\r\n\r\nWhat you get: It will show that there is a new update for \"Microsoft.Data.SqlClient\" in nuget feed \"nuget.org\".\r\nWhat you expect: No new updates because \"Microsoft.Data.SqlClient\" is now mapped to the private feed \"MyFeed\" and not to nuget.org.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44455326649","Type":"IssuesEvent","CreatedAt":"2024-12-04T09:33:03","Actor":"Aldebaran91","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13982","RelatedDescription":"Opened issue \"Visual Studio Nuget update suggestion ignores current .net framework in project\" (#13982) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.12.3\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Create project with .net8 and add an older nuget version with .net 8 support which only supports .net9 in the latest version.\r\n2) Open Nuget manager UI\r\n3) Go to tab \"Updates\"\r\n\r\nYou will see that it will suggest you the latest version which is not supported by the current project. This update should not be suggested. Because of this an auto update is no longer supported on this project. Each update must be done manually.\r\n![nugetupdatesuggestion](https://github.com/user-attachments/assets/b672a0a5-673a-430b-9240-d0da512ff409)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44455326542","Type":"IssuesEvent","CreatedAt":"2024-12-04T09:33:02","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13981","RelatedDescription":"Opened issue \"[Bug Bash] The installed package from offline source should not be shown in “Installed” tab anymore after the source is disabled\" (#13981) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.84\n\n### Worked before?\n\nIt is not regression since it reproes on D16.11\\34601.136.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.84\r\nVS Version: Main\\35603.65\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\n1.\tThe repro rate is 100%.  \r\n2.\tIt is not regression since it reproes on D16.11\\34601.136.\r\n#### Repro Steps:    \r\n1.\tCreate a “C# Console App (.NET 9.0)” project.    \r\n2.\tRight-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open the PM UI.   \r\n3.\tClick the settings button, go to “Package sources” tab and make sure two package sources (“nuget.org” and “Microsoft Visual Studio Offline Packages”) are available. \r\n4.\tGo back to the PM UI, click “Browse” tab and select the source “Microsoft Visual Studio Offline Packages” from Package source drop-down list. \r\n5.\tInstall a package (e.g. Microsoft.NETCore) with the latest version (5.0.2 in this case).\r\n6.\tClick the settings button, go to “Package sources” tab and disable the source “Microsoft Visual Studio Offline Packages” from the source list. \r\n7.\tGo back to the PM UI, click “Installed” tab and select the source “nuget.org” from Package source drop-down list. \r\n\r\n#### Expected Result:\r\nThe installed package from offline source should not be shown in “Installed” tab anymore since it was installed from the disabled source “Microsoft Visual Studio Offline Packages” instead of the current selected “nuget.org”.\r\n#### Actual Result:\r\nThe installed package from offline source still shows in “Installed” tab after the source is disabled as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/0fceebc9-2d02-4827-a4fe-4032c184946f)\n\n### Verbose Logs\n\n_No response_"},{"Id":"44445446128","Type":"IssuesEvent","CreatedAt":"2024-12-04T02:45:18","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13924","RelatedDescription":"Closed issue \"[Bug Bash] The “README” tab doesn’t show in the right panel of the PM UI after installing package\" (#13924) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.13.0.63\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature. \r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n#### Notes:   \r\n\r\n1. The repro rate is 70%.  \r\n\r\n2. This issue easily reproes when installing the package for first time. \r\n\r\n3. Clicking the refresh button doesn’t work. \r\n\r\n4. It’s not a regression since it is a new feature. \r\n\r\n#### Repro Steps:    \r\n\r\n1. Create a “C# Console App (.NET 9.0)” project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open the PM UI.    \r\n\r\n3. Click “Browse” tab and select the source “nuget.org” from Package source drop-down list. \r\n\r\n4. Install a package (e.g. RestSharp) and switch to “Installed\" tab. \r\n\r\n5. Observe the details panel on the right panel of PM UI.  \r\n\r\n#### Expected:    \r\n\r\nThe “README” tab should show in the right panel as below. \r\n![1114](https://github.com/user-attachments/assets/a20c196e-d38c-42ea-b7f9-d332f46a59e8)\r\n#### Actual:    \r\n\r\nThe “README” tab doesn’t show in the right panel of the PM UI after installing package as below screenshot:  \r\n![image](https://github.com/user-attachments/assets/a1a4f1e5-0d5f-48b5-98ce-721038486ee2)\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"44444083503","Type":"IssuesEvent","CreatedAt":"2024-12-04T01:28:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10843","RelatedDescription":"Closed issue \"NuGet GC performance push for dev17\" (#10843) at NuGet/Home","RelatedBody":"I started looking into NuGet restore allocations, as they are causing large GC pause times in the wild. I'm looking at a trace of Orchard Core in https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/1278814.\r\n\r\nMethod|Description|Fix|Percentage % | Tracking issue|\r\n---|---|---|---|----\r\n~`TokenSegment.TryMatch`~|~Creates lots of `Dictionary<TKey, TValue>`~|~Can we be more efficient here and share between content items?~|16%| \r\n~`TokenSegment.TryMatch`~|~Substrings path many times over~|~Can we pass though string segment (value, startIndex, length) and operate on that instead of creating in between string?~|11.1%| \r\n~`RemoteDependencyWalker.ChainPredicate`~|~Boxes a List<LibraryRange>.Enumerator & LibraryRange[] enumerator via RemoteResolveResult.Dependencies~|~Can we just turn this into a List<Library>?~|4.4%|  https://github.com/nuget/home/issues/10918\r\n~`TokenSegment.TryMatch`~|~Resizes ContentItem.Properties while adding a property~|~Set a better default capacity~|4.1% | https://github.com/NuGet/Home/issues/10969\r\n~`RemoteDependencyWalker.CreateGraphNode`~|~Very large amounts of allocating async state machine (&lt;CreateGraphNode&gt;d__3)~|~Move from recursive function to iteration/loop to walk the graph~|~3.8%~| https://github.com/NuGet/NuGet.Client/pull/5624|\r\n~`TokenSegment.TryMatch`~|~Concats `_token + \"_raw\"` while adding a property~|~Do we need \"raw\" properties?~|3.5% | https://github.com/NuGet/Home/issues/10969\r\n~`VersionFormatter.Format`~|~Very inefficient, uses combo of `StringBuilder` + `string.Format`~|~Replace `string.Format` usage with `StringBuilder.Append` and `StringBuilder.AppendFormat`~|2.2%|https://github.com/NuGet/Home/issues/11014\r\n~`RemoteDependencyWalker.CreateGraphNode`~|~Creates List<Task> that is resized a bunch~|~Give it a better capacity~|~1.6%~|https://github.com/NuGet/NuGet.Client/pull/5963|\r\n`FrameworkNameProvider.TryGetPortableProfile`|Very heavy on HashSet allocations|Do we need them?|0.5%\r\n"},{"Id":"44442373970","Type":"PullRequestEvent","CreatedAt":"2024-12-03T23:52:29","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/13904","RelatedDescription":"Closed pull request \"Enhancing NuGet Audit for Secure and Selective `<PackageDownload>` Vulnerability Reporting\" (#13904) at NuGet/Home","RelatedBody":"Fixes: https://github.com/NuGet/Home/issues/13905\r\n\r\nIssue https://github.com/NuGet/Home/issues/13658\r\n\r\nRendered: https://github.com/NuGet/Home/blob/ed9318029eda7ad534d58a0e6c44000da602bcef/accepted/2024/NuGet-Audit-for-PackageDownload.md\r\n"},{"Id":"44441258289","Type":"PullRequestEvent","CreatedAt":"2024-12-03T22:55:14","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13561","RelatedDescription":"Merged pull request \"Spec: NuGet onboarding to Unified Settings in Visual Studio\" (#13561) at NuGet/Home","RelatedBody":"[Rendered spec](https://github.com/NuGet/Home/blob/dev-donnie-msft-onboardUnifiedSettings/accepted/2024/unified-vs-settings.md)\r\n\r\nPart of: https://github.com/NuGet/Client.Engineering/issues/2712"},{"Id":"44439049577","Type":"IssuesEvent","CreatedAt":"2024-12-03T21:32:55","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13893","RelatedDescription":"Closed issue \"Nuget Packages Manager screen for Solution automatically selects transitive dependencies\" (#13893) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Nuget-Packages-Manager-screen-for-Soluti/10776764)._\n\n---\nIn the Nuget Packages Manager screen for solution, in the \"Updates\" list, when selecting a package to update, all the projects when the package is top-level AND transitive are automatically selected.\n\n![TransitivePackagesAutoSelected.png](https://aka.ms/dc/image?name=B5bb69bfd0a6e42d38af9118480015deb638654455039494830_TransitivePackagesAutoSelected.png&tid=5bb69bfd0a6e42d38af9118480015deb638654455039494830)\n\nClicking the Update button (underneath the Uninstall button) will update the package reference for the top-level registration, but also add a package reference in all the projects where the package is used as a transitive dependency. Which is not the intended use of transitive dependencies.\n\nI would expect to only have the project where the dependency is a top-level one to be selected automatically.\n\nThe solution I'm working with a .NET Framework 4.8 solution, using PackageReference and with SDK-style projects.\n\n_PS: when updating multiple packages at once, by selecting them in the package list of the Update tab, and clicking the \"Update\" button located on top of that list, only the projects where the dependencies are top-level are updated, which is the intended behavior._\n\n---\n### Original Comments\n\n#### Feedback Bot on 28/10/2024, 00:10 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n"},{"Id":"44438447022","Type":"IssuesEvent","CreatedAt":"2024-12-03T21:11:36","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13980","RelatedDescription":"Opened issue \"Telemetry: Collect telemetry for <PackageDownload> vulnerabilities \" (#13980) at NuGet/Home","RelatedBody":"Collect information before introducing these new warnings https://github.com/NuGet/Home/issues/13658"},{"Id":"44437698610","Type":"IssuesEvent","CreatedAt":"2024-12-03T20:44:03","Actor":"baronfel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13979","RelatedDescription":"Opened issue \"Support extracting SBOMs from NuGet packages that contain them\" (#13979) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe\n\n### The Elevator Pitch\n\nNow that it's easy to generate SBOMs for packages via the Microsoft.SBOM.Targets package, it would be great if the NuGet tooling made it easy to access the SBOM generated for a package without having to \r\n\r\n* generate the package via dotnet pack\r\n* extract the package\r\n* locate the SBOM in the package\r\n\r\nMany interop scenarios, like [uploading an SBOM to GitHub to participate in their Dependency Graph services](https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api), require access to the raw SBOM and it's annoying to do this dance every time. It would be great to run a command like `dotnet package extract-sbom <path to package>` to get the SBOM and signature from the package.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"44436870122","Type":"IssuesEvent","CreatedAt":"2024-12-03T20:14:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13978","RelatedDescription":"Opened issue \"dotnet list package should show RID specific packages\" (#13978) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\n`dotnet list package --vulnerable --include-transitive` does not list some packages that NuGetAudit (restore) does. This is because audit will check all RID graphs, but `dotnet list package` only checks the no-RID graphs.\n\n### Desired Behavior\n\nAny package that NuGetAudit reports as vulnerable during restore should also be discoverable with `dotnet list package`.\r\n\r\nHowever, when a project contains multiple RIDs, and the graphs are the same, it should show 'groups' with the same package list, to avoid long output that is difficult to understand. See `dotnet nuget why` for an example.\n\n### Additional Context\n\nlist package previously did show packages from all the RIDs (although it didn't tell you that it was a RID-specific graph, or what the RID was), but it was removed because it looked like redundant output:\r\n* https://github.com/NuGet/Home/issues/7607\r\n\r\n"},{"Id":"44434851196","Type":"IssuesEvent","CreatedAt":"2024-12-03T18:56:59","Actor":"jwosty","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13977","RelatedDescription":"Opened issue \"Custom Fable TFM\" (#13977) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nHello NuGet team! I'm representing the Fable project (the popular F#-to-Javascript transpiler), and we want to look into having a custom TFM for fable specifically, so that we can integrate it better into the NuGet/MSBuild ecosystem (similarly to how Tizen, Andriod, iOS, etc works).\n\n### Additional Context and Details\n\nI previously opened a discussion item for this [here](https://github.com/NuGet/Home/discussions/12965). More of the gory details and relevant links are in there. We would really like to have a conversation with someone from the NuGet team about this."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-05T03:30:21.847463Z","RunDurationInMilliseconds":1120}