{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12460154020","Type":"IssuesEvent","CreatedAt":"2020-05-28T03:25:35","Actor":"agoling","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8014","RelatedDescription":"Opened issue \"Contact support out-of-service\" (#8014) at NuGet/NuGetGallery","RelatedBody":"### “Contact support” out-of-service，Wrong report from https://www.nuget.org/\r\n\r\n### Describe the bug\r\n“Contact support” out-of-service，Wrong report from https://www.nuget.org/ ，Please see the picture\r\n![image](https://user-images.githubusercontent.com/37896493/83095304-98c8dc00-a0d5-11ea-892a-415ec8ee667c.png)\r\n\r\n"},{"Id":"12457446474","Type":"IssuesEvent","CreatedAt":"2020-05-27T20:18:37","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7905","RelatedDescription":"Closed issue \"[Package Renames] Monitor the popularity transfer freshness\" (#7905) at NuGet/NuGetGallery","RelatedBody":"Monitoring changes: https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGetMonitoring/pullrequest/1449?_a=overview\r\n\r\nGeneva Monitor: https://jarvis-west.dc.ad.msft.net/?page=settings&mode=mdm&tab=monitors&account=NuGetService&namespace=NuGetMonitoring&metric=AzureSearchService.AuxiliaryFileAgeSeconds&monitor=Azure%20Search%20Auxiliary%20File%20Age"},{"Id":"12456246140","Type":"PullRequestEvent","CreatedAt":"2020-05-27T18:07:15","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8012","RelatedDescription":"Merged pull request \"Banner about the upcoming TLS 1.2 enforcement\" (#8012) at NuGet/NuGetGallery","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/102933/82963916-e8de5c00-9f78-11ea-96d4-e02015d61a5d.png)\r\n\r\nAdded variable with the background color and put it in all places the verbatim value was used."},{"Id":"12455546036","Type":"IssuesEvent","CreatedAt":"2020-05-27T16:55:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8013","RelatedDescription":"Opened issue \"Consider gzipping the catalog index (Content-Encoding: gzip)\" (#8013) at NuGet/NuGetGallery","RelatedBody":"Currently the catalog index (https://api.nuget.org/v3/catalog0/index.json) is 1.91 MB. It will continue growing forever, giving the current design. It is unbounded in nature.\r\n\r\nWe can gzip it to make it faster to download. For example, gzipping locally gives the following compression level:\r\n1.91 MB => 360 KB\r\n\r\nThis will make polling the catalog for changes faster."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12459825541","Type":"IssuesEvent","CreatedAt":"2020-05-28T02:24:07","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9620","RelatedDescription":"Opened issue \"Convert Microsoft.VisualStudio.ProjectSystem.Managed from PackageDownload to PackageReference\" (#9620) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files#r428498657\r\n\r\n`Microsoft.VisualStudio.ProjectSystem` uses `PackageDownload` to reference `Microsoft.VisualStudio.ProjectSystem.Interop` directly with `EmbedInteropTypes` set to `true`.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/34ceb7d3d5a70ba4b1ecf196e5902dcc9ffed05d/test/NuGet.Clients.Tests/NuGet.PackageManagement.VisualStudio.Test/NuGet.PackageManagement.VisualStudio.Test.csproj#L62-L65\r\n\r\nhttps://github.com/NuGet/NuGet.Client/pull/3392/ copied this pattern for the .NET Project System packages, however this isn't necessary for `Microsoft.VisualStudio.ProjectSystem.Managed` and `Microsoft.VisualStudio.ProjectSystem.Managed.VS`.\r\n\r\nConverting these to `PackageReference` triggers a package downgrade error on `Microsoft.CodeAnalysis.FxCopAnalyzers`.\r\n\r\nUpgrading `Microsoft.CodeAnalysis.FxCopAnalyzers` that to `3.0.0` triggers 90 new errors, many of which look like they're worth a proper review."},{"Id":"12459216353","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:28:16","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9619","RelatedDescription":"Opened issue \"Replace BrowseObjectBase with LocalizableProperties once updated shell package available\" (#9619) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392#discussion_r431179016\r\n\r\nOnce the new package is available, this class can be removed."},{"Id":"12459130727","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:12:21","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9618","RelatedDescription":"Opened issue \"Show framework references of packages and projects\" (#9618) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/pull/3392/files/a462d871eebed985c3a3fe7fd145d75f7d30267e#r430954927\r\n\r\n@nkolev92 wrote:\r\n\r\n> We are missing the Framework References here, should we add them?\r\n>\r\n> Specifically I am referring to shared frameworks in the .NET Core world."},{"Id":"12459127666","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:11:48","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9617","RelatedDescription":"Opened issue \"Show properties of Compile Time Assembly items in their browse object\" (#9617) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files/a462d871eebed985c3a3fe7fd145d75f7d30267e#r430954182\r\n\r\nThe browse object for a package's compile time assemblies currently only shows the path. The lock file defines a set of properties which could be included."},{"Id":"12459118858","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:10:12","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9616","RelatedDescription":"Opened issue \"Show more information for a dependency's browse object in the dependencies tree\" (#9616) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files/a462d871eebed985c3a3fe7fd145d75f7d30267e#r430953620\r\n\r\nWe could show more information in the browse object of transitive dependencies. For example, Include/Exclude values.\r\n\r\nSomeone with a deeper understanding of the domain should review this and see what's missing.\r\n\r\nThe NuGet side of this would apply only to transitive references. The .NET Project System would control the equivalent information for top-level references."},{"Id":"12459116174","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:09:42","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9615","RelatedDescription":"Opened issue \"Filter a package's \"contentFiles\" items by language in dependencies tree \" (#9615) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files/a462d871eebed985c3a3fe7fd145d75f7d30267e#r430954182\r\n\r\nThe dependencies tree shows a packages content files as a flat list. It currently shows files across all languages. It would be more correct to filter this list to show only those that match the project's language.\r\n\r\nhttps://github.com/dotnet/NuGet.BuildTasks/blob/5244c490a425353ac12445567d87d674ae118836/src/Microsoft.NuGet.Build.Tasks/ResolveNuGetPackageAssets.cs#L572-L575"},{"Id":"12459113991","Type":"IssuesEvent","CreatedAt":"2020-05-28T00:09:16","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9614","RelatedDescription":"Opened issue \"Show version range on package reference nodes in dependencies tree\" (#9614) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files/a462d871eebed985c3a3fe7fd145d75f7d30267e#r431223599\r\n\r\nIt may be useful to show the requested version range on the caption of dependencies tree items that represent package references.\r\n\r\nThe NuGet side of this would apply only to transitive package references. The .NET Project System would control the equivalent information for top-level package references."},{"Id":"12458414707","Type":"IssuesEvent","CreatedAt":"2020-05-27T22:19:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7870","RelatedDescription":"Closed issue \"globalpackagesfolder in nuget.config is ignored in alpine linux\" (#7870) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet\r\n\r\nNuGet version (x.x.x.xxx):\r\nNuGet Command Line\r\n4.9.0.6\r\n\r\ndotnet.exe --version (if appropriate):\r\n 2.1.503\r\n\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n OS Name:     alpine\r\n OS Version:  3.7\r\n OS Platform: Linux\r\n RID:         alpine.3.7-x64\r\n\r\nWorked before? no\r\n\r\n1. create a Nuget.Config in a root directory with a relative globalpackagesfolder defined\r\n2.1 run dotnet pack to trigger a build of a project or\r\n2.2 run dotnet nuget locals all --list -> the default globalpackagesfolder is shown \r\n3. the specified globalpackagesfolder is not used\r\n4. works under windows but not under alpine linux\r\n\r\n"},{"Id":"12458408862","Type":"IssuesEvent","CreatedAt":"2020-05-27T22:18:19","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9432","RelatedDescription":"Closed issue \"No packages will install\" (#9432) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nJetbrains Rider UI\r\n\r\nNuGet version: 5.5.0\r\n\r\ndotnet.exe --version: 2.1.512\r\n\r\nVS version: Community 2019\r\n\r\nOS version: Version 1909 (OS Build 18363.720)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Right click on project\r\n\r\n2. Manage NuGet Packages\r\n\r\n3. Choose any package, so far I have tested Newtonsoft.Json, CitizenFX.Core.Client, and CitizenFX.Core.Server\r\n\r\n4. Install the package\r\n\r\n5. Get error:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tException 'System.AggregateException' thrown when trying to add source 'http://packagesource'. Please verify all your online package sources are available.\r\nOne or more errors occurred.\r\nUnable to load the service index for source http://packagesource.\r\nAn error occurred while sending the request.\r\nThe remote name could not be resolved: 'packagesource'\t\t\t\t\r\n```\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\nUnsure of how to do this on Visual Studio 2019, if someone can tell me how, I'd happily do it.\r\n\r\n### Sample Project\r\nI'll just zip the project I'm currently using\r\n[MarvosaCADServer.zip](https://github.com/NuGet/Home/files/4472463/MarvosaCADServer.zip)\r\n\r\n"},{"Id":"12458403151","Type":"IssuesEvent","CreatedAt":"2020-05-27T22:17:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9140","RelatedDescription":"Closed issue \"Determine Entire Configuration for a Given Path\" (#9140) at NuGet/Home","RelatedBody":"I've read all of the configuration documents, and I am pretty sure the answer is no.\r\n\r\nIs there a Nuget CLI config command that will display the **entire** resolved configuration for the directory that nuget is executing in? This includes the configuration elements that cannot be accessed with the **config** command like `packageSources`."},{"Id":"12457897595","Type":"IssuesEvent","CreatedAt":"2020-05-27T21:11:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9613","RelatedDescription":"Opened issue \"RepositoryMetadata Equals does not account for branch and commit properties\" (#9613) at NuGet/Home","RelatedBody":"Related: https://github.com/dotnet/wpf/issues/3050#event-3379286042\r\n\r\nhttps://github.com/NuGet/NuGet.Client/commit/0e4d1b598f350b3dc675018d539114d1328189ef\r\n\r\ncc @clairernovotny"},{"Id":"12456853882","Type":"IssuesEvent","CreatedAt":"2020-05-27T19:12:27","Actor":"luckerby","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9612","RelatedDescription":"Opened issue \"Cannot Step Into NuGet Source Code\" (#9612) at NuGet/Home","RelatedBody":"I'm going over some simple C# .NET Core code that deals with package dependencies, using the NuGet SDK itself (code [here](https://github.com/NuGet/Home/issues/6188)). So I've created a sample project in VS 2019 and used that code.\r\n\r\nI'd like to do a step-into with Visual Studio, to see exactly what NuGet methods are called, so need to make sure the symbols I'm using match whatever version the libraries the code uses. So I don't leave things to chance, and install the 5.6.0 version of the NuGet packages the code needs (`NuGet.Protocol` and `NuGet.DependencyResolver.Core`, with their required dependencies installed automatically) from VS's own Package Manager UI. I build the project, go to the `bin` folder and record the exact file version of the `NuGet.Protocol` .dll: 5.6.0.6591. I'm pretty sure the other assemblies included in the NuGet packages use the same version, based on the fact that there are dedicated Powershell scripts inside the NuGet's own tooling that look to rewrite the version when needed for all.\r\n\r\nI clone the `NuGet.Client` GitHub repo locally. I switch to the `5.6.0.6591` tag, and build using the instructions in the `CONTRIBUTING.md` file. I go to the `artifacts` folder, where each project has its output assemblies and symbol files. I add the path to both folders containing the files I'm after, going with `netstandard2.0` folder due to the framework I'm targeting (.NET Core). Casually looking over one of the .dll within, I notice that the file version is 5.6.0.41820, clearly different from what I was expecting. Sure enough, adding both folders (corresponding to the 2 NuGet packages) to the symbol path in VS doesn't have any effect - as stepping into the code doesn't even trigger the symbols loading, let alone go into the NuGet source code.\r\n\r\nAnother hint that things don't quite match what I expect is that the .nupkg packages created right at the end of the build process have a names such as `NuGet.Protocol.5.6.0-zlocal.41820.nupkg`.\r\n\r\nI'm pretty certain VS is configured to correctly process symbols, as I can step through .NET Core's own source code for methods invoked from the project mentioned above, after VS downloads automatically the required sources.\r\n\r\nIs there any way to step into the NuGet source code in the context above ? Or is it something I've got wrong in the whole setup ?"},{"Id":"12455117046","Type":"IssuesEvent","CreatedAt":"2020-05-27T16:13:25","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9593","RelatedDescription":"Closed issue \"Log IntervalTrackers as ETW events\" (#9593) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-05-28T05:30:39.4792536Z","RunDurationInMilliseconds":1652}