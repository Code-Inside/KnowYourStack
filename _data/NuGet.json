{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12979362620","Type":"IssuesEvent","CreatedAt":"2020-07-22T01:51:05","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8087","RelatedDescription":"Closed issue \"Reflow all packages that have vulnerabilities\" (#8087) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12976781547","Type":"PullRequestEvent","CreatedAt":"2020-07-21T19:25:02","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8118","RelatedDescription":"Opened pull request \"Reject package with embeddedReadme file with featureFlag\" (#8118) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes:\r\n\r\n* add feature flag to enable embedded readme within package \r\n* separate validation before uploading packages\r\n\r\nadditional work need to be done in terms of separating validation in validation service\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12979114364","Type":"IssuesEvent","CreatedAt":"2020-07-22T01:03:10","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9825","RelatedDescription":"Opened issue \"Scope to this does not work for nuget package hierarchies\" (#9825) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1105459/scope-to-this-does-not-work-for-nuget-package-hier.html)._\n\n---\nIts really great to see nuget package hierarchies showing in Solution Explorer now. I'd also like to search within the tree of a nuget package though using a \"scope to this\". That currently only ends up showing that specific nuget package node though. Can we include the tree in there as well please? I find this useful to find a dependency package version for instance.\n\n---\n### Original Comments\n\n#### Feedback Bot on 7/8/2020, 02:28 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"12979054311","Type":"IssuesEvent","CreatedAt":"2020-07-22T00:50:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9824","RelatedDescription":"Opened issue \"Port static graph restore to NuGet.exe\" (#9824) at NuGet/Home","RelatedBody":"Along that, consider where moving nuget.exe to servergc is a good idea. "},{"Id":"12978671266","Type":"IssuesEvent","CreatedAt":"2020-07-21T23:35:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9673","RelatedDescription":"Closed issue \"configure.ps1 & build.ps1 error when using Powershell Core\" (#9673) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nUsing PowerShell Core, when I run configure.ps1 and build.ps1 in order to build NuGet.Client, an error occurs:\r\n\r\n```\r\nException calling \"CompareTo\" with \"1\" argument(s): \"Cannot process argument because the value of argument \"version\" is not valid. Change the value of the \"version\" argument and run the operation again.\"\r\nAt D:\\git\\NuGet.Client\\build\\common.ps1:21 char:5\r\n+ if ($PSVersionTable.PSVersion.CompareTo($Version) -lt 0) {\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : PSArgumentException\r\n```\r\n\r\nThe error doesn't prevent the rest of the script from executing.\r\nWhen using Windows Powershell, it works without error\r\n\r\nPowershell version: 6.2.3\r\n\r\nNuGet product used: NuGet.Client build scripts\r\n\r\nNuGet version: N/A (commit fc9dd52fcdf3c9a299a96de39b641b7c91779b5e)\r\n\r\ndotnet.exe --version: 5.0.100-preview.4.20258.7\r\n\r\nVS version: VS2019 (16.6.0)\r\n\r\nOS version: Windows 10 1903 (Build 18362.900)\r\n\r\nWorked before? No idea... probably not\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Clone the Nuget.Client repo\r\n\r\n2. Run configure.ps1. Note the error when the script starts\r\n\r\n3. Same with build.ps1\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nN/A\r\n\r\n### Sample Project\r\n\r\nN/A\r\n"},{"Id":"12976633589","Type":"IssuesEvent","CreatedAt":"2020-07-21T19:08:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9821","RelatedDescription":"Closed issue \"NuGet.CommandLine.XPlat should not have public APIs\" (#9821) at NuGet/Home","RelatedBody":"`NuGet.CommandLine.XPlat` is an executable, not a class library, that is the entry point to the `dotnet nuget` CLI, plus some other `dotnet` CLI commands such as `dotnet add package`, and `dotnet list package`.\r\n\r\nUnlike `NuGet.CommandLine`, which is also an exe, but is packed into a nupkg in the `tools\\` directory and therefore cannot be referenced by a project`, `NuGet.CommandLine.XPlat` is packed like a class library and can be referenced by projects. The reason the project is packed into a nupkg is because this is how we insert into the .NET SDK and `dotnet` CLI.\r\n\r\nHowever, maintaining API and ABI compatibility requires an unreasonable burden that is unreasonable for a project that is not intended to be a class library. Here is an example of this burden affecting productivity: https://github.com/NuGet/NuGet.Client/pull/3480#discussion_r454718106\r\n\r\nThis would be made worse when we start using the PublicApiAnalyzers: https://github.com/NuGet/NuGet.Client/pull/3512\r\n\r\nIdeally we should change how we insert into the .NET SDK, so that this package is no longer being uploaded to nuget.org, but that requires much more effort than changing the visibility of all classes in the project. Therefore, I propose we change all APIs to `internal` in `NuGet.CommandLine.XPlat`.\r\n\r\n**Any customers impacted should create new issues requesting that new, supported APIs are created for whatever scenarios they were previously using `NuGet.CommandLine.XPlat` for**"},{"Id":"12968409920","Type":"IssuesEvent","CreatedAt":"2020-07-21T05:42:38","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9778","RelatedDescription":"Closed issue \"Add RPS test for P95 generated solution (56 projects)\" (#9778) at NuGet/Home","RelatedBody":""},{"Id":"12968123235","Type":"IssuesEvent","CreatedAt":"2020-07-21T04:58:14","Actor":"drewgillies","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9823","RelatedDescription":"Closed issue \"Show transitive packages for PackageReference projects in PMUI\" (#9823) at NuGet/Home","RelatedBody":"Show transitive packages for PackageReference type projects in PMUI\r\n\r\nSpec: https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages"},{"Id":"12968105202","Type":"IssuesEvent","CreatedAt":"2020-07-21T04:55:17","Actor":"drewgillies","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9823","RelatedDescription":"Opened issue \"Show transitive packages for PackageReference projects in PMUI\" (#9823) at NuGet/Home","RelatedBody":"Show transitive packages for PackageReference type projects in PMUI\r\n\r\nSpec: https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages"},{"Id":"12967454685","Type":"IssuesEvent","CreatedAt":"2020-07-21T03:10:12","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9759","RelatedDescription":"Closed issue \"[Test Failure] None package is showed under â€˜Referenceâ€™ node in â€˜Solution Explorerâ€™ after installing package with â€˜PackageReferenceâ€™ format \" (#9759) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet Version:** Dev\\5.7.0.6689\r\n**VS Version:** Master\\30306.116\r\n**OS Version:** Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n1. Install VS: [https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3869190&view=ms.vss-build-web.run-extensions-tab](url)\r\n2. Install NuGet Client: [\\\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Dev\\5.7.0.6689\\artifacts\\VS15\\NuGet.Tools.vsix](url)\r\n\r\n## Repro steps: \r\n\r\n1. Create a C# Console App (.Net Framework) project.\r\n2. â€˜Toolsâ€™->â€™NuGet Package Managerâ€™->â€™ Package Manager Settingsâ€™->check in â€˜Allow format section on first package install â€™.\r\n3. Open â€˜Manager NuGet Packagesâ€¦â€™.\r\n4. Install package â€˜Newtonsoft.jsonâ€™ with **â€˜PackageReference**â€™ format.\r\n\r\n## Expected:\r\nThe Package should be showed under â€˜Referenceâ€™ node in â€˜Solution Explorerâ€™.\r\n\r\n## Actual:\r\nNone package is showed under â€˜Referenceâ€™ node in â€˜Solution Explorerâ€™ as below screenshot.\r\n![bug0707](https://user-images.githubusercontent.com/20632775/86763199-bd6f8680-c079-11ea-99f6-7097b901a1ca.png)\r\n\r\n## Notes: \r\n1. The issue repro on VS Master\\30306.116 with implicit NuGet Client Dev\\5.7.0.6677.\r\n2. The issue didnâ€™t repro on UWP project and .NET Core project.\r\n\r\n\r\n"},{"Id":"12967022134","Type":"IssuesEvent","CreatedAt":"2020-07-21T02:05:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9822","RelatedDescription":"Opened issue \"Reduce resource contain at solution load time cause by blocking a threadpool thread with BlockingCollection.Take\" (#9822) at NuGet/Home","RelatedBody":"At solution load time, we listen for nominations and we try to batch as many of them into one restore operation. \r\n\r\nWe either wait for all projects to get nominated or for 20s.\r\n\r\nTrick is we are waiting by blocking a threadpool thread: https://github.com/NuGet/NuGet.Client/blob/4a02c08cb2cfb87c77f0d378e361052944b8f3aa/src/NuGet.Clients/NuGet.SolutionRestoreManager/SolutionRestoreWorker.cs#L491. \r\n"},{"Id":"12966979739","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:58:50","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9812","RelatedDescription":"Closed issue \"FileAndForget posts a new event for every point of usage\" (#9812) at NuGet/Home","RelatedBody":"## Details about Problem\n\nFor fire-and-forget asynchronous code, we are currently using VSTelemetryHelpers.FireAndForget helper to log any failures from detached async code. This method is implements so that there is a specific event for every point of failure.\n\nFor GDPR categorization and ease of investigating those failures, it may be useful to always post same event, and carry additional context information in description and exception stack trace."},{"Id":"12966915668","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:48:52","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9600","RelatedDescription":"Closed issue \"dotnet list should support --verbosity\" (#9600) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\ndotnet.exe --version: 3.1.202\r\nOS version: Windows 10, version 1909\r\nWorked before? no\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new project, e.g. `dotnet new console`\r\n1. Add a package, e.g. `dotnet add package NuGet.Packaging`\r\n1. List deprecated packages, e.g. `dotnet list package --deprecated`\r\n\r\nNo HTTP `GET` and `OK` log lines are visible, unlike `dotnet restore --verbosity normal`, `dotnet nuget push`, and `dotnet nuget delete`. Especially when listing many packages or using `--include-transitive` it can lead to the command hanging for a long time without any visible output.\r\n\r\nIt would be helpful to have a verbosity switch like `dotnet restore` such as `--verbosity normal` to show the HTTP spew. This would allow understanding why the operation is slow and if one particular source is behaving badly.\r\n\r\nYou can do this investigation with restore via `dotnet restore --verbosity normal`.\r\n\r\nI think it's right that the log lines are not shown by default (there are a lot sometimes) but there should be a way to see them without launching Fiddler or some other MITM proxy.\r\n\r\nI think it's hardcoded to not allow this here:\r\nhttps://github.com/NuGet/NuGet.Client/blob/eb9ad919724e5ef435d6321b775868c9f2c0f9a2/src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/PackageReferenceCommands/ListPackage/ListPackageCommandRunner.cs#L649\r\n\r\n### Verbose Logs\r\n\r\n> Please include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nWell, that's the problem... ðŸ˜‚\r\n\r\n```\r\nPS C:\\Users\\joelv\\Desktop\\testproj> dotnet list package --deprecated --verbosity diag\r\nUnrecognized command or argument '--verbosity'\r\nUnrecognized command or argument 'diag'\r\nUsage: dotnet list <PROJECT | SOLUTION> package [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>   The project or solution file to operate on. If a file is not specified, the command will search the current directory for one.\r\n\r\nOptions:\r\n  -h, --help                                Show command line help.\r\n  --outdated                                Lists packages that have newer versions.\r\n  --deprecated                              Lists packages that have been deprecated.\r\n  --framework <FRAMEWORK | FRAMEWORK\\RID>   Chooses a framework to show its packages. Use the option multiple times for multiple frameworks.\r\n  --include-transitive                      Lists transitive and top-level packages.\r\n  --include-prerelease                      Consider packages with prerelease versions when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --highest-patch                           Consider only the packages with a matching major and minor version numbers when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --highest-minor                           Consider only the packages with a matching major version number when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --config <CONFIG_FILE>                    The path to the NuGet config file to use. Requires the '--outdated' or '--deprecated' option.\r\n  --source <SOURCE>                         The NuGet sources to use when searching for newer packages. Requires the '--outdated' or '--deprecated' option.\r\n  --interactive                             Allows the command to stop and wait for user input or action (for example to complete authentication).\r\n```\r\n\r\n### Sample Project\r\n\r\n[testproj.zip](https://github.com/NuGet/Home/files/4672506/testproj.zip)\r\n"},{"Id":"12966827153","Type":"IssuesEvent","CreatedAt":"2020-07-21T01:36:35","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9821","RelatedDescription":"Opened issue \"NuGet.CommandLine.XPlat should not have public APIs\" (#9821) at NuGet/Home","RelatedBody":"`NuGet.CommandLine.XPlat` is an executable, not a class library, that is the entry point to the `dotnet nuget` CLI, plus some other `dotnet` CLI commands such as `dotnet add package`, and `dotnet list package`.\r\n\r\nUnlike `NuGet.CommandLine`, which is also an exe, but is packed into a nupkg in the `tools\\` directory and therefore cannot be referenced by a project`, `NuGet.CommandLine.XPlat` is packed like a class library and can be referenced by projects. The reason the project is packed into a nupkg is because this is how we insert into the .NET SDK and `dotnet` CLI.\r\n\r\nHowever, maintaining API and ABI compatibility requires an unreasonable burden that is unreasonable for a project that is not intended to be a class library. Here is an example of this burden affecting productivity: https://github.com/NuGet/NuGet.Client/pull/3480#discussion_r454718106\r\n\r\nThis would be made worse when we start using the PublicApiAnalyzers: https://github.com/NuGet/NuGet.Client/pull/3512\r\n\r\nIdeally we should change how we insert into the .NET SDK, so that this package is no longer being uploaded to nuget.org, but that requires much more effort than changing the visibility of all classes in the project. Therefore, I propose we change all APIs to `internal` in `NuGet.CommandLine.XPlat`."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-22T05:30:43.8629507Z","RunDurationInMilliseconds":2132}