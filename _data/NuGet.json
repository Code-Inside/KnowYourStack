{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12791712386","Type":"PullRequestEvent","CreatedAt":"2020-07-01T23:29:17","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8079","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.06.30]RI of dev into master\" (#8079) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12791348754","Type":"IssuesEvent","CreatedAt":"2020-07-01T22:32:21","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8081","RelatedDescription":"Opened issue \"[Advanced search] Update engineering documentation\" (#8081) at NuGet/NuGetGallery","RelatedBody":"We need to update this documentation: https://github.com/NuGet/NuGet.Services.Metadata/blob/master/src/NuGet.Services.SearchService/README.md\r\n\r\nWe should update V2 API reference to include the new `sortBy` values and `packageType` filter."},{"Id":"12788579433","Type":"PullRequestEvent","CreatedAt":"2020-07-01T17:05:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8080","RelatedDescription":"Merged pull request \"Remove non-existent endpoints from robots.txt\" (#8080) at NuGet/NuGetGallery","RelatedBody":"The `/packages/*/*/Contents` route does not exist\r\nThanks for the heads up @xavierdecoster"},{"Id":"12788096149","Type":"PullRequestEvent","CreatedAt":"2020-07-01T16:14:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8080","RelatedDescription":"Opened pull request \"Remove non-existent endpoints from robots.txt\" (#8080) at NuGet/NuGetGallery","RelatedBody":"The `/packages/*/*/Contents` route does not exist\r\nThanks for the heads up @xavierdecoster"},{"Id":"12779525652","Type":"PullRequestEvent","CreatedAt":"2020-06-30T22:07:16","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8079","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.06.30]RI of dev into master\" (#8079) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12779487289","Type":"PullRequestEvent","CreatedAt":"2020-06-30T22:02:02","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8077","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.06.30]FI of master into dev - Gallery\" (#8077) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12779399636","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:50:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8078","RelatedDescription":"Opened issue \"[Dependents] Investigate query performance issue\" (#8078) at NuGet/NuGetGallery","RelatedBody":"We shipped the package dependents feature to PROD but noticed high query times. After some conversations with the SQL Server team this is related to the query plan that is being selected via parameter sniffing.\r\n\r\nWe got into a situation in PROD where there are at least two wildly different query plans that appropriate for their different parameter values. For example, the query plan of sniffed from Newtonsoft.Json looks totally different from BaseTestPackage and the performance when the query plans get mixed up is unacceptable.\r\n\r\nFor example, using a BaseTestPackage parameter value for the Newtonsoft.Json query plan results in a query that takes longer than 30 seconds.\r\n\r\nSome options:\r\n\r\n1. Use `OPTION ( OPTIMIZE FOR UNKNOWN )` - this will cause very depended upon packages like Newtonsoft.Json to take 1-3 seconds per query. Maybe this okay with caching.\r\n1. Use `OPTION ( RECOMPILE )` and allow every parameter value and query execution to evaluate its own query plan.\r\n1. Investigate other options with the SQL Server team (perhaps there are new options coming out or we are missing something)\r\n\r\nMy vote is to try option 2 in PROD and verify DB and App Service resource utilization is nominal."},{"Id":"12777774111","Type":"IssuesEvent","CreatedAt":"2020-06-30T18:40:42","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8069","RelatedDescription":"Closed issue \"Published package with wrong name.\" (#8069) at NuGet/NuGetGallery","RelatedBody":"I have published the package TheToolBox.Data.Contracts v1.0.0 with the wrong name.\r\nIt should be TheToolbox.Data.Contracts (with lower case \"b\").\r\n\r\nI contacted the support to remove the package but nothing happened.\r\nI've tried to upload a new version (1.0.1) with the new name (after unlisting the old one) but it is still shown the old name.\r\n\r\nPlease help!!!!!"},{"Id":"12777719640","Type":"PullRequestEvent","CreatedAt":"2020-06-30T18:34:35","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8077","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.06.30]FI of master into dev - Gallery\" (#8077) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12769872385","Type":"IssuesEvent","CreatedAt":"2020-06-30T05:05:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8076","RelatedDescription":"Opened issue \"Auxiliary2AzureSearch can fail if downloads.v1.json is being written\" (#8076) at NuGet/NuGetGallery","RelatedBody":"This is because it used `OpenReadAsync` to get a stream, which, in WindowsAzure.Storage, does sequential range requests with `If-Match`."},{"Id":"12767640391","Type":"IssuesEvent","CreatedAt":"2020-06-29T22:03:17","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7875","RelatedDescription":"Closed issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org - Stage 2\" (#7875) at NuGet/NuGetGallery","RelatedBody":"As announced in the blog post [here](https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/), it's time to permanently remove support for TLS 1.0, 1.1.\r\nExact date in April is TBD and will be announced several weeks in advance."},{"Id":"12766471971","Type":"IssuesEvent","CreatedAt":"2020-06-29T19:38:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8038","RelatedDescription":"Closed issue \"[Dependents] Add configurable cache time\" (#8038) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12765837303","Type":"IssuesEvent","CreatedAt":"2020-06-29T18:25:59","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8075","RelatedDescription":"Opened issue \"Add 'Include verified packages' filter to Advanced Search\" (#8075) at NuGet/NuGetGallery","RelatedBody":"We received customer feedback about adding an option to only return verified packages from reserved namespaces in the advanced search panel.\n\ne.g, if a search for \"WebAPI\" is done, with that option enabled, only packages from Microsoft would be shown and not from other package authors.\n\nThis feature is related, yet not part of the #2636 Epic"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12793099527","Type":"IssuesEvent","CreatedAt":"2020-07-02T03:05:45","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9741","RelatedDescription":"Opened issue \"Invalid package in non-active TFM can cause packages subtree to be empty\" (#9741) at NuGet/Home","RelatedBody":"(Copied from https://github.com/dotnet/project-system/issues/6311)\r\n\r\n**Visual Studio Version**: Version 16.7.0 Preview 4.0 [30228.12.master]\r\n\r\nWorks in 16.6.2.\r\n\r\n- Have a multi-target project.\r\n- Add a reference conditionally to the non-active (i.e. non-first) TFM\r\n- Use an invalid version number for that reference\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFrameworks>net48;net5</TargetFrameworks>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net5' \">\r\n        <PackageReference Include=\"Newtonsoft.JSON\" Version=\"100.100.100\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nResult is that the \"Packages\" node shows a chevron to expand, yet no children are presented, which should never happen:\r\n\r\n![image](https://user-images.githubusercontent.com/350947/85969366-c5408280-ba0a-11ea-8e5e-f1466dbe45a3.png)\r\n\r\nWhen expanding the \"Packages\" node, this exception is raised:\r\n\r\n> Could not find project item with item type 'PackageReference' and include value 'Newtonsoft.JSON'.\r\n\r\n<details>\r\n<summary>Stack trace</summary>\r\n\r\n```\r\n>\tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(System.Exception innerException, string unformattedMessage, object[] args) Line 181\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(string message, object arg0, object arg1) Line 121\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectInstanceItemProperties.Item.get() Line 114\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectInstanceItemProperties.GetEvaluatedPropertyValueAsync(string propertyName) Line 153\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageProperty.GetEvaluatedValueAtEndAsync() Line 242\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageProperty.GetValueAsync() Line 200\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.GetValueAsStringAsync()\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.GetValueAsync()\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProperty.get_Value.AnonymousMethod__19_0() Line 108\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.ExecuteSynchronously.AnonymousMethod__0() Line 501\tC#\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob<object>(System.Func<System.Threading.Tasks.Task> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTask job)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod, bool synchronouslyBlocking, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously<object>(System.Func<System.Threading.Tasks.Task<object>> asyncAction) Line 133\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.ExecuteSynchronously<object>(System.Func<System.Threading.Tasks.Task<object>> asyncAction) Line 492\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProperty.Value.get() Line 106\tC#\r\n \tNuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.SolutionExplorer.PackageReferenceAttachedCollectionSourceProvider.TryGetIdentity(EnvDTE.Properties properties, out (string Name, string Version) identity)\tUnknown\r\n \tNuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.SolutionExplorer.AssetsFileTopLevelDependenciesCollectionSourceProvider<(string, string), NuGet.VisualStudio.SolutionExplorer.PackageReferenceItem>.TryCreateCollectionSource(Microsoft.VisualStudio.Shell.IVsHierarchyItem hierarchyItem, string flagsString, string target, Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.IRelationProvider relationProvider, out Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.AggregateRelationCollectionSource containsCollectionSource)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Managed.VS.dll!Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.DependenciesAttachedCollectionSourceProviderBase.Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.CreateCollectionSource(object item, string relationName) Line 50\tC#\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource.AnonymousMethod__0(System.Lazy<Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable> provider)\tUnknown\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereSelectListIterator<System.Lazy<Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable>, Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.MoveNext()\tUnknown\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereEnumerableIterator<Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.MoveNext()\tUnknown\r\n \tmscorlib.dll!System.Collections.Generic.List<Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.List(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Shell.IAttachedCollectionSource> collection)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AggregateAttachedCollectionSource.AggregateAttachedCollectionSource(object sourceItem, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Shell.IAttachedCollectionSource> sources)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource(object item, string relationshipName)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.GetOrCreateCollectionSource(object item, string relationshipName)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.ConvertItemToCollectionSource(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ConvertItemToCollectionSource(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.AdaptItem(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.CollectionAdapter<object, object>.Initialize(System.Collections.IEnumerable source)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.ItemCollectionAdapter(System.Collections.IEnumerable source, Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView treeView)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionConverter.Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.TransferValue(object newValue, bool isASubPropertyChange)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.Activate(object item)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.AttachToContext(System.Windows.Data.BindingExpression.AttachAttempt attempt)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.AttachOverride(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.OnAttach(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.RealizeChildNodesCore()\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ExpandInternal()\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.OnIsExpandedChanged(System.Windows.DependencyObject o, System.Windows.DependencyPropertyChangedEventArgs e)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex, System.Windows.DependencyProperty dp, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tPresentationFramework.dll!MS.Internal.Data.PropertyPathWorker.SetValue(object item, object value)\tUnknown\r\n \tPresentationFramework.dll!MS.Internal.Data.ClrBindingWorker.UpdateValue(object value)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateSource(object value)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.UpdateValue()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateOverride()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Update()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.ProcessDirty()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Dirty()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.SetValue(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp, object value)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs e)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.OnMouseDownThunk(object sender, System.Windows.Input.MouseButtonEventArgs e)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate genericHandler, object genericTarget)\tUnknown\r\n \tPresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target)\tUnknown\r\n \tPresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs)\tUnknown\r\n \tPresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source, System.Windows.RoutedEventArgs args, bool reRaised)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject sender, System.Windows.RoutedEventArgs args)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs args)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs args, bool trusted)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea()\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport inputReport)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.ReportInput(System.IntPtr hwnd, System.Windows.Input.InputMode mode, int timestamp, System.Windows.Input.RawMouseActions actions, int x, int y, int wheel)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.FilterMessage(System.IntPtr hwnd, MS.Internal.Interop.WindowMessage msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndSource.InputFilterMessage(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)\tUnknown\r\n```\r\n\r\n</details>\r\n\r\nThe exception is being thrown when `NuGet.VisualStudio.SolutionExplorer.PackageReferenceAttachedCollectionSourceProvider` attempts to inspect the `Version` property of the `IVsHierarchyItem`'s browse object.\r\n\r\nThis results in the item not being displayed in the tree.\r\n\r\nThe problem here is that the DTE view of the project only includes the active TFM. Nodes for non-primary TFMs currently may not be present in the project instance.\r\n\r\nWe can make handle the exception gracefully which will allow the child to appear, however it will still not function correctly. For example, the diagnostic child item will not be displayed.\r\n"},{"Id":"12791676308","Type":"IssuesEvent","CreatedAt":"2020-07-01T23:23:48","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9728","RelatedDescription":"Closed issue \"[Test Failure][Signing] â€˜Value cannot be nullâ€™ error occurs when installing signed package with certificate is not trusted\" (#9728) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet Version:** NuGet Client Dev\\5.7.0.6677\r\n**VS Version:** Master\\30226.129\r\n**OS Version:** Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n1.  Install VS Master\\30226.129 from: [https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3846424&view=ms.vss-build-web.run-extensions-tab](url)\r\n2.  Install NuGet Client: [\\\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Dev\\5.7.0.6677\\artifacts\\VS15\\NuGet.Tools.vsix](url)\r\n\r\n## Repro steps: \r\n\r\n1. Create a .NET Framework package for testing.\r\n2. Create a new test certificate:  .\\CreateTestCertificate.ps1.\r\n3. Sign a package:  NuGet.exe sign <<PackageFilePath>PackageFilePath> -CertificatePath <<PackageFilePath>PfxFilePath>.\r\n4. Open Package Manager UI, install the package with **package.config format** into a project.\r\n\r\n## Expected:\r\nThere was no error and the package can be installed into the project.\r\n\r\n## Actual:\r\nâ€˜Value cannot be nullâ€™ error occurs when installing package as below screenshot.\r\n![bug0629](https://user-images.githubusercontent.com/20632775/85994208-114eef80-ba2a-11ea-9631-bcc78ad0a014.png)\r\n\r\n## Notes: \r\n1. The issue didnâ€™t repro on .Net Core project.\r\n2. The issue didnâ€™t repro on Master\\30223.54 + NuGet Client Dev\\5.7.0.6670.\r\n3. The issue didnâ€™t repro on Master\\30226.129 with implicit NuGet Client Dev\\5.7.0.6665.\r\n4. The issue also repro when using other certificate **except for** .\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority.\r\n\r\n"},{"Id":"12790194856","Type":"IssuesEvent","CreatedAt":"2020-07-01T19:58:09","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9740","RelatedDescription":"Opened issue \"[CPVM] Find a solution with better performance to reject the central transitive dependencies that have rejected parents. \" (#9740) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\nRelated with the issue [Rejected transitive central dependencies should be removed from the restore graph](https://github.com/NuGet/Home/issues/9483) \r\n\r\nThe [current solution](https://github.com/NuGet/NuGet.Client/pull/3374) does multiple loops through the the list of the central dependencies and their parents to detect any rejected parents. \r\n\r\nEvaluate if a different solution with better performance exists. \r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-02T05:30:42.6331736Z","RunDurationInMilliseconds":2084}