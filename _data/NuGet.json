{"Data":{"Blog":{"FeedItems":[{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Summary\nOver the past few years, we have continually invested in strengthening the supply-chain security for .NET packages. To strengthen the ecosystem further, NuGet.org will begin requiring...","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"20926844988","Type":"IssuesEvent","CreatedAt":"2022-03-25T00:33:02","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9075","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \" (#9075) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe error message returned when a package ID is blocked due to an ID prefix reservation is this:\r\n\r\n> Response status code does not indicate success: 409 (The package ID is reserved. You can upload your package with a different package ID. Reach out to support@nuget.org if you have questions.).\r\n\r\nThis should actually mentioned account@nuget.org or link to https://docs.microsoft.com/en-us/nuget/nuget-org/id-prefix-reservation#id-prefix-reservation-application-process.\r\n\r\nThis will help users skip a step.\r\n\r\nSource: https://github.com/NuGet/Home/issues/11594#issuecomment-1076979252\n\n### Repro Steps\n\nPush a package to a namespace you do not own, that has no owners.\n\n### Expected Behavior\n\nThe error message should be more direct to the action that will unblock the user.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"20926835370","Type":"PullRequestEvent","CreatedAt":"2022-03-25T00:31:57","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9069","RelatedDescription":"Merged pull request \"[A11y] Added tabindex=\"-1\" to ReCAPTCHA iframes\" (#9069) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/9052\r\n\r\n**Problem:**\r\n \r\nOn the Forgot Password page, when tab navigating from the 'Email' input field onwards, you expect the focus to move to the 'Send' button, but the focus shifts to the Privacy and Terms links in the ReCAPTCHA element in the bottom-right of the page, before resuming the regular tab stop order from the 'Send' button onwards.\r\n\r\n**Currently:**\r\n![Recaptcha receives focus](https://user-images.githubusercontent.com/82980589/159816300-1c5d5a40-e274-474e-8809-a7a9e76131e6.gif)\r\n\r\nThe parent div that we were loading the ReCAPTCHA element into had a data-tabindex=\"-1\" attribute, but the iframes within this were still receiving tab focus.\r\n\r\n**Fix:**\r\n\r\nTo fix this, I added the tabindex=\"-1\" attribute to all the ReCAPTCHA iframes after they have been loaded into the page, so that they do not receive tab focus.\r\n\r\n![image](https://user-images.githubusercontent.com/82980589/159816635-75a9fe52-8890-40b1-ad51-de691fc13171.png)\r\n\r\n**After the changes:**\r\n![Recaptcha doesn't receive focus](https://user-images.githubusercontent.com/82980589/159816681-c68813e1-e5be-4d59-a39b-a7eea4d800e5.gif)\r\n\r\n**_NOTE:_** These changes mean that the Privacy and Terms links within the ReCAPTCHA widget do not receive focus at all. Do I need to enable them to receive focus after everything else in the footer, or should they not be receiving focus at all?"},{"Id":"20925842163","Type":"PullRequestEvent","CreatedAt":"2022-03-24T22:47:03","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9073","RelatedDescription":"Merged pull request \"[A11y] Added column header roles to tables, made each cell accessible with keyboard navigation\" (#9073) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9048\r\n\r\n**Problem:**\r\n\r\nReopened a previous a11y bug that I hadn't fixed all the way through.\r\n\r\nIn the Package Details page's 'Used By' tab, screen readers weren't reading the table header names when using tab navigation. To fix this, I had added tabindex to the table headers so that screen readers would access them and read out the contents ('Package', Downloads', etc.), but I needed to make those cells identifiable as column headers, so that each data cell below it would also be identified with that column header. I have made that fix here.\r\n\r\n**Fix:**\r\n\r\nTo fix this, I added scope and role attributes to identify these header cells as column headers and allow accessibility aids to pick up on that detail.\r\n\r\nI also added tabindex to table data cells that were missing it to make each cell accessible with keyboard navigation.\r\n\r\n**_NOTE:_** Now, cells with links in them, such as the Package or Repository cells in the 'Used By' tab's tables, receive focus first to the cell itself (allowing it to read the descriptive text surrounding the link), and then to the link, as opposed to just the link.\r\n\r\n![image](https://user-images.githubusercontent.com/82980589/160014537-e0867d6c-ceef-4ad4-8c39-e3cdebbf4ceb.png)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"20922776402","Type":"IssuesEvent","CreatedAt":"2022-03-24T19:05:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11688","RelatedDescription":"Closed issue \"How can I programmatically obtain the dependency structure in \"packages. config\" mode?\" (#11688) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/11687\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Smartisa** March 23, 2022</sup>\r\nBecause the \"packages. config\" file contains all dependencies (direct and indirect), I  want to know the whole dependency structure in this mode. Is there a way that I can get it through programming?</div>"},{"Id":"20922574877","Type":"IssuesEvent","CreatedAt":"2022-03-24T18:52:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11657","RelatedDescription":"Closed issue \"Are there any programmable interfaces that can get all top-level dependencies when migrating packages.config to packagereference?\" (#11657) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/11656\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Smartisa** March  8, 2022</sup>\r\nFor example:\r\n![image](https://user-images.githubusercontent.com/47079990/157184221-a5723f26-e0f1-406f-863e-3ba17f6261ca.png)\r\nHow can I automatically obtain top-level dependencies?</div>"},{"Id":"20922479958","Type":"IssuesEvent","CreatedAt":"2022-03-24T18:47:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11636","RelatedDescription":"Closed issue \"[Bug]: Visual Studio Nuget Package Manager UI does not open if other extension is enabled\" (#11636) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio: 2022 Enterprise / Possibly Professional/Communiy - multiple versions\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI am a contributor to a Visual Studio extension [Fine Code Coverage](https://github.com/FortuneN/FineCodeCoverage) that is built for Visual Studio 2019 and Visual Studio 2022.\r\n\r\nUsers of the 2022 extension are [reporting](https://github.com/FortuneN/FineCodeCoverage/issues/213) the following behaviour.\r\n\r\nFCC ( Fine Code Coverage ) and (NPMUI) Nuget Package Management UI working together no problem.\r\nFor no known reason this changes\r\nWith FCC enabled NPMUI no longer works.\r\nDisable FCC and NPMUI works.\r\n\r\nThe logs provided by the 3 users of FCC that have reported the issue are consistent in the error.\r\n\r\n> Here are the log entries from ActivityLog that are written when I try to open the NuGet Package Manager:\r\n\r\n```\r\n  <entry>\r\n    <record>790</record>\r\n    <time>2021/11/22 08:40:51.160</time>\r\n    <type>Error</type>\r\n    <source>NuGetPackage.ShowManageLibraryPackageForSolutionDialog</source>\r\n    <description>XamlParseException - Provide value on &apos;System.Windows.Markup.StaticExtension&apos; threw an exception.</description>\r\n  </entry>\r\n  <entry>\r\n    <record>791</record>\r\n    <time>2021/11/22 08:41:20.206</time>\r\n    <type>Error</type>\r\n    <source>NuGetPackage.ShowManageLibraryPackageForSolutionDialog</source>\r\n    <description>Exception - The component &apos;NuGet.PackageManagement.UI.PackageManagerControl&apos; does not have a resource identified by the URI &apos;/NuGet.PackageManagement.UI;component/xamls/packagemanagercontrol.xaml&apos;.</description>\r\n  </entry>\r\n```\r\n\r\n> I see this error when running VS in log mode, not sure if that means anything.\r\n```\r\n2149 2022/03/01 21:39:52.229 Error NuGetPackage.ShowManageLibraryPackageDialog Exception - The component 'NuGet.PackageManagement.UI.PackageManagerControl' does not have a resource identified by the URI '/NuGet.PackageManagement.UI;component/xamls/packagemanagercontrol.xaml'.\r\n```\r\n\r\nComparing the two VS activity logs generated in each case, I can see the following in the log with FCC enabled that doesn't appear in with it disabled:\r\n```\r\n<entry> <record>2052</record> <time>2022/03/01 22:38:01.536</time> <type>Error</type> <source>NuGetPackage.ShowManageLibraryPackageDialog</source> <description>XamlParseException - Provide value on &apos;System.Windows.Markup.StaticExtension&apos; threw an exception.</description> </entry>\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"20920652634","Type":"IssuesEvent","CreatedAt":"2022-03-24T17:04:27","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/11672","RelatedDescription":"Reopened issue \"Re-enable F# tests\" (#11672) at NuGet/Home","RelatedBody":"Re-enable F# tests skipped due to https://github.com/dotnet/fsharp/issues/12835"},{"Id":"20920219620","Type":"IssuesEvent","CreatedAt":"2022-03-24T16:42:19","Actor":"BenVillalobos","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11692","RelatedDescription":"Opened issue \"Transitive reference to System.Configuration.ConfigurationManager doesn't work in net6.0 project\" (#11692) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#7486**\r\n- Please respond to @madelson.\r\n\r\n---\r\n\r\n_From @madelson on Wednesday, March 23, 2022 9:42:46 PM_\r\n\r\n**Version Used**:  VS 17.0.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In VS, create a new net6.0 class library project. Set the csproj to the following:\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Runtime.Caching\" Version=\"4.7.0\" />\r\n    <!--<PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />-->\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nUpon compiling, observe the `System.Runtime.Configuration.ConfigurationManager` is pulled in transitively in packages.lock.json:\r\n\r\n```\r\n      \"System.Configuration.ConfigurationManager\": {\r\n        \"type\": \"Transitive\",\r\n        \"resolved\": \"4.7.0\",\r\n        \"contentHash\": \"/anOTeSZCNNI2zDilogWrZ8pNqCmYbzGNexUnNhjW8k0sHqEZ2nHJBp147jBV3hGYswu5lINpNg1vxR7bnqvVA==\",\r\n        \"dependencies\": {\r\n          \"System.Security.Cryptography.ProtectedData\": \"4.7.0\",\r\n          \"System.Security.Permissions\": \"4.7.0\"\r\n        }\r\n      },\r\n```\r\n\r\n2.  Add a reference to `ConfigurationManager` in the C# source (Class1.cs):\r\n\r\n```C#\r\nnamespace ClassLibrary1\r\n{\r\n\tpublic class Class1\r\n\t{\r\n\t\tpublic Type Method()\r\n\t\t{\r\n\t\t\treturn typeof(System.Configuration.ConfigurationManager);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n3. Compile.\r\n \r\n**Expected Behavior**:\r\n\r\nCompiles without error\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nerror CS1069: The type name 'ConfigurationManager' could not be found in the namespace 'System.Configuration'. This type has been forwarded to assembly 'System.Configuration.ConfigurationManager, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' Consider adding a reference to that assembly.\r\n```\r\n\r\nNote that this can be fixed by uncommenting the direct reference to the configuration manager package. But why should this be necessary?\r\n"},{"Id":"20914401983","Type":"IssuesEvent","CreatedAt":"2022-03-24T12:11:20","Actor":"snebjorn","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11691","RelatedDescription":"Opened issue \"[Bug]: `<GeneratePackageOnBuild>true` causes `dotnet pack` to fail when bin folder is missing\" (#11691) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK (reflecting any global.json):  Version:   6.0.200  Commit:    4c30de7899  Runtime Environment:  OS Name:     Windows  OS Version:  10.0.19041  OS Platform: Windows  RID:         win10-x64  Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.200\\  Host (useful for support):   Version: 6.0.2   Commit:  839cdfb0ec  .NET SDKs installed:   2.2.401 [C:\\Program Files\\dotnet\\sdk]   3.1.404 [C:\\Program Files\\dotnet\\sdk]   5.0.101 [C:\\Program Files\\dotnet\\sdk]   6.0.200 [C:\\Program Files\\dotnet\\sdk]  .NET runtimes installed:   Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]   Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 3.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 5.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 3.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 5.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.WindowsDesktop.App 3.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 5.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n- Given this dotnet project (no other files are needed)\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n- Delete the `bin` folder if it exists.\r\n- Run `dotnet pack`\r\n- Observe this error:\r\n> C:\\Program Files\\dotnet\\sdk\\6.0.200\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5026: The file 'project_folder\\bin\\Debug\\net6.0\\Test.dll' to be packed was not found on disk. [project_folder\\Test.csproj]\n\n### Verbose Logs\n\n```shell\nhttps://gist.github.com/snebjorn/232c6890e809ad632b5ac295330f9239\n```\n"},{"Id":"20911045067","Type":"IssuesEvent","CreatedAt":"2022-03-24T09:20:57","Actor":"AraHaan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11690","RelatedDescription":"Opened issue \"[Feature]: Allow PackRef package deps to be excluded if developer wants it Removed from their programs dep chain.\" (#11690) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nCurrently when you reference a package you must obtain all dependencies of it, even when you do not want them referenced because that dependency happens to be in the ``Microsoft.NETCore.App`` standard ``FrameworkReference``.\r\n\r\nAs such it results in them wanting to File Pull request to the individual packages where then they are reluctant (sometimes) to accept it because \"it does not break anything\" despite some people wanting those transitive dependencies to not be included as they are already a part of an default FrameworkReference (And I mean by packages targeting .NET 6+).\r\n\r\nAs such I think it should be possible where if they do ``<PackageReference Remove=\"< package they do not want included from dependencies of the package chains of the ones already included\" />`` and leave it at that if they do not want to remove it, without giving the developer a way to not copy those specific files to the output without them being required to do it the much more harder way.\n\n### Additional Context and Details\n\nLet's say for example, you install ``Microsoft.EntityFrameworkCore.SqlServer``, M.EFCore.SqlServer has package Microsoft.Data.SqlClient, which depends on Azure.Identity, which has packages included in the default ``FrameworkReference`` you want to exclude from that dependency chain for the newer versions in the default ``FrameworkReference``. Currently the only way is to open an Pull Request (which might be rejected or they might have arguments against it for some reason) which makes it an impossible task for a developer creating an FDD app to not get needless assemblies copied to their outputs as the framework that ships them in a framework bundle already has the latest versions (provided they have the latest one installed). As such an escape hatch like this *should* be possible as it would be far more same and easier (not to mention shorter).\r\n\r\nWhile Microsoft openly accepts contributions to remove stuff like this in the newer frameworks, other people who are not a part of Microsoft or the .NET Foundation might not."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"20398585964","Type":"IssuesEvent","CreatedAt":"2022-02-22T18:32:01","Actor":"clairernovotny","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/61","RelatedDescription":"Opened issue \"Requiring two-factor authentication on NuGet.org\" (#61) at NuGet/Announcements","RelatedBody":"We announced plans to require tFA on all accounts on NuGet.org. Details in the [blog post](https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/)."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":21,"RawContent":null},{"Id":"1493700008000073731","CreatedAt":"2022-02-15T21:33:28+00:00","UserScreenname":"nuget","Text":"📦Introducing Compatible Packages 📦\n\n🖼 New Frameworks Tab\n😎 Target Framework Badges\n🧩 Computed Compatibility Table\n🛠… https://t.co/qDUkqayBjC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":171,"FavoriteCount":43,"RawContent":null},{"Id":"1488563020074737670","CreatedAt":"2022-02-01T17:20:54+00:00","UserScreenname":"nuget","Text":"NuGet is celebrating 20 years of @dotnet with over 290,000 unique packages and 160 billion downloads to date! Tune… https://t.co/kCkBuvp3OW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2022-03-25T03:30:24.7303554Z","RunDurationInMilliseconds":1512}