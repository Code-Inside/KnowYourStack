{"Data":{"Blog":{"FeedItems":[{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13944351481","Type":"PullRequestEvent","CreatedAt":"2020-10-23T01:48:43","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8275","RelatedDescription":"Merged pull request \"[Cookies] Expire the AB test cookie in a year\" (#8275) at NuGet/NuGetGallery","RelatedBody":"We should expire any cookie in 13 months, no matter whether it's in EU or not.\r\nWe upgrade the cookie to V3, in order to handle these already dropped cookies."},{"Id":"13943865507","Type":"PullRequestEvent","CreatedAt":"2020-10-23T00:18:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8291","RelatedDescription":"Merged pull request \"Display net5.0 using ToString instead of custom logic\" (#8291) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/8235\r\nAddress https://github.com/NuGet/NuGetGallery/issues/8268\r\n\r\nInstead of using the custom framework display logic that nuget.org currently has for framework names in dependency groups, use `NuGetFramework.ToString()`. This is the recommended approach from client team and aligns with the package management UI in Visual Studio. The VS UI is spec'd here which we are mimicking.\r\nhttps://github.com/dotnet/designs/blob/main/accepted/2020/net5/net5.md\r\n\r\n> - Package Manager UI in VS\r\n>    - [Use short form](https://github.com/dotnet/designs/blob/main/accepted/2020/net5/net5.md#tfms-in-the-ui)\r\n\r\n### Example without platform\r\n\r\n![image](https://user-images.githubusercontent.com/94054/96912935-e153ae00-1457-11eb-9b3a-30c05f1246ff.png)\r\n\r\n### Example with platform\r\n\r\n![image](https://user-images.githubusercontent.com/94054/96912993-ed3f7000-1457-11eb-9dfb-3f79504a043c.png)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13944013848","Type":"IssuesEvent","CreatedAt":"2020-10-23T00:45:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10169","RelatedDescription":"Closed issue \"Fix sfproj support\" (#10169) at NuGet/Home","RelatedBody":"Service Fabric projects (sfproj) use CPS, but do not advertise the `PackageReferences` capability.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/pull/3644 changed our `CPSPackageReferenceProject` detection, and accidentally opted all CPS projects into CPSPackageReferenceProject support."},{"Id":"13942391724","Type":"IssuesEvent","CreatedAt":"2020-10-22T20:57:12","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10141","RelatedDescription":"Closed issue \"VS OE:  cache IServiceBroker instance on client\" (#10141) at NuGet/Home","RelatedBody":"The VS OE work has established a pattern whereby obtaining an `IServiceBroker` instance occurs in every method scope where NuGet VS OE service calls are made ([example](https://github.com/NuGet/NuGet.Client/blob/d6dc0502b45cee9857187f26f3b05860e13256d4/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/ProjectContextInfo.cs#L63)).  In basic PM UI scenarios where these service methods are called many times, performance has regressed noticeably.  This is because the overhead of obtaining an `IServiceBroker` instance adds up quickly.\r\n\r\nFor example, a PerfView trace in a private search-enabled branch showed that merely displaying the available package versions in the Browse tab of PM UI took ~2.1 seconds longer.  That's wall clock time; more than 4 seconds was spent across 2 threads just fetching `IServiceBroker` instances.\r\n\r\nOn the client side it is safe to cache for the lifetime of the VS process the `IServiceBroker` instance obtained from VS.  Most of the classes that use `IServiceBroker` (e.g.:  `ProjectContextInfo`) are not set up to use an existing `IServiceBroker` instance provided to it.\r\n\r\nOn the service side, the only `IServiceBroker` instance that a service should use is the one that is passed to it via its constructor."},{"Id":"13942187409","Type":"IssuesEvent","CreatedAt":"2020-10-22T20:36:54","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10158","RelatedDescription":"Closed issue \"Pushing multiple packages in CI is causing a file lock, failing 2nd push\" (#10158) at NuGet/Home","RelatedBody":"## Details about Problem\r\nWhen using CI (GitHub Actions and `dotnet nuget push` with *.nupkg, the files are found and a first package is pushed, but then the second fails.\r\n\r\nExample: https://github.com/timheuer/strava-net/runs/1243834288#step:7:19\r\n\r\n```\r\nPushing strava-net.1.0.0.symbols.nupkg to '/home/runner/work/strava-net/strava-net/published/'...\r\nYour package was pushed.\r\nPushing strava-net.1.0.0.nupkg to '/home/runner/work/strava-net/strava-net/published/'...\r\nerror: The process cannot access the file '/home/runner/work/strava-net/strava-net/published/strava-net.1.0.0.nupkg' because it is being used by another process.\r\n```"},{"Id":"13942163112","Type":"IssuesEvent","CreatedAt":"2020-10-22T20:34:33","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/10157","RelatedDescription":"Reopened issue \"Cannot use relative URLs in dotnet push\" (#10157) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI’m trying to use `dotnet nuget push` with *.nupkg and 1) the docs are wrong (I submitted a bug) 2) the source parameter seems to require a fully-qualified source and cannot use relative roots?\r\n \r\nI’m doing this in CI and am trying to basically use “.” As the source directory but looks like the CLI treats this as too literally and doesn’t like that.\r\n\r\nFrom conversation it appears it could be \r\nhttps://github.com/NuGet/NuGet.Client/blob/65abcc61f73ab3d87928495f789ec74011edde7f/src/NuGet.Core/NuGet.Commands/Utility/PackageSourceProviderExtensions.cs#L47\r\nVersus using `RelativeOrAbsolute`\r\n\r\n"},{"Id":"13941864903","Type":"PullRequestEvent","CreatedAt":"2020-10-22T20:05:22","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/10179","RelatedDescription":"Opened pull request \"Add Transitive Dependencies Spec\" (#10179) at NuGet/Home","RelatedBody":""},{"Id":"13941178013","Type":"IssuesEvent","CreatedAt":"2020-10-22T19:00:49","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10164","RelatedDescription":"Closed issue \"NuGet from within VS fails to update a package if one or more package sources are unavailable\" (#10164) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.7.0\r\n\r\nVS version (if appropriate): VS 2019 Enterprise 16.7.6\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 version 2004\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nHave a package from NuGet.org installed in a `PackageReference`-style .NET Core 3.1 project.\r\nHave NuGet configured for multiple sources, including NuGet.org.\r\nHave one of those sources that is **not** NuGet.org be unavailable.\r\nAttempt to update a package.\r\n\r\n## Expected result\r\n\r\nThe package is updated.\r\n\r\n## Actual result\r\n\r\nNuGet sits for 30 seconds with all its UI elements disabled like it's actually doing something, then re-enables all its UI elements. But the package in question is not updated. You can repeat this as many times as you want and nothing changes (AKA definition of insanity).\r\n\r\nThe only clue that NuGet is failing at basic functionality is a line in the Output window for Package Manager: `The local source 'xxxxxxxxx' doesn't exist.` As such I'm guessing it's related to the stupidity that's #7189.\r\n\r\nOkay, why can't NuGet check and use the sources that **are** available? And maybe log a warning saying \"skipping source 'xxxxxxxxx' because it cannot be contacted\"? You know, sane behaviour that most sane people would expect?\r\n\r\nOr if such functionality is too advanced for the NuGet team to implement, perhaps show an error dialog with the message instead of just dumping it to a place where few would think to look. After all, if the program fails to do something, a sane human being would logically expect a reason for that failure to be prominently displayed!\r\n\r\nBut perhaps I should stop expecting sane behaviour from NuGet. After all, this repo is where bug reports about this product go to die. The only reason I'm writing this is to prevent anyone with the same issue from having to file a bug report with the expectation that said issue will actually be fixed."},{"Id":"13940949936","Type":"IssuesEvent","CreatedAt":"2020-10-22T18:39:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10160","RelatedDescription":"Closed issue \"Avoid cache with local sources\" (#10160) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nWe have nuget packages from 2 sources: nuget.org and local machine. I have noticed that the command \"nuget restore '*.sln' Nocache\" continues getting packages from my local source, is it a bug?Its like the parameter \"NoCache\" doesnt apply for local sources.\r\n\r\nI have to run before \"nuget locals all -clear\" to make it work.\r\n\r\nI am running Nuget 5.7.0.\r\n\r\nMany thanks.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-10-23T05:30:36.1248554Z","RunDurationInMilliseconds":1442}