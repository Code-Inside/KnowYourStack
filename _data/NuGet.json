{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40532764139","Type":"IssuesEvent","CreatedAt":"2024-07-29T00:45:42","Actor":"skirk-mpr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10085","RelatedDescription":"Opened issue \"[Feature]: Publish NuGet Public IP addresses/CIDRs for whitelisting\" (#10085) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI am using AWS CodeBuild to build a .NET 8 project which relies on some public NuGet packages. I'd like to lock down the Security Group on my CodeBuild project to ONLY allow outbound HTTPS/443 traffic to NuGet, since that is the only necessary internet bound communications that is needed. \r\n\r\nSecurity Groups require whitelisting by CIDR blocks so I am looking for a place where I can find the NuGet's public CIDR blocks for whitelisting.\n\n### The Elevator Pitch\n\nMake publicly available the CIDR blocks of that would be hit when restoring public packages from nuget, so clients can implement least-privledge on network infrastructure.\n\n### Additional Context and Details\n\nOriginally posted here: https://stackoverflow.com/questions/78804804/nuget-public-ip-addresses-for-whitelisting"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40532727572","Type":"IssuesEvent","CreatedAt":"2024-07-29T00:42:32","Actor":"skirk-mpr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13659","RelatedDescription":"Opened issue \"NUGET_CERT_REVOCATION_MODE not using HTTPS\" (#13659) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nIn an AWS CodeBuild environment where I only allow outbound HTTPS traffic (443) the `dotnet restore` command would take an extremely long amount of time (20+ minutes) -- but by setting `NUGET_CERT_REVOCATION_MODE` to `offline` it would be as fast as if HTTP/80 was allowed (~15 seconds).  It seems like the status check of the certificate used to sign a package is done over HTTP and not HTTPS.    This blog post suggests everything should be done over HTTPS related to nuget: https://devblogs.microsoft.com/nuget/https-everywhere/\n\n### Desired Behavior\n\nClient should be able to enforce that the status check of the certificates used to sign a packages is done only over HTTPS/443.\n\n### Additional Context\n\nI have an open StackOverflow Question here that I slowly came to the hypothesis that this is the underlying culprit.: https://stackoverflow.com/questions/78755772/nuget-enforce-https-only-traffic-from-aws-codebuild"},{"Id":"40509616774","Type":"IssuesEvent","CreatedAt":"2024-07-26T23:37:55","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13658","RelatedDescription":"Opened issue \"NuGetAudit should check PackageDownload\" (#13658) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nNuGet has a feature intended for MSBuild SDKs to request NuGet to download a package on their behalf, but don't do any asset selection, package compatibility checks, or anything else. Just plain old download to a known location. The .NET SDK uses this to download platform specific runtime hosts, such as [Microsoft.NETCore.App.Runtime.linux-x64](https://www.nuget.org/packages/Microsoft.NETCore.App.Runtime.linux-x64/).\r\n\r\nThese packages can have known security vulnerabilities. Therefore, Audit should warn customers about these.\n\n### Additional Context and Details\n\noriginal feature spec, which might give some context for why it was added: https://github.com/NuGet/Home/wiki/%5BSpec%5D-PackageDownload-support"},{"Id":"40508805325","Type":"IssuesEvent","CreatedAt":"2024-07-26T22:26:14","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13651","RelatedDescription":"Closed issue \"[Cross-platform Dotnet NuGet Sign] The error “invalid value for’--certificate-fingerprint’ option” displays instead of error NU3001 when signing with certificate search criteria yields no certificate matches\" (#13651) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, NuGet SDK\r\n\r\n### Product Version\r\n\r\n.NET SDK 8.0.400- rtm.24367.3 patching with NuGet Dev\\6.12.0.33\r\n\r\n### Worked before?\r\n\r\nIt is a regression since it didn't repro on 8.0.400-preview.0.24324.5 patched with Dev\\6.11.0.110.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1.\t[Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (--SDKChannel 8.0.4xx and Nupkgs is from [Pipelines - Run 6.12.0.33 artifacts (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9905933&view=artifacts&pathAsName=false&type=publishedArtifacts))\r\n2.\tUse the patched \"dotnet.exe\" to sign a package. Where <PackageFilePath> is the test package path, sign the test package: \r\n               On Windows:  `.\\dotnet.exe nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n               On Linux/macOS:` ./dotnet nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n3.\tVerify the output of the previous step.\r\n#### Expected Result:\r\nThe error below displays.\r\n`Error: NU3001: No certificates were found that meet all the given criteria. For a list of accepted ways to provide a certificate, visit https://docs.nuget.org/docs/reference/command-line-reference.\" `\r\n#### Actual Result:\r\nThe error “invalid value for’—certificate-fingerprint’ option” displays instead of error NU3001 as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/6930deaa-ee32-4937-8e7f-15f5e0500d04)\r\n#### Notes:\r\nIt reproes on Windows/Linux/MacOS."},{"Id":"40508575932","Type":"IssuesEvent","CreatedAt":"2024-07-26T22:10:54","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13650","RelatedDescription":"Closed issue \"[Cross-platform Dotnet NuGet Sign] Adding trust for a certificate leads to an error SYSLIB5007 for .NET SDK 9.0.1xx\" (#13650) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 9.0.100.preview.7.24374.16\r\n\r\n### Worked before?\r\n\r\nIt doesn’t repro on .NET SDK 8.0.4xx.\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro Steps:**    \r\n\r\n1. [Patched dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) with ‘-SDKChannel 9.0.1xx’.\r\n2. Add net9.0 into the <TargetFrameworks> into both ‘MakeTestCert.csproj’ and ‘TrustTestCert.csproj’ file. \r\n3.  Go to the patchedSDK folder and create a new test certificate:  \r\n  On Windows:  `.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net9.0 --password password `\r\n  On Linux/macOS: ` ./dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net9.0 --password password `\r\n\r\n  5. Where <CertificateFilePath> is the file path to the created certificate (in step1) .cer or .pem file and <VersionedSdkDirectoryPath> is the directory path for the patched versioned .NET SDK directory (e.g.:  ./patchedSDK/sdk/9.0.100.xxx), add try to trust for the certificate:\r\nOn Windows:  `.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath>`\r\n    On Linux/macOS: ` ./dotnet run --project ./Entropy/TrustTestCert/TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath> -vsd <VersionedSdkDirectoryPath>`\r\n\r\n**Expected:**      \r\n    The certificate should be trusted successfully. \r\n\r\n**Actual:**\r\nAn error SYSLIB5007 displays as below: \r\n![image](https://github.com/user-attachments/assets/949e635c-f475-4ebc-9754-7b617320c964)\r\n\r\n**Notes:**  \r\n  1. It also reproes on MacOS and Linux platforms. \r\n  2. It only reproes on .NET SDK 9.0.1xx, doesn’t repro on .NET SDK 8.0.4xx. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"40504110472","Type":"IssuesEvent","CreatedAt":"2024-07-26T18:19:41","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13517","RelatedDescription":"Closed issue \"'why' and 'config' command does not show up in 'dotnet nuget --help' output\" (#13517) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, NuGet SDK\r\n\r\n### Product Version\r\n\r\n.NET 9.0.100 Preview 6\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n1. Run 'dotnet nuget -h'\r\n2. See commands listed in help output: the 'why' command is missing\r\n\r\nWe are in the process of migrating our CLI commands from '_Microsoft.Extensions.CommandLineUtils.CommandLineApplication_' to '_System.Commandline.CliCommand_', and this has meant that we have a split in our command parsing here (migrated commands): https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.CommandLine.XPlat/Program.cs#L83-L85, and here (pre-migration commands): https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.CommandLine.XPlat/Program.cs#L257-L276.\r\n\r\nAll commands registered with the old code path (pre-migration) show up correctly in the help output, but migrated `_dotnet nuget *_' commands (_why_/_config_) are not being registered correctly. They still run correctly. They just do not show up in 'dotnet nuget --help' output.\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\n> dotnet nuget -h\r\n```\r\n\r\nSee also: https://github.com/dotnet/sdk/issues/42084\r\n"},{"Id":"40502837202","Type":"IssuesEvent","CreatedAt":"2024-07-26T17:23:32","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13478","RelatedDescription":"Closed issue \"Add docs for `disableTLSCertificateValidation` \" (#13478) at NuGet/Home","RelatedBody":"We are adding a `disableTLSCertificateValidation` property into `packageSources` section in NuGet.Config files that will allow users to disable TLS certificate validation for https certificates.\r\n\r\n```\r\n<packageSources>\r\n    <add key=\"Contoso\" value=\"https://source\" disableTLSCertificateValidation=\"true\" />\r\n</packageSources>\r\n```\r\nUpdate the docs describing this change."},{"Id":"40495188228","Type":"IssuesEvent","CreatedAt":"2024-07-26T12:55:01","Actor":"vernou","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13657","RelatedDescription":"Opened issue \"The audit don't show vulnerabilties with CPM before explicit restore\" (#13657) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1) Create in a empty folder the file the `Directory.Packages.props` to Package Management specify `Azure.Identity@1.10.3` :\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Azure.Identity\" Version=\"1.10.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2) Create a project with the package `Azure.Identity` without specify the version and audit it :\r\n```\r\ndotnet new console -n ConsoleApp1\r\ndotnet add ConsoleApp1 package Azure.Identity\r\ndotnet list ConsoleApp1 package --vulnerable\r\n```\r\n\r\nThe audit show no vulnerability :\r\n```\r\nThe given project `ConsoleApp1` has no vulnerable packages given the current sources.\r\n```\r\n\r\n3) Restore the project and reaudit it :\r\n```\r\ndotnet restore ConsoleApp1\r\ndotnet list ConsoleApp1 package --vulnerable\r\n```\r\n\r\nThe audit show the expected vulnerabilities :\r\n```\r\nProject `ConsoleApp1` has the following vulnerable packages\r\n   [net8.0]:\r\n   Top-level Package      Requested   Resolved   Severity   Advisory URL\r\n   > Azure.Identity       1.10.3      1.10.3     Moderate   https://github.com/advisories/GHSA-wvxc-855f-jvrv\r\n                                                 Moderate   https://github.com/advisories/GHSA-m5vv-6r4h-3vj9\r\n```\r\n\r\n---\r\n\r\nWithout CPM, the audit work without restore :\r\n```\r\ndotnet new console -n ConsoleApp1\r\ndotnet add ConsoleApp1 package Azure.Identity --version 1.10.3\r\ndotnet list ConsoleApp1 package --vulnerable\r\n```\r\n\r\nSo the audit show the expected vulnerabilities :\r\n```\r\nProject `ConsoleApp1` has the following vulnerable packages\r\n   [net8.0]:\r\n   Top-level Package      Requested   Resolved   Severity      Advisory URL\r\n   > Azure.Identity        1.10.3          1.10.3       Moderate   https://github.com/advisories/GHSA-wvxc-855f-jvrv\r\n                                                                        Moderate   https://github.com/advisories/GHSA-m5vv-6r4h-3vj9\r\n```\r\n\r\n---\r\n\r\nI expect the audit work without a explicit restore.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40486386225","Type":"IssuesEvent","CreatedAt":"2024-07-26T07:43:27","Actor":"premun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13656","RelatedDescription":"Opened issue \"Publishing to BAR/Maestro will no longer support tokens\" (#13656) at NuGet/Home","RelatedBody":"I noticed that you're still using `$(MaestroAccessToken)` when publishing internal builds in https://github.com/NuGet/NuGet.Client/blob/46f80a3f1a83f3c5f33a20fa9fb72871e1e2d4eb/build/publish.proj#L71.\r\n\r\nThis token is getting deprecated in favour of using a secretless auth via a service connection.\r\nYou will need to change how you do this or your internal builds will soon break.\r\nThe change is not complicated and goes as follows:\r\n\r\nIf your pipeline has something like this:\r\n```yaml\r\n- task: CmdLine@2\r\n  displayName: \"Publish to the .NET Core build asset registry (BAR)\"\r\n  inputs:\r\n    script: dotnet msbuild $(Build.Repository.LocalPath)\\build\\publish.proj /t:PublishToBuildAssetRegistry /property:NuGetClientNupkgsDirectoryPath=$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir) /property:BUILD_BUILDNUMBER=$(Build.BuildNumber) /property:BUILD_SOURCEBRANCH=$(Build.SourceBranchName) /property:BUILD_SOURCEVERSION=$(Build.SourceVersion) /property:BUILD_REPOSITORY_URI=$(Build.Repository.Uri) /property:BUILD_REPOSITORY_NAME=$(Build.Repository.Name) /property:ArtifactsLogDir=$(Build.Repository.LocalPath)\\artifacts\\manifests\\ /property:MaestroApiEndpoint=$(MaestroApiEndpoint) /property:MaestroAccessToken=$(MaestroAccessToken) /binarylogger:$(Build.StagingDirectory)\\binlog\\21.PublishToBuildAssetRegistry.binlog\r\n    workingDirectory: cli\r\n    failOnStderr: true\r\n  env:\r\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\r\n    DOTNET_MULTILEVEL_LOOKUP: true\r\n  condition: \"and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false'))\"\r\n```\r\n\r\nit will need to change to something like this:\r\n\r\n```yaml\r\n- task: AzureCLI@2\r\n  displayName: \"Publish to the .NET Core build asset registry (BAR)\"\r\n  inputs:\r\n    azureSubscription: \"Darc: Maestro Production\"\r\n    scriptType: ps\r\n    scriptLocation: inlineScript\r\n    inlineScript: |\r\n      dotnet msbuild $(Build.Repository.LocalPath)\\build\\publish.proj /t:PublishToBuildAssetRegistry /property:NuGetClientNupkgsDirectoryPath=$(Build.Repository.LocalPath)\\artifacts\\$(NupkgOutputDir) /property:BUILD_BUILDNUMBER=$(Build.BuildNumber) /property:BUILD_SOURCEBRANCH=$(Build.SourceBranchName) /property:BUILD_SOURCEVERSION=$(Build.SourceVersion) /property:BUILD_REPOSITORY_URI=$(Build.Repository.Uri) /property:BUILD_REPOSITORY_NAME=$(Build.Repository.Name) /property:ArtifactsLogDir=$(Build.Repository.LocalPath)\\artifacts\\manifests\\ /binarylogger:$(Build.StagingDirectory)\\binlog\\21.PublishToBuildAssetRegistry.binlog\r\n    workingDirectory: cli\r\n    failOnStderr: true\r\n  env:\r\n    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\r\n    DOTNET_MULTILEVEL_LOOKUP: true\r\n  condition: \"and(succeeded(),eq(variables['PublishArtifactsToDotNetBuildAssetRegistry'], 'true'), eq(variables['BuildRTM'], 'false'))\"\r\n```\r\n\r\nThe differences between the snippets above are:\r\n-\tAzureCLI@2 task is used\r\n-\tThe “Darc: Maestro Production” service connection is used.\r\nYour pipeline will need to be approved to use this connection (reach out to First Responders).\r\n-\tThe $(MaestroAccessToken) secret is removed\r\n"},{"Id":"40474618586","Type":"IssuesEvent","CreatedAt":"2024-07-25T20:24:05","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13655","RelatedDescription":"Opened issue \"[Tech Debt] Improve test for XPlatHelpOutputTests.cs\" (#13655) at NuGet/Home","RelatedBody":"More context in this PR: https://github.com/NuGet/NuGet.Client/pull/5931#discussion_r1690669461\r\n\r\nWe can improve XPlatHelpOutputTests.cs tests by a injecting TextWriter into the MainInternal method and have the Main method just pass Console.Out so that we don't have to update the global state of Console.\r\n"},{"Id":"40464625522","Type":"IssuesEvent","CreatedAt":"2024-07-25T14:38:10","Actor":"voroninp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13653","RelatedDescription":"Opened issue \"Coud yoy reference a bug in the docs, please?\" (#13653) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nThere's a known bug https://github.com/dotnet/sdk/issues/25294 which is already 2 years old.\r\nIt can save time people, if it is referenced in [this section](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#enabling-the-lock-file)\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-07-29T03:30:20.1834191Z","RunDurationInMilliseconds":957}