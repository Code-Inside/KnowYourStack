{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"39239596468","Type":"IssuesEvent","CreatedAt":"2024-06-12T17:11:14","Actor":"drobert-bfm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13541","RelatedDescription":"Opened issue \"\"An item with the same key has already been added.\" thrown with version 6.10 of nuget\" (#13541) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.10.0.107\n\n### Worked before?\n\n6.5.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nnuget restore <file>.sln -verbosity detailed\r\n\r\nGet error:\r\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nWorked fine with version 6.5. Same underlying version of MSBuild.\r\n\n\n### Verbose Logs\n\n```shell\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"39217710663","Type":"IssuesEvent","CreatedAt":"2024-06-12T06:05:44","Actor":"bstordrup","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13540","RelatedDescription":"Opened issue \"Missing resilience?\" (#13540) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nnuget 6.11.0.64\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSometimes, I get this error when running `nuget push`:\r\n\r\n```\r\nError getting pkg from body: unable to open nuspec file from nupkg archive: zip: not a valid zip file\r\n```\r\n\r\nThen I can issue the exact same `nuget push` command again, and it succeeds without the error, and the package is pushed.\r\n\r\nIt most often happen if the commands get executed too soon after each other - for example in a PowerShell script that pushes a series of nupkg's.\r\n\r\nI suspect that there is some kind of resilience issue involved.\n\n### Verbose Logs\n\n```shell\nOutput from two subsequent runs:\r\n\r\n\r\nPS C:\\LocalStorage\\Visma.Services.UserDirectory.Diagnostics> nuget push Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg -source https://nuget.pkg.github.com/MyGitOrganization/index.json -ApiKey ********************************\r\nPushing Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg to 'https://nuget.pkg.github.com/MyGitOrganization'...\r\n  PUT https://nuget.pkg.github.com/MyGitOrganization/\r\nWARNING: Error getting pkg from body: unable to open nuspec file from nupkg archive: zip: not a valid zip file\r\n  BadRequest https://nuget.pkg.github.com/MyGitOrganization/ 384ms\r\nResponse status code does not indicate success: 400 (Bad Request).\r\nPS C:\\LocalStorage\\Visma.Services.UserDirectory.Diagnostics> nuget push Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg -source https://nuget.pkg.github.com/MyGitOrganization/index.json -ApiKey ********************************\r\nPushing Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg to 'https://nuget.pkg.github.com/MyGitOrganization'...\r\n  PUT https://nuget.pkg.github.com/MyGitOrganization/\r\n  OK https://nuget.pkg.github.com/MyGitOrganization/ 726ms\r\nYour package was pushed.\r\n```\n```\n"},{"Id":"39214145978","Type":"IssuesEvent","CreatedAt":"2024-06-12T02:29:04","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13539","RelatedDescription":"Opened issue \"Update nuget.exe docs for new eula command\" (#13539) at NuGet/Home","RelatedBody":""},{"Id":"39209608868","Type":"IssuesEvent","CreatedAt":"2024-06-11T21:49:43","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13251","RelatedDescription":"Closed issue \"`dotnet` commands should not output usage information on all errors\" (#13251) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\n```console\r\n> dotnet nuget remove source ashjdfsbf\r\nerror: Unable to find any package source(s) matching name: ashjdfsbf.\r\n\r\n\r\nUsage: dotnet nuget remove source [arguments] [options]\r\n\r\nArguments:\r\n  name  Name of the source.\r\n\r\nOptions:\r\n  --configfile  The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.\r\n  -h|--help     Show help information\r\n```\r\n\r\nHowever, a scenario that is more likely to confuse customers is:\r\n\r\n```console\r\n> dotnet add package snjfbdujfbdf\r\n  Determining projects to restore...\r\n  Writing C:\\Users\\zivkan\\AppData\\Local\\Temp\\tmp255fey.tmp\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\ninfo : Adding PackageReference for package 'snjfbdujfbdf' into project 'D:\\src\\test\\wtf\\wtf.csproj'.\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json 238ms\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json 162ms\r\nerror: There are no versions available for the package 'snjfbdujfbdf'.\r\n\r\n\r\nUsage: NuGet.CommandLine.XPlat.dll package add [options]\r\n\r\nOptions:\r\n  -h|--help               Show help information\r\n  --force-english-output  Forces the application to run using an invariant, English-based culture.\r\n  --package               Id of the package to be added.\r\n  --version               Version of the package to be added.\r\n  -d|--dg-file            Path to the dependency graph file to be used to restore preview and compatibility check.\r\n  -p|--project            Path to the project file.\r\n  -f|--framework          Frameworks for which the package reference should be added.\r\n  -n|--no-restore         Do not perform restore preview and compatibility check. The added package reference will be unconditional.\r\n  -s|--source             Specifies NuGet package sources to use during the restore.\r\n  --package-directory     Directory to restore packages in.\r\n  --interactive           Allow the command to block and require manual action for operations like authentication.\r\n  --prerelease            Allows prerelease packages to be installed.\r\n```\r\n\n\n### Desired Behavior\n\nOnly show usage/help information when command line parsing fails, not on all failures.\r\n\r\nFor example, run `dotnet add package Some.Package.That.Does.Not.Exist`. If done in a directory that does not contain any `*.*proj` file it outputs:\r\n\r\n```console\r\nCould not find any project in `D:\\src\\test\\`.\r\n```\r\n\r\nThat's it, no usage information. Whereas, if I add `--arg-that-does-not-exist`, then I get an error message saying the argument is not recognised, followed by the usage/help information.\r\n\r\nThis is a pattern that most CLI apps use.\n\n### Additional Context\n\nI believe that customers are getting confused by the extra verbosity in the error message, especially in the `dotnet add package` scenario where neither the first line nor the last line of the message output to customers is an error message. We have gotten github issues and VS feedback where the error message states what the problem is, but customers don't seem to notice and report the issue to us rather than fixing the issue themselves."},{"Id":"39208361643","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:50:24","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13467","RelatedDescription":"Closed issue \"Document known issue in 6.10\" (#13467) at NuGet/Home","RelatedBody":"See details in https://github.com/NuGet/Home/issues/13466."},{"Id":"39208097013","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:39:12","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13293","RelatedDescription":"Closed issue \"NuGetAudit should check transitive packages by default when the .NET 9 SDK is installed\" (#13293) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently `NuGetAuditMode` defaults to `direct`, which means that NuGetAudit will only create warnings when direct package references have a known vulnerability.\n\n### Desired Behavior\n\n`NuGetAuditMode` should default to `all`, so both direct and transitive package references should be scanned for known vulnerabilities.\r\n\r\nNote this will create additional warnings, which were not present before. When a project treats warnings as errors, it will cause breaks. We know this is impactful to everyone, but since this is a security feature we believe it is an overall good for the ecosystem.\r\n\r\nOur [docs on NugetAudit](https://learn.microsoft.com/en-us/nuget/concepts/auditing-packages) explain multiple ways to avoid NuGetAudit breaking builds, such as `WarningsNotAsErrors` or disabling NuGetAudit.\n\n### Additional Context\n\nDue to how NuGet flows from the NuGet.Client repo into both Visual Studio (incuding MSBuild) and the .NET SDK:\r\n\r\n* This will affect SDK style projects in Visual Studio when the .NET 9 SDK is installed, even if your project does not target `net9.0`\r\n* Non-SDK style projects will not be affected (until the .NET 9 SDK goes GA)\r\n"},{"Id":"39207117527","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:01:08","Actor":"bstordrup","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13538","RelatedDescription":"Opened issue \"Exception when extracting files while executing ProjectRestoreCommand\" (#13538) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0.423\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI get the error if I try to add a nuget using the command\r\n\r\n```\r\ndotnet add ConsoleTest2.csproj package MyImportantPackage --version 1.0.0 --package-directory packages\r\n```\r\n\r\nLooking in the `packages` folder, the unpacked package looks like this:\r\n\r\n```\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          11-06-2024    16:34                lib\r\n-a---          11-06-2024    16:34         149872 25yi3iue.eh1\r\n-a---          07-06-2024    11:04            582 myimportantpackage.nuspec\r\n```\r\n\r\nBut if I use the command\r\n\r\n```\r\nnuget install MyImportantPackage -OutputDirectory packages -DirectDownload -Version 1.0.0\r\n```\r\n\r\nthe package is correct installed and no error reported, and the contents of the installed package in `packages` folder is correct.\r\n\r\nIn both attempts, the nuget package resides in a GitHub package repository.\n\n### Verbose Logs\n\n```shell\nStack trace: The error is from executing the \r\n\r\n\r\ndotnet restore MyConsumingSolution.sln --verbosity diagnostic\r\n```\r\n\r\ncommand in a GitHub action flow.\r\n\r\n\r\n\r\n```\r\nC:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\6.0.423\\NuGet.targets(132,5): error : The archive entry was compressed using an unsupported compression method. [D:\\a\\Visma.Diagnostics\\Visma.Diagnostics\\Visma.Diagnostics.Tracing.sln]\r\n                     System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.\r\n                        at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\r\n                        at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32& bytesRead)\r\n                        at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\r\n                        at System.IO.Compression.DeflateStream.ReadCore(Span`1 buffer)\r\n                        at System.IO.Compression.DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\n                        at System.IO.Stream.CopyTo(Stream destination, Int32 bufferSize)\r\n                        at NuGet.Packaging.StreamExtensions.Testable.MmapCopy(Stream inputStream, String fileFullPath, Int64 size)\r\n                        at NuGet.Packaging.StreamExtensions.Testable.CopyToFile(Stream inputStream, String fileFullPath)\r\n                        at NuGet.Packaging.PackageFileExtractor.ExtractPackageFile(String source, String target, Stream stream)\r\n                        at NuGet.Packaging.PackageArchiveReader.CopyFiles(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token)\r\n                        at NuGet.Packaging.PackageReaderBase.CopyFilesAsync(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken)\r\n                        at NuGet.Packaging.PackageExtractor.<>c__DisplayClass5_0.<<InstallFromSourceAsync>b__0>d.MoveNext()\r\n                     --- End of stack trace from previous location ---\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Packaging.PackageExtractor.InstallFromSourceAsync(PackageIdentity packageIdentity, IPackageDownloader packageDownloader, VersionFolderPathResolver versionFolderPathResolver, PackageExtractionContext packageExtractionContext, CancellationToken token, Guid parentId)\r\n                        at NuGet.Commands.ProjectRestoreCommand.InstallPackageAsync(RemoteMatch installItem, NuGetv3LocalRepository userPackageFolder, PackageExtractionContext packageExtractionContext, CancellationToken token)\r\n                        at NuGet.Commands.ProjectRestoreCommand.<>c__DisplayClass15_1.<<InstallPackagesAsync>b__4>d.MoveNext()\r\n                     --- End of stack trace from previous location ---\r\n                        at NuGet.Commands.ProjectRestoreCommand.InstallPackagesAsync(HashSet`1 uniquePackages, IEnumerable`1 graphs, IList`1 downloadDependencyInformations, NuGetv3LocalRepository userPackageFolder, CancellationToken token)\r\n                        at NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity, String telemetryPrefix)\r\n                        at NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity)\r\n                        at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, IRestoreProgressReporter progressReporter, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreArgs, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\n                        at NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\n                        at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log) (TaskId:212)\r\n                   Done executing task \"RestoreTask\" -- FAILED. (TaskId:212)\r\n```\n```\n"},{"Id":"39172967660","Type":"IssuesEvent","CreatedAt":"2024-06-10T22:46:39","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13460","RelatedDescription":"Closed issue \"MSB4181: The \"Restore Task\" task returned false but did not log an error.\" (#13460) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI\n\n### Product Version\n\nRepro'd at least back to 17.9\n\n### Worked before?\n\nYes, not sure\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nParticular restore errors are no longer being logged, so it's very difficult for customers to know why restore is failing.\r\nIn my case, I can repro this by adding a package reference for a package which exists on a feed, but I'm not authorized to download.\r\n\r\n1. Add an Azure DevOps feed to your config.\r\n2. Configure an upstream feed which requires authentication.\r\n3. Remove any credentials that would authenticate your account on the upstream feed.\r\n4. Add a PackageReference for a package version that is on the Upstream feed but not the Main feed.\r\n5. Attempt to restore - even with detailed verbosity - and the following error results:\r\n  `msbuild src\\NuGet.Clients\\NuGet.PackageManagement.PowerShellCmdlets\\NuGet.PackageManagement.PowerShellCmdlets.csproj /t:restore /clp:v=n`\r\n    > error MSB4181: The \"Restore Task\" task returned false but did not log an error.\r\n\r\nThe actual error I found while debugging, which I expect to be logged, is:\r\n\r\n> NuGet.Protocol.Core.Types.FatalProtocolException: 'The feed 'vside [https://pkgs.dev.azure.com/azure-public/vside/_packaging/msft_consumption/nuget/v3/index.json]' lists package 'Microsoft.Internal.VisualStudio.Shell.Framework.17.8.37385' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again.'\r\n\r\n> Unable to find package 'Microsoft.Internal.VisualStudio.Shell.Framework.17.8.37385'.\r\n>    at NuGet.Protocol.FindPackagesByIdNupkgDownloader.<GetNuspecReaderFromNupkgAsync>d__7.MoveNext() in C:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Utility\\FindPackagesByIdNupkgDownloader.cs:line 90\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n>    at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.<GetDependencyInfoAsync>d__12.MoveNext() in C:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\RemoteRepositories\\HttpFileSystemBasedFindPackageByIdResource.cs:line 200\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n>    at NuGet.Commands.SourceRepositoryDependencyProvider.<GetDependenciesCoreAsync>d__26.MoveNext() in C:\\NuGet.Client\\src\\NuGet.Core\\NuGet.Commands\\RestoreCommand\\SourceRepositoryDependencyProvider.cs:line 369\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n>    at NuGet.TaskResultCache`2.<>c__5`1.<GetOrAddAsync>b__5_1(Task`1 task) in C:\\NuGet.Client\\build\\Shared\\TaskResultCache.cs:line 98\r\n>    at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n>    at System.Threading.Tasks.Task.Execute()\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"39172918732","Type":"IssuesEvent","CreatedAt":"2024-06-10T22:43:48","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13536","RelatedDescription":"Opened issue \"`PackCommand_ReferencedProjectWithJsonFile` is flaky\" (#13536) at NuGet/Home","RelatedBody":"> System.TimeoutException : D:\\a_work\\1\\s\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\Debug\\net472\\NuGet\\NuGet.exe pack proj1.csproj -build -IncludeReferencedProjects timed out after 62.05 seconds\r\n> \r\n> Stack trace\r\n>    at NuGet.Test.Utility.CommandRunner.Run(String filename, String workingDirectory, String arguments, Int32 timeOutInMilliseconds, Action`1 inputAction, IDictionary`2 environmentVariables, ITestOutputHelper testOutputHelper) in D:\\a\\_work\\1\\s\\test\\TestUtilities\\Test.Utility\\CommandRunner.cs:line 89\r\n>    at NuGet.CommandLine.Test.NuGetPackCommandTest.PackCommand_ReferencedProjectWithJsonFile() in D:\\a\\_work\\1\\s\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\NuGetPackCommandTest.cs:line 1578"},{"Id":"39172748656","Type":"IssuesEvent","CreatedAt":"2024-06-10T22:33:56","Actor":"omajid","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13535","RelatedDescription":"Opened issue \"SignatureUtility.GetCertificates in NuGet.Client can skip calling Dispose on error\" (#13535) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nCommit f7cc7b86152a1af085d394c9cd57baa8142d3044\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nhttps://github.com/NuGet/NuGet.Client/blob/dc2e3b27170c779e3c01a7306504fb83cb4ef147/src/NuGet.Core/NuGet.Packaging/Signing/Utility/SignatureUtility.cs#L555-L566 has this code:\r\n\r\n```csharp\r\n            IX509CertificateChain certificates = GetCertificateChain(\r\n                signerInfo.Certificate,\r\n                signedCms.Certificates,\r\n                certificateType,\r\n                includeChain);\r\n\r\n\r\n            if (certificates == null || certificates.Count == 0)\r\n            {\r\n                throw new SignatureException(errors.ChainBuildingFailed, Strings.CertificateChainBuildFailed);\r\n            }\r\n\r\n\r\n            return certificates;\r\n```\r\n\r\nSince `certificates` is an `IDisposable`, we should call `Dispose()` on it when it's non-null and we still decide to throw an exception.\n\n### Verbose Logs\n\n_No response_"},{"Id":"39167004442","Type":"IssuesEvent","CreatedAt":"2024-06-10T18:36:02","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13532","RelatedDescription":"Opened issue \"NuGetVersion should use a factory to intern parsed versions\" (#13532) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet SDK\n\n### Current Behavior\n\nCurrently, `NuGetVersion.Parse()` parses a string and returns a `NuGetVersion` object.  When restoring a large repository, hundreds of thousands of these objects can be created, consuming a lot of memory.\n\n### Desired Behavior\n\nWe should introduce a `NuGetVersionFactory` that returns the same object for the same string.  That way, only once instance of the object would exist for a version like `1.0.0` and only each unique version during a restore would require memory allocation.\n\n### Additional Context\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-06-13T03:30:17.9049524Z","RunDurationInMilliseconds":1013}