{"Data":{"Blog":{"FeedItems":[{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Summary\nOver the past few years, we have continually invested in strengthening the supply-chain security for .NET packages. To strengthen the ecosystem further, NuGet.org will begin requiring...","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"20984268288","Type":"PullRequestEvent","CreatedAt":"2022-03-29T00:10:09","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9080","RelatedDescription":"Opened pull request \"[ReleasePrep][2022.03.28]RI of dev into main\" (#9080) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/NuGetGallery/issues/9079"},{"Id":"20984250320","Type":"IssuesEvent","CreatedAt":"2022-03-29T00:08:08","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9079","RelatedDescription":"Opened issue \"[Deployment] 2022.03.28\" (#9079) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\n## Changes\r\n\r\n* https://github.com/NuGet/NuGetGallery/pull/9067 (tracked by https://github.com/Nuget/NugetGallery/issues/9061)\r\n* https://github.com/NuGet/NuGetGallery/pull/8906 (tracked by https://github.com/NuGet/Engineering/issues/4133)\r\n* https://github.com/NuGet/NuGetGallery/pull/9073 (tracked by https://github.com/Nuget/NugetGallery/issues/9048)\r\n* https://github.com/NuGet/NuGetGallery/pull/9069 (tracked by https://github.com/NuGet/NuGetGallery/issues/9052)\r\n* https://github.com/NuGet/NuGetGallery/pull/9070 (tracked by https://github.com/NuGet/Engineering/issues/3994)\r\n* https://github.com/NuGet/NuGetGallery/pull/9077 (tracked by https://github.com/Nuget/NugetGallery/issues/9068)\r\n\r\nChanges without tracking issue:\r\n* https://github.com/NuGet/NuGetGallery/pull/9074\r\n\r\n## Progress\r\n* [ ] Merge PRs: - Skipped FI of main into dev (no changes)\r\n* [ ] Build: \r\n* [ ] Release:  \r\n* [ ] DEV DB Migration\r\n* [ ] DEV\r\n* [ ] INT DB Migration\r\n* [ ] INT\r\n* [ ] PROD DB Migration\r\n* [ ] PROD\r\n"},{"Id":"20982863620","Type":"PullRequestEvent","CreatedAt":"2022-03-28T21:59:00","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9077","RelatedDescription":"Merged pull request \"[A11y] Made Package Details page's tabs navigable with left/right arrow keys\" (#9077) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/9068\r\n\r\n**Problem:**\r\n \r\nOn the Package Details page, tabs are navigated between using the tab key, rather than the left and right arrow keys, as it is supposed to be. This means that once a user has selected a tab, they must still tab navigate through the remaining inactive tabs before they can access the tab content.\r\n\r\n**Previously,**\r\n![20220325_182528](https://user-images.githubusercontent.com/82980589/160219270-24b3d6af-42ae-484e-a867-cbae22dbc822.gif)\r\n\r\n**Fix:**\r\n\r\nI added an event listener for left and right arrow keys, and changed the tab in focus based on the input. I used keyUp as the trigger here rather than keyDown, because adding an event listener for keyDown also messed with other keyboard functionality (eg. 'tab' and 'enter' keys) when focused on the tab element.\r\n\r\nTo enable this, I also made it such that only the selected/expanded tab has _tabindex=\"0\"_ and receives tab focus sequentially with other elements on the page, while all inactive tabs have _tabindex=\"-1\"_, and can only receive focus when using left/right arrow keys from their active sibling tab. Once a new tab is made active, we set _tabindex=\"-1\"_ on the previous tab, and _tabindex=\"0\"_ on the new active tab.\r\n\r\n**After the changes,**\r\n![20220325_181409](https://user-images.githubusercontent.com/82980589/160219028-f8bd7c95-7efc-410a-8d32-3140726d749d.gif)"},{"Id":"20982767661","Type":"PullRequestEvent","CreatedAt":"2022-03-28T21:52:05","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9074","RelatedDescription":"Merged pull request \"[A11y]Enable dismissing Verified tooltip with esc\" (#9074) at NuGet/NuGetGallery","RelatedBody":"Currently, when navigated to by keyboard, the verified tooltip cannot be dismissed without tabbing away from the icon.\r\nThis change enables dismissing this tooltip by usage of the esc key for all locations where this tooltip is used.\r\n\r\nAs a bonus it also fixes a bug that could cause the tooltip to stop working altogether when clicked on."},{"Id":"20982504674","Type":"IssuesEvent","CreatedAt":"2022-03-28T21:32:10","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9078","RelatedDescription":"Opened issue \"Reduce the amount of magic numbers in JS code in Gallery\" (#9078) at NuGet/NuGetGallery","RelatedBody":"Gallery JS code is ridden with magic numbers:\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/6136fc988f19595bf1bbf96d0be7343e77e1a31a/src/NuGetGallery/Scripts/gallery/common.js#L12\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/6136fc988f19595bf1bbf96d0be7343e77e1a31a/src/NuGetGallery/Scripts/gallery/common.js#L244\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/6136fc988f19595bf1bbf96d0be7343e77e1a31a/src/NuGetGallery/Scripts/gallery/common.js#L574-L578\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/6136fc988f19595bf1bbf96d0be7343e77e1a31a/src/NuGetGallery/Scripts/gallery/autocomplete.js#L64-L67\r\n\r\netc.\r\n\r\nFor better code readability it would be nice to provide nice names at least for some of them (key codes, for example). Some attempts to do it seems to have been done in the past, we need to extend it:\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/6136fc988f19595bf1bbf96d0be7343e77e1a31a/src/NuGetGallery/Scripts/gallery/autocomplete.js#L3-L13"},{"Id":"20947491808","Type":"PullRequestEvent","CreatedAt":"2022-03-26T04:33:14","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9070","RelatedDescription":"Merged pull request \"Add admin panel for bulk ownership changes\" (#9070) at NuGet/NuGetGallery","RelatedBody":"Spec: https://github.com/NuGet/Engineering/pull/3998\r\nIssue: https://github.com/NuGet/Engineering/issues/3994\r\n\r\nThis admin panel allows site admins to make bulk ownership changes (add or remove owners) and set an arbitrary user as the \"sender\" for ownership requests. As site admins we'll use the `NuGetAdmin` user account for this so our own personal name can be kept private.\r\n\r\nThis is what it looks like:\r\n![image](https://user-images.githubusercontent.com/94054/159975976-a5a06852-30c6-4411-a50a-04dbb7dad2b9.png)\r\n\r\nAnd this is the \"validate\" screen since the operations are so complex:\r\n![image](https://user-images.githubusercontent.com/94054/159976038-d35f621d-01de-420d-985b-032ef567bb2a.png)\r\n\r\nAnd this is the admin home page (I've tightened things up a bit since I felt like the display was too spacious)\r\n![image](https://user-images.githubusercontent.com/94054/159976206-9391d75a-2a7b-4fd9-af06-23cbce52d806.png)\r\n\r\n"},{"Id":"20946572143","Type":"PullRequestEvent","CreatedAt":"2022-03-26T01:30:18","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9077","RelatedDescription":"Opened pull request \"[A11y] Made Package Details page's tabs navigable with left/right arrow keys\" (#9077) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/nuget/nugetgallery/issues/9068\r\n\r\n**Problem:**\r\n \r\nOn the Package Details page, tabs are navigated between using the tab key, rather than the left and right arrow keys, as it is supposed to be. This means that once a user has selected a tab, they must still tab navigate through the remaining inactive tabs before they can access the tab content.\r\n\r\n**Previously,**\r\n![20220325_182528](https://user-images.githubusercontent.com/82980589/160219270-24b3d6af-42ae-484e-a867-cbae22dbc822.gif)\r\n\r\n**Fix:**\r\n\r\nI added an event listener for left and right arrow keys, and changed the tab in focus based on the input. \r\n\r\nTo enable this, I also made it such that only the selected/expanded tab has _tabindex=\"0\"_ and receives tab focus sequentially with other elements on the page, while all inactive tabs have _tabindex=\"-1\"_, and can only receive focus when using left/right arrow keys from their active sibling tab. Once a new tab is made active, we set _tabindex=\"-1\"_ on the previous tab, and _tabindex=\"0\"_ on the new active tab.\r\n\r\n**After the changes,**\r\n![20220325_181409](https://user-images.githubusercontent.com/82980589/160219028-f8bd7c95-7efc-410a-8d32-3140726d749d.gif)"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"20984324465","Type":"IssuesEvent","CreatedAt":"2022-03-29T00:16:25","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11697","RelatedDescription":"Closed issue \"[Feature]: Ability to specify relative path on nuget push\" (#11697) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nI propose adding another parameter (and perhaps configuration option) to `nuget push`.  This parameter (perhaps `-DestinationRelativePath` or similar) would allow use of the `-Source` parameter to specify a configured Package Source, and then the remainder of the PUT request would be built by concatenating the package source and the value of the `DestinationRelativePath`.  So if one's Package Source called `MyNuGetSource` was configured with the URL `https://mynugetserver.com/api/nuget/v3/my-nuget-repo` and one executed the following:\r\n\r\n`nuget push MyPackage.nupkg -Source MyNuGetSource` -DestinationRelativePath MyPackage/1.1`\r\nThe eventual PUT request would be to `https://mynugetserver.com/api/nuget/v3/my-nuget-repo/MyPackage/1.1/MyPackage.nupkg`\r\n\r\nNuGet would still use the credentials specified for the `MyNugetSource` Package Source, including any stored credentials and client certificate information.  Currently this is impossible with regard to client certificates.\n\n### Additional Context and Details\n\nNuGet push allows pushing to any arbitrary NuGet repository URL using the `-Source` parameter.  Alternately, the NuGet CLI can store configuration for a given Package Source, including authentication information (username/password, client certificates, etc).  However, **if one attempts to push to a location that is a sub-path of an existing configured Package Source, NuGet is unable to recognize this and use the configuration for that Package Source**.\r\n\r\nFor example, if I have configured a Package Source called MySource as follows:\r\n`<add key=\"MyNuGetSource\" value=\"https://mynugetserver.com/api/nuget/v3/my-nuget-repo\"/>`\r\nand I then attempt to perform the following:\r\n`nuget push myPackage.nupkg -Source https://mynugetserver.com/api/nuget/v3/my-nuget-repo/subDir1/subDir2`, the NuGet CLI does not recognize that this is a subPath of my configured `MyNugetSource` source, and thus will prompt for credentials if the server side requires authentication.  This can be an issue for automated builds, though credential providers could theoretically work around this issue, or one could pass an apiKey on the command line.  What cannot be worked around is if the server requires client certificate authorization, since those options can only be specified in the NuGet config file, and not on the command line.\r\n\r\nWhy might one want to use a relative path in the nuget push?  One reason is if their repository target doesn't function the way NuGet.Server does.  NuGet.Server will create an appropriate folder structure and place the pushed package into the correct location within it.  For example, in Artifactory NuGet repos, a simple `nuget push` will result in the package being dropped into the root of the repository.  For large repos, this can be troublesome."},{"Id":"20984264550","Type":"IssuesEvent","CreatedAt":"2022-03-29T00:09:43","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11695","RelatedDescription":"Closed issue \"[Feature]: `dotnet list package --vulnerable --include-transitive` should return dependency path to vulnerable package\" (#11695) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nWhen `dotnet list package --vulnerable --include-transitive` reports packages that are indirect (transitive) dependencies it's very tedious to manually track down which direct dependency causes the vulnerable package to be included. NuGet already knows this - it just needs to show it to the user.\n\n### Additional Context and Details\n\nCurrent output:\r\n\r\n```\r\nProject `MyProject` has the following vulnerable packages\r\n   [netcoreapp3.1]: \r\n   Transitive Package                    Resolved   Severity   Advisory URL                                     \r\n   > SharpCompress                       0.23.0     Moderate   https://github.com/advisories/GHSA-jp7f-grcv-6mjf\r\n   > System.Net.Http                     4.3.0      High       https://github.com/advisories/GHSA-7jgj-8wvc-jh57\r\n   > System.Text.RegularExpressions      4.3.0      Moderate   https://github.com/advisories/GHSA-cmhx-cq75-c4mj\r\n```\r\n\r\nI then have to look for \"SharpCompress\" in obj/project.assets.json to find that it's a dependency of \"MongoDB.Driver.Core\". I then search for that string in the same file to find it's a dependency of \"MongoDB.Driver\", which my project directly includes. This has to be done for every listed package.\r\n\r\nThe output I'd like to see:\r\n\r\n```\r\nProject `MyProject` has the following vulnerable packages\r\n   [netcoreapp3.1]: \r\n   Transitive Package                    Resolved   Severity   Advisory URL                                     \r\n   > SharpCompress                       0.23.0     Moderate   https://github.com/advisories/GHSA-jp7f-grcv-6mjf\r\n     via MongoDB.Driver -> MongoDB.Driver.Core\r\n   > System.Net.Http                     4.3.0      High       https://github.com/advisories/GHSA-7jgj-8wvc-jh57\r\n     via MongoDB.Driver -> MongoDB.Bson -> NETStandard.Library\r\n   > System.Text.RegularExpressions      4.3.0      Moderate   https://github.com/advisories/GHSA-cmhx-cq75-c4mj\r\n     via MongoDB.Driver -> MongoDB.Bson -> NETStandard.Library\r\n```"},{"Id":"20984014483","Type":"IssuesEvent","CreatedAt":"2022-03-28T23:41:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/10590","RelatedDescription":"Reopened issue \"Unexpected error “Your project file doesn’t list ‘win’ as a “RuntimeIdentifier”” occurs when building the solution after enabling “RestoreLockedMode”\" (#10590) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet version: NuGet Client Dev\\5.10.0.7140\r\nVS Version: Main\\31021.18 \r\nOS Version: Windows-10-Enterprise-20h1\r\n\r\n## Repro steps and/or sample project\r\n\r\n1. Create a C# Class Library (.NET Framework) project via VS. \r\n2. Install a few ‘PackageReference’ packages into the projects.\r\n3. Set MSBuild property “RestorePackagesWithLockFile” to true in csproj file.\r\n ` <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>`\r\n4. Do a restore.\r\n5. Check it should have generated ‘packages.lock.json’ file alongside *.csproj file.\r\n6. Set msbuild property “RestoreLockedMode” to “true”.\r\n    `<RestoreLockedMode>true</RestoreLockedMode>`\r\n7. Install another package.\r\n8. It should still work fine and update ‘packages.lock.json’ file.\r\n9. Manually add a new PackageReference item into csproj file.\r\n```\r\n<PackageReference Include=\"NUnit\">\r\n      <Version>3.12.0</Version>\r\n    </PackageReference>\r\n```\r\n10. Perform restore.\r\n11. Build the solution.\r\n\r\n## Expected\r\n\r\nOnly expected error NU1004 shows on error list when building the solution.\r\n\r\n## Actual\r\n\r\nUnexpected error “Your project file doesn’t list ‘win’ as a “RuntimeIdentifier”” occurs when building the solution as below screenshot.\r\n![image](https://user-images.githubusercontent.com/71433406/108685454-20d9f600-752f-11eb-949a-96aa2699b17f.png)\r\n\r\n## Notes\r\n\r\n1. This issue  doesn’t repro on .NET Core projects.\r\n2.  The issue starts from Dev\\5.9.0.7086."},{"Id":"20984014073","Type":"IssuesEvent","CreatedAt":"2022-03-28T23:41:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10590","RelatedDescription":"Closed issue \"Unexpected error “Your project file doesn’t list ‘win’ as a “RuntimeIdentifier”” occurs when building the solution after enabling “RestoreLockedMode”\" (#10590) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet version: NuGet Client Dev\\5.10.0.7140\r\nVS Version: Main\\31021.18 \r\nOS Version: Windows-10-Enterprise-20h1\r\n\r\n## Repro steps and/or sample project\r\n\r\n1. Create a C# Class Library (.NET Framework) project via VS. \r\n2. Install a few ‘PackageReference’ packages into the projects.\r\n3. Set MSBuild property “RestorePackagesWithLockFile” to true in csproj file.\r\n ` <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>`\r\n4. Do a restore.\r\n5. Check it should have generated ‘packages.lock.json’ file alongside *.csproj file.\r\n6. Set msbuild property “RestoreLockedMode” to “true”.\r\n    `<RestoreLockedMode>true</RestoreLockedMode>`\r\n7. Install another package.\r\n8. It should still work fine and update ‘packages.lock.json’ file.\r\n9. Manually add a new PackageReference item into csproj file.\r\n```\r\n<PackageReference Include=\"NUnit\">\r\n      <Version>3.12.0</Version>\r\n    </PackageReference>\r\n```\r\n10. Perform restore.\r\n11. Build the solution.\r\n\r\n## Expected\r\n\r\nOnly expected error NU1004 shows on error list when building the solution.\r\n\r\n## Actual\r\n\r\nUnexpected error “Your project file doesn’t list ‘win’ as a “RuntimeIdentifier”” occurs when building the solution as below screenshot.\r\n![image](https://user-images.githubusercontent.com/71433406/108685454-20d9f600-752f-11eb-949a-96aa2699b17f.png)\r\n\r\n## Notes\r\n\r\n1. This issue  doesn’t repro on .NET Core projects.\r\n2.  The issue starts from Dev\\5.9.0.7086."},{"Id":"20983861567","Type":"IssuesEvent","CreatedAt":"2022-03-28T23:26:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3022","RelatedDescription":"Closed issue \"Refactor test framework to not depend on external packages\" (#3022) at NuGet/Home","RelatedBody":"We have many tests depending on `Newtonsoft.Json`, `owin`, `dotNetRDF`, etc. This can lead to situations where package owners publish a new version of a package (or unlist a version) and our tests unexpectedly break.\n\nNew tests should depend on local packages or packages maintained by us. Old tests should be refactors to remove this external dependency.\n"},{"Id":"20983555086","Type":"IssuesEvent","CreatedAt":"2022-03-28T22:58:08","Actor":"bgreman","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11697","RelatedDescription":"Opened issue \"[Feature]: Ability to specify relative path on nuget push\" (#11697) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nI propose adding another parameter (and perhaps configuration option) to `nuget push`.  This parameter (perhaps `-DestinationRelativePath` or similar) would allow use of the `-Source` parameter to specify a configured Package Source, and then the remainder of the PUT request would be built by concatenating the package source and the value of the `DestinationRelativePath`.  So if one's Package Source called `MyNuGetSource` was configured with the URL `https://mynugetserver.com/api/nuget/v3/my-nuget-repo` and one executed the following:\r\n\r\n`nuget push MyPackage.nupkg -Source MyNuGetSource` -DestinationRelativePath MyPackage/1.1`\r\nThe eventual PUT request would be to `https://mynugetserver.com/api/nuget/v3/my-nuget-repo/MyPackage/1.1/MyPackage.nupkg`\r\n\r\nNuGet would still use the credentials specified for the `MyNugetSource` Package Source, including any stored credentials and client certificate information.  Currently this is impossible with regard to client certificates.\n\n### Additional Context and Details\n\nNuGet push allows pushing to any arbitrary NuGet repository URL using the `-Source` parameter.  Alternately, the NuGet CLI can store configuration for a given Package Source, including authentication information (username/password, client certificates, etc).  However, **if one attempts to push to a location that is a sub-path of an existing configured Package Source, NuGet is unable to recognize this and use the configuration for that Package Source**.\r\n\r\nFor example, if I have configured a Package Source called MySource as follows:\r\n`<add key=\"MyNuGetSource\" value=\"https://mynugetserver.com/api/nuget/v3/my-nuget-repo\"/>`\r\nand I then attempt to perform the following:\r\n`nuget push myPackage.nupkg -Source https://mynugetserver.com/api/nuget/v3/my-nuget-repo/subDir1/subDir2`, the NuGet CLI does not recognize that this is a subPath of my configured `MyNugetSource` source, and thus will prompt for credentials if the server side requires authentication.  This can be an issue for automated builds, though credential providers could theoretically work around this issue, or one could pass an apiKey on the command line.  What cannot be worked around is if the server requires client certificate authorization, since those options can only be specified in the NuGet config file, and not on the command line.\r\n\r\nWhy might one want to use a relative path in the nuget push?  One reason is if their repository target doesn't function the way NuGet.Server does.  NuGet.Server will create an appropriate folder structure and place the pushed package into the correct location within it.  For example, in Artifactory NuGet repos, a simple `nuget push` will result in the package being dropped into the root of the repository.  For large repos, this can be troublesome."},{"Id":"20981309490","Type":"IssuesEvent","CreatedAt":"2022-03-28T20:14:34","Actor":"marcin-krystianc","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11696","RelatedDescription":"Opened issue \"[Bug]: Central package management breaks no-op restores\" (#11696) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0.100\n\n### Worked before?\n\ndotnet 5.0.100\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. Checkout project that uses central package management, e.g.: [NoOpIssue.zip](https://github.com/NuGet/Home/files/8365994/NoOpIssue.zip)\r\n\r\n2. Run `dotnet restore` twice.\r\n\r\n3. The second restore should be no-op restore (\"All projects are up-to-date for restore.\" in the command output), but it is not the case for `dotnet 6.0.100`\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n```shell\nd:\\workspace\\TestSolutions\\NoOpIssue\\App>dotnet --version\r\n6.0.100\r\n\r\nd:\\workspace\\TestSolutions\\NoOpIssue\\App>dotnet restore\r\n  Determining projects to restore...\r\n  The project d:\\workspace\\TestSolutions\\NoOpIssue\\App\\App.csproj is using CentralPackageVersionManagement, a NuGet preview feature.\r\n  Restored d:\\workspace\\TestSolutions\\NoOpIssue\\App\\App.csproj (in 187 ms).\r\n\r\nd:\\workspace\\TestSolutions\\NoOpIssue\\App>dotnet restore\r\n  Determining projects to restore...\r\n  The project d:\\workspace\\TestSolutions\\NoOpIssue\\App\\App.csproj is using CentralPackageVersionManagement, a NuGet preview feature.\r\n  Restored d:\\workspace\\TestSolutions\\NoOpIssue\\App\\App.csproj (in 161 ms).\r\n```\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"20398585964","Type":"IssuesEvent","CreatedAt":"2022-02-22T18:32:01","Actor":"clairernovotny","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/61","RelatedDescription":"Opened issue \"Requiring two-factor authentication on NuGet.org\" (#61) at NuGet/Announcements","RelatedBody":"We announced plans to require tFA on all accounts on NuGet.org. Details in the [blog post](https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/)."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":21,"RawContent":null},{"Id":"1493700008000073731","CreatedAt":"2022-02-15T21:33:28+00:00","UserScreenname":"nuget","Text":"📦Introducing Compatible Packages 📦\n\n🖼 New Frameworks Tab\n😎 Target Framework Badges\n🧩 Computed Compatibility Table\n🛠… https://t.co/qDUkqayBjC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":171,"FavoriteCount":43,"RawContent":null},{"Id":"1488563020074737670","CreatedAt":"2022-02-01T17:20:54+00:00","UserScreenname":"nuget","Text":"NuGet is celebrating 20 years of @dotnet with over 290,000 unique packages and 160 billion downloads to date! Tune… https://t.co/kCkBuvp3OW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2022-03-29T03:30:24.0470812Z","RunDurationInMilliseconds":1510}