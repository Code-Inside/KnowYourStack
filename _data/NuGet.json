{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26424199539","Type":"IssuesEvent","CreatedAt":"2023-01-14T01:07:04","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9336","RelatedDescription":"Closed issue \"[NuGet.org Bug]: HTTP responses aren't reported to user\" (#9336) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nIf a package author tries to upload\r\na) a signed package without a registered signing key, or\r\nb) an unsigned package when a signing key is registered,\r\n...the package will not be uploaded and no error message will be shown to the author.\r\n\r\nThe only way to find any kind of information is to open the DevTools and inspect the HTTP response. The HTTP response will look something like\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/209454605-bf34c11d-20f9-4ae3-b557-ced11ce2c24b.png)\r\n\n\n### Repro Steps\n\nSee above\n\n### Expected Behavior\n\nThe error message is shown to the user, and it clearly explains what the author must do in order to upload the package. The error message in the HTTP response **is not** be sufficient.\r\nLinks to documentation that articulates the necessity would also be helpful.\r\n\r\nA slight necessary OT: our organisation maintains several packages some of which are signed and some of which aren't. We can't sign all of the packages (and it's besides the point). Up until recently we published all packages without issues, and now when I tried to upload a new version of the signed package I couldn't do it. After some head scratching and investigations, essentially I was forced to register the signing key. And after that I could no longer upload a new version of the unsigned package....\r\n_If_ this is now \"by design\" this has to be explained, as well as steps to resolve such situations should be provided. \"Sign all your packages\" may not be an option.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26457032161","Type":"IssuesEvent","CreatedAt":"2023-01-16T15:00:37","Actor":"cremor","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12368","RelatedDescription":"Opened issue \"GlobalPackageReference is not working for legacy-style csproj projects\" (#12368) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.4.4\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. Create a solution with both a SDK-style csproj file and a legacy-style csproj file (e.g. .NET Framework project).\r\n2. Add a NuGet package to both.\r\n3. Enable Central Package Management per [documentation](https://learn.microsoft.com/en-us/nuget/consume-packages/Central-Package-Management#).\r\n4. Note that Central Package Management works fine.\r\n5. Add a Global Package Reference (per [documentation](https://learn.microsoft.com/en-us/nuget/consume-packages/Central-Package-Management#global-package-references)) to the `Directory.Packages.props` file, e.g. [PolySharp](https://www.nuget.org/packages/PolySharp/).\r\n6. Note that the global package reference works in the SDK-style project but is **not** working in the legacy-style project.\r\n\r\n`<PackageReference>` works with legacy-style csproj files, so why doesn't `<GlobalPackageReference>` work too?\n\n### Verbose Logs\n\n_No response_"},{"Id":"26455574547","Type":"IssuesEvent","CreatedAt":"2023-01-16T14:14:58","Actor":"cremor","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12367","RelatedDescription":"Opened issue \"Package Source Mapping with '*' not at the end matches wrong packages\" (#12367) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\n.NET SDK 7.0.102, VS 17.4.4\n\n### Worked before?\n\n-\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. Use Package Source Mapping similar to the config shown [here](https://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping#enabling-package-source-mapping).\r\n2. Use a custom package in the project that only exists in the custom feed, but don't configure it in the Package Source Mapping.\r\n3. Make sure that the custom package is not already in the global packages folder.\r\n4. Try `dotnet restore` or building in Visual Studio.\r\n5. Note that it shows an error because it can't find the custom package -> OK, as expected.\r\n6. Add the line `<package pattern=\"*.something\" />` to the custom package source mapping.\r\n7. Try `dotnet restore` or building in Visual Studio.\r\n8. Note that the restore/build works now -> Why? That dummy pattern doesn't match the package id! (The custom package does **not** end in `.something`!)\r\n\r\nThe [documentation](https://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping#package-pattern-syntax) mentions that the pattern needs to **end** with a `*`. But it seems like this is not enforced and leads to unexpected results when done differently.\n\n### Verbose Logs\n\n_No response_"},{"Id":"26426003586","Type":"IssuesEvent","CreatedAt":"2023-01-14T06:47:21","Actor":"wangminh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12366","RelatedDescription":"Opened issue \"After using the DeleteWorksheet method of SpreadsheetLight to delete the excel sheet, error will be prompted when opening the file\" (#12366) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nSpreadsheetLight  3.4.11\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nerror: 削除された機能: /xl/workbook.xml パーツ内の名前付き範囲 (ブック)\r\nIf move the sheet of the deleted object to the last position in the template, it seems that no error will occur。\r\nMaybe the order in the source code is reversed。\r\nwbp.DeletePart(sRelId);\r\nslwb.Sheets.RemoveAt(i);\n\n### Verbose Logs\n\n_No response_"},{"Id":"26422211861","Type":"IssuesEvent","CreatedAt":"2023-01-13T21:49:49","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12363","RelatedDescription":"Closed issue \"[CPVM] NU1011 should not be raised for GlobalPackageReferences\" (#12363) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet SDK\n\n### Current Behavior\n\n`GlobalPackageReference`s are not allowed to have a floating version. For example,\r\n\r\n```xml\r\n<GlobalPackageReference Include=\"StyleCop.Analyzers\" Version=\"1.1.*\" />\r\n```\r\n\r\nproduces \"NU1011: Centrally defined floating package versions are not allowed\".\r\n\r\nI understand [why this diagnostic exists](https://github.com/NuGet/Home/issues/9384#issuecomment-665202275), but I think it should not apply to `GlobalPackageReference`s by default.\r\n\r\n* `GlobalPackageReference` is generally used for build dependencies such as analysers and SDKs. Such dependencies are usually not intended to be brought along transitively, so the NU1608 error is less likely to occur.\r\n* `GlobalPackageReference`s are more likely to be used with a floating version in the first place, in my opinion. In my scenario, I'm maintaining a handful of libraries which use a shared package (also maintained by me) of build scripts and analyser configurations, so that I don't have to duplicate `props` and `globalconfig` settings across a bunch of repositories. I'd like to use a floating version for that shared package so that I can make adjustments to the build scripts and not have to update all of the dependent repositories.\r\n\r\n(For what it's worth, I think there are cases other than `GlobalPackageReference` where these arguments apply, too, such as test frameworks. Personally I'd be happiest if there were an escape hatch to opt out of NU1011 - like `<AllowFloatingCentralPackageVersions_IKnowWhatImDoing>true</AllowFloatingCentralPackageVersions_IKnowWhatImDoing>`, haha)\n\n### Desired Behavior\n\n`GlobalPackageReference`s should not be subjected to the NU1011 rule forbidding floating centrally defined versions\n\n### Additional Context\n\n_No response_"},{"Id":"26421675277","Type":"IssuesEvent","CreatedAt":"2023-01-13T21:12:26","Actor":"ZeroSkill1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12365","RelatedDescription":"Opened issue \"MigrationsRunner locks up on dotnet CLI first run\" (#12365) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0.10 (SDK 6.0.402)+\n\n### Worked before?\n\ndotnet 6.0.9 (SDK 6.0.401)\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nSince MigrationsRunner was introduced in NuGet.Client (used in .NET 6.0.10, SDK 6.0.402+), I have not been able to use `dotnet` at all. \r\n\r\nI have opened [an issue over at dotnet/sdk](https://github.com/dotnet/sdk/issues/29662) already and that led me to NuGet being the cause. As seen in the [MigrationsRunner source](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Common/Migrations/MigrationRunner.cs#L14), some kind of logic is executed that uses Mutexes. When `dotnet` runs for the first time, it executes the .Run() method, it seems to always hang and infinitely wait(?) for the Mutex to release, which never happens. As a result, `dotnet` cannot continue with its first run logic.\r\n\r\nTo reproduce:\r\n- Download any version of `dotnet` newer than 6.0.9 (SDK 6.0.401)\r\n- Make sure you do not have a directory called `$HOME/.dotnet` (because otherwise, `dotnet` will not execute MigrationsRunner.Run() otherwise)\r\n- Run a basic command such as `dotnet new console -o HelloWorld` or even `dotnet nuget`\r\n- `dotnet` will hang, spiking the CPU utilization on one core.\r\n\r\nWhat I've tried:\r\n- Removing `$HOME/.nuget` to see if that would be an issue (perhaps due to incorrect permissions)\r\n- Tracing syscalls of the `dotnet` binary, which showed the infinite Mutex wait\n\n### Verbose Logs\n\n_No response_"},{"Id":"26419943596","Type":"IssuesEvent","CreatedAt":"2023-01-13T19:22:48","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12358","RelatedDescription":"Closed issue \"Nuget not searching in custom package sources\" (#12358) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Manager Console\r\n\r\n### Product Version\r\n\r\nnuget 6.4.0.117\r\n\r\n### Worked before?\r\n\r\nseems to work in 6.3.1.1, but on a different laptop\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nI have added a custom package source. If I search in nuget package manager, I find my package. If I install the package it fails with the following error:\r\n\r\n```\r\nRestoring packages for .NETStandard,Version=v2.1...\r\n  GET https://api.nuget.org/v3-flatcontainer/mypackage.test/index.json\r\n  NotFound https://api.nuget.org/v3-flatcontainer/mypackage.test/index.json 125ms\r\nResolving conflicts for .NETStandard,Version=v2.1...\r\nUnable to find package mypackage.test. No packages exist with this id in source(s): nuget.org\r\nPackage restore failed. Rolling back package changes for 'FormsApp1'.\r\n```\r\nIn the logging I see that package manager only searches in nuget.org and not in my custom sources.\r\n\r\nI am using VS for mac 17.4.2.\r\nNuGet Version: 6.4.0.117\r\n\r\n**QUESTION: How do I install a different version of Nuget?** I want to try version 6.3.1.1 to check if this works on the same laptop."},{"Id":"26418201724","Type":"IssuesEvent","CreatedAt":"2023-01-13T17:44:03","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12364","RelatedDescription":"Opened issue \"Test:  consider running Windows-only pack tests in Dotnet.Integration.Test on other platforms\" (#12364) at NuGet/Home","RelatedBody":"See https://github.com/NuGet/NuGet.Client/pull/5009#discussion_r1069751109"},{"Id":"26418032877","Type":"IssuesEvent","CreatedAt":"2023-01-13T17:34:34","Actor":"benjamin-hodgson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12363","RelatedDescription":"Opened issue \"[CPVM] NU1011 should not be raised for GlobalPackageReferences\" (#12363) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet SDK\n\n### Current Behavior\n\n`GlobalPackageReference`s are not allowed to have a floating version. For example,\r\n\r\n```xml\r\n<GlobalPackageReference Include=\"StyleCop.Analyzers\" Version=\"1.1.*\" />\r\n```\r\n\r\nproduces \"NU1011: Centrally defined floating package versions are not allowed\".\r\n\r\nI understand [why this diagnostic exists](https://github.com/NuGet/Home/issues/9384#issuecomment-665202275), but I think it should not apply to `GlobalPackageReference`s by default.\r\n\r\n* `GlobalPackageReference` is generally used for build dependencies such as analysers and SDKs. Such dependencies are usually not intended to be brought along transitively, so the NU1608 error is less likely to occur.\r\n* `GlobalPackageReference`s are more likely to be used with a floating version in the first place, in my opinion. In my scenario, I'm maintaining a handful of libraries which use a shared package (also maintained by me) of build scripts and analyser configurations, so that I don't have to duplicate `props` and `globalconfig` settings across a bunch of repositories. I'd like to use a floating version for that shared package so that I can make adjustments to the build scripts and not have to update all of the dependent repositories.\r\n\r\n(For what it's worth, I think there are cases other than `GlobalPackageReference` where these arguments apply, too, such as test frameworks. Personally I'd be happiest if there were an escape hatch to opt out of NU1011 - like `<AllowFloatingCentralPackageVersions_IKnowWhatImDoing>true</AllowFloatingCentralPackageVersions_IKnowWhatImDoing>`, haha)\n\n### Desired Behavior\n\n`GlobalPackageReference`s should not be subjected to the NU1011 rule forbidding floating centrally defined versions\n\n### Additional Context\n\n_No response_"},{"Id":"26416566209","Type":"IssuesEvent","CreatedAt":"2023-01-13T16:25:41","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12362","RelatedDescription":"Opened issue \"Signing:  package signing should warn if signable content is unsigned\" (#12362) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nNuGet package signing only signs the package, not signable content within the package.  While it is currently possible to create a package with unsigned content (e.g.:  DLL's), NuGet should warn when this happens and recommend supply chain security best practices.\r\n\r\nCC @aortiz-msft, @clairernovotny\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"24695608920","Type":"IssuesEvent","CreatedAt":"2022-10-19T11:53:07","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Closed issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-01-17T03:30:24.9292762Z","RunDurationInMilliseconds":1458}