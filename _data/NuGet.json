{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32707208244","Type":"IssuesEvent","CreatedAt":"2023-10-19T23:40:53","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12953","RelatedDescription":"Opened issue \"Create NU Error Code for Package Source Mapping & GPF conflicts\" (#12953) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nIn https://github.com/NuGet/NuGet.Client/pull/5459#issuecomment-1770664856, the suggestion is to give actions for the customer to address their Global Packages Folder (GPF) conflicting with their solution's package source mapping configuration. \r\n\r\nThat is, the customer is installing a package, and the GPF contains a transitive dependency for that package which indicates a source that's not an enabled source for the solution.\r\n\r\nThe current behavior introduced in https://github.com/NuGet/NuGet.Client/pull/5459 is an error message shown in the error list that states the above. However, explicit advice isn't given.\n\n### Desired Behavior\n\nCreate a new NU Error Code that can be used as a hyperlink from the VS Error List to point to documentation with more information about resolving the issue.\n\n### Additional Context\n\n_No response_"},{"Id":"32707185507","Type":"IssuesEvent","CreatedAt":"2023-10-19T23:39:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11988","RelatedDescription":"Closed issue \"Apex tests should use timeout\" (#11988) at NuGet/Home","RelatedBody":"A recent build had this in the log, until the job timed out:\r\n\r\n> ##[warning]RunMessage : [xUnit.net 02:21:05.36] NuGet.Tests.Apex: [Long Running Test] 'NuGet.Tests.Apex.IVsServicesTestCase.SimpleInstallFromIVsInstaller', Elapsed: 02:15:06\r\n\r\nThe test should not be allowed to run for 2 hours."},{"Id":"32705891153","Type":"PullRequestEvent","CreatedAt":"2023-10-19T22:09:51","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/12870","RelatedDescription":"Closed pull request \"Spec: Improve NuGet Package Search functionality\" (#12870) at NuGet/Home","RelatedBody":"Spec for improving NugGet package search across nuget.exe and dotnet. \r\nIssue: https://github.com/NuGet/Client.Engineering/issues/1803\r\n\r\n[Rendered Spec](https://github.com/NuGet/Home/blob/fdf89db34cf2d710ba9c710f61cfcb48f90db729/proposed/2023/nuget-package-search.md)\r\n### Update\r\nThanks to all of you for your reviews! Based on your feedback, as @nkolev92 suggested, it's clear that splitting the specification into two or more distinct documents: one for transitioning from nuget.exe list to nuget search, and another for introducing dotnet package search will help me address your concerns more comprehensively. In the meantime, please feel free to make further reviews and suggestions. \r\n\r\nHere is the spec for dotnet package search : https://github.com/NuGet/Home/pull/12886 \r\n\r\n"},{"Id":"32694770507","Type":"IssuesEvent","CreatedAt":"2023-10-19T14:37:01","Actor":"Zaneo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12952","RelatedDescription":"Opened issue \"Symbols aren't getting pushed when using -SymbolSource symbolSourceUrl\" (#12952) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev branch\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. Build or aquire any valid with symbols `A.nupkg` and its corresponding `A.snupkg`\r\n2. Specify a SymbolSource\r\n3. run: `nuget push A.nupkg -Source <source> -ApiKey <apikey> -SymbolSource <symbolSource>`\r\n\r\nExpected Results:\r\n1. The `nupkg` is pushed to <source>\r\n2. The `snupkg` is pushed to pushed to <symbolSource>\r\n\r\nActual:\r\nThe `nupkg` is pushed to <source>\r\nThe `snupkg` is NOT pushed to <symbolSource>\r\n\r\n\r\nThis seems to be because if `symbolSource` is not null below, then there is no execution path that sets `symbolPackageUpdateResource`\r\nhttps://github.com/NuGet/NuGet.Client/blob/041c6da3fb92d28fa8bac2a0134e9396bfc1fda8/src/NuGet.Core/NuGet.Commands/CommandRunners/PushRunner.cs#L56-L81\r\n\r\nI believe `symbolPackageUpdateResource = await CommandRunnerUtility.GetSymbolPackageUpdateResource(sourceProvider, symbolSource);` should be added before https://github.com/NuGet/NuGet.Client/blob/041c6da3fb92d28fa8bac2a0134e9396bfc1fda8/src/NuGet.Core/NuGet.Commands/CommandRunners/PushRunner.cs#L74\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32686656849","Type":"IssuesEvent","CreatedAt":"2023-10-19T10:19:11","Actor":"Zaneo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12951","RelatedDescription":"Opened issue \"GetSymbolPackageUpdateResource creates a V2 PackageSource when searching for V3 resources\" (#12951) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\ndev branch\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Build or aquire any valid with symbols `A.nupkg` and its corresponding `A.snupkg`\r\n2. Specify a source which is not within a Nuget.Config\r\n3. run: `nuget push A.nupkg -Source <source> -ApiKey <apikey>\r\n\r\nExpected Results:\r\n1. The `nupkg` and `snupkg` are pushed\r\n2. Authentication is requested from the user\r\n3. An error is thrown stating that the resource could not be accessed without authentication\r\n\r\nActual:\r\n1. The `nupkg` is pushed\n\n### Verbose Logs\n\n_No response_"},{"Id":"32684353154","Type":"IssuesEvent","CreatedAt":"2023-10-19T09:02:38","Actor":"colejohnson66","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12942","RelatedDescription":"Closed issue \"Allow insecure HTTP connections to `10.0.0.0/8` IP addresses\" (#12942) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\ndotnet.exe\r\n\r\n### Current Behavior\r\n\r\nMy company is running a locally managed Gitea instance on our intranet, and is connected to through the (RFC 1918 reserved) `10.0.0.0/8` IP range. On Gitea, we use their built-in support for being a NuGet package repository. This all works great. However, every time the compiler decides to run a \"NuGet restore\" operation, we get an `NU1803` warning about using HTTP sources:\r\n\r\n> 2&gt;project.csproj: Warning NU1803 : You are running the 'restore' operation with an 'HTTP' source, 'http://10.0.0.31/{}/index.json'. Non-HTTPS access will be removed in a future version. Consider migrating to an 'HTTPS' source.\r\n\r\nI understand the reasoning for this: \"use HTTPS everywhere\", but this is not always feasible. And frankly, it's not even *necessary* for intranets, of which `10.0.0.0/8` is part of.\r\n\r\nUsing HTTPS with IP addresses is not well-supported, and many certificate providers won't issue one for you, except in certain circumstances. For example, LetsEncrypt flat out won't issue certificates for IP addresses. Some providers will give you one for publicly accessible IPs, but `10.0.0.0/8` is obviously not.\r\n\r\nTheoretically, we could use a fake subdomain on our real website (such as `git.{}.com`), and modify everyone's `hosts` file to route to our Gitea instance. This would *possibly* allow our wildcard certificate from the website to be used, but it's clunky as it requires work on *every computer*.\r\n\r\n### Desired Behavior\r\n\r\nAccesses to HTTP NuGet sources are allowed *with no warning*, but only for certain IP ranges. Namely, `10.0.0.0/8`.\r\n\r\n### Additional Context\r\n\r\n`192.168.0.0/16` could also be included as it's the \"loopback\" address, and, as such, will not even leave the current computer."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-20T03:30:20.2449584Z","RunDurationInMilliseconds":1124}