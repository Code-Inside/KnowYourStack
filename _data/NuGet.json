{"Data":{"Blog":{"FeedItems":[{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13595498956","Type":"PullRequestEvent","CreatedAt":"2020-09-22T03:17:14","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8215","RelatedDescription":"Opened pull request \"Fix for overflowing api key hint text on certain zoom levels.\" (#8215) at NuGet/NuGetGallery","RelatedBody":"Addresses #8190 \r\n\r\nIt seems that at some point, in order to align the bottoms of the package list and the API key hint container their respective heights were explicitly specified in CSS (see diff). At certain zoom levels (and browser window widths) the contents of the hint container gets longer than the container permits and overflows:\r\n![image](https://user-images.githubusercontent.com/102933/93840558-a76b6e00-fc45-11ea-9bca-1dc256a8f7ee.png)\r\n\r\nIn order to get rid of hardcoding container heights a bunch of flex containers were introduced, hint container was wrapped with an additional `<div class=\"form-group\">` in order to layout the contents in the same way as in the container on the left (i.e. to have the same margin-bottom), so bottom border end up on the same level.\r\nAt the same time, table inside the hint container was styled to not have a bottom margin to eliminate weird white space:\r\n![image](https://user-images.githubusercontent.com/102933/93840762-60ca4380-fc46-11ea-93b0-f01a5ab08a62.png)\r\n\r\nResulting in the following look (at various widths and zoom levels):\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93840999-1b5a4600-fc47-11ea-9506-24e198063a39.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93841035-375de780-fc47-11ea-887a-371c92aaf7a1.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93841076-59f00080-fc47-11ea-9bcc-be2d121a2ddb.png)\r\n"},{"Id":"13594432824","Type":"PullRequestEvent","CreatedAt":"2020-09-21T23:53:00","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8210","RelatedDescription":"Merged pull request \"make attribute id value unique\" (#8210) at NuGet/NuGetGallery","RelatedBody":"Remove additional call for @ViewHelpers.AjaxAntiForgeryToken(Html) in _AccountCertificates.cshtml to avoid duplicate attribute id value\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8189"},{"Id":"13593869090","Type":"PullRequestEvent","CreatedAt":"2020-09-21T22:25:39","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8214","RelatedDescription":"Opened pull request \"Add roslyn analyzer and fix security warning issue\" (#8214) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Add roslyn analyzer prototype \r\n* Fix security warning generated by analayzer\r\n\r\nWarning cannot avoided by complier: Please let me know if you know how to fix those warning: \r\nPS: Actually assembly version is generated in AssemblyInfo.g.cs. \r\n```\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\NuGetGallery.sln\" (default target) (1) ->\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\NuGetGallery\\NuGetGallery.csproj\" (default target) (2) ->\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\NuGetGallery.Services\\NuGetGallery.Services.csproj\" (default target) (3:12) ->\r\n       (CoreCompile target) ->\r\n         CSC : warning CA1016: Mark assemblies with assembly version [C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\NuGetGallery.Services\\NuGetGallery.Services.csproj]\r\n\r\n\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\NuGetGallery.sln\" (default target) (1) ->\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\GitHubVulnerabilities2Db\\GitHubVulnerabilities2Db.csproj\" (default target) (17:2) ->\r\n         CSC : warning CA1016: Mark assemblies with assembly version [C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\GitHubVulnerabilities2Db\\GitHubVulnerabilities2Db.csproj]\r\n\r\n\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\NuGetGallery.sln\" (default target) (1) ->\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\tests\\GitHubVulnerabilities2Db.Facts\\GitHubVulnerabilities2Db.Facts.csproj\" (default target) (18) ->\r\n         CSC : warning CA1016: Mark assemblies with assembly version [C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\tests\\GitHubVulnerabilities2Db.Facts\\GitHubVulnerabilities2Db.Facts.csproj]\r\n\r\n\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\NuGetGallery.sln\" (default target) (1) ->\r\n       \"C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\DatabaseMigrationTools\\DatabaseMigrationTools.csproj\" (default target) (5) ->\r\n         CSC : warning CA1016: Mark assemblies with assembly version [C:\\Users\\lind\\code\\nuget2\\NuGetGallery\\src\\DatabaseMigrationTools\\DatabaseMigrationTools.csproj]\r\n\r\n```\r\nAddresses https://github.com/NuGet/Engineering/issues/3251"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13594644102","Type":"IssuesEvent","CreatedAt":"2020-09-22T00:31:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10059","RelatedDescription":"Opened issue \"Consolodate dotnet nuget cli code to NuGet.CommandLine.XPlat\" (#10059) at NuGet/Home","RelatedBody":"## Background\r\n\r\nNuGet is integrated in the `dotnet` CLI. This integration is achieved by NuGet owning `NuGet.CommandLine.XPlat.dll`, which is in the NuGet/NuGet.Client repo. The dotnet CLI repo (now in dotnet/sdk) calls into NuGet's dll, as it ships in the SDK. When certain commands in the `dotnet` cli are run, the `dotnet` cli executes `NuGet.CommandLine.XPlat` with the relevant arguments. Note, the `dotnet` cli starts `NuGet.CommandLine.XPlat` as a new process, it is not a library with APIs being called.\r\n\r\nHowever, the dotnet cli contains a duplicate of `NuGet.CommandLine.XPlat`'s command line parsing definitions. I'm not 100% sure, but I think the only reason is to provide tab-completion support. It appears that using arguments not defined in the dotnet cli does not result in an error, and `NuGet.CommandLine.XPlat` is executed, where it will parse the arguments and error if required.\r\n\r\nToday, commands that are already in `NuGet.CommandLine.XPlat`, but are not in `dotnet`'s command parser, include:\r\n* the `sources` commands (add, disable, enable, remove, update)\r\n* the `client-cert` commands\r\n\r\nWork in progress, or coming soon include:\r\n* `dotnet nuget verify`\r\n* `dotnet nuget sign`\r\n\r\nWork that probably will happen:\r\n* a replacement for `nuget.exe config`\r\n* a replacement for `nuget.exe search`.\r\n\r\nAs we can see, there are already two cases of commands that were added to `NuGet.CommandLine.XPlat`, but not added to the `dotnet` cli, and there is upcoming work where this duplicated argument definitions need to be implemented, or the dotnet cli experience will be inconsistent.\r\n\r\n## Goals\r\n\r\n* Add missing commands/arguments to the `dotnet nuget` tab-completion customer experience.\r\n* Reduce technical debt by having less duplicated code\r\n* Reduce risk of new `dotnet nuget` commands/arguments not being available for tab-completion\r\n\r\n## Non-goals\r\n\r\n* NuGet will not be shipped as a dotnet global tool that can be installed/upgraded separately from the .NET SDK.\r\n* Any kind of tab-completion that is not supported today. We're looking for feature parity with what's currently possible in the dotnet cli, not tab completion for `dotnet nuget disable source nug<tab>` to get `nuget.org` (assuming that's the name of the source in nuget.config).\r\n\r\n## Solution\r\n\r\nWe already have a task https://github.com/NuGet/Home/issues/10039 related to changing to a different command line parsing library, in order to be source-build compliant.  I know that `System.CommandLine` supports tab-completion out of the box, or with minimal effort. It's mostly a question of how to integrate it with the dotnet cli, since we're not a real dotnet tool (installed via `dotnet tool`). Another issue with `System.CommandLine` is that it doesn't have a stable version. I know less about the other library that was proposed in the issue, but I think it might be what the dotnet cli itself uses. If that's true, then it must support tab completion as well.\r\n\r\nTherefore, we do not need to implement tab-completion ourselves (but it would be amazing if I could tab complete `dotnet nuget disable source nug<tab>`). Instead, we need to:\r\n* Migrate to a different command line parsing library that supports tab completion\r\n* Change the dotnet cli to forward tab completion requests to NuGet.CommandLine.XPlat\r\n\r\n## Future Work\r\n\r\nNone we will commit to, although intelligent, context-sensitive tab completion, for example `dotnet nuget disable source nug<tab>` would be great. Similar to how `git checkout <tab>` knows what branch names exist.\r\n\r\n# Open Questions\r\n\r\nIf this effort worthwhile? It's not a lot of effort to create a PR on the dotnet cli to add new commands and arguments to the command line parser. It's just a question of remembering that it needs to be done and scheduling time to do it.\r\n\r\n## Considerations\r\n\r\nnone"},{"Id":"13593170704","Type":"IssuesEvent","CreatedAt":"2020-09-21T21:02:35","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2762","RelatedDescription":"Closed issue \"NuGet on Gitter?\" (#2762) at NuGet/Home","RelatedBody":"It would be really useful to have a place where other maintainers of packages could gather and seek advice on how to package stuff up and share knowledge with other package maintainers, etc. Similar to the corefx/coreclr channels on gitter.\n"},{"Id":"13592746850","Type":"IssuesEvent","CreatedAt":"2020-09-21T20:19:44","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10028","RelatedDescription":"Closed issue \"nuget verify -All and -Signatures option has no differences in implementation\" (#10028) at NuGet/Home","RelatedBody":"As per [doc](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify#nuget-verify--all), nuget.exe has two switches, `-All` to perform all the possible verifications on the package(s) and `-Signatures` option to verify signatures based on values passed for `-CertificateFingerprint` option. However, looking at the [implementation](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/VerifyCommand/VerifyCommandRunner.cs#L38), there is no difference in the behavior and by default all the possible verifications on the package are performed."},{"Id":"13592260412","Type":"IssuesEvent","CreatedAt":"2020-09-21T19:30:16","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10055","RelatedDescription":"Closed issue \"VS OE:  should not use object data type for project metadata values \" (#10055) at NuGet/Home","RelatedBody":"Calling either [`INuGetProjectManagerService.GetMetadataAsync(...)` or `INuGetProjectManagerService.TryGetMetadataAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/INuGetProjectManagerService.cs#L25-L26) with `NuGetProjectMetadataKeys.TargetFramework` over a remote connection will serialize a `NuGetFramework` instance correctly but will not deserialize on the client as expected.\r\n\r\nWhen the original data type is a built-in primitive (like `string` with `NuGetProjectMetadataKeys.Name`), the explicit casts [here](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/ProjectContextInfo.cs#L70) and [here](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/ProjectContextInfo.cs#L81) are successful. \r\n\r\nHowever, when the original data type is `NuGetFramework`, these casts result in an `InvalidCastException`.  Since the deserializer's only hint as to the expected type is `object` (from the interface method signatures), the deserializer deserializes the `NuGetFramework` as a dictionary of key-value pairs.  `NuGetFrameworkFormatter.Deserialize(...)` is never called.\r\n\r\nPresumably, `NuGetProjectMetadataKeys.SupportedFrameworks` has a similar problem."},{"Id":"13591331201","Type":"IssuesEvent","CreatedAt":"2020-09-21T17:58:59","Actor":"mrahl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10058","RelatedDescription":"Opened issue \"Feature request - Incompatible packages / anti-dependencies\" (#10058) at NuGet/Home","RelatedBody":"As a package author, I would like the possibility to declare the opposite of a dependency, a package that my package is not compatible with.\r\n\r\nMy scenario is I maintain a package with a large installed base, let's call this package Core. I then create experimental features and release them in separate packages depending on Core (usually they're some extension to functionality in Core), call them Experimental1, Experimental2...\r\n\r\nSome package, say Experimental2, proves to be very popular and working well. But many of my users don't get the new feature because they just update Core. So I decide to move the feature from Experimental2 to Core. To try to avoid duplication in the feature I can then release an \"empty\" version of Experimental2 and update its dependency to a version of Core that contains the feature instead.\r\n\r\nBUT what I cannot do is to prevent someone from using an older version of Experimental2 with a newer version of Core, leaving them with a potentially broken installation.. IF I could declare the new version of Core as incompatible with Experimental2, this wouldn't happen.\r\n\r\nCore having a inverse version requirement on Experimental2 would be another way (e.g. Core 2.0 would declare that Experimental2 has to be at least of version 2.0 (the emptied package) if it should be allowed to be used)."},{"Id":"13590834205","Type":"IssuesEvent","CreatedAt":"2020-09-21T17:12:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6384","RelatedDescription":"Closed issue \"Suppress restore messages for noop restore in VS\" (#6384) at NuGet/Home","RelatedBody":"When a noop restore occurs in VS it currently writes out several messages to the status bar. This causes extra noise and makes it appear as though work is happening. VS should instead suppress these messages unless a real restore is happening.\r\n\r\nExample scenarios where noop restores happen often:\r\n1. Changing between Debug -> Release\r\n1. Running tests with test explorer"},{"Id":"13589996225","Type":"IssuesEvent","CreatedAt":"2020-09-21T15:58:42","Actor":"pranavkm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10057","RelatedDescription":"Opened issue \"Error Microsoft.AspnetCore.Mvc.Api.Analyzers \" (#10057) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/aspnetcore#26130**\r\n- Please respond to @shpsyte.\r\n\r\n---\r\n\r\n_From @shpsyte on Monday, September 21, 2020 3:10:54 PM_\r\n\r\n### Describe the bug\r\nI've installed the Microsoft.AspnetCore.Mvc.Api.Analyzers and when I try to restore I get these errors:\r\n\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nThe SSL connection could not be established, see inner exception\r\nThe remote certificate is invalid according to the validation procedure\r\n\r\n\r\n### To Reproduce\r\nInsall the package Microsoft.AspnetCore.Mvc.Api.Analyzers using this command:\r\ndotnet add package Microsoft.AspnetCore.Mvc.Api.Analyzers\r\n\r\ntry restore\r\ndotnet restore\r\n\r\n\r\n### Exceptions (if any)\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nThe SSL connection could not be established, see inner exception\r\nThe remote certificate is invalid according to the validation procedure\r\n\r\n\r\n\r\n\r\n### Further technical details\r\n**OpenSSL 1.1.1g  21 Apr 2020**\r\n\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.402\r\n Commit:    9b5de826fd\r\n\r\nRuntime Environment:\r\n OS Name:     linuxmint\r\n OS Version:  20\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.402/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.8\r\n  Commit:  9c1330dedd\r\n\r\n.NET Core SDKs installed:\r\n  2.1.810 [/usr/share/dotnet/sdk]\r\n  2.2.402 [/usr/share/dotnet/sdk]\r\n  3.1.402 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.22 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.22 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.22 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n"},{"Id":"13585134867","Type":"IssuesEvent","CreatedAt":"2020-09-21T09:01:58","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10056","RelatedDescription":"Opened issue \"The first project’s “packages.lock.json” file does not be updated after updating the package in PM UI with multiple projects\" (#10056) at NuGet/Home","RelatedBody":"## Details about Problem\r\nVS Version: Main\\30516.212\r\nOS Version: Windows-10-Enterprise-RS5.\r\n## Installion\r\nInstall VS: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4072862&view=ms.vss-build-web.run-extensions-tab\r\n\r\n## Detailed repro steps \r\n1. Create a multiple C# Class Library (.NET Framework) projects.\r\n2. Set MSBuild property “RestorePackagesWithLockFile” to true in csproj file.\r\n   `<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>`\r\n3. Install a few ‘PackageReference’ packages into the projects.\r\n4. Check it should have generated ‘packages.lock.json’ file alongside *.csproj file.\r\n5. Update the package and check the ‘packages.lock.json’ file should be updated too.\r\n\r\n## Expected\r\nThe ‘packages.lock.json’ file should be updated.\r\n\r\n## Actual\r\nThe first project’s ‘packages.lock.json’ file does not be updated after updating the package as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/93748615-20a99780-fc2b-11ea-9efd-0ab2b942e734.png)\r\n"},{"Id":"13583303620","Type":"IssuesEvent","CreatedAt":"2020-09-21T05:37:54","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10055","RelatedDescription":"Opened issue \"VS OE:  should not use object data type for metadata values \" (#10055) at NuGet/Home","RelatedBody":"Calling either [`INuGetProjectManagerService.GetMetadataAsync(...)` or `INuGetProjectManagerService.TryGetMetadataAsync(...)`](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/INuGetProjectManagerService.cs#L25-L26) with `NuGetProjectMetadataKeys.TargetFramework` over a remote connection will serialize a `NuGetFramework` instance correctly but will not deserialize on the client as expected.\r\n\r\nWhen the original data type is a built-in primitive (like `string` with `NuGetProjectMetadataKeys.Name`), the explicit casts [here](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/ProjectContextInfo.cs#L70) and [here](https://github.com/NuGet/NuGet.Client/blob/6aeb27caae503ac56549812995338d25c9e7faf2/src/NuGet.Clients/NuGet.VisualStudio.Internal.Contracts/ProjectContextInfo.cs#L81) are successful. \r\n\r\nHowever, when the original data type is `NuGetFramework`, these casts result in an `InvalidCastException`.  Since the deserializer's only hint as to the expected type is `object` (from the interface method signatures), the deserializer deserializes the `NuGetFramework` as a dictionary of key-value pairs.  `NuGetFrameworkFormatter.Deserialize(...)` is never called.\r\n\r\nPresumably, `NuGetProjectMetadataKeys.SupportedFrameworks` has a similar problem."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":23,"FavoriteCount":15,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-09-22T05:30:38.3411373Z","RunDurationInMilliseconds":1467}