{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14007458333","Type":"PullRequestEvent","CreatedAt":"2020-10-28T21:36:50","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8299","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.10.27]NuGetGallery of dev into master\" (#8299) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"14003734181","Type":"PullRequestEvent","CreatedAt":"2020-10-28T16:13:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8297","RelatedDescription":"Merged pull request \"Add OData error code for deprecate response messages\" (#8297) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/8296\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/94054/97365955-be643800-1863-11eb-9801-4ab2510f232b.png)"},{"Id":"14003336410","Type":"PullRequestEvent","CreatedAt":"2020-10-28T15:46:53","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8274","RelatedDescription":"Merged pull request \"Enabling word wrapping for tags in all layouts\" (#8274) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8186\r\n\r\nCurrently, unless we are in \"smartphone\" layout tags, package details (download count, last updated, latest version, tags) are forced into single line, which can lead to tags not showing at all (if the latest version is very long) or tag list cut at different places depending on zoom and window size.\r\n\r\nThe code changes the behavior to always showing the first 10 tags wrapping on the second (and third) lines if needed, making the amount of displayed content constant. \"More tags\" link is shown when there are more than 10 tags. The link points to a package details page. Dividers that we have between items were removed as they don't look good when items are wrapped onto the next line.\r\n\r\nScreenshots:\r\n\r\n![image](https://user-images.githubusercontent.com/102933/97375417-fe351a80-1877-11eb-8d5a-85444acf4b42.png)\r\n![image](https://user-images.githubusercontent.com/102933/97375493-2d4b8c00-1878-11eb-8488-43898b3974cc.png)\r\n"},{"Id":"13993996397","Type":"PullRequestEvent","CreatedAt":"2020-10-27T23:34:32","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8300","RelatedDescription":"Opened pull request \"[A11y][WCAG2.1]Shrink narrow width by a small amount\" (#8300) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8282\r\nNarrowing the width at minimum width by a small amount keeps the horizontal scrollbar from appearing."},{"Id":"13993630996","Type":"PullRequestEvent","CreatedAt":"2020-10-27T22:46:38","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8299","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.10.27]NuGetGallery of dev into master\" (#8299) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13993598382","Type":"PullRequestEvent","CreatedAt":"2020-10-27T22:43:09","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8298","RelatedDescription":"Merged pull request \"Remove survey banner\" (#8298) at NuGet/NuGetGallery","RelatedBody":"Remove code related to survey banner since we want to end survey banner this week \r\n\r\nWe also made change to css that have underline for link when we added survey banner. I decided to not remove that because style is useful other banners.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8225"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14008833066","Type":"IssuesEvent","CreatedAt":"2020-10-29T00:43:42","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9200","RelatedDescription":"Closed issue \"Restore:  improve performance by parallelizing population of solution dependency graph spec\" (#9200) at NuGet/Home","RelatedBody":"Restore and no-op restore performance can be improved by parallelizing population of the solution dependency graph spec.\r\n\r\nCurrently, [projects are added sequentially to the solution dependency graph spec](https://github.com/NuGet/NuGet.Client/blob/f67a6083f8a49502f52f0c50492db03452785359/src/NuGet.Core/NuGet.PackageManagement/BuildIntegration/DependencyGraphRestoreUtility.cs#L220-L276).\r\n\r\nhttps://github.com/NuGet/Home/issues/9002 is a prerequisite for this.\r\n\r\nThe [DependencyGraphSpec ](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/DependencyGraphSpec.cs#L241) object uses a standard collection object as a backing collection. \r\nThere are no native framework concurrent SortedSet nor concurrent SortedDictionary, I just decided use ConcurrentDictionary for both of them. Then we sort it before consume it.\r\nAlso using ConcurrentDictionary in place of SortedSet may be extra space overhead since we only care about dictionary key not values. Please note ConcurrentBag not suitable for this because it doesn't check for duplicate item and checking it costs O(n) time complexity.\r\nOverall I don't believe replacing SortedSet by ConcurrentDictionary degrade performance, because it's pure C# code usually doesn't tax heavy for small/medium size sets, it would matter unless there are hundreds thousands of items.\r\nHere insert time O(logN) for SortedSet but much cheaper O(1) for Dictionary which is advantage.\r\nBut when iterate through values then O(n) for SortedSet but expensive O(n* logN) for Dictionary before consumption can be slight disadvantage.\r\n\r\nSo far I don't see much improvement after this my improvement is just 0-10% and which can be overshadowed by other factors like network/CPU/RAM load at the time. \r\nBefore my change: [Log1](https://gist.github.com/erdembayar/6af1ce9bd8a52d2c2210bacca3c68392) 34.47sec, [Log2](https://gist.github.com/erdembayar/23d1994a10c5f1ec4564bbc93db4cad6) 31.85sec.\r\n\r\nAfter my change: [Log1](https://gist.github.com/erdembayar/28f111eac86455ee86f0772e993c9ba0) 30.84 sec."},{"Id":"14008757326","Type":"IssuesEvent","CreatedAt":"2020-10-29T00:31:15","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10197","RelatedDescription":"Opened issue \"Improve getpackagespecs performance for Legacy package reference projects\" (#10197) at NuGet/Home","RelatedBody":"This is continuation of [Issue#9200](https://github.com/NuGet/Home/issues/9200)  which improve population of dependency graph spec.\nFor netcore projects it was already just few milliseconds already and not much improvement room, actually adding locks for sake of concurrency safety was detrimental.\nBut for Legacy package reference projects it was several hundreds milliseconds range which need more improvement.\nWe did try parallelize ([PR3605](https://github.com/NuGet/NuGet.Client/pull/3605)) for legacy type project but it didn't yield any consistent improvement, therefore abandoning that effort. Main bottleneck was `getpackagespecs`  method and we need to make more measurements on that and try to find improvement there.\n"},{"Id":"14008719825","Type":"PullRequestEvent","CreatedAt":"2020-10-29T00:25:20","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/9182","RelatedDescription":"Closed pull request \"Add spec for CPVM updates in VS\" (#9182) at NuGet/Home","RelatedBody":"Fixes: https://github.com/NuGet/Home/pull/9182"},{"Id":"14008458006","Type":"IssuesEvent","CreatedAt":"2020-10-28T23:44:35","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10196","RelatedDescription":"Opened issue \"UpdateDetailPaneAsync should do work on background thread\" (#10196) at NuGet/Home","RelatedBody":"[PackageManagerControl.UpdateDetailPaneAsync()](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.PackageManagement.UI/Xamls/PackageManagerControl.xaml.cs#L1052) is doing a lot of work on the Main thread.\r\n\r\nThis is causing perceivable slowness when operating the PMUI. For example, clicking Refresh triggers this event multiple times. \r\n(Further refactoring could be done to minimize how often it's called, but certainly it should do the intensive work in the background).\r\n\r\nThe most expensive call is probably `await _detailModel.LoadPackageMetadataAsync`"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-10-29T05:30:41.3714353Z","RunDurationInMilliseconds":1796}