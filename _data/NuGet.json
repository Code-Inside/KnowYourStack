{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42236760760","Type":"PullRequestEvent","CreatedAt":"2024-09-24T23:29:37","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10190","RelatedDescription":"Merged pull request \"Targeting netstandard 2.1 for more projects\" (#10190) at NuGet/NuGetGallery","RelatedBody":"Internal projects targeting .net depend on those packages and produce build warnings because of unsupported targets. Nothing really prevents those from targeting netstandard 2.1 (not netstandard2.0 because of [EF](https://www.nuget.org/packages/EntityFramework#supportedframeworks-body-tab)).\r\n\r\nHad to apply a fix to Validation DB's `EntitiesConfiguration` similar to what we have for Gallery DB:\r\nhttps://github.com/NuGet/NuGetGallery/blob/febd3fb35bbf25b4a4d40f56859693e0bbf5d6f0/src/NuGetGallery.Core/Entities/EntitiesConfiguration.cs#L7-L43\r\n\r\nFunctionally, there are no changes for projects consuming those that target net472 and projects targeting .net can actually now use those."},{"Id":"42228404047","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:48:33","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10181","RelatedDescription":"Closed issue \"[Feature]: WebHooks \" (#10181) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### The Elevator Pitch\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### Additional Context and Details\n\nExample JSON:\r\n\r\n```\r\n{\r\n    \"package\": {\r\n        \"name\": \"MyNuget\",\r\n        \"version\": \"1.0.0\",\r\n        \"status\": \"published\",\r\n        \"time\": \"2024-09-11T13:23:15.000Z\"\r\n     }\r\n}\r\n```"},{"Id":"42228306668","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:45:16","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10182","RelatedDescription":"Closed issue \"Referencing packed images in readmes\" (#10182) at NuGet/NuGetGallery","RelatedBody":"while packed package icon and readme is readable by nuget, I am wondering why not images as well.\r\n\r\nUse cases: referencing images in readmes\r\n\r\nIf I can understand properly, referencing packed image doesn't seem to be from a trusted source/domain."},{"Id":"42197484212","Type":"PullRequestEvent","CreatedAt":"2024-09-24T00:28:42","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10188","RelatedDescription":"Merged pull request \"NuGet Job, don't rethrow exceptions if blob is not found\" (#10188) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/5628\r\nContext is [here on teams](https://teams.microsoft.com/l/message/19:d10cd9192de2492986fba3baeea3093c@thread.skype/1726693433772?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=ad34ac55-6785-4e7c-82c3-7ba405d30c3c&parentMessageId=1726693433772&teamName=NuGet&channelName=Server&createdTime=1726693433772).\r\nDeployment: [1550336](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1550336)\r\n\r\nPreviously there was many exceptions for NuGet.Jobs `Catalog2Icon`, after deployment it's no more.\r\n**Before:** ![image](https://github.com/user-attachments/assets/06871a7a-0c43-44af-a174-cda2d77a28d0)\r\n\r\n**After:** \r\n![image](https://github.com/user-attachments/assets/0ba7527b-2d74-4860-9910-3b112a8cca96)\r\n\r\n"},{"Id":"42191190709","Type":"PullRequestEvent","CreatedAt":"2024-09-23T19:42:02","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10191","RelatedDescription":"Merged pull request \"Create README.md for NuGet.Services.Sql\" (#10191) at NuGet/NuGetGallery","RelatedBody":"Ran into an issue using the library in app service, added workaround information."},{"Id":"42159317287","Type":"PullRequestEvent","CreatedAt":"2024-09-23T00:59:39","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10191","RelatedDescription":"Opened pull request \"Create README.md for NuGet.Services.Sql\" (#10191) at NuGet/NuGetGallery","RelatedBody":"Ran into an issue using the library in app service, added workaround information."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42237576580","Type":"IssuesEvent","CreatedAt":"2024-09-25T00:22:21","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7797","RelatedDescription":"Closed issue \"Type showed the project language instead of the project type when executing command “Get-Project” in PMC\" (#7797) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.0.0.5831\r\nBuild Tools VS Version: D16.0\\28613.55\r\nOS: Windows 10 RS4_Release 17134.1.180410-1804\r\n## Detailed repro steps \r\n1. Create a project [e.g. ASP.NET Web Application (.NET Framework)/C++ UWP/Console App (.NET Framework)] in VS.\r\n2. Open PMC and execute command “Get-Project” in PMC.\r\n## Expected\r\nThe project type showed correctly as below screenshot (e.g. ASP.NET Empty Web Site).\r\n![correcttype](https://user-images.githubusercontent.com/20632625/52775318-57e0bb80-307a-11e9-8e99-bcc8f8025a41.png)\r\n\r\n## Actual\r\nThe project type showed “unknown” as below screenshot.\r\n![wrongtype](https://user-images.githubusercontent.com/20632625/52775322-5ca56f80-307a-11e9-9203-36b6ea8279bf.png)\r\n\r\n## Note\r\n1. It doesn't repro for .NET Core projects/ASP.NET Web Site projects.\r\n2. It repro on D16.0\\28613.55 (default NuGet Client 5.0.0.5821).\r\n3. It repro on D15.8\\27924.00 (default NuGet Client 4.8.0.5348).\r\n\r\n"},{"Id":"42233019205","Type":"IssuesEvent","CreatedAt":"2024-09-24T20:28:05","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13805","RelatedDescription":"Opened issue \"[Transitive's in Solution PM UI] Improve localization and narrator\" (#13805) at NuGet/Home","RelatedBody":""},{"Id":"42229119738","Type":"IssuesEvent","CreatedAt":"2024-09-24T18:12:15","Actor":"kzu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13804","RelatedDescription":"Opened issue \"NRE retrieving package metadata from nuget.org feed\" (#13804) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n6.11.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n```csharp\r\n#r \"nuget: NuGet.Protocol, 6.11.0\"\r\n\r\nusing NuGet.Configuration;\r\nusing NuGet.Protocol.Core.Types;\r\n\r\nvar repository = new SourceRepository(new PackageSource(\"https://api.nuget.org/v3/index.json\"), Repository.Provider.GetCoreV3());\r\nvar resource = await repository.GetResourceAsync<PackageMetadataResource>();\r\n\r\nvar metadata = await resource.GetMetadataAsync(\"Uno.WinUI.Runtime.Skia.Wpf\", false, false, \r\n    new SourceCacheContext(), NuGet.Common.NullLogger.Instance, CancellationToken.None);\r\n```\r\n\r\nThrows as follows:\r\n\r\n```\r\n   at NuGet.Protocol.PackageMetadataResourceV3.ProcessRegistrationPage(RegistrationPage registrationPage, List`1 results, VersionRange range, Boolean includePrerelease, Boolean includeUnlisted, MetadataReferenceCache metadataCache)\r\n   at NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(String packageId, Boolean includePrerelease, Boolean includeUnlisted, VersionRange range, SourceCacheContext sourceCacheContext, ILogger log, CancellationToken token)\r\n   at NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(String packageId, Boolean includePrerelease, Boolean includeUnlisted, SourceCacheContext sourceCacheContext, ILogger log, CancellationToken token)\r\n   at Program.<Main>$(String[] args) in C:\\Users\\dev\\AppData\\Local\\Temp\\roslynpad\\build\\f6b45e491fed44ce87ff7a925cf3aa27\\Program.cs:line 9\r\n   at Program.<Main>(String[] args)\r\n```\r\n\r\nNOTE: this fails regardless of where the code runs: unit test, console app, etc. I just used RoslynPad to verify outside of my scenario.\n\n### Verbose Logs\n\n_No response_"},{"Id":"42225113853","Type":"IssuesEvent","CreatedAt":"2024-09-24T16:03:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13777","RelatedDescription":"Closed issue \"NuGet Restore is inconsistent about raising NU1201\" (#13777) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nMSBuild.exe\r\n\r\n### Product Version\r\n\r\nMSBuild 17.10.4.21802\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nJustification: I'm attempting to build a package that depends on several different tools packages.  These tools packages are built in the same repo and produce a package that is target framework independent.  They are *not* dotnet tools.\r\n\r\nFor simplicity, I have the following projects:\r\n\r\nParent.csproj:\r\n```<Project Sdk=\"Microsoft.Build.NoTargets\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <PackageId>Parent.Package</PackageId>\r\n    <NoWarn>NU5128</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Child1\\Child1.csproj\" ReferenceOutputAssembly=\"true\" />\r\n    <ProjectReference Include=\"..\\Child2\\Child2.csproj\" ReferenceOutputAssembly=\"true\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nBoth Child.csproj projects look like the following:\r\n\r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n    <AssemblyName>Child1</AssemblyName>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <NoWarn>NU5128</NoWarn>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <None Include=\"$(OutputPath)\\$(AssemblyName).exe\" PackagePath=\"tools\" Pack=\"true\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nEXCEPT Child2.csproj targets net6.0 instead of net472.\r\n\r\nThe net6.0 target framework causes the following error: `error NU1201: Project Child2 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project Child2 supports: net6.0 (.NETCoreApp,Version=v6.0)`.  If I remove the dependency to Child2, I get a package with the dependency to Child1 in the netstandard2.0 target framework, as expected.\r\n\r\nThis is confusing to me.  Netstandard2.0 is not compatible with BOTH net6.0 and net472.  However, only net6.0 throws the error?\r\n\r\nMy real goal is to add the project references as a dependency to the NuGet, ignoring the target framework being used to build the tools DLL.  Is this possible?\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42224629273","Type":"IssuesEvent","CreatedAt":"2024-09-24T15:50:00","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13787","RelatedDescription":"Closed issue \"Clash between development and production config files\" (#13787) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/12824\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **lonix1** August 18, 2023</sup>\r\nOriginally posted on [StackOverflow](https://stackoverflow.com/q/76928790/9971404) without success. Any help would be appreciated.\r\n\r\n---\r\n\r\nMy .net project is built locally by me during development, and remotely by my ci/cd server.\r\n\r\nThe project has **project-level config** in `myproject/nuget.config`. It is used by my ci/cd server, which provides some environment variables:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n    <add key=\"custom\" value=\"https://example.com/api/nuget/index.json\" />\r\n  </packageSources>\r\n\r\n  <packageSourceCredentials>\r\n    <custom>\r\n      <!-- env vars provided by pipeline -->\r\n      <add key=\"Username\" value=\"%USERNAME%\" />\r\n      <add key=\"ClearTextPassword\" value=\"%API_KEY%\" />\r\n    </custom>\r\n  </packageSourceCredentials>\r\n\r\n  <packageSourceMapping>\r\n    <!-- get other packages from nuget server -->\r\n    <packageSource key=\"nuget.org\">\r\n      <package pattern=\"*\" />\r\n    </packageSource>\r\n    <!-- get own packages from private server -->\r\n    <packageSource key=\"custom\">\r\n      <package pattern=\"MyOrg.*\" />\r\n    </packageSource>\r\n  </packageSourceMapping>\r\n\r\n</configuration>\r\n```\r\n\r\nMy local machine has **user-level config** in `~/.nuget/Nuget/Nuget.Config`, which is the same, except for different credentials:\r\n```xml\r\n  <packageSourceCredentials>\r\n    <custom>\r\n      <add key=\"Username\" value=\"my_username\" />\r\n      <add key=\"ClearTextPassword\" value=\"my_personal_api_key\" />\r\n    </custom>\r\n  </packageSourceCredentials>\r\n```\r\n\r\nThat works in the ci/cd server, i.e. in production.\r\n\r\nBut locally (i.e. in development), I get 401/Unauthorized errors when running `dotnet restore` (etc.) - because *the project-level config (which requires extra env vars) overwrites the user-level config*. (I have many other repos with the same issue, so I don't want to export env vars or add stuff to my .bashrc: it's messy, I don't want to do that.)\r\n\r\nThis seems to be the opposite to how it's typically done, where there is some \"default\" checked into source control, and it can be customised during development (with overriding config files) and production (with config files or env vars).\r\n\r\nHow do I do this?</div>"},{"Id":"42223847518","Type":"IssuesEvent","CreatedAt":"2024-09-24T15:28:38","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13801","RelatedDescription":"Closed issue \"\"Value cannot be null; Parameter name: source\" displays in error list when clicking installed tab in PM UI\" (#13801) at NuGet/Home","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2244584"},{"Id":"42222937403","Type":"IssuesEvent","CreatedAt":"2024-09-24T15:05:14","Actor":"keldaaas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13793","RelatedDescription":"Closed issue \"Updating multiple packages (with CPM and transitive pinning) should verify the referenced versions afterwards\" (#13793) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Current Behavior\r\n\r\nWith CPM and transitive pinning enabled:\r\n\r\nSolution S contains a console app and a test project. \r\nThe console app references package A.\r\nThe test project references package B.\r\n**Package B has a dependency on package A.**\r\n\r\n_ConsoleApp -> Package A\r\nTestProject -> Package B -> Package A_\r\n\r\n\r\nWhenever one tries to update both packages at the same time with the Package Manager UI there is an error [NU1109](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1109). I suppose this happens because the check for package B's dependencies doesn't take into account that package A will be updated as well. Instead it stops this process to avoid referencing different versions of package A.\r\nAt the moment the only solution is to update package A first and package B afterwards. This makes the CPM really annoying to use in solutions with a lot of dependencies.\r\n\r\n### Desired Behavior\r\n\r\nEither take into account that a referenced transitive dependency gets updated \"at the same time\" or check for different versions after the updates were executed.\r\n\r\n### Additional Context\r\n\r\ndotnet outdated updates the packages as expected."},{"Id":"42200841393","Type":"IssuesEvent","CreatedAt":"2024-09-24T03:51:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13802","RelatedDescription":"Opened issue \"Document how to validate if restore ran audit on all projects\" (#13802) at NuGet/Home","RelatedBody":"Update learn.microsoft.com docs with how to use the implementation of this feature request:\r\n* https://github.com/NuGet/Home/issues/13778\r\n"},{"Id":"42196985225","Type":"IssuesEvent","CreatedAt":"2024-09-23T23:58:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13794","RelatedDescription":"Closed issue \"Dotnet restore is unable to find runtime.*.Sytem packages after updating the SDK from 8.0.401 to 9.0.100-rc.1.24452.12 when using lock files\" (#13794) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-rc.1.24452.12\n\n### Worked before?\n\n.NET SDK 8.0.401\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWe have multiple csproj files in our org that include various runtime.*.System packages as transitive dependencies, which do get resolved in packages.lock.json, similar to the following:\r\n\r\n```\r\n      \"runtime.win.System.Diagnostics.Debug\": {\r\n        \"type\": \"Transitive\",\r\n        \"resolved\": \"4.3.0\",\r\n        \"contentHash\": \"hHHP0WCStene2jjeYcuDkETozUYF/3sHVRHAEOgS3L15hlip24ssqCTnJC28Z03Wpo078oMcJd0H4egD2aJI8g==\"\r\n      },\r\n```\r\n\r\nWhen running the following after updating the SDK version:\r\n\r\n`dotnet.exe restore --use-lock-file --no-dependencies /p:ImportProjectExtensionProps=false /p:ImportProjectExtensionTargets=false /p:PublishReadyToRun=true /p:CommandlinePlatform=x64 /nodeReuse:false /maxcpucount:1 --lock-file-path \"packages.lock.json\"`\r\n\r\nIt then fails with messages similar to the following (repeated for multiple runtime.*.System.* packages):\r\n\r\n`error NU1101: Unable to find package runtime.win.System.Diagnostics.Debug. No packages exist with this id in source(s)`\r\n\r\nThe package in question exists directly on the feed being used (and is even already in the local cache due to the earlier restore call when using 8.0.401). \r\n\r\nIf I delete the content of the lock file and re-run, restore succeeds and re-creates the exact same content. Attempting to rebuild again after that fails for restore again in the same way.  \r\n\r\nThe specific MSBuild version being used is 17.12.0-preview-24422-09+d17ec720d.  \n\n### Verbose Logs\n\n_No response_"},{"Id":"42196745054","Type":"IssuesEvent","CreatedAt":"2024-09-23T23:43:37","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6854","RelatedDescription":"Closed issue \"PM UI will be closed automatically when clicking the “Migrate packages.config to PackageReference…”\" (#6854) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet Version: Release-4.7.0-RTM 5122\r\nVS Version: D15.7 27619.00\r\nOS Version: RS4_Release 17134.1.180410-1804\r\n## Detailed repro steps so we can see the same problem\r\n1.\tCreate a C# Class Library (.NET Framework) template via VS.\r\n2.\tOpen PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3.\tInstall a package with “Packages.config” format.\r\n4.\tRight-Click the “References” node and select the “Migrate packages.config to PackageReference…”\r\n## Expected\r\nThe PM UI should not be closed automatically.\r\n## Actual\r\nThe PM UI will be closed automatically as below screenshot.\r\n![pmuiclosedautomatically](https://user-images.githubusercontent.com/20632625/39043326-aec4cc56-447c-11e8-97ca-076a85026325.png)\r\n## Note\r\n1. The PM UI for solution will not be closed after clicking “Manage NuGet Packages for Solution…” on solution node in step2.\r\n2. It also repro on the first project with multiple projects in one solution (not repro for other project except for the first one).\r\n![onlyfirstpmuiclosed](https://user-images.githubusercontent.com/20632625/39043351-b9e7f856-447c-11e8-8864-aa7a400884b5.png)\r\n3. It repro on D15.7 27619.00 (default NuGet Client 4.7.0.5104).\r\n4. It repro on D15.8stg 27618.3003+NuGet Client Dev 5121."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-25T03:30:23.3516433Z","RunDurationInMilliseconds":944}