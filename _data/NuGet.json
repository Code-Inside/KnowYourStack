{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"39577858881","Type":"PullRequestEvent","CreatedAt":"2024-06-24T22:01:40","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10021","RelatedDescription":"Merged pull request \"Remove elmah table usage from gallery\" (#10021) at NuGet/NuGetGallery","RelatedBody":"Partially addresses: https://github.com/NuGet/Engineering/issues/5480\r\n\r\nWe'll remove this table's usage as a part of the SDK migration effort."},{"Id":"39571184684","Type":"PullRequestEvent","CreatedAt":"2024-06-24T17:31:03","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10041","RelatedDescription":"Merged pull request \"[Dark Theme] Fix reserved icon error and updated default icon image \" (#10041) at NuGet/NuGetGallery","RelatedBody":"Fixes errors in the Icons which made them render multiple times. I'm also updating every usage of the default icon image to be the theme one. Updated reserved icon colors in everywhere is used.\r\n\r\nCurrent UI error: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/43253759/90bbf095-6783-4c8d-a79f-bc77d0c41112)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8773"},{"Id":"39570079848","Type":"PullRequestEvent","CreatedAt":"2024-06-24T16:51:25","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10041","RelatedDescription":"Opened pull request \"Fix UI errors whit Icons and images\" (#10041) at NuGet/NuGetGallery","RelatedBody":"Fixes errors in the Icons and images\r\n\r\nCurrent UI error: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/43253759/90bbf095-6783-4c8d-a79f-bc77d0c41112)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"39582521215","Type":"IssuesEvent","CreatedAt":"2024-06-25T02:42:03","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13578","RelatedDescription":"Opened issue \"Some errors encountered when patching the .NET SDK with NuGet Dev latest build\" (#13578) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nDev\\6.11.0.113 \n\n### Worked before?\n\nIt is a regression since the issue doesn’t repro on patching Dotnet SDK with NuGet Client Dev\\6.11.0.110.\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n       1. Open a \"Developer Command Prompt\" and run Git clone https://github.com/NuGet/Entropy.git to get the latest “Entropy”.\r\n       2. Open a Powershell from Task Manager with the “powershell -ExecutionPolicy Bypass” set & “Create this task with \r\n           administrative privileges” checked.\r\n       3. Download the “nupkgs – NonRTM” folder from NuGet Client Dev latest build’s Artifacts to the desktop of your test \r\n           machine and named \"nupkgs\".\r\n       5. Go to the SDKPatchTool folder: \"…\\Entropy\\SDKPatchTool\" in the PS prompt in step2 and run the “SDKPatch.ps1” script \r\n           with the commands:\r\n      ` .\\SDKPatch.ps1 -SDKPath C:\\Users\\v-ssue\\Desktop\\PatchedSDK\\ -NupkgsPath C:\\Users\\v-ssue\\Desktop\\Nupkgs\\ -SDKChannel 8.0.4xx -Quality daily`\r\n\r\n**Expected Result:**\r\n\r\nThe patching is successful with no error.\r\n\r\n**Actual Result:**\n\n### Verbose Logs\n\n_No response_"},{"Id":"39581227511","Type":"IssuesEvent","CreatedAt":"2024-06-25T01:24:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13576","RelatedDescription":"Opened issue \"Enable `dotnet nuget why` on non-SDK style projects\" (#13576) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\n`dotnet nuget why` currently requires you to point to a project file, but the .NET SDK can only evaluate SDK style projects. Many non-SDK style Visual Studio projects try to import MSBuild props/targets files that don't exist in the .NET SDK and therefore trying to read project properties (to find the assets file) fails.\r\n\r\n`dotnet nuget why` is particularly useful for investigating why a package with a known vulnerability is used by a project, so allowing the command to work for non-SDK style projects will help customers investigate known vulnerabilities.\r\n\r\n`dotnet nuget why` should either allow a `project.assets.json` file to be passed as an argument instead of a project file.\r\n\r\nWe can instruct customers that they can find the assets file location using `msbuild.exe path\\to\\project.csproj -getProperty:ProjectAssetsFile`\n\n### Additional Context and Details\n\n_No response_"},{"Id":"39580882618","Type":"IssuesEvent","CreatedAt":"2024-06-25T01:03:59","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13575","RelatedDescription":"Opened issue \"NuGetAuditSuppress for packages.config\" (#13575) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe\n\n### The Elevator Pitch\n\nNuGetAuditSuppress has already been added for projects using PackageReference. Add support for packages.config as well.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"39580823414","Type":"IssuesEvent","CreatedAt":"2024-06-25T01:00:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13574","RelatedDescription":"Opened issue \"PM UI should show transitive path\" (#13574) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nWhen hovering a package in the \"installed\" package list, when the package is a transitve package, it will tell you a top level package that caused the package to be included:\r\n<img width=\"446\" alt=\"image\" src=\"https://github.com/NuGet/Home/assets/5030577/33e9aec1-8bc3-4ac4-9e62-07ac1194f27a\">\r\n\n\n### Desired Behavior\n\nThe tooltip should show the full path of all intermediate packages. This is because when dealing with transitive packages with known vulnerabilities, some customers (and my personal recommendation) is to upgrade the \"closest to direct\" package to a higher version where packages with known vulnerabilities are removed.\r\n\r\nFor example, consider a package path, as shown by the new `dotnet nuget why` command:\r\n\r\n```text\r\n  [net8.0]\r\n   │\r\n   └─ YesSql (v5.0.0)\r\n      └─ YesSql.Provider.SqlServer (v5.0.0)\r\n         ├─ Azure.Identity (v1.11.2)\r\n         │  ├─ Microsoft.Identity.Client (v4.60.3)\r\n         │  └─ Microsoft.Identity.Client.Extensions.Msal (v4.60.3)\r\n         │     └─ Microsoft.Identity.Client (v4.60.3)\r\n         └─ Microsoft.Data.SqlClient (v5.2.0)\r\n            ├─ Azure.Identity (v1.11.2)\r\n            │  ├─ Microsoft.Identity.Client (v4.60.3)\r\n            │  └─ Microsoft.Identity.Client.Extensions.Msal (v4.60.3)\r\n            │     └─ Microsoft.Identity.Client (v4.60.3)\r\n            └─ Microsoft.Identity.Client (v4.60.3)\r\n```\r\n\r\nAs a developer, I'd prefer to update the `YesSql` package to a newer version, but if no newer version exists, then I'd like to update `YesSql.Provider.SqlServer`, and my next preference is `Azure.identity` or `Microsoft.Data.SqlClient`, etc.  In order to investigate upgrading these packages, I need to know the package path, not just the direct/root package that brought in the dependency.\n\n### Additional Context\n\n_No response_"},{"Id":"39576505540","Type":"IssuesEvent","CreatedAt":"2024-06-24T21:00:19","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13558","RelatedDescription":"Closed issue \"PERF: LockFileFormat is filled completely when common callers only need some of the data\" (#13558) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5857 for more details\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\n\n### Verbose Logs\n\n_No response_"},{"Id":"39575666718","Type":"PullRequestEvent","CreatedAt":"2024-06-24T20:25:30","Actor":"albarry4","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13573","RelatedDescription":"Opened pull request \"Create proposal to replace blue checkmark\" (#13573) at NuGet/Home","RelatedBody":""},{"Id":"39569592837","Type":"IssuesEvent","CreatedAt":"2024-06-24T16:33:56","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13560","RelatedDescription":"Closed issue \"VS 17.10 - Error building projects with CPM explicitly enabled if ManagePackageVersionsCentrally is set to false in Directory.Build.props\" (#13560) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/VS-1710---Cant-enable-CPM-on-individua/10683768)._\n\n---\n\\[severity:It’s more difficult to complete my work\\] \\[regression\\] \\[worked-in:17.9\\]  \nIf CPM is disabled globally via `<ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>` in the `Directory.Build.props` file, a “Failed to restore” error is thrown when building a project which has CPM explicitly enabled by setting `ManagePackageVersionsCentrally` to `true` in the .csproj.\n\nI’m guessing this may have been introduced with the change to enable CPM whenever there is a `Directory.Packages.props` file present in the root directory ([https://github.com/NuGet/Home/issues/11834](https://github.com/NuGet/Home/issues/11834)).\n\n### To reproduce:\n\nPre-req: You have both `Directory.Build.props` and `Directory.Packages.props` files in the root directory of the repository.\n\n1.  Inside of `Directory.Build.props` set `<ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>` to disable CPM by default for all projects.\n2.  Inside a .csproj file within your repository, set `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` to enable CPM for that individual project.\n\n**Expected:**\nCPM enabled for projects which have `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` explicitly set. \n\n**Actual:**\n“Failed to restore” errors when building projects which have `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` explicitly set. \ne.g.\n\n```  \nFailed to restore C:\\TestCpm\\WithCpm\\WithCpm.csproj (in 6 ms).\nNuGet package restore failed. Please see Error List window for detailed warnings and errors.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.<GetProjectFileDependencySet>g__IndexOfWhiteSpace|6_1(String s)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.GetProjectFileDependencySet(LockFile lockFile, String frameworkAlias)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<WritePackageDependenciesDesignTime>g__GetPackageDependencies|59_0()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WritePackageDependenciesDesignTime()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroup(Action writeItems)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.Write()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteToCacheFile()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n  \n```\n\nHave also seen a slightly different stack trace:\n\n```  \n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProjectContext.<>c__DisplayClass31_0.<GetTopLevelDependencies>b__3(String projectFileDependency)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.ComputePackageExclusions()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n  \n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/16/2024, 11:48 PM: \n\n(private comment, text removed)\n#### Jason Brooks on 6/17/2024, 07:09 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"39553407698","Type":"IssuesEvent","CreatedAt":"2024-06-24T08:30:44","Actor":"am11","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13572","RelatedDescription":"Opened issue \"Suggestion: optimize NuGet.Packaging.PackageBuilder.AddFiles()\" (#13572) at NuGet/Home","RelatedBody":"Suggestion: `NuGet.Packaging.PackageBuilder.AddFiles()` can avoid call to `ResolveSearchPattern` when items in `PackageFiles` are all absolute paths.\r\n\r\nIssue: When hundreds of files are being added (via `PackageFiles` task property), the tight loop in `AddFiles()` becomes a choke point for some filesystems (such as VirtioFS used in docker-mac fileshare), and throws intermittent errors like:\r\n\r\n```\r\n System.IO.DirectoryNotFoundException: Could not find a part of the path '/runtime/src/installer/pkg/sfx/Microsoft.NETCore.App'.\r\n    at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound)\r\n    at System.IO.Enumeration.FileSystemEnumerator`1.Init()\r\n    at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)\r\n    at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\r\n    at System.IO.Directory.GetFiles(String path, String searchPattern, EnumerationOptions enumerationOptions)\r\n    at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includeEmptyDirectories, String& normalizedBasePath)\r\n    at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String targetPath, Boolean includeEmptyDirectories)\r\n    at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude)\r\n    at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files)\r\n    at NuGet.Commands.MSBuildProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n    at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n    at NuGet.Build.Tasks.Pack.PackTask.Execute() (TaskId:86)\r\nDone executing task \"PackTask\" -- FAILED. (TaskId:86)\r\n```\r\n\r\n(40% of builds failed in mounted setup on macOS; all of them with same PackTask callstack)\r\n\r\nNote this is only a suggestion to reduce inodes usages (the LINQ query causes n^m lookups which seems a bit too much for what the domain requirement is). `ENOENT` (No such file or directory) errors on VirtioFS is reported to be fixed in upcoming macOS 15 and latest docker (I'm on Sonoma 14.5, the current stable release). Feel free to close this if refactoring doesn't warrant. 🙂\r\n\r\ncc @akoeplinger, this is related to https://github.com/dotnet/runtime/pull/98597#issuecomment-1953365183."},{"Id":"39551860017","Type":"IssuesEvent","CreatedAt":"2024-06-24T07:41:54","Actor":"FixBo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13571","RelatedDescription":"Opened issue \"nuget restore warnings can't be suppressed with NoWarn in Visual Studio\" (#13571) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n17.10\n\n### Worked before?\n\n17.9\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nAdd multiple nuget sources and set ManagePackageVersionsCentrally to true.\r\n\r\nVisual Studio show restore error even if \\<NoWarn>NU1507\\</NoWarn> specified for project.\r\n\r\nThere is no issues when using dotnet restore or msbuild.\n\n### Verbose Logs\n\n```shell\nNU1507: Warning As Error: There are 2 package sources defined in your configuration. When using central package management, please map your package sources with package source mapping (https://aka.ms/nuget-package-source-mapping) or specify a single package source. The following sources are defined: nuget.org, dotnet-tools\r\nFailed to restore ****** (in 1,08 sec).\r\nNuGet package restore failed. Please see Error List window for detailed warnings and errors.\n```\n"},{"Id":"39549089480","Type":"IssuesEvent","CreatedAt":"2024-06-24T05:55:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13385","RelatedDescription":"Closed issue \"Remove NuGet.Packaging.Core code\" (#13385) at NuGet/Home","RelatedBody":"Follow-up to https://github.com/NuGet/Home/issues/12495.\r\n\r\nOnce https://github.com/NuGet/Home/issues/12495 is done without repercussions, we can remove the code as well."},{"Id":"39531295491","Type":"IssuesEvent","CreatedAt":"2024-06-23T00:54:34","Actor":"WeihanLi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13570","RelatedDescription":"Opened issue \"Support GetAllListedVersions API\" (#13570) at NuGet/Home","RelatedBody":"              The metadata API would not more info than versions, considering for performance, is it possible to support a parameter like `excludeUnlistedPackages` for the `GetAllVersions` API?\r\n\r\n_Originally posted by @WeihanLi in https://github.com/NuGet/Home/issues/12370#issuecomment-2184274421_\r\n            "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-06-25T03:30:19.4041301Z","RunDurationInMilliseconds":954}