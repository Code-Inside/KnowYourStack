{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42623285320","Type":"PullRequestEvent","CreatedAt":"2024-10-07T21:08:33","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10201","RelatedDescription":"Merged pull request \"CodeQL suppressions + suppression fixes\" (#10201) at NuGet/NuGetGallery","RelatedBody":"Following guidance provided in: https://aka.ms/codeql#guidance-on-suppressions"},{"Id":"42602109292","Type":"PullRequestEvent","CreatedAt":"2024-10-07T10:52:41","Actor":"v-manil2","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10203","RelatedDescription":"Opened pull request \"[ReleasePrep][2024.10.07]RI of dev into main for NuGetGallery\" (#10203) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"42586311345","Type":"IssuesEvent","CreatedAt":"2024-10-06T22:29:35","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10202","RelatedDescription":"Opened issue \"[Feature]: Support for \"Bring Your Own\" Author Certificate for Package Signing on NuGet.org\" (#10202) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nCurrently, NuGet.org enforces an \"all or nothing\" policy when it comes to package signing. This means that users must either sign all packages with a single certificate or none at all. However, there is no flexibility to allow authors to use their own valid signing certificates per package. This is restrictive for users who may wish to maintain different security policies across their packages or who have specific compliance requirements involving external certificates.\n\nhttps://learn.microsoft.com/en-us/nuget/create-packages/sign-a-package#manage-signing-requirements-for-your-package-on-nugetorg\n\nhttps://learn.microsoft.com/en-us/nuget/reference/signed-packages-reference\n\nIntroduce support for a \"bring your own\" valid author certificate policy where developers can sign individual packages with different certificates if required. This would allow more flexibility in managing security policies across multiple packages.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42529210692","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:41:13","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10200","RelatedDescription":"Merged pull request \"Fix assembly bindings\" (#10200) at NuGet/NuGetGallery","RelatedBody":"Fix runtime assembly binding conflicts"},{"Id":"42528900931","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:20:18","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10199","RelatedDescription":"Merged pull request \"Use user-provided data correctly\" (#10199) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5661\r\n\r\nSolution copied from: https://github.com/jquery/jquery-ui/commit/afe20b79a64266e64011f34b26a30b3d1c62fd47#diff-9fe9167f897d640e82537adc5391958ffe6284b413a08152cd31d061e97a644aL243"},{"Id":"42528881006","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:18:57","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10201","RelatedDescription":"Opened pull request \"CodeQL suppressions + suppression fixes\" (#10201) at NuGet/NuGetGallery","RelatedBody":"Following guidance provided in: https://aka.ms/codeql#guidance-on-suppressions"},{"Id":"42528871349","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:18:19","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10200","RelatedDescription":"Opened pull request \"Fix assembly bindings\" (#10200) at NuGet/NuGetGallery","RelatedBody":"Fix runtime assembly binding conflicts"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42620142510","Type":"IssuesEvent","CreatedAt":"2024-10-07T19:16:13","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13840","RelatedDescription":"Closed issue \"`dotnet add package` does not report vulnerabilities (that my eyes can see)\" (#13840) at NuGet/Home","RelatedBody":"I'm installing this package: https://www.nuget.org/packages/System.Formats.Asn1/8.0.0. My expectation is that (A) the vulnerability should be reported with this command, and (B) the addition should be failed by default (should require `--force` to actually add).\r\n\r\n```console\r\nC:\\Users\\rlander\\dotnet8proj>dotnet --version\r\n9.0.100-rc.1.24452.12\r\n\r\nC:\\Users\\rlander\\dotnet8proj>type dotnet8proj.csproj | findstr TargetFramework\r\n    <TargetFramework>net8.0</TargetFramework>\r\n\r\nC:\\Users\\rlander\\dotnet8proj>dotnet add package System.Formats.Asn1 --version 8.0.0\r\n\r\nBuild succeeded in 0.9s\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\ninfo : Adding PackageReference for package 'System.Formats.Asn1' into project 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : Restoring packages for C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj...\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/system.formats.asn1/index.json\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/system.formats.asn1/index.json 75ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/system.formats.asn1/8.0.0/system.formats.asn1.8.0.0.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/system.formats.asn1/8.0.0/system.formats.asn1.8.0.0.nupkg 32ms\r\ninfo : Installed System.Formats.Asn1 8.0.0 from https://api.nuget.org/v3/index.json to C:\\Users\\rlander\\.nuget\\packages\\system.formats.asn1\\8.0.0 with content hash AJukBuLoe3QeAF+mfaRKQb2dgyrvt340iMBHYv+VdBzCUM06IxGlvl0o/uPOS7lHnXPN6u8fFRHSHudx5aTi8w==.\r\ninfo :   GET https://api.nuget.org/v3/vulnerabilities/index.json\r\ninfo :   OK https://api.nuget.org/v3/vulnerabilities/index.json 14ms\r\ninfo :   GET https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/vulnerability.base.json\r\ninfo :   GET https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/2024.10.06.11.41.54/vulnerability.update.json\r\ninfo :   OK https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/vulnerability.base.json 33ms\r\ninfo :   OK https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/2024.10.06.11.41.54/vulnerability.update.json 48ms\r\nwarn : NU1903: Package 'System.Formats.Asn1' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\ninfo : Package 'System.Formats.Asn1' is compatible with all the specified frameworks in project 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : PackageReference for package 'System.Formats.Asn1' version '8.0.0' added to file 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : Writing assets file to disk. Path: C:\\Users\\rlander\\dotnet8proj\\obj\\project.assets.json\r\nlog  : Restored C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj (in 1.32 sec).\r\n\r\nC:\\Users\\rlander\\dotnet8proj>dotnet restore\r\nRestore succeeded with 1 warning(s) in 0.7s\r\n    C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj : warning NU1903: Package 'System.Formats.Asn1' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\n\r\nBuild succeeded with 1 warning(s) in 0.9s\r\n```\r\n\r\n`dotnet add package` clearly has access to vulnerability data but doesn't act on it. It seems like we would \"shift left\" with the report on having just added a vulnerable dependency. Is there a reason why not?"},{"Id":"42619257126","Type":"IssuesEvent","CreatedAt":"2024-10-07T18:46:53","Actor":"richlander","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13841","RelatedDescription":"Opened issue \"Reconsider use of `NuGet.CommandLine.XPlat.dll` in console output\" (#13841) at NuGet/Home","RelatedBody":"How does on invoke `NuGet.CommandLine.XPlat.dll`?\r\n\r\n```bash\r\n$ dotnet nuget package\r\nNuGet Command Line 6.8.1.32767\r\n\r\nUsage: NuGet.CommandLine.XPlat.dll package [options] [command]\r\n\r\nOptions:\r\n  -h|--help  Show help information\r\n  --version  Show version information\r\n\r\nCommands:\r\n  add     Adds a package reference to a project.\r\n  list    Lists all the packages used by the current project(s).\r\n  remove  Removes a package reference from a project.\r\n\r\nUse \"NuGet.CommandLine.XPlat.dll package [command] --help\" for more information about a command.\r\n```"},{"Id":"42619087597","Type":"IssuesEvent","CreatedAt":"2024-10-07T18:41:23","Actor":"richlander","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13840","RelatedDescription":"Opened issue \"`dotnet add package` does not report vulnerablities\" (#13840) at NuGet/Home","RelatedBody":"I'm installing this package: https://www.nuget.org/packages/System.Formats.Asn1/8.0.0. My expectation is that (A) the vulnerability should be reported with this command, and (B) the addition should be failed by default (should require `--force` to actually add).\r\n\r\n```console\r\nC:\\Users\\rlander\\dotnet8proj>dotnet --version\r\n9.0.100-rc.1.24452.12\r\n\r\nC:\\Users\\rlander\\dotnet8proj>type dotnet8proj.csproj | findstr TargetFramework\r\n    <TargetFramework>net8.0</TargetFramework>\r\n\r\nC:\\Users\\rlander\\dotnet8proj>dotnet add package System.Formats.Asn1 --version 8.0.0\r\n\r\nBuild succeeded in 0.9s\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\ninfo : Adding PackageReference for package 'System.Formats.Asn1' into project 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : Restoring packages for C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj...\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/system.formats.asn1/index.json\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/system.formats.asn1/index.json 75ms\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/system.formats.asn1/8.0.0/system.formats.asn1.8.0.0.nupkg\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/system.formats.asn1/8.0.0/system.formats.asn1.8.0.0.nupkg 32ms\r\ninfo : Installed System.Formats.Asn1 8.0.0 from https://api.nuget.org/v3/index.json to C:\\Users\\rlander\\.nuget\\packages\\system.formats.asn1\\8.0.0 with content hash AJukBuLoe3QeAF+mfaRKQb2dgyrvt340iMBHYv+VdBzCUM06IxGlvl0o/uPOS7lHnXPN6u8fFRHSHudx5aTi8w==.\r\ninfo :   GET https://api.nuget.org/v3/vulnerabilities/index.json\r\ninfo :   OK https://api.nuget.org/v3/vulnerabilities/index.json 14ms\r\ninfo :   GET https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/vulnerability.base.json\r\ninfo :   GET https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/2024.10.06.11.41.54/vulnerability.update.json\r\ninfo :   OK https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/vulnerability.base.json 33ms\r\ninfo :   OK https://api.nuget.org/v3-vulnerabilities/2024.10.02.05.41.40/2024.10.06.11.41.54/vulnerability.update.json 48ms\r\nwarn : NU1903: Package 'System.Formats.Asn1' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\ninfo : Package 'System.Formats.Asn1' is compatible with all the specified frameworks in project 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : PackageReference for package 'System.Formats.Asn1' version '8.0.0' added to file 'C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj'.\r\ninfo : Writing assets file to disk. Path: C:\\Users\\rlander\\dotnet8proj\\obj\\project.assets.json\r\nlog  : Restored C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj (in 1.32 sec).\r\n\r\nC:\\Users\\rlander\\dotnet8proj>dotnet restore\r\nRestore succeeded with 1 warning(s) in 0.7s\r\n    C:\\Users\\rlander\\dotnet8proj\\dotnet8proj.csproj : warning NU1903: Package 'System.Formats.Asn1' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\n\r\nBuild succeeded with 1 warning(s) in 0.9s\r\n```\r\n\r\n`dotnet add package` clearly has access to vulnerability data but doesn't act on it. It seems like we would \"shift left\" with the report on having just added a vulnerable dependency. Is there a reason why not?"},{"Id":"42618633366","Type":"IssuesEvent","CreatedAt":"2024-10-07T18:26:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13678","RelatedDescription":"Closed issue \"Replicate NET SDK static graph build tests \" (#13678) at NuGet/Home","RelatedBody":"See: https://github.com/dotnet/sdk/pull/42458/checks?check_run_id=28337194159\r\n\r\nMicrosoft.NET.Build.Tests.GivenThatWeWantToBuildAnAppWithoutTransitiveProjectRefs.It_builds_the_project_successfully_with_static_graph_and_isolation and https://github.com/NuGet/NuGet.Client/pull/5951 is the fixed for the changes. \r\n\r\nThis is non-standard and unlike any of the tests we have in our repo."},{"Id":"42576717430","Type":"IssuesEvent","CreatedAt":"2024-10-06T05:13:33","Actor":"aetos382","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13839","RelatedDescription":"Opened issue \"Advise on the preferred method for fixing vulnerable package references\" (#13839) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI, dotnet.exe\n\n### The Elevator Pitch\n\nThere are some feature suggestions for how to fix the vulnerability of a referenced package in dotnet CLI and Visual Studio.\r\n\r\nFor example, let's say my project has the following dependencies.\r\n`My App -> Package A -> Package B`\r\n\r\nThe version 1.0 of Package B is vulnerable, and this vulnerability has been fixed in the version 1.1.\r\nThe version 1.0 of Package A references the version 1.0 of Package B.\r\nAnd when the new version 1.1 of Package A is released, it will reference the version 1.1 of Package B.\r\n\r\nEven if the version 1.0 of Package A itself is not vulnerable, it is indirectly vulnerable because it references the vulnerable Package B.\r\nHowever, in such cases, nuget.org does not always report that the version 1.0 of Package A is vulnerable.\r\n\r\nFor example, [the version 5.15 of the Microsoft.Data.SqlClient package](https://www.nuget.org/packages/Microsoft.Data.SqlClient/5.1.5) is not marked as vulnerable, but [the version 1.10.3 of the Azure.Identity package ](https://www.nuget.org/packages/Azure.Identity/1.10.3)it references is vulnerable.\r\n\r\nIn this case, I can choose from two options.\r\n\r\n1. Update the version of Package A to 1.1, which indirectly references version 1.1 of Package B.\r\n2. While referencing version 1.0 of Package A, directly reference version 1.1 of Package B.\r\nIn this case, I would first like to choose the option 1 (if the vulnerability is still not resolved, I will reluctantly choose the option 2).\r\n\r\nHowever, the current dotnet CLI and Visual Studio only indicate that Package B is vulnerable, and do not indicate that updating only Package A will resolve the issue.\r\nIf I follow the tool's advice and directly reference the version 1.1 of package B, and then decide to reference the version 1.1 of package A for reasons other than fixing the vulnerability, I no longer need to directly reference package B, but the reference is not deleted.\r\n\r\nThere are several suggestions to resolve this situation.\r\n\r\n* nuget.org should reliably report that if a dependency package is vulnerable, then the higher-level packages that reference it are also vulnerable.\r\n* The `dotnet list` package command should provide `-–tree` option to display the dependency tree, to help identify which higher-level packages reference the vulnerable package (the `––include-transitive` option is automatically enabled when the `––tree` option is used). If the `--vulnerable` option is also specified, this command will display the shortest reference path from the application to the vulnerable package.\r\n* I want to be able to set a policy for fixing the vulnerabilities of indirectly dependent packages, either by directly referencing them or by trying to update the packages that are closer to the application first in the csproj or NuGet.config.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42576453546","Type":"IssuesEvent","CreatedAt":"2024-10-06T04:33:40","Actor":"Epigeos-com","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13838","RelatedDescription":"Opened issue \"The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms.\" (#13838) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nLinux, Arch-based, x64, 8.0.108\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\ndotnet restore on any project, even one fresh from dotnet new\n\n### Verbose Logs\n\n```shell\nAssembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Runtime.Intrinsics, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 (location: /usr/share/dotnet/shared/Microsoft.NETCore.App/8.0.8/System.Runtime.Intrinsics.dll, MVID: 76c4fb63-66d1-4fbf-8aff-dd1c4a6bb94c, AppDomain: [Default]) (TaskId:36)\r\n03:33:03.804     1>/usr/share/dotnet/sdk/8.0.108/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/kirki/Code/a/a.csproj]\r\n/usr/share/dotnet/sdk/8.0.108/NuGet.targets(156,5): error :   The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms. [/home/kirki/Code/a/a.csproj]\r\n                     Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Diagnostics.StackTrace, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: /usr/share/dotnet/shared/Microsoft.NETCore.App/8.0.8/System.Diagnostics.StackTrace.dll, MVID: aa9eb643-db2b-4c3a-8381-d02c8f479a8e, AppDomain: [Default]) (TaskId:36)\r\n                     NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n                      ---> System.TimeoutException: The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms.\r\n                        at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T](Func`2 getTask, TimeSpan timeout, String timeoutMessage, CancellationToken token)\r\n                        at NuGet.Protocol.HttpRetryHandler.SendAsync(HttpRetryHandlerRequest request, String source, ILogger log, CancellationToken cancellationToken)\r\n                        at NuGet.Protocol.HttpSource.GetThrottledResponse(Func`1 requestFactory, TimeSpan requestTimeout, TimeSpan downloadTimeout, Int32 maxTries, Boolean isRetry, Boolean isLastAttempt, Guid sessionId, ILogger log, CancellationToken cancellationToken)\r\n                        at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext()\r\n                     --- End of stack trace from previous location ---\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token)\r\n                        at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token)\r\n                        --- End of inner exception stack trace ---\r\n                        at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token)\r\n                        at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token)\r\n                        at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token)\r\n                        at NuGet.Protocol.Providers.VulnerabilityInfoResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token)\r\n                        at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token)\r\n                        at NuGet.Commands.VulnerabilityInformationProvider.GetVulnerabilityInfoAsync()\r\n                        at NuGet.Commands.VulnerabilityInformationProvider.GetVulnerabilityInformationAsync(CancellationToken cancellationToken)\r\n                        at NuGet.Commands.Restore.Utility.AuditUtility.GetAllVulnerabilityDataAsync(CancellationToken cancellationToken)\r\n                        at NuGet.Commands.Restore.Utility.AuditUtility.CheckPackageVulnerabilitiesAsync(CancellationToken cancellationToken)\r\n                        at NuGet.Commands.RestoreCommand.PerformAuditAsync(EnabledValue enableAudit, IEnumerable`1 graphs, TelemetryActivity telemetry, CancellationToken token)\r\n                        at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, IRestoreProgressReporter progressReporter, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreArgs, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\n                        at NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\n                        at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log) (TaskId:36)\r\n                   Done executing task \"RestoreTask\" -- FAILED. (TaskId:36)\r\n03:33:03.809     1>Done building target \"Restore\" in project \"a.csproj\" -- FAILED.: (TargetId:42)\r\n03:33:03.810     1>Done Building Project \"/home/kirki/Code/a/a.csproj\" (Restore target(s)) -- FAILED.\r\nDeferred Messages\r\n03:33:03.810     0>\r\nDetailed Build Summary\r\n======================\r\n     (TaskId:0)\r\n                     \r\n                     ============================== Build Hierarchy (IDs represent configurations) =====================================================\r\n                     Id                  : Exclusive Time   Total Time   Path (Targets)\r\n                     ----------------------------------------------------------------------------------------------------------------------------------- (TaskId:0)\r\n                     0                   : 605.957s           606.033s       /home/kirki/Code/a/a.csproj (Restore)  (TaskId:0)\r\n                     | 1                 : 0.011s           0.011s       /home/kirki/Code/a/a.csproj (_IsProjectRestoreSupported)  (TaskId:0)\r\n                     | 2                 : 0.002s           0.002s       /home/kirki/Code/a/a.csproj (_GenerateRestoreProjectPathWalk)  (TaskId:0)\r\n                     | 3                 : 0.058s           0.058s       /home/kirki/Code/a/a.csproj (_GenerateRestoreGraphProjectEntry)  (TaskId:0)\r\n                     . 4                 : 0.004s           0.004s       /home/kirki/Code/a/a.csproj (_GenerateProjectRestoreGraph)  (TaskId:0)\r\n                     \r\n                     ============================== Node Utilization (IDs represent configurations) ====================================================\r\n                     Timestamp:            1        Duration   Cumulative\r\n                     ----------------------------------------------------------------------------------------------------------------------------------- (TaskId:0)\r\n                     638637817777761148:   0        0.216s     0.216s .... (TaskId:0)\r\n                     638637817779925252:   1        0.011s     0.228s  (TaskId:0)\r\n                     638637817780039260:   0        0.011s     0.238s  (TaskId:0)\r\n                     638637817780145178:   2        0.002s     0.241s  (TaskId:0)\r\n                     638637817780167035:   0        0.002s     0.242s  (TaskId:0)\r\n                     638637817780185073:   3        0.058s     0.301s . (TaskId:0)\r\n                     638637817780767182:   0        0.002s     0.302s  (TaskId:0)\r\n                     638637817780783608:   4        0.004s     0.307s  (TaskId:0)\r\n                     638637817780827136:   0        605.728s     606.035s ############ (scale 1:1000) (TaskId:0)\r\n                     -----------------------------------------------------------------------------------------------------------------------------------\r\n                     Utilization:          100.0    Average Utilization: 100.0 (TaskId:0)\r\n\r\nProject Evaluation Performance Summary:\r\n      177 ms  /home/kirki/Code/a/a.csproj                2 calls\r\n\r\nProject Performance Summary:\r\n    605914 ms  /home/kirki/Code/a/a.csproj                6 calls\r\n              605850 ms  Restore                                    1 calls\r\n                  0 ms  _IsProjectRestoreSupported                 2 calls\r\n                  2 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n                 58 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                  4 ms  _GenerateProjectRestoreGraph               1 calls\r\n\r\nTarget Performance Summary:\r\n        0 ms  _GenerateProjectRestoreGraph               1 calls\r\n        0 ms  _GenerateRestoreDependencies               1 calls\r\n        0 ms  _GetRestoreSettingsCurrentProject          1 calls\r\n        0 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n        0 ms  _GenerateProjectRestoreGraphCurrentProject   1 calls\r\n        0 ms  _GenerateRestoreProjectPathItemsCurrentProject   1 calls\r\n        0 ms  _CheckForObsoleteDotNetCliToolReferences   1 calls\r\n        0 ms  _GetRestoreSettingsPerFramework            1 calls\r\n        0 ms  _GetProjectJsonPath                        1 calls\r\n        0 ms  _CheckForLanguageAndFeatureCombinationSupport   1 calls\r\n        0 ms  _GetRestoreTargetFrameworkOverride         1 calls\r\n        0 ms  _GetRestoreSettingsOverrides               1 calls\r\n        0 ms  _CheckForUnsupportedCppNETCoreVersion      2 calls\r\n        0 ms  _AddMicrosoftNetCompilerToolsetFrameworkPackage   1 calls\r\n        0 ms  _IsProjectRestoreSupported                 1 calls\r\n        0 ms  CollectFrameworkReferences                 1 calls\r\n        0 ms  _CheckForUnsupportedNETCoreVersion         2 calls\r\n        0 ms  _GenerateRestoreProjectPathItems           1 calls\r\n        0 ms  _GenerateRestoreSpecs                      1 calls\r\n        0 ms  _GenerateRestoreProjectSpec                1 calls\r\n        0 ms  _GenerateRestoreProjectPathItemsPerFramework   1 calls\r\n        0 ms  CollectPackageReferences                   1 calls\r\n        1 ms  _GenerateDotnetCliToolReferenceSpecs       1 calls\r\n        1 ms  _CollectTargetFrameworkForTelemetry        1 calls\r\n        1 ms  CollectCentralPackageVersions              1 calls\r\n        1 ms  CollectPackageDownloads                    1 calls\r\n        1 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n        1 ms  _GenerateProjectRestoreGraphPerFramework   1 calls\r\n        1 ms  _GetRestoreTargetFrameworksOutput          1 calls\r\n        1 ms  _GetRestoreProjectStyle                    1 calls\r\n        2 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n        2 ms  _ComputeToolPackInputsToProcessFrameworkReferences   1 calls\r\n        4 ms  _LoadRestoreGraphEntryPoints               1 calls\r\n        5 ms  _GetAllRestoreProjectPathItems             1 calls\r\n       21 ms  _GetRestoreSettings                        1 calls\r\n       29 ms  ProcessFrameworkReferences                 1 calls\r\n       45 ms  _FilterRestoreGraphProjectInputItems       1 calls\r\n       65 ms  _GenerateRestoreGraph                      1 calls\r\n    605726 ms  Restore                                    1 calls\r\n\r\nTask Performance Summary:\r\n        0 ms  GetRestorePackageReferencesTask            1 calls\r\n        0 ms  GetRestoreFrameworkReferencesTask          1 calls\r\n        0 ms  GetRestoreProjectReferencesTask            1 calls\r\n        0 ms  CheckForDuplicateFrameworkReferences       1 calls\r\n        0 ms  GetRestorePackageDownloadsTask             1 calls\r\n        0 ms  AllowEmptyTelemetry                        1 calls\r\n        0 ms  GetRestoreDotnetCliToolsTask               1 calls\r\n        0 ms  ConvertToAbsolutePath                      2 calls\r\n        0 ms  NuGetMessageTask                           1 calls\r\n        0 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n        1 ms  Message                                    3 calls\r\n        1 ms  GetProjectTargetFrameworksTask             1 calls\r\n        1 ms  GetRestoreProjectStyleTask                 1 calls\r\n        1 ms  CheckForDuplicateNuGetItemsTask            3 calls\r\n        2 ms  RemoveDuplicates                           5 calls\r\n        3 ms  WarnForInvalidProjectsTask                 1 calls\r\n        5 ms  ResolveAppHosts                            1 calls\r\n       21 ms  GetRestoreSettingsTask                     1 calls\r\n       23 ms  ProcessFrameworkReferences                 1 calls\r\n       89 ms  MSBuild                                    6 calls\r\n    605725 ms  RestoreTask                                1 calls\r\n\r\nBuild FAILED.\r\n\r\n                   \"/home/kirki/Code/a/a.csproj\" (Restore target) (1) ->\r\n                   (Restore target) -> \r\n                     /usr/share/dotnet/sdk/8.0.108/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/home/kirki/Code/a/a.csproj]\r\n                   /usr/share/dotnet/sdk/8.0.108/NuGet.targets(156,5): error :   The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms. [/home/kirki/Code/a/a.csproj]\n```\n"},{"Id":"42562341645","Type":"IssuesEvent","CreatedAt":"2024-10-04T23:32:25","Actor":"sykesbPragmatics","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13837","RelatedDescription":"Opened issue \"Attempting to build on Ubuntu Docker Container -- SMB Share Nuget Cache -- Results in access denied for single package\" (#13837) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet core 8\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nDescribe the bug\r\nNo matter what I do I always get an error while trying to restore nuget on a single package file. A ton of other packages work successfully but this one always fails no matter what.\r\n\r\nThe build agent is a docker container on Ubuntu and I'm attaching an smb file share to /mnt/build-agent-share so that I can get nuget caching. I cannot mount a local folder to the docker image as I do not own the VM, its a shared \"ephemeral\" build agent designed to be killed off after every run.\r\n\r\nI have attempted deleting the folder entirely and starting over, attempting to own the folder once its mounted.... Anyone have any ideas?\n\n### Verbose Logs\n\n```shell\nsimple dotnet build:\r\n\r\n/usr/lib/dotnet/sdk/8.0.108/NuGet.targets(156,5): error : Access to the path '/mnt/build-agent-share/nugetcache/microsoft.netcore.app.host.linux-x64/8.0.8/Microsoft.NETCore.App.Host.linux-x64.nuspec' is denied. [/opt/agent/_work/1/s/Src/Project.csproj] /usr/lib/dotnet/sdk/8.0.108/NuGet.targets(156,5): error :   Operation not permitted [/opt/agent/_work/1/s/Src/Project.csproj]\r\n\r\nThe file is definitely created, but seems to be failing when its trying to unzip\r\n\r\nAlternate log when attempting to just do dotnet restore\r\n 1>/usr/lib/dotnet/sdk/8.0.108/NuGet.targets(156,5): error : Access to the path '/mnt/build-agent-share/nugetcache/microsoft.netcore.app.host.linux-x64/8.0.8/Microsoft.NETCore.App.Host.linux-x64.nuspec' is denied. [/opt/agent/_work/1/s/Project.csproj] /usr/lib/dotnet/sdk/8.0.108/NuGet.targets(156,5): error :   Operation not permitted [/opt/agent/_work/1/s/Project.csproj] Assembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Diagnostics.StackTrace, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: /usr/lib/dotnet/shared/Microsoft.NETCore.App/8.0.8/System.Diagnostics.StackTrace.dll, MVID: 4061053c-27f4-4307-bc08-8a769a70c3f3, AppDomain: [Default]) System.UnauthorizedAccessException: Access to the path '/mnt/build-agent-share/nugetcache/microsoft.netcore.app.host.linux-x64/8.0.8/Microsoft.NETCore.App.Host.linux-x64.nuspec' is denied. ---> System.IO.IOException: Operation not permitted --- End of inner exception stack trace --- at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError) at Interop.CheckIo(Int64 result, String path, Boolean isDirError) at System.IO.FileStatus.SetAccessOrWriteTimeCore(SafeFileHandle handle, String path, DateTimeOffset time, Boolean isAccessTime, Boolean checkCreationTime, Boolean asDirectory) at System.IO.File.SetLastWriteTimeUtc(String path, DateTime lastWriteTimeUtc) at NuGet.Packaging.ZipArchiveExtensions.Testable.UpdateFileTimeEntry(String fileFullPath, DateTime dateTime) at NuGet.Packaging.ZipArchiveExtensions.Testable.UpdateFileTimeFromEntry(ZipArchiveEntry entry, String fileFullPath, ILogger logger) at NuGet.Packaging.ZipArchiveExtensions.UpdateFileTimeFromEntry(ZipArchiveEntry entry, String fileFullPath, ILogger logger) at NuGet.Packaging.PackageArchiveReader.CopyFiles(String destination, IEnumerable1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token)\r\nat NuGet.Packaging.PackageReaderBase.CopyFilesAsync(String destination, IEnumerable1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken) at NuGet.Packaging.PackageExtractor.<>c__DisplayClass5_2.<<InstallFromSourceAsync>b__0>d.MoveNext() --- End of stack trace from previous location --- at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func2 action, CancellationToken token)\r\nat NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func2 action, CancellationToken token) at NuGet.Packaging.PackageExtractor.InstallFromSourceAsync(PackageIdentity packageIdentity, IPackageDownloader packageDownloader, VersionFolderPathResolver versionFolderPathResolver, PackageExtractionContext packageExtractionContext, CancellationToken token, Guid parentId) at NuGet.Commands.ProjectRestoreCommand.InstallPackageAsync(RemoteMatch installItem, NuGetv3LocalRepository userPackageFolder, PackageExtractionContext packageExtractionContext, CancellationToken token) at NuGet.Commands.ProjectRestoreCommand.<>c__DisplayClass15_1.<<InstallPackagesAsync>b__4>d.MoveNext() --- End of stack trace from previous location --- at NuGet.Commands.ProjectRestoreCommand.InstallPackagesAsync(HashSet1 uniquePackages, IEnumerable1 graphs, IList1 downloadDependencyInformations, NuGetv3LocalRepository userPackageFolder, CancellationToken token)\r\nat NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity, String telemetryPrefix)\r\nat NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity) at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token) at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token) at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, IRestoreProgressReporter progressReporter, CancellationToken token) at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List1 restoreTasks)\r\nat NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreArgs, CancellationToken token)\r\nat NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\nat NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\nat NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log)\r\nDone executing task \"RestoreTask\" -- FAILED.\r\n1>Done building target \"Restore\" in project \"Project.csproj\" -- FAILED.\r\n1>Done Building Project \"/opt/agent/_work/1/s/Project.csproj\" (Restore target(s)) -- FAILED.\r\n\r\n`\n```\n"},{"Id":"42561662440","Type":"IssuesEvent","CreatedAt":"2024-10-04T22:36:34","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13836","RelatedDescription":"Opened issue \"Could not write to output file 'C:\\.xml' -- 'Access to the path 'C:\\.xml' is denied\" (#13836) at NuGet/Home","RelatedBody":"I'm unable to build our repo without an attempt to write to my system's root ('C:\\.xml'). \r\n\r\n>  Publishing test extension artifacts...\r\n>   C:\\NuGet.Client\\artifacts\\GenerateTestPackages\\bin\\Debug\\net472\\GenerateTestPackages.exe -> C:\\NuGet.Client\\artifacts\\\\TestExtensions\r\n> CSC : error CS0016: Could not write to output file 'C:\\.xml' -- 'Access to the path 'C:\\.xml' is denied.' [C:\\NuGet.Client\\test\\TestExtensions\\TestableVSCredentialProvider\\TestableVSCredentialProvider.csproj]\r\n>   NuGet.VisualStudio.OnlineEnvironment.Client -> C:\\NuGet.Client\\artifacts\\NuGet.VisualStudio.OnlineEnvironment.Client\\bin\\Debug\\net472\\NuGet.VisualStudio.OnlineEnvironment.Client.dll\r\n>   NuGet.VisualStudio.Client -> C:\\NuGet.Client\\artifacts\\NuGet.VisualStudio.Client\\bin\\Debug\\net472\\NuGet.VisualStudio.Client.dll\r\n>   NuGet.Localization -> C:\\NuGet.Client\\artifacts\\NuGet.Localization\\bin\\Debug\\netstandard2.0\\NuGet.Localization.dll\r\n> C:\\NuGet.Client\\build\\build.proj(163,5): error MSB4181: The \"MSBuild\" task returned false but did not log an error.\r\n> \r\n> Build FAILED.\r\n> \r\n> CSC : error CS0016: Could not write to output file 'C:\\.xml' -- 'Access to the path 'C:\\.xml' is denied.' [C:\\NuGet.Client\\test\\TestExtensions\\TestableVSCredentialProvider\\TestableVSCredentialProvider.csproj]\r\n> C:\\NuGet.Client\\build\\build.proj(163,5): error MSB4181: The \"MSBuild\" task returned false but did not log an error.\r\n>     0 Warning(s)\r\n>     2 Error(s)\r\n> \r\n> Time Elapsed 00:05:07.39"},{"Id":"42561384334","Type":"IssuesEvent","CreatedAt":"2024-10-04T22:18:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13835","RelatedDescription":"Opened issue \"Read and write .nupkg.metadata files with System.Text.Json\" (#13835) at NuGet/Home","RelatedBody":"System.Text.Json has lower allocations and higher performance.\r\n\r\nAnyone using the NuGet Client SDK's `NuGetMetadataFileFormat` `.Read` and `.Write` overloads with the `TextReader` or `TextWriter` parameters will have a breaking change. System.Text.Json doesn't read or write these text streams, only UTF8 byte steams.  But there's little reason for anyone to use the stream (byte or text) overloads, it's easier for most people to pass the path, and let NuGet open the file."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-08T03:30:21.6368747Z","RunDurationInMilliseconds":873}