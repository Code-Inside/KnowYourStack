{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44841393717","Type":"PullRequestEvent","CreatedAt":"2024-12-16T19:59:51","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10309","RelatedDescription":"Merged pull request \"Update EntityFramework package for vulnerability alert \" (#10309) at NuGet/NuGetGallery","RelatedBody":"EntityFramework 6.4.4 is deprecated with vulnerable, update to latest stable. \r\n\r\nNote: There is change:  New SQL Server / Azure SQL Database provider (contributed by the community) - [Microsoft.EntityFramework.SqlServer](https://www.nuget.org/packages/Microsoft.EntityFramework.SqlServer/). This new provider uses the modern SQL Server client [Microsoft.Data.SqlClient](https://www.nuget.org/packages/Microsoft.Data.SqlClient). For more information about configuration of this provider, see [Microsoft.EntityFramework.SqlServer Guide](https://learn.microsoft.com/en-us/ef/ef6/what-is-new/microsoft-ef6-sqlserver).\r\n\r\nIt provides new provider configuration, no changes on default one. We should be good\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5732"},{"Id":"44809599112","Type":"IssuesEvent","CreatedAt":"2024-12-16T02:13:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Github repository dependenc list should not include package's own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Describe the bug\r\n\r\nI found a few times that a nuget package lists its own repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\r\n\r\n### Repro Steps\r\n\r\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\r\n\r\n### Expected Behavior\r\n\r\nIt should not list its own Github repo as a dependent repo.\r\n\r\n### Screenshots\r\n\r\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"44807074974","Type":"IssuesEvent","CreatedAt":"2024-12-15T22:54:46","Actor":"tonyqus","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Github repository dependency list should not include its own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nI found a few times that a nuget package lists it's self repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\n\n### Repro Steps\n\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\n\n### Expected Behavior\n\nIt should not list its own Github repo as a dependent repo.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44902107302","Type":"IssuesEvent","CreatedAt":"2024-12-18T10:25:01","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14005","RelatedDescription":"Opened issue \"[Bug Bash] Inconsistent package owners show on the right of the package ID between “Browse” tab and “Installed” tab\" (#14005) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.99\n\n### Worked before?\n\nIt is not a regression since it also reproes on D17.12\\33523.42 with implicit NuGet Client 6.12.1.1. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\n1. The repro rate is 100%.  \r\n\r\n2. This issue does not repro when no “Owner(s)” in “Package Details” section of detail pane in “Browse” tab. \r\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET 9.0) project in VS. \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.  \r\n\r\n3. Select the package source: \"nuget.org\" near the gear button.  \r\n\r\n4. Go to the “Browse\" tab, install package “Microsoft.Extensions.Logging” into the Project. \r\n\r\n5. Observe the package owners on the right of package ID. \r\n\r\n6. Go to the “Installed” tab and observe the package owners on the right of package ID. \r\n\r\n \r\n\r\n#### Expected:    \r\n\r\nThe package owners should be consistent for the same package between “Browse” tab and “Installed” tab. \r\n\r\n \r\n\r\n#### Actual:    \r\n\r\nInconsistent package owners show on the right of the package ID between “Browse” tab and “Installed” tab as below screenshots:  \r\n![image](https://github.com/user-attachments/assets/1862c6e6-c4ce-49cc-8b1c-b3e5cbfb7f48)\r\n![image](https://github.com/user-attachments/assets/a43139f8-3e93-4e24-a5ab-293cae75dec1)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44900888752","Type":"IssuesEvent","CreatedAt":"2024-12-18T09:51:10","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13857","RelatedDescription":"Closed issue \"System.Text.Json 8.0.4 has security vulnerability\" (#13857) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nlatest\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nNuGet.Client references System.Text.Json 8.0.4: \r\n https://github.com/NuGet/NuGet.Client/blob/fd6880078a435aa63fb1290e9bc58fb8dea6a4fd/Directory.Packages.props#L8\r\n\r\nThis version has a security vulnerability:  https://github.com/advisories/GHSA-8g4q-xg66-9fp4\n\n### Verbose Logs\n\n_No response_"},{"Id":"44899992507","Type":"IssuesEvent","CreatedAt":"2024-12-18T09:26:11","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14004","RelatedDescription":"Opened issue \"[Bug Bash] The vulnerable info shows inconsistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”\" (#14004) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.99\n\n### Worked before?\n\nIt is not regression since it reproes on VS 17.12.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.99\r\nVS Version: Main\\35617.63\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\n1.\tThe repro rate is 100%.  \r\n2.\tIt is not regression since it reproes on VS 17.12.\r\n#### Repro Steps:    \r\n1.\tCreate a “C# Console App (.NET Framework 4.8.1)” project.    \r\n2.\tRight-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open the PM UI.   \r\n3.\tSelect the package sources “nuget.org” from “Package source” dropdown box and search for the package “Microsoft.Data.Services.Client”. \r\n4.\tSelect.”5.8.0” in the “Version” dropdown list and click “Install” button.\r\n5.\tGo to “Installed” tab and observe the package info in both “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”.\r\n\r\n#### Expected Result:\r\nThe vulnerable info shows consistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”.\r\n#### Actual Result:\r\nThe vulnerable info shows inconsistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData” as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/c78e89da-614f-467a-824d-9c3679850eab)\n\n### Verbose Logs\n\n_No response_"},{"Id":"44878651231","Type":"IssuesEvent","CreatedAt":"2024-12-17T18:03:53","Actor":"wasabii","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14003","RelatedDescription":"Opened issue \"MSBuild SDK Resolver installing package into user-wide globalPackagesFolder, not project specific one\" (#14003) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.0\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI have a custom nuget.config file located in a parent directory to a number of project files. These project files reference a custom MSBuild SDK. The goal is for this project to have it's own private nuget packages directory and source directory. They get cleared on each run. This is a testing framework for a custom SDK.\r\n\r\nThe file is generated for each run and looks like this:\r\n\r\n```\r\n<configuration>\r\n  <config>\r\n    <add key=\"globalPackagesFolder\" value=\"C:\\Users\\jhaltom\\AppData\\Local\\Temp\\IKVM.Clang.Sdk.Tests\\cfee2923-e131-4371-b914-6f651a0c591b\\nuget\\packages\" />\r\n  </config>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"dev\" value=\"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\nuget\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nWhen MSBuild tries to restore the SDK, however, it places it in my default global package cache:\r\n\r\n```\r\nInstalled IKVM.Clang.Sdk 1.0.0-dev0 from D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\nuget to D:\\packages\\NuGet\\cache\\ikvm.clang.sdk\\1.0.0-dev0 with content hash xkcFGoQx+RDM/u6YbF1JsjrMzlaIyhpRIqg5e3DhthuaOIVsSVU3+Sk9zptaDe1eCmvS4/n5E3yXAJvZ/sLh7A==.\r\n```\r\n\r\nAs you can see from this message, it grabbed the package from the correct source location. But it is extracting it to the wrong location.\r\n\r\n@baronfel (on DotNetEvolution) did a check to see if the MSBuild code loaded the settings correctly. He affirms it does so and advised me to open this bug.\n\n### Verbose Logs\n\n```shell\nI do have a very large log file, but there are only a handful of messages related to SDK resolution:\r\n\r\n\r\nTestContext Messages:\r\nTestRoot: D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Project\r\nTempRoot: C:\\Users\\jhaltom\\AppData\\Local\\Temp\\IKVM.Clang.Sdk.Tests\\cfee2923-e131-4371-b914-6f651a0c591b\r\nWorkRoot: D:\\ikvm-clang\\TestResults\\Deploy_JeromeHaltom 20241217T114937\\IKVM.Clang.Sdk.Tests\\ProjectTests\r\nBuild started.\r\nProcess = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\MSBuild.exe\"\r\nMSBuild executable path = \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\MSBuild.exe\"\r\nCommand line arguments = \"\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\MSBuild.exe\"  /noconsolelogger /v:diag /target:Restore /property:ProvideCommandLineArgs=\"true\";GenerateResourceMSBuildArchitecture=\"CurrentArchitecture\";ResolveNuGetPackages=\"true\";CreateHardLinksForCopyAdditionalFilesIfPossible=\"true\";SolutionDir=\"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Project\\Executable\\\\\";CreateHardLinksForPublishFilesIfPossible=\"true\";CreateHardLinksForAdditionalFilesIfPossible=\"true\";CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=\"true\";ImportDirectoryBuildTargets=\"false\";CreateHardLinksForCopyLocalIfPossible=\"true\";ImportDirectoryBuildProps=\"false\";Configuration=\"Debug\";PackageVersion=\"1.0.0-dev0\";RestorePackagesPath=\"C:\\Users\\jhaltom\\AppData\\Local\\Temp\\IKVM.Clang.Sdk.Tests\\cfee2923-e131-4371-b914-6f651a0c591b\\nuget\\packages\\\\\" /l:BuildalyzerLogger,\"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Buildalyzer.Logger.dll\";4696;True /noAutoResponse \"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Project\\Executable\\Executable.clangproj\"\"\r\nCurrent directory = \"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Project\"\r\nMSBuild version = \"17.12.12+1cce77968\"\r\nBased on the Windows registry key LongPathsEnabled, the LongPaths feature is enabled.\r\nBased on the Windows registry key VerifiedAndReputablePolicyState, SAC state = 0: turned off.\r\n```\r\n\r\n```\r\n The \"Microsoft.DotNet.MSBuildSdkResolver\" resolver attempted to resolve the SDK \"IKVM.Clang.Sdk\".\r\nWarnings: null\r\nErrors: C:\\Program Files\\dotnet\\sdk\\8.0.111\\Sdks\\IKVM.Clang.Sdk\\Sdk not found. Check that a recent enough .NET SDK is installed and/or increase the version specified in global.json.\r\n```\r\n\r\nIt continues from the above.\r\n\r\n```\r\n The SDK \"IKVM.Clang.Sdk\" was successfully resolved by the \"NuGetSdkResolver\" resolver to location \"D:\\packages\\NuGet\\cache\\ikvm.clang.sdk\\1.0.0-dev0\\Sdk\" and version \"1.0.0-dev0\".\r\nImporting project \"D:\\packages\\NuGet\\cache\\ikvm.clang.sdk\\1.0.0-dev0\\Sdk\\Sdk.props\" into project \"D:\\ikvm-clang\\src\\IKVM.Clang.Sdk.Tests\\bin\\Debug\\net8.0\\Project\\Executable\\Executable.clangproj\" at (2,5).\r\n```\r\n\r\nEach time I clear the global directory and rerun it reextracts the nugpkg into the same incorrect location. Tried clearing it completely.\n```\n"},{"Id":"44876871307","Type":"IssuesEvent","CreatedAt":"2024-12-17T17:11:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14002","RelatedDescription":"Opened issue \"Document PrunePackageReference and all the details around it \" (#14002) at NuGet/Home","RelatedBody":"PR https://github.com/NuGet/NuGet.Client/pull/6142, design https://github.com/NuGet/Home/blob/dev/accepted/2024/prune-package-reference.md."},{"Id":"44875100027","Type":"IssuesEvent","CreatedAt":"2024-12-17T16:22:49","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13943","RelatedDescription":"Closed issue \"New dependency resolver downloads more packages than before\" (#13943) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\nAs an optimization, the new dependency resolver downloads packages in parallel.  However, when processing the direct package references, the dependencies are also downloaded when they weren't before.\r\n\r\nFor example:\r\n```\r\nProject -> A 1.0 -> B 1.0\r\nProject -> B 2.0\r\n```\r\n\r\nThe new resolver queues up a task to download `A 1.0` and `B 2.0`.  Then it processes `A 1.0` and queues up a download of `B 1.0`.  Then it processes `B 2.0` which ends up being the resolved version.  However, since `B 2.0` was directly referenced, NuGet does not need to technically download `B 1.0`. \r\n\r\n### Desired Behavior\r\n\r\nWe should process all of the direct dependencies first and then use background tasks to download children after that, ensuring that extra packages are not downloaded.\r\n\r\n### Additional Context\r\n\r\nSome users are hitting issues since their feeds don't offer up the packages.  So even though the resolved graph is identical, they experience restore failures.\r\n\r\n### Workaround\r\n\r\nUsers can workaround the issue by setting an MSBuild property in their `Directory.Build.props` or an environment variable:\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <RestoreUseLegacyDependencyResolver>true</RestoreUseLegacyDependencyResolver>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n### Related Issues\r\nhttps://github.com/NuGet/Home/issues/13930\r\nhttps://dev.azure.com/devdiv/DevDiv/_workitems/edit/2301598"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-19T03:30:21.5112321Z","RunDurationInMilliseconds":1117}