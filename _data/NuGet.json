{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40641669371","Type":"PullRequestEvent","CreatedAt":"2024-07-31T23:57:51","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10098","RelatedDescription":"Opened pull request \"Update nuget client packages\" (#10098) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/5532\r\n\r\nSince transitive `system.formats.asn1` package depends on NuGet root package, we just update the root package"},{"Id":"40638358493","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:52:52","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10097","RelatedDescription":"Opened issue \"[Feature]: Refresh NuGet.org landing page\" (#10097) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nThe NuGet landing page has served users well over the years, however there are a number of enhancements that could make it more friendly to new users and community members alike.\r\n\r\nI propose the following changes to the homepage with a mockup and proper design to be determined:\r\n\r\n- NuGet logo and name is more prominent above the search bar\r\n- Search bar height is increased 2x or more\r\n- Remove \"Create .NET apps faster with NuGet\"\r\n- Subtitle of \"The official package repository for .NET apps.\" below search bar\r\n- Publish a package button below subtitle (https://www.nuget.org/packages/manage/upload)\r\n- Download .NET and getting started buttons (one links to dotnet SDK, another to NuGet getting started docs) near publish a package\r\n- Move circuit board graphic & stats below these CTA to introduce featured packages\r\n- New \"Packages\" section including Featured(or most popular), recently updated, and new to NuGet including 10 packages in each category.\r\n- Removal of What is NuGet?, Learn, Explore, Create sections in favor of items above.\r\n- Footer keep as is\r\n\r\nA proper design will be linked to this tracking issue to visualize what is being proposed\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40635163306","Type":"PullRequestEvent","CreatedAt":"2024-07-31T18:47:20","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10096","RelatedDescription":"Opened pull request \"[Dark Mode] Fix table row colors in dark mode\" (#10096) at NuGet/NuGetGallery","RelatedBody":"Wrong style for some table rows in the package readme section.\r\n### Before\r\n![image](https://github.com/user-attachments/assets/af0992af-c874-417b-8aa2-229220eaae4e)\r\n\r\n### After\r\n![image](https://github.com/user-attachments/assets/05816d82-ebb1-4c1c-88f8-3e80f52393d5)\r\n![image](https://github.com/user-attachments/assets/b7216fc0-55ac-47ed-a87c-2fb2d1594554)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/10065"},{"Id":"40634783205","Type":"IssuesEvent","CreatedAt":"2024-07-31T18:32:41","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9936","RelatedDescription":"Closed issue \"[Dark Theme] Functional test are not passing due to minification of CSS files\" (#9936) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40637765605","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:28:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13666","RelatedDescription":"Opened issue \"Transitive vulnerabilities should bubble up warning icons to the dependencies node in VS solution explorer\" (#13666) at NuGet/Home","RelatedBody":"From internal discussion on how to enable this:\r\n\r\n> The only outstanding work I'm aware of here is showing warnings/errors on top-level dependencies. This data needs to come from the design-time build targets, via `DiagnosticLevel` metadata. Could the NuGet team please see whether they can add this data during DTBs?\r\n\r\n> ResolvedPackageReference returned from target ResolvePackageDependenciesDesignTime\r\n> ResolvedProjectReference returned from target ResolveProjectReferencesDesignTime2"},{"Id":"40637579438","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:20:36","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13665","RelatedDescription":"Opened issue \"[Feature] Automatically remediate known vulnerabilities in dependencies by upgrading them.\" (#13665) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nThe CLI and VS tooling should be able to automatically remediate known vulnerabilities in dependencies by upgrading them. This issue tracks the PR design of https://github.com/NuGet/Home/pull/11549 which would provide this functionality through a new `dotnet audit` and `dotnet audit fix` command.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40637316398","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:10:25","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13664","RelatedDescription":"Opened issue \"[Feature] Use static analysis to understand whether a vulnerable code path is actually reachable\" (#13664) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\ngovulncheck enables developers to find vulnerabilities in their codebase but only surfaces vulnerabilities that actually affect you, based on which functions in your code are transitively calling the vulnerable functions.\r\n\r\nhttps://go.dev/security/vuln\r\n\r\nHere is an interesting perspective about it from the govulncheck creator: https://abyssdomain.expert/@filippo/112626531259021350\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40634772108","Type":"IssuesEvent","CreatedAt":"2024-07-31T18:32:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13487","RelatedDescription":"Closed issue \"There is no doc for NU1702\" (#13487) at NuGet/Home","RelatedBody":"There is for `NU1701` and there is for `NU1703`.\r\n\r\nBut not for `NU1702` which reads as following:\r\n\r\n```\r\nWarning\r\nNU1702\r\nProjectReference 'MyProject.csproj' was resolved using '.NETFramework,Version=v4.6.2' instead of the project target framework '.NETCoreApp,Version=v3.1'. This project may not be fully compatible with your project.\t\r\n```\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 377ae860-386f-149f-c5e0-410d3aa89dbc\r\n* Version Independent ID: 2b145147-fd3f-d1aa-2694-071a31542d9a\r\n* Content: [NuGet Warning NU1701](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1701)\r\n* Content Source: [docs/reference/errors-and-warnings/NU1701.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/reference/errors-and-warnings/NU1701.md)\r\n* Product: **nuget**\r\n* GitHub Login: @zhili1208\r\n* Microsoft Alias: **lzhi**"},{"Id":"40633981848","Type":"IssuesEvent","CreatedAt":"2024-07-31T18:04:23","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13060","RelatedDescription":"Closed issue \"PM UI transitive dependencies should display all transitive dependencies, not just ones brought in through packages directly installed in a project\" (#13060) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nThere's many facets to this: \r\n\r\nExample 1: \r\n\r\n\r\nStart with a project Library, referencing Newtonsoft.Json version 12.0.3, which is vulnerable. \r\nReference that project from an application. \r\nGo to the application project, see you have no packages listed (despite having transitive packages)\r\n\r\nThis is incorrect, since Newtonsoft.Json is a transitive package to Application through library. \r\nYes, library the project directly installing it, but in the end it is available for coding in Application in the default behavior for packages. \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"12.0.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n[Example1.zip](https://github.com/NuGet/Home/files/13519378/Example1.zip)\r\n\r\n\r\nExample 2: \r\n\r\nBuilding on top of example 1, say you install NuGet.Packaging version 5.11.5. \r\nNote that this references version 9.0.1, while the project references version 12.0.3. \r\n\r\nNote that the transitive package itself is shown, despite the fact that it is the project itself that brings in the transitive package. \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/c2d9f29f-6995-49b1-88fa-4543fe74554e)\r\n\r\n[Example2.zip](https://github.com/NuGet/Home/files/13519455/Example2.zip)\r\n\r\nExample 3: \r\n\r\nSay you have the following application project: \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nAnd the following library project; \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\t<NoWarn>NU1605</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"6.0.4\" />  \r\n  </ItemGroup>\r\n\t\r\n  <ItemGroup>\r\n\t<PackageReference Include=\"NuGet.Packaging\" Version=\"5.11.5\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIf you restore these projects in Visual Studio, you'd get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/612c7d72-a693-48c0-b1e2-50147a408a7f)\r\n\r\nYet, if you open the PM UI, you get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/ddc62799-4633-4520-a41c-c459f3922186)\r\n\r\nIt inconsistent with what restore shows\r\n\r\nFor all these examples, there is an inconsistency. \r\n\r\n- dotnet list package --include-transitive shows all transitive packages\r\n- Solution Explorer shows all transitive packages (on demand, you need to expand them).\r\n- Inconsistent with restore\r\n\n\n### Desired Behavior\n\nShow all transitive packages, regardless of how they were installed.\r\n\r\nThe current behavior leads to inconsistency among Package Manager UI, Solution Explorer, dotnet list package and restore itself.\r\nThe behavior should be aligned.\n\n### Additional Context\n\n_No response_"},{"Id":"40632732922","Type":"IssuesEvent","CreatedAt":"2024-07-31T17:18:26","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13663","RelatedDescription":"Opened issue \"VS restore won't respect project prefix in the lock file\" (#13663) at NuGet/Home","RelatedBody":"Internal ticket: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2172224\r\n\r\nThis is a weird bug, when you are using lock files and have a `ProjectA` referencing `ProjectB` **and add a prefix in the `Directory.Build.props`** with a `PackageReference` to Nugetizer, the lock file is going to produce different outputs depending on where restore was made.\r\n\r\nVS will output something like this:\r\n\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"referencedproject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhile doing a `dotnet restore` it will result in:\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"A.Prefix.ReferencedProject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExample Directory.Build.props:\r\n\r\n```xaml\r\n<Project>\r\n  <PropertyGroup>\r\n    <LangVersion>latest</LangVersion>\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n\r\n    <AssemblyPreffix Condition=\"$(AssemblyPreffix) == ''\">A.Prefix</AssemblyPreffix>\r\n    <AssemblyName Condition=\"$(AssemblyName) == ''\">$(MSBuildProjectName)</AssemblyName>\r\n    <AssemblyName Condition=\"!$(AssemblyName.StartsWith(AssemblyPreffix))\">$(AssemblyPreffix).$(AssemblyName)</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"!$(MSBuildProjectName.Contains('ReferencedProject'))\">\r\n    <ProjectReference Include=\"..\\ReferencedProject\\ReferencedProject.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nExample ReferencedProject.csproj:\r\n\r\n```xaml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGetizer\" Version=\"*\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```"},{"Id":"40616163861","Type":"IssuesEvent","CreatedAt":"2024-07-31T09:03:22","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13662","RelatedDescription":"Opened issue \"Fail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx\" (#13662) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet SDK 9.0.100-rc.1.24380.5\n\n### Worked before?\n\nIt’s not a regression since this is a new feature.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\t[Patch dotnet  SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (patch 9.0.1xx with Nupkgs from Dev latest). \r\n2.\tOpen a command prompt (called prompt1), go to the PatchedSDK folder and create a .NET SDK project with command `dotnet new console  -n NetCoreConsole `\r\n3.\tIn the solution folder, create a file named nuget.config with the following content: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\"/> \r\n  </packageSources> \r\n</configuration>\r\n```\r\n4.\tOpen the .csproj file for your project and insert the following package reference within an ItemGroup: \r\n```\r\n<ItemGroup> \r\n  <PackageReference Include=\"abcdefghijkl\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n5.\tOpen a second command prompt (called prompt2), go to the PatchedSDK folder and build the server by running:  \r\n`dotnet build   …Entropy\\filebackedserver\\filebackedserver.csproj `\r\n6.\tStart the local server by executing: \r\n`dotnet run --project  ….Entropy\\filebackedserver\\filebackedserver.csproj `\r\n\r\n#### Expected Result:\r\nSucceed to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n\r\n#### Actual Result:\r\nFail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n![image](https://github.com/user-attachments/assets/b231ecdb-9fa9-4fbc-80b4-13488cb285f5)\r\n#### Note:\r\n1.The repro rate: 100%.\r\n2.It should be fixed since NuGet Dev latest matches .NET SDK 9.0 now and the failure would block the following step of the test case 'TLSCertificateValidation'.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40594577036","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:16:26","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13498","RelatedDescription":"Closed issue \"Add documentation for `allowInsecureConnections` option\" (#13498) at NuGet/Home","RelatedBody":"Add documentation for `allowInsecureConnections` option in the following commands\r\n- `nuget add`\r\n- `nuget update`"},{"Id":"40594541380","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:15:16","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13502","RelatedDescription":"Closed issue \"Add documentation for NU1302 \" (#13502) at NuGet/Home","RelatedBody":"Add documentation for NU1302 "},{"Id":"40581453516","Type":"IssuesEvent","CreatedAt":"2024-07-30T09:54:32","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13660","RelatedDescription":"Opened issue \"NuGet cache clearing fails after clicking the button “Clear All NuGet Storage” in “Options->NuGet Package Manager ->General” window for SDK project \" (#13660) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.12.0.36\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro before .NET MAUI (.NET 9 Preview) is involved to the VS Workloads.\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET 8.0) project in VS and open the PM UI or PMC window. \r\n\r\n2. Install several packages (e.g. Newtonsoft.Json and log4net) through PM UI. \r\n\r\n3. Click the settings button (gear button) on PM UI or PMC window. \r\n\r\n4. Click the “NuGet Package Manager->General” in the opened “Options” window. \r\n\r\n5. Click the button “Clear All NuGet Storage” and check the message. \r\n\r\n#### Expected:    \r\n\r\nThe message should show correctly like “NuGet storage cleared at [Time]” \r\n\r\n\r\n#### Actual: \r\n\r\nNuGet cache clearing fails as below: \r\n![Unbenannt_0730](https://github.com/user-attachments/assets/c1308af7-b037-4c25-a488-36673300c8d6)\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%. \r\n2. It blocked installing all packages after clicking the “Clear All NuGet Storage” button. \r\n3. It only reproes after installing the “.NET MAUI (.NET 9 Preview)” workload from .NET Multi-platform App UI development in VS installer, doesn’t repro if you didn’t install that workload. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40572623181","Type":"IssuesEvent","CreatedAt":"2024-07-30T04:28:51","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13479","RelatedDescription":"Closed issue \"Document auditSources \" (#13479) at NuGet/Home","RelatedBody":"document new feature: https://github.com/NuGet/NuGet.Client/pull/5708\r\n\r\nNew feature:\r\n* https://github.com/NuGet/Home/blob/dev/accepted/2023/NuGetAudit-without-nuget.org-as-packageSource.md\r\n* https://github.com/NuGet/Home/issues/12698\r\n* https://github.com/NuGet/Home/issues/13211"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-01T03:30:20.3290947Z","RunDurationInMilliseconds":933}