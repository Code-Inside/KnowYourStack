{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32818222421","Type":"IssuesEvent","CreatedAt":"2023-10-24T22:40:21","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9283","RelatedDescription":"Closed issue \"[NuGet.org Bug]: URL to go to frameworks tab doesn't work\" (#9283) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nGo to any package on nuget.org. Right click the framework tab and select \"open in new tab\". The URL is something like: https://www.nuget.org/packages/NuGet.Frameworks#supportedframeworks-tab however it does not open directly to the frameworks tab (it seems to remember what the last tab I had open was, say the readme)\n\n### Repro Steps\n\n1. Go to any package on nuget.org and change your tab to readme\r\n2. Open https://www.nuget.org/packages/NuGet.Frameworks#supportedframeworks-tab\r\n\n\n### Expected Behavior\n\nnuget.org should show the frameworks tab for the package\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"32811247505","Type":"IssuesEvent","CreatedAt":"2023-10-24T17:22:29","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9511","RelatedDescription":"Closed issue \"[NuGet.org Bug]: FAQ goes to client FAQ, not server FAQ\" (#9511) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe FAQ page on nuget.org redirects to https://learn.microsoft.com/en-us/nuget/resources/nuget-faq\r\n\r\nThere is however a better FAQ about NuGet.org that's located here: https://learn.microsoft.com/en-us/nuget/nuget-org/nuget-org-faq\r\n\r\n\n\n### Repro Steps\n\n1. Open https://www.nuget.org/\r\n2. Click on \"FAQ\" at the bottom\r\n3. Directed to https://learn.microsoft.com/en-us/nuget/resources/nuget-faq\n\n### Expected Behavior\n\n1. Open https://www.nuget.org/\r\n2. Click on \"FAQ\" at the bottom\r\n3. Directed to https://learn.microsoft.com/en-us/nuget/nuget-org/nuget-org-faq\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32820466323","Type":"IssuesEvent","CreatedAt":"2023-10-25T01:30:15","Actor":"adcloeshelle","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12967","RelatedDescription":"Opened issue \"[CPM] Don't add Package versions when creating a new project if CPM is enabled\" (#12967) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nOther/NA\n\n### Current Behavior\n\nWhen you create a new project with certain templates, PackageReferences are added by default. Even if CPM is enabled, the Package version is specified in the PackageReference which leads to a compile error.\n\n### Desired Behavior\n\nIf CPM is enabled, the package version should not be specified by default.\n\n### Additional Context\n\nThis allows a developer to create a new project and compile it without any initial errors."},{"Id":"32820439678","Type":"IssuesEvent","CreatedAt":"2023-10-25T01:28:12","Actor":"adcloeshelle","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12966","RelatedDescription":"Opened issue \"[CPM] When using CPM, default to the version specified in Directory.Packages.props when adding a package in the NuGet UI\" (#12966) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nWhen you add a new NuGet package, the default version selected is the latest version.\n\n### Desired Behavior\n\nIdeally, the default version selected is the version specified in Directory.Packages.props.\n\n### Additional Context\n\nThis will make it harder for developers to accidentally change the package version for all projects in the repository. It also makes it easy to know which version to select "},{"Id":"32811954619","Type":"IssuesEvent","CreatedAt":"2023-10-24T17:51:06","Actor":"JoeMarkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12964","RelatedDescription":"Opened issue \"Make adding the latest package easier\" (#12964) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nI am working on a set of training materials for .NET 8, so I first create a new project using\r\n\r\n`dotnet new webapi -n API -f net8.0`\r\n\r\nThat works and makes sense.\r\n\r\nNext, I want to add the latest version (including pre-relesase) \r\n\r\nThe latest one as of today is  Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.0-rc.2.23480.2\r\n\r\nAs I know the version changes often, I want to install the latest 8.* version (including pre-releases) and as a senior developer, I expect, \"this should be easy!!!\" But here I am one hour latest, amazed how this simple task is impossible to figure out.\r\n\r\nI have tried:\r\n\r\n```\r\ndotnet add API\\API.csproj package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.*\r\n\r\nThen I get \r\nerror: Package 'Microsoft.AspNetCore.Authentication.JwtBearer' is incompatible with 'all' frameworks in project 'API\\API.csproj'.\r\n\r\n```\r\n\r\nI have tried\r\n\r\n```\r\ndotnet add API\\API.csproj package Microsoft.AspNetCore.Authentication.JwtBearer --prerelease --version 8.*\r\n\r\nThen I get \r\nerror: The --prerelease and --version options are not supported in the same command.\r\n\r\n```\r\n\r\nSo, my question is why should this simple problem be so hard to solve?\r\n\r\n\r\n\r\nand this works! but I want the latest version! not just a specific version (yes I know that is good practice to always specify).\r\n\r\nAt least, the help could be a bit better, guiding me forward!\r\n\r\n\r\n\r\n \n\n### Additional Context and Details\n\nYes, I have tried \r\n\r\ndotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.0-rc.2.23480.2\r\n\r\n\r\n"},{"Id":"32793997355","Type":"IssuesEvent","CreatedAt":"2023-10-24T07:00:40","Actor":"umerkle","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12963","RelatedDescription":"Opened issue \"Check access when adding a new source\" (#12963) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe\n\n### The Elevator Pitch\n\nIf you add a new package source with 'nuget sources Add' or also with 'dotnet nuget add source', you have to specify credentials if the source is a private one.\r\nCurrently, it seems, that NuGet does not check those credentials and says 'successfully added' after adding the source to NuGet.Config. But you will notice errors, when trying to access the source repo.\r\n\r\nSo my request is, to check these credentials prior to adding the source to NuGet.Config.\r\n\r\nAs @zivkan mentioned in the [discussion](https://github.com/NuGet/Home/discussions/12959), this may break CI scripts.\r\nBut perhaps this feature can be optional and activated via a parameter or so?\r\n\n\n### Additional Context and Details\n\nI think this feature would be helpful in preventing errors on getting packages from private sources.\r\nEspecially if you use encrypted passwords (e.g. on Windows) and you can not easily check a misstyped password.\r\n\r\nIn my case, i use adding sources dynamically in Gitlabs CI/CD pipeline. In the log, i can not see the used password and since it is running in an ephemeral container, i can also not see it in NuGet.Config file. So hunting for errors is hard and could be easier if NuGet would tell about wrong credentials."},{"Id":"32777485768","Type":"PullRequestEvent","CreatedAt":"2023-10-23T16:00:28","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/12886","RelatedDescription":"Merged pull request \"Spec for `dotnet package search` : implements a `search` functionality.\" (#12886) at NuGet/Home","RelatedBody":"This PR \r\n- provides a spec for implementing `search` functionality in DotNet.\r\n- Here is the implementation PR: https://github.com/NuGet/NuGet.Client/pull/5466\r\nI previously made a spec that included this as a sub project, however, I noticed that making its own spec for it would be a better idea. Here is a link to the other PR : https://github.com/NuGet/Home/pull/12870 . "},{"Id":"32774057655","Type":"IssuesEvent","CreatedAt":"2023-10-23T14:14:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12962","RelatedDescription":"Opened issue \"NuGet should automatically send credentials after the first request with a HTTP 401 response\" (#12962) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nall\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nsee:\r\n\r\n* https://github.com/NuGet/Home/issues/12517\r\n\r\nAfter NuGet experiences one HTTP 401 response from a server, sending more unauthenticated requests just increases latency and increases the server workload processing these requests.\r\n\r\nAny action where NuGet makes more than 1 HTTP request to a server will reproduce the result. For a V3 feed, since the first request is the service index, it's effectively possible to restore a single package, or open the browse tab in PM UI\r\n\r\n\r\nIn HttpSourceAuthenticationHandler, when a response is a HTTP 401, NuGet needs to check if the WWW-Authenticate header exists, and if so, when it responds with the Basic scheme, NuGet needs to explicitly set the Authorization header on all future requests. If a future 401 response is received, credentials should be re-requested, in case the customer interactively provided a credential and made a typo, or if a cred provider returned a time-limited token that needs to be refreshed.\r\n\r\nSince we're going to have to handle Basic authentication ourselves, it would be great to also handle Bearer, since that will enable OAuth2 (including OIDC) credential providers. It should be effectively zero cost to add once Basic is handled.\r\n\r\n* https://github.com/NuGet/Home/issues/12877\n\n### Verbose Logs\n\n```shell\nWe previously tried HttpClientHandler.PreAuthenticate, but there's a bug in the .NET runtime:\r\n\r\n* https://github.com/dotnet/runtime/issues/93340\n```\n"},{"Id":"32773476769","Type":"IssuesEvent","CreatedAt":"2023-10-23T13:57:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12961","RelatedDescription":"Opened issue \"HTTP 401 after some time in VS\" (#12961) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet 6.8\n\n### Worked before?\n\nNuGet 6.6\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUse a package source that needs credentials, and use a credential manager to provide those credentials. If VS is open for long enough (longer than token validity that the cred provider gave to NuGet), then all HTTP requests will result in HTTP 401, because HttpClient will keep using the old credential, and never refresh to the newer token that the cred provider gave.\r\n\r\nThe root cause is that NuGet started using `HttpClientHandler.PreAuthenticate`, but there's a bug in the .NET runtime:\r\n\r\n* https://github.com/dotnet/runtime/issues/93340\r\n\r\nNote, that the Azure Artifacts cred provider currently gives a token with a long valid duration, so it's unlikely most customers will experience this, with Azure DevOps. However, if customers are using other credential providers, that return short lived tokens, the probability of encountering this problem is greatly increased.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-25T03:30:19.4991106Z","RunDurationInMilliseconds":1221}