{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"24263299064","Type":"IssuesEvent","CreatedAt":"2022-09-28T02:19:16","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9258","RelatedDescription":"Opened issue \"[NuGet.org Bug]: The link for owner request is broken in the email.\" (#9258) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe email link doesn't point to www.nuget.org.\n\n### Repro Steps\n\nAdd a package owner and check the received link in the email.\n\n### Expected Behavior\n\nThe link should be workable. What about scenarios?\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24262171267","Type":"PullRequestEvent","CreatedAt":"2022-09-28T00:33:12","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9256","RelatedDescription":"Merged pull request \"Add missing binding redirect for Microsoft.Owin\" (#9256) at NuGet/NuGetGallery","RelatedBody":"Resolves issue caused by https://github.com/NuGet/NuGetGallery/pull/9254."},{"Id":"24258405302","Type":"IssuesEvent","CreatedAt":"2022-09-27T19:59:05","Actor":"jmecosta","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9222","RelatedDescription":"Closed issue \"[NuGet.org Bug]: code signing certificates\" (#9222) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nWe have a bigger wider organization in nuget that we want everyone to use in the company.  However some of the groups don't have signing certificates and nuget.org prevents their packages from being uploaded because other users in the organization have uploaded their certificate that they want use when delivering their packages.\r\n\r\nWe don't want people in the company to user other organizations. \r\n\r\nHow we handle different maturity of teams inside the same organization? \r\n\r\nIs the only option  to force them to buy a certificate even tough they really don't need it?\r\n\r\nThanks in advance\n\n### Repro Steps\n\nNot applicable\n\n### Expected Behavior\n\nNot applicable\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24255313858","Type":"IssuesEvent","CreatedAt":"2022-09-27T17:15:08","Actor":"melanchall","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9257","RelatedDescription":"Opened issue \"[NuGet.org Bug]: SearchQueryService (primary) returns stale data\" (#9257) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nIt looks like primary SearchQueryService returns stale data when package information queried. I observe the same stale total downloads count for my package for several days (see repro steps).\n\n### Repro Steps\n\n1. Execute https://api.nuget.org/v3/index.json.\r\n2. Take primary SearchQueryService URL; at the moment it's https://azuresearch-usnc.nuget.org/query.\r\n3. Execute https://azuresearch-usnc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi.\r\n4. Look into `totalDownloads` field, it's value is `36891` and this value is not changed from 21 Sept, although if you look into the package page (https://www.nuget.org/packages/Melanchall.DryWetMidi), you'll see that real total downloads count is `37.2K`. Also latest version downloads count is incorrect too.\r\n\r\nBut if you query information by secondary SearchQueryService (https://azuresearch-ussc.nuget.org/query?q=PackageId:Melanchall.DryWetMidi), you'll get more accurate value `37062` at the moment of this issue created (although the value is smaller than on nuget.org).\n\n### Expected Behavior\n\nPrimary SearchQueryService returns correct downloads numbers. Right now secondary one returns more correct info, but I think _primary_ word means we should rely on it. Right now it seems you don't provide reliable way to get a package downloads statistics via API.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/26361185/192592218-014acd90-8e27-499e-86ee-7880ff02c781.png)\r\n\r\n![image](https://user-images.githubusercontent.com/26361185/192592553-43f4abec-d8ce-42ca-b4a5-ac45a8573183.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24254748069","Type":"PullRequestEvent","CreatedAt":"2022-09-27T16:46:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9256","RelatedDescription":"Opened pull request \"Add missing binding redirect for Microsoft.Owin\" (#9256) at NuGet/NuGetGallery","RelatedBody":"Resolves issue caused by https://github.com/NuGet/NuGetGallery/pull/9254."},{"Id":"24249752244","Type":"PullRequestEvent","CreatedAt":"2022-09-27T13:25:23","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9254","RelatedDescription":"Merged pull request \"Update to ServerCommon 2.106.0 to resolve CG alerts\" (#9254) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"24237550720","Type":"PullRequestEvent","CreatedAt":"2022-09-27T01:46:56","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9255","RelatedDescription":"Opened pull request \"Add ASE regions to allowed regions\" (#9255) at NuGet/NuGetGallery","RelatedBody":"Adds ASE regions to allowed configuration list."},{"Id":"24234314359","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:19:35","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9244","RelatedDescription":"Closed issue \"[NuGet.org Bug]: can't download \"OrchardCore.Rules\" Package in China\" (#9244) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nHi,\r\n\r\nI tried to create Orchard CMS project,\r\nAdding ”OrchardCore.Application.Cms.Targets“  package, error \"not found\".\r\n![image](https://user-images.githubusercontent.com/3164300/191384840-fb7a6169-b5d7-4acb-b5d2-eaa55aa78183.png)\r\n\r\nUsing Fiddler to view the request,\r\n\r\n\"GET, https://api.nuget.org/v3-flatcontainer/orchardcore.rules/index.json” return is 404.\r\n\r\nUsing Fiddler's AutoResponder, send the correct response\r\n\r\nAnd then you see the request\r\n“GET https://api.nuget.org/v3-flatcontainer/orchardcore.rules/1.4.0/orchardcore.rules.1.4.0.nupkg” return  404.\r\n\r\n![image](https://user-images.githubusercontent.com/3164300/191384854-694004c1-1c70-44ea-a94c-786e9836123e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3164300/191384862-86244abc-f4a2-47b1-849b-0b4f6bae9598.png)\r\n\r\n\r\nhttps://github.com/OrchardCMS/OrchardCore/discussions/12455\n\n### Repro Steps\n\n1. dotnet new web \r\n2.  dotnet add package OrchardCore.Application.Cms.Targets\n\n### Expected Behavior\n\nSuccessfully adding \"OrchardCore.Application.Cms.Targets“ and compile successfully\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24233953961","Type":"PullRequestEvent","CreatedAt":"2022-09-26T20:58:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9254","RelatedDescription":"Opened pull request \"Update to ServerCommon 2.106.0 to resolve CG alerts\" (#9254) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"24178926437","Type":"PullRequestEvent","CreatedAt":"2022-09-23T06:52:51","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9253","RelatedDescription":"Merged pull request \"Add one-time message for claim id, adjust logic on temp id search\" (#9253) at NuGet/NuGetGallery","RelatedBody":"Let's fix that Claim Key message.\r\n\r\nAlso, there's a case in the search logic I wanted to filter out--if a customer uploads a package foo,  without this change it could still be viewed using https://www.nuget.org/packages/foo. This will prevent that case, as if a package has a TemporaryId, it will not be found by its actual ID."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"24263211497","Type":"IssuesEvent","CreatedAt":"2022-09-28T02:11:09","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12121","RelatedDescription":"Opened issue \"[Bug]: Make static restore graph evaluation long path aware\" (#12121) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nall versions since static restore added\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUse the NUGET_PACKAGES environment variable, or `globalPackagesFolder` config in a `nuget.config` file to set the GPF to a path of around 200 characters long. Then, restore a project with `msbuild -t:restore -p:RestoreUseStaticGraphEvaluation=true` from a Developer PowerShell. Make sure the registry/group policy setting for long paths is enabled, and this restore will fail. But if you remove `-p:RestoreUseStaticGraphEvaluation=true` from the arguments, it will work.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24251130849","Type":"IssuesEvent","CreatedAt":"2022-09-27T14:17:06","Actor":"odalet","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12119","RelatedDescription":"Opened issue \"[DCR]: Dependent project does not generate nuget package when multiple TFMs\" (#12119) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\n> Note that I first raised this issue in the [msbuild repository](https://github.com/dotnet/msbuild/issues/7911) but it was suggested to me this should rather belong here. So Here it goes.\r\n\r\nConsider this scenario:\r\n\r\n* Lib1.csproj multi-targets `net48` and `net6.0` and has `GeneratePackageOnBuild` set to `true`\r\n* Lib2.csproj does the same\r\n* Lib1.csproj references Lib2.csproj (both are part of the same solution)\r\n\r\nNow, let's `dotnet build Lib1.csproj`:\r\n\r\n* It generates Lib2 assemblies (one for each target),\r\n* It genrates Lib1 assemblies (one for each target)\r\n* It generates Lib1 `nupkg`\r\n* **It does not generate Lib2 `nupkg` though**\r\n\r\n> NB: this does not happen when building the solution in VS\r\n\r\n\n\n### Desired Behavior\n\n`Lib2.nupkg` should be generated\r\n\r\nI understand it is probably not straightforward, but according to the _least surprise_ principle, I think it'd be desirable.\n\n### Additional Context\n\n### Steps to Reproduce\r\n* See attached solution: [MultipleTfmsNugetRepro.zip](https://github.com/NuGet/Home/files/9656759/MultipleTfmsNugetRepro.zip)\r\n* Then:\r\n  ```sh\r\n  cd .....\\Lib1\r\n  dotnet build\r\n  ```\r\n* `Lib1.nupkg` is created in `Lib1\\bin\\Debug`\r\n* `Lib2.nupkg` is not `Lib2\\bin\\Debug`\r\n\r\nI also attached the corresponding binlog (build in release configuration this time): [binlog.zip](https://github.com/NuGet/Home/files/9656760/binlog.zip)\r\n\r\n\r\n### Analysis\r\n\r\nI've skimmed through the binlog and I think it boils down to `IsInnerBuild = true`preventing Lib2's nuget package from being generated. Here is what I guess happens:\r\n\r\n* Because Lib1 is a multi-targeting project, it is split into 2 pseudo-projects: one for each TFM \r\n* Thanks to the project reference, each one of these pseudo-projects transitively builds Lib2 (only for the TFM it is compatible with) in `IsInnerBuild = true` mode.\r\n  * This gives us Lib2 assemblies both for `net48` and `net6.0` targets\r\n  * And obviously Lib1 assemblies as well for both targets\r\n* Back to Lib1, the root project goes on with building the nuget package and it is generated (and as expected references `Lib1.nupkg`)\r\n* However, because Lib2 is never built with `IsInnerBuild = false`, its package is never generated.\r\n\r\n### Versions & Configurations\r\n\r\n* Visual Studio v17.2.2\r\n* `dotnet --version`: 6.0.303"},{"Id":"24249451687","Type":"IssuesEvent","CreatedAt":"2022-09-27T13:13:33","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12118","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform Sign Verify] An error NU1101 occurred after adding package to the test project and restoring the project on MacBook\" (#12118) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 7.0.100-rtm.22476.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Detailed repro steps\r\n1.\tExecute the [pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2.\tCreate a test code signing certificate. \r\nOn macOS:`  ./dotnet/dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net7.0 `\r\nThis will create a test code signing certificate. \r\nKeep the output of this tool.  You will refer to it in later steps. \r\n3.\tWhere <PackageId> is the test package ID and <PfxFilePath> is the file path to the .pfx file, sign the test package: \r\n        On macOS:`  ./dotnet/dotnet nuget sign ./<PackageId>/bin/Debug/<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> `\r\n4.\tVerify that the previous step succeeded with the following warnings. \r\na.\twarn : NU3002: The '--timestamper' option was not provided. The signed package will not be timestamped. To learn more about this option, please visit https://docs.microsoft.com/dotnet/core/tools \r\nb.\twarn : NU3018: UntrustedRoot: self-signed certificate \r\n5.\tCreate a test project: \r\n       On macOS:  `mkdir ./test && pushd ./test && ../dotnet/dotnet new console && cp ../NuGet.config.template ./NuGet.config `\r\n6.\tUpdate NuGet.config to reference the SHA-256 fingerprint of the certificate created in step 2. \r\n7.\tClear local NuGet resources and previous restore results: \r\n       On macOS: ` rm -r -f ./obj && ../dotnet/dotnet nuget locals --clear all `\r\n8.\tWhere <PackageId> is the test package ID, add a package reference to the test package: \r\n       On macOS: ` ../dotnet/dotnet add package <PackageId> --version 1.0.0 `\r\n9.\tVerify the results of the previous step. \r\n       On macOS, the operation succeeded with no warnings or errors. \r\ninfo : X.509 certificate chain validation will use the fallback certificate bundle at '/home/dtivel/testpass/dotnet/sdk/7.0.100-preview.7.22376.5/trustedroots/codesignctl.pem'. \r\n10.\tRepeat step 7. \r\n11.\tWhere <PackageId> is the test package ID, edit test.csproj to include the following element directly inside the root <configuration> element: \r\n```\r\n<ItemGroup> \r\n<PackageReference Include=\"<PackageId>\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n12.\tRestore: \r\n        On macOS: ` ../dotnet/dotnet restore -v detailed.`\r\n\r\n#### Expected\r\nThere is no error NU1101 shows in step8 and step12.\r\n\r\n#### Actual\r\nThere is error NU1101 shows in step8 and step12 as below.\r\n![image](https://user-images.githubusercontent.com/20632625/192535655-46255f0f-63e0-4b43-8006-076439de2d6c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/20632625/192535698-b80ef2d5-3ae7-4787-97d2-153d3ae93fa7.png)\r\n\r\n#### Note:\r\n1.It is not a regression.\r\n2.Only repro on MacOS.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24244962120","Type":"IssuesEvent","CreatedAt":"2022-09-27T09:47:46","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12117","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform Sign Verify] Command “powershell.exe  -Command Compress-Archive -Path” failed to execute since .nupkg is not supported\" (#12117) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 7.0.100-rtm.22476.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n## Repro steps: \r\n1. Execute the [pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2. Add trust for the certificate:` .\\dotnet\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>`\r\n3. Sign the test package:` .\\dotnet\\dotnet nuget sign .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> --timestamper http://timestamp.digicert.com/`\r\n4. Verify that the previous step succeeded with no warnings or errors.\r\n5. Modify the signed package:` powershell.exe  -Command Compress-Archive -Path .\\NuGet.config.template -Update -DestinationPath .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg`\r\n\r\n## Expected:\r\nThe command should be executed successfully.\r\n\r\n## Actual:\r\nThe command failed to execute as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/192493744-7b5a5cbd-92d6-4d49-9a6d-2c3311696ca8.png)\r\n\r\n## Note:\r\nIt is not a regression.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24236703152","Type":"IssuesEvent","CreatedAt":"2022-09-27T00:25:56","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11923","RelatedDescription":"Closed issue \"[Bug]: Visual Studio Installed Packages page is slow to load\" (#11923) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nVisual Studio 2022\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nThe Installed packages page in the Visual Studio Package Management UI can be slow to load.\r\n\r\nPart of the reason for this slowness is `HttpClientHandler`'s `MaxConnectionsPerServer` setting, which by default is 2.\r\n\r\nIncreasing this value results in a much faster load time. In the attached video, setting `MaxConnectionsPerServer` to 20 reduces the time taken from ~42 seconds to ~14 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201348-58856ed2-804b-4a0f-8180-ef0abffe3bb5.mp4\r\n\r\nThis can be further improved by changing `PackageMetadataResourceV3.GetMetadataAsync` to make its API requests concurrently. In the attached video, the time taken is further reduced to ~5 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201934-63a15ea5-00dc-4c0c-bd4e-27b8383cd86f.mp4\r\n\r\nThe diff for these changes can be found here: https://github.com/mjolka/NuGet.Client/commit/6da131780ccf74c1d4de9306804c295f5462e57b\r\n\r\nThis is the project file I used to test with:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"AWSSDK.Core\" Version=\"3.7.12.3\" />\r\n    <PackageReference Include=\"AWSSDK.S3\" Version=\"3.7.9.19\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager\" Version=\"3.7.2.59\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager.Caching\" Version=\"1.0.4\" />\r\n    <PackageReference Include=\"MassTransit\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"MassTransit.RabbitMQ\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.6\" />\r\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.5\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.2.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n````\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"24236387817","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:57:31","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12116","RelatedDescription":"Opened issue \"[Bug]: Address CA2213 warnings\" (#12116) at NuGet/Home","RelatedBody":"Address new CA2213 warnings which were suppressed in  "},{"Id":"24236126704","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:33:33","Actor":"jonreis","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12115","RelatedDescription":"Opened issue \"[Bug]: dotnet list package --vulnerable --include-transitive does not report all vulnerable packages\" (#12115) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet v6.0.401\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nMySql.Data v8.0.24 uses 2 transitive packages with security vulnerabilities:\r\n\r\n1) BouncyCastle v1.85 has security vulnerability [CVE-2020-15522](https://github.com/advisories/GHSA-6xx3-rg99-gc3p) yet when I run the nuget vulnerability check, it is not reported.\r\n2) Google.Protobuf [CVE-2021-22570](https://github.com/advisories/GHSA-77rm-9x9h-xj3g)\r\n\r\nTransitive Package for Google.Protobuf is reported, but not BouncyCastle\r\n\r\nTo Reproduce:\r\n1. Create a project that includes MySql.Data v8.0.24\r\n2. Run: dotnet list package --vulnerable --include-transitive\r\n\r\nOutput from tool\r\n[net48]:\r\nTransitive Package Resolved Severity Advisory URL\r\nGoogle.Protobuf 3.14.0 High https://github.com/advisories/GHSA-77rm-9x9h-xj3g\r\n\r\nOther details:\r\nAdvisory: https://github.com/advisories/GHSA-6xx3-rg99-gc3p\r\nBouncyCastle release notes: https://www.bouncycastle.org/csharp/\r\nNIST: https://nvd.nist.gov/vuln/detail/cve-2020-15522\n\n### Verbose Logs\n\n_No response_"},{"Id":"24235657867","Type":"PullRequestEvent","CreatedAt":"2022-09-26T22:53:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/12088","RelatedDescription":"Merged pull request \"Design for erroring when NuGet.exe pack is used for an SDK based project\" (#12088) at NuGet/Home","RelatedBody":"Design for https://github.com/NuGet/Home/issues/7778. [Rendered](https://github.com/NuGet/Home/blob/dev-nkolev92-nugetExeWarnWhenSDKpack/proposed/2022/NuGetExeWarnWhenSDKProjectsGetPacked.md)\r\n\r\n\r\nCompleting that issue will allow us to close https://github.com/NuGet/Home/issues/4491 as well. \r\n\r\nThe proposal is implemented in https://github.com/nuget/nuget.client/tree/dev-nkolev92-warnNuGetExePacksSDKProject. "},{"Id":"24234758185","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:47:46","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12114","RelatedDescription":"Opened issue \"Run NuGet end to end and Apex tests on VS main branch\" (#12114) at NuGet/Home","RelatedBody":"This bug is to revert https://github.com/NuGet/NuGet.Client/pull/4821 once https://developercommunity.visualstudio.com/t/VS-2022-174-preview-versions-throws-a/10157815 issue resolved.\r\n\r\nRelated - https://github.com/NuGet/Home/issues/12104"},{"Id":"24233998053","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:00:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10375","RelatedDescription":"Closed issue \"Proposal: option to hide dependency APIs if consumers don't reference them too\" (#10375) at NuGet/Home","RelatedBody":"## Overview\r\n\r\nThere are cases where library authors need to add a dependency on NuGet packages, but without having consumers of their library (and not the dependency as well) to automatically have access to those APIs **unless explicitly referenced**.\r\n\r\nThe main idea is: some dependency should only be viewed as **implementation details** for a library.\r\nThis is due to a number of reasons:\r\n\r\n1. These APIs might not conceptually make sense to be exposed together with a library. As an example, I'm working on [ComputeSharp](https://github.com/Sergio0694/ComputeSharp), which is a high-level, easy to use library to do GPU processing in C#. This library has a dependency on [TerraFX.Interop.Windows](https://github.com/terrafx/terrafx.interop.windows), which provides extremely low-level bindings for Windows APIs. I don't want consumers of my library to also have TerraFX APIs pop up in their IntelliSense. These APIs are just an implementation detail for me, and conceptually they have nothing to do with what ComputeSharp aims to be - a high-level and accessible library.\r\n2. Having these APIs being exposed caused a potentially breaking dependency for consumers. Consider the case for ComputeSharp as before. If one day I wanted to change my backend for whatever reasons, and some consumers were using APIs from TerraFX as well, updating ComputeSharp would be a breaking change, even if I'd only be changing an internal implementation detail, and nothing on my public API surface.\r\n\r\nPoint 1. is the one I care about in particular. That's the same reason why me and many other library authors take special care in trimming the public API surface as much as possible to keep it clean - having every single indirect API being automatically visible to consumers completely undermines this, especially when these APIs are very different from the design of the library itself.\r\n\r\n## Proposed solution\r\n\r\nThis proposal is to add a new property that can be added to `PackageReference` items (eg. `PubliclyVisible`, defaulting to `true` for backwards compatibility) that when set to `false` would cause the following behavior:\r\n\r\n- APIs from these dependencies would not be visible for consumers. As in, trying to use them would fail to build.\r\n- Consumers would need to manually add a dependency to that package in their own project to see/use them.\r\n- These dependencies would still be visible when installing the NuGet package, as is today.\r\n\r\nTo add more details (quoting from @tannergooding):\r\n\r\n> What is wanted is that PackageB depends on PackageA so that the latter is included in the overall version matching, it ends up in the exe output folder, etc.\r\n> However, PackageA should not be passed through to csc and therefore users shouldn't be able to use types from it without directly referencing it themselves.\r\n> Likewise, consumers of B shouldn't need to set any private assets to make this work as intended.\r\n\r\n## Alternative solutions (not viable)\r\n\r\n- Ask maintainers of these dependencies to provide source-only packages as well. This is clearly not viable in the majority of cases, and would be bad for code size anyway since consumers would end up with duplicated code across different assemblies.\r\n- Keep a local fork of needed packages and use them as private assets. This is not viable either as it would require a lot of work for library authors to keep forks in sync, not to mention this would have the same exact issue with duplicated code.\r\n\r\n"},{"Id":"24233956578","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:58:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8010","RelatedDescription":"Closed issue \"line continuation in package manager console\" (#8010) at NuGet/Home","RelatedBody":"<p>With Core, Scaffold-DbContext lines are long. Ability to split over more than one line would be useful.</p><p>This is already available in most shells (bash, powershell etc)</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/480145/line-continuation-in-package-manager-console.html\nVSTS ticketId: 812475_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 3/7/2019, 00:19 AM (40 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>"},{"Id":"24233843331","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:51:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7852","RelatedDescription":"Closed issue \"[Proposal] Side-by-side packages.config and Package Reference\" (#7852) at NuGet/Home","RelatedBody":"### Description\r\nSince Package Reference still doesn’t support install/uninstall scripts, drop-in content or configuration (which packages.config does), I suggest the creation of a **Hybrid Mode** where **both** types of packages could be included.\r\n\r\n### Proposal\r\nOffer a hybrid mode allowing users to individually select for each NuGet package which package reference system to use. Additionally auto-detect when a project CAN be Package Referenced without conflicts and do so by default. This would allow \"partial migration\" from packages.config, retaining the original system as-is for NuGet packages incompatible with Package References.\r\n\r\n### Motivation\r\nThe lack of features in Package References, the bread and butter of many NuGet packages which rely heavily on app.config or native assemblies, makes it not viable as a replacement at the moment. However, with this proposal we could mitigate the issue and pave the way for it's wider (incremental) adoption."},{"Id":"24233807147","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:49:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7133","RelatedDescription":"Closed issue \"Add NuGet.exe to the Developer Command Prompt\" (#7133) at NuGet/Home","RelatedBody":"Please make NuGet.exe available from the Visual Studio Developer Command Prompt. It's a commonly needed tool and the expectation is that `msbuild`, `dotnet` and `nuget` just work from the command prompt."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"23723590840","Type":"IssuesEvent","CreatedAt":"2022-08-30T17:25:48","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Opened issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":126,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2022-09-28T03:30:25.8462073Z","RunDurationInMilliseconds":1407}