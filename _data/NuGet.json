{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42991737570","Type":"PullRequestEvent","CreatedAt":"2024-10-18T17:26:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10231","RelatedDescription":"Merged pull request \"Use discard _ for fire and forget task\" (#10231) at NuGet/NuGetGallery","RelatedBody":"Thanks for the recommendation, @jimmylewis!\r\n\r\nThis improves on top of https://github.com/NuGet/NuGetGallery/pull/10229 and is clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42989455534","Type":"PullRequestEvent","CreatedAt":"2024-10-18T16:02:35","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10231","RelatedDescription":"Opened pull request \"Use discard _ for fire and forget task\" (#10231) at NuGet/NuGetGallery","RelatedBody":"Thanks for the recommendation, @jimmylewis!\r\n\r\nThis improves on top of https://github.com/NuGet/NuGetGallery/pull/10229 and is clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42982680946","Type":"IssuesEvent","CreatedAt":"2024-10-18T12:46:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10230","RelatedDescription":"Closed issue \"[NuGet.org Bug]: XML Comments in Code Block not rendered in nuget.org\" (#10230) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI have created several pacakges, and for those packages I have created README.md files. Those markdown files contain XML code blocks. Within those code blocks I have added XML comments to remove irrelevant content (so I can focus the reader on the releavent stuff). However, when I publish those packages, the README content that is rendered on nuget.org does not show those XML comments (presumably because they are also HTML comments).\r\n\r\nYou can see an example of the behaviour here, in this package\r\n* https://www.nuget.org/packages/PlayNicely.Projects/1.1.3-beta-550#example\r\n\r\nYet, when rendered in gitlab, it works as expected\r\n* https://gitlab.com/play-nicely/foundation/-/tree/main/Code/PlayNicely.Projects/PN.Projects?ref_type=heads#example\r\n\n\n### Repro Steps\n\n1. Create a package with a README.md file.\r\n2. Add a code block to the readme file, ```xml\r\n3. Add an XML comment to the code block\r\n4. Publish the package\r\n5. \n\n### Expected Behavior\n\nThe comment should be rendered correctly.\n\n### Screenshots\n\n![readme-good](https://github.com/user-attachments/assets/97028afd-9f60-46aa-81d5-de074f66e0b8)\r\n![README-bad](https://github.com/user-attachments/assets/c466e68c-214d-459b-8c1a-a79b2ccbe4bd)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42972005670","Type":"IssuesEvent","CreatedAt":"2024-10-18T07:11:14","Actor":"kepboy","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10230","RelatedDescription":"Opened issue \"[NuGet.org Bug]: XML Comments in Code Block not rendered in nuget.org\" (#10230) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI have created several pacakges, and for those packages I have created README.md files. Those markdown files contain XML code blocks. Within those code blocks I have added XML comments to remove irrelevant content (so I can focus the reader on the releavent stuff). However, when I publish those packages, the README content that is rendered on nuget.org does not show those XML comments (presumably because they are also HTML comments).\r\n\r\nYou can see an example of the behaviour here, in this package\r\n* https://www.nuget.org/packages/PlayNicely.Projects/1.1.3-beta-550#example\r\n\r\nYet, when rendered in gitlab, it works as expected\r\n* https://gitlab.com/play-nicely/foundation/-/tree/main/Code/PlayNicely.Projects/PN.Projects?ref_type=heads#example\r\n\n\n### Repro Steps\n\n1. Create a package with a README.md file.\r\n2. Add a code block to the readme file, ```xml\r\n3. Add an XML comment to the code block\r\n4. Publish the package\r\n5. \n\n### Expected Behavior\n\nThe comment should be rendered correctly.\n\n### Screenshots\n\n![readme-good](https://github.com/user-attachments/assets/97028afd-9f60-46aa-81d5-de074f66e0b8)\r\n![README-bad](https://github.com/user-attachments/assets/c466e68c-214d-459b-8c1a-a79b2ccbe4bd)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42963707697","Type":"PullRequestEvent","CreatedAt":"2024-10-17T23:27:33","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10111","RelatedDescription":"Closed pull request \"[SDK Migration] Monitoring jobs\" (#10111) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Updated `CommandHelpers.GetBlobServiceClient` and `CommandHelpers.GetQueueServiceClient` to use MSI.\r\n* These changes affects all `NgJob` `LoopingJob` based jobs.\r\n  * Catalog2Dnx\r\n  * Catalog2Icon\r\n  * Catalog2Monitoring\r\n  * Db2Catalog\r\n  * Db2Monitoring\r\n  * Monitoring2Monitoring\r\n  * MonitoringProcessor"},{"Id":"42952532488","Type":"PullRequestEvent","CreatedAt":"2024-10-17T16:13:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10229","RelatedDescription":"Merged pull request \"Suppress warning on CS4014\" (#10229) at NuGet/NuGetGallery","RelatedBody":"These are fire and forget tasks performed during app shutdown.\r\n\r\nThese errors appear in the IDE due to our .editorconfig settings, and can be suppressed. \r\n\r\nThis is a little clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42948883200","Type":"PullRequestEvent","CreatedAt":"2024-10-17T14:37:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10229","RelatedDescription":"Opened pull request \"Suppress warning on CS4014\" (#10229) at NuGet/NuGetGallery","RelatedBody":"These are fire and forget tasks performed during app shutdown.\r\n\r\nThese errors appear in the IDE due to our .editorconfig settings, and can be suppressed. \r\n\r\nThis is a little clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42973509088","Type":"IssuesEvent","CreatedAt":"2024-10-18T08:00:54","Actor":"leppie","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13868","RelatedDescription":"Opened issue \"Filenames incorrectly unescaped when extracting\" (#13868) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nall of them\n\n### Worked before?\n\nprobably not\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nNot sure if this affects  normal packages too, but I assume so.\r\n\r\nConsider you have filenames that are not valid on all filesystems, eg `:123` . Not valid on Windows. \r\n\r\nNow you rename them to be URI encoded, it becomes `%3a123` . Valid on all filesystems. Good.\r\n\r\nPack a nuget tool/package with that filename.\r\n\r\nInspect the package. All good, file is still escaped in the zip archive.\r\n\r\nNow install tool.\r\n\r\nLinux:\r\n\r\nExtracts fine. Filename is now `:123` . Not good. \r\n\r\nWindows: \r\n\r\n```\r\nUnhandled exception: System.IO.IOException: The filename, directory name, or volume label syntax is incorrect. : 'C:\\Users\\leppie\\.dotnet\\tools\\.store\\.stage\\w05qmr5c.1n5\\<remove>\\:123.sls'.\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.File.Create(String path)\r\n   at NuGet.Packaging.StreamExtensions.Testable.MmapCopy(Stream inputStream, String fileFullPath, Int64 size)\r\n   at NuGet.Packaging.StreamExtensions.Testable.CopyToFile(Stream inputStream, String fileFullPath)\r\n   at NuGet.Packaging.PackageFileExtractor.ExtractPackageFile(String source, String target, Stream stream)\r\n   at NuGet.Packaging.PackageArchiveReader.CopyFiles(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token)\r\n   at NuGet.Packaging.PackageReaderBase.CopyFilesAsync(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken)\r\n   at NuGet.Packaging.PackageExtractor.ExtractPackageAsync(String source, Stream packageStream, PackagePathResolver packagePathResolver, PackageExtractionContext packageExtractionContext, CancellationToken token, Guid parentId)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.ExtractPackageAsync(String packagePath, DirectoryPath targetFolder)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.ExtractPackageAsync(String packagePath, DirectoryPath targetFolder)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.DownloadAndExtractPackage(PackageId packageId, INuGetPackageDownloader nugetPackageDownloader, String packagesRootPath, NuGetVersion packageVersion, PackageSourceLocation packageSourceLocation, Boolean includeUnlisted)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.<>c__DisplayClass8_0.<InstallPackage>b__0()\r\n   at Microsoft.DotNet.Cli.TransactionalAction.Run[T](Func`1 action, Action commit, Action rollback)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.<>c__DisplayClass22_0.<ExecuteInstallCommand>b__1()\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.RunWithHandlingInstallError(Action installAction, PackageId packageId)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.ExecuteInstallCommand(PackageId packageId)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallCommand.Execute()\r\n   at System.CommandLine.Invocation.InvocationPipeline.Invoke(ParseResult parseResult)\r\n   at System.CommandLine.ParseResult.Invoke()\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, TimeSpan startupTime, ITelemetry telemetryClient)\r\n```\r\n\r\nNow it unescaped the filename again and ended up with invalid filenames. \r\n\r\nThe relevant code is here. \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/8a5348f76ab0d2338dad0555f4abd7b59598c793/src/NuGet.Core/NuGet.Packaging/PackageArchiveReader.cs#L317\r\n\r\nMakes no indication why the filename is getting unescaped.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42964912647","Type":"IssuesEvent","CreatedAt":"2024-10-18T00:44:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13867","RelatedDescription":"Opened issue \"VS Solution Package Manager's project list should have a quick select for projects that have package already installed\" (#13867) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nIn VS's solution package manager UI, there's a projects list. The left most column are checkboxes, and the checkbox in the heading row will select all:\r\n![image](https://github.com/user-attachments/assets/05289ff9-6f55-4c48-acbf-e9e9c2291625)\r\n\r\nor select none:\r\n![image](https://github.com/user-attachments/assets/d9307e65-ed0d-45c6-96b0-0126334cf274)\r\n\n\n### Desired Behavior\n\nThere should be a third state, \"select projects that already have this package installed as a top-level package\":\r\n![image](https://github.com/user-attachments/assets/51f9abd6-550c-479a-98af-c2c30b2c462d)\r\n\r\nThis is a simple example, but imagine a solution with 50 projets, and 15 of them have a package installed as a top-level package. It becomes time consuming to select the correct set of projects.\n\n### Additional Context\n\nI think it would be ever better UX if, instead of having the solid box: \r\n![image](https://github.com/user-attachments/assets/43029041-a4f4-4893-98cb-6db5aefe96d9)\r\n\r\nIt would be great if it had something different, such as: \r\n![image](https://github.com/user-attachments/assets/e94dd575-cd1f-4221-9ce2-3a886199d2c9)\r\nwhen the project selection list is equal to the projects that have the current project as top-level.\r\n\r\nThe reason is that the project selection doesn't change when you select different packages in the package list. But each package can have a different set of projects that include the package as top-level. So, if I select Package1, select the projects that use  it as top-level, then select Package2, I might make the assumption that the selected projects are also the projects that have Package2 as top-level, but that's not correct. The different visual indicator can inform the developer of this."},{"Id":"42964531331","Type":"IssuesEvent","CreatedAt":"2024-10-18T00:20:26","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13866","RelatedDescription":"Opened issue \"VS PM UI shows warning icon about package vulnerability even after upgrade\" (#13866) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.12 Preview 3\n\n### Worked before?\n\nnew feature\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nHave ProjectA with a PackageReference to a package with a known vulnerability.\r\n\r\nHave ProjectA.Tests with a ProjectReference to ProjectA.\r\n\r\nSolution Package Manager UI, on the Installed tab, will show a warning icon next to the package's version.\r\n\r\nClick the package, and then upgrade the version to one that is not vulnerable, in the project where the package is top-level.\r\n\r\nExpected: the warning icon in the package list should disappear.\r\n\r\nActual:\r\n![image](https://github.com/user-attachments/assets/52935af5-1fb9-4d52-875b-607244793c0d)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42964487030","Type":"IssuesEvent","CreatedAt":"2024-10-18T00:17:35","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13856","RelatedDescription":"Closed issue \"[Localization] The strings in “Package Level” column are not localized on the right panel of solution-level PM UI \" (#13856) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nNuGet Client Release-6.12.x\\6.12.0.127\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature. \r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Notes: \r\n\r\n1. The repro rate is 100%.    \r\n\r\n2. It’s not a regression since it is a new feature. \r\n\r\n3. It reproes on all loc languages. \r\n#### Repro Steps:  \r\n\r\n1. Create a C# Console App (.NET Core) -- .NET 9.0 projects in VS. \r\n\r\n2. Right-click the solution in the Solution Explorer and select the “Mange NuGet Packages for Solution”.  \r\n\r\n3. Go to “Browse” tab and install a package (e.g. “Microsoft.EntityFrameworkCore”). \r\n\r\n4. Switch to “Updates” tab and click package “Microsoft.EntityFrameworkCore”. \r\n\r\n5. Observe the “Package Level” column on the right panel. \r\n\r\n#### Expected:  \r\n\r\nThe strings in “Package Level” column (including column name “Package Level” and the value “Top-level”/”Transitive”) should be localized. \r\n\r\n#### Actual:  \r\n\r\nThe strings in “Package Level” column (including column name “Package Level” and the value “Top-level”/”Transitive”) are not localized as the screenshot below. \r\n![20241015-toplevel](https://github.com/user-attachments/assets/86745513-3f35-4f49-b284-f988415d34d8)\r\n![202421015-transitive](https://github.com/user-attachments/assets/c9f1f74c-3bc3-4e46-84b3-268f09b8b802)\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42961538469","Type":"IssuesEvent","CreatedAt":"2024-10-17T21:31:22","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13832","RelatedDescription":"Closed issue \"Unable to build NuGet.Client VSIX - \"GetDeploymentPathFromVsixManifest\" task failed unexpectedly\" (#13832) at NuGet/Home","RelatedBody":"I'm not able to build the NuGet.Client VSIX with the latest 17.12 Preview 3 Visual Studio Internal Preview. \r\n\r\n> The \"GetDeploymentPathFromVsixManifest\" task failed unexpectedly.\r\n> System.AggregateException->Microsoft.Build.Framework.BuildException.GenericBuildTransferredException: One or more errors occurred. ---> Microsoft.Build.Framework.BuildException.GenericBuildTransferredException:\r\n> Object reference not set to an instance of an object.\r\n>    --- End of inner exception stack trace ---\r\n\r\nWhat I've tracked down is that we target a very old 17.0.x version of Microsoft.VSSDK.BuildTools https://github.com/NuGet/NuGet.Client/blob/db35f736d692fe4a46357a3a2de1ea6206dddeb3/Directory.Packages.props#L79\r\n\r\nLikely there's some breaking change that's occurred between 17.0 and 17.12."},{"Id":"42960453014","Type":"IssuesEvent","CreatedAt":"2024-10-17T20:47:08","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12919","RelatedDescription":"Closed issue \"Update documentation for NU1011 error indicating how to allow floating versions with central package management\" (#12919) at NuGet/Home","RelatedBody":"As part of https://github.com/NuGet/NuGet.Client/pull/5440 we'll be allowing users to enable floating versions with central package management (CPM).  We'll need to update the documentation for the NU1011 error to explain how to enable the functionality since it will remain off by default.  \n\nhttps://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/reference/errors-and-warnings/NU1011.md\n\nProposed wording:\n\n### Solution\nNuGet recommends not using floating versions with central package management and instead encourages users change the floating versions to a [non floating version range](https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/concepts/Package-Versioning.md#version-ranges).\n\nIf changing to non floating versions is not possible, users can enable the functionality by setting the MSBuild property `CentralPackageFloatingVersionsEnabled` to `true` in an individual project or a common import like [Directory.Build.props](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory#directorybuildprops-and-directorybuildtargets):\n\n```xml\n<PropertyGroup>\n  <CentralPackageFloatingVersionsEnabled>true</CentralPackageFloatingVersionsEnabled>\n</PropertyGroup>\n```\n\n***NOTE: The use of floating versions can introduce non-deterministic NuGet restores as described above and is not recommended.***\n"},{"Id":"42958578872","Type":"IssuesEvent","CreatedAt":"2024-10-17T19:38:37","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13865","RelatedDescription":"Opened issue \" Remove unnecessary Lazy initialization from `PluginFile.State` in `PluginFile.cs`\" (#13865) at NuGet/Home","RelatedBody":"The `PluginFile` class currently uses a `Lazy<PluginFileState>` for its `State` property:\r\n\r\n```csharp\r\npublic Lazy<PluginFileState> State { get; }\r\n```\r\n\r\nThis was originally implemented because we used to perform Authenticode verification on plugins on Windows, which was an expensive operation. The `Lazy` initialization ensured that this verification was deferred until necessary.\r\n\r\nHowever, since PR [#6042](https://github.com/NuGet/NuGet.Client/pull/6042) has been merged, we no longer perform Authenticode verification on plugins. Therefore, the `Lazy` initialization is no longer needed."},{"Id":"42958385279","Type":"IssuesEvent","CreatedAt":"2024-10-17T19:31:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13647","RelatedDescription":"Closed issue \"PERF: NuGet Cloning operations are showing heavily in allocations during VS solution load\" (#13647) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Open VS, wait for everything to settle\r\n2) Start profiler\r\n3) Open vs-platform solution\r\n4) Wait for things to settle, stop profiler\r\n\r\n*** interesting bit from memory profile ***\r\n![image](https://github.com/user-attachments/assets/ca1026fa-21d3-4d87-b8b3-c64fa7d5d63c)\n\n### Verbose Logs\n\n_No response_"},{"Id":"42955294294","Type":"IssuesEvent","CreatedAt":"2024-10-17T17:44:24","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13844","RelatedDescription":"Closed issue \"Linux: Installing packages with uppercase versions\" (#13844) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet (linux)\r\n\r\n### Product Version\r\n\r\n.NET 10 (8 and 9)\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nOn Linux systems, it is not possible to install packages with uppercase characters in their version. The .NET SDKcalls `NugetV3LocalRepository` to find the package files, however its `PathResolver` member is set to enforce lowercase by default. \r\nThis means it will always search for the file with lowercase versions (even if it is stored with uppercase characters). This is not an issue on Windows because of the case agnostic fs, but it impacts Linux customers. \r\n\r\nHere are some related issues: https://github.com/NuGet/Home/issues/13275, https://github.com/dotnet/sdk/issues/24419, https://github.com/dotnet/sdk/issues/39105, https://github.com/dotnet/sdk/issues/41844\r\n\r\nOne of the issues mentions that NuGet expects all versions to be normalized. However this is currently not enforced by `dotnet pack -p:Version` command.\r\n\r\nSome proposed solutions are:\r\n1. Remove default lowercase normalization for `NugetV3LocalRepository::PathResolver` \r\n2. Have overloading of `NugetV3LocalRespository::FindPackage(String id, NugetVersion version, bool lowercase)` so that consumers of that method are able to specify whether they want to check for lower/uppercase versions\r\n3. Start enforcing lowercase versions on `dotnet pack` (having the generated package filenames be lowercased)\r\n\r\ncc: @nkolev92 \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42955237101","Type":"IssuesEvent","CreatedAt":"2024-10-17T17:42:31","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13750","RelatedDescription":"Closed issue \"NuGet Error: Unable to parse version value '2.0.0-beta.3' from 'packages.config\" (#13750) at NuGet/Home","RelatedBody":"# Issue Transfer\r\n\r\nThis issue has been transferred from the Azure SDK for .NET repository, [#45718](https://github.com/Azure/azure-sdk-for-net/issues/45718).\r\n\r\n### Please be aware that @limdv is the author of the original issue and include them for any questions or replies.\r\n\r\n## Details\r\n\r\nHello,\r\n\r\nAfter I installed Azure.AI.OpenAI 2.0.0-beta.3 I receive the following build errors. Anyone else seen and been able to resolve this issue. I can't seem to find any information regarding this error and it may not be specific to this package. It seems to be any package with 4 segments in the version. Any idea how to fix this?\r\n\r\n>C:\\Projects\\SMTMVC\\.nuget\\nuget.targets(92,9): error : Unable to parse version value '2.0.0-beta.3' from 'packages.config'.\r\n3>C:\\Projects\\SMTMVC\\.nuget\\nuget.targets(92,9): error MSB3073: The command \"\"C:\\Projects\\SMTMVC\\.nuget\\NuGet.exe\" install \"C:\\Projects\\SMTMVC\\SMTMVC\\packages.config\" -source \"\"  -NonInteractive -RequireConsent -solutionDir \"C:\\Projects\\SMTMVC\\ \"\" exited with code 1.\r\n\r\n### Environment\r\n\r\nMVC project targeting the .NET Framework 4.8 in Visual Studio 2022 (Version 17.11.0), Nuget Package Manager (Version 6.11.0)."},{"Id":"42955202798","Type":"IssuesEvent","CreatedAt":"2024-10-17T17:41:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13663","RelatedDescription":"Closed issue \"VS restore won't respect project prefix in the lock file\" (#13663) at NuGet/Home","RelatedBody":"Internal ticket: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2172224\r\n\r\nThis is a weird bug, when you are using lock files and have a `ProjectA` referencing `ProjectB` **and add a prefix in the `Directory.Build.props`** with a `PackageReference` to Nugetizer, the lock file is going to produce different outputs depending on where restore was made.\r\n\r\nVS will output something like this:\r\n\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"referencedproject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhile doing a `dotnet restore` it will result in:\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"A.Prefix.ReferencedProject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExample Directory.Build.props:\r\n\r\n```xaml\r\n<Project>\r\n  <PropertyGroup>\r\n    <LangVersion>latest</LangVersion>\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n\r\n    <AssemblyPreffix Condition=\"$(AssemblyPreffix) == ''\">A.Prefix</AssemblyPreffix>\r\n    <AssemblyName Condition=\"$(AssemblyName) == ''\">$(MSBuildProjectName)</AssemblyName>\r\n    <AssemblyName Condition=\"!$(AssemblyName.StartsWith(AssemblyPreffix))\">$(AssemblyPreffix).$(AssemblyName)</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"!$(MSBuildProjectName.Contains('ReferencedProject'))\">\r\n    <ProjectReference Include=\"..\\ReferencedProject\\ReferencedProject.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nExample ReferencedProject.csproj:\r\n\r\n```xaml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGetizer\" Version=\"*\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-19T03:30:23.2558293Z","RunDurationInMilliseconds":893}