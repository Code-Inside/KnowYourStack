{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42272419022","Type":"PullRequestEvent","CreatedAt":"2024-09-25T20:12:10","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10184","RelatedDescription":"Merged pull request \"Secret injected IConfigurationSection and IConfiguration wrappers.\" (#10184) at NuGet/NuGetGallery","RelatedBody":"Secret injected wrappers for `IConfigurationSection` and `IConfiguration` to provide the ability to inject secrets when we are not constructing the whole configuration stack from scratch (Azure Functions, for example).\r\nPulled out from internal project with minimal changes."},{"Id":"42236760760","Type":"PullRequestEvent","CreatedAt":"2024-09-24T23:29:37","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10190","RelatedDescription":"Merged pull request \"Targeting netstandard 2.1 for more projects\" (#10190) at NuGet/NuGetGallery","RelatedBody":"Internal projects targeting .net depend on those packages and produce build warnings because of unsupported targets. Nothing really prevents those from targeting netstandard 2.1 (not netstandard2.0 because of [EF](https://www.nuget.org/packages/EntityFramework#supportedframeworks-body-tab)).\r\n\r\nHad to apply a fix to Validation DB's `EntitiesConfiguration` similar to what we have for Gallery DB:\r\nhttps://github.com/NuGet/NuGetGallery/blob/febd3fb35bbf25b4a4d40f56859693e0bbf5d6f0/src/NuGetGallery.Core/Entities/EntitiesConfiguration.cs#L7-L43\r\n\r\nFunctionally, there are no changes for projects consuming those that target net472 and projects targeting .net can actually now use those."},{"Id":"42228404047","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:48:33","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10181","RelatedDescription":"Closed issue \"[Feature]: WebHooks \" (#10181) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### The Elevator Pitch\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### Additional Context and Details\n\nExample JSON:\r\n\r\n```\r\n{\r\n    \"package\": {\r\n        \"name\": \"MyNuget\",\r\n        \"version\": \"1.0.0\",\r\n        \"status\": \"published\",\r\n        \"time\": \"2024-09-11T13:23:15.000Z\"\r\n     }\r\n}\r\n```"},{"Id":"42228306668","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:45:16","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10182","RelatedDescription":"Closed issue \"Referencing packed images in readmes\" (#10182) at NuGet/NuGetGallery","RelatedBody":"while packed package icon and readme is readable by nuget, I am wondering why not images as well.\r\n\r\nUse cases: referencing images in readmes\r\n\r\nIf I can understand properly, referencing packed image doesn't seem to be from a trusted source/domain."},{"Id":"42197484212","Type":"PullRequestEvent","CreatedAt":"2024-09-24T00:28:42","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10188","RelatedDescription":"Merged pull request \"NuGet Job, don't rethrow exceptions if blob is not found\" (#10188) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/5628\r\nContext is [here on teams](https://teams.microsoft.com/l/message/19:d10cd9192de2492986fba3baeea3093c@thread.skype/1726693433772?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=ad34ac55-6785-4e7c-82c3-7ba405d30c3c&parentMessageId=1726693433772&teamName=NuGet&channelName=Server&createdTime=1726693433772).\r\nDeployment: [1550336](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1550336)\r\n\r\nPreviously there was many exceptions for NuGet.Jobs `Catalog2Icon`, after deployment it's no more.\r\n**Before:** ![image](https://github.com/user-attachments/assets/06871a7a-0c43-44af-a174-cda2d77a28d0)\r\n\r\n**After:** \r\n![image](https://github.com/user-attachments/assets/0ba7527b-2d74-4860-9910-3b112a8cca96)\r\n\r\n"},{"Id":"42191190709","Type":"PullRequestEvent","CreatedAt":"2024-09-23T19:42:02","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10191","RelatedDescription":"Merged pull request \"Create README.md for NuGet.Services.Sql\" (#10191) at NuGet/NuGetGallery","RelatedBody":"Ran into an issue using the library in app service, added workaround information."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42311548655","Type":"IssuesEvent","CreatedAt":"2024-09-26T20:01:07","Actor":"oising","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13810","RelatedDescription":"Opened issue \"New projects using VS Templates should detect CPM in target solution\" (#13810) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nIf I create a new project using an OOTB template in Visual Studio 2022, it fails to take into account solutions that are using Centralized Package Management (CPM.) \r\n\r\nI'm not sure how smart this needs to be -- should it scan Directory.Packages.props and look for possible issues (i.e. wanted packages are already there, but are possibly problematic according to semver rules) It seems that _some_ scanning would be required to see if the packages exist or not and if so, are they semver compatible with the desired versions. Then the templates need some metadata associated too. Huh. This is getting complicated :)\r\n\r\n\r\n\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42287629958","Type":"IssuesEvent","CreatedAt":"2024-09-26T08:29:46","Actor":"devlead","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13809","RelatedDescription":"Opened issue \"dotnet add package silently fails if CPM enabled and implicit SDK references exist to package\" (#13809) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100-rc.1.24452.12\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n# Repro \r\n\r\n1. `dotnet new globaljson --force --sdk-version 9.0 --roll-forward latestFeature`\r\n2. `dotnet new mstest --framework net9.0`\r\n3. Add `Directory.Packages.props` with `ManagePackageVersionsCentrally=true` and `CentralPackageTransitivePinningEnabled=true`\r\n4. `dotnet add package Microsoft.NET.Test.Sdk --version 17.11.1`\r\n\r\nInterestingly an empty `<ItemGroup />` is added to csproj, which is an indication it tries to do something but fails half-way.\r\n\r\nIf I manually add the package reference\r\n```xml\r\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\r\n```\r\nI'll get a warning\r\n```bash\r\n warning NU1504: Duplicate 'PackageReference' items found. Remove the duplicate items or use the Update functionality to ensure a consistent restore behavior. The duplicate 'PackageReference' items are: Microsoft.NET.Test.Sdk , Microsoft.NET.Test.Sdk 17.10.0.\r\n```\r\nwhich likely part of the root cause as `Microsoft.NET.Test.Sdk 17.10.0.` is part of the `MSTest.Sdk` and in .NET 9 SDK MSTest template  CSPROJ there're not longer any package references\r\n```xml\r\n<Project Sdk=\"MSTest.Sdk/3.5.1\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net9.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n    <!--\r\n      Displays error on console in addition to the log file. Note that this feature comes with a performance impact.\r\n      For more information, visit https://learn.microsoft.com/dotnet/core/testing/unit-testing-platform-integration-dotnet-test#show-failure-per-test\r\n      -->\r\n    <TestingPlatformShowTestsFailure>true</TestingPlatformShowTestsFailure>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nbut they're part of the SDK targets\r\nhttps://github.com/microsoft/testfx/blob/db0db46bc8ef5f99af7048156b2685877da89c80/src/Package/MSTest.Sdk/Sdk/Runner/ClassicEngine.targets#L40-L41\r\n```xml\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Sdk=\"MSTest\"\r\n                      Version=\"$(MicrosoftNETTestSdkVersion)\" VersionOverride=\"$(MicrosoftNETTestSdkVersion)\" />\r\n```\r\n\r\nCurrent workaround is to set `MicrosoftNETTestSdkVersion` manually  to `Directory.Packages.props`  so it looks something like this\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>\r\n    <MicrosoftNETTestSdkVersion>17.11.1</MicrosoftNETTestSdkVersion>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Microsoft.Extensions.DependencyModel\" Version=\"8.0.1\" />\r\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"$(MicrosoftNETTestSdkVersion)\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nand `csproj`\r\n```xml\r\n<Project Sdk=\"MSTest.Sdk/3.6.0\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net9.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n    <!--\r\n      Displays error on console in addition to the log file. Note that this feature comes with a performance impact.\r\n      For more information, visit https://learn.microsoft.com/dotnet/core/testing/unit-testing-platform-integration-dotnet-test#show-failure-per-test\r\n      -->\r\n    <TestingPlatformShowTestsFailure>true</TestingPlatformShowTestsFailure>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyModel\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhile this kinda works, it's a bit of a hack and it breaks some CI and SBOM tools.\n\n### Verbose Logs\n\n```shell\ndotnet add package Microsoft.NET.Test.Sdk --version 17.11.1\r\n\r\nBuild succeeded in 0,7s\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\ninfo : Adding PackageReference for package 'Microsoft.NET.Test.Sdk' into project 'C:\\temp\\mstestnet9\\mstestnet9.csproj'.\r\ninfo : Restoring packages for C:\\temp\\mstestnet9\\mstestnet9.csproj...\r\ninfo :   CACHE https://api.nuget.org/v3/vulnerabilities/index.json\r\ninfo :   CACHE https://api.nuget.org/v3-vulnerabilities/2024.09.24.23.37.09/vulnerability.base.json\r\ninfo :   CACHE https://api.nuget.org/v3-vulnerabilities/2024.09.24.23.37.09/2024.09.25.23.37.11/vulnerability.update.json\r\ninfo : Package 'Microsoft.NET.Test.Sdk' is compatible with all the specified frameworks in project 'C:\\temp\\mstestnet9\\mstestnet9.csproj'.\r\ninfo : Generating MSBuild file C:\\temp\\mstestnet9\\obj\\mstestnet9.csproj.nuget.g.props.\r\ninfo : Generating MSBuild file C:\\temp\\mstestnet9\\obj\\mstestnet9.csproj.nuget.g.targets.\r\ninfo : Writing assets file to disk. Path: C:\\temp\\mstestnet9\\obj\\project.assets.json\r\nlog  : Restored C:\\temp\\mstestnet9\\mstestnet9.csproj (in 225 ms).\n```\n"},{"Id":"42281175209","Type":"IssuesEvent","CreatedAt":"2024-09-26T04:18:59","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13808","RelatedDescription":"Closed issue \"Allow PackagePath lib\\any\" (#13808) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\ndotnet.exe\r\n\r\n### Current Behavior\r\n\r\nIf I have a .csproj with e.g.\r\n\r\n```\r\n <PropertyGroup>\r\n   <TargetFrameworks>netstandard2.0;net48</TargetFrameworks>\r\n </PropertyGroup>\r\n \r\n   <ItemGroup>\r\n    <Content Include=\"lib\\foo.dll\">\r\n      <Pack>true</Pack>\r\n    </Content>\r\n  </ItemGroup> \r\n```\r\n\r\nThen the output in the nupkg is:\r\n\r\n  - File:    content/lib/bc-fips-1.0.1.dll\r\n  - File:    contentFiles/any/net48/lib/bc-fips-1.0.1.dll\r\n  - File:    contentFiles/any/netstandard2.0/lib/bc-fips-1.0.1.dll\r\n  \r\nThe assembly is included 3 times, and not de-duplicated, ballooning the nupkg size  \r\n\r\nIf I use: `TargetsForTfmSpecificBuildOutput`\r\n\r\n```\r\n  <PropertyGroup>\r\n    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeFoo</TargetsForTfmSpecificBuildOutput>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"IncludeFoo\">\r\n    <ItemGroup>\r\n      <BuildOutputInPackage Include=\"$(OutputPath)foo.dll\">\r\n      </BuildOutputInPackage>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nI still get 2 copies\r\n\r\n### Desired Behavior\r\n\r\nAllow something like:\r\n\r\n```\r\n   <ItemGroup>\r\n    <Content Include=\"lib\\foo.dll\">\r\n      <Pack>true</Pack>\r\n      <PackagePath>lib\\any</PackagePath>\r\n    </Content>\r\n  </ItemGroup> \r\n```\r\n\r\nSo the .dll only has to be included once. \r\n\r\nI read https://learn.microsoft.com/en-us/nuget/create-packages/native-files-in-net-packages#compile-assets but it wasn't really clear to me. It says I recommends using ref, but ref/any also is disallowed from my experiments.\r\n\r\nMy goal is to package the FIPS dll https://www.bouncycastle.org/download/bouncy-castle-c-fips/ into a nuget package, and ensure consumers calling fips code via the package will also work, so the dll has to be present for compilation and runtime."},{"Id":"42276700646","Type":"IssuesEvent","CreatedAt":"2024-09-25T23:36:46","Actor":"CoenraadS","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13808","RelatedDescription":"Opened issue \"Deduplicate Assemblies in .nupkg\" (#13808) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nIf I have a .csproj with e.g.\r\n\r\n```\r\n <PropertyGroup>\r\n   <TargetFrameworks>netstandard2.0;net48</TargetFrameworks>\r\n </PropertyGroup>\r\n \r\n   <ItemGroup>\r\n    <Content Include=\"lib\\foo.dll\">\r\n      <Pack>true</Pack>\r\n    </Content>\r\n  </ItemGroup> \r\n```\r\n\r\nThen the output in the nupkg is:\r\n\r\n  - File:    content/lib/bc-fips-1.0.1.dll\r\n  - File:    contentFiles/any/net48/lib/bc-fips-1.0.1.dll\r\n  - File:    contentFiles/any/netstandard2.0/lib/bc-fips-1.0.1.dll\r\n  \r\nThe assembly is included 3 times, and not de-duplicated, ballooning the nupkg size  \n\n### Desired Behavior\n\nFile size should not increase when adding two exact same files\n\n### Additional Context\n\n_No response_"},{"Id":"42276306510","Type":"IssuesEvent","CreatedAt":"2024-09-25T23:10:39","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13216","RelatedDescription":"Closed issue \"[Feature] Enable Transitive Dependencies for Solution-level in Visual Studio\" (#13216) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nPeople love using the new transitive dependencies feature in Visual Studio for their projects! \r\n\r\nhttps://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/\r\n\r\nOne common follow-up is that people would love to see this experience in the solution-level within Visual Studio.\r\n\r\nAs we know from survey data, people use projects / solution levels just about equally and we originally went with projects to experiment with this feature as it has not been done before in Visual Studio.\r\n\r\nThis issue tracks bringing this experience to the solution-level in Visual Studio.\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42270411772","Type":"IssuesEvent","CreatedAt":"2024-09-25T18:59:48","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3285","RelatedDescription":"Closed issue \"Install/Update/Uninstall in PM UI should be disabled during installing/Updating/Uninstalling a package in PMC\" (#3285) at NuGet/Home","RelatedBody":"**Repro Steps:**\n1.  New project -> Visual C# -> Web -> ASP.NET Web Application, then uncheck the box for \"Application Insights\".\n2.  Click Web Forms template and check “Web Forms” and “Web API”.\n3.  Change Authentication to “No Authentication” and click OK button.\n4.  Open ‘Manage NuGet Package for Solution…’.\n5.  Open “Package Manager Console” and type \"update-package\" (or install).\n6.  Try to do Install/Update/Uninstall package in Manage NuGet Package UI during the installing/Upgrading/Uninstalling command is still executing in PMC.\n\n**Expected Result:**\nInstall/Update/Uninstall operation in Package Manager UI should be disabled during installing/Updating/Uninstalling a package in PMC.\n\n**Actual Result:**\nInstall/Update/Uninstall operation in Package Manager UI are not disabled during installing/Updating/Uninstalling a package in PMC.\n\n**Note:**\n1. It happened on Dev15 Preview4 Willow install+NuGet 3.6.0-Beta1-1738.\n2. It repro on Dev14 U3+NuGet 3.5.0-RTM-1737.\n3. It repro on VS2015Update3 w/ NuGet 3.4.4.\n"},{"Id":"42265391229","Type":"IssuesEvent","CreatedAt":"2024-09-25T16:15:28","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13807","RelatedDescription":"Closed issue \"Interactive nuget why command output contains Unicode characters that are unreadable in file output\" (#13807) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK 8.0.401\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nInteractive output has these fancy tree characters.\r\n\r\n```\r\nPS> dotnet nuget why .\\example\\ \"Newtonsoft.Json\"\r\nProject 'Example' has the following dependency graph(s) for 'Newtonsoft.Json':\r\n\r\n  [net7.0]\r\n   │  \r\n   └─ Newtonsoft.Json (v13.0.3)\r\n```\r\n\r\nBut those don't survive into a file whether by `Out-File` or `Set-Content` with or without any `-Encoding utf8`.\r\n\r\n```\r\nProject 'Example' has the following dependency graph(s) for 'Newtonsoft.Json':\r\n\r\n  [net7.0]\r\n   Γöé  \r\n   ΓööΓöÇ Newtonsoft.Json (v13.0.3)\r\n```\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42263639194","Type":"IssuesEvent","CreatedAt":"2024-09-25T15:26:30","Actor":"AnthonyMastrean","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13807","RelatedDescription":"Opened issue \"Interactive nuget why command output contains Unicode characters that are unreadable in file output\" (#13807) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 8.0.401\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nInteractive output has the fancy tree characters.\r\n\r\n```\r\nPS> dotnet nuget why .\\example\\ \"Newtonsoft.Json\"\r\nProject 'Example' has the following dependency graph(s) for 'Newtonsoft.Json':\r\n\r\n  [net7.0]\r\n   │  \r\n   └─ Newtonsoft.Json (v13.0.3)\r\n```\r\n\r\nBut those don't survive into a file whether by `Out-File` or `Set-Content` with or without any `-Encoding utf8`.\r\n\r\n```\r\nProject 'Example' has the following dependency graph(s) for 'Newtonsoft.Json':\r\n\r\n  [net7.0]\r\n   Γöé  \r\n   ΓööΓöÇ Newtonsoft.Json (v13.0.3)\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"42261836828","Type":"IssuesEvent","CreatedAt":"2024-09-25T14:41:17","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13806","RelatedDescription":"Closed issue \"BuildOutputInPackage in combination with TargetPath doesn't work for wildcards\" (#13806) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.303\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nI am trying to copy a folder into a nuget package, on a multi-targeted project.\r\n\r\nMy input folder is `Example`, and I want it's content copied into a folder `Example` in the nuget package (for each lib version)\r\n\r\nI am following the docs for BuildOutputInPackage: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#advanced-extension-points-to-create-customized-package\r\n\r\nI have a .csproj with the following:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net48</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n <PropertyGroup>\r\n   <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);Example</TargetsForTfmSpecificBuildOutput>\r\n </PropertyGroup>\r\n\r\n <Target Name=\"Example\">\r\n   <ItemGroup>\r\n     <BuildOutputInPackage Include=\"$(ProjectDir)Example\\**\\*.*\">\r\n       <TargetPath>Example</TargetPath> // Also tried appending a folder separater character, it has no influence\r\n     </BuildOutputInPackage>\r\n   </ItemGroup>\r\n </Target>\r\n</Project>\r\n```\r\n\r\nGiven I have \r\n- Example/1.txt\r\n- Example/2.txt\r\n\r\nOnly the first file gets copied when `TargetPath` is present, and msbuild emits a warning: `{File} not added because the package already contains file {TargetPath}`\r\n\r\nHowever if I remove `TargetPath`, all files are copied, but to the root directory.\r\n\r\nWorkaround:\r\n\r\n```\r\n  <Target Name=\"Example\">\r\n    <ItemGroup>\r\n      <Files Include=\"$(ProjectDir)Example\\**\\*.*\" />\r\n      <BuildOutputInPackage Include=\"%(Files.Identity)\">\r\n        <TargetPath>Example/%(Files.Filename)%(Files.Extension)</TargetPath>\r\n      </BuildOutputInPackage>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42242129783","Type":"IssuesEvent","CreatedAt":"2024-09-25T04:59:12","Actor":"CoenraadS","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13806","RelatedDescription":"Opened issue \"BuildOutputInPackage in combination with TargetPath doesn't work for wildcards\" (#13806) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.303\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI am trying to copy a folder into a nuget package, on a multi-targeted project.\r\n\r\nMy input folder is `Example`, and I want it's content copied into a folder `Example` in the nuget package (for each lib version)\r\n\r\nI am following the docs for BuildOutputInPackage: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#advanced-extension-points-to-create-customized-package\r\n\r\nI have a .csproj with the following:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net48</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n <PropertyGroup>\r\n   <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);Example</TargetsForTfmSpecificBuildOutput>\r\n </PropertyGroup>\r\n\r\n <Target Name=\"Example\">\r\n   <ItemGroup>\r\n     <BuildOutputInPackage Include=\"$(ProjectDir)Example\\**\\*.*\">\r\n       <TargetPath>Example</TargetPath>\r\n     </BuildOutputInPackage>\r\n   </ItemGroup>\r\n </Target>\r\n</Project>\r\n```\r\n\r\nGiven I have \r\n- Example/1.txt\r\n- Example/2.txt\r\n\r\nOnly the first file gets copied when `TargetPath` is present, and msbuild emits a warning: `{File} not added because the package already contains file {TargetPath}`\r\n\r\nHowever if I remove `TargetPath`, all files are copied, but to the root directory.\r\n\r\nWorkaround:\r\n\r\n```\r\n  <Target Name=\"Example\">\r\n    <ItemGroup>\r\n      <Files Include=\"$(ProjectDir)Example\\**\\*.*\" />\r\n      <BuildOutputInPackage Include=\"%(Files.Identity)\">\r\n        <TargetPath>Example/%(Files.Filename)%(Files.Extension)</TargetPath>\r\n      </BuildOutputInPackage>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-27T03:30:22.6220646Z","RunDurationInMilliseconds":911}