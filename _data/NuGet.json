{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40805424721","Type":"PullRequestEvent","CreatedAt":"2024-08-07T00:36:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10110","RelatedDescription":"Merged pull request \"Fix Db2Catalog and Catalog2Dnx with new SDK changes\" (#10110) at NuGet/NuGetGallery","RelatedBody":"Currently these two jobs are broken in `dev` branch.\r\n\r\nFixed issues:\r\n- Critical: handle `ContainerClient.CreateIfNotExists` returning null `Response<T>`. This was causing jobs to not start.\r\n- Critical: fix `CloudBlobDirectoryWrapper.Uri` property. This was causing Catalog2Dnx to write to the wrong directory (missing ID component).\r\n  - Added UTs for this since it was not caught by tests (E2E or UT)\r\n- Critical: fix `AzureStorage.ListAsync` to use `GetBlobsByHierarchyAsync` since it returns blob name, allowing for proper URI construction\r\n- Critical: fix `AzureStorage.GetBlockBlobReference` to use the `DirectoryPrefix`. This was causing Catalog2Dnx to never no-op.\r\n- Important: Do not log `blockBlobClient.Uri` since it can contain a SAS token. Sanitize prior to logging.\r\n- Unrelated: delete unused `AzureStorageBlobsFacts` (@dannyjdev confirmed I can delete)\r\n- Unrelated: fix flaky test `CanRetryOnConflict`"},{"Id":"40804509737","Type":"PullRequestEvent","CreatedAt":"2024-08-06T23:33:04","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10111","RelatedDescription":"Opened pull request \"[SDK Migration] Monitoring jobs\" (#10111) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Updated `CommandHelpers.GetBlobServiceClient` and `CommandHelpers.GetQueueServiceClient` to use MSI.\r\n* These changes affects all `NgJob` `LoopingJob` based jobs.\r\n  * Catalog2Dnx\r\n  * Catalog2Icon\r\n  * Catalog2Monitoring\r\n  * Db2Catalog\r\n  * Db2Monitoring\r\n  * Monitoring2Monitoring\r\n  * MonitoringProcessor"},{"Id":"40803106124","Type":"PullRequestEvent","CreatedAt":"2024-08-06T22:05:52","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10107","RelatedDescription":"Merged pull request \"Add a Python module for log version parsing\" (#10107) at NuGet/NuGetGallery","RelatedBody":"A building block for https://github.com/NuGet/Engineering/issues/5082"},{"Id":"40802556359","Type":"PullRequestEvent","CreatedAt":"2024-08-06T21:37:21","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10110","RelatedDescription":"Opened pull request \"Fix Db2Catalog and Catalog2Dnx with new SDK changes\" (#10110) at NuGet/NuGetGallery","RelatedBody":"Currently these two jobs are broken in `dev` branch.\r\n\r\nFixed issues:\r\n- Critical: handle `ContainerClient.CreateIfNotExists` returning null `Response<T>`. This was causing jobs to not start.\r\n- Critical: fix `CloudBlobDirectoryWrapper.Uri` property. This was causing Catalog2Dnx to write to the wrong directory (missing ID component).\r\n  - Added UTs for this since it was not caught by tests (E2E or UT)\r\n- Critical: fix `AzureStorage.ListAsync` to use `GetBlobsByHierarchyAsync` since it returns blob name, allowing for proper URI construction\r\n- Critical: fix `AzureStorage.GetBlockBlobReference` to use the `DirectoryPrefix`. This was causing Catalog2Dnx to never no-op.\r\n- Important: Do not log `blockBlobClient.Uri` since it can contain a SAS token. Sanitize prior to logging.\r\n- Unrelated: delete unused `AzureStorageBlobsFacts` (@dannyjdev confirmed I can delete)\r\n- Unrelated: fix flaky test `CanRetryOnConflict`"},{"Id":"40801418084","Type":"PullRequestEvent","CreatedAt":"2024-08-06T20:46:39","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10103","RelatedDescription":"Merged pull request \"Remove Focus on Package Page Tables\" (#10103) at NuGet/NuGetGallery","RelatedBody":"Links and buttons inside package page tables receive double focus, need to remove the focus on table cell to make links and buttons receive single focus\r\n\r\n* remove tabindex from all table cell from package page\r\n\r\n![image](https://github.com/user-attachments/assets/ad637ee1-b9c2-4fa3-9e3e-171cdd748cbc)\r\n\r\n\r\nBug URL: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2175594"},{"Id":"40801414023","Type":"PullRequestEvent","CreatedAt":"2024-08-06T20:46:29","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10105","RelatedDescription":"Merged pull request \"Change font weight of package list page links\" (#10105) at NuGet/NuGetGallery","RelatedBody":"* Change links font weight to solve color contrast with surrounding text issue.\r\n\r\nBug URL https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2088567\r\nBefore:\r\n![image](https://github.com/user-attachments/assets/21c98b74-bd8c-4356-af3a-e540194de772)\r\nAfter:\r\n![image](https://github.com/user-attachments/assets/ef3fb0e3-4d6f-4fee-ae55-18e4c265fcb3)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40804855645","Type":"IssuesEvent","CreatedAt":"2024-08-06T23:57:55","Actor":"ocallesp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13681","RelatedDescription":"Opened issue \"INuGetProjectService.GetInstalledPackagesAsync() returning result.Packages with empty InstallPath\" (#13681) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK, Other/NA\n\n### Product Version\n\n17.10.5\n\n### Worked before?\n\nYes\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nTest Explorer in Visual Studio 2022 is having pretty bad performance due to an issue in INuGetProjectService.GetInstalledPackagesAsync() returning result.Packages with empty InstallPath\r\n\r\nRepro:\r\n- Open VS 2022 (main)\r\n- Open Roslyn.sln https://github.com/dotnet/roslyn \r\n- Open Test Explorer\r\n- Run the test 'Interceptors'\r\n- Open the Output Window | Tests\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40801544430","Type":"PullRequestEvent","CreatedAt":"2024-08-06T20:51:51","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13680","RelatedDescription":"Opened pull request \"[One Pager] Transitive origins paths in PM UI\" (#13680) at NuGet/Home","RelatedBody":"One pager for https://github.com/NuGet/Home/issues/13574"},{"Id":"40797432249","Type":"IssuesEvent","CreatedAt":"2024-08-06T18:09:50","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13539","RelatedDescription":"Closed issue \"Update nuget.exe docs for new eula command\" (#13539) at NuGet/Home","RelatedBody":""},{"Id":"40796266933","Type":"IssuesEvent","CreatedAt":"2024-08-06T17:26:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13677","RelatedDescription":"Closed issue \"ConvertToProjectPaths  causes extra allocations due to yield usage\" (#13677) at NuGet/Home","RelatedBody":""},{"Id":"40792956782","Type":"IssuesEvent","CreatedAt":"2024-08-06T15:34:41","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11312","RelatedDescription":"Closed issue \"Test_ExtractionHonorsFileTimestamp() and ExtractPackageAsync_PreservesZipEntryTimeAsync() should work on any timezone\" (#11312) at NuGet/Home","RelatedBody":"Test_ExtractionHonorsFileTimestamp() and ExtractPackageAsync_PreservesZipEntryTimeAsync() currently only work for the timezone used by our CI. These tests should be able to run on any timezone so that they can pass locally for any contributor."},{"Id":"40778529496","Type":"IssuesEvent","CreatedAt":"2024-08-06T08:39:44","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13662","RelatedDescription":"Closed issue \"Fail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx\" (#13662) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\ndotnet SDK 9.0.100-rc.1.24380.5\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since this is a new feature.\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1.\t[Patch dotnet  SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (patch 9.0.1xx with Nupkgs from Dev latest). \r\n2.\tOpen a command prompt (called prompt1), go to the PatchedSDK folder and create a .NET SDK project with command `dotnet new console  -n NetCoreConsole `\r\n3.\tIn the solution folder, create a file named nuget.config with the following content: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\"/> \r\n  </packageSources> \r\n</configuration>\r\n```\r\n4.\tOpen the .csproj file for your project and insert the following package reference within an ItemGroup: \r\n```\r\n<ItemGroup> \r\n  <PackageReference Include=\"abcdefghijkl\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n5.\tOpen a second command prompt (called prompt2), go to the PatchedSDK folder and build the server by running:  \r\n`dotnet build   …Entropy\\filebackedserver\\filebackedserver.csproj `\r\n6.\tStart the local server by executing: \r\n`dotnet run --project  ….Entropy\\filebackedserver\\filebackedserver.csproj `\r\n\r\n#### Expected Result:\r\nSucceed to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n\r\n#### Actual Result:\r\nFail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n![image](https://github.com/user-attachments/assets/b231ecdb-9fa9-4fbc-80b4-13488cb285f5)\r\n#### Note:\r\n1.The repro rate: 100%.\r\n2.It should be fixed since NuGet Dev latest matches .NET SDK 9.0 now and the failure would block the following step of the test case 'TLSCertificateValidation'.\r\n"},{"Id":"40774358403","Type":"IssuesEvent","CreatedAt":"2024-08-06T06:21:05","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13625","RelatedDescription":"Closed issue \"Map branch name from sourcelink to RepositoryBranch for NuGet pack\" (#13625) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe\n\n### The Elevator Pitch\n\nThis is a companion issue for https://github.com/dotnet/sourcelink/issues/1243.\r\n\r\nOnce sourcelink emits the source branch name, NuGet should map that value to `RepositoryBranch` (and follow the existing rules around allowing the user to override).\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40773352674","Type":"IssuesEvent","CreatedAt":"2024-08-06T05:34:36","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13636","RelatedDescription":"Closed issue \"Bubble-up Known Vulnerability Indicators in Solution Explorer for Transitive Packages\" (#13636) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nNuGet launched a vulnerability auditing feature last year and would like to enhance the experience further with project system help!\r\n\r\nToday a user must directly navigate to a transitive package to see a warning produced when `NuGetAuditMode = all`\r\n\r\n![image](https://github.com/dotnet/project-system/assets/1288848/fe143c36-4fcd-4c66-9731-1953b7f887d6)\r\n\r\nIdeally these warnings would bubble up the entire packages tree similar to what you see with a top-level dependency:\r\n\r\n![image](https://github.com/dotnet/project-system/assets/1288848/6a899b95-5142-4634-be5b-e65f2c311122)\r\n\r\nAt the end of the day, if there is a transitive dependency vulnerability warning, it should show in the `Dependencies` node so the user knows how to spelunk to find the culprit. This will also complement CLI work we did in a command called [`dotnet nuget why`](https://github.com/NuGet/Home/blob/e83e772d7372288fc4475ba8b511dca97768a006/accepted/2022/dotnet-nuget-why-proposal.md) which allows you to do similar.\n\n### Additional Context and Details\n\nMany users use the solution explorer to view their dependency tree alongside the newly released [transitive dependencies in visual studio](https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/) functionality that only works for project-level today.\r\n\r\nIn developer surveys, we found that the solution explorer is one of the most desired places for people to view vulnerability information about their dependencies.\r\n\r\nMore user impact/motivation can be found in an older proposal that is related more-so to the [iconography of these indicators](https://github.com/NuGet/Home/blob/package-status-indicators/proposed/2022/package-status-indicators.md#motivation)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-07T03:30:18.6178573Z","RunDurationInMilliseconds":843}