{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43609512081","Type":"IssuesEvent","CreatedAt":"2024-11-07T17:07:58","Actor":"D0LBA3B","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10253","RelatedDescription":"Opened issue \"[Feature]: Allow images from github.com/user-attachments/assets/*\" (#10253) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nHello,\r\nImages from github.com/user-attachments/assets/** are not allowed.\r\nThese images have been published on Github via an image copy/paste in the github README editor :\r\n\r\n![image](https://github.com/user-attachments/assets/f5961b13-09c3-46b2-9cae-4efe5476ce60)\r\n\r\n\r\nNuGet Package in question: https://www.nuget.org/packages/Our.Umbraco.Dashbraco/\n\n### The Elevator Pitch\n\nAllow these images to be displayed on the Nuget package page\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43607411824","Type":"PullRequestEvent","CreatedAt":"2024-11-07T16:10:40","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10252","RelatedDescription":"Opened pull request \"[OIDC 2] Add federated credential entities (no DB change yet)\" (#10252) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10251.\r\n\r\nThis adds Entity Framework entities for federated credentials. There are two new tables:\r\n\r\n1. `FederatedCredentialPolicy` - this is a set of criteria that a user can provide as an acceptable pattern of credentials for authenticating as their user. For example, a policy would could be \"allow this specific Entra ID service principal to push packages on my behalf\".\r\n1. `FederatedCredential` - a record of federated credentials that were accepted by a federated credential policy. This is only used to prevent token replay.\r\n\r\nA future PR will introduce the DB migration."},{"Id":"43606055258","Type":"PullRequestEvent","CreatedAt":"2024-11-07T15:36:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10251","RelatedDescription":"Opened pull request \"Add basic Entra ID token validation\" (#10251) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\n\r\nThis adds an `IEntraIdTokenValidator` interface which accepts a parsed JWT (JSON web token) and performs basic Entra ID validation. This will be used by higher level code in a future PR.\r\n\r\nThe goal of this class is to assert that a given JWT is issued by Entra ID and is valid. The following checks are performed:\r\n\r\n1. The JWT signature is valid per Entra ID's signing keys, fetched via JWKS. This is done inside `ConfigurationManager<OpenIdConnectConfiguration>`.\r\n2. The issuer is an expected Entra ID value (`iss` claim and `issuer` property on the key). This is done via `AadIssuerValidator.GetAadIssuerValidator` and `EnableAadSigningKeyIssuerValidation`.\r\n3. The token is not expired (`nbf` and `exp` claims). This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n4. The token has a valid audience (`aud` claim). A valid `aud` claim is our configured app client ID. This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n\r\nOther validations like replay protection, matching tenant ID/object ID, etc will be done elsewhere."},{"Id":"43585993385","Type":"IssuesEvent","CreatedAt":"2024-11-07T05:36:04","Actor":"zivkan","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10250","RelatedDescription":"Opened issue \"[NuGet.org Bug]: search by tfm doesn't find non-latest versions of packages that are compatible\" (#10250) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nA customer recently reported a problem to Visual Studio roughly related to package compatibility with their project: https://developercommunity.visualstudio.com/t/NuGet-package-update-of-MicrosoftBuild-/10782347\r\n\r\nI remembered that nuget.org's website has TFM filtering, so I thought I'd give it a go, but I found that it does not work in a way that this customer would have wanted.\r\n\r\nThe customer wants to find versions of a package that is compatible with their project, even if it's not the latest version of the package\n\n### Repro Steps\n\n[Search for `packageid:Microsoft.Build`](https://www.nuget.org/packages?q=packageid%3Amicrosoft.build&includeComputedFrameworks=true&prerel=true&sortby=relevance).\r\n\r\nSee the search result for version 17.12.6 is compatible with .NET Framework 4.7.2 and .NET 9.\r\n\r\nIn the search filter, select .NET 8 and click apply. [see that now it claims there are no packages](https://www.nuget.org/packages?q=packageid%3Amicrosoft.build&tfms=net8.0&includeComputedFrameworks=true&frameworkFilterMode=all&prerel=true&sortby=relevance)\n\n### Expected Behavior\n\nThe search results should return [package version 17.11.4](https://www.nuget.org/packages/Microsoft.Build/17.11.4), which is compatible with .NET 8\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"43536037418","Type":"PullRequestEvent","CreatedAt":"2024-11-05T20:50:52","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10248","RelatedDescription":"Opened pull request \"Search MSI migration + .NET 9 TFM support\" (#10248) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5439\r\nPart of https://github.com/NuGet/Engineering/issues/5512\r\n\r\nThis adds MSI support for the search jobs and the search service.\r\n\r\nWe also add .NET TFMs to our list of \"Supported Frameworks\" so that they show up as computed frameworks on the frameworks tab and in the search index. The other changes in the `SupportedFrameworks.cs` file were just reordering to make it a bit more readable."},{"Id":"43531669497","Type":"IssuesEvent","CreatedAt":"2024-11-05T18:14:14","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10247","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Accessibility Bug on Packages sidebar\" (#10247) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nAI4W scan reports accessibility issue on packages sidebar link \"MIT\"\n\n### Repro Steps\n\n1. Go to https://www.nuget.org/packages/, click Newtonsoft.Json, \r\n2. Run AI4W FastPass\r\n3. AI4W Reports error on link \"MIT\": Ensure links are distinguished from surrounding text in a way that does not rely on colo\n\n### Expected Behavior\n\nAI4W FastPass shouldn't report any error.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/a8539f50-d77d-4eac-b858-ef914052c6d6)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43585362915","Type":"IssuesEvent","CreatedAt":"2024-11-07T05:03:42","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8623","RelatedDescription":"Closed issue \"Guide for packaging C# library using P/Invoke to per-architecture and/or per-platform C++ native DLLs\" (#8623) at NuGet/Home","RelatedBody":"I am trying to make a NuGet package deploying a C# .NET Standard 2.0 library which does P/Invoke calls into a platform-dependent C++ library, which must therefore also be deployed, but is obviously architecture-dependent (x86, x64, ARM, ARM64), as well as platform-dependent (Desktop (Win32) vs. UWP).\r\n\r\nI read most documentations on docs.microsoft.com, issues on this GitHub and others, SO issues, etc. and it is still very unclear how to do this. Information is sparse, sometimes contradictory, and the lack of details on some concepts like TFMs makes the task nearly impossible. This whole thing could really use some detailed documenting and samples.\r\n\r\nIn no particular order:\r\n\r\n## Target frameworks\r\n\r\n- https://docs.microsoft.com/en-us/nuget/reference/target-frameworks has a long list of supported frameworks, but `native` is not included, as reported in NuGet/docs.microsoft.com-nuget#1480. However https://devblogs.microsoft.com/nuget/native-support/ clearly states that:\r\n  > When targeting native projects, a new target framework name is now recognized: **native**.\r\n\r\n- This page lists `netcore` as a framework with versions like `5.0`. But .NET Core is just releasing its 3.0 this week. So clearly there is no relation between the two, but there is not a word on it.\r\n\r\n- This page also casually mentions the TFM `win10`:\r\n  > win10 (not supported by Windows 10 Platform)\r\n\r\n  There is no explanation on what `win10` is (is this Desktop, as opposed to UWP?) nor why `win10` would not be supported on Windows 10 despite the name clearly saying otherwise.\r\n\r\n## Package structure\r\n\r\n- https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package goes into details about the NuGet package structure, but does not mention anything about native DLLs.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder should be used to put the native DLLs, but https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package says it is only for `.targets` and `.props` files.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder respects target frameworks, but does that mean that `build/native/x86/my.dll` vs. `build/native/x64/my.dll` works? Or should architecture-specific native DLLs be put in `runtimes/`?\r\n\r\n- Does NuGet support Desktop (Win32) and UWP inside the same package? I could not find any documentation about that. I tried using `runtimes\\win10-x86\\native\\my.dll` for the Desktop variant, and `runtimes\\win10-x86\\lib\\uap10.0\\my.dll` for the UWP variant of the native DLL, but I get an error _error APPX1101: Payload contains two or more files with the same destination path_. Why is that? Those are different frameworks, why is NuGet trying to import both files into a UWP project?\r\n\r\n## P/Invoke\r\n\r\nIt seems many people have problem with deploying architecture-specific native DLLs. A quick search on nuget.org shows that [packages like Microsoft.Net.Native.Compiler have many \"runtime\" variants](https://www.nuget.org/packages/runtime.win10-x64.Microsoft.Net.Native.Compiler/2.2.7-rel-27913-00) starting with _e.g._ a `runtime.win10-x64.` prefix, but it doesn't seem there is documentation about this approach.\r\n\r\nhttps://github.com/Mizux/dotnet-native attempts to provide an example using [the undocumented `runtime.json`](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) used by CoreFX, but looking at the example it seems that for each native DLL variant, a specific .NET Standard 2.0 wrapper assembly is needed, instead of using a single one with multiple native DLLs. This sounds very cumbersome, is that the only option?\r\n\r\nRelated to that, if it is possible to use a single .NET Standard 2.0 assembly, then how to deploy the correct native DLL? With a .NET Core 3.0 sample app, it seems that currently NuGet copies the entire `runtimes/` folder inside the `bin/` folder of the app, instead of only the appropriate native DLL. This results in multiple copies, and of course the wrong DLL path which prevents `DllImport` from finding the native DLL.\r\n\r\n## Other issues\r\n\r\nThere are many other logged issues that seem partially related:\r\n- #6645 mentions that\r\n  >  runtimes/{rid}/native does not work with netfx\r\n\r\n  but there is no context about where that comes from. And it suggests putting native DLLs in `lib/` which is reserved for assemblies, so doesn't seem to be a correct solution.\r\n- #6648 closed as duplicate, although the context is not clear (what kind of app / platform is this about?)\r\n- #3931 seems to be somewhat related, but uses `project.json` (?)\r\n- #2350 asks about the P/Invoke and packaging issue, but was closed without answer.\r\n- #6846 touches on the deploy problem when consuming the package\r\n- #8573, #8435, #1221, #5606, ... I didn't read all of them, there are too many.\r\n- Several issues mention https://stackoverflow.com/questions/49162127/how-to-include-native-assets-in-nuget-on-multiple-platforms-only-64-bit but this seems to be only a subset of the issues, it is not clear how this scales to multiple architectures AND multiple platforms at the same time. It also seems to suggest multiple assemblies are needed.\r\n- The road of the [`AssemblyLoadContext`](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) seems to be a runtime solution to a packaging problem, and really not a path I want to get onto.\r\n"},{"Id":"43576900244","Type":"IssuesEvent","CreatedAt":"2024-11-06T21:28:42","Actor":"mthalman","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13914","RelatedDescription":"Opened issue \"Update nuget.client to use net10.0 TFM for source build\" (#13914) at NuGet/Home","RelatedBody":"Now that .NET 10 development is in process, the [VMR](https://github.com/dotnet/dotnet) is currently using a .NET 10 SDK. This will require that the [nuget.client](https://github.com/nuget/nuget.client) repo be updated to use the `net10.0` TFM, specifically when being built for source build.\r\n\r\nFor reference, this is the same type of work that was done for .NET 9: https://github.com/NuGet/NuGet.Client/pull/5511."},{"Id":"43562072996","Type":"IssuesEvent","CreatedAt":"2024-11-06T14:06:29","Actor":"HaGGi13","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13912","RelatedDescription":"Opened issue \"nuget list should handle protocol v3 instead of redirecting to v2\" (#13912) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe\n\n### Current Behavior\n\n## Behavior\r\nWhen it's needed to know which package versions incl. pre-release versions are available within a private package feed, the command `nuget list id:<searched-package>` with parameters `-Source`, `-AllVersions` and `-PreRelease` is run.\r\n\r\nMeaning, for instance, following is executed to get all versions incl. pre-release versions of the package `MyPackage` of a private package feed listed. For simplicity the command and the result are presented as a codeblock:\r\n\r\n```powershell\r\nPS C:\\Temp> .\\nuget.exe list id:MyPackage -Source https://myartifactstore/nuget/myLibraries/v3/index.json -AllVersions -PreRelease\r\nMyPackage 1.1.2-beta.1\r\nMyPackage 1.1.1\r\nMyPackage 1.1.1-beta.1\r\nMyPackage 1.1.0\r\n```\r\n\r\nAs the NuGet protocol v2 is deprecated since many years, it's disabled on the private feed as well. Because of that the internal redirect of the NuGet CLI -- it's a guess that's the client and not the server does the redirect, because v2 is disabled service side -- the original output is following:\r\n```powershell\r\nPS C:\\Temp> .\\nuget.exe list id:MyPackage -Source https://myartifactstore/nuget/myLibraries/v3/index.json -AllVersions -PreRelease\r\nThe V2 feed at 'https://myartifactstore/nuget/myLibraries/Search()?$orderby=Id&searchTerm='id%3AMyPackage'&targetFramework=''&includePrerelease=true&$skip=0&$top=30&semVerLevel=2.0.0' returned an unexpected status code '400 Bad Request'.\r\n```\n\n### Desired Behavior\n\nThe command `nuget list` should be able to handle NuGet protocol v3 feeds directly instead of being depended of v2 redirects. Meaning, a source can be a v2 or a v3 feed, but the result will be the same and no error is printed.\n\n### Additional Context\n\nIt's defined that the *NuGet.exe* is available only, no *dotnet cli*, no *VS PMC* or similar. Because of that the set of possibilities/approaches/solutions are limited to the NuGet CLI capabilities, and additional parsing to PowerShell 5.1 capabilities.\r\n\r\nThe command `nuget list` output is needed to check if a specific version of a package is already available in a (private) package feed. If it's not available yet, the package must be published, even if the version to publish is older/lower than the latest stable or pre-release version.  \r\nTo determine this, the result of `nuget list` is parsed with PowerShell (5.1).\r\n\r\nIt was considered to use `nuget search` instead, but it does not provide a list of all available package versions incl. pre-release versions. So the decision was made to create this behavior change request.\r\n\r\nInstead of changing command `list` behavior, it would be another solution to extend the command `search` instead to list all available versions like `list` do.\r\nAs far as it was possible to figure out during researches, `search` should already get all this information, but doesn't print it.\r\n\r\nAny help on that is appreciated."},{"Id":"43560876474","Type":"IssuesEvent","CreatedAt":"2024-11-06T13:35:29","Actor":"shrkumari-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13911","RelatedDescription":"Opened issue \"Given key was not present in dictionary error in NuGet.RestoreEx.targets\" (#13911) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.5\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis issue is being observed when I am trying to refer the package \"Microsoft.Azure.Compute.Web.Shared\". This can be reproduced by adding the package reference to this package.\n\n### Verbose Logs\n\n```shell\n1>D:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error : The given key was not present in the dictionary. [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.ThrowHelper.ThrowKeyNotFoundException() [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.Collections.Generic.Dictionary`2.get_Item(TKey key) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.LockFileBuilder.<GetLibraryDependenciesForCentralTransitiveDependencies>d__13.MoveNext() [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.LockFileBuilder.AddCentralTransitiveDependencyGroupsForPackageReference(PackageSpec project, LockFile lockFile, IEnumerable`1 targetGraphs) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.LockFileBuilder.CreateLockFile(LockFile previousLockFile, PackageSpec project, IEnumerable`1 targetGraphs, IReadOnlyList`1 localRepositories, RemoteWalkContext context, LockFileBuilderCache lockFileBuilderCache) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.RestoreCommand.BuildAssetsFile(LockFile existingLockFile, PackageSpec project, IEnumerable`1 graphs, IReadOnlyList`1 localRepositories, RemoteWalkContext contextForProject) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__68.MoveNext() [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error : --- End of stack trace from previous location where exception was thrown --- [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\r\nD:\\dbs\\Cx\\azco\\.A\\MsBuild.Corext.pPZSQybD-IzL6xrphQZttA\\Current\\bin\\amd64\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext() [D:\\dbs\\el\\azco\\temp-msbuild-restore\\dirs.proj]\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-08T03:30:20.891285Z","RunDurationInMilliseconds":921}