{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"28750166243","Type":"IssuesEvent","CreatedAt":"2023-04-29T18:52:01","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9491","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \" (#9491) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen a package uploaded image content on README.md is not shown because repository-images.githubusercontent.com is not trusted.\r\n\r\nhttps://repository-images.githubusercontent.com/569852870/13f844d3-fb51-4a83-9308-555e4e458577\n\n### Repro Steps\n\n1 Upload a photo into Github.\r\n2 Copy link into README.md\r\n3 Upload a package into NuGet Gallery.\r\n\r\nLink: https://repository-images.githubusercontent.com/569852870/13f844d3-fb51-4a83-9308-555e4e458577\n\n### Expected Behavior\n\nImage is shown as if it was on other links.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"28740977505","Type":"IssuesEvent","CreatedAt":"2023-04-28T20:57:36","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9450","RelatedDescription":"Closed issue \"[A11y]_Organizations_Members_Keyboard: The focus order is not in left to right order after expanding \"View Member Profile\"\" (#9450) at NuGet/NuGetGallery","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1744473"},{"Id":"28735633216","Type":"PullRequestEvent","CreatedAt":"2023-04-28T16:02:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9490","RelatedDescription":"Opened pull request \"Hide metadata when a package is unlisted and locked\" (#9490) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/9466\r\n\r\n## Before\r\n\r\n![image](https://user-images.githubusercontent.com/94054/235197392-9f57ebec-56da-491a-acc4-79aea635595a.png)\r\n\r\n## After"},{"Id":"28735064138","Type":"PullRequestEvent","CreatedAt":"2023-04-28T15:36:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9489","RelatedDescription":"Opened pull request \"Remove unnecessary usings across the whole solution\" (#9489) at NuGet/NuGetGallery","RelatedBody":"This was starting to bother me so I did it in VS with this tool:\r\n![image](https://user-images.githubusercontent.com/94054/235191649-bd45990e-10fc-47ee-9558-aad3b1730af0.png)\r\n"},{"Id":"28734713997","Type":"PullRequestEvent","CreatedAt":"2023-04-28T15:21:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9488","RelatedDescription":"Opened pull request \"Resolve top 2 HTTP 500 sources on NuGetGallery\" (#9488) at NuGet/NuGetGallery","RelatedBody":"This fixes the top 2 buckets of HTTP 500s on NuGet.org during the past 30 days. The first issue has user impact. The second one generates alerting noise for us.\r\n\r\nFix https://github.com/NuGet/NuGetGallery/issues/9486 - verified locally with a large stats blob. I believe the only risk here is increasing the load on our front-end nodes. Currently, the data is already being loaded into memory just failing at the time of JSON serialization. Memory utilization on our front-end nodes is very acceptable right now so I don't anticipate any problem. The largest response body I see is 11,339,294 bytes for AWSSDK.Core with all 3 checkboxes. That's why I picked a default of 16 MB.\r\n\r\nFix https://github.com/NuGet/NuGetGallery/issues/9487 - simply handle the null or unknown provider parameter and return an error message.\r\n\r\nConsider looking at the commits individually to understand what changes correspond to what bug. I combined these into two PRs since they are small and low risk."},{"Id":"28734403198","Type":"IssuesEvent","CreatedAt":"2023-04-28T15:08:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9487","RelatedDescription":"Opened issue \"[NuGet.org Bug]: HTTP 500 is returns when a null provider is provided for authentication\" (#9487) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThis causes alerting noise. Any crawler or bot hitting this endpoint generates an exception in our logs which can trigger alerting for us: `https://www.nuget.org/users/account/authenticate`\n\n### Repro Steps\n\nGo to the URL.\n\n### Expected Behavior\n\nA non-HTTP 500 response should be returned, probably an error message or an HTTP 400.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/94054/235184751-0dcefc50-e9a8-4fd9-b0c2-a07eaf2a0685.png)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"28734318263","Type":"IssuesEvent","CreatedAt":"2023-04-28T15:05:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9486","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Some stats pages return empty results\" (#9486) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe following stats pages show empty results:\r\n\r\n[awssdk.core](https://www.nuget.org/stats/packages/awssdk.core?groupby=Version&groupby=ClientName&groupby=ClientVersion) [awssdk.dynamodbv2](https://www.nuget.org/stats/packages/awssdk.dynamodbv2?groupby=Version&groupby=ClientName&groupby=ClientVersion) [awssdk.s3](https://www.nuget.org/stats/packages/awssdk.s3?groupby=Version&groupby=ClientName&groupby=ClientVersion) [awssdk.secretsmanager](https://www.nuget.org/stats/packages/awssdk.secretsmanager?groupby=Version&groupby=ClientName&groupby=ClientVersion) [awssdk.securitytoken](https://www.nuget.org/stats/packages/awssdk.securitytoken?groupby=Version&groupby=ClientName&groupby=ClientVersion) [awssdk.sqs](https://www.nuget.org/stats/packages/awssdk.sqs?groupby=Version&groupby=ClientName&groupby=ClientVersion) [csvhelper](https://www.nuget.org/stats/packages/csvhelper?groupby=Version&groupby=ClientName&groupby=ClientVersion) [fluentvalidation](https://www.nuget.org/stats/packages/fluentvalidation?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.entityframeworkcore](https://www.nuget.org/stats/packages/microsoft.entityframeworkcore?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.entityframeworkcore.abstractions](https://www.nuget.org/stats/packages/microsoft.entityframeworkcore.abstractions?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.configuration.abstractions](https://www.nuget.org/stats/packages/microsoft.extensions.configuration.abstractions?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.configuration.binder](https://www.nuget.org/stats/packages/microsoft.extensions.configuration.binder?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.dependencyinjection](https://www.nuget.org/stats/packages/microsoft.extensions.dependencyinjection?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.dependencyinjection.abstractions](https://www.nuget.org/stats/packages/microsoft.extensions.dependencyinjection.abstractions?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.logging](https://www.nuget.org/stats/packages/microsoft.extensions.logging?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.logging.abstractions](https://www.nuget.org/stats/packages/microsoft.extensions.logging.abstractions?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.options](https://www.nuget.org/stats/packages/microsoft.extensions.options?groupby=Version&groupby=ClientName&groupby=ClientVersion) [microsoft.extensions.primitives](https://www.nuget.org/stats/packages/microsoft.extensions.primitives?groupby=Version&groupby=ClientName&groupby=ClientVersion) [njsonschema](https://www.nuget.org/stats/packages/njsonschema?groupby=Version&groupby=ClientName&groupby=ClientVersion) [nlog](https://www.nuget.org/stats/packages/nlog?groupby=Version&groupby=ClientName&groupby=ClientVersion) [restsharp](https://www.nuget.org/stats/packages/restsharp?groupby=Version&groupby=ClientName&groupby=ClientVersion) [uno.ui](https://www.nuget.org/stats/packages/uno.ui?groupby=Version&groupby=ClientName&groupby=ClientVersion) \r\n\r\nThis is because the response body exceeds `JsonResult.MaxJsonLength`. For example AWSSDK.Core wants to return a 5,434,369 byte response which exceeds the default 4 MB.\n\n### Repro Steps\n\nGo to any of the stats pages linked above.\n\n### Expected Behavior\n\nA chart show be displayed, instead of an error page.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/94054/235183913-32f31398-3008-48dd-9b15-a75ce976eefc.png)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"28740551316","Type":"IssuesEvent","CreatedAt":"2023-04-28T20:30:26","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12563","RelatedDescription":"Closed issue \"The deprecated package \"NuGet.Core\" version 2.14.0 has no detailed information in the right panel of PM UI \" (#12563) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.7.0.20\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:      \r\n\r\n1. Create a C# Class Library (.NET Framework) project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.    \r\n\r\n3. Select the package source: “nuget.org” near the gear button and go to \"Browse\" tab.  \r\n\r\n4. Search for a deprecated package “NuGet.Core” with version 2.14.0 in \"Browse\" tab.   \r\n\r\n5. Click the package in the package list and observe the right panel \r\n\r\n#### Expected:      \r\n\r\nThe deprecated package \"NuGet.Core\" version 2.14.0 should have detailed information in the right panel of PM UI as below: \r\n![Untitled1](https://user-images.githubusercontent.com/84695155/234510927-67e71ba1-6c5c-482a-8a16-18f7b054b261.png)\r\n#### Actual:      \r\n\r\nThe deprecated package \"NuGet.Core\" version 2.14.0 has no detailed information in the right panel of the package as below screenshot.  \r\n![Untitled](https://user-images.githubusercontent.com/84695155/234511020-993df4e4-e634-4ec3-b356-1588dbd531b9.png)\r\n#### Notes:   \r\n1.The repro rate is 100%.   \r\n2. It is a regression bug since it doesn’t repro on VS Main\\33621.438 + NuGet Client Dev\\6.7.0.18. \r\n3. It just repro on version 2.14.0, doesn’t repro on the \"NuGet.Core\" package with other versions. \n\n### Verbose Logs\n\n_No response_"},{"Id":"28729349263","Type":"IssuesEvent","CreatedAt":"2023-04-28T11:39:21","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12568","RelatedDescription":"Opened issue \"NuGetAudit should be on by default with the .NET 8 SDK\" (#12568) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nNuGetAudit was recently merged into NuGet. In order to use the feature, it's necessary for customers to opt in with an MSBuild property `<NuGetAudit>true</NuGetAudit>`.\n\n### Desired Behavior\n\nThe default should be the same (opt-in) for customers using the .NET 7 SDK and earlier. But for early .NET 8 preview SDKs, we'd like to try making NuGetAudit opt-out, so on by default. Depending on feedback, we can revert it to opt-in before .NET 8 gets to RC1, but we think opt-out will give us great feedback during .NET 8's previews.\n\n### Additional Context\n\nFeature spec: https://github.com/NuGet/Home/blob/dev/proposed/2022/vulnerabilities-in-restore.md\r\n\r\nNuGetAudit will check for packages with known vulnerabilities during restore."},{"Id":"28725088881","Type":"IssuesEvent","CreatedAt":"2023-04-28T08:24:16","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11325","RelatedDescription":"Closed issue \"[Feature]: Make NuGet credential providers installable via the dotnet cli\" (#11325) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nMake NuGet credential providers installable via the dotnet cli, to make it easier for customers and alternate nuget sources to discover credential providers and simplify installation steps.\r\n\r\nConsider `dotnet tool install -g tool-name`, or `dotnet workload install maui`. These are tools that are shipped as nupkgs and make it easy for customers to install, and `dotnet workload search` makes it easy to discover.\r\n\r\nCompare to the [Azure Artifacts credential provider](https://github.com/microsoft/artifacts-credprovider), which gives instructions to use  shell scripting to download some arbitrary URL and execute that download as a shell script.\r\n\r\nWe could have something like `dotnet nuget credential-provider install Microsoft.Azure.Artifacts.CredentialProvider` which achieves the same end-goal.\r\n\r\nDiscovery could be solved by using nuspec package types, adding `CredentialProvider` as a new package type, then `dotnet nuget credential-provider list` could use nuget.org's `packageType:CredentialProvider` filtering to list only packages of that package type, display a list of cred providers available on the fee, and similar to `dotnet list package`, it could list which ones are installed and which ones have updates available.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28723940315","Type":"IssuesEvent","CreatedAt":"2023-04-28T07:31:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12560","RelatedDescription":"Closed issue \"License Type\" (#12560) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nWhy does NuGet only display the license URL in package details, unlike other package managers? Wouldn't it be easier to find out the license of a package through APIs or similar means?\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28718003395","Type":"IssuesEvent","CreatedAt":"2023-04-27T23:34:58","Actor":"JohnSchmeichel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12567","RelatedDescription":"Opened issue \"Support for credential providers deployed via .NET tools\" (#12567) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently, credential providers support \\*.exe for .NET Framework or \\*.dll for .NET Core, and are usually split between two folders under the NuGet credential provider base path. For .NET Framework the providers are discovered by searching credentialprovider*.exe and executing that program, and for .NET Core they are discovered by searching credentialprovider*.dll and executing ```dotnet <credentialprovider>.dll```. Prior to .NET Core 2.0 this split was required as .NET Core only supported platform agnostic dll's (with the side affect of excluding platform dependent credential providers not based on .NET). With the latest versions of .NET however, this split is no longer necessary and requires multiple versions to be supported and deployed. This is also reinforced by the two plugin path environment variables ```NUGET_NETFX_PLUGIN_PATHS``` and ```NUGET_NETCORE_PLUGIN_PATHS``` which need to be set per framework version.\r\n\r\nA deployment solution for dotnet is [.NET tools](https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools) which provide a seamless .NET install and management experience for NuGet packages. Using .NET tools as a deployment mechanism has been a recurring feature ask for users of the .NET ecosystem which need to authenticate with private repositories. The ideal workflow would be (for private repositories like Azure DevOps):\r\n1. Customers have dotnet CLI tools installed\r\n2. Run ```dotnet tool install -g Microsoft.CredentialProviders```\r\n3. Run ```dotnet restore``` with a private endpoint and it 'just works' (e.g. credential providers from step 2 are used during credential acquisition and used to authenticate against private endpoints)\r\n\r\nThis almost works today, but for Windows .NET Framework only. The goal is to support this cross-platform for all supported .NET runtimes.\r\n\r\n## Problems\r\nThis work for Windows and .NET Framework today with the following caveats:\r\n1. You must use the \"tool path\" option when installing to get the tool in a path known by NuGet. By default .NET tools are installed to %USERPROFILE%\\\\.dotnet\\\\tools which is a location not examined by NuGet today. This can be specified explicitly, but can be error prone and doesn't take into account any environment customization:\r\n    ```\r\n    dotnet tool install -g Microsoft.CredentialProviders --tool-path %USERPROFILE%\\.nuget\\plugins\\netfx\\CredentialProvider.Microsoft\r\n    ```\r\n2. .NET tools will wrap up the .NET application and layout with a single *.exe and hide all the details of the NuGet package and associated files in a .store directory as an implementation detail. This works for .NET Framework which exclusively checks for *.exe, but not for .NET Core.\r\n\r\nDeployment via a .NET tool doesn't work for .NET Core or cross platform for the following reasons:\r\n1. For Windows .NET tools will always use a *.exe extension. This doesn't work for .NET Core as that requires a *.dll to be invoked from dotnet, even if the .NET tool exe would otherwise work for both versions.\r\n2. For Linux/OSX the executable will not have any extension, but instead just have an executable with the execute bit (+x) set on it. E.g.:\r\n    ```\r\n    ~$ dotnet tool install -g my-dotnet-tool\r\n    You can invoke the tool using the following command: my-dotnet-tool\r\n    Tool 'my-dotnet-tool' (version '0.0.1') was successfully installed.\r\n\r\n    ~$ ls -l -a ~/.dotnet/tools\r\n    total 120\r\n    drwxrwxrwx  3 user user   4096 Mar 25  2019 .\r\n    drwxrwxrwx 13 user user   4096 Mar 30 17:34 ..\r\n    drwxrwxrwx  4 user user   4096 Mar 25  2019 .store\r\n    -rwxr-xr-x  1 user user 106744 Mar 25  2019 my-dotnet-tool\r\n    ```\r\nThis doesn't work as NuGet is exclusively looking for *.exe or *.dll\n\n### Desired Behavior\n\nThe following changes in behavior would be required to make the proposal work:\r\n\r\n## 1. Support platform appropriate executables\r\nFor Windows: support *.exe for both .NET Framework and .NET Core.\r\nFor Linux/OSX: support extensionless executables (+x bit set).\r\n\r\n## 2. Support single plugin path environment variable\r\nIn order to ship a single credential provider that works for both .NET Framework and .NET Core that doesn't conflict with the existing semantics of the ```NUGET_NETFX_PLUGIN_PATHS``` and ```NUGET_NETCORE_PLUGIN_PATHS``` environment variables, a new environment variable should be introduced that supports the new semantics for # 1 above. It's possible that ```NUGET_PLUGIN_PATHS``` can be repurposed here, but that currently has lower precedence that the framework versions.\r\n\r\n## 3. Support the .NET tool default installation location for credential providers\r\nThe default .NET tool installation directory should be included when discovering credential providers. This will simplify the installation and should reduce cases where tools are installed to a location that NuGet does not consider, reducing troubleshooting and support cases.\r\n\r\n\n\n### Additional Context\n\nThe overall context and vision for the credential providers that support Azure DevOps (nuget, npm, python, etc.) is that they should be supported and easily installable in the ecosystems they are used in. For .NET using the dotnet CLI that means installable using dotnet tool install, for npm that means npm install, etc. Currently, various installation scripts are required, per platform, which already assume a set of tools and configuration about the users environment (PowerShell/pwsh, bash/sh, etc.)."},{"Id":"28717683645","Type":"IssuesEvent","CreatedAt":"2023-04-27T23:05:54","Actor":"borrrden","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12566","RelatedDescription":"Opened issue \"Have a snupkg pack mode that is Nuget.org compliant\" (#12566) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe\n\n### Current Behavior\n\nWhen running nuget pack on a package that has non-portable pdb inside, nuget.exe happily packs them knowing that they will later fail validation on nuget.org.  This includes any NATIVE pdb inside. \r\n\r\nThe aftermath is this is pretty bad.  Once uploaded to nuget, a nupkg cannot be altered.  A snupkg can be reuploaded but this is meaningless since regenerating the pdb means that the new snupkg will fail to upload since it doesn't understand that it belongs to the existing pdb.  Furthermore, our internal nuget server has no issue hosting any kind of pdb and serving it via symbol server so it never occurred to me that this would even be an issue.  \n\n### Desired Behavior\n\nThe client should by default warn if any non-portable pdb files are found and NOT copy them to the snupkg to ensure that they are able to be uploaded to nuget.org.  Perhaps optionally provide a command line switch to copy them anyway.\n\n### Additional Context\n\n_No response_"},{"Id":"28712008521","Type":"IssuesEvent","CreatedAt":"2023-04-27T17:45:44","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12550","RelatedDescription":"Closed issue \"Reduce allocations in VirtualFileInfo.Name\" (#12550) at NuGet/Home","RelatedBody":"`VisualFileInfo` is an implementation of `IFileInfo` used with `Microsoft.Extensions.FileSystemGlobbing`. It's used when matching files in the package to files listed in the `contentFiles` section of package `nuspec` files.\r\n\r\nThe property is getting the filename from a path, but it does so with `PhysicalPath.Split('/').LastOrDefault();`. Both `Split` and `LastOrDefault` cause allocations, plus the result is not cached and debugging shows the same instance can have the `Name` getter called multiple times.\r\n\r\nThis code is used when generating the assets file when restoring a PackageReference project that uses a package that has `contentFiles/*` assets."},{"Id":"28705866421","Type":"IssuesEvent","CreatedAt":"2023-04-27T13:50:40","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12553","RelatedDescription":"Closed issue \"PackCommand_MultiTfm_PrereleaseDependency_ProjectLevelWarningSuppressed_Succeed test is flaky\" (#12553) at NuGet/Home","RelatedBody":"Since my change to run tests against .NET 8, the test `PackCommand_MultiTfm_PrereleaseDependency_ProjectLevelWarningSuppressed_Succeed` is failing occasionally.  I'm going to update the test to give more information because for now it just says:\r\n\r\n```\r\nExpected result.Success to be true, but found False.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/17556515/234046647-df2bbb9a-68dc-485b-beef-cc9cc03eda0a.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27423335680","Type":"IssuesEvent","CreatedAt":"2023-03-01T18:16:58","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Opened issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27174265829","Type":"IssuesEvent","CreatedAt":"2023-02-17T22:51:59","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/60","RelatedDescription":"Closed issue \"NuGet.org migration towards a new multi-CDN infrastructure\" (#60) at NuGet/Announcements","RelatedBody":"In the coming weeks, nuget.org will be migrating towards a new multi-CDN infrastructure that will improve the experience of our users. This change allows our team flexibility to switch to a back-up provider in the case that one CDN is down, which will broaden coverage for our users.\r\n\r\nSome changes are coming for older TLS cipher suites, which may result in connectivity issues. From our data we believe this will affect only a small percentage of requests. We will be monitoring all feedback channels during the migration to assess impact and adjust our roll-out timeline as needed.\r\n\r\nBelow, we provide resources to determine whether you will be affected by this change. This utilizes the [.NET CLI](https://dotnet.microsoft.com/) to install a package from our pre-production (INT) environment which tests connectivity:\r\n\r\n\r\n```\r\nmkdir cdn-test\r\ncd cdn-test\r\ndotnet new classlib\r\ndotnet add package BaseTestPackage.NetStandard --source https://apiint.nugettest.org/v3/index.json\r\n```\r\n\r\nIf you are experiencing connectivity issues while connecting to nuget.org or restoring packages from https://api.nuget.org/v3/index.json, such as:\r\n\r\n\"The SSL connection could not be established\"\r\n\r\nPlease ensure that TLS 1.2 and any of the following cipher suites have been enabled on your machine:\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\r\n\r\nIf you have any questions, do reach out to us at support@nuget.org or by commenting on the discussion issue: NuGet/Home#11058"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1631370937248481281","CreatedAt":"2023-03-02T19:08:35+00:00","UserScreenname":"nuget","Text":"Your package's README is your chance to showcase your hard work and make a great first impression. Here are some ti… https://t.co/SU8480LbkL","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1630609651275382793","CreatedAt":"2023-02-28T16:43:30+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.5 📦\n\n🧰 Visual Studio Support for Central Package Management\n🔁 Use server-provided Retry-After… https://t.co/FsMPajDT1u","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":26,"FavoriteCount":8,"RawContent":null},{"Id":"1625612488216649729","CreatedAt":"2023-02-14T21:46:34+00:00","UserScreenname":"nuget","Text":"📦 Search by Target Framework on https://t.co/F9kiKfvqkS 📦\n\n🔭 Improved package compatibility discovery\n📊 New sorts a… https://t.co/Xojm66sLar","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":35,"FavoriteCount":22,"RawContent":null},{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":128,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":46,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2023-04-30T03:30:24.0488181Z","RunDurationInMilliseconds":1344}