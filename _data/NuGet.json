{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"29338556594","Type":"IssuesEvent","CreatedAt":"2023-05-26T12:11:45","Actor":"dscheg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9518","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Table in README markdown looks ugly due to word wrap that breaks words\" (#9518) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n1. Table in README markdown looks ugly if some column contains a long text due to word wrap that breaks words in other columns even inside the inline code block. Compare rendered tables: Nuget https://www.nuget.org/packages/GlobRegex vs Github https://github.com/dscheg/GlobRegex\r\nGithub markdown looks good even on narrow screens. CSS to fix issue:\r\n```css\r\n.readme-common .table {\r\n  overflow: auto;\r\n  display: block;\r\n  word-break: normal;\r\n}\r\n```\r\n\r\n2. It might be better to have a horizontal scroll and turn off word wrap inside multiline code blocks, because it seems such code is hard to read, given that there are no line numbers and display of hyphens: it is not always clear whether the EOL is in the code itself or word wraping has been applied. The same example links above. CSS to fix issue: `pre code { white-space: pre; }` instead of `pre code { white-space: pre-wrap; }`\r\n\n\n### Repro Steps\n\nCreate readme for the package with:\r\n1. Table with 3 columns with a long text inside the middle column\r\n2. Multiple long lines inside multiline code block\n\n### Expected Behavior\n\n1. Table looks good even with long text in some column\r\n2. Multiline code blocks are easy to read even with long lines\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/1962268/513789fc-7d62-452b-9a10-e2e6607af536)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29298313034","Type":"IssuesEvent","CreatedAt":"2023-05-24T23:50:39","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9517","RelatedDescription":"Opened issue \"[NuGet.org Bug]: [Admin UI] Show number of package versions that have been selected in the Admin Unlist UI\" (#9517) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWhen we have to unlist many package versions at once, we often need to break it up into smaller batches. Showing the number of package versions that have been selected in the bulk unlist UI would help me do a better job of batch-sizing.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2aacb376-6d0d-44c0-bc21-c5d442bcf831)\r\n\r\nWe could even add the ability to select the first 'X' <unlisted/listed> package versions to help with this.\n\n### Repro Steps\n\n1. Go to the Bulk Unlist UI in the Admin Panel\r\n2. Enter names of packages you need to unlist\r\n3. Scroll down\n\n### Expected Behavior\n\n1. Show how many package versions have been selected (possibly in the button text)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2aacb376-6d0d-44c0-bc21-c5d442bcf831)\r\n\r\n2. Add the ability to select the first 'X' <unlisted/listed> package versions among those shown.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29293556712","Type":"PullRequestEvent","CreatedAt":"2023-05-24T19:00:17","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9501","RelatedDescription":"Merged pull request \"[2FA] Avoid new accounts coming to the Register page.\" (#9501) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Add `noindex` for `Register` (signup) and `SignInNugetAccount` (LogOnNuGetAccount) to avoid displaying them on search engines\r\n* `SignUp` (/users/account/signup) page now redirects to `Sign In`.\r\n* `LegacyRegister` (/account/register) page now redirects to `Sign In`.\r\n* `Register` POST endpoint redirects to `Sign In` when it has a password registration and 2FA enforcement flag is turned.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4768"},{"Id":"29270036909","Type":"IssuesEvent","CreatedAt":"2023-05-24T01:17:35","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9516","RelatedDescription":"Opened issue \"Remove unused 'OrganizationsEnabledForAll' file in blob storage\" (#9516) at NuGet/NuGetGallery","RelatedBody":"'OrganizationsEnabledForAll' property was removed  5 years ago.\nhttps://github.com/NuGet/NuGetGallery/pull/5822/files\n\nHowever, this property is still in Login-Discontinuation-Configuration.json, it throws exceptions when initialization loginconfiguration.\n\n "},{"Id":"29266406334","Type":"PullRequestEvent","CreatedAt":"2023-05-23T20:49:21","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9515","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.05.23]RI of dev into main\" (#9515) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"29261367196","Type":"PullRequestEvent","CreatedAt":"2023-05-23T16:51:30","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9515","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.05.23]\" (#9515) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"29256057975","Type":"PullRequestEvent","CreatedAt":"2023-05-23T13:46:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9506","RelatedDescription":"Merged pull request \"Adjust deprecation API slightly to prepare for public preview\" (#9506) at NuGet/NuGetGallery","RelatedBody":"- No-op the last edit update if there are no changes (reduces V3 load)\r\n- Require user agent and include the full UA as a custom dimension in App Insights\r\n- Return 400 not 404 when the alternate package is missing \r\n- Require user agent for the deprecation endpoint\r\n- These changes are backwards compatible with the known integrations with the Deprecation API\r\n\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/9505.\r\n\r\nAlign the API with the design changes described here: https://github.com/NuGet/Engineering/pull/4709 (internal PR now, will be public after public preview begins)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"29375056932","Type":"IssuesEvent","CreatedAt":"2023-05-29T08:36:37","Actor":"josesimoes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12596","RelatedDescription":"Closed issue \"nuget.exe wrongly complaining about missing readme\" (#12596) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.6.0.61\n\n### Worked before?\n\nany before that\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nUsing this nuspec from .NET nanoFramework project:\r\nhttps://github.com/nanoframework/nanoFramework.Logging/blob/main/nanoFramework.Logging.nuspec\r\n\r\nIt complains that the package should have a readme. It does have a readme (see line 12).\r\nWhen executing the `pack` command it shows:\r\n\r\n```text\r\nE:\\GitHub\\nf-nanoFramework.Logging>nuget pack nanoFramework.Logging.nuspec -Version 1.1.75 -Symbols -SymbolPackageFormat snupkg -properties nativeVersion=\"1.0.0.0\";commit=\"70724b742a2b6ae86eee87abbcbe41cf2da8a7ad\";checksum=\"0x00000000\"\r\nAttempting to build package from 'nanoFramework.Logging.nuspec'.\r\nWARNING: NU5101: The assembly 'lib\\nanoFramework.Logging.dll' is placed directly under 'lib' folder. It is recommended that assemblies be placed inside a framework-specific folder. Move it into a framework-specific folder.\r\nSuccessfully created package 'E:\\GitHub\\nf-nanoFramework.Logging\\nanoFramework.Logging.1.1.75.nupkg'.\r\nThe package nanoFramework.Logging.1.1.75 is missing a readme. Go to https://aka.ms/nuget/authoring-best-practices/readme to learn why package readmes are important.\r\nSuccessfully created package 'E:\\GitHub\\nf-nanoFramework.Logging\\nanoFramework.Logging.1.1.75.snupkg'.\r\n```\r\n\r\nBoth nuspec file and the pack command used haven't changed for quite a while and the same pattern is being used on all other class libraries under the same org.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"29373569981","Type":"IssuesEvent","CreatedAt":"2023-05-29T07:22:15","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12055","RelatedDescription":"Closed issue \"[Bug]: [Cross-platform Sign Verify] A redundant error NU3034 appears after adding a tampered signed package reference to the test project\" (#12055) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK Version: 7.0.100-rc.2.22417.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about Problem\r\n.NET SDK Version: 7.0.100-rc.2.22417.1\r\n#### Detailed repro steps ([test case](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FCross-platform%20verify%20%20tampered%20signed%20package%7Cec78d709-cbfc-4ecd-b068-85de4584ff38%2F%29&wdorigin=703))\r\n1.\tExecute the [Pre-testing steps](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FManual%20tests%2FTest%20Cases&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344A15B-01B1-4828-AF4C-63FE53687F8A%2FPre-testing%20steps%7C6E4370C3-C593-4B99-ABD8-908D0F9E002B%2F%29).\r\n2.\tWhere is the file path to the long-lived .cer or .pem file and is the directory path for the versioned .NET SDK directory (e.g.: ./dotnet/dotnet/sdk/7.0.100), add trust for the certificate:\r\nOn Windows: `.\\dotnet\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>`\r\n3.\tWhere is the test package ID and is the file path to the .pfx file, sign the test package:\r\nOn Windows: `.\\dotnet\\dotnet nuget sign .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg --overwrite --certificate-path <PfxFilePath> --timestamper http://timestamp.digicert.com/`\r\n4.\tVerify that the previous step succeeded with no warnings or errors.\r\n5.\tWhere is the test package ID, modify the signed package.\r\nOn Windows: `powershell.exe -Command Compress-Archive -Path .\\NuGet.config.template -Update -DestinationPath .\\<PackageId>\\bin\\Debug\\<PackageId>.1.0.0.nupkg`\r\n6.\tCreate a test project:  \r\n              On Windows:  `mkdir .\\test && pushd .\\test && ..\\dotnet\\dotnet new console && copy ..\\NuGet.config.template .\\NuGet.config `\r\n7.\tClear local NuGet resources and previous restore results:  \r\n              On Windows:  `rd /s /q .\\obj && ..\\dotnet\\dotnet nuget locals --clear all  `\r\n8.\tWhere <PackageId> is the test package ID, add a package reference to the test package: \r\n               On Windows:  `..\\dotnet\\dotnet add package <PackageId> --version 1.0.0 `\r\n\r\n#### Expected\r\nThere is only one error NU3008 in the result.\r\nOn Windows, the operation failed with the following messages: \r\na.\tinfo: X.509 certificate chain validation will use the default trust store selected by .NET. \r\nb.\terror: NU3008: Package '<PackageId> 1.0.0' from source 'E:\\testpass\\<PackageId>\\bin\\Debug': The package integrity check failed. The package has changed since it was signed. Try clearing the local http-cache and run nuget operation again. \r\n#### Actual\r\nBeside the expected error NU3008, a redundant error NU3034 appears as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/186882387-e75de97c-b969-4361-bdf6-1e053f23a006.png)\r\n#### Note:\r\nIt is not a regression because the issue was found in new feature.\n\n### Verbose Logs\n\n_No response_"},{"Id":"29356394855","Type":"PullRequestEvent","CreatedAt":"2023-05-27T15:00:57","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/12354","RelatedDescription":"Closed pull request \"Allow unecrypted API keys in nuget.config\" (#12354) at NuGet/Home","RelatedBody":"Without this API keys saved in nuget.config files can't work on Linux and Mac, unless https://github.com/NuGet/Home/issues/1851 is implemented."},{"Id":"29355557835","Type":"IssuesEvent","CreatedAt":"2023-05-27T13:01:00","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12564","RelatedDescription":"Closed issue \"NuGet package's content files cannot be imported to .NET project but can be imported to .NET Framework project \" (#12564) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nVS2022\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nI made a library named \"Tanzi.Zmotion.HDSStage\" that depends on a third party file `zmotion.dll`.\r\n* `zmotion.dll` is a dynamic library build by C++\r\n* \"Tanzi.Zmotion.HDSStage\" is a C# class project. I will pack it to a NuGet package.\r\n\r\nI want to pack `zmotion.dll` into NuGet package as well, so that `zmotion.dll` can be imported into any projects that have installed the package.\r\n\r\nI have pack `zmotion.dll` into “content” and \"contentFiles\"\r\n![image](https://user-images.githubusercontent.com/81862747/234578068-9dae0f40-dc38-4c59-8290-328d7efb621a.png)\r\n\r\nThen I found that it works for .NET Framework project\r\n![image](https://user-images.githubusercontent.com/81862747/234577037-ddd512ee-e450-457b-bf91-82d169c6bc5a.png)\r\n\r\nBut it doesn't work for a .NET project.\r\n\r\n![image](https://user-images.githubusercontent.com/81862747/234578725-6b8c996f-fd9b-4c08-82f2-a9ffd44c43d6.png)\r\n\r\nThe content of .NET project `WpfApps` is shown below\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFrameworks>net462-windows</TargetFrameworks>\r\n\t<LangVersion>10.0</LangVersion>\r\n    <Nullable>enable</Nullable>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Tanzi.Zmotion.HDSStage\" Version=\"0.0.0.5\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**How to solve it?**\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"29354928738","Type":"IssuesEvent","CreatedAt":"2023-05-27T11:32:16","Actor":"ALiwoto","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12617","RelatedDescription":"Opened issue \"Nuget.exe - exception when finding dependencies during pack\" (#12617) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.5.0.154\n\n### Worked before?\n\nAccording to issue #5406, this was fixed in v4.4.1; but the issue is still there in 6.5.0.154\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n> Note: Exact same thing is happening as #5406\r\n\r\nThis is the command I used:\r\n```cmd\r\nC:\\Util\\Nuget\\nuget.exe pack C:\\TFSAgent\\_work\\83\\s\\Company.Controls.Win.csproj -OutputDirectory C:\\TFSAgent\\_work\\83\\a -Properties \"Configuration=debug\" -IncludeReferencedProjects -Verbosity Detailed -MSBuildPath \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\" -ConfigFile \"C:\\Users\\TFSAdmin\\AppData\\Roaming\\NuGet\\NuGet.Config\"\r\n```\r\n\r\nInside of NuGet.Config file, we have our feed saved.\r\nThere is a `packages.config` file which lists dependencies (and `nuget restore` command works perfectly).\r\nHere is a small sample of the file:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<packages>\r\n  <package id=\"Spire.Pdf\" version=\"6.3.10\" targetFramework=\"net40\" />\r\n  <!-- and many other packages here -->\r\n</packages>\r\n```\r\n\r\nThe error message is just too vague, all it says is `The given key was not present in the dictionary.`\r\nAfter spending hours and trying to narrow down the issue, I found out removing this line of `packages.config` will solve the error:\r\n```xml\r\n<package id=\"Spire.Pdf\" version=\"6.3.10\" targetFramework=\"net40\" />\r\n```\r\n\r\nI checked our nuget feed (which is inside of Azure DevOps 2022), and found out the package id is `Spire.PDF`.\r\n\r\n`nuget restore` command is case insensitive, but it looks like `nuget pack` command is case sensitive.\n\n### Verbose Logs\n\n```shell\nNuGet Version: 6.5.0.154\r\nAttempting to build package from 'Company.Controls.Win.csproj'.\r\nUsing Msbuild from 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin'.\r\nPacking files from 'C:\\TFSAgent\\_work\\83\\s\\Output'\r\n\r\nFound packages.config. Using packages listed as dependencies\r\nThe given key was not present in the dictionary.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessDependencies(PackageBuilder builder)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"29346672942","Type":"PullRequestEvent","CreatedAt":"2023-05-26T18:19:07","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12616","RelatedDescription":"Opened pull request \"[Draft] Spec for Package Source Mapping Actions in PM UI\" (#12616) at NuGet/Home","RelatedBody":"[Draft] Package Source Mapping Package Management Actions in the PM UI([shortcut to rendered spec](https://github.com/NuGet/Home/blob/dev-donnie-msft-specSourceMappingActionSpec/proposed/2023/package-source-mapping-actions-PMUI.md))\r\n    - Marked Draft as there are questions about how we should proceed\r\n    - Various edge cases are unclear"},{"Id":"29326518066","Type":"PullRequestEvent","CreatedAt":"2023-05-26T00:00:55","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/12313","RelatedDescription":"Closed pull request \"Spec proposal for opt-in feature where PrivateAssets flag option indepdent from IncludeAssets/ExcludeAssets options\" (#12313) at NuGet/Home","RelatedBody":"Related to: https://github.com/NuGet/Home/issues/6938\r\n\r\n## Description\r\nCurrently `Include/Exclude` flag completely eclipses `PrivateAssets` flag when generating nupkg package in many cases. So, it doesn't let package dependencies flow to parent projects of consuming project. Here's a spec proposal for how to address with new opt-in feature property.\r\n[Rendered](https://github.com/NuGet/Home/blob/1af7f2779f52f1f22e4858bdeaa25f9623cf94c8/proposed/2022/PrivateAssetIndepdentFromExcludeAsset.md)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"},{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27423335680","Type":"IssuesEvent","CreatedAt":"2023-03-01T18:16:58","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Opened issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-05-30T03:30:23.467299Z","RunDurationInMilliseconds":1104}