{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"18899642162","Type":"PullRequestEvent","CreatedAt":"2021-11-15T22:32:53","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8880","RelatedDescription":"Merged pull request \"[Hotfix] Registering admin panel routes when admin panel is not disabled.\" (#8880) at NuGet/NuGetGallery","RelatedBody":"Fixed incorrect call to `Routes.RegisterRoutes` which prevented admin access to some pages."},{"Id":"18899301297","Type":"PullRequestEvent","CreatedAt":"2021-11-15T22:04:44","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8880","RelatedDescription":"Opened pull request \"[Hotfix] Registering admin panel routes when admin panel is not disabled.\" (#8880) at NuGet/NuGetGallery","RelatedBody":"Fixed incorrect call to `Routes.RegisterRoutes` which prevented admin access to some pages."},{"Id":"18896933033","Type":"PullRequestEvent","CreatedAt":"2021-11-15T19:03:10","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8879","RelatedDescription":"Opened pull request \"Update Roslyn Analyzer\" (#8879) at NuGet/NuGetGallery","RelatedBody":"The old Roslyn Analyzer package has been deprecated and not recommended:\r\nhttps://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers/\r\n\r\nThis is to use the new one."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"18901924639","Type":"IssuesEvent","CreatedAt":"2021-11-16T02:38:58","Actor":"zhuhuanzi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11336","RelatedDescription":"Closed issue \"[Bug]: CICD nuget private package sources restore  fail\" (#11336) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\ndotnet version: 5.0.202;Neget command line：1035.9.1.8\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\n_No response_\r\n\r\n### Repro Steps & Context\r\n\r\nExcuse me：\r\n\r\nI am OK on Windows，but doing CIDE is errror。\r\n\r\n---- https://xxxxxxx/api/v4/projects/60/packages/nuget/index.json:  It's my private address\r\n\r\n1. RUN dotnet nuget add source xxx -n private_nuget -u xxx -p xxx --store-password-in-clear-text\r\n\r\n2. RUN dotnet nuget list source\r\nLOG：\r\n--Registered Sources:\r\n -- nuget.org [Enabled]\r\n https://api.nuget.org/v3/index.json\r\n -- private_nuget [Enabled]\r\n https://xxxxxxx/api/v4/projects/60/packages/nuget/index.json\r\n\r\n3. RUN dotnet nuget --version\r\nLOG：\r\n1035.9.1.8\r\n\r\n3. RUN dotnet restore --verbosity detailed\r\nLOG：\r\n![image](https://user-images.githubusercontent.com/26531688/139044013-53ea92b2-d442-4985-adc0-97d41dbd8e4b.png)\r\n\r\n           OK https://api.nuget.org/v3-flatcontainer/system.text.encoding.codepages/4.5.1/system.text.encoding.codepages.4.5.1.nupkg 218ms\r\n         NuGet.Protocol.Core.Types.FatalProtocolException: Failed to retrieve information about 'System.Diagnostics.PerformanceCounter' from remote source 'xxxxxxxx/packages/nuget/download/system.diagnostics.performancecounter/index.json'.\r\n          ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 502 (Bad Gateway).\r\n            at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n            at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext()\r\n         --- End of stack trace from previous location ---\r\n            at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n            at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n            at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token)\r\n            at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.FindPackagesByIdAsync(String id, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            --- End of inner exception stack trace ---\r\n            at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.FindPackagesByIdAsync(String id, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.EnsurePackagesAsync(String id, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryCoreAsync(LibraryRange libraryRange, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.WalkAsync(LibraryRange library, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, Boolean recursive)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\n            at NuGet.Commands.ProjectRestoreCommand.WalkDependenciesAsync(LibraryRange projectRange, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, RemoteDependencyWalker walker, RemoteWalkContext context, CancellationToken token)\r\n            at NuGet.DependencyResolver.RemoteDependencyWalker.WalkAsync(LibraryRange library, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, Boolean recursive)\r\n            at NuGet.Commands.ProjectRestoreCommand.WalkDependenciesAsync(LibraryRange projectRange, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, RemoteDependencyWalker walker, RemoteWalkContext context, CancellationToken token)\r\n            at NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n            at NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity)\r\n            at NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity)\r\n            at NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity)\r\n            at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\n            at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n            at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n            at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\n            at NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreContext, CancellationToken token)\r\n            at NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\n            at NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\n            at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log)\r\n           OK https://api.nuget.org/v3-flatcontainer/documentformat.openxml/index.json 300ms\r\n       Done executing task \"RestoreTask\" -- FAILED.\r\n\r\n Retrying 'FindPackagesByIdAsync' for source 'https://xxxxx/packages/nuget/download/system.diagnostics.tracing/index.json'.\r\n  Response status code does not indicate success: 502 (Bad Gateway).\r\n\r\n/usr/share/dotnet/sdk/5.0.202/NuGet.targets(131,5): error :   Response status code does not indicate success: 502 (Bad Gateway).\r\n\r\n### Verbose Logs\r\n'xxxxxxxx/packages/nuget/download/system.diagnostics.performancecounter/index.json'：xxxxxx：It's my private address.\r\n```shell\r\nno\r\n```\r\n"},{"Id":"18901402600","Type":"IssuesEvent","CreatedAt":"2021-11-16T01:38:15","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11388","RelatedDescription":"Opened issue \"[Bug]: `NuGet.Indexing` NuGet package should be compatible with `net6.0`\" (#11388) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\nhttps://www.nuget.org/packages/NuGet.Indexing/6.0.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis NuGet package doesn't properly work when targeting `net6.0`.\r\nhttps://www.nuget.org/packages/NuGet.Indexing/6.0.0\r\n\r\nWe get this warning:\r\n```\r\nPackage 'NuGet.Indexing 6.0.0-rc.262' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net6.0-macos12.0'. This package may not be fully compatible with your project.\r\n```\r\n\r\nand the dependency on Lucene.Net is ignored, Lucene.Net.dll is not copied to output. This is because the dependencies are only declared for net472:\r\n![image](https://user-images.githubusercontent.com/679326/141879954-b633bb80-317f-4804-8931-ae9db6279ae9.png)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"18900302627","Type":"IssuesEvent","CreatedAt":"2021-11-15T23:36:52","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11386","RelatedDescription":"Closed issue \"[DCR]: Improve NuGet.Client build and debugging speed by making ilmerge targets use MSBuild up to date checks\" (#11386) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe\r\n\r\n### Current Behavior\r\n\r\nRunning `msbuild NuGet.sln` multiple times in a row at normal verbosity (especially if you use `-m:1`), you can see that a lot of time is spent on a few ilmerge targets\r\n\r\n### Desired Behavior\r\n\r\nIf the assemblies that are ilmerged do not change, then ilmerge should not run so builds without any code changes should be super fast (helps when re-running/debugging tests)\r\n\r\n### Additional Context\r\n\r\n_No response_"},{"Id":"18899877301","Type":"IssuesEvent","CreatedAt":"2021-11-15T22:55:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11387","RelatedDescription":"Opened issue \"[DCR]: Mitigate missing nuget.org when non-NuGet tool creates nuget.config without any sources\" (#11387) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nIf using Chocolatey, or Windows PowerShell's PowerShellGallery (nuget provider), on a clean machine, before running NuGet \"proper\" (Visual Studio, dotnet cli, nuget.exe, msbuild restore), then the user-profile nuget.config file created will not have any package sources. When a customer later tries to use \"real\" NuGet, nuget.org appears to not be pre-installed.\n\n### Desired Behavior\n\nStarting with a clean machine, install development tools with Chocolatey and PowerShellGallery, then install VS or the .NET SDK, NuGet restore should use nuget.org.\n\n### Additional Context\n\nNuGet has always created the user-profile `nuget.config` file on first access, when the file doesn't already exist. However, there was a time when it would do so without creating any package sources. Later NuGet was modified to add nuget.org as a package source when the default file was created.\r\n\r\nSince NuGet's functionality is available as NuGet packages, other products (most notably Chocolatey and PowerShell's `Install-Module` NuGet provider) used these packages, but did not update to newer versions of the packages where nuget.org was added by default. Therefore, if these tools were used before Visual Studio, MSBuild.exe, the .NET CLI, or NuGet.exe were used, they would create this `nuget.config` file without nuget.org as a package source.\r\n\r\nThis did not cause problems in the past because the implementation of how nuget.org got added to the user-profile file was by checking if a \"tracking file\" was created. When the tracking file was not on disk, it adds nuget.org as a package source to `nuget.config`, and creates the tracking file.\r\n\r\nIn early 2021, a security researcher posted a blog post about supply chain attacks where private libraries (packages in the NuGet/.NET ecosystem) that are internal to a company and therefore are on a private feed, are at risk if someone publishes a package with the same name and version on public feeds (nuget.org in our case). One of the mitigations for this is for companies to mirror the public packages they use in a private feed, and then stop using the public feed.\r\n\r\nThere, there was a significant number of security conscience customers who were removing nuget.org from their `nuget.config`. Those customers who did not use tools such as Chocolatey, that created the nuget.config without any package source, before running NuGet in an official tool first, they found that after trying to remove nuget.org as a package source, it would come back. Only by removing nuget.org twice, that nuget.org would finally be removed as a package source.  Customers who did not notice this were at risk of the \"dependency confusion\" attack they tried to mitigate by removing nuget.org as a package source.\r\n\r\nThe NuGet.Client team changed NuGet to no longer add nuget.org as a package source when the tracking file was missing: https://github.com/NuGet/NuGet.Client/pull/3907\r\n\r\nHowever, it was not known at that time that other tools were creating `nuget.config` without the package source. Since this version of NuGet has been released in Visual Studio and the .NET SDK, customers who do use those tools were under the mistaken impression that NuGet was not adding nuget.org as a package source by default. One such issue where customers were unaware of other tools creating this file is https://github.com/NuGet/Home/issues/10804"},{"Id":"18897832557","Type":"IssuesEvent","CreatedAt":"2021-11-15T20:09:25","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11375","RelatedDescription":"Closed issue \"[Bug]: NuGet Restore fails sporadically with signature validity check failure\" (#11375) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nNET SDK version 5.0.403\n\n### Worked before?\n\nAlso occurs with older SDKs\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nUnfortunately the issue occurs very sporadically and only on Azure build agents. We could never reproduce it on any of our developer machines.\r\n\r\nBut here is what we do:\r\n1. We download the `dotnet credential Provider` from https://aka.ms/install-artifacts-credprovider.ps1 to register our Azure AccessToken to give access to private NuGet feeds (this step might be unimportant)\r\n2. We download the dotnet-installer from https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.ps1\r\n3. Then we invoke it with this command line `dotnet-install.ps1 -InstallDir \"%TEMP%\\dotnet-win\\\" -Channel \"5.0\" -NoPath` to get the latest .NET 5 SDK\r\n4. Then we use it to compile: `%TEMP%\\dotnet-win\\dotnet.exe build <SolutionFile> /nodeReuse:false -nologo -clp:NoSummary --verbosity quiet`\r\n\r\nAnd then the restore fails with:\r\n```\r\nerror NU3037: Package 'System.Net.Http 4.3.1' from source 'https://api.nuget.org/v3/index.json': The repository primary signature validity period has expired. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\nerror NU3037: Package 'CommandLineParser 2.8.0' from source 'https://api.nuget.org/v3/index.json': The repository primary signature validity period has expired. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\nerror NU3028: Package 'System.Net.Http 4.3.1' from source 'https://api.nuget.org/v3/index.json': The repository primary signature's timestamping certificate is not trusted by the trust provider. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\nerror NU3028: Package 'CommandLineParser 2.8.0' from source 'https://api.nuget.org/v3/index.json': The repository primary signature's timestamping certificate is not trusted by the trust provider. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\n\r\nerror NU3037: Package 'Microsoft.Graph.Core 1.9.0' from source 'https://api.nuget.org/v3/index.json': The repository primary signature validity period has expired. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\nerror NU3028: Package 'Microsoft.Graph.Core 1.9.0' from source 'https://api.nuget.org/v3/index.json': The repository primary signature's timestamping certificate is not trusted by the trust provider. [C:\\a\\1\\s\\PiWeb\\build\\Nuke\\src\\Nuke.sln]\r\n```\r\n\r\nIt is completely unclear why this is happening and whether it has something to do with the Azure environment.\r\n\r\nIt can happen that the issue does not appear within two weeks and then it can happen several times a day. Unfortunately this makes our build pipeline completely unstable. We moved relatively shortly to Azure Pipelines (3 months ago) and this issue existed from the beginning.\r\n\r\nRelated issues might be:\r\nhttps://github.com/dotnet/core/issues/5884\r\nhttps://githubmemory.com/@RussellLMiller\r\n\r\nCan you give us any tips how we can tackle this issue? \r\nWhat could be the reason that the NuGet restore thinks that the nuget.org-repo has no valid timestamp or timestamp signature/certificate?\r\n\r\nThank you in advance.\n\n### Verbose Logs\n\n_No response_"},{"Id":"18894852488","Type":"IssuesEvent","CreatedAt":"2021-11-15T16:45:33","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11386","RelatedDescription":"Opened issue \"[DCR]: Improve NuGet.Build build and debugging speed by making ilmerge targets use MSBuild up to date checks\" (#11386) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe\n\n### Current Behavior\n\nRunning `msbuild NuGet.sln` multiple times in a row at normal verbosity (especially if you use `-m:1`, you can see that a lot of time is spent on a few ilmerge targets\n\n### Desired Behavior\n\nIf the assemblies that are ilmerged do not change, then ilmerge should not run\n\n### Additional Context\n\n_No response_"},{"Id":"18890541931","Type":"IssuesEvent","CreatedAt":"2021-11-15T12:45:06","Actor":"lanfeust69","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11385","RelatedDescription":"Opened issue \"[DCR]: PackageSourceMapping inconsistencies should be reported\" (#11385) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nWhen there is a no source matching the source name of a `<packageSourceMapping>` (typically a typo, or maybe after a git merge), a restore can fail with a very generic error\r\n```\r\nerror NU1100: Unable to resolve '<package>' for '<framework>'\r\n```\r\n\n\n### Desired Behavior\n\nThere should be a more helpful message.\r\n\r\nMaybe a warning at the beginning if there is no source corresponding to a `<packageSourceMapping>` entry.\r\n\n\n### Additional Context\n\n_No response_"},{"Id":"18869813871","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:34:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11384","RelatedDescription":"Opened issue \"Add support for PackageSourceMapping in PMC\" (#11384) at NuGet/Home","RelatedBody":"Design at https://github.com/NuGet/Home/issues/11383"},{"Id":"18869810473","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:33:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11383","RelatedDescription":"Opened issue \"Design Package Source Mapping experiences for PMC\" (#11383) at NuGet/Home","RelatedBody":"Child of https://github.com/NuGet/Home/issues/10730"},{"Id":"18869800461","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:31:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11382","RelatedDescription":"Opened issue \"Add support for listing and adding package source mappings \" (#11382) at NuGet/Home","RelatedBody":"Design https://github.com/NuGet/Home/issues/11381"},{"Id":"18869793219","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:30:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11381","RelatedDescription":"Opened issue \"Design Package Source mapping experiences for listing and adding mappings on the commandline. \" (#11381) at NuGet/Home","RelatedBody":"Commandline equivalent of https://github.com/NuGet/Home/issues/11377\r\n\r\nThis incldues listing all the mappings, adding new mappings, removing mappings, cleanup etc with dotnet.exe and/or nuget.exe"},{"Id":"18869783510","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:27:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11380","RelatedDescription":"Opened issue \"Add support for package source mapping in the dotnet.exe package commands\" (#11380) at NuGet/Home","RelatedBody":"Design in https://github.com/NuGet/Home/issues/11379"},{"Id":"18869768147","Type":"IssuesEvent","CreatedAt":"2021-11-13T01:24:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11379","RelatedDescription":"Opened issue \"Design Package Source mapping experiences for dotnet package  \" (#11379) at NuGet/Home","RelatedBody":"Child of https://github.com/NuGet/Home/issues/10730"},{"Id":"18868110593","Type":"IssuesEvent","CreatedAt":"2021-11-12T21:32:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11378","RelatedDescription":"Opened issue \"Design Package Source mapping package installation experinces in VS PM UI\" (#11378) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":162,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1410695861508526080","CreatedAt":"2021-07-01T20:24:37+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠ \nHave you recently experienced issues interacting with https://t.co/KVB7werYQh's Search API?… https://t.co/3eM1gicePx","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2021-11-16T05:30:33.3877788Z","RunDurationInMilliseconds":1388}