{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42099109172","Type":"PullRequestEvent","CreatedAt":"2024-09-19T23:32:30","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10188","RelatedDescription":"Opened pull request \"Dev eryondon job notfound exception\" (#10188) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Detail 1\r\n* Detail 2\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"},{"Id":"42059411585","Type":"PullRequestEvent","CreatedAt":"2024-09-18T22:47:59","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10185","RelatedDescription":"Merged pull request \"[CG] Upgrade System.Text.Json\" (#10185) at NuGet/NuGetGallery","RelatedBody":"Addresses NuGetGallery part of https://github.com/NuGet/Engineering/issues/5545\r\nCG alert: https://devdiv.visualstudio.com/DevDiv/_componentGovernance/NuGetPipelines/alert/9986282?typeId=20536579\r\n\r\nSome projects were pulling in `System.Text.Json v7.0.3` through the `NuGet.Protocol` package. I've made `System.Text.Json` a top-level reference in the affected projects so that it uses `v8.0.4` from the `Directory.Packages.props` file.\r\n\r\nI created a release with these changes, and it looks like it fixes the alert: \r\n![image](https://github.com/user-attachments/assets/d1d98b96-a853-41a0-933a-eecb8081e0f7)\r\n"},{"Id":"42041034683","Type":"IssuesEvent","CreatedAt":"2024-09-18T12:59:18","Actor":"glennawatson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10187","RelatedDescription":"Opened issue \"[Feature]: Relax the requirements for the dotnetfoundation user\" (#10187) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nthe @dotnetfoundation user has special rules that don't allow other owners of packages to control the author signing of a package. The .NET Foundation board and project committee would like to relax that requirement so that users only have to have valid signing certificates from a trusted root authority\n\n### The Elevator Pitch\n\nGet rid of the problematic rules that are limiting our users from maintaining their packages. The current restrictions are causing users to remove the dotnetfoundation as an owner of the package so they can provide their own signing certificates. Having packages in the foundation signed gives some assurance to our users but allows our maintainers flexibility to sign as needed.\n\n### Additional Context and Details\n\nHas been a pain to test azure trusted signing for the foundation. I hit this limitation with sign users myself and had to remove the dotnetfoundation owner and add myself as owner to allow tests to proceed.\r\n\r\nI know other project leads have removed the foundation owner themselves to let them do their own signing.\r\n\r\nSome maintainers are doing it since they want a fully linux approach for example and the current requirements doesn't give them flexibility."},{"Id":"42036003992","Type":"IssuesEvent","CreatedAt":"2024-09-18T10:33:39","Actor":"Giorgi","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10186","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Target framework not shown in the listing\" (#10186) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen I go to the details of my package I can see all target frameworks but in the list view I see only two of them.\r\n\r\n![image](https://github.com/user-attachments/assets/5361443e-aa37-44b2-89c4-e9d398c1b6e5)\r\n\n\n### Repro Steps\n\nGo to https://www.nuget.org/packages/DuckDB.NET.Bindings/1.1.0.1#supportedframeworks-body-tab or https://www.nuget.org/profiles/Giorgi  You won't see the **net8.0** target\n\n### Expected Behavior\n\nI should see all target frameworks.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/5f009e3c-48e5-4da9-b592-dcd3aac12630)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42020731895","Type":"PullRequestEvent","CreatedAt":"2024-09-17T23:34:26","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10185","RelatedDescription":"Opened pull request \"[CG] Upgrade System.Text.Json\" (#10185) at NuGet/NuGetGallery","RelatedBody":"Addresses NuGetGallery part of https://github.com/NuGet/Engineering/issues/5545\r\nCG alert: https://devdiv.visualstudio.com/DevDiv/_componentGovernance/NuGetPipelines/alert/9986282?typeId=20536579\r\n\r\nSome projects were pulling in `System.Text.Json v7.0.3` through the `NuGet.Protocol` package. I've made `System.Text.Json` a top-level reference in the affected projects so that it uses `v8.0.4` from the `Directory.Packages.props` file."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42089856800","Type":"IssuesEvent","CreatedAt":"2024-09-19T17:07:52","Actor":"breidikl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13794","RelatedDescription":"Opened issue \"Dotnet restore is unable to find runtime.*.Sytem packages after updating the SDK from 8.0.401 to 9.0.100-rc.1.24452.12 when using lock files\" (#13794) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-rc.1.24452.12\n\n### Worked before?\n\n.NET SDK 8.0.401\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWe have multiple csproj files in our org that include various runtime.*.System packages as transitive dependencies, which do get resolved in packages.lock.json, similar to the following:\r\n\r\n```\r\n      \"runtime.win.System.Diagnostics.Debug\": {\r\n        \"type\": \"Transitive\",\r\n        \"resolved\": \"4.3.0\",\r\n        \"contentHash\": \"hHHP0WCStene2jjeYcuDkETozUYF/3sHVRHAEOgS3L15hlip24ssqCTnJC28Z03Wpo078oMcJd0H4egD2aJI8g==\"\r\n      },\r\n```\r\n\r\nWhen running the following after updating the SDK version:\r\n\r\n`dotnet.exe restore --use-lock-file --no-dependencies /p:ImportProjectExtensionProps=false /p:ImportProjectExtensionTargets=false /p:PublishReadyToRun=true /p:CommandlinePlatform=x64 /nodeReuse:false /maxcpucount:1 --lock-file-path \"packages.lock.json\"`\r\n\r\nIt then fails with messages similar to the following (repeated for multiple runtime.*.System.* packages):\r\n\r\n`error NU1101: Unable to find package runtime.win.System.Diagnostics.Debug. No packages exist with this id in source(s)`\r\n\r\nThe package in question exists directly on the feed being used (and is even already in the local cache due to the earlier restore call when using 8.0.401). \r\n\r\nIf I delete the content of the lock file and re-run, restore succeeds and re-creates the exact same content. Attempting to rebuild again after that fails for restore again in the same way.  \r\n\r\nThe specific MSBuild version being used is 17.12.0-preview-24422-09+d17ec720d.  \n\n### Verbose Logs\n\n_No response_"},{"Id":"42077514777","Type":"IssuesEvent","CreatedAt":"2024-09-19T11:36:13","Actor":"keldaaas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13793","RelatedDescription":"Opened issue \"Updating multiple packages (with CPM and transitive pinning) should verify the referenced versions afterwards\" (#13793) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nWith CPM and transitive pinning enabled:\r\n\r\nSolution S contains a console app and a test project. \r\nThe console app references package A.\r\nThe test project references package B.\r\n**Package B has a dependency on package A.**\r\n\r\n_ConsoleApp -> Package A\r\nTestProject -> Package B -> Package A_\r\n\r\n\r\nWhenever one tries to update both packages at the same time with the Package Manager UI there is an error [NU1109](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1109). I suppose this happens because the check for package B's dependencies doesn't take into account that package A will be updated as well. Instead it stops this process to avoid having referencing different versions of package A.\r\nAt the moment the only solution is to update package A first and package B afterwards. This makes the CPM really annoying to use in solutions with a lot of dependencies.\n\n### Desired Behavior\n\nEither take into account that a referenced transitive dependency gets updated \"at the same time\" or check for different versions after the updates were executed.\n\n### Additional Context\n\n_No response_"},{"Id":"42040718194","Type":"IssuesEvent","CreatedAt":"2024-09-18T12:51:15","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13659","RelatedDescription":"Closed issue \"NUGET_CERT_REVOCATION_MODE not using HTTPS\" (#13659) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\ndotnet.exe\r\n\r\n### Current Behavior\r\n\r\nIn an AWS CodeBuild environment where I only allow outbound HTTPS traffic (443) the `dotnet restore` command on my application which includes public nuget packages, would take an extremely long amount of time (20+ minutes) -- but by setting `NUGET_CERT_REVOCATION_MODE` to `offline` it would be as fast as if HTTP/80 was allowed (~15 seconds).  It seems like the status check of the certificate used to sign a package is done over HTTP and not HTTPS.    This blog post suggests everything should be done over HTTPS related to nuget: https://devblogs.microsoft.com/nuget/https-everywhere/\r\n\r\n### Desired Behavior\r\n\r\nClient should be able to enforce that the status check of the certificates used to sign a packages is done only over HTTPS/443.\r\n\r\n### Additional Context\r\n\r\nI have an open StackOverflow Question here that I slowly came to the hypothesis that this is the underlying culprit.: https://stackoverflow.com/questions/78755772/nuget-enforce-https-only-traffic-from-aws-codebuild"},{"Id":"42040662051","Type":"PullRequestEvent","CreatedAt":"2024-09-18T12:49:47","Actor":"glennawatson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13792","RelatedDescription":"Opened pull request \"Relax the signing requirements for the dotnetfoundation owner user\" (#13792) at NuGet/Home","RelatedBody":"This has been discussed with @JonDouglas who recommended making this proposal.\r\n\r\nWe went through our internal processes as recommended by @JonDouglas, including discussing in the Project committee and also the board level.\r\n\r\nWe want to make a formal request to relax the dotnetfoundation user author signing requirements to be closer to the normal nuget.org owner but only requiring a root trusted authority author signature for the package."},{"Id":"42019759592","Type":"IssuesEvent","CreatedAt":"2024-09-17T22:35:56","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13788","RelatedDescription":"Closed issue \"New dependency resolver does not properly handle missing package versions when using CPM\" (#13788) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\n6.12\n\n### Worked before?\n\nYes\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nIf you have two projects where one references the other and you're missing a PackageVersion for CPM, then the new dependency resolver does not handle this correctly.\r\n\r\n```\r\nProjectA -> ProjectB -> PackageX (missing a PackageVersion)\r\n```\r\n\r\n\r\nDuring restore of each project, we verify that CPM is configured properly.  For ProjectB, we correctly identify this.  When resolving the graph of ProjectA, none of its package references are missing any versions.  I'm not sure how the legacy dependency resolver handles this.  Maybe it has to do with ordering?\n\n### Verbose Logs\n\n```shell\nDirectory.Packages.props\r\n\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\n\r\nClassLibrary1.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ClassLibrary2\\ClassLibrary2.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nClassLibrary2.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"EnvironmentAbstractions\" />\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\n\r\nNew resolver output:\r\n```\r\n  ClassLibrary2.csproj : error NU1008: Projects that use central package version management should not define the version on the PackageReference items but on the PackageVersion items: EnvironmentAbstractions.\r\n  ClassLibrary1.csproj : error NU1101: Unable to find package EnvironmentAbstractions. No packages exist with this id in source(s): nuget.org \r\n```\r\n\r\nLegacy resolver output:\r\n```\r\n  ClassLibrary2.csproj : error NU1008: Projects that use central package version management should not define the version on the PackageReference items but on the PackageVersion items: EnvironmentAbstractions.\r\n```\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-20T03:30:22.3876482Z","RunDurationInMilliseconds":969}