{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43353181356","Type":"PullRequestEvent","CreatedAt":"2024-10-30T13:48:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10243","RelatedDescription":"Opened pull request \"Package deprecation should be case insensitive on version\" (#10243) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/10242"},{"Id":"43352686871","Type":"IssuesEvent","CreatedAt":"2024-10-30T13:35:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10242","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Deprecation API is case sensitive on package version\" (#10242) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nThis was found when helping the Azure SDK team with a bug.\r\n\r\nIf the version included in the deprecation API request does not match the original version casing (e.g. `1.0.0-rc1` instead of `1.0.0-RC1`) the request fails with a 404.\n\n### Repro Steps\n\n1. Upload a package with version `1.0.0-RC1` version\r\n2. Deprecate it via API using this request body:\r\n\r\n```json\r\n{\r\n  \"versions\": [\r\n    \"1.0.0-rc1\"\r\n  ],\r\n  \"isLegacy\": \"true\"\r\n}\r\n```\r\n\r\n\n\n### Expected Behavior\n\nThis should succeed. Instead it returns 404.\r\n\r\n```\r\nPUT /api/v2/package/MyPackage/deprecations HTTP/1.1\r\nAccept: application/json, */*;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nContent-Length: 27\r\nContent-Type: application/json\r\nHost: localhost\r\nUser-Agent: HTTPie/3.2.3\r\nX-NuGet-ApiKey: API_KEY\r\n\r\n{\r\n    \"versions\": [\r\n        \"2.6.0-rc1\"\r\n    ]\r\n}\r\n\r\n\r\nHTTP/1.1 404 At least one version of package 'MyPackage' specified could not be found.\r\nCache-Control: private, s-maxage=0\r\nContent-Length: 90\r\nContent-Security-Policy: frame-ancestors 'none'\r\nContent-Type: text/html; charset=utf-8\r\nDate: Wed, 30 Oct 2024 13:35:00 GMT\r\nServer: Microsoft-IIS/10.0\r\nStrict-Transport-Security: max-age=31536000; includeSubDomains\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: deny\r\nX-XSS-Protection: 1; mode=block\r\n\r\nAt least one version of package 'MyPackage' specified could not be found.\r\n```\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"43341439484","Type":"IssuesEvent","CreatedAt":"2024-10-30T08:13:04","Actor":"zigzag312","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10241","RelatedDescription":"Opened issue \"[Feature]: Filter by \"Last Updated\"\" (#10241) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nWhen searching for packages and sorting by relevance or downloads, unmaintained / deprecated packages that used to be popular are often shown. \r\n\r\nAnd sorting by last updated date shows too many new, untested packages. \n\n### The Elevator Pitch\n\nAbility to show only packages that were last updated in x past year(s), to filter out unmaintained / deprecated packages.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43330647027","Type":"PullRequestEvent","CreatedAt":"2024-10-29T23:03:27","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10219","RelatedDescription":"Closed pull request \"collapse the preview and vulnerable versions in the version tab\" (#10219) at NuGet/NuGetGallery","RelatedBody":"## Before\r\n![d0af605c6802e38506f0c824dcb1c968](https://github.com/user-attachments/assets/91e7f6bc-05b1-421e-a12e-7ae505ada773)\r\n\r\n## After\r\n![f6f2ad81303f26be6d7cd9b2471444f3](https://github.com/user-attachments/assets/816a86b6-b1eb-43ad-972e-4dc13b8a0ee5)\r\n\r\nfix #10172"},{"Id":"43289121661","Type":"PullRequestEvent","CreatedAt":"2024-10-28T22:37:29","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10238","RelatedDescription":"Merged pull request \"RI `dev-feature-sdkmigration` to `dev`\" (#10238) at NuGet/NuGetGallery","RelatedBody":"This will be the end of this feature branch in NuGetGallery. The approvers are:\r\n\r\n@agr\r\n@advay26 \r\n@drewgillies "},{"Id":"43283376929","Type":"PullRequestEvent","CreatedAt":"2024-10-28T19:01:08","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10240","RelatedDescription":"Opened pull request \"Migrating GitHub indexer\" (#10240) at NuGet/NuGetGallery","RelatedBody":"Merging githubindexer migration. Tested on DEV and INT.\r\n\r\nAddresses https://github.com/orgs/NuGet/projects/21/views/1?filterQuery=milestone%3A%22Sprint+2024-10%22+assignee%3A%40me&pane=issue&itemId=64259347&issue=NuGet%7CEngineering%7C5443"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43371356559","Type":"IssuesEvent","CreatedAt":"2024-10-30T23:26:18","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13895","RelatedDescription":"Opened issue \"Deploying an experimental instance in 17.12 results in a compatibility version error on STJ\" (#13895) at NuGet/Home","RelatedBody":"Since VS 17.13 upgraded System.Text.Json (STJ) to 8.0.5 if you deploy an experimental instance using latest NuGet.Client code in 17.12 (and I believe older) you will have an error when opening the PM UI, looking at the error message I see that it's unable to get 8.0.5 STJ.\r\n\r\nI believe that we need to update our dependencies to use 8.0.4 if the VS build version is older than 17.13\r\n\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/f7186802-e002-461b-86b7-af82f6b5425a)\r\n"},{"Id":"43342578890","Type":"IssuesEvent","CreatedAt":"2024-10-30T08:51:36","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13892","RelatedDescription":"Opened issue \"There is no PM UI horizontal scroll when the width is not enough to display all controls\" (#13892) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.46\n\n### Worked before?\n\nDev\\6.13.0.45\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.46\r\nVS Version: Main\\35429.116\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:\r\n1.\tRepro rate: 100%\r\n2.\tIt starts to repro from NuGet Client Dev\\6.13.0.46, doesn’t repro on NuGet Client Dev\\6.13.0.45.\r\n\r\n#### Repro Steps: \r\n1. Create a new C# Console App (.NET Core 9.0) project in VS and open it in full-screen VS Internal Preview.  \r\n2. Click menu “Tools -> NuGet Package Manager -> Manage NuGet Packages for Solution”.  \r\n3. Start shrinking width of VS Internal Preview window and observe the bottom of the PM UI.\r\n#### Expected Result:\r\nThere should be PM UI horizontal scroll when the width is not enough to display all controls.\r\n\r\n#### Actual Result:\r\nThere is no PM UI horizontal scroll when the width is not enough to display all controls as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/d89a5d20-166f-46ef-aa9b-9db970bcac3f)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"43331261686","Type":"IssuesEvent","CreatedAt":"2024-10-29T23:39:49","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13891","RelatedDescription":"Closed issue \"Deprecate SHA-1 fingerprints usage in NuGet Sign commands in favor of SHA-2 family fingerprints (nuget.exe sign, dotnet sign)\" (#13891) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently, the `dotnet nuget sign` and `nuget.exe sign` commands rely on the SHA-1 fingerprint of a certificate to locate it within the local certificate store. This method does not comply with Security Development Lifecycle (SDL) requirements, as SHA-1 is considered insecure for certificate thumbprints.\n\n### Desired Behavior\n\nModify the `dotnet nuget sign` and `nuget.exe sign` commands to accept fingerprints from the SHA-2 family (SHA256, SHA384, or SHA512) instead of SHA-1. If a SHA-1 fingerprint is passed, the commands should raise a warning indicating that SHA-1 is insecure. This warning may eventually escalate to an error around the .NET 10 timeframe to enforce stronger security standards. This approach will enhance security by ensuring that only strong, approved hash algorithms are used in NuGet sign commands.\n\n### Additional Context\n\n_No response_"},{"Id":"43331259094","Type":"IssuesEvent","CreatedAt":"2024-10-29T23:39:39","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13891","RelatedDescription":"Opened issue \"Deprecate SHA-1 fingerprints usage in NuGet Sign commands in favor of SHA-2 family fingerprints (nuget.exe sign, dotnet sign)\" (#13891) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently, the `dotnet nuget sign` and `nuget.exe sign` commands rely on the SHA-1 fingerprint of a certificate to locate it within the local certificate store. This method does not comply with Security Development Lifecycle (SDL) requirements, as SHA-1 is considered insecure for certificate thumbprints.\n\n### Desired Behavior\n\nModify the `dotnet nuget sign` and `nuget.exe sign` commands to accept fingerprints from the SHA-2 family (SHA256, SHA384, or SHA512) instead of SHA-1. If a SHA-1 fingerprint is passed, the commands should raise a warning indicating that SHA-1 is insecure. This warning may eventually escalate to an error around the .NET 10 timeframe to enforce stronger security standards. This approach will enhance security by ensuring that only strong, approved hash algorithms are used in NuGet sign commands.\n\n### Additional Context\n\n_No response_"},{"Id":"43330499243","Type":"IssuesEvent","CreatedAt":"2024-10-29T22:55:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13890","RelatedDescription":"Opened issue \"Include #13888 in known issues for 6.12\" (#13890) at NuGet/Home","RelatedBody":"Include https://github.com/NuGet/Home/issues/13888 in known issues for 6.12"},{"Id":"43330479501","Type":"IssuesEvent","CreatedAt":"2024-10-29T22:54:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13889","RelatedDescription":"Opened issue \"Project/Package with same id in the same graph may lead to discrepancy in behavior of new/old algorithm\" (#13889) at NuGet/Home","RelatedBody":"```cs\r\n   // Project1 -> Project2 -> A 1.0.0\r\n        //                      -> Project3 -> ProjectAndPackage (project) 2.0.0 -> B 1.0.0 \r\n        //                      -> ProjectAndPackage 0.9.0/3.0.0 -> B 2.0.0\r\n        [Theory]\r\n        [InlineData(\"3.0.0\")]\r\n        [InlineData(\"0.9.0\")]\r\n        public async Task RestoreCommand_WithSameIdProjectAndPackageWherePackageIsCloser_PrefersProject_AndVerifiesEquivalency(string projectAndPackageVersion)\r\n        {\r\n            using var pathContext = new SimpleTestPathContext();\r\n\r\n            // Setup packages\r\n            var packageA = new SimpleTestPackageContext(\"packageA\", \"1.0.0\");\r\n            var packageB = new SimpleTestPackageContext(\"packageB\", \"1.0.0\");\r\n            var projectAndPackage = new SimpleTestPackageContext(\"ProjectAndPackage\", \"2.0.0\")\r\n            {\r\n                Dependencies = [new SimpleTestPackageContext(\"packageB\", \"2.0.0\")]\r\n            };\r\n\r\n            await SimpleTestPackageUtility.CreateFolderFeedV3Async(\r\n                pathContext.PackageSource,\r\n                PackageSaveMode.Defaultv3,\r\n                packageA,\r\n                packageB,\r\n                projectAndPackage);\r\n\r\n            var intermediateProject = $@\"\r\n        {{\r\n          \"\"version\"\": \"\"1.0.0\"\",\r\n          \"\"frameworks\"\": {{\r\n            \"\"net472\"\": {{\r\n                \"\"dependencies\"\": {{\r\n                        \"\"packageA\"\": {{\r\n                            \"\"version\"\": \"\"[1.0.0,)\"\",\r\n                            \"\"target\"\": \"\"Package\"\",\r\n                        }},\r\n                        \"\"ProjectAndPackage\"\": {{\r\n                            \"\"version\"\": \"\"[{projectAndPackageVersion},)\"\",\r\n                            \"\"target\"\": \"\"Package\"\",\r\n                        }},\r\n                }}\r\n            }}\r\n          }}\r\n        }}\";\r\n\r\n            var projectAndPackageSpec = @\"\r\n        {\r\n          \"\"version\"\": \"\"2.0.0\"\",\r\n          \"\"frameworks\"\": {\r\n            \"\"net472\"\": {\r\n                \"\"dependencies\"\": {\r\n                        \"\"packageB\"\": {\r\n                            \"\"version\"\": \"\"[1.0.0,)\"\",\r\n                            \"\"target\"\": \"\"Package\"\",\r\n                        },\r\n                }\r\n            }\r\n          }\r\n        }\";\r\n            // Setup project\r\n            var projectSpec = ProjectTestHelpers.GetPackageSpec(\"Project1\", framework: \"net472\");\r\n            var projectSpec2 = ProjectTestHelpers.GetPackageSpecWithProjectNameAndSpec(\"Project2\", pathContext.SolutionRoot, intermediateProject);\r\n            var projectSpec3 = ProjectTestHelpers.GetPackageSpec(\"Project3\", framework: \"net472\");\r\n            var projectAndPackageProject = ProjectTestHelpers.GetPackageSpecWithProjectNameAndSpec(\"ProjectAndPackage\", pathContext.SolutionRoot, projectAndPackageSpec);\r\n\r\n            projectSpec3 = projectSpec3.WithTestProjectReference(projectAndPackageProject);\r\n            projectSpec2 = projectSpec2.WithTestProjectReference(projectSpec3);\r\n            projectSpec = projectSpec.WithTestProjectReference(projectSpec2);\r\n\r\n            // Act & Assert\r\n            (var result, _) = await ValidateRestoreAlgorithmEquivalency(pathContext, projectSpec, projectSpec2, projectSpec3, projectAndPackageProject);\r\n            //result.LockFile.PackageSpec.RestoreMetadata.CentralPackageTransitivePinningEnabled.Should().BeFalse();\r\n            //result.LockFile.Targets.Should().HaveCount(1);\r\n            //result.LockFile.Targets[0].Libraries.Should().HaveCount(5);\r\n            //result.LockFile.Targets[0].Libraries[0].Name.Should().Be(\"packageA\");\r\n            //result.LockFile.Targets[0].Libraries[1].Name.Should().Be(\"packageB\");\r\n            //result.LockFile.Targets[0].Libraries[1].Version.Should().Be(new NuGetVersion(\"1.0.0\"));\r\n            //result.LockFile.Targets[0].Libraries[2].Name.Should().Be(\"Project2\");\r\n            //result.LockFile.Targets[0].Libraries[3].Name.Should().Be(\"Project3\");\r\n            //result.LockFile.Targets[0].Libraries[4].Name.Should().Be(\"ProjectAndPackage\");\r\n            //result.LockFile.Targets[0].Libraries[4].Type.Should().Be(\"project\");\r\n        }\r\n```\r\n\r\nThese 2 tests lead to a differece in behavior between the old/new algorithms. \r\nIt's an extremely unlikely scenario and honestly, I don't think the old algorithm's result is the preferred one. \r\n\r\nWe should consider whether this is even worth addressing. "},{"Id":"43330439212","Type":"IssuesEvent","CreatedAt":"2024-10-29T22:51:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13888","RelatedDescription":"Opened issue \"Project and package in the same graph with the same name but different dependencies may lead to incorrect versions of the dependencies of that id \" (#13888) at NuGet/Home","RelatedBody":"Take the following setup:\r\n\r\n```\r\n        // Project1 -> (project) ProjectAndPackage 1.0.0 -> Project3 -> Project4 -> PackageB 2.0.0\r\n        //                -> packageA 1.0.0 -> PackageB 1.0.0\r\n        //                                              -> ProjectAndPackage 2.0.0\r\n```\r\n\r\nThe old algorithm would choose packageB 2.0.0, but the new one chose PackageB 1.0.0."},{"Id":"43326595195","Type":"IssuesEvent","CreatedAt":"2024-10-29T20:12:09","Actor":"danmoseley","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13887","RelatedDescription":"Opened issue \"dotnet nuget search should redirect to dotnet package search\" (#13887) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe\n\n### Current Behavior\n\nI'm glad we now have dotnet package search so I don't have to use nuget.exe search. But I assumed it was dotnet nuget search. When I do dotnet nuget search, there's no hint that I actually want dotnet package search.\n\n### Desired Behavior\n\nEither add a line to the \"unrecognized command\" output of dotnet nuget to mention dotnet package search. Or, just treat dotnet nuget search as if it was dotnet package search.\n\n### Additional Context\n\nIt's already confusing because dotnet nuget list is not the same as nuget.exe list. Any hints around this would be helpful."},{"Id":"43286935285","Type":"IssuesEvent","CreatedAt":"2024-10-28T21:03:25","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13756","RelatedDescription":"Closed issue \"Package Manger output and VS status bar restore updates are not available on solution load\" (#13756) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.12\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen opening a solution on VS load, if you open a solution where restore takes a long time (say there are many packages that need to be downloaded), then VS's background tasks shows that IntelliSense is taking \"forever\" to finish (because it's waiting for restore to finish), but restore doesn't show the usual messages on the status bar.\r\n\r\nSimilarly, if you open the Output window, \"Package Manager\" is not an option in the dropdown, until AFTER the first restore is complete.\r\n\r\nIf you try to build the solution while VS is seemingly doing nothing, the VS status bar will go to 50%, but then not mode. The Build output window doesn't show any build output, making it look like VS is frozen.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-31T03:30:21.1484804Z","RunDurationInMilliseconds":860}