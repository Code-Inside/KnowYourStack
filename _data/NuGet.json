{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"19583854704","Type":"PullRequestEvent","CreatedAt":"2022-01-05T02:33:19","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8931","RelatedDescription":"Opened pull request \"[A11y] Fixes tag link color in search results\" (#8931) at NuGet/NuGetGallery","RelatedBody":"Fixes https://github.com/NuGet/NuGetGallery/issues/8921\r\n\r\nWhen viewing package search results on nuget.org, the links for the tags were indistinguishable from non-hyperlink text around it:\r\n \r\n![image](https://user-images.githubusercontent.com/82980589/148151368-1b4305b8-1d28-43eb-a86f-88b94e38284b.png)\r\n\r\nThis PR fixes it and changes the tag hyperlink color such that users can differentiate between regular text and the links:\r\n\r\n![image](https://user-images.githubusercontent.com/82980589/148151488-1d2f0193-3084-4cca-8613-07d51636f958.png)\r\n"},{"Id":"19583822079","Type":"PullRequestEvent","CreatedAt":"2022-01-05T02:29:19","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8930","RelatedDescription":"Opened pull request \"Update gallery jobs to use new service bus MSI\" (#8930) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"19582573050","Type":"PullRequestEvent","CreatedAt":"2022-01-04T23:58:04","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8929","RelatedDescription":"Opened pull request \"[TFM Display] Add feature flags for TFM.\" (#8929) at NuGet/NuGetGallery","RelatedBody":"- `ComputeTargetFramework`: This feature flag will be turned on to perform computations on the backend for TFM work, this will help us to check performance before showing TFM to public.\r\n- `DisplayTargetFramework`: This flight is to help testing the behavior of TFMs on display page showing both badges and tab, if this feature flag is turned on, it will override the `ComputeTargetFramework `behavior.\r\n\r\nAddress: https://github.com/NuGet/Engineering/issues/4183."},{"Id":"19582282164","Type":"PullRequestEvent","CreatedAt":"2022-01-04T23:22:05","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8928","RelatedDescription":"Merged pull request \"Fix assembly warnings\" (#8928) at NuGet/NuGetGallery","RelatedBody":"Last update of server common libs introduced assembly conflicts. Fixed it with latest libs."},{"Id":"19581964646","Type":"PullRequestEvent","CreatedAt":"2022-01-04T22:47:51","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8928","RelatedDescription":"Opened pull request \"Fix assembly warnings\" (#8928) at NuGet/NuGetGallery","RelatedBody":"Last update of server common libs introduced assembly conflicts. Fixed it with latest libs."},{"Id":"19581536628","Type":"PullRequestEvent","CreatedAt":"2022-01-04T22:05:56","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8927","RelatedDescription":"Merged pull request \"Revert \"Revert \"[TFM Display] Create model for badges and table from compatible frameworks. (#8881)\"\"\" (#8927) at NuGet/NuGetGallery","RelatedBody":"This reverts commit 51e149b10c81c4270dd90c8afdbe5f2500f0b5cb."},{"Id":"19580544941","Type":"PullRequestEvent","CreatedAt":"2022-01-04T20:40:39","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8927","RelatedDescription":"Opened pull request \"Revert \"Revert \"[TFM Display] Create model for badges and table from compatible frameworks. (#8881)\"\"\" (#8927) at NuGet/NuGetGallery","RelatedBody":"This reverts commit 51e149b10c81c4270dd90c8afdbe5f2500f0b5cb."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"19584607520","Type":"IssuesEvent","CreatedAt":"2022-01-05T04:09:40","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8315","RelatedDescription":"Closed issue \"Arrow keys in NuGet PM UI Sources editing doesn't change order of persistence\" (#8315) at NuGet/Home","RelatedBody":"<p>NuGet 套件管理員預設就有兩個可用套件來源：</p><p>1. nuget.org\n2. Microsoft Visual Studio Offline Packages</p><p>當我想新增 Azure Artifacts 的 NuGet feed 到這裡來，預設會新增到最後一個位置。</p><p>但是當我想移動套件來源的順序時，就算我調整到最上面 (第一順位) 並按下確定，下次再開啟套件來源的選項設定，會看到自定的套件來源還是出現在最後一個位置，不能依照我所設定的調整到第一順位。</p><p>這算是 Bug 嗎？</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/614163/在-nuget-套件管理員新增套件來源無法調整順序.html\nVSTS ticketId: 934339_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 6/19/2019, 07:59 PM (19 days ago): <p>Translated from Bing:</p><p>The NuGet Suite Administrator Preset has two available kit sources:</p><p>1. nuget.org 2. Microsoft Visual Studio Offline Packages</p><p>When I want to add Azure Artifacts' NuGet feed here, the default will be added to the last location.But when I want to move the order of the kit source, even if I adjust to the top (first order) and press OK, the next time I open the option settings of the kit source, I will see that the custom kit source still appears in the last one. Position, can not be adjusted to the first order according to my settings.</p><p>Is this a bug?</p>\n\nVisual Studio Feedback System on 6/19/2019, 08:23 PM (19 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"19583666256","Type":"IssuesEvent","CreatedAt":"2022-01-05T02:10:16","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11470","RelatedDescription":"Closed issue \"Stop using PublicAPIAnalyzer on projects that are MSBuild tasks\" (#11470) at NuGet/Home","RelatedBody":"`NuGet.Build.Tasks` and `NuGet.Build.Tasks.Pack` are projects that pack into packages that provide NuGet's MSBuild target functionality. `NuGet.Build.Tasks.Console` is a console app, used by `NuGet.Build.Tasks`, to provide restore using a different MSBuild API. None of these are libraries intended for customers to use as APIs in their own projects, and for at least one of these projects, when included with a `PackageReference`, the assemblies are not referenced by defaults, so customers must intentionally go out of their way to try to invoke it as an API.\r\n\r\nIn any case, we won't provide any API or ABI compatibility guarantees for the assemblies, only the MSBuild target experience. Hence we don't need the public API analyzer."},{"Id":"19581725195","Type":"IssuesEvent","CreatedAt":"2022-01-04T22:23:38","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11480","RelatedDescription":"Opened issue \"[Feature]: Attach nuget.config files when customers report a problem with Visual Studio\" (#11480) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nWhen customers use Visual Studio's report a problem, the feedback tool calls all VS extensions `IFeedbackDiagnosticFileProvider` implementations to tell ask it what files to attach to the feedback. The initial implementation of NuGetFeedbackDiagnosticFileProvider only attaches a single file.\r\n\r\nWe should attach either all nuget.config files used in the solution, or generate a single nuget.config to attach, which contains all the accumulated settings from all the files. This will help us investigate some feedback tickets without asking for additional information from the customer, leading to a better support experience.\r\n\r\n**Important**: Strip out passwords, API Keys, HTTPS client certificate information, and anything else security related. We're only interested in config settings, sources, package source mapping, and anything else that might impact NuGet experiences or performance. \n\n### Additional Context and Details\n\n_No response_"},{"Id":"19581187258","Type":"IssuesEvent","CreatedAt":"2022-01-04T21:34:27","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11351","RelatedDescription":"Closed issue \"Check existing extensions besides assemblies in packages on nuget.org\" (#11351) at NuGet/Home","RelatedBody":"This is a sub task of https://github.com/NuGet/Home/issues/5926\r\nAfter discussion with .NET SDK, NuGet will check the existing extensions besides assemblies in packages on nuget.org."},{"Id":"19580217561","Type":"IssuesEvent","CreatedAt":"2022-01-04T20:14:04","Actor":"rpaz-qontigo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11477","RelatedDescription":"Closed issue \"[Bug]: C:\\Windows\\Temp\\NuGet\\TempCache folder taking up unlimited space \" (#11477) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n3.1.408\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThis started happening a while ago, and I can't trace exactly what is causing this. I've noticed drive alerts for many servers runing TeamCity Agents and Octopus Tentacle process. I can only guess this all started when using Artifactory as our nuget feed.\r\n\r\nBut the question is, how I can pinpoint who is writing files on C:\\Windows\\Temp\\NuGet\\TempCache, since all config or commands points to other directories. Where is this set? \r\n\r\nCleaning all local caches produces this output:\r\nPS C:\\Windows\\system32> dotnet nuget locals all --clear\r\nClearing NuGet HTTP cache: C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\NuGet\\v3-cache\r\nClearing NuGet global packages folder: C:\\Windows\\system32\\config\\systemprofile\\.nuget\\packages\\\r\nClearing NuGet Temp cache: C:\\Windows\\TEMP\\NuGetScratch\r\nClearing NuGet plugins cache: C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\NuGet\\plugins-cache\n\n### Verbose Logs\n\n_No response_"},{"Id":"19580206158","Type":"IssuesEvent","CreatedAt":"2022-01-04T20:13:08","Actor":"rpaz-qontigo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11477","RelatedDescription":"Opened issue \"[Bug]: C:\\Windows\\Temp\\NuGet\\TempCache folder taking up unlimited space \" (#11477) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n3.1.408\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThis started happening a while ago, and I can't trace exactly what is causing this. I've noticed drive alerts for many servers runing TeamCity Agents and Octopus Tentacle process. I can only guess this all started when using Artifactory as our nuget feed.\r\n\r\nBut the question is, how I can pinpoint who is writing files on C:\\Windows\\Temp\\NuGet\\TempCache, since all config or commands points to other directories. Where is this set? \r\n\r\nCleaning all local caches produces this output:\r\nPS C:\\Windows\\system32> dotnet nuget locals all --clear\r\nClearing NuGet HTTP cache: C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\NuGet\\v3-cache\r\nClearing NuGet global packages folder: C:\\Windows\\system32\\config\\systemprofile\\.nuget\\packages\\\r\nClearing NuGet Temp cache: C:\\Windows\\TEMP\\NuGetScratch\r\nClearing NuGet plugins cache: C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\NuGet\\plugins-cache\n\n### Verbose Logs\n\n_No response_"},{"Id":"19578448021","Type":"IssuesEvent","CreatedAt":"2022-01-04T17:56:54","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11350","RelatedDescription":"Closed issue \"Add a spec of \"consuming pdbs from packages in PackageReference\"\" (#11350) at NuGet/Home","RelatedBody":"Write a spec of \"consuming pdbs from packages in PackageReference\", and confirm with .NET SDK team."},{"Id":"19565111870","Type":"IssuesEvent","CreatedAt":"2022-01-03T22:29:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8917","RelatedDescription":"Closed issue \"Document package bootstrapping scenarios\" (#8917) at NuGet/Home","RelatedBody":"Not everyone uses NuGet for libraries only. \r\nThe nupkg format is a simple zip with some metadata and it's used for many scenarios. \r\n\r\nWe have many features that involve just download packages. \r\nNuGet.exe install package, direct download, PackageDownload etc. \r\n\r\nAll these could yield a nice doc/write-up on all the ways you can do things with NuGet."},{"Id":"19565001715","Type":"IssuesEvent","CreatedAt":"2022-01-03T22:17:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11385","RelatedDescription":"Closed issue \"[Bug]: PackageSourceMapping inconsistencies should be reported\" (#11385) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nWhen there is a no source matching the source name of a `<packageSourceMapping>` (typically a typo, or maybe after a git merge), a restore can fail with a very generic error\r\n```\r\nerror NU1100: Unable to resolve '<package>' for '<framework>'\r\n```\r\n\n\n### Desired Behavior\n\nThere should be a more helpful message.\r\n\r\nMaybe a warning at the beginning if there is no source corresponding to a `<packageSourceMapping>` entry.\r\n\n\n### Additional Context\n\n_No response_"},{"Id":"19564188188","Type":"IssuesEvent","CreatedAt":"2022-01-03T20:53:45","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11476","RelatedDescription":"Opened issue \"[Bug]: IVsPackageInstaller sometimes deadlocks when called on background thread\" (#11476) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nall?\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nVisual Studio extensions can reference `NuGet.VisualStudio` to use NuGet's APIs in Visual Studio, including `IVsPackageInstaller(2)` which can install packages in projects programatically.  In NuGet 6.0.0 (VS 17.0), [we documented that these APIs can be called from a background thread](https://github.com/NuGet/NuGet.Client/pull/4209). However, under the following scenario there can be a deadlock:\r\n\r\n1. The extension uses JTF.Run to run some async code that switches to a background thread and blocks the UI thread until this background thread work completes\r\n2. The background thread work calls into `IVsPackageInstaller.InstallPackage`\r\n3. NuGet's `VsPackageInstaller` uses `PumpingJTF`, but on the background thread, not the UI thread\r\n4. When the project uses packages.config and the package contains `tools/install.ps1`, NuGet runs the powershell script, also on a background thread\r\n5. Since NuGet passes `DTE.Project` to the script, the .NET runtime wants to do COM RPC on the UI thread, but the .NET runtime doesn't know anything about JTF and therefore deadlocks the code blocking in step 1.\r\n\r\nThe deadlock doesn't happen when none of the packages being installed contain a powershell files, or if the project uses `PackageReference` (since any powershell scripts aren't run).\r\n\r\n**mitigation**: If the VS extension calling NuGet either does not block the UI thread (don't do step 1 above), or calls NuGet on the UI thread, then this will not deadlock.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1410695861508526080","CreatedAt":"2021-07-01T20:24:37+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠ \nHave you recently experienced issues interacting with https://t.co/KVB7werYQh's Search API?… https://t.co/3eM1gicePx","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2022-01-05T05:30:26.5713753Z","RunDurationInMilliseconds":1212}