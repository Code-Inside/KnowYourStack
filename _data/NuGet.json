{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34293764001","Type":"IssuesEvent","CreatedAt":"2023-12-19T22:15:53","Actor":"lifengl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13098","RelatedDescription":"Opened issue \"NuGet restore always touched the project.assets.json file even no content is changed when it needs log error messages.\" (#13098) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.9\n\n### Worked before?\n\nnot sure\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nTry to create a project with NuGet package reference to 'Newtonsoft.Json' 12.0.3.\r\n\r\nClose/reopen the solution, the project.assets.json file is touched every time, with extra evaluation and design time builds.  Touching the file without any content change would lead the project system to constantly discard project cache state, and repeat the NuGet restore logic.\r\n\r\nThe restore logic should skip updating the file in this case (as long as the original file matching the end result.)\n\n### Verbose Logs\n\n```shell\nin the assets file with this section:\r\n\r\n  \"logs\": [\r\n    {\r\n      \"code\": \"NU1903\",\r\n      \"level\": \"Error\",\r\n      \"message\": \"Warning As Error: Package 'Newtonsoft.Json' 12.0.3 has a known high severity vulnerability, https://github.com/advisories/GHSA-5crp-9r3c-p9vr\",\r\n      \"libraryId\": \"Newtonsoft.Json\",\r\n      \"targetGraphs\": [\r\n        \".NETCoreApp,Version=v3.1\"\r\n      ]\r\n    }\r\n\r\nit would keep being updated, even the content is not changed.\n```\n"},{"Id":"34212526665","Type":"IssuesEvent","CreatedAt":"2023-12-15T22:24:33","Actor":"ViktorHofer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13097","RelatedDescription":"Opened issue \"NuGet Static graph restore invoked on a slnf file restores excluded projects\" (#13097) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.100\n\n### Worked before?\n\nno\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nRepro:\r\n`dotnet restore ttt.slnf` -> only the projects listed in the slnf file are restored\r\n`dotnet restore ttt.slnf /p:RestoreUseStaticGraphEvaluation=true` -> all projects listed in the sln file are restored\r\n\r\n[restorediff.zip](https://github.com/NuGet/Home/files/13690134/restorediff.zip)\r\n\r\nThis impacts changes like https://github.com/dotnet/msbuild/pull/9555 as when building from source, we must not restore more projects than necessary to not bring in prebuilts.\r\n\r\ncc @jeffkl \n\n### Verbose Logs\n\n_No response_"},{"Id":"34210943417","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:45:22","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13096","RelatedDescription":"Opened issue \"All user to add comments on a installed nuget package\" (#13096) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/All-user-to-add-comments-on-a-installed-/10363496)._\n\n---\nIt would be helpful to us if you were to have the ability to add a user comment on installed nuget packages.  We have many instances that we cannot update a package because of some bug or other issue.  If we had the ability to comment and also put an icon on the package that was installed, we would not run into issues of installing package updates that may give us an issue.\n\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/15/2023, 11:05 PM: \n\n(private comment, text removed)"},{"Id":"34210478120","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:19:24","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13095","RelatedDescription":"Opened issue \"Incorrect tags description in Visual Studio 2022 \" (#13095) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Incorrect-tags-description-in-Visual-Stu/1640128)._\n\n---\n[regression] [worked-in:2019]\nI'm getting an 'Oops, we have lost the connection to Visual Studio' error no matter what when trying to report a problem for Visual Studio, so I'm reporting this issue here. Sorry about that.\n\nIn Visual Studio 2022, under Project, Properties, Package, General, and Tags, the Tags description is incorrect for NuGet. It should read 'A space-delimited list of tags and keywords', as said [here](https://docs.microsoft.com/en-gb/nuget/reference/nuspec#tags). This caused me to do incorrect tags for multiple of my projects because I was under the impression that things had been changed.\n\n---\n### Original Comments\n\n#### Feedback Bot on 1/18/2022, 11:15 PM: \n\n(private comment, text removed)"},{"Id":"34210343768","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:12:18","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13094","RelatedDescription":"Opened issue \"Symbol loading from external server\" (#13094) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Symbol-loading-from-external-server/1553736)._\n\n---\nHello,\n\nI would like to ask for feature which allows moving the process of loading symbols from external service like Azure DevOps, Microsoft Symbols and Nuget.org Symbols to the background. It prevents developer if he is interested into debugging fast only some part of code that does not use external sources at first.\n\nThe origin of the problem is when you use project with many dependencies that does not have published symbols.\nAs there is a cache for already found symbols that speed up symbol loading and downloading process, there is no process while loading symbols that speeds up determining that some symbols will be not available at all. Thought, each time starting the debug session, the symbol loading will try to find not published symbols on remote servers, if you use more than 1 remote location that will take extra time too. You can of course add manually the name of libraries that does not publish symbols to options in Visual Studio, but it is very time consuming process when you need to as 25-50 libraries like so.\nMore over each and every developer will have to do this, as those settings are local to the IDE installation.\n\nTherefore one of the proposals I suggest is to put loading into background, so developer can already work with locally available symbols which should be loaded first. And the experience will be better each time the VS finds more symbols on remote server.\n\nSecond option that I would suggest is a some button or dialog that summaries not found symbols in external servers, and be able to add them to exclusions so VS does not try to find them again. The problem with solution as so, is that VS will not try to get symbols once those will become available and will require manual action.\n\nBest regards,\nMaciej Klemarczyk\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/14/2021, 03:00 AM: \n\n(private comment, text removed)"},{"Id":"34209328324","Type":"IssuesEvent","CreatedAt":"2023-12-15T19:17:25","Actor":"johnterickson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13093","RelatedDescription":"Opened issue \"Adding a `GlobalPackageReference` silently breaks `RestorePackagesConfig` throughout the repo\" (#13093) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\n17.9.0-preview-23578-04+5fcddc790\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI made some changes to my repo and unrelated projects in the repo failed to `Build` because of missing dependencies - though still `Restore`d fine.  This made no sense.\n\nAfter a bunch of digging, I discovered that when I added a `GlobalPackageReference` to a `Directory.Packages.props`, NuGet then would _silently_ ignore `<RestorePackagesConfig>true</RestorePackagesConfig>`. \n\nI could have saved a lot of time had there been a warning that said something like \"You are using both GlobalPackageReference and RestorePackagesConfig, but they are incompatible, so ignoring RestorePackagesConfig\".\n\nAgain, I'm not asking to make the combination work - just to warn about this footgun. Thanks!\n\nAndy mentioned that @jeffkl might be interested in this issue.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-20T03:30:20.3803786Z","RunDurationInMilliseconds":1122}