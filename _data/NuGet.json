{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"39252760859","Type":"PullRequestEvent","CreatedAt":"2024-06-13T04:21:49","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10021","RelatedDescription":"Opened pull request \"Remove elmah table usage from gallery\" (#10021) at NuGet/NuGetGallery","RelatedBody":"Partially addresses: https://github.com/NuGet/Engineering/issues/5480\r\n\r\nWe'll remove this table's usage as a part of the SDK migration effort."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"39285676515","Type":"IssuesEvent","CreatedAt":"2024-06-13T23:30:18","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13547","RelatedDescription":"Opened issue \"'dotnet nuget why' crashes when using --framework option\" (#13547) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100-preview.6, 8.0.4xx\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n`> dotnet nuget why C:\\path package --framework net6.0`\r\n\r\nThe dotnet SDK fails to parse any provided frameworks options and crashes. There is a problem with the parsing logic on the dotnet SDK side.\n\n### Verbose Logs\n\n_No response_"},{"Id":"39284812934","Type":"IssuesEvent","CreatedAt":"2024-06-13T22:31:47","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13546","RelatedDescription":"Opened issue \"Use `SDKAnalysisLevel` in \"https everywhere: promote from warning to error\"\" (#13546) at NuGet/Home","RelatedBody":"Use https://github.com/NuGet/NuGet.Client/pull/5833, and avoid showing error based on the SDKAnalysisLevel value.\r\nif it is greater than or equal to 9.0.100 > show error message."},{"Id":"39271266642","Type":"IssuesEvent","CreatedAt":"2024-06-13T14:22:53","Actor":"akoeplinger","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13545","RelatedDescription":"Opened issue \"RestoreTask randomly fails after upgrading to latest version\" (#13545) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n6.11.0-rc.90\n\n### Worked before?\n\nNuGet in dotnet sdk 9.0-preview4\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSince we updated to a dotnet 9.0-preview6 SDK we started seeing RestoreTask failing randomly in the VMR build: https://github.com/dotnet/sdk/issues/41477#issuecomment-2154989462\r\n\r\nAfter the fix in https://github.com/NuGet/NuGet.Client/pull/5845 we bumped again (i.e. we're now using a very recent nuget.client) we now see these messages\r\n\r\n> D:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.6.24311.23\\NuGet.targets(170,5): The feed 'dotnet-public [https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json]' lists package 'System.Text.Json.7.0.3' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again. [D:\\a\\_work\\1\\s\\src\\nuget-client\\build\\restorehelper.targets]\r\n\r\nor\r\n\r\n> D:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.6.24311.23\\NuGet.targets(170,5): error : The feed 'dotnet-public [https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json]' lists package 'Castle.Core.5.1.1' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again. [D:\\a\\_work\\1\\s\\src\\efcore\\EFCore.sln]\r\n\r\nI've attached some binlogs: [binlogs.zip](https://github.com/user-attachments/files/15821942/binlogs.zip)\r\n\r\nIt's happening for random packages and given we only started seeing this when bumping the dotnet SDK (and thus nuget) I think it's more likely a nuget back than an issue with the AzDO feed.\r\n\r\nIs there some way we can enable more logging?\r\n\r\n/cc @nkolev92 @kartheekp-ms \r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"39257274439","Type":"IssuesEvent","CreatedAt":"2024-06-13T07:40:27","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13543","RelatedDescription":"Opened issue \"[Bug Bash] The searching mode “packageid:[PackageName]” should also be supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab\" (#13543) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.11.0.96\n\n### Worked before?\n\nIt’s not a regression since it reproes on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps: \r\n1.\tCreate a solution with two C# Console App (.NET 8.0) projects (called Project1 and Project2), right-click the solution in the Solution Explorer window and select the menu item “Manage NuGet Packages for Solution…”..\r\n2.\tGo to ‘Browse’ tab, install the package **‘jQuery 3.5.0’** into **Project1** and install the package **‘jQuery 3.6.0’** into **Project2**.\r\n3.\tIn the right panel, select the ‘3.5.0’ in the drop-down list of ‘Version’ box and click the alternate package link ‘jQuery>=3.5.0.1’.\r\n4.\tDon’t delete the searching string “packageid:[PackageName]” in the filter and click the ‘Installed’/’Updates’/’Consolidate’ tab.\r\n\r\n#### Expected Results:\r\nThe searching mode “packageid:[PackageName]” should also be supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab. There should be the package ‘jQuery’ listed in ‘Installed’/’Updates’/’Consolidate’ tab in this instance.\r\n\r\n#### Actual Result:\r\nThe searching mode “packageid:[PackageName]” is not supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab as below screenshot. It doesn’t make sense because the searching mode “packageid:[PackageName]” is supported in ‘Browse’ tab.\r\n![image](https://github.com/NuGet/Home/assets/20632625/0c41df51-5659-4755-b41b-dc223ba2a2ec)\r\n\r\n#### Notes:\r\nRepro Rate: 100%\n\n### Verbose Logs\n\n_No response_"},{"Id":"39239596468","Type":"IssuesEvent","CreatedAt":"2024-06-12T17:11:14","Actor":"drobert-bfm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13541","RelatedDescription":"Opened issue \"\"An item with the same key has already been added.\" thrown with version 6.10 of nuget\" (#13541) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.10.0.107\n\n### Worked before?\n\n6.5.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nnuget restore <file>.sln -verbosity detailed\r\n\r\nGet error:\r\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nWorked fine with version 6.5. Same underlying version of MSBuild.\r\n\n\n### Verbose Logs\n\n```shell\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"39217710663","Type":"IssuesEvent","CreatedAt":"2024-06-12T06:05:44","Actor":"bstordrup","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13540","RelatedDescription":"Opened issue \"Missing resilience?\" (#13540) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nnuget 6.11.0.64\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSometimes, I get this error when running `nuget push`:\r\n\r\n```\r\nError getting pkg from body: unable to open nuspec file from nupkg archive: zip: not a valid zip file\r\n```\r\n\r\nThen I can issue the exact same `nuget push` command again, and it succeeds without the error, and the package is pushed.\r\n\r\nIt most often happen if the commands get executed too soon after each other - for example in a PowerShell script that pushes a series of nupkg's.\r\n\r\nI suspect that there is some kind of resilience issue involved.\n\n### Verbose Logs\n\n```shell\nOutput from two subsequent runs:\r\n\r\n\r\nPS C:\\LocalStorage\\Visma.Services.UserDirectory.Diagnostics> nuget push Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg -source https://nuget.pkg.github.com/MyGitOrganization/index.json -ApiKey ********************************\r\nPushing Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg to 'https://nuget.pkg.github.com/MyGitOrganization'...\r\n  PUT https://nuget.pkg.github.com/MyGitOrganization/\r\nWARNING: Error getting pkg from body: unable to open nuspec file from nupkg archive: zip: not a valid zip file\r\n  BadRequest https://nuget.pkg.github.com/MyGitOrganization/ 384ms\r\nResponse status code does not indicate success: 400 (Bad Request).\r\nPS C:\\LocalStorage\\Visma.Services.UserDirectory.Diagnostics> nuget push Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg -source https://nuget.pkg.github.com/MyGitOrganization/index.json -ApiKey ********************************\r\nPushing Visma.Services.UserDirectory.Diagnostics.18.0.0.4.nupkg to 'https://nuget.pkg.github.com/MyGitOrganization'...\r\n  PUT https://nuget.pkg.github.com/MyGitOrganization/\r\n  OK https://nuget.pkg.github.com/MyGitOrganization/ 726ms\r\nYour package was pushed.\r\n```\n```\n"},{"Id":"39214145978","Type":"IssuesEvent","CreatedAt":"2024-06-12T02:29:04","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13539","RelatedDescription":"Opened issue \"Update nuget.exe docs for new eula command\" (#13539) at NuGet/Home","RelatedBody":""},{"Id":"39209608868","Type":"IssuesEvent","CreatedAt":"2024-06-11T21:49:43","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13251","RelatedDescription":"Closed issue \"`dotnet` commands should not output usage information on all errors\" (#13251) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\n```console\r\n> dotnet nuget remove source ashjdfsbf\r\nerror: Unable to find any package source(s) matching name: ashjdfsbf.\r\n\r\n\r\nUsage: dotnet nuget remove source [arguments] [options]\r\n\r\nArguments:\r\n  name  Name of the source.\r\n\r\nOptions:\r\n  --configfile  The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.\r\n  -h|--help     Show help information\r\n```\r\n\r\nHowever, a scenario that is more likely to confuse customers is:\r\n\r\n```console\r\n> dotnet add package snjfbdujfbdf\r\n  Determining projects to restore...\r\n  Writing C:\\Users\\zivkan\\AppData\\Local\\Temp\\tmp255fey.tmp\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\ninfo : Adding PackageReference for package 'snjfbdujfbdf' into project 'D:\\src\\test\\wtf\\wtf.csproj'.\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json 238ms\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/snjfbdujfbdf/index.json 162ms\r\nerror: There are no versions available for the package 'snjfbdujfbdf'.\r\n\r\n\r\nUsage: NuGet.CommandLine.XPlat.dll package add [options]\r\n\r\nOptions:\r\n  -h|--help               Show help information\r\n  --force-english-output  Forces the application to run using an invariant, English-based culture.\r\n  --package               Id of the package to be added.\r\n  --version               Version of the package to be added.\r\n  -d|--dg-file            Path to the dependency graph file to be used to restore preview and compatibility check.\r\n  -p|--project            Path to the project file.\r\n  -f|--framework          Frameworks for which the package reference should be added.\r\n  -n|--no-restore         Do not perform restore preview and compatibility check. The added package reference will be unconditional.\r\n  -s|--source             Specifies NuGet package sources to use during the restore.\r\n  --package-directory     Directory to restore packages in.\r\n  --interactive           Allow the command to block and require manual action for operations like authentication.\r\n  --prerelease            Allows prerelease packages to be installed.\r\n```\r\n\n\n### Desired Behavior\n\nOnly show usage/help information when command line parsing fails, not on all failures.\r\n\r\nFor example, run `dotnet add package Some.Package.That.Does.Not.Exist`. If done in a directory that does not contain any `*.*proj` file it outputs:\r\n\r\n```console\r\nCould not find any project in `D:\\src\\test\\`.\r\n```\r\n\r\nThat's it, no usage information. Whereas, if I add `--arg-that-does-not-exist`, then I get an error message saying the argument is not recognised, followed by the usage/help information.\r\n\r\nThis is a pattern that most CLI apps use.\n\n### Additional Context\n\nI believe that customers are getting confused by the extra verbosity in the error message, especially in the `dotnet add package` scenario where neither the first line nor the last line of the message output to customers is an error message. We have gotten github issues and VS feedback where the error message states what the problem is, but customers don't seem to notice and report the issue to us rather than fixing the issue themselves."},{"Id":"39208361643","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:50:24","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13467","RelatedDescription":"Closed issue \"Document known issue in 6.10\" (#13467) at NuGet/Home","RelatedBody":"See details in https://github.com/NuGet/Home/issues/13466."},{"Id":"39208097013","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:39:12","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13293","RelatedDescription":"Closed issue \"NuGetAudit should check transitive packages by default when the .NET 9 SDK is installed\" (#13293) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently `NuGetAuditMode` defaults to `direct`, which means that NuGetAudit will only create warnings when direct package references have a known vulnerability.\n\n### Desired Behavior\n\n`NuGetAuditMode` should default to `all`, so both direct and transitive package references should be scanned for known vulnerabilities.\r\n\r\nNote this will create additional warnings, which were not present before. When a project treats warnings as errors, it will cause breaks. We know this is impactful to everyone, but since this is a security feature we believe it is an overall good for the ecosystem.\r\n\r\nOur [docs on NugetAudit](https://learn.microsoft.com/en-us/nuget/concepts/auditing-packages) explain multiple ways to avoid NuGetAudit breaking builds, such as `WarningsNotAsErrors` or disabling NuGetAudit.\n\n### Additional Context\n\nDue to how NuGet flows from the NuGet.Client repo into both Visual Studio (incuding MSBuild) and the .NET SDK:\r\n\r\n* This will affect SDK style projects in Visual Studio when the .NET 9 SDK is installed, even if your project does not target `net9.0`\r\n* Non-SDK style projects will not be affected (until the .NET 9 SDK goes GA)\r\n"},{"Id":"39207117527","Type":"IssuesEvent","CreatedAt":"2024-06-11T20:01:08","Actor":"bstordrup","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13538","RelatedDescription":"Opened issue \"Exception when extracting files while executing ProjectRestoreCommand\" (#13538) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0.423\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI get the error if I try to add a nuget using the command\r\n\r\n```\r\ndotnet add ConsoleTest2.csproj package MyImportantPackage --version 1.0.0 --package-directory packages\r\n```\r\n\r\nLooking in the `packages` folder, the unpacked package looks like this:\r\n\r\n```\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----          11-06-2024    16:34                lib\r\n-a---          11-06-2024    16:34         149872 25yi3iue.eh1\r\n-a---          07-06-2024    11:04            582 myimportantpackage.nuspec\r\n```\r\n\r\nBut if I use the command\r\n\r\n```\r\nnuget install MyImportantPackage -OutputDirectory packages -DirectDownload -Version 1.0.0\r\n```\r\n\r\nthe package is correct installed and no error reported, and the contents of the installed package in `packages` folder is correct.\r\n\r\nIn both attempts, the nuget package resides in a GitHub package repository.\n\n### Verbose Logs\n\n```shell\nStack trace: The error is from executing the \r\n\r\n\r\ndotnet restore MyConsumingSolution.sln --verbosity diagnostic\r\n```\r\n\r\ncommand in a GitHub action flow.\r\n\r\n\r\n\r\n```\r\nC:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\6.0.423\\NuGet.targets(132,5): error : The archive entry was compressed using an unsupported compression method. [D:\\a\\Visma.Diagnostics\\Visma.Diagnostics\\Visma.Diagnostics.Tracing.sln]\r\n                     System.IO.InvalidDataException: The archive entry was compressed using an unsupported compression method.\r\n                        at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)\r\n                        at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32& bytesRead)\r\n                        at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)\r\n                        at System.IO.Compression.DeflateStream.ReadCore(Span`1 buffer)\r\n                        at System.IO.Compression.DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\n                        at System.IO.Stream.CopyTo(Stream destination, Int32 bufferSize)\r\n                        at NuGet.Packaging.StreamExtensions.Testable.MmapCopy(Stream inputStream, String fileFullPath, Int64 size)\r\n                        at NuGet.Packaging.StreamExtensions.Testable.CopyToFile(Stream inputStream, String fileFullPath)\r\n                        at NuGet.Packaging.PackageFileExtractor.ExtractPackageFile(String source, String target, Stream stream)\r\n                        at NuGet.Packaging.PackageArchiveReader.CopyFiles(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken token)\r\n                        at NuGet.Packaging.PackageReaderBase.CopyFilesAsync(String destination, IEnumerable`1 packageFiles, ExtractPackageFileDelegate extractFile, ILogger logger, CancellationToken cancellationToken)\r\n                        at NuGet.Packaging.PackageExtractor.<>c__DisplayClass5_0.<<InstallFromSourceAsync>b__0>d.MoveNext()\r\n                     --- End of stack trace from previous location ---\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n                        at NuGet.Packaging.PackageExtractor.InstallFromSourceAsync(PackageIdentity packageIdentity, IPackageDownloader packageDownloader, VersionFolderPathResolver versionFolderPathResolver, PackageExtractionContext packageExtractionContext, CancellationToken token, Guid parentId)\r\n                        at NuGet.Commands.ProjectRestoreCommand.InstallPackageAsync(RemoteMatch installItem, NuGetv3LocalRepository userPackageFolder, PackageExtractionContext packageExtractionContext, CancellationToken token)\r\n                        at NuGet.Commands.ProjectRestoreCommand.<>c__DisplayClass15_1.<<InstallPackagesAsync>b__4>d.MoveNext()\r\n                     --- End of stack trace from previous location ---\r\n                        at NuGet.Commands.ProjectRestoreCommand.InstallPackagesAsync(HashSet`1 uniquePackages, IEnumerable`1 graphs, IList`1 downloadDependencyInformations, NuGetv3LocalRepository userPackageFolder, CancellationToken token)\r\n                        at NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity, String telemetryPrefix)\r\n                        at NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity)\r\n                        at NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, IRestoreProgressReporter progressReporter, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreArgs, CancellationToken token)\r\n                        at NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\n                        at NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\n                        at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log) (TaskId:212)\r\n                   Done executing task \"RestoreTask\" -- FAILED. (TaskId:212)\r\n```\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-06-14T03:30:18.1337725Z","RunDurationInMilliseconds":952}