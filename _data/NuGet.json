{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44841393717","Type":"PullRequestEvent","CreatedAt":"2024-12-16T19:59:51","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10309","RelatedDescription":"Merged pull request \"Update EntityFramework package for vulnerability alert \" (#10309) at NuGet/NuGetGallery","RelatedBody":"EntityFramework 6.4.4 is deprecated with vulnerable, update to latest stable. \r\n\r\nNote: There is change:  New SQL Server / Azure SQL Database provider (contributed by the community) - [Microsoft.EntityFramework.SqlServer](https://www.nuget.org/packages/Microsoft.EntityFramework.SqlServer/). This new provider uses the modern SQL Server client [Microsoft.Data.SqlClient](https://www.nuget.org/packages/Microsoft.Data.SqlClient). For more information about configuration of this provider, see [Microsoft.EntityFramework.SqlServer Guide](https://learn.microsoft.com/en-us/ef/ef6/what-is-new/microsoft-ef6-sqlserver).\r\n\r\nIt provides new provider configuration, no changes on default one. We should be good\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5732"},{"Id":"44809599112","Type":"IssuesEvent","CreatedAt":"2024-12-16T02:13:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Github repository dependenc list should not include package's own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Describe the bug\r\n\r\nI found a few times that a nuget package lists its own repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\r\n\r\n### Repro Steps\r\n\r\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\r\n\r\n### Expected Behavior\r\n\r\nIt should not list its own Github repo as a dependent repo.\r\n\r\n### Screenshots\r\n\r\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"44807074974","Type":"IssuesEvent","CreatedAt":"2024-12-15T22:54:46","Actor":"tonyqus","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Github repository dependency list should not include its own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nI found a few times that a nuget package lists it's self repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\n\n### Repro Steps\n\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\n\n### Expected Behavior\n\nIt should not list its own Github repo as a dependent repo.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"45002841213","Type":"IssuesEvent","CreatedAt":"2024-12-21T12:43:25","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13950","RelatedDescription":"Closed issue \"Restore trying the wrong source, and failing if that is unavailable\" (#13950) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100\n\n### Worked before?\n\nVersion 8, not sure exactly which\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI have a [GitHub repo](https://github.com/MrYossu/Pixata.Utilities) that generates [various Nuget packages](https://www.nuget.org/packages?q=pixata), one of which uses Telerik components for Blazor.\r\n\r\nThe `nuget.config` file for the repo can be [seen here](https://github.com/MrYossu/Pixata.Utilities/blob/master/nuget.config), and the YAML file for the master branch can be [seen here](https://github.com/MrYossu/Pixata.Utilities/blob/master/.github/workflows/master.yml).\r\n\r\nI have built this repo (and consequently published the packages) many times, and have never had problems (other than my own of course!). However, I pushed some changes today, and the build failed.\r\n\r\nFor every package referenced in the repo, I get lines like the following...\r\n\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor\\Pixata.Blazor.csproj : error NU1301: Failed to retrieve information about 'Microsoft.AspNetCore.Components' from remote source 'https://nuget.telerik.com/nuget/FindPackagesById()?id='Microsoft.AspNetCore.Components'&semVerLevel=2.0.0'.\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor\\Pixata.Blazor.csproj : error NU1301:   Response status code does not indicate success: 503 (Service Unavailable).\r\n\r\nNotice that the package in question is not a Telerik one, so I have no idea why it's looking on the Telerik feed. Also, the Telerik feed is the second one in the `nuget.config` file, so I would have expected it to check the nuget feed first. Furthermore, if I open the package manager in Visual Studio and look for packages on the Telerik feed, it finds them fine, which implies that the feed is working fine.\r\n\r\nI tried commenting out the line in `nuget.config` that references the Telerik feed, but that failed...\r\n\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor.TelerikComponents\\Pixata.Blazor.TelerikComponents.csproj : error NU1101: Unable to find package Telerik.UI.for.Blazor. No packages exist with this id in source(s): C:\\Program Files\\dotnet\\library-packs, NuGet\r\n>  Failed to restore D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor.TelerikComponents\\Pixata.Blazor.TelerikComponents.csproj (in 9.21 sec).\r\n\r\nI tried adding `` --ignore-failed-sources` to each `dotnet restore` line in the `.yaml` file, but that didn't help. The build failed with the same results. Didn't try the nuget feed after the Telerik one failed.\r\n\r\nAnyone able to advise? I need to publish a new version of a package, but can't.\r\n\r\nPlease let me know if there is any more info I can add.\r\n\r\nThanks\n\n### Verbose Logs\n\n_No response_"},{"Id":"44995666921","Type":"IssuesEvent","CreatedAt":"2024-12-20T22:45:14","Actor":"JoshuaBStevens","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14016","RelatedDescription":"Opened issue \"Setting \"Allow format selection on first package install\" meaning is unclear\" (#14016) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.13.0 Preview 3.0 [35619.97.main]\n\n### Worked before?\n\nN/A\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI couldn't understand what this setting on the NuGet > General page meant until Donnie explained it to me.  I read \"format selection\" as being about formatting text.  I'd suggest using the word \"prompt\", as in \"Prompt for format selection on first package install\".\n\n### Verbose Logs\n\n_No response_"},{"Id":"44995136578","Type":"IssuesEvent","CreatedAt":"2024-12-20T22:12:23","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14015","RelatedDescription":"Opened issue \"packages.lock.json reappears from deleted project after switching git branches\" (#14015) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/packageslockjson-reappears-from-delete/10812090)._\n\n---\n[severity:It bothers me. A fix would be nice]\nAll steps are done in VS2022 17.12.3, with the available built-in tools for project edition and git operations, in 1 active session.\n\n1. Create a new project in an existing solution \n2. Set &lt;RestorePackagesWithLockFile&gt;true&lt;/RestorePackagesWithLockFile&gt; in the csproj\n3. Add some nuget dependencies to the project\n4. Commit / Push the new project to a new branch in the git repository\n5. Switch back to a git branch where the created project does not exist.\n\nSwitching from a branch where a project exists to a branch where the project doesn't exist reproduces the issue.\n\nActual result: After a build the packages.lock.json will appear despite the projet not being here. Deleting the project folder doesn't seem to fix this behavior.\n\nExpected result: The packages.lock.json shouldn't reappear when the project disappeared in the git and solution contexts.\n\nWorkaround: Restarting Visual Studio fixes the issue.\n\n---\n### Original Comments\n\n#### Feedback Bot on 12/12/2024, 09:39 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Nigusu Yenework [MSFT] on 12/13/2024, 00:37 PM: \n\n<p>Thank you for reaching out. Shouldn’t the lock file be created within the folder of the new project you added? When you switch back to the other branch, wouldn’t the entire project folder (including the lock file) be expected to disappear? Could you clarify if the folder persists even after switching branches?</p>\n<p><strong>Why do we ask for more info?</strong><br>\nWe try to reproduce all issues reported with the information provided in the description and comments. When we can’t reproduce the issue, we ask you for more information so we can resolve the issue as quickly and efficiently as possible.<br>\nIn our <a target='_blank' href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\">guidelines</a>, you can get tips on how to provide clear and simple reproducible steps.</p>\n\n#### Matthieu Penant on 12/16/2024, 05:42 AM: \n\n<p>I created a repro project on github that exhibits the issue: <a target='_blank' href=\"https://github.com/Thieum/TestPackageLock\">https://github.com/Thieum/TestPackageLock</a></p>\n<p>The project used to reproduce the issue is a MSTest project. Switching from test-branch to master reproduces the issue on my machine.</p>\n<p>The commits also show the changes made for empty projects and solution.</p>\n<p>In this situation, switching from a branch where the project exists, to the branch where it does not, does not delete the project folder entirely. A folder persists with a bin / obj folder.</p>\n<p>The bin folder is empty, the obj folder is not.</p>\n<p>Rebuilding logs a restore on the disapeared project and creates the lock file :</p>\n<p>Rebuild started at 15:29…<br>\nRestored C:\\Users\\x\\Source\\Repos\\TestPackageLock\\TestPackageLock\\TestPackageLock.csproj (in 7 ms).<br>\n1&gt;------ Rebuild All started: Project: TestPackageLock, Configuration: Debug Any CPU ------<br>\nRestored C:\\Users\\x\\Source\\Repos\\TestPackageLock\\testPackageLock.Tests\\testPackageLock.Tests.csproj (in 70 ms).<br>\n1&gt;TestPackageLock -&gt; C:\\Users\\thieu\\Source\\Repos\\TestPackageLock\\TestPackageLock\\bin\\Debug\\net8.0\\TestPackageLock.dll</p>\n\n#### Nikolche Kolev [MSFT] on 12/20/2024, 02:12 PM: \n\n<p><a target='_blank' href=\"https:///user/16451\">Matthieu Penant</a></p>\n<p>thanks for the details.</p>\n<p>I can repro this.<br>\nLikely related to how unloaded projects are supposed to work.</p>\n<p><a target='_blank' href=\"https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1105#visual-studio\">https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1105#visual-studio</a></p>\n"},{"Id":"44992611522","Type":"IssuesEvent","CreatedAt":"2024-12-20T19:58:23","Actor":"IEvangelist","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14014","RelatedDescription":"Opened issue \"The `nuget push` command failure is misleading\" (#14014) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n**Context:**\r\n\r\nA few years ago, I wrote some packages that were prefixed with `GitHub.*` and GitHub has since reserved that prefix. The existing packages that I've maintained are able to be updated, but I'm not able to push new packages with the prefix anymore. I'm good with all that, but I was unaware that the prefix was reserved as the error/failure messages are misleading.\r\n\r\n**Reproduce:**\r\n\r\nPush a package to the official feeds where the package ID includes a prefix that is reserved.\n\n### Verbose Logs\n\n_No response_"},{"Id":"44976189301","Type":"IssuesEvent","CreatedAt":"2024-12-20T09:52:59","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14013","RelatedDescription":"Opened issue \"[Localization] The vulnerability filter “Show only vulnerable” and prerelease filter “Include prerelease” are incompletely displayed in PM UI \" (#14013) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.73\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes: \r\n\r\n1. The repro rate is 100%.  \r\n\r\n2. It’s also repro after resizing the PM UI window, maybe we can add tooltips for these filters because some languages have longer texts. \r\n3. It also reproes on loc languages: FRA/ITA/TRK/ESN/PLK/RUS/PTB \r\n4. Only the prerelease filter “Include prerelease” is incompletely displayed in CSY/DEU as below: \r\n![image](https://github.com/user-attachments/assets/3b23a2a5-7df2-4ed2-a676-7af029ae7137)\r\n#### Repro Steps:  \r\n\r\n1. Create a C# Console App (.NET Core) -- .NET 9.0 projects in VS. \r\n\r\n2. Right-click the solution in the Solution Explorer and select the “Mange NuGet Packages for Solution”.  \r\n\r\n3. Go to “Updated” tab and observe the vulnerability filter “Show only vulnerable” and prerelease filter “Include prerelease. \r\n\r\n#### Expected:  \r\n\r\nThese filters are integrally displayed like the English languages as below screenshot. \r\n![image](https://github.com/user-attachments/assets/4ded2c5e-a8d9-4c74-be62-0c42eaf25522)\r\n#### Actual:  \r\n\r\nThese filters are incompletely displayed as below: \r\n![image](https://github.com/user-attachments/assets/f088aaa5-b297-4947-8b58-afc610148ec3)\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44971019335","Type":"PullRequestEvent","CreatedAt":"2024-12-20T06:25:21","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/14001","RelatedDescription":"Merged pull request \"Update PM UI README rendering spec\" (#14001) at NuGet/Home","RelatedBody":"Update to specify new message and tab selection behavior. "},{"Id":"44968305891","Type":"IssuesEvent","CreatedAt":"2024-12-20T03:38:11","Actor":"WeihanLi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14012","RelatedDescription":"Opened issue \"Support `NuGetAuditWarningAsError` to simplify treat audit warnings as errors \" (#14012) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nWhen we want to treat audit warnings as errors we have to set each error code to the `WarningsAsErrors` list, it's not easy to know all the error codes and it's possible to introduce a new error code, is it?\r\n\r\nWondering if we could introduce `NuGetAuditWarningAsError` to simplify treat all nuget audit warnings as errors\r\n\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-22T03:30:21.9071295Z","RunDurationInMilliseconds":951}