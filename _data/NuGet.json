{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34214467219","Type":"IssuesEvent","CreatedAt":"2023-12-16T01:35:03","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9762","RelatedDescription":"Closed issue \"Broken doc link for 3 ways to mitigate risk when using private package\" (#9762) at NuGet/NuGetGallery","RelatedBody":"Below link is not working here: https://learn.microsoft.com/en-us/nuget/concepts/security-best-practices#nuget-feeds\r\nI believe it should point here: https://azure.microsoft.com/mediahandler/files/resourcefiles/3-ways-to-mitigate-risk-using-private-package-feeds/3%20Ways%20to%20Mitigate%20Risk%20When%20Using%20Private%20Package%20Feeds%20-%20v1.0.pdf\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/49423b3c-acdd-44f0-9892-c031196aa7e6)\r\n \r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"34214310736","Type":"IssuesEvent","CreatedAt":"2023-12-16T01:15:32","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9762","RelatedDescription":"Opened issue \"Broken doc link for 3 ways to mitigate risk when using private package\" (#9762) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nDoc\n\n### The Elevator Pitch\n\nBelow link is not working here: https://learn.microsoft.com/en-us/nuget/concepts/security-best-practices#nuget-feeds\r\nI believe it should point here: https://azure.microsoft.com/mediahandler/files/resourcefiles/3-ways-to-mitigate-risk-using-private-package-feeds/3%20Ways%20to%20Mitigate%20Risk%20When%20Using%20Private%20Package%20Feeds%20-%20v1.0.pdf\r\n![image](https://github.com/NuGet/NuGetGallery/assets/8766776/49423b3c-acdd-44f0-9892-c031196aa7e6)\r\n \n\n### Additional Context and Details\n\n_No response_"},{"Id":"34210369902","Type":"PullRequestEvent","CreatedAt":"2023-12-15T20:13:42","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9727","RelatedDescription":"Merged pull request \"Reject POST to report abuse if the reason isn't one we allow reporting from the form.\" (#9727) at NuGet/NuGetGallery","RelatedBody":"Should address an odd issue with support requests where we get reasons that we shouldn't be seeing in support DB."},{"Id":"34187358717","Type":"IssuesEvent","CreatedAt":"2023-12-15T01:39:25","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9753","RelatedDescription":"Closed issue \"[Deployment] 2023.12.13\" (#9753) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\n## Changes\r\n\r\n* https://github.com/NuGet/NuGetGallery/pull/9733\r\n* https://github.com/NuGet/NuGetGallery/pull/9710\r\n* https://github.com/NuGet/NuGetGallery/pull/9747\r\n\r\n## Progress\r\n* [ ] Merge PRs: \r\n    - [ ] FI of main into dev: _skipped_\r\n    - [ ] RI of dev into main: \r\n* [ ] Build - \r\n* [ ] Release - \r\n* [ ] DEV DB Migration - _skipped_\r\n* [ ] DEV\r\n* [ ] INT DB Migration - _skipped_\r\n* [ ] INT\r\n* [ ] PROD DB Migration - _skipped_\r\n* [ ] PROD"},{"Id":"34187321974","Type":"PullRequestEvent","CreatedAt":"2023-12-15T01:36:36","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9760","RelatedDescription":"Merged pull request \"Add net8.0-browser to supported platforms\" (#9760) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9761\r\n\r\n.NET 8 added a new platform-specific TFM with `net8.0-browser`, so we need to include it in our supported platforms.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nAfter the changes,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"},{"Id":"34187209568","Type":"IssuesEvent","CreatedAt":"2023-12-15T01:27:44","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9761","RelatedDescription":"Opened issue \"Add net8.0-browser support\" (#9761) at NuGet/NuGetGallery","RelatedBody":"**Problem**\r\n\r\n.NET 8 introduced a new platform-specific TFM with `net8.0-browser`. We need to add it to our supported frameworks so that it shows up in the TFM badges.\r\n\r\nCurrently,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nExpected,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"},{"Id":"34187154064","Type":"PullRequestEvent","CreatedAt":"2023-12-15T01:23:15","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9760","RelatedDescription":"Opened pull request \"Add net8.0-browser to supported platforms\" (#9760) at NuGet/NuGetGallery","RelatedBody":".NET 8 added a new platform-specific TFM with `net8.0-browser`, so we need to include it in our supported platforms.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nAfter the changes,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34212526665","Type":"IssuesEvent","CreatedAt":"2023-12-15T22:24:33","Actor":"ViktorHofer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13097","RelatedDescription":"Opened issue \"NuGet Static graph restore invoked on a slnf file restores excluded projects\" (#13097) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.100\n\n### Worked before?\n\nno\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nRepro:\r\n`dotnet restore ttt.slnf` -> only the projects listed in the slnf file are restored\r\n`dotnet restore ttt.slnf /p:RestoreUseStaticGraphEvaluation=true` -> all projects listed in the sln file are restored\r\n\r\n[restorediff.zip](https://github.com/NuGet/Home/files/13690134/restorediff.zip)\r\n\r\nThis impacts changes like https://github.com/dotnet/msbuild/pull/9555 as when building from source, we must not restore more projects than necessary to not bring in prebuilts.\r\n\r\ncc @jeffkl \n\n### Verbose Logs\n\n_No response_"},{"Id":"34210943417","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:45:22","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13096","RelatedDescription":"Opened issue \"All user to add comments on a installed nuget package\" (#13096) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/All-user-to-add-comments-on-a-installed-/10363496)._\n\n---\nIt would be helpful to us if you were to have the ability to add a user comment on installed nuget packages.  We have many instances that we cannot update a package because of some bug or other issue.  If we had the ability to comment and also put an icon on the package that was installed, we would not run into issues of installing package updates that may give us an issue.\n\n\n---\n### Original Comments\n\n#### Feedback Bot on 5/15/2023, 11:05 PM: \n\n(private comment, text removed)"},{"Id":"34210478120","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:19:24","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13095","RelatedDescription":"Opened issue \"Incorrect tags description in Visual Studio 2022 \" (#13095) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Incorrect-tags-description-in-Visual-Stu/1640128)._\n\n---\n[regression] [worked-in:2019]\nI'm getting an 'Oops, we have lost the connection to Visual Studio' error no matter what when trying to report a problem for Visual Studio, so I'm reporting this issue here. Sorry about that.\n\nIn Visual Studio 2022, under Project, Properties, Package, General, and Tags, the Tags description is incorrect for NuGet. It should read 'A space-delimited list of tags and keywords', as said [here](https://docs.microsoft.com/en-gb/nuget/reference/nuspec#tags). This caused me to do incorrect tags for multiple of my projects because I was under the impression that things had been changed.\n\n---\n### Original Comments\n\n#### Feedback Bot on 1/18/2022, 11:15 PM: \n\n(private comment, text removed)"},{"Id":"34210343768","Type":"IssuesEvent","CreatedAt":"2023-12-15T20:12:18","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13094","RelatedDescription":"Opened issue \"Symbol loading from external server\" (#13094) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Symbol-loading-from-external-server/1553736)._\n\n---\nHello,\n\nI would like to ask for feature which allows moving the process of loading symbols from external service like Azure DevOps, Microsoft Symbols and Nuget.org Symbols to the background. It prevents developer if he is interested into debugging fast only some part of code that does not use external sources at first.\n\nThe origin of the problem is when you use project with many dependencies that does not have published symbols.\nAs there is a cache for already found symbols that speed up symbol loading and downloading process, there is no process while loading symbols that speeds up determining that some symbols will be not available at all. Thought, each time starting the debug session, the symbol loading will try to find not published symbols on remote servers, if you use more than 1 remote location that will take extra time too. You can of course add manually the name of libraries that does not publish symbols to options in Visual Studio, but it is very time consuming process when you need to as 25-50 libraries like so.\nMore over each and every developer will have to do this, as those settings are local to the IDE installation.\n\nTherefore one of the proposals I suggest is to put loading into background, so developer can already work with locally available symbols which should be loaded first. And the experience will be better each time the VS finds more symbols on remote server.\n\nSecond option that I would suggest is a some button or dialog that summaries not found symbols in external servers, and be able to add them to exclusions so VS does not try to find them again. The problem with solution as so, is that VS will not try to get symbols once those will become available and will require manual action.\n\nBest regards,\nMaciej Klemarczyk\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/14/2021, 03:00 AM: \n\n(private comment, text removed)"},{"Id":"34209328324","Type":"IssuesEvent","CreatedAt":"2023-12-15T19:17:25","Actor":"johnterickson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13093","RelatedDescription":"Opened issue \"Adding a `GlobalPackageReference` silently breaks `RestorePackagesConfig` throughout the repo\" (#13093) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\n17.9.0-preview-23578-04+5fcddc790\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI made some changes to my repo and unrelated projects in the repo failed to `Build` because of missing dependencies - though still `Restore`d fine.  This made no sense.\n\nAfter a bunch of digging, I discovered that when I added a `GlobalPackageReference` to a `Directory.Packages.props`, NuGet then would _silently_ ignore `<RestorePackagesConfig>true</RestorePackagesConfig>`. \n\nI could have saved a lot of time had there been a warning that said something like \"You are using both GlobalPackageReference and RestorePackagesConfig, but they are incompatible, so ignoring RestorePackagesConfig\".\n\nAgain, I'm not asking to make the combination work - just to warn about this footgun. Thanks!\n\nAndy mentioned that @jeffkl might be interested in this issue.\n\n### Verbose Logs\n\n_No response_"},{"Id":"34194684057","Type":"IssuesEvent","CreatedAt":"2023-12-15T09:12:34","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13092","RelatedDescription":"Opened issue \"[Bug Bash] The latest installed vulnerable package version doesn’t show correctly in the “Installed” tab of solution-level PM UI after adding second project and installing a later vulnerable version\" (#13092) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.9.0.63\n\n### Worked before?\n\nIt also reproes on VS 17.8 (D17.8\\34302.53 with implicit NuGet 6.8.0.131). It doesn't repro on VS 16.11 & 17.0 since the new feature is not merged into them.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:  \r\n1.Create a C# Console App (.NET Core 8.0) project – **project1** in VS.\r\n2.Open the solution-level PM UI and install a vulnerable package version – **version1** (e.g. Newtonsoft.Json 12.0.1).\r\n3.Go to “Installed” tab of the solution-level PM UI and observe the package list.\r\n4.Add a new C# Console App (.NET Core 8.0) project – **project2** into the solution from the Solution Explorer window.\r\n5.Click the solution-level PM UI again, select the second added project in the right panel and install a later vulnerable version – **version2** (e.g. e.g. Newtonsoft.Json 12.0.2).\r\n6.Observe the package list in the “Installed” tab of solution-level PM UI.\r\n\r\n#### Expected Results:  \r\nThere should be the latest installed vulnerable package version – **version2** on the top-right of the package.\r\n\r\n#### Actual Results:  \r\nThere is still the first-installed vulnerable package version – **version1** on the top-right of the package as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/74fadb2c-0d4b-4c67-83e3-26825ffcc093)\r\n\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It will still repro after clicking the “refresh” button.\r\n3.This issue will not repro after closing the solution-level PM UI and reopening it again.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34193395973","Type":"IssuesEvent","CreatedAt":"2023-12-15T08:19:35","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13091","RelatedDescription":"Opened issue \"[Bug Bash] \"No packages found\" message showed incorrectly in the \"Installed\" tab after checking both filter: \"Show only vulnerable\" & \"Include prerelease\"\" (#13091) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.63\n\n### Worked before?\n\nIt reproes on VS 17.8 (D17.8\\34302.53 with implicit NuGet 6.8.0.131). It doesn't repro on VS 16.11 & 17.0 since the new feature is not merged into them.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n\r\n1. Create a C# Console App(.NET 8.0) in VS.\r\n2. Open PMC and install a vulnerable package(e.g. Newtonsoft.Json 12.0.1).\r\n3. Go to \"Installed\" tab.\r\n4. Check the filter \"Show only vulnerable\" and \"Include prerelease\".\r\n5. Observe the packages list.\r\n\r\n\r\n**Expected:**\r\n \r\nThe \"No packages found\" should not show.\r\n\r\n\r\n**Actual:**\r\n\r\nThe \"No packages found\" message showed above the before vulnerable package as below screenshot.\r\n\r\n![image](https://github.com/NuGet/Home/assets/149561645/2ddf9fca-b4f3-4a0d-b4a9-9c85fc858a4a)\r\n\r\n**Note:**\r\n\r\nThe repro rate is 80%.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34186084245","Type":"IssuesEvent","CreatedAt":"2023-12-15T00:03:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13034","RelatedDescription":"Closed issue \"Conditional updating when *all*  packages are conditioned is broken\" (#13034) at NuGet/Home","RelatedBody":"Take an example: \r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net472;net8.0</TargetFrameworks>  \r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net472'\">\r\n\t    <PackageReference Include=\"Newtonsoft.Json\">\r\n\t\t    <Version>13.0.1</Version>\r\n\t    </PackageReference>\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net8.0'\">\r\n\t    <PackageReference Include=\"Newtonsoft.Json\">\r\n\t\t    <Version>13.0.2</Version>\r\n\t    </PackageReference>\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\nUpdating in VS will only update the first one, since NuGet doesn't really know that the packages itself have been set without a condition. \r\n\r\nNote that, while scenario like the above are detectable, scenarios where the same version is used on the reference are likely not possible today.  FWIW, the 2nd iteration (same version, 2 items) is a lot less likely, so just fixing the consolidation change is probably more than enough."},{"Id":"34186084120","Type":"IssuesEvent","CreatedAt":"2023-12-15T00:03:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11914","RelatedDescription":"Closed issue \"[Bug]: PM UI cannot uninstall packages in multitargeting projects\" (#11914) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 2022 Enterprise, Version 17.2.5\n\n### Worked before?\n\nNo, this does not work in VS2019\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nCreate a new console project.\r\n\r\nEdit the project file to look like the following:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFrameworks>net5.0;net472</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup Condition=\"$(TargetFramework) == 'net6.0'\">\r\n\t\t<PackageReference Include=\"Text2Xml.Lib\" Version=\"1.1.4\" />\r\n\t\t<PackageReference Include=\"Newtonsoft.json\" Version=\"13.0.1\" />\r\n\t\t<PackageReference Include=\"Polly.Extensions.Http\" Version=\"3.0.0\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup Condition=\"$(TargetFramework) == 'net472'\">\r\n\t\t<PackageReference Include=\"Newtonsoft.json\" Version=\"12.0.1\" />\r\n\t\t<PackageReference Include=\"Polly.Extensions.Http\" Version=\"2.0.1\" />\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nRight click on the project in Solution Explorer and select 'Manage NuGet Packages'\r\n\r\nUninstall package in 'Polly.Extensions.Http'.\r\n\r\n\r\n### Expected\r\n \r\nPolly.extensions.http package is uninstalled\r\n\r\n### Actual\r\n\r\nPackage is not uninstalled. See screenshot below.\r\n\r\n![image](https://user-images.githubusercontent.com/1192347/175352616-a158531e-3495-40ff-ba7f-57f8eb7f15e5.png)\r\n\r\n\n\n### Verbose Logs\n\n```shell\nRestoring packages for C:\\Users\\feaguila.REDMOND\\source\\repos\\ConsoleAppMultitargeting2022\\ConsoleAppMultitargeting2022\\ConsoleAppMultitargeting2022.csproj...\r\nSystem.ArgumentException: Package with id \"Polly.Extensions.Http\" does not exist.\r\n   at Microsoft.VisualStudio.ProjectSystem.References.PackageReferencesService.<>c__DisplayClass3_0.<<RemoveAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Threading.JoinableTask.<JoinAsync>d__76.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectLockService.<ExecuteWithinLockAsync>d__129.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectLockService.<ExecuteWithinLockAsync>d__129.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.CpsPackageReferenceProject.<UninstallPackageAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteBuildIntegratedProjectActionsAsync>d__87.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__84.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__83.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__82.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.NuGetProjectManagerService.<>c__DisplayClass18_0.<<ExecuteActionsAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.NuGetProjectManagerService.<CatchAndRethrowExceptionAsync>d__29.MoveNext()\r\nTime Elapsed: 00:00:00.1476767\r\n========== Finished ==========\n```\n"},{"Id":"34180760042","Type":"IssuesEvent","CreatedAt":"2023-12-14T19:20:58","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12974","RelatedDescription":"Closed issue \"Vulnerabilities filter shows incorrectly on “Brower” tab when the default tab was “Browse” instead of “Installed” for the previous opening of solution PM UI  \" (#12974) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.22\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:       \r\n\r\n1. Create a C# Class Library (.NET Core 8.0) project.   \r\n2. Right-click the solution in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu.   \r\n3. Click the \"Browse\" tab and close the solution-level PM UI.  \r\n4. Right-click the solution in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu to open the solution-level PM UI again.   \r\n\r\n#### Expected:        \r\n\r\nVulnerabilities filter should not show on “Brower” tab. \r\n\r\n#### Actual:        \r\n\r\nVulnerabilities filter shows incorrectly on “Brower” tab as below: \r\n![Unbenannt](https://github.com/NuGet/Home/assets/84695155/3d5fa777-a9cd-4cf3-a076-8ee4895ee35d)\r\n\r\n#### Note:    \r\n\r\n1.The repro rate is 100%.  \r\n2.This is not a regression since it is a new feature— Vulnerabilities filter.  \n\n### Verbose Logs\n\n_No response_"},{"Id":"34180738277","Type":"IssuesEvent","CreatedAt":"2023-12-14T19:20:01","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13090","RelatedDescription":"Opened issue \"Fix responsiveness of Filter and Checkboxes in top panel PM UI\" (#13090) at NuGet/Home","RelatedBody":"With the addition of a new checkbox to the top panel in PM UI there is not enough space in the top panel for low resolution displays. We should define the size behavior of each element.\r\n\r\nDiscussion with gifs about the behavior https://github.com/NuGet/NuGet.Client/pull/5520#discussion_r1411271977"},{"Id":"34178872822","Type":"IssuesEvent","CreatedAt":"2023-12-14T17:59:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13089","RelatedDescription":"Opened issue \".NET SDK & NuGet.Commandline.Xplat integration should be compile/not runtime\" (#13089) at NuGet/Home","RelatedBody":"When commands like `dotnet nuget push` or `dotnet nuget config`, `dotnet list package` today are invoked, the .NET SDK's dotnet.exe process has it's own parsing, which later gets forwarded to a completely new runnable, NuGet.Commandline.Xplat, which pretty much duplicates all the arguments. \r\n\r\nThis leads to an unnecessary 2nd process, difficulty debugging, + lots of duplicate work.\r\n\r\nThe proposal here is to change this integration to a compile time one, where the SDK just calls methods of NuGet.Commandline.Xplat instead of shelling out to a completely new process. "},{"Id":"34178646451","Type":"IssuesEvent","CreatedAt":"2023-12-14T17:50:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13087","RelatedDescription":"Closed issue \"[Pack] The packed package is not in tool folder after executing \"nuget pack -tool\" command\" (#13087) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev\\6.9.0.59\n\n### Worked before?\n\nIt reproes on NuGet Client 6.6.0.48\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n\r\n1. Create a C# Class Library (.NET Framework) project named package1 in VS.\r\n2. Build solution.\r\n3. Open “Developer Command Prompt” , cd to the project path.\r\n4. Execute “nuget spec”\r\n5. Execute \"nuget pack package1.csproj -tool\"\r\n6. Check the output files of the project should be in the tool folder.\r\n\r\n**Expected:**\r\n\r\nThe package file of the project should be in the tool folder.\r\n\r\n**Actual:**\r\n\r\nThe packed package is not in tool folder as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/ee1ff747-9825-4b18-9d8e-f4f05c1744ae)\r\n\r\n**Note:**\r\n\r\n1.Repro rate: 100%.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34177143607","Type":"IssuesEvent","CreatedAt":"2023-12-14T16:54:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13088","RelatedDescription":"Opened issue \"Visual Studio 17.8 browse tab never scrolls down past the first page.\" (#13088) at NuGet/Home","RelatedBody":"Body from the feedback ticket: There is a problem with the NuGet Package Manager UI in 17.8.0.  When trying to browse for packages it only returns the first 25 and won’t refresh when scrolling down to the bottom of the page.  I have rolled back to 17.7.7 and confirmed that it is working correctly in that version.  I then updated to 17.8.0 and confirmed that it is working as described of only getting the first 25 and not getting more.\r\n\r\n[Developer Community Issue](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1924207?src=WorkItemMention&src-action=artifact_link), [Developer Community bug](https://developercommunity.visualstudio.com/t/Problem-with-NuGet-Package-Manager-UI-af/10530864)"},{"Id":"34163798579","Type":"IssuesEvent","CreatedAt":"2023-12-14T09:14:37","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13087","RelatedDescription":"Opened issue \"[Pack] The packed package is not in tool folder after executing \"nuget pack -tool\" command\" (#13087) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev\\6.9.0.59\n\n### Worked before?\n\nIt reproes on NuGet Client 6.6.0.48\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n\r\n1. Create a C# Class Library (.NET Framework) project named package1 in VS.\r\n2. Build solution.\r\n3. Open “Developer Command Prompt” , cd to the project path.\r\n4. Execute “nuget spec”\r\n5. Execute \"nuget pack package1.csproj -tool\"\r\n6. Check the output files of the project should be in the tool folder.\r\n\r\n**Expected:**\r\n\r\nThe package file of the project should be in the tool folder.\r\n\r\n**Actual:**\r\n\r\nThe packed package is not in tool folder as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/ee1ff747-9825-4b18-9d8e-f4f05c1744ae)\r\n\r\n**Note:**\r\n\r\n1.Repro rate: 100%.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-17T03:30:19.3826029Z","RunDurationInMilliseconds":1094}