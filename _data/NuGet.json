{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12375303308","Type":"PullRequestEvent","CreatedAt":"2020-05-19T04:17:14","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7998","RelatedDescription":"Opened pull request \"Suppress ValiudateAntiForgeryToken message in FxCop \" (#7998) at NuGet/NuGetGallery","RelatedBody":"nuget.exe doesn't provide one an anti-forgery token, so we require an endpoint without one here, and should suppress the FxCop message. \r\n"},{"Id":"12371648754","Type":"IssuesEvent","CreatedAt":"2020-05-18T18:56:46","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7992","RelatedDescription":"Closed issue \"Allow control of Sorting when searching from PMUI\" (#7992) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nNuGet Client request to allow sorting on the Browse tab will require Server changes as well.\r\n\r\n### Describe the solution you'd like\r\nWhat changes would be necessary on Server to handle such a feature? Perhaps it should be limited to a single source?\r\n\r\n### Additional context\r\nhttps://github.com/nuget/home/issues/2585"},{"Id":"12367545345","Type":"IssuesEvent","CreatedAt":"2020-05-18T12:27:55","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7997","RelatedDescription":"Opened issue \"NuGet prompts for accounts when signing in to AAD\" (#7997) at NuGet/NuGetGallery","RelatedBody":"When signing in to NuGet via AAD, the \"select account\" screen is shown, causing an extra click and annoyance. Looking at the request logs, NuGet is sending `prompt=select_account` in the authorize request, which forces the account picker to be shown.\r\n\r\nThis parameter should be omitted so that SSO behaves correctly."},{"Id":"12363401279","Type":"PullRequestEvent","CreatedAt":"2020-05-18T04:14:12","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7993","RelatedDescription":"Merged pull request \"Append FAQ address to AAD unmanaged tenant authentication error\" (#7993) at NuGet/NuGetGallery","RelatedBody":"Appending a FAQ link to the AAD authentication error when user account is in an unmanaged tenant state. Also added aka.ms to support this.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7544\r\n\r\nResultant error message on page (this change adds the last sentence):\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/81895786-6eb3ec00-95f6-11ea-800f-ae59d949c427.png)"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12374522539","Type":"IssuesEvent","CreatedAt":"2020-05-19T01:51:09","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9393","RelatedDescription":"Closed issue \"Accessibility fixes reported by the Community\" (#9393) at NuGet/Home","RelatedBody":""},{"Id":"12374520494","Type":"IssuesEvent","CreatedAt":"2020-05-19T01:50:48","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9578","RelatedDescription":"Opened issue \"NonVisualDesktopAccess - Checkbox for selecting projects to install to isn't being read by screen reader\" (#9578) at NuGet/Home","RelatedBody":"[From V[S Feedback (847922)](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/847922)]\r\n\r\nBasically the Solution PMUI checkboxes are not being read by Narrator/NVDA screen readers, and require accessing the inner Checkbox controls manually. Probably should announce state on selecting a row in this grid.\r\n\r\n- AI reports no errors here. I have to drill-in to the checkbox in order to hear its checked state. I have not been able to find guidance on whether this is acceptable behavior. \r\n\r\n- I would expect to hear \"Checkbox unchecked/checked\" when selecting the grid row. We have the same behavior on the Updates Tab package checkboxes.\r\n\r\n![image](https://user-images.githubusercontent.com/49205731/82275681-5bd04d00-9951-11ea-9ef6-9d63cbeab921.png)\r\n"},{"Id":"12373572060","Type":"IssuesEvent","CreatedAt":"2020-05-18T22:55:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9577","RelatedDescription":"Opened issue \"IVsPackageInstallerService should be async\" (#9577) at NuGet/Home","RelatedBody":"Related:\r\n\r\nhttps://github.com/NuGet/Home/issues/8872\r\n\r\n[1116789](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1116789)\r\n[1040578](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1040578)\r\n[1040753](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1040753)\r\n\r\nWe need to make all our services async + Codespaces capable. \r\n\r\nWe should also look into reliability issues and neatly document all expected scenarios. \r\n\r\nSee: https://github.com/dotnet/roslyn/issues/44335"},{"Id":"12372977763","Type":"IssuesEvent","CreatedAt":"2020-05-18T21:28:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8838","RelatedDescription":"Closed issue \"Should package metadata element names be case-insensitive?\" (#8838) at NuGet/Home","RelatedBody":"Consider the case of the hand-edited .nuspec file (because no one ever does that, right?) where someone mistypes the metadata name and provides and incorrect case. **Should this be supported officially?**\r\n\r\nExample. The [BlogML.Core 1,0.0](https://www.nuget.org/packages/BlogML.Core/1.0.0) package on nuget.org has `<ProjectUrl>` in the .nuspec instead of `<projectUrl>` which is the official element name.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/69120813-6ae04c00-0a4f-11ea-92a2-e6eaef7ff40d.png)\r\n\r\nXML is case sensitive right? Well, yes, but the majority of cases in the official NuGet experiences accept this funky metadata element without blinking an eye:\r\n\r\n## 1st Party\r\n\r\n- ✔️ nuget.org: [link](https://www.nuget.org/packages/BlogML.Core/1.0.0)\r\n- ✔️ V2 non-hijacked: [link](https://www.nuget.org/api/v2/Packages()?$filter=Id%20eq%20%27BlogML.Core%27%20and%20NormalizedVersion%20eq%20%271.0.0%27%20and%201%20eq%201&$select=ProjectUrl)\r\n- ✔️ V2 hijacked: [link](https://www.nuget.org/api/v2/Packages(Id='BlogML.Core',Version='1.0.0'))\r\n  - This is the thing ready by VS package manager UI on the V2 feed URL\r\n- ❌ Package metadata resource, a.k.a. registration: [link](https://api.nuget.org/v3/registration4/blogml.core/index.json)\r\n  - This is the thing read by VS package manager UI on the V3 feed URL\r\n  - Note this will likely change with my Catalog2Registration rebuild due to [Newtonsoft.Json#815](https://github.com/JamesNK/Newtonsoft.Json/issues/815)\r\n- ✔️ Search: [link](https://azuresearch-usnc.nuget.org/query?q=packageid:BlogML.Core)\r\n- ✔️ Package manager UI on local feed\r\n  - ![image](https://user-images.githubusercontent.com/94054/69120227-e7722b00-0a4d-11ea-8db8-938026ee48a4.png)\r\n\r\n## 3rd Party\r\n\r\n- ❌ NuGet Package Explorer UI\r\n- ❌ NuGet Package Explorer > Edit > Edit Metadata Source (???)\r\n\r\n## This is a good idea right?\r\n\r\nMy vote is **_NO_**, **no**, **No**, **nO**! We should not support this officially.\r\n\r\nIn fact I think we should explicitly state it is not supported and any implementation that treats metadata names as case-insensitive strings is doing so at it's own peril. For example, what's the defined behavior when there are two metadata fields with the same name but different case (e.g. `<id>` and `<ID>`). Life's too short!\r\n\r\nFortunately, nuget.org rejects packages with multiple ID and version casings defined so I think we're out of scary land -- just living in crazy land. NBD.\r\n\r\n## Okay, who's guilty of this cardinal sin?\r\n\r\nNo shame, we all hack around with .nupkgs. But the ones I've found on nuget.org are:\r\n\r\n- StaticProxy.Fody 1.0.146-GenericMethods has \"Summary\" not \"summary\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.10.02.07.14.49/staticproxy.fody.1.0.146-genericmethods.json\r\n- Boolli 1.0.0 has \"licenseurl\" not \"licenseUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.01.02.03.56.37/boolli.1.0.0.json\r\n- BlogML.Core 1.0.0 has \"ProjectUrl\" not \"projectUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.01.02.13.49.28/blogml.core.1.0.0.json\r\n- Confuser.MSBuild 2.0.0-alpha-0191 has \"iconURL\" not \"iconUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.04.18.10.29.30/confuser.msbuild.2.0.0-alpha-0191.json\r\n- SmartSeeder 0.0.1, 1.0.0-rc1-beta, 1.0.0-rc1-preview have \"Language\" not \"language\".\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.41/smartseeder.0.0.1.json\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.41/smartseeder.1.0.0-rc1-beta.json\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.31/smartseeder.1.0.0-rc1-preview.json\r\n\r\n🍻 "},{"Id":"12372961757","Type":"IssuesEvent","CreatedAt":"2020-05-18T21:26:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8894","RelatedDescription":"Closed issue \"Supporting Nano Server and Windows Desktop\" (#8894) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen creating native libraries, there is no way to get NuGet to install a different set of native runtime assets when running on Nano Server vs Windows Desktop or Server Core.\r\n\r\nTypically, I would place my Win32 assets in the `runtimes/win-x64/native` directory and this works in most cases. However, Nano Server is both Win32 and not Win32. It is in the case that most binaries will work in both cases, but not in the case where I use some features not available on Nano Server. For example font subsetting using the FONTSUB.DLL.\r\n\r\nIt has been suggested in other issues that I should do some runtime detection for Nano Server and then not do something. This _could_ work, but will require a fair bit of effort - especially since the native library is a third party library.\r\n\r\nHaving a look around, I see a similar situation with Win32 and UWP assets. Technically, UWP is Windows, yet they have their own RID. In fact, UWP is the perfect example, as it is a `win10`, but has `nativeassets` of `uap10.0`: `runtimes/win10-x64/nativeassets/uap10.0/libSkiaSharp.dll`.\r\n\r\nThe case of UWP being a a TFM under `win` seems to make sense, but actually is is a bit wrong. The spec for the `nativeassets` specifies that pretty much any TFM can go there. If wee look at `/runtimes/{rid}/nativeassets/{txm}/` we can see that we could potentially add an iOS or Android native binary there. What is the point of having `/runtimes/win10-x64/nativeassets/xamarin.ios/libSkiaSharp`? That makes no actual sense. Even the concept of having uap under win10 is a bit weird. Why not have `/runtimes/uap10.0/`? Isn't that the who point of the runtimes folder? To select the correct native binaries for the runtime, based on the runtime? It looks to me if I have a native binary that works on both win10 and nano, then it should be fine to have it in `/runtimes/win10-x64/` and it will use the same in both places. But if not, then I should be splitting it up under the `nativeassets`.\r\n\r\nThe original issue for this feature was to distinguish UWP from Win10, but in actual fact, they were wanting to distinguish between a feature-set or subset of features of a platform. So the base is win10, and then we have UWP or Nano.\r\n\r\n> I opened this issue previously: https://github.com/NuGet/Home/issues/7375"},{"Id":"12372947370","Type":"IssuesEvent","CreatedAt":"2020-05-18T21:25:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8861","RelatedDescription":"Closed issue \"[Bug Bash][Test Failure][Suggestion] Properties info of the installed PackageReference package should not be empty\" (#8861) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.5.0.6326\r\nVS Version: Master\\29526.122\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1. Create a project [e.g. C# Console App (.NET Framework 4.8) template] via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Install several packages with PacakgeReference format.\r\n4. Open Solution Explorer window and go to “References” node.\r\n5. Right-click an installed package and press the cotext menu: “Properties” (or hit the hotkey “Alt+Enter”). \r\n## Expected\r\nProperties info of the installed PackageReference package should not be empty. (Not repro on .NET Core project as below screenshot.)\r\n![CorrectProperties](https://user-images.githubusercontent.com/20632625/69719268-17ef4e80-114b-11ea-8af9-e0d43961e668.png)\r\n## Actual\r\nProperties info of the installed PackageReference package is empty as below screenshot.\r\n![EmptyProperties](https://user-images.githubusercontent.com/20632625/69719279-1de52f80-114b-11ea-9f70-ba3fe96951ca.png)\r\n## Note\r\n1. Another resolution option (maybe): Don’t show the cotext menu: “Properties” for this package type.\r\n2. It repro on 16.1 GA (D16.1\\28916.193) with implicit NuGet 5.1.0.6013.\r\n\r\n"},{"Id":"12372729892","Type":"IssuesEvent","CreatedAt":"2020-05-18T20:58:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8989","RelatedDescription":"Closed issue \"Baseline measurement around perf in 16.5p2\" (#8989) at NuGet/Home","RelatedBody":""},{"Id":"12372726383","Type":"IssuesEvent","CreatedAt":"2020-05-18T20:58:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8988","RelatedDescription":"Closed issue \"Publish Plan to address HaTS pain points\" (#8988) at NuGet/Home","RelatedBody":""},{"Id":"12372616846","Type":"IssuesEvent","CreatedAt":"2020-05-18T20:44:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8926","RelatedDescription":"Closed issue \"nuspec with dll, native and content in output folder\" (#8926) at NuGet/Home","RelatedBody":"Hello\r\n\r\nI try to create a nuget package with existing dlls and content files\r\n\r\nI have to reference one dll (c++/cli), add some native dlls and copy to output and add one folder with files to output path. I read the nuspec documentation ( https://docs.microsoft.com/en-us/nuget/reference/nuspec ) but it is unclear...\r\n\r\nHere is the folder structure :\r\nbin\\xxx*.dll -> all the binaries c++/cli and native \r\nresources\\*.* -> all the content files\r\n\r\nafter install of nuget package, it should :\r\n- reference xxxnet.dll (c++/cli) in project\r\n- copy all native dlls in output path\r\n- copy the folder resources with all the files in output path\r\n\r\nHere is my current nuspec file :\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package  xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>    \r\n    <id>xxx.x64</id>\r\n    <version>15.5.3.3</version>\r\n    <title>xxx toolkit</title>\r\n    <authors>xxx</authors>\r\n    <owners>xxx</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>xxx x64 Windows</description>\r\n    <releaseNotes></releaseNotes>\r\n    <copyright>2019</copyright>\r\n    <tags></tags>\r\n    <references>\r\n        <reference file=\"xxxnet.dll\" />\r\n    </references>\r\n    <!-- <contentFiles> -->\r\n        <!-- <files include=\"ressources\\*.*\"  buildAction=\"None\" copyToOutput=\"true\" /> -->\r\n        <!-- <files include=\"bin\\xxx*.dll\" exclude=\"bin\\xxxnet.dll\" flatten=\"true\" buildAction=\"None\" copyToOutput=\"true\" /> -->\r\n    <!-- </contentFiles> -->\r\n  </metadata>\r\n  <files>\r\n    <file src=\"bin\\xxxnet.dll\" target=\"lib\\any\" />\r\n    <file src=\"resources\\*.*\"  target=\"content\\resources\"  />\r\n    <file src=\"bin\\xxx*.dll\" exclude=\"bin\\xxxnet.dll\" target=\"content\" />\r\n  </files>\r\n</package>\r\n```\r\nI already tried contentFiles, references but it doesn't work and now i'm lost.\r\nAny example whould be great\r\n\r\nThanks"},{"Id":"12372591339","Type":"IssuesEvent","CreatedAt":"2020-05-18T20:41:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8900","RelatedDescription":"Closed issue \"dotnet pack doesn't build with GeneratePackageOnBuild flag but creates package\" (#8900) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nDotnet pack normally builds the project but it doesn't if \"GeneratePackageOnBuild\" is set to true.\r\nThis wouldn't be so bad and seems unfortunately to be by design (#6118), but it should definitely not just use previous build outputs to create the new package (with the new package version). \r\nThere should be at least some warning (or better it should fail).\r\n\r\nNuGet product used (dotnet.exe):\r\n\r\ndotnet.exe --version: 3.0.100\r\n\r\nOS version (i.e. win10 v1903 (18362.356)):\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new .NET Core Lib\r\n1. Set `<GeneratePackageOnBuild>true</GeneratePackageOnBuild>`\r\n1. Build via dotnet build\r\n1. Change version\r\n1. run \"dotnet pack\" in project folder\r\n``"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"},{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-05-19T05:30:38.7734947Z","RunDurationInMilliseconds":1702}