{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43722843880","Type":"PullRequestEvent","CreatedAt":"2024-11-12T02:18:26","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10262","RelatedDescription":"Opened pull request \"[OIDC 3] Add flight for using federated credentials\" (#10262) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10252.\r\n\r\nWe want to be able to control exactly which package owners should be using this feature. This adds a flight (i.e. a feature flag specific to the user) for the new federated credentials (OIDC) feature.\r\n\r\nI did some minor private const renaming to address an IDE suggestion (per `.editorconfig`) which is unrelated to the other changes.\r\n\r\nThe flight defaults to false meaning it is opt-in.\r\n\r\nWe generally do not have UTs for these changes since they are so simple."},{"Id":"43722521492","Type":"PullRequestEvent","CreatedAt":"2024-11-12T02:00:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10204","RelatedDescription":"Closed pull request \"Pr 10173\" (#10204) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Detail 1\r\n* Detail 2\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123\r\n\r\n"},{"Id":"43721233174","Type":"PullRequestEvent","CreatedAt":"2024-11-12T00:42:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10252","RelatedDescription":"Merged pull request \"[OIDC 2] Add federated credential entities (no DB change yet)\" (#10252) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10251.\r\n\r\nThis adds Entity Framework entities for federated credentials. There are two new tables:\r\n\r\n1. `FederatedCredentialPolicy` - this is a set of criteria that a user can provide as an acceptable pattern of credentials for authenticating as their user. For example, a policy would could be \"allow this specific Entra ID service principal to push packages on my behalf\".\r\n1. `FederatedCredential` - a record of federated credentials that were accepted by a federated credential policy. This is only used to prevent token replay.\r\n\r\nA future PR will introduce the DB migration."},{"Id":"43718753607","Type":"PullRequestEvent","CreatedAt":"2024-11-11T22:22:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10251","RelatedDescription":"Merged pull request \"[OIDC 1] Add basic Entra ID token validation\" (#10251) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\n\r\nThis adds an `IEntraIdTokenValidator` interface which accepts a parsed JWT (JSON web token) and performs basic Entra ID validation. This will be used by higher level code in a future PR.\r\n\r\nThe goal of this class is to assert that a given JWT is issued by Entra ID and is valid. The following checks are performed:\r\n\r\n1. The JWT signature is valid per Entra ID's signing keys, fetched via JWKS. This is done inside `ConfigurationManager<OpenIdConnectConfiguration>`.\r\n2. The issuer is an expected Entra ID value (`iss` claim and `issuer` property on the key). This is done via `AadIssuerValidator.GetAadIssuerValidator` and `EnableAadSigningKeyIssuerValidation`.\r\n3. The token is not expired (`nbf` and `exp` claims). This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n4. The token has a valid audience (`aud` claim). A valid `aud` claim is our configured app client ID. This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n\r\nOther validations like replay protection, matching tenant ID/object ID, etc will be done elsewhere.\r\n\r\nThis minimal set of validations mimic the OWIN integration in Microsoft.Identity.Web:\r\nhttps://github.com/AzureAD/microsoft-identity-web/blob/011bd155ce3ddedeb43daa7348e09584cfa20552/src/Microsoft.Identity.Web.OWIN/AppBuilderExtension.cs#L62-L73"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43719043004","Type":"IssuesEvent","CreatedAt":"2024-11-11T22:35:42","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13740","RelatedDescription":"Closed issue \"NuGet discovers credentials providers installed using .NET tools\" (#13740) at NuGet/Home","RelatedBody":"Follow https://github.com/NuGet/Home/pull/13242 and make sure NuGet discovers credential providers installed using .NET tools. \r\n`dotnet tool install <provider package name> --global` should install the tool and add its path to the `PATH` environmental varibale. Iterate through all the paths in `PATH` and all the files in the path to find the plugins. By design, we expect these plugins to be named `nuget-plugin*`."},{"Id":"43719040332","Type":"IssuesEvent","CreatedAt":"2024-11-11T22:35:35","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13741","RelatedDescription":"Closed issue \"NuGet executes credentials providers installed using .NET tools\" (#13741) at NuGet/Home","RelatedBody":"When `HttpHandlerResourceV3Provider` needs to authenticate, if the credential provider was installed using .NET tool command, use the discovered provider to authenticate the user."},{"Id":"43718109746","Type":"IssuesEvent","CreatedAt":"2024-11-11T21:53:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13909","RelatedDescription":"Closed issue \"nuget pack can't handle double backslashes in paths\" (#13909) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\n5.9.1.11\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nHi, I'm trying to run nuget pack and see that it will fail to find any files whose paths are specified in a way that contains double backslashes, e.g.:\r\n\r\n    C:\\Users\\martin\\build\\Release\\\\my_lib.dll\r\n\r\nThis is very surprising behavior, since a user would assume nuget pack is able to solve such path specifications correctly as any other tool does."},{"Id":"43717851087","Type":"IssuesEvent","CreatedAt":"2024-11-11T21:42:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13899","RelatedDescription":"Closed issue \"Creating a package for non sdk project with IncludeReferencedProject gives System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\" (#13899) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.9.1.3\n\n### Worked before?\n\nyes, few months ago\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nCommand that I run:\r\n\r\n>nuget pack \"project.csproj\"  -SolutionDirectory \"Solution\" -PackagesDirectory \"Solution/packages\"  -IncludeReferencedProjects -OutputDirectory artifacts -Verbosity detailed -Properties Configuration=Debug\r\n\r\nthe project has references on other nugets as well as on the projects. In some cases I see the output like:\r\n\r\n>Found packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nThe given key was not present in the dictionary.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessDependencies(PackageBuilder builder)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nThis command worked few months ago. Also it works if I remove the option `IncludeReferencedProjects`. Any ideas how can it be fixed?\n\n### Verbose Logs\n\n```shell\nNuGet Version: 6.9.1.3\r\nAttempting to build package from 'project.csproj'.\r\nMSBuild auto-detection: using msbuild version '17.11.9.46202' from 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nPacking files from 'Solution\\Project\\bin\\Debug'.\r\nAdd file 'Solution\\Project\\bin\\Debug\\Project.dll' to package as 'lib\\net452\\Project.dll'\r\nWARNING: NU5118: File 'Solution\\DependencyProject\\Images\\loaderbar.gif' is not added because the package already contains file 'content\\Images\\loaderbar.gif'\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nThe given key was not present in the dictionary.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessDependencies(PackageBuilder builder)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"43712078752","Type":"IssuesEvent","CreatedAt":"2024-11-11T17:55:57","Actor":"mareek","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13916","RelatedDescription":"Opened issue \"Dependencies are not listed .NET Tool packages\" (#13916) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.403\n\n### Worked before?\n\nI don't think that it didn't worked before as no .NET Tool seems to have dependency on nuget.org\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. Create a new .NET Console project \r\n2. Add a reference to `System.Text.Json`\r\n3. Add a `PackageId` element to the csproj. The csproj should look like this :\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>net8.0</TargetFramework>\r\n\t\t<ImplicitUsings>enable</ImplicitUsings>\r\n\r\n\t\t<PackageId>HelloTool</PackageId>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```\r\n4. Run `dotnet pack`\r\n\r\nThe resulting .nupkg list `System.Text.Json` as a dependecy\r\n\r\n6. Add `<PackAsTool>true</PackAsTool>` to `<PropertyGroup>` element in the .csproj. The csproj should look like this :\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>net8.0</TargetFramework>\r\n\t\t<ImplicitUsings>enable</ImplicitUsings>\r\n\r\n\t\t<PackageId>HelloTool</PackageId>\r\n                <PackAsTool>true</PackAsTool>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```\r\n7. Run `dotnet pack`\r\n\r\nThe resulting .nupkg doesn't contain any dependecy\r\n\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-12T03:30:19.8941274Z","RunDurationInMilliseconds":953}