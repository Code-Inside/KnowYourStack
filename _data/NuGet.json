{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"31360358740","Type":"PullRequestEvent","CreatedAt":"2023-08-24T23:11:46","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9635","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.08.24]RI of dev into main\" (#9635) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"31331445765","Type":"PullRequestEvent","CreatedAt":"2023-08-24T00:12:00","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9605","RelatedDescription":"Merged pull request \"Not tracking package push failures when package is a duplicate.\" (#9605) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/4867"},{"Id":"31325325034","Type":"IssuesEvent","CreatedAt":"2023-08-23T18:17:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9634","RelatedDescription":"Opened issue \"[NuGet.org Bug]: V3 monitoring gets stuck on a deletion of a package with SemVer 2 metadata\" (#9634) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nThe package \"MySql.EntityFrameworkCore\" \"6.0.16+MySQL8.1.0\" went through the following steps:\r\n\r\n1. It was uploaded by the author.\r\n2. It failed validation due to an incorrect signing certificate.\r\n3. It was pushed again with a proper signing certificate. This resulted in a delete audit entry for the previous copy of that package, which resulted in a delete catalog leaf item because a delete audit was created. Having a delete audit is reasonable. Having a delete leaf is questionable since the package never existed in the catalog to begin with. It's generally harmless though since it is a delete of a non-existent package.\r\n4. The package was then successfully validated resulting in a PackageDetails catalog leaf.\r\n\r\nThe V3 monitoring job \"monitoringprocessing\" produced an \"unknown\" validation record for the queue message produced by \"db2monitoring\" after it saw the delete leaf created in step 3. The problem is that the record had the version \"6.0.16\" in the blob name. It should have had the lowercase full version \"6.0.16+mysql8.1.0\".\r\n\r\nThe effect of this is that the V3 monitoring was stuck on this \"unknown\" blob indefinitely. Unfortunately, the V3 monitoring pipeline uses the full version for its blob names causing build full version and normalized version differences (i.e. versions with metadata like `1.0.0+foo` or `6.0.16+MySQL8.1.0`) to potentially get stuck.\r\n\r\nThis is the root cause: https://github.com/NuGet/NuGetGallery/issues/9633\n\n### Repro Steps\n\nThis should be do-able on DEV.\r\n\r\nProduce a delete leaf for a package version build metadata. You should be able to soft delete a validating package for this.\r\n\r\nVerify that there is an \"unknown\" blob saved to the V3 monitoring container. The blob should not have build metadata in the name.\r\n\r\nUpload a package with that version containing build metadata (`+foo` in `1.0.0+foo` for example).\r\n\r\nThe \"unknown\" blob should remain stuck there forever.\n\n### Expected Behavior\n\nPackages should not be stuck in V3 monitoring for any reason aside from invalid metadata.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"31325091785","Type":"IssuesEvent","CreatedAt":"2023-08-23T18:07:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9633","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Delete catalog leaves use normalized version for \"version\" attribute, not full version\" (#9633) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nCurrently, the `PackageDetails` catalog leaf documents have the full version as their `version` property. This behavior is undocumented (the docs just say \"version\" leaving the full version vs. normalized vs. original, non-normalized version decision undefined). It is implemented here: \r\nhttps://github.com/NuGet/NuGet.Jobs/blob/5e425c7c3dbc8fbfcbafebdc0638babfa449f69f/src/Catalog/xslt/nuspec.xslt#L178-L180\r\n\r\nThe `PackageDelete` catalog leaf document uses normalized version:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/5e425c7c3dbc8fbfcbafebdc0638babfa449f69f/src/Catalog/DeleteCatalogItem.cs#L22\r\n\r\nThe effect of this is that any catalog reader than needs the full version for it's work will potentially skip or incorrectly process deleted packages where the full version diverges from the normalized version.\n\n### Repro Steps\n\nLook at the delete catalog leaf for this package:\r\nhttps://api.nuget.org/v3/catalog0/data/2023.07.18.13.25.35/mysql.entityframeworkcore.6.0.16.json\r\n\r\nNow look at the details leaf:\r\nhttps://api.nuget.org/v3/catalog0/data/2023.07.18.13.26.57/mysql.entityframeworkcore.6.0.16.json\r\n\r\nThe `version` attribute is different.\n\n### Expected Behavior\n\nWe should consistently put normalized, full, or original version string in given properties.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"31299469214","Type":"PullRequestEvent","CreatedAt":"2023-08-22T21:42:17","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9632","RelatedDescription":"Merged pull request \"Added bootstrap file\" (#9632) at NuGet/NuGetGallery","RelatedBody":"I didn't know that I was also supposed to add bootstrap-theme.css with my UI changes. Adding it now."},{"Id":"31298798535","Type":"PullRequestEvent","CreatedAt":"2023-08-22T21:04:21","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9632","RelatedDescription":"Opened pull request \"Added bootstrap file\" (#9632) at NuGet/NuGetGallery","RelatedBody":"I didn't know that I was also supposed to add bootstrap-theme.css with my UI changes. Adding it now."},{"Id":"31298780483","Type":"PullRequestEvent","CreatedAt":"2023-08-22T21:03:25","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9631","RelatedDescription":"Closed pull request \"Add bootstrap file\" (#9631) at NuGet/NuGetGallery","RelatedBody":"I didn't know that I was also supposed to add bootstrap-theme.css with my UI changes. Adding it now."},{"Id":"31298754861","Type":"PullRequestEvent","CreatedAt":"2023-08-22T21:02:09","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9631","RelatedDescription":"Opened pull request \"Add bootstrap file\" (#9631) at NuGet/NuGetGallery","RelatedBody":"I didn't know that I was also supposed to add bootstrap-theme.css with my UI changes. Adding it now."},{"Id":"31267939362","Type":"IssuesEvent","CreatedAt":"2023-08-21T20:37:33","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9467","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Password login flow redirects to wrong sign in page after creating temp password\" (#9467) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nIn the temporary password login flow that we enable for users, once they've created the temporary password, they see this page:\r\n![image](https://user-images.githubusercontent.com/82980589/232170652-461fea99-0bab-419d-bcda-98dfaef4d398.png)\r\n\r\nThe 'Sign in' link here takes you to the default sign in page: https://www.nuget.org/users/account/LogOn\r\n![image](https://user-images.githubusercontent.com/82980589/232170706-a107fb9b-dbf8-4d28-9a4f-d1d406ee4ccb.png)\r\n\r\nInstead, it should send you to the password enabled sign in page here: https://www.nuget.org/users/account/LogOnNuGetAccount\r\n![image](https://user-images.githubusercontent.com/82980589/232170778-3bf994e4-9b9d-4b56-b4f7-eba33dbde997.png)\r\n\r\n\n\n### Repro Steps\n\n1. Enable password login\r\n2. Follow the steps to create a temporary password\r\n3. Click on the 'sign in' link you see on the page once your password has been set\n\n### Expected Behavior\n\nWe should be redirected to the password-enabled sign in page here: https://www.nuget.org/users/account/LogOnNuGetAccount\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"31266717750","Type":"PullRequestEvent","CreatedAt":"2023-08-21T19:38:46","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9630","RelatedDescription":"Merged pull request \"Small fix\" (#9630) at NuGet/NuGetGallery","RelatedBody":"Previously I have removed a margin that was not supposed to be removed (upper margin between the filters and the blue thing). It is now fixed.\r\n\r\n<img width=\"236\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/cf245860-3466-4483-b5b1-2d8bfc78c2f9\">\r\n"},{"Id":"31265574132","Type":"PullRequestEvent","CreatedAt":"2023-08-21T18:44:29","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9630","RelatedDescription":"Opened pull request \"Small fix\" (#9630) at NuGet/NuGetGallery","RelatedBody":"Previously I have removed a margin that was not supposed to be removed (upper margin between the filters and the blue thing). It is now fixed.\r\n\r\n<img width=\"236\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/cf245860-3466-4483-b5b1-2d8bfc78c2f9\">\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"31361847039","Type":"IssuesEvent","CreatedAt":"2023-08-25T01:14:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12844","RelatedDescription":"Opened issue \"PackageVulnerabilityInfo implements Equals incorrectly\" (#12844) at NuGet/Home","RelatedBody":"PackageVulnerabilityInfo calls `==` to compare 2 VersionRange objects, but `==` is not implemented for VersionRange. "},{"Id":"31360164096","Type":"IssuesEvent","CreatedAt":"2023-08-24T22:56:20","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11366","RelatedDescription":"Closed issue \"Package Source Mapping UI - Package Installation/update through PM UI\" (#11366) at NuGet/Home","RelatedBody":"Refer to https://github.com/NuGet/Home/issues/11365. \r\n\r\nThis may require some clarity, but there aree quality mockups in https://github.com/NuGet/Home/blob/dev/implemented/2021/PackageSourceMapping.md\r\n\r\n"},{"Id":"31359480741","Type":"IssuesEvent","CreatedAt":"2023-08-24T22:08:16","Actor":"jaredpar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12843","RelatedDescription":"Opened issue \"RestoreTaskEx needs to use a response file when calling NuGet.Build.Tasks.Console.exe\" (#12843) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nVisual Studio 17.7 but guessing any existing release has this behavior\n\n### Worked before?\n\nThe bug has always existed but was recently exposed due to our increase in  code size\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nRepro steps: \r\n\r\n1. Clone https://github.com/dotnet/roslyn\r\n2. Run `Build.cmd -restore -pack` \r\n\r\nThis will error with\r\n\r\n> ...\\NuGet.RestoreEx.targets(19,5): error : The filename or extension is too\r\n long [Z:\\src\\Features\\LanguageServer\\Microsoft.CodeAnalysis.LanguageServer\\Microsoft.CodeAnalysis.LanguageServer.csproj]\r\n\r\nThe reason is RestoreTaskEx project shells out to NuGet.Build.Tasks.Console.exe. One of the arguments it passes is a mapping of projects in the restore plus, their absolute path and several configuration. \r\n\r\nExample: \r\n\r\n```xml\r\n  <ProjectConfiguration Project=\"{4B45CA0C-03A0-400F-B454-3D4BCB16AF38}\" AbsolutePath=\"C:\\Users\\jaredpar\\code\\roslyn\\src\\Compilers\\CSharp\\csc\\AnyCpu\\csc.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\r\n```\r\n\r\nI'm unsure what criteria is used here (assume it's just transitive dependencies) but it does scale with the number of included projects. That means once enough projects are included in the restore operation the command argument can exceed the [maximum command line length](https://learn.microsoft.com/en-US/troubleshoot/windows-client/shell-experience/command-line-string-limitation). This will result in the `RestoreTaskEx` task failing as it exceeds this limit.\r\n\r\nBelieve that RestoreTaskEx and NuGet.Build.Tasks.Console.exe should be communicating via a response file. This is common practice when shelling out from a build task to a tool that takes command lines whose length scales with the size of the build input. \r\n\n\n### Verbose Logs\n\n```shell\nCan provide a binary log if this helps with the diagnosis. Here is the full invocation for `Nuget.Build.Tasks.Console.exe` \r\n\r\nhttps://gist.github.com/jaredpar/7d73ac0106613d6b0c9a375043d3b9f6\n```\n"},{"Id":"31357914490","Type":"IssuesEvent","CreatedAt":"2023-08-24T20:38:54","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12830","RelatedDescription":"Closed issue \"Consider revising status to \"Requires a source mapping or select a single source\"\" (#12830) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nIn the Details Pane of PM UI, there's a scenario where selecting \"All\" source does not automatically create a package source mapping. The status string becomes \"Requires a package source mapping.\" \n\n### Desired Behavior\n\nConsider having this message also call out that a single source will enable automatic mapping.\r\n\r\nConsiderations\r\n1. We may be able to support All source, then this status is not relevant\r\n2. A docs link may be able to call out that All source isn't supported. https://github.com/NuGet/Home/issues/12829\n\n### Additional Context\n\n_No response_"},{"Id":"31355857841","Type":"IssuesEvent","CreatedAt":"2023-08-24T18:58:55","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12819","RelatedDescription":"Closed issue \"NuGetSdkResolver loads global.json multiple times during project load\" (#12819) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe NuGetSdkResolver uses a class to read `global.json`.  I added a caching mechanism to this class so that it would not read `global.json` more than once unless it changed on disk.  However, during project evaluation MSBuild is calling the NuGetSdkResolver in a way that means that multiple instances of the `GlobalJsonReader` class are instantiated.  We should use a static singleton instead.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkResolver.cs#L43\n\nI found this by manually debugging the SDK resolver while investigating something else.\n\n### Verbose Logs\n\n_No response_"},{"Id":"31353304261","Type":"IssuesEvent","CreatedAt":"2023-08-24T17:04:42","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12791","RelatedDescription":"Closed issue \"Opt-out of \"HTTPS everywhere\" : do not warn for HTTP sources when http sources are used in source command\" (#12791) at NuGet/Home","RelatedBody":"When `allowInsecureConnections` property in packageSources section is set to true in NuGet.Config files, suppress warnings for HTTP sources when http sources are used in source commands\r\n\r\nThe PR enable the HTTP warnings in this scenario is: https://github.com/NuGet/NuGet.Client/pull/4600"},{"Id":"31347131429","Type":"IssuesEvent","CreatedAt":"2023-08-24T13:24:31","Actor":"rainersigwald","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12842","RelatedDescription":"Opened issue \"[Feature Request]: EnforceAssets attribute for PackageReference\" (#12842) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#9163**\r\n- Please respond to @EdLichtman.\r\n\r\n---\r\n\r\n_From @EdLichtman on Thursday, August 24, 2023 1:04:14 PM_\r\n\r\n### Summary\n\nSometimes a library may depend on another but not because you're using that library in the child.\r\n\r\nThis is to tell the parent that it needs to import a sibling.\n\n### Background and Motivation\n\nI'm packaging up distributable json manifest files that add themselves to a project in the form of AdditionalFiles.\r\n\r\nI'm also packaging a single analyzer that finds all the manifest additional files and generates code from them.\r\n\r\nThe problem I'm having is, if the json packages have explicit dependencies on the analyzer, then the analyzer runs multiple times and clashes with itself. If I set PrivateAssets=none and IncludeAssets=none or ExcludeAssets=all, then the dependency graph in nuget doesn't list the analyzer as a dependency. \r\n\r\nAn additional issue I can see this solving is, I would like a joint dependency, where the analyzer depends on the json being present and the json depends on the analyzer being present but neither of them are dependent upon each other and therefore don't cause a circular dependency. \r\n\r\n\n\n### Proposed Feature\n\nI'm thinking EnforceAssets would be the reverse of PrivateAssets, but wouldn't interfere with include or exclude.\r\n\r\nTherefore you can say:\r\n\r\nEnforceAssets=build;buildTransitive;analyzers IncludeAssets=build\r\n\r\nAnd the build would be the only thing the child uses but then tells the parent it must depend on those other assets. \n\n### Alternative Designs\n\nI'm working on a snippet I found to add Pack=true called \"AddPackDependencies\"  I found to make it easier to communicate to a parent that a dependency is required. Problem is it also compiles the dll into it to avoid using the targetmoniker syntax. I am going to see if I can alter the function to include this, but it's been slow going, understanding the whole pipeline. "},{"Id":"31344705053","Type":"IssuesEvent","CreatedAt":"2023-08-24T12:00:16","Actor":"tbutler-qontigo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12841","RelatedDescription":"Opened issue \"Add the ability to update a single dependency when using package lock files\" (#12841) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe\n\n### The Elevator Pitch\n\nIn a production \"hotfix\" scenarion where I am using a `packages.lock.json` file, I need the ability to update a single dependency.\r\n\r\nAt the moment if I re-evaluate then every dependency could be updated which is undesirable where you want to minimise the surface area of a hotfix.\r\n\r\nIf I need to update component `Foo` version `1.2.3` to `1.2.4` in production then only it (and potentially any of it's dependencies should be updated - I don't also want to get a newer version of component `Bar` which may have been published since the original set of packages was locked down for the release.\r\n\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"},{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-08-25T03:30:21.8214047Z","RunDurationInMilliseconds":1254}