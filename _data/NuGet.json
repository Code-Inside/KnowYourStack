{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32432592422","Type":"PullRequestEvent","CreatedAt":"2023-10-09T23:39:51","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9668","RelatedDescription":"Merged pull request \"Admin Panel for Popularity Transfers\" (#9668) at NuGet/NuGetGallery","RelatedBody":"## Admin Panel for Popularity Transfers\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4746\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3a6ef4ec-da95-483c-bad5-89c51673afd1)\r\n\r\n<details><summary>You can now enter a list of packages you want to transfer popularity from, and a list of packages you want to transfer to. </summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/4c162811-b05c-4460-9517-9351f5f52ae8)\r\n</details> \r\n\r\n<details><summary>It then validates your input. </summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/265a5abb-3199-4e48-9005-ea26e7e660df)\r\n</details> \r\n\r\n<details><summary>Submitting your changes updates the DB with new entries in the PackageRenames table.</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/adcaf6c3-35ff-4788-95a3-75e84a443df2)\r\n\r\nYou can see the new Serilog (Key = 11) --> Moq (Key = 9) entry\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/6a315e46-0686-4776-be62-56fefa752dee)\r\n</details> \r\n\r\n<details><summary>Error Handling</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5d5dc90a-b10f-4884-80f0-a51795ef7a83)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/dea204c9-20bc-44c1-8691-7438c1c4418a)\r\n</details> \r\n\r\n<details><summary>Checking for existing popularity transfers</summary>\r\n\r\n**NOTE:** Our current playbook asks us to delete any existing popularity transfers for the 'From' packages, so the popularity transfer operation deletes previous entries from the DB. Let me know if this doesn't sound right, or we want to give the DRIs more information/options on what to do with existing popularity transfers. Currently, we just show a warning when we validate the input, and then if a user submits the changes, then we remove all previous entries.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/c9130282-d647-40e1-93fd-20139771e7c7)\r\n\r\nWe also show a warning if one of the 'To' packages has existing renames, as this would result in a transitive popularity transfer relationship (a -> b -> c). The DRI can then look at the table in the DB to see if they still want to proceed.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/a126aa44-0d18-46dc-bfea-70de63af78fb)\r\n\r\n</details> \r\n\r\n<details><summary>Multiple packages at once</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/fd73204e-b628-4dc3-a0c0-59a8cfc0f51b)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/48ceb4d5-6c8a-4965-b010-aa0b95111466)\r\n</details> \r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"32431351262","Type":"PullRequestEvent","CreatedAt":"2023-10-09T22:08:31","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9702","RelatedDescription":"Merged pull request \"Fixed url bug final\" (#9702) at NuGet/NuGetGallery","RelatedBody":"Fixed broken buttons.\r\n\r\nTest: open a package and check that buttons for Package Manager, Paket CLI, Script & Interactive, Cake, and .NET CLI work.\r\n\r\nProof:\r\n<img width=\"464\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/81104633-0c8e-4576-be3e-65b46d7da22e\">\r\n<img width=\"447\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/1a4c57ca-1640-4776-b7aa-353dc0c30884\">\r\n<img width=\"479\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/c1f8ef66-9077-4546-a032-28bf37a48412\">\r\n<img width=\"650\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/90274e31-b46e-408e-820f-fb9b07efbb54\">\r\n<img width=\"647\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/631f423d-e192-4611-8e62-0c26809edb46\">\r\n<img width=\"465\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/10553a16-8696-4d09-bbe8-44b276f2f4ac\">\r\n"},{"Id":"32430701714","Type":"PullRequestEvent","CreatedAt":"2023-10-09T21:27:38","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9702","RelatedDescription":"Opened pull request \"Fixed url bug final\" (#9702) at NuGet/NuGetGallery","RelatedBody":"Fixed broken buttons.\r\n\r\nTest: open a package and check that buttons for Package Manager, Paket CLI, Script & Interactive, Cake, and .NET CLI work.\r\n\r\nProof:\r\n<img width=\"464\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/81104633-0c8e-4576-be3e-65b46d7da22e\">\r\n<img width=\"447\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/1a4c57ca-1640-4776-b7aa-353dc0c30884\">\r\n<img width=\"479\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/c1f8ef66-9077-4546-a032-28bf37a48412\">\r\n<img width=\"650\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/90274e31-b46e-408e-820f-fb9b07efbb54\">\r\n<img width=\"647\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/631f423d-e192-4611-8e62-0c26809edb46\">\r\n<img width=\"465\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/10553a16-8696-4d09-bbe8-44b276f2f4ac\">\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32442425427","Type":"IssuesEvent","CreatedAt":"2023-10-10T09:03:04","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12933","RelatedDescription":"Opened issue \"Faild to patchSDK with NuGet client Dev latest build\" (#12933) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n.Net SDK 7.0.401\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1. Open a new \"Developer Command Prompt\".\r\n2. Cd to appropriate path, install [Git](https://git-scm.com/downloads) firstly, and git clone [Entropy](https://github.com/NuGet/Entropy.git).\r\n3. Cd to <path_to_Entropy>\\SDKPatchTool to check if the patch script is cloned successfully.\r\n4. Download the nupkgs folder from  the Artifacts -> nupkgs - NonRTM of the build.\r\n5. Open the <path_to_Entropy>\\SDKPatchTool\\patchOnWindows.ps1 and update the “$patchSDKFolder” & “$nupkgsPath” to appreciate path.\r\n6. Open Task Manager and navigate to the main menu to File | “Run new task.”.\r\n7. In the Open textbox type: `Powershell -ExecutionPolicy Bypass` and enable the option “Create this task with administrative privileges.”.\r\n8. Cd to <path_to_Entropy>\\SDKPatchTool and execute the command `.\\PatchOnWindows.ps1`.\r\n#### Expected:\r\nPatchSDK with NuGet client Dev latest build successfully.\r\n#### Actual:\r\nFaild to patchSDK with NuGet client Dev latest build as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/40230425/623c7c4b-475a-4e23-9cdd-1c8fb84a66d0)\r\n#### Note:\r\n1. The issue does not repro on NuGet Client Dev\\6.8.0.120.\r\n2. The issue repro rate is 100%.\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32430669817","Type":"IssuesEvent","CreatedAt":"2023-10-09T21:25:40","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12923","RelatedDescription":"Closed issue \"Nothing is working correctly anymore and I made no changes. \" (#12923) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, Other/NA\r\n\r\n### Product Version\r\n\r\n.NET SDK:  Version:   7.0.400  Commit:    73bf45718d  Runtime Environment:  OS Name:     Windows  OS Version:  10.0.17763  OS Platform: Windows  RID:         win10-x64  Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.400\\  Host:   Version:      7.0.10   Architecture: x64   Commit:       a6dbb800a4  .NET SDKs installed:   1.1.14 [C:\\Program Files\\dotnet\\sdk]   6.0.408 [C:\\Program Files\\dotnet\\sdk]   7.0.400 [C:\\Program Files\\dotnet\\sdk]  .NET runtimes installed:   Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]  Other architectures found:   x86   [C:\\Program Files (x86)\\dotnet]     registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]  Environment variables:   Not set  global.json file:   Not found  Learn more:   https://aka.ms/dotnet/info  Download .NET:   https://aka.ms/dotnet/download\r\n\r\n### Worked before?\r\n\r\nYes it worked before. I have no idea what changed. I didn't seem to download a version, so I wonder if my machine was automatically patched?\r\n\r\n### Impact\r\n\r\nIt's astronomically more difficult to complete my work, everything that packaged up nicely with a bow just stopped working.\r\n\r\n### Repro Steps & Context\r\n\r\nContext:\r\nIt was working fine and dandy before, and all of a sudden, today I ran into an Error, which was thrown because I TreatWarningsAsErrors. So as far as I know, I didn't do any upgrades, or anything. \r\n\r\nHere's what I'm doing:\r\nI'm building a convention and uniform library solution, in which I have \"Assembly Annotations\" that help dictate things.\r\n\r\nSome examples of what the convention and configuration does:\r\n* if a package has the \"MyAssemblyType\" of \"PackageAssembly\", then msbuild will create a new Attribute called \"PackageAssemblyIntroAttribute\" that includes \"Id\" and \"Version\".\r\n* if it's a PackageAssembly, then the Author is me.\r\n* Includes custom targets\r\n\r\nSo what happened:\r\n* I'm now getting warnings and errors out the wazoo which is incredibly breaking for my workflow, since I need to either turn off TreatWarningsAsErrors, or individually address each one. Most of which I've seen so far don't even make any sense.\r\n\r\nFor example, the base Assembly Annotations library, it has been stable and untouched for the last month. I ran into an issue today and decided to run \"dotnet pack\" against it, and get the following:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277: Found conflicts between different versions of \"System.Collections.Immutable\" that could not be resolved. [C:\\Source\\core-nuget-host\\AssemblyAnn\r\notations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277: There was a conflict between \"System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Collecti\r\nons.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [C:\\Source\\core-nuget-host\\AssemblyAnnotations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277:     \"System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System\r\n.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not. [C:\\Source\\core-nuget-host\\AssemblyAnnotations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\n```\r\nSo I tried to create one single library, with one project, and one props file:\r\n\r\n```\r\nprops/My.Microservice.Builder.Analyzers.props\r\nMy.Microservice.Builder.Analyzers.csproj\r\n```\r\nThe Props File is empty (<Project></Project>)\r\nInside the Csproj I have this:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n  \r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <Description>asdfsdf</Description>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput> <!-- Do not include the generator as a lib dependency -->\r\n    <!-- For NU5128 (Since net6.0 is the Framework, but there is no lib/ref directory -->\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n    <NoPackageAnalysis>true</NoPackageAnalysis>\r\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n  </PropertyGroup>\r\n\r\n\r\n\r\n  <ItemGroup>\r\n    <None Include=\"**\\My.Microservice.Builder.Analyzers.props\" Pack=\"true\" PackagePath=\"/build/\" Visible=\"true\"/>\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nAnd when I run dotnet pack, I get this error:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error NU50\r\n17: Cannot create a package that has no dependencies nor content. [C:\\Source\\sandbox\\testnamepackagelength\\src\\My.Micro\r\nservice.Builder.Analyzers.csproj]\r\n\r\nThe thing about it is, the combination of \r\n```    \r\n   <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n```\r\nhas historically suppressed NU5017.\r\n\r\nIn addition, under a random condition that I can't put my finger on that same project will tell me that \"it found a \"props\" file, but the props file didn't match the \"My.Microservice.Builder.Analyzers.props\" required name\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32430161935","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:57:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12913","RelatedDescription":"Closed issue \"Feedback for package source mapping: multiple package source elements with same key but different patterns\" (#12913) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe\n\n### Current Behavior\n\nI was just setting up the package source mapping, having learned about it in a random survey VS invited me to the other day. I read from the blog post that precedence rules would be applied for specific values down to wildcards so I thought hey, that's neat. I can specify NuGet as a catch-all and then specify some more specific patterns that also apply to NuGet.  That way if I ever want to change the source, the block is already there and just needs a key change.\r\n\r\nI had tried doing this:\r\n```xml\r\n<packageSourceMapping>\r\n  <packageSource key=\"nuget\">\r\n    <package pattern=\"**\"/>\r\n  </packageSource>\r\n  <packageSource key=\"nuget\">\r\n    <package pattern=\"Microsoft.*\"/>\r\n  </packageSource>\r\n</packageSourceMapping>\r\n```\r\n\r\nI saved the file and immediately Visual Studio locked up with the following error:\r\n> NuGet operation failed\r\n> PackageSourceMapping is enabled and there are multiple package sources associated with the same key(s) (and then a path to the file)\n\n### Desired Behavior\n\nA gold error bar should show up in Visual Studio calling out the issue, but it absolutely shouldn't require one to crash VS and re-open it due to it being perpetually non-responsive from that moment on. In the alternative, just show a red squiggly in the XML document as though I had a syntax error. Either way, it shouldn't break VS.\r\n\r\nFurther, I think it should allow such an entry. In keeping with the precedence rules indicated, it would simply find a pattern match for the package as before and the key should serve as a reference back to the specific package source, not as a unique identifier for that element.\n\n### Additional Context\n\nToday, it's legal to simply have:\r\n\r\n```xml\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"*\" />\r\n  <package pattern=\"Microsoft.*\"/>\r\n</packageSource>\r\n```\r\n\r\nI'm simply proposing that this should be legal as well to represent the same thing.\r\n\r\n```xml\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"*\" />\r\n</packageSource>\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"Microsoft.*\"/>\r\n</packageSource>\r\n```\r\n\r\nThank you for the consideration!"},{"Id":"32430035766","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:50:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12914","RelatedDescription":"Closed issue \"\"dotnet list package --include-transitive\" should ignore docker project files\" (#12914) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nI'm trying to follow the steps outlined in the [blog post](https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/) for package source mapping and it suggests that I run `dotnet list package --include-transitive` to \"view all top-level and transitive packages in your solution.\r\n\r\nMine is a solution in which every project will be built as a separate Docker container. When I ran this command, I got the message:\r\n> The project `<my solution-dir>\\docker-compose.dcproj` uses package.config for NuGet packages, while the command works only with package reference projects.\r\n\r\nThat's all fine and good - where's the list of packages? \n\n### Desired Behavior\n\nIf it encounters a file type it's not compatible with, skip it and keep searching. Instead I get a warning that it's incompatible (and can't do anything about it as I otherwise need the file) and also get no outputs providing me with the desired list.\r\n\r\nFurther, there should be some way to write this list directly from the command into the nuget.config file in the root of the directory I'm running the command from.\n\n### Additional Context\n\nAs it stands, I've got too many projects in this solution to try running that command one at a time, so I'm just going to have to pass on fully implementing the package source mapping.  Please address the above issue so I might take full advantage of this handy functionality.\r\n\r\nThank you!"},{"Id":"32430033784","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:50:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/12914","RelatedDescription":"Reopened issue \"\"dotnet list package --include-transitive\" should ignore docker project files\" (#12914) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nI'm trying to follow the steps outlined in the [blog post](https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/) for package source mapping and it suggests that I run `dotnet list package --include-transitive` to \"view all top-level and transitive packages in your solution.\r\n\r\nMine is a solution in which every project will be built as a separate Docker container. When I ran this command, I got the message:\r\n> The project `<my solution-dir>\\docker-compose.dcproj` uses package.config for NuGet packages, while the command works only with package reference projects.\r\n\r\nThat's all fine and good - where's the list of packages? \n\n### Desired Behavior\n\nIf it encounters a file type it's not compatible with, skip it and keep searching. Instead I get a warning that it's incompatible (and can't do anything about it as I otherwise need the file) and also get no outputs providing me with the desired list.\r\n\r\nFurther, there should be some way to write this list directly from the command into the nuget.config file in the root of the directory I'm running the command from.\n\n### Additional Context\n\nAs it stands, I've got too many projects in this solution to try running that command one at a time, so I'm just going to have to pass on fully implementing the package source mapping.  Please address the above issue so I might take full advantage of this handy functionality.\r\n\r\nThank you!"},{"Id":"32430029116","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:50:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12914","RelatedDescription":"Closed issue \"\"dotnet list package --include-transitive\" should ignore docker project files\" (#12914) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nI'm trying to follow the steps outlined in the [blog post](https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/) for package source mapping and it suggests that I run `dotnet list package --include-transitive` to \"view all top-level and transitive packages in your solution.\r\n\r\nMine is a solution in which every project will be built as a separate Docker container. When I ran this command, I got the message:\r\n> The project `<my solution-dir>\\docker-compose.dcproj` uses package.config for NuGet packages, while the command works only with package reference projects.\r\n\r\nThat's all fine and good - where's the list of packages? \n\n### Desired Behavior\n\nIf it encounters a file type it's not compatible with, skip it and keep searching. Instead I get a warning that it's incompatible (and can't do anything about it as I otherwise need the file) and also get no outputs providing me with the desired list.\r\n\r\nFurther, there should be some way to write this list directly from the command into the nuget.config file in the root of the directory I'm running the command from.\n\n### Additional Context\n\nAs it stands, I've got too many projects in this solution to try running that command one at a time, so I'm just going to have to pass on fully implementing the package source mapping.  Please address the above issue so I might take full advantage of this handy functionality.\r\n\r\nThank you!"},{"Id":"32429792610","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:38:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12924","RelatedDescription":"Closed issue \"Do not warn when NuGet resolves to a higher version of the package unless its change in major version\" (#12924) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nComing from #5764 I'd like to bring this up again. We have recently introduced the intel.mkl nuget packages into our project and we are being flooded with NU1603 warnings.\r\n\r\nThe reason is that the package is dependend on other packages\r\n\r\n```\r\n    <dependencies>\r\n      <dependency id=\"intelopenmp.redist.win\" version=\"[2023.0.0, 2024.0.0)\" />\r\n      <dependency id=\"inteltbb.redist.win\" version=\"[2021.0.0, 2022.0.0)\" />\r\n    </dependencies>\r\n```\r\n\r\nBut intel made the dependency floating to the latest possible version inside the range. I think this is a valid point but from the discussion  #5764 it seemed that the package distributor should enter only dedicated version. If this is the case, why does this possibility exist at all to allow a range of versions while the behavior (at least what was discussed from some people in #5764) should be only one dedicated version.\r\n\r\nI think this behavior was intended by intel, but it is presented as a warning which is isn't. It is only an information. \r\n\r\nBecause it is intended by intel but obviously not as desired by nuget my effort would be now to explicitly exclude the warning NU1603 everywhere in our codebase for only this package.\r\n\r\nI think I will have a hard time to convince intel to change it ;-)\n\n### Desired Behavior\n\nEither disallow to set a range or allow to suppress the warning if the behavior is intended.\n\n### Additional Context\n\n_No response_"},{"Id":"32429635566","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:29:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12925","RelatedDescription":"Closed issue \"Allow the loading of packages from a repository which contains a corrupted package\" (#12925) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, NuGet SDK\r\n\r\n### Current Behavior\r\n\r\nIn case a local NuGet repository folder contains a corrupted NuGet package, NuGet.Protocol throws an unhandled exception showing the error message and naming the faulty package. This makes the repository unusable, nothing will load from it until all of the corrupted packages are cleared.\r\nSee the error log. To reproduce, just delete some bytes in an existing nupkg file, or delete the last few hundred bytes of it. The real life case is an interrupted download or network copy.\r\n[nuget_exception.txt](https://github.com/NuGet/Home/files/12832301/nuget_exception.txt)\r\n\r\n\r\n### Desired Behavior\r\n\r\nFor my use case, it would be better if the faulty packages would be omitted from the resulting list and only added to the log. The repository would remain usable and the user could remove faulty packages all at once, instead of getting the error package by package.\r\nWithout adding the logging, the fix is very simple:\r\n_NuGet.Core\\NuGet.Protocol\\Utility\\LocalFolderUtility.cs_\r\n**GetPackagesFromNupkgs** function\r\n`return files.Select(file => GetPackageFromNupkg(file)).Where(packageInfo => packageInfo != null);`\r\nThe Where statement is new.\r\n\r\n**GetPackageFromNupkg** function\r\nAdd a new catch statement:\r\n`catch (InvalidDataException) {return null; }`\r\n\r\nThis way the content of the local repository is properly enumerated, the corrupted package is ignored.\r\n\r\n### Additional Context\r\n\r\nAdding the logging would make the current functions a little bit messy. Is it acceptable to expand the chain of calls with a logger parameter? Is it worth making a PR, or would this behavior change be refused immediately by the NuGet team?\r\nI need this change in a proprietary desktop application which uses the NuGet Client SDK as a C# library. I cannot workaround this behavior by externally wrapping and processing the NuGet output. Having a forked NuGet is not allowed, it has to be in one of the future official releases.\r\n\r\n### Error log of current behavior\r\n\r\n```\r\nC:\\Users\\User\\.nuget\\packages\\nuget.commandline\\6.7.0\\tools>nuget search -Source c:\\invalidTest -PreRelease -Verbosity detailed\r\nNuGet Version: 6.7.0.127\r\n'c:\\invalidTest\\ArchitectDemo.1.0.0-pre20230914122119.nupkg' is not a valid nupkg file. Error: 'Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.'.\r\n  Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.\r\nNuGet.Protocol.Core.Types.FatalProtocolException: 'c:\\invalidTest\\ArchitectDemo.1.0.0-pre20230914122119.nupkg' is not a valid nupkg file. Error: 'Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.'. ---> System.IO.InvalidDataException: Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.\r\n   at System.IO.Compression.ZipArchive.ReadCentralDirectory()\r\n   at System.IO.Compression.ZipArchive.get_Entries()\r\n   at NuGet.Packaging.ZipArchiveExtensions.GetFiles(ZipArchive zipArchive) in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Packaging\\PackageExtraction\\ZipArchiveExtensions.cs:line 33\r\n   at NuGet.Packaging.PackageReaderBase.GetNuspecFile() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Packaging\\PackageReaderBase.cs:line 104\r\n   at NuGet.Packaging.PackageReaderBase.GetNuspec() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Packaging\\PackageReaderBase.cs:line 99\r\n   at NuGet.Packaging.PackageReaderBase.get_NuspecReader() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Packaging\\PackageReaderBase.cs:line 118\r\n   at NuGet.Protocol.LocalFolderUtility.GetPackageFromNupkg(FileInfo nupkgFile) in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\Utility\\LocalFolderUtility.cs:line 1222\r\n   --- End of inner exception stack trace ---\r\n   at NuGet.Protocol.LocalFolderUtility.GetPackageFromNupkg(FileInfo nupkgFile) in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\Utility\\LocalFolderUtility.cs:line 1239\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at NuGet.Protocol.LocalFolderUtility.<GetDistinctPackages>d__39.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\Utility\\LocalFolderUtility.cs:line 1129\r\n   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\r\n   at NuGet.Protocol.LocalPackageSearchResource.<CollapseToHighestVersion>d__8.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\LocalRepositories\\LocalPackageSearchResource.cs:line 181\r\n   at System.Linq.Enumerable.<SkipIterator>d__31`1.MoveNext()\r\n   at System.Linq.Enumerable.<TakeIterator>d__25`1.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at NuGet.Protocol.LocalPackageSearchResource.<>c__DisplayClass2_0.<SearchAsync>b__0() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\LocalRepositories\\LocalPackageSearchResource.cs:line 63\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.LocalPackageSearchResource.<SearchAsync>d__2.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Protocol\\LocalRepositories\\LocalPackageSearchResource.cs:line 39\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.CommandLine.SearchCommand.<ExecuteCommandAsync>d__13.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\Commands\\SearchCommand.cs:line 105\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute() in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\Commands\\Command.cs:line 157\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args) in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\Program.cs:line 158\r\n```"},{"Id":"32425489978","Type":"IssuesEvent","CreatedAt":"2023-10-09T17:04:00","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12932","RelatedDescription":"Opened issue \"Test UpdateAllPackagesInPMC (ClassLibrary,PackageA,1.0.0,2.0.0,PackageB,1.0.1,2.0.1) constantly fail\" (#12932) at NuGet/Home","RelatedBody":"Recently, the Apex test UpdateAllPackagesInPMC (ClassLibrary,PackageA,1.0.0,2.0.0,PackageB,1.0.1,2.0.1)  constantly fail:\r\nError message:\r\n```\r\nTestCleanup method NuGet.Tests.Apex.NuGetConsoleTestCase.TestCleanup threw exception. Microsoft.Test.Apex.Services.ScopeException: Microsoft.Test.Apex.Services.ScopeException: Cannot exit scope 'NuGetConsoleTestCase::UpdateAllPackagesInPMC' as it has already been exited..\r\n```\r\nStack trace:\r\n```\r\n   at Microsoft.Test.Apex.Services.ExecutionScopeHandle.Exit()\r\n   at Microsoft.Test.Apex.ApexTest.TestCleanup()\r\n```\r\nIf someone is going to look at it recently, there are some attachments which might be helpful for diagnosing in  below builds:\r\n[6.9.0.64](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8506900)\r\n[6.9.0.65](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8507779)\r\n[6.9.0.66](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8508434)\r\n"},{"Id":"32425360344","Type":"IssuesEvent","CreatedAt":"2023-10-09T16:58:04","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12931","RelatedDescription":"Opened issue \"Test VerifyCacheFileInsideObjFolder (NetStandardClassLib) constantly fail for timeout\" (#12931) at NuGet/Home","RelatedBody":"Recently, the Apex test VerifyCacheFileInsideObjFolder (NetStandardClassLib) constantly fail for timeout.\r\nAfter moving Apex from xUnit to MSTest, the individual test will timeout after 5 mins.\r\nIf someone is going to look at it recently, there are some attachments in  below builds. The .dmp files might be helpful for diagnosing.\r\n[6.9.0.64](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8506900)\r\n[6.9.0.65](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8507779)\r\n[6.9.0.66](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8508434)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-11T03:30:22.717278Z","RunDurationInMilliseconds":1195}