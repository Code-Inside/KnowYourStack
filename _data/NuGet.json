{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"29543702529","Type":"PullRequestEvent","CreatedAt":"2023-06-05T19:36:16","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9520","RelatedDescription":"Opened pull request \"Readme table style\" (#9520) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\nrender readme table more pretty with word warp setting.\r\n\r\n![Screenshot 2023-06-05 123258](https://github.com/NuGet/NuGetGallery/assets/64443925/605733f0-329d-49cf-acca-e88f7cd7486d)\r\n\r\n[rec-screen (2).webm](https://github.com/NuGet/NuGetGallery/assets/64443925/bf9db3a6-3c6e-4bca-b857-c351f8fe0bdd)\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9518"},{"Id":"29500638457","Type":"IssuesEvent","CreatedAt":"2023-06-02T21:20:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9252","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Add caniuse images via bitsofco.de to trusted image domains\" (#9252) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWe are offering Blazor wrapper packages for different web APIs. There is a great service called caniuse.com that shows the availability of a particular API on different platforms. Ire Aderinokun offers a service that shows the caniuse.com status data and MDN compat data in a (static) image, e.g.:\r\n\r\nhttps://caniuse.bitsofco.de/image/async-clipboard.png → https://res.cloudinary.com/ireaderinokun/image/upload/v1663850793397/caniuse-embed/all/async-clipboard.png\r\n\r\n![](https://caniuse.bitsofco.de/image/async-clipboard.png)\r\n\r\nThus, I'd like to suggest adding either `caniuse.bitsofco.de` or the resolved version `res.cloudinary.com/ireaderinokun/*/caniuse-embed/all/*.png` to the allowlist.\n\n### Repro Steps\n\nStatus image is currently not shown:\r\n\r\n- https://www.nuget.org/packages/Thinktecture.Blazor.AsyncClipboard\r\n- https://www.nuget.org/packages/Thinktecture.Blazor.WebShare\n\n### Expected Behavior\n\nStatus image is shown.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29474307163","Type":"IssuesEvent","CreatedAt":"2023-06-01T20:43:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9519","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \"Minimum NuGet Client Version\" field is empty in package metadata preview\" (#9519) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen a package is uploaded specifying [`minClientVersion`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#minclientversion) metadata attribute it seems there is an attempt to surface the value in the confirmation page after package upload, but the value is not printed under the header.\n\n### Repro Steps\n\n1. Make a package with a valid value of `minClientVersion` metadata attribute (`6.0` for example).\r\n2. Try uploading it through web UI.\r\n3. Observe empty line after \"Minimum NuGet Client Version\" header under \"Verify\"\n\n### Expected Behavior\n\nAn actual version displayed.\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/102933/69a4cb47-fd50-4f53-99aa-b40900ac8eb2)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29472503422","Type":"IssuesEvent","CreatedAt":"2023-06-01T19:16:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9146","RelatedDescription":"Closed issue \"[Feature]: Increase the page size of the V3 catalog\" (#9146) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nCurrently, the V3 catalog on NuGet.org has a page size of 550. This has served us well for many years but, as the protocol demands, the catalog is append only so the catalog `index.json` will only grow as the number of catalog leaves accumulates. To slow down the `index.json` growth rate we can increase the page size.\r\n\r\nThis will give us more time to plan a fully scalable solution (e.g. https://github.com/NuGet/NuGetGallery/issues/7787).\r\n\r\nThe downloads.v1.json file is over 100 MB and still parses fine but the difference here is that the catalog index.json may be downloaded much more frequently (to poll for catalog commits). A smaller file is better.\n\n### The Elevator Pitch\n\nWe should add the ability to configure the page size. It's a .NET constant right now of 550. We should increase it to a larger size. The value of 1650 seems to be working just fine in DEV for several weeks\n\n### Additional Context and Details\n\nWe have an internal discussion [on Teams](https://teams.microsoft.com/l/message/19:d10cd9192de2492986fba3baeea3093c@thread.skype/1652468991222?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=ad34ac55-6785-4e7c-82c3-7ba405d30c3c&parentMessageId=1652468991222&teamName=NuGet&channelName=Server&createdTime=1652468991222).\r\n\r\nThe index.json size over time is here:\r\n![image](https://user-images.githubusercontent.com/94054/174692360-048bc4e8-dc22-4a77-8acb-cc511f156bab.png)\r\n(y = bytes, x = month)\r\n\r\nWe already have several jumbo pages from deprecations:\r\nPageUrl | LeafCount | max_CommitTimestamp\r\n-- | -- | --\r\nhttps://api.nuget.org/v3/catalog0/page9598.json | 1728 | 2020-02-09 13:04:53.7647929\r\nhttps://api.nuget.org/v3/catalog0/page10769.json | 1183 | 2020-08-20 19:28:36.8641381\r\nhttps://api.nuget.org/v3/catalog0/page10770.json | 1134 | 2020-08-20 19:29:20.2945851\r\nhttps://api.nuget.org/v3/catalog0/page12124.json | 997 | 2021-03-12 10:27:09.9984875\r\nhttps://api.nuget.org/v3/catalog0/page10857.json | 839 | 2020-09-03 13:35:37.7371129\r\n\r\nThe change in index.json MoM (month over month) is here:\r\n![image](https://user-images.githubusercontent.com/94054/174692474-68b819e8-9203-4ca1-b085-cd5e0c13eb69.png)\r\n"},{"Id":"29472494639","Type":"IssuesEvent","CreatedAt":"2023-06-01T19:15:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9504","RelatedDescription":"Closed issue \"[NuGet.org Bug]: 404 reason phrase is not properly returned for package unlist\" (#9504) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe reason phrase we configure in gallery for API 404 responses is clobbered by our default pretty 404 error page. As you can see this just has the default \"Not found\" here:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/94054/ce926e92-58c5-40f1-84db-570b27494110)\r\n\r\nIt should be showing this string:\r\nhttps://github.com/NuGet/NuGetGallery/blob/912cd3bd73432f6edf8a9e20106d3cc635ca99df/src/NuGetGallery/Controllers/ApiController.cs#L876-L877\r\n\r\nOther status codes like 400 work properly.\n\n### Repro Steps\n\nTry to unlist a package using `nuget.exe delete` that does not exist and check the error response. It just says \"not found\" not a full message.\r\n\r\nIt says `Response status code does not indicate success: 404 (Not Found).`\n\n### Expected Behavior\n\nIt should say `\"Response status code does not indicate success: 404 (A package with ID 'does-not-exist' and version '1.0.0' does not exist.).\"`\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29338556594","Type":"IssuesEvent","CreatedAt":"2023-05-26T12:11:45","Actor":"dscheg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9518","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Table in README markdown looks ugly due to word wrap that breaks words\" (#9518) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n1. Table in README markdown looks ugly if some column contains a long text due to word wrap that breaks words in other columns even inside the inline code block. Compare rendered tables: Nuget https://www.nuget.org/packages/GlobRegex vs Github https://github.com/dscheg/GlobRegex\r\nGithub markdown looks good even on narrow screens. CSS to fix issue:\r\n```css\r\n.readme-common .table {\r\n  overflow: auto;\r\n  display: block;\r\n  word-break: normal;\r\n}\r\n```\r\n\r\n2. It might be better to have a horizontal scroll and turn off word wrap inside multiline code blocks, because it seems such code is hard to read, given that there are no line numbers and display of hyphens: it is not always clear whether the EOL is in the code itself or word wraping has been applied. The same example links above. CSS to fix issue: `pre code { white-space: pre; }` instead of `pre code { white-space: pre-wrap; }`\r\n\n\n### Repro Steps\n\nCreate readme for the package with:\r\n1. Table with 3 columns with a long text inside the middle column\r\n2. Multiple long lines inside multiline code block\n\n### Expected Behavior\n\n1. Table looks good even with long text in some column\r\n2. Multiline code blocks are easy to read even with long lines\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/1962268/513789fc-7d62-452b-9a10-e2e6607af536)\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"29605229167","Type":"IssuesEvent","CreatedAt":"2023-06-07T22:40:43","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12642","RelatedDescription":"Opened issue \"PackageSpec.Clone and LibraryDependency.Clone overwrite collections created by their constructors.\" (#12642) at NuGet/Home","RelatedBody":"Both `Clone` methods create a new default object that has collections that get implicitly assigned in the constructors. The `Clone` method then proceeds to overwrite the collections that were just created. We can avoid this to reduce allocations."},{"Id":"29603581766","Type":"IssuesEvent","CreatedAt":"2023-06-07T21:00:19","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12641","RelatedDescription":"Opened issue \"CreateGraphNode has a high number of allocations\" (#12641) at NuGet/Home","RelatedBody":"There are a high number of allocations during calls to `CreateGraphNode`. Finding ways to reduce this will enhance overall performance and responsiveness."},{"Id":"29600803429","Type":"IssuesEvent","CreatedAt":"2023-06-07T18:46:06","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12640","RelatedDescription":"Opened issue \"RestoreOperationLogger.ReportProgressAsync repeatedly requests UI thread time\" (#12640) at NuGet/Home","RelatedBody":"`RestoreOperationLogger.ReportProgressAsync` writes to both the output console and the VS status bar. The current implementation can post messages to the status bar that will immediately be overwritten by subsequent messages. We can mitigate this by only posting the most recent message to the status bar that we know of."},{"Id":"29600163299","Type":"IssuesEvent","CreatedAt":"2023-06-07T18:22:15","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12639","RelatedDescription":"Opened issue \"VirtualFileProvider.GetDirectoryContents Recreates a String\" (#12639) at NuGet/Home","RelatedBody":"VirtualFileProvider splits up files into their respective path components in its constructor:\r\n\r\n        public VirtualFileProvider(List<string> files)\r\n        {\r\n            _files = files.Select(file => file.Split(ForwardSlashChar)).ToList();\r\n        }\r\n\r\nAnd then goes to recreate these exact strings in VirtualFileProvider.GetDirectoryContents via string.Join:\r\n\r\n            foreach (var file in _files)\r\n            {\r\n              ...\r\n              var virtualFile = new VirtualFileInfo(string.Join(ForwardSlash, file));\r\n              contents.Add(virtualFile);\r\n            }\r\n\r\nThis can be avoided by keeping the original string around."},{"Id":"29599618602","Type":"IssuesEvent","CreatedAt":"2023-06-07T18:04:18","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12638","RelatedDescription":"Opened issue \"Avoid repeated Enum.ToString() in PackageSpecWriter.SetDependencies\" (#12638) at NuGet/Home","RelatedBody":"PackageSpecWriter.SetDependencies calls Enum.ToString() on two enum types and multiple fields:\r\n\r\nLibraryDependencyTarget\r\nLibraryIncludeFlags\r\n\r\nThis causes unavoidable stringbuilder allocations to produce the various combinations. Normally this never shows up, however, in NuGut this code path is called a lot and hence it needs to work around this."},{"Id":"29585453755","Type":"IssuesEvent","CreatedAt":"2023-06-07T09:01:16","Actor":"qubicaamf","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12636","RelatedDescription":"Opened issue \"C++\\Cli PackageReference .NET 6+ doesn't restore when executed from command line\" (#12636) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\ndotnet 7.0.302, msbuild 17.6.3.22601, nuget 6.6.0.62\n\n### Worked before?\n\nno / I don't know\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nVisual Studio 17.6.2\r\n\r\nCreate new CLR Class library\r\n\r\nVisual Studio automatically restore vcxproj creating file obj\\project.assets.json\r\n\r\nCompile inside Visual Studio -> SUCCESS\r\n\r\nClose Visual Studio\r\n\r\nOpen Developer Command Prompt for VS 2022\r\n\r\nCD vcxproj folder\r\n\r\nDelete obj folder\r\n\r\nrun \"msbuild t:/restore\" or \"nuget restore\" or \"dotnet restore\" (same issue)\r\n\r\nfile obj\\project.assets.json was not recreated\r\n\r\nrun \"msbuild\" -> Error \"NETSDK1004: Assets file 'C:\\Users\\fmontanari\\source\\repos\\ClassLibraryCli\\ClassLibraryCli\\obj\\project.assets.json' not found.\"\r\n\r\nI'm unable to use C++/CLI vcxproj with PackageReference inside a continuous integration scenario\r\n\r\n![msbuild restore](https://github.com/NuGet/Home/assets/32999837/86270cb4-de19-4ec4-aa05-3f407591619c)\r\n![msbuild error](https://github.com/NuGet/Home/assets/32999837/da324bcc-c7e6-4555-8a58-1bf03d0d68e1)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"29584968772","Type":"IssuesEvent","CreatedAt":"2023-06-07T08:43:42","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12635","RelatedDescription":"Opened issue \"NuGetAudit: Show package graph path\" (#12635) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nWhen NuGetAudit checks transitive packages, and a package with a known vulnerability is found, it's hard to determine why the package has been included. When the transitive package is included because a top level package isn't on the latest version, it's sometimes (often?) preferable to update the direct package reference, rather than introduce the transitive package as a direct reference, especially when the project isn't already using Central Package Management.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"29584075795","Type":"IssuesEvent","CreatedAt":"2023-06-07T08:09:49","Actor":"fluffynuts","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12634","RelatedDescription":"Opened issue \"Error when attempting to push a pre-release package: The package manifest contains an invalid Version\" (#12634) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n7.0.302\n\n### Worked before?\n\nn/a\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI want to release pre-release versions of my packages for NExpect. The version format convention I've used on our internal nuget servers is:\r\n\r\nMAJOR.MINOR.PATCH-TIMESTAMP-SHA\r\n\r\nwhere TIMESTAMP is the date/time of package generation, of the format `yymmddhhMM` and the SHA is the current git commit SHA. These are useful because not only can a consumer see when a package was made (and order by release date/time), but the SHA allows someone to be able to check out the code at that version if they need to debug or make changes.\r\n\r\nBoth nuget.exe and dotnet.exe are quite content to consume these versions - as they should be, searching for code about what version strings are allowed, it looks like the release part must match `[a-zA-Z0-9-]`, but the api doesn't want anything to do with that.\r\n\r\nOf interest is that I see I _can_ use a period, so I'm going to work around the issue for now like that - but it would be nice if the things making the packages and the things consuming the packages all agreed on what are valid package identifiers. Also, nuget package servers other than the official one at nuget.org don't have a problem with dashes in the pre-release version tag.\n\n### Verbose Logs\n\n```shell\n`\"C:\\Program Files\\dotnet\\dotnet.exe\" nuget push packages\\Quackers.TestLogger.1.0.13-2306071004-3a8d691.nupkg --source nuget.org -k <my api key>`\r\n\r\nPushing Quackers.TestLogger.1.0.13-2306071004-3a8d691.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  BadRequest https://www.nuget.org/api/v2/package/ 2227ms\r\nerror: Response status code does not indicate success: 400 (The NuGet package contains an invalid .nuspec file. The error encountered was: 'The package manifest contains an invalid Version: '1.0.13-2306071004-3a8d691''. Correct the error and try again.).\n```\n"},{"Id":"29582096681","Type":"IssuesEvent","CreatedAt":"2023-06-07T06:47:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12590","RelatedDescription":"Closed issue \"NuGetAudit should check direct PackageReferences by default\" (#12590) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\n`NuGetAudit`, that first became available in .NET 8 preview 5, checks all (direct and transitive) packages for known vulnerabilities.\r\n\r\n### Desired Behavior\r\n\r\nAdd a new MSBuild property `<NuGetAuditMode>` with allowed values `direct` and `transitive`.\r\n\r\n* Direct\r\n\r\nCheck packages that are directly referenced by the project. This includes not only `<PackageReference` items in the project file, but any `<PackageReference` that might be in a *Directory.Build.props*, or even any \"implicit\" packages that SDKs and project systems add. Finally, the way that Central Package Management's transitive pinning works is by elevating any transitive package to a direct reference when a pinned version is avaiable, and as a consequence these packages will also be checked for known vulnerabilities.\r\n\r\n* Transitive\r\n\r\nAll NuGet packages in the project's restore graph will be checked for known vulnerabilities, whether those packages are directly referenced by the project, or are transitive packages (dependencies of another package).\r\n\r\n\r\nExample:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <NuGetAudit>true</NuGetAudit>\r\n    <NuGetAuditMode>transitive</NuGetAuditMode>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Protocol\" Version=\"5.11.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n\r\n### Additional Context\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-06-08T03:30:22.468212Z","RunDurationInMilliseconds":997}