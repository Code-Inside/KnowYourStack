{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"41070094339","Type":"PullRequestEvent","CreatedAt":"2024-08-16T02:27:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10135","RelatedDescription":"Opened pull request \"Merge branch dev into main (NuGet.Jobs and ServerCommon merge)\" (#10135) at NuGet/NuGetGallery","RelatedBody":"This brings the NuGet.Jobs and ServerCommon source trees into `main` branch. They have already been merged into `dev` branch as of https://github.com/NuGet/NuGetGallery/pull/10091 and https://github.com/NuGet/NuGetGallery/pull/10109.\r\n\r\nThat's a lot of content to review, so let's focus on the changes NOT including NuGet.Jobs and ServerCommon. I have listed them here with diff links to illustrate how I found them:\r\n\r\n- Changes between the NuGet.Jobs merge and the ServerCommon merge: https://github.com/NuGet/NuGetGallery/compare/d55ed52c78a34c5416ecd6734af8e1aad0d97765...a782405fbacf8ac657caec334aae115273a95d02\r\n  - @clairernovotny\r\n    - https://github.com/NuGet/NuGetGallery/pull/10083\r\n  - @martinrrm\r\n    - https://github.com/NuGet/NuGetGallery/pull/10096\r\n  - @erdembayar\r\n    - https://github.com/NuGet/NuGetGallery/pull/10098\r\n  - @joelverhagen - many (I have verified the changes I want to deploy)\r\n- Changes between ServerCommon merge and latest `dev`: https://github.com/NuGet/NuGetGallery/compare/968432180cad66123c6541ba89b562e0cbb22a8d...666b91d221de95b8ed71d1fbe198d40c6c054a96\r\n   - @Goodyear2017\r\n      - https://github.com/NuGet/NuGetGallery/pull/10103\r\n      - https://github.com/NuGet/NuGetGallery/pull/10105\r\n  - @clairernovotny\r\n      - https://github.com/NuGet/NuGetGallery/pull/10107\r\n      - https://github.com/NuGet/NuGetGallery/pull/10114\r\n      - https://github.com/NuGet/NuGetGallery/pull/10122\r\n      - https://github.com/NuGet/NuGetGallery/pull/10134\r\n  - @joelverhagen - many (I have verified the changes I want to deploy)\r\n\r\nIn other words, these are the changes made to NuGetGallery or post-merge NuGet.Jobs and ServerCommon states.\r\n\r\nThe rollout plan is to deploy the following jobs and services:\r\n- NuGetGallery (web app)\r\n   - @martinrrm, @clairernovotny, and @Goodyear2017 are to verify their changes in INT then PROD.\r\n   - Purpose: dark mode fixes, V2 download URL change, accessibility fixes\r\n- MonitoringProcessor\r\n   - @joelverhagen is to verify his changes in INT then PROD.\r\n   - Purpose: auth for Azure Search cursors\r\n- Catalog2Monitoring\r\n   - @joelverhagen is to verify his changes in INT then PROD.\r\n   - Purpose: auth for Azure Search cursors"},{"Id":"41063248138","Type":"PullRequestEvent","CreatedAt":"2024-08-15T19:47:59","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10134","RelatedDescription":"Merged pull request \"Add client name translation\" (#10134) at NuGet/NuGetGallery","RelatedBody":"This pull request includes significant updates to the `loginterpretation` module, primarily focusing on adding new functionality for client name translation using dataclasses and enhancing test coverage. The most important changes include the introduction of dataclasses for client categories and names, the implementation of client name translation logic, and the addition of unit tests to validate the new functionality.\r\n\r\n### Enhancements to Client Name Translation:\r\n\r\n* [`python/StatsLogParser/loginterpretation/clientnametranslation.py`](diffhunk://#diff-06e97ee9e63716b28eb1e56eddb92fc1661357638c30fd5c3abacfee8bcdadb2R1-R153): Introduced `ClientCategories` and `ClientNames` dataclasses to categorize client names and implemented the `ClientNameTranslation` class with static methods for client name translation logic.\r\n\r\n### Version Update:\r\n\r\n* [`python/StatsLogParser/pyproject.toml`](diffhunk://#diff-ff4027217dcdbffd156d66cb6e7eb2410e07db7cb4d8c9f10614c616b16e9b71L3-R3): Updated the version of the `loginterpretation` module from `0.1.0` to `0.2.0`.\r\n\r\n### Test Coverage:\r\n\r\n* [`python/StatsLogParser/tests/test_clientnametranslation.py`](diffhunk://#diff-b82052d01739ad76a6781ec8a701ebfb5746dd97e46f873189744153cc4f5a02R1-R24): Added unit tests using `pytest` to validate the `ClientNameTranslation` logic, ensuring correct categorization of client names.\r\n\r\n![image](https://github.com/user-attachments/assets/c0f94518-00d2-42cc-94bb-adbf7d5b9c67)\r\n"},{"Id":"41062364161","Type":"PullRequestEvent","CreatedAt":"2024-08-15T19:10:17","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10134","RelatedDescription":"Opened pull request \"Add client name translation\" (#10134) at NuGet/NuGetGallery","RelatedBody":"This pull request includes significant updates to the `loginterpretation` module, primarily focusing on adding new functionality for client name translation using dataclasses and enhancing test coverage. The most important changes include the introduction of dataclasses for client categories and names, the implementation of client name translation logic, and the addition of unit tests to validate the new functionality.\r\n\r\n### Enhancements to Client Name Translation:\r\n\r\n* [`python/StatsLogParser/loginterpretation/clientnametranslation.py`](diffhunk://#diff-06e97ee9e63716b28eb1e56eddb92fc1661357638c30fd5c3abacfee8bcdadb2R1-R153): Introduced `ClientCategories` and `ClientNames` dataclasses to categorize client names and implemented the `ClientNameTranslation` class with static methods for client name translation logic.\r\n\r\n### Version Update:\r\n\r\n* [`python/StatsLogParser/pyproject.toml`](diffhunk://#diff-ff4027217dcdbffd156d66cb6e7eb2410e07db7cb4d8c9f10614c616b16e9b71L3-R3): Updated the version of the `loginterpretation` module from `0.1.0` to `0.2.0`.\r\n\r\n### Test Coverage:\r\n\r\n* [`python/StatsLogParser/tests/test_clientnametranslation.py`](diffhunk://#diff-b82052d01739ad76a6781ec8a701ebfb5746dd97e46f873189744153cc4f5a02R1-R24): Added unit tests using `pytest` to validate the `ClientNameTranslation` logic, ensuring correct categorization of client names."},{"Id":"41062080061","Type":"PullRequestEvent","CreatedAt":"2024-08-15T18:58:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10132","RelatedDescription":"Merged pull request \"Fix NuGetBuildExtensions import, unify props/targets\" (#10132) at NuGet/NuGetGallery","RelatedBody":"When I moved projects from legacy-based .csproj to SDK-based, I lost the `NuGetBuildExtensions` conditional import. This is needed so we can inject custom build logic in when we're building our jobs. This is used for our AppInsights -> metric connector used for heartbeats and such.\r\n\r\nAlso, I merged the `SdkProject.props` file into `Directory.Build.props` and renamed it to `Directory.Build.targets`. This makes our common MSBuild goo come in after the .csproj. I did this for two reasons:\r\n1. Allow use to do conditional things based on contents of the .csproj, e.g. `OutputType` = `EXE`, the import `NuGetBuildExtensions` (today this import is only desired on entry points, not all libraries or tests.\r\n2. The signing imports don't work in legacy .csproj in `Directory.Build.props`. This appears to be because environment variable `NUGET_SNK_PATH` gets set after  `Directory.Build.props`.... this is fixed in SDK-based .csproj but broken NuGetGallery.csproj signing.\r\n\r\nIt's now a lot easier to add a new project. You don't need to remember to put `<Import Project=\"..\\..\\SdkProjects.props\" />` at the top!"},{"Id":"41059437930","Type":"IssuesEvent","CreatedAt":"2024-08-15T17:15:44","Actor":"jaredpar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10133","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Getting too similar name upload error for packages that I own\" (#10133) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI own a [series of packages][github] on nuget.org that match up with .NET target framework monikers. \r\n\r\n- Basic.Reference.Assemblies.Net461\r\n- Basic.Reference.Assemblies.Net60\r\n- Basic.Reference.Assemblies.Net70\r\n- Basic.Reference.Assemblies.Net80\r\n- Basic.Reference.Assemblies.NetStandard20\r\n\r\nThis morning was attempting to release a new package Basic.Reference.Assemblies.Net20. When my action attempted to publish I got the following error:\r\n\r\n> The uploaded package's id is too similar to the already existing packages:\r\n\r\nI doubled checked that I don't have any weird authoring mistakes on my new package (verified in package explorer that it has the ID I was expecting). Yes the difference between existing names is only one character but I already have several versions of the package which have that characteristic. \r\n\r\nTried uploading manually through the gallery and got the same error. When displayed in the gallery though it feels like the error is truncated. The trailing colon makes me think it should be displaying the similar names (maybe I'm off here). \r\n\r\n![image](https://github.com/user-attachments/assets/30b65a49-0376-4489-a8c2-88e00508f89c)\r\n\r\nAt this point though I'm blocked from moving forward on some work in github.com/dotnet/roslyn because we can't upload these new packages for TFMs we want to test. \r\n\r\n[github]: https://github.com/jaredpar/basic-reference-assemblies\n\n### Repro Steps\n\nHave to build the package from https://github.com/jaredpar/basic-reference-assemblies and then attempt to upload and it you will see the error. \n\n### Expected Behavior\n\nI should be able to upload the new package. Yes it is similar to existing names but I'm the package owner for all those packages with similar names. \n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"41059287070","Type":"PullRequestEvent","CreatedAt":"2024-08-15T17:10:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10132","RelatedDescription":"Opened pull request \"Fix NuGetBuildExtensions import, unify props/targets\" (#10132) at NuGet/NuGetGallery","RelatedBody":"When I moved projects from legacy-based .csproj to SDK-based, I lost the `NuGetBuildExtensions` conditional import. This is needed so we can inject custom build logic in when we're building our jobs. This is used for our AppInsights -> metric connector used for heartbeats and such.\r\n\r\nAlso, I merged the `SdkProject.props` file into `Directory.Build.props` and renamed it to `Directory.Build.targets`. This makes our common MSBuild goo come in after the .csproj. I did this for two reasons:\r\n1. Allow use to do conditional things based on contents of the .csproj, e.g. `OutputType` = `EXE`, the import `NuGetBuildExtensions` (today this import is only desired on entry points, not all libraries or tests.\r\n2. The signing imports don't work in legacy .csproj in `Directory.Build.props`. This appears to be because environment variable `NUGET_SNK_PATH` gets set after  `Directory.Build.props`.... this is fixed in SDK-based .csproj but broken NuGetGallery.csproj signing.\r\n\r\nIt's now a lot easier to add a new project. You don't need to remember to put `<Import Project=\"..\\..\\SdkProjects.props\" />` at the top!"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"41067352306","Type":"IssuesEvent","CreatedAt":"2024-08-15T23:10:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13712","RelatedDescription":"Opened issue \"LockFileUtils.CreateLockFileTargetProject allocates a lot\" (#13712) at NuGet/Home","RelatedBody":"CreateLockFileTargetProject allocates a lot due to the fact that it assumes that projects can provide their own assets. \r\nWhile that may be true with project.json iterations, that's not really possible with PackageReference."},{"Id":"41066811067","Type":"IssuesEvent","CreatedAt":"2024-08-15T22:33:58","Actor":"jeffschwMSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13711","RelatedDescription":"Opened issue \"Nuget: Central Directory corrupt\" (#13711) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 9 Preview\n\n### Worked before?\n\nyes\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFull details can be found here https://github.com/dotnet/dnceng/issues/3099\r\n\r\n```\r\n  Restored D:\\a\\_work\\1\\s\\src\\libraries\\externals.csproj (in 1.01 sec).\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error : Central Directory corrupt. [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Compression.ZipArchive.ReadEndOfCentralDirectory() [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Compression.ZipArchive..ctor(Stream stream, ZipArchiveMode mode, Boolean leaveOpen, Encoding entryNameEncoding) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Compression.ZipArchive..ctor(Stream stream, ZipArchiveMode mode, Boolean leaveOpen, Encoding entryNameEncoding) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Compression.ZipArchive..ctor(Stream stream, ZipArchiveMode mode, Boolean leaveOpen) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Packaging.PackageArchiveReader..ctor(Stream stream, Boolean leaveStreamOpen, IFrameworkNameProvider frameworkProvider, IFrameworkCompatibilityProvider compatibilityProvider) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Packaging.PackageArchiveReader..ctor(Stream stream) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Protocol.RemotePackageArchiveDownloader.GetPackageReader() [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode) [D:\\a\\_work\\1\\s\\Build.proj]\r\nD:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error :    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode) [D:\\a\\_work\\1\\s\\Build.proj]\r\n\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"41066793824","Type":"IssuesEvent","CreatedAt":"2024-08-15T22:32:52","Actor":"jeffschwMSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13710","RelatedDescription":"Opened issue \"The \"RestoreTask\" task returned false but did not log an error\" (#13710) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 9 preview\n\n### Worked before?\n\nyes\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFull details in https://github.com/dotnet/dnceng/issues/3100 (including recent builds that are failing)\r\n\r\n```\r\n     2>/__w/1/s/.dotnet/sdk/9.0.100-preview.5.24307.3/NuGet.targets(170,5): error MSB4181: The \"RestoreTask\" task returned false but did not log an error. [/__w/1/s/.packages/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/tools/Tools.proj]\r\n##[error].dotnet/sdk/9.0.100-preview.5.24307.3/NuGet.targets(170,5): error MSB4181: (NETCORE_ENGINEERING_TELEMETRY=Restore) The \"RestoreTask\" task returned false but did not log an error.\r\n     2>Done Building Project \"/__w/1/s/.packages/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/tools/Tools.proj\" (Restore target(s)) -- FAILED.\r\n     1>Done Building Project \"/__w/1/s/.packages/microsoft.dotnet.arcade.sdk/9.0.0-beta.24311.10/tools/Build.proj\" (default targets) -- FAILED.\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"41038151415","Type":"IssuesEvent","CreatedAt":"2024-08-15T00:19:17","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13709","RelatedDescription":"Opened issue \"update dotnet nuget why docs for optional path argument\" (#13709) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-16T03:30:18.7809998Z","RunDurationInMilliseconds":924}