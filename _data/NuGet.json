{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44108548171","Type":"IssuesEvent","CreatedAt":"2024-11-22T18:45:04","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9396","RelatedDescription":"Closed issue \"DNS lookups fail for api.nuget.org using Alpine based dotnet Docker images in AWS us-east-1\" (#9396) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nI'm unable to use api.nuget.org from inside of an Alpine based docker image running in AWS us-east-1.\r\n\r\n### Describe the bug\r\n\r\nWe've found an issue where running an Alpine based dotnet image inside of AWS us-east-1 (e.g running an image on an EC2 instance with Docker) causes DNS lookups to api.nuget.org to fail, breaking many tools that integrate with Nuget. Ive noticed this behaviour affecting builds running in Bitbucket Pipelines (our CI/CD service), and have reproduced similar issues directly on EC2. This happens when using Route53 as the DNS resolver (the default when starting up a new EC2 instance).\r\n\r\nIt appears that the problem is due to Alpine's inability to handle truncated DNS responses. If running `dig` to perform a DNS lookup for api.nuget.org , we notice the `tc` flag set in the response headers, indicating a truncated DNS response. The following was executed from an EC2 instance in us-east-1. We've found truncation does not occur in us-west-2. In the below response. we don't receive any A records for api.nuget.org due to the truncated response. \r\n\r\n```\r\n+ dig +noedns +ignore api.nuget.org\r\n; <<>> DiG 9.18.11 <<>> +noedns +ignore api.nuget.org\r\n;; global options: +cmd\r\n;; Got answer:\r\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 42774\r\n;; flags: qr tc rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 0\r\n;; QUESTION SECTION:\r\n;api.nuget.org.\t\t\tIN\tA\r\n;; ANSWER SECTION:\r\napi.nuget.org.\t\t22\tIN\tCNAME\tnugetapiprod.trafficmanager.net.\r\nnugetapiprod.trafficmanager.net. 22 IN\tCNAME\tapiprod-mscdn.azureedge.net.\r\napiprod-mscdn.azureedge.net. 300 IN\tCNAME\tapiprod-mscdn.afd.azureedge.net.\r\napiprod-mscdn.afd.azureedge.net. 6 IN\tCNAME\tstar-azureedge-prod.trafficmanager.net.\r\nstar-azureedge-prod.trafficmanager.net.\t55 IN CNAME shed.dual-low.part-0012.t-0009.fdv2-t-msedge.net.\r\nshed.dual-low.part-0012.t-0009.fdv2-t-msedge.net. 172 IN CNAME global-entry-afdthirdparty-fallback-first.trafficmanager.net.\r\nglobal-entry-afdthirdparty-fallback-first.trafficmanager.net. 49 IN CNAME shed.dual-low.part-0012.t-0009.fb-t-msedge.net.\r\nshed.dual-low.part-0012.t-0009.fb-t-msedge.net.\t49 IN CNAME part-0012.t-0009.fb-t-msedge.net.\r\n;; Query time: 0 msec\r\n;; SERVER: 10.30.0.2#53(10.30.0.2) (UDP)\r\n;; WHEN: Wed Feb 22 04:13:48 UTC 2023\r\n;; MSG SIZE  rcvd: 366\r\n```\r\n\r\n\r\n\r\nRunning the same query from us-west-2 gives back a correct response with a A record:\r\n\r\n```\r\n; <<>> DiG 9.18.11 <<>> +noedns +ignore api.nuget.org\r\n;; global options: +cmd\r\n;; Got answer:\r\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 44616\r\n;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 0\r\n;; QUESTION SECTION:\r\n;api.nuget.org.\t\t\tIN\tA\r\n;; ANSWER SECTION:\r\napi.nuget.org.\t\t179\tIN\tCNAME\tnugetapiprod.trafficmanager.net.\r\nnugetapiprod.trafficmanager.net. 179 IN\tCNAME\tapiprod-mscdn.azureedge.net.\r\napiprod-mscdn.azureedge.net. 300 IN\tCNAME\tapiprod-mscdn.afd.azureedge.net.\r\napiprod-mscdn.afd.azureedge.net. 30 IN\tCNAME\tstar-azureedge-prod.trafficmanager.net.\r\nstar-azureedge-prod.trafficmanager.net.\t10 IN CNAME shed.dual-low.part-0012.t-0009.fdv2-t-msedge.net.\r\nshed.dual-low.part-0012.t-0009.fdv2-t-msedge.net. 30 IN\tCNAME part-0012.t-0009.fdv2-t-msedge.net.\r\npart-0012.t-0009.fdv2-t-msedge.net. 42 IN A\t13.107.238.40\r\npart-0012.t-0009.fdv2-t-msedge.net. 42 IN A\t13.107.237.40\r\n;; Query time: 0 msec\r\n;; SERVER: 10.30.0.2#53(10.30.0.2) (UDP)\r\n;; WHEN: Wed Feb 22 04:24:17 UTC 2023\r\n;; MSG SIZE  rcvd: 356\r\n```\r\n\r\nThis prevents the use of Alpine based docker images running in us-east-1 and using Route53 for DNS services from communicating with nuget. Swapping to an alternative DNS provider such as Cloudflare at 1.1.1.1 or hardcoding api.nuget.org in /etc/hosts resolves the problem. It's unclear if this is a problem with AWS, nuget, or a combination of the two.\r\n\r\nMaybe something has changed causing the nuget DNS query responses to increase in size, breaking Alpine? Comparing the above responses from a DNS lookup in us-east-1 vs us-west-2, we see in us-east-1 that there are several additional CNAME entries. Alpine truncates DNS responses that exceed 512 bytes in size (see https://christoph.luppri.ch/fixing-dns-resolution-for-ruby-on-alpine-linux). In this case, we are unable to use any dotnet alpine image to talk to nuget from AWS in us-east-1.\r\n\r\n\r\n\r\n### Repro Steps\r\n\r\nSteps to reproduce:\r\n- launch an EC2 instance with Docker installed into AWS us-east-1 region\r\n- start up any alpine image on the instance\r\n- Run`wget api.nuget.org`\r\n- Observe that hostname resolution fails.\r\n\r\n\r\n### Expected Behavior\r\n\r\nWe can successfully call api.nuget.org (however it will fail with a http 4xx response without appropriate credentials and path).\r\n\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### Additional Context and logs\r\n\r\nWe've detected this issue inside of Bitbucket Pipelines, and can reproduce this directly on EC2 instances across unrelated AWS accounts where Route53 is used as a DNS resolver."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44130359568","Type":"IssuesEvent","CreatedAt":"2024-11-24T00:46:38","Actor":"bruno-garcia","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13957","RelatedDescription":"Opened issue \"\"double forward slashes in path\" when uploading package\" (#13957) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nHappens on nuget.org\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWhen trying to [upload Sentry's .NET SDK](https://github.com/getsentry/publish/issues/4649#issuecomment-2495715247), 1 package fails NuGet validation. \r\n\r\nValidation fails via the CLI as well as via nuget.org\r\n\r\n<img width=\"1186\" alt=\"image\" src=\"https://github.com/user-attachments/assets/97d6554d-25bf-45b9-be85-4dff098e8e83\">\r\n\r\nI'm hitting this: https://github.com/NuGet/NuGetGallery/blob/0ec99618043ae7f7e54a3ed8fdbbb47acc5e30b1/src/NuGetGallery/Controllers/ApiController.cs#L567\r\n\r\nBut what's confusing to me is that the file that supposedly has double backslash is:\r\n\r\n```\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <ProguardConfiguration Include=\"$(MSBuildThisFileDirectory)..\\..\\proguard.cfg\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n\r\nThe difference is that we're packing with .NET 9 SDK on this release, instead of .NET 8.\r\n\r\nWhen I see a package that worked ([Sentry.Bindings.Android.4.12.1-segv1.zip](https://github.com/user-attachments/files/17888005/Sentry.Bindings.Android.4.12.1-segv1.zip)\r\n), built with .NET 8, the output has:\r\n<img width=\"288\" alt=\"image\" src=\"https://github.com/user-attachments/assets/bc3271b7-b64c-4886-9d67-23fc34be8f13\">\r\n\r\nvs the new one, .NET 9 which fails to upload ( [Sentry.Bindings.Android.5.0.0-alpha.0.zip](https://github.com/user-attachments/files/17887431/Sentry.Bindings.Android.5.0.0-alpha.0.zip)):\r\n\r\n<img width=\"265\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b9a2d08a-a951-42e5-891d-d5b35c76a5fc\">\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44108452379","Type":"IssuesEvent","CreatedAt":"2024-11-22T18:41:43","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13944","RelatedDescription":"Closed issue \"Document that `dotnet nuget why` graphs RID specific packages\" (#13944) at NuGet/Home","RelatedBody":"Document that `dotnet nuget why` graphs RID specific packages as well as RIDless packages."},{"Id":"44107161853","Type":"IssuesEvent","CreatedAt":"2024-11-22T17:53:32","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13718","RelatedDescription":"Closed issue \"dotnet nuget why should check RID specific packages\" (#13718) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nAdd any package which eventually adds `System.Runtime` as a depenedncy. For example, `System.Collections.Specialized`. Restore will warn you about `System.Private.Uri` having a known vulnerability (when NuGetAuditMode is set to `all`, which is default from .NET 9).  However, `dotnet nuget why my.csproj System.Private.Uri` will tell you that the package is not used by the project\n\n### Desired Behavior\n\n`dotnet nuget why` should tell me why this package is being restored.\n\n### Additional Context\n\nLooking at the assets file, the package is being included due to RID-specific (Runtime IDentifier) dependencies. Therefore, `dotnet nuget why` appears to be looking only at the \"RIDless\" package graph in the assets file."},{"Id":"44084498364","Type":"IssuesEvent","CreatedAt":"2024-11-22T05:56:05","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13956","RelatedDescription":"Opened issue \"Show the full hierarchy of a transitive package in PM UI\" (#13956) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nFrom: https://developercommunity.visualstudio.com/t/SystemTextEncodingWeb-450-being-ref/10789296\r\n\r\n\"The hover is OK. I wasn’t aware that it existed, though. However, this is still not enough information. It would be very nice if the full hierarchy of using packages showed somewhere on the right pane.\"\n\n### Additional Context and Details\n\n_No response_"},{"Id":"44075778264","Type":"IssuesEvent","CreatedAt":"2024-11-21T22:09:49","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13935","RelatedDescription":"Closed issue \"How to avoid package version dependency from project\" (#13935) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#10941**\r\n- Please respond to @Ajith-GS.\r\n\r\n---\r\n\r\n_From @Ajith-GS on Thursday, November 7, 2024 10:21:32 AM_\r\n\r\n1.\t**Background**\nWe have a requirement to avoid package version dependency from a WinUI3 CppWinRT project. In CSharp projects NuGet package for multiple projects can be accessed from a single location using NuGet's central package management (CPM) features. But in CppWinRT project this is not working as expected because package.config file is version dependent.\n2.\t**Issue**\nIn WinUI3 CppWinRT application we can only update package versions manually using Manage NuGet Packages. In CppWinRT projects, using Central Package Management version dependencies in project file can be removed but version dependency from package.config cannot be removed.\n3.\t**Method** **tried**\n Using Central Package Management\n•\tPackage and its version information’s are present in project and package.config file. We tried Central Package Management to centrally manage package dependencies in project. Using Central Package Management version dependency from project file is removed but again issue occurred as version dependency from package.config cannot be removed.\n•\tInstead of removing versions from package.config we tried to copy updated packages.config to root folder in prebuild events but this also failed as NuGet restore operations occurs before prebuild events.\n4.\t**Query**\nIs there a method to make package.config version independent or update the versions in package.config automatically.\n\n5.\t**Testing Environment**\n•\tWindows OS version\t: 22H2\n•\tOS Build\t\t\t: 19045.5011\n•\tVisual Studio Version\t: VS 2022,17.4.4\n\nSample application is attached:\n[SampleApp.zip](https://github.com/user-attachments/files/17659889/SampleApp.zip)\n"},{"Id":"44075343115","Type":"IssuesEvent","CreatedAt":"2024-11-21T21:51:36","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13955","RelatedDescription":"Opened issue \"Add support for add/update/delete auditsources in Visual Studio options UI\" (#13955) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nThe NuGet Package Manager in Visual Studio allows you to add/update/delete package sources for your nuget.config directly in the options dialog:\r\n![image](https://github.com/user-attachments/assets/ad315a47-39d3-4dea-80b5-789015f13cbc)\r\n\r\nWhat is absent from this UI is the ability to manage auditsources. For more info on auditsources, see: https://learn.microsoft.com/en-us/nuget/concepts/auditing-packages#audit-sources.\r\n\r\nOnce support is added for audit sources in the NuGet Package Manager (with this issue: https://github.com/NuGet/Home/issues/13954), it would be great if they can be managed in Visual Studio much like package sources can be.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"44074936863","Type":"IssuesEvent","CreatedAt":"2024-11-21T21:35:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13954","RelatedDescription":"Opened issue \"AuditSources support in the Package Manager UI\" (#13954) at NuGet/Home","RelatedBody":"Repos that don't use nuget.org directly, can define an auditSource to be used for NuGetAudit at restore time. \r\nSee audit sources: https://learn.microsoft.com/en-us/nuget/concepts/auditing-packages#audit-sources. \r\n\r\nAn example is the NuGet.Client repo, https://github.com/NuGet/NuGet.Client/blob/dev/NuGet.Config\r\n\r\n![image](https://github.com/user-attachments/assets/29e4d990-b95a-4c65-b3d8-153ade125f84)\r\n\r\nThe solution explorer and error list are restore based and use audit sources, but the PM UI has it's own logic. \r\n\r\nThis issue tracks making PM UI support audit sources the exact same way restore does. "},{"Id":"44073680004","Type":"IssuesEvent","CreatedAt":"2024-11-21T20:49:56","Actor":"kuskitkd","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13953","RelatedDescription":"Opened issue \".NET Designer and NuGet packages for UI: Problems with IncludeAssets/ExcludeAssets/PrivateAssets\" (#13953) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS2022 17.12.178.10385\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI am switching the support of our UI libraries/apps from using NETFramework 4.7.2 + NET 8 Windows to using only NET 8 Windows as part of the migration process to the latest .NET.  \r\n\r\nThe UI uses third party libraries (DevExpress WinForms). To prevent copying of the DevExpress dlls to the output folder, those packages were originally configured as ExcludeAssets=runtime. This was done because the dlls end up being pulled into a different folder in the output tree through another project and this library is enhancing that one. The whole application is published later on via ClickOnce, so there cannot be duplicates anywhere on the folder published.\r\n\r\nWhen having both frameworks, the designer run as for Framework and everything was OK. When having only NET 8 Windows, the designer seems to need to consume the content of the lib folder for all DevExpress packages or the in-place designer in VisualStudio does not work. So ExcludeAssets=runtime does not work anymore. After removing that, the designer works but dlls start appearing in folders where they should not be (and causing ClickOnce issues). \r\n\r\nI tested several combinations of asset configurations, just in case the tag or the asset was being used wrong, but there does not seem to be a way to have the contents in the lib folder used for the designer but not copy them out to the output folder.\r\n\r\nCombinations tested:\r\nIncludeAssets: (default); PrivateAssets: (default), ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: (default); PrivateAssets: (default), ExcludeAssets: runtime -> Dlls not copied, Designer does not works\r\nIncludeAssets: (default); PrivateAssets: runtime, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: (default); PrivateAssets: all, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: compile; PrivateAssets: all, ExcludeAssets: (default) -> Dlls not copied, Designer doesn't work\r\nIncludeAssets: compile;runtime; PrivateAssets: all, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: compile;runtime; PrivateAssets: all, ExcludeAssets: runtime -> Dlls not copied, Designer doesn't work\r\n\r\nFor reference, the nupkg for the  NuGet packages referenced looks as follows:\r\n![image](https://github.com/user-attachments/assets/3dfcf3d5-a941-4e05-81cf-f0f86763f010)\r\n\r\nAnd the DesignToolsError\r\n![image](https://github.com/user-attachments/assets/6cfaabe7-3e04-4fcc-b99f-aca4a41cfe32)\r\n\r\nOpening the report here, as it's not clear if the issue is the NuGet package assets configuration or if it's how VS and the .NET designer use them.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44068002776","Type":"IssuesEvent","CreatedAt":"2024-11-21T17:42:03","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13952","RelatedDescription":"Closed issue \"Targeting Net8.0 within an Azure Functions project causes NuGet to restore old vulnerable packages\" (#13952) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI, Visual Studio Package Manager Console\r\n\r\n### Product Version\r\n\r\nVisual Studio 17.12\r\n\r\n### Worked before?\r\n\r\nNo. Version 17.11.6 did not work either\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\n**Steps to Reproduce**  \r\n\r\n1. Open Visual Studio, choose to create a new project\r\n2. Search for `Azure Functions`, choose it and click Next\r\n3. In the Additional Information window, choose `.NET 8.0 Isolated (Long Term Support)` and `Durable Functions Orchestration`\r\n4. Click Create\r\n5. Double-click the csproj file quickly and see that nuget restore adds a new package to the XML in a few seconds. The package is called `Microsoft.Azure.Functions.Worker.Extensions.DurableTask`. I am not sure if this is relevant, but I wanted to point it out.\r\n6. Within File Explorer in  Windows, look inside your .nuget packages newtonsoft folder. i.e.  `C:\\Users\\username\\.nuget\\packages\\newtonsoft.json`. You will notice that NuGet downloaded version `13.0.1`\r\n7. Build your project and then look at File Explorer and notice NuGet downloads versions `9.0.1`, `10.0.1`, `10.0.2`, `11.0.2`\r\n8. Delete ALL versions/folders from `C:\\Users\\username\\.nuget\\packages\\newtonsoft.json`. The folder should now be empty.\r\n9. Add this XML to your .csproj: `<PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />`\r\n10. Adding the XML above should force NuGet to download ONLY 13.0.3, for any and all transitive dependencies. \r\n11. Rebuild the project and notice that it does not download only 13.0.3. It incorrectly downloads all prior versions again.\r\n\r\n_**Workarounds**_  \r\nThere are no known workarounds\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-24T03:30:21.9257823Z","RunDurationInMilliseconds":963}