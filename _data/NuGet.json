{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43372466342","Type":"PullRequestEvent","CreatedAt":"2024-10-31T00:36:30","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10239","RelatedDescription":"Merged pull request \"Migrate GithubVulnerabilities2V3 to MSI\" (#10239) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5660\r\n\r\nThe job now uses MSIs to authenticate to blob storage."},{"Id":"43358802616","Type":"IssuesEvent","CreatedAt":"2024-10-30T16:01:37","Actor":"OliaG","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10244","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Typo: missing spaces on Contact page\" (#10244) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nOn the https://www.nuget.org/policies/Contact page there are missing spaces before and after \"Sign in\" text:\r\n![image](https://github.com/user-attachments/assets/de387309-0cbb-4890-bc0b-f1c6aad7c48b)\r\n\r\nAlso, should \"Support\" start with a capital?\n\n### Repro Steps\n\nNavigate to https://www.nuget.org/policies/Contact page.\n\n### Expected Behavior\n\nShould be: \"The above doesn't help? Sign in to contact Support.\"\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"43357057150","Type":"PullRequestEvent","CreatedAt":"2024-10-30T15:18:37","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10243","RelatedDescription":"Merged pull request \"Package deprecation should be case insensitive on version\" (#10243) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/10242"},{"Id":"43353181356","Type":"PullRequestEvent","CreatedAt":"2024-10-30T13:48:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10243","RelatedDescription":"Opened pull request \"Package deprecation should be case insensitive on version\" (#10243) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/10242"},{"Id":"43352686871","Type":"IssuesEvent","CreatedAt":"2024-10-30T13:35:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10242","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Deprecation API is case sensitive on package version\" (#10242) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nThis was found when helping the Azure SDK team with a bug.\r\n\r\nIf the version included in the deprecation API request does not match the original version casing (e.g. `1.0.0-rc1` instead of `1.0.0-RC1`) the request fails with a 404.\n\n### Repro Steps\n\n1. Upload a package with version `1.0.0-RC1` version\r\n2. Deprecate it via API using this request body:\r\n\r\n```json\r\n{\r\n  \"versions\": [\r\n    \"1.0.0-rc1\"\r\n  ],\r\n  \"isLegacy\": \"true\"\r\n}\r\n```\r\n\r\n\n\n### Expected Behavior\n\nThis should succeed. Instead it returns 404.\r\n\r\n```\r\nPUT /api/v2/package/MyPackage/deprecations HTTP/1.1\r\nAccept: application/json, */*;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nContent-Length: 27\r\nContent-Type: application/json\r\nHost: localhost\r\nUser-Agent: HTTPie/3.2.3\r\nX-NuGet-ApiKey: API_KEY\r\n\r\n{\r\n    \"versions\": [\r\n        \"2.6.0-rc1\"\r\n    ]\r\n}\r\n\r\n\r\nHTTP/1.1 404 At least one version of package 'MyPackage' specified could not be found.\r\nCache-Control: private, s-maxage=0\r\nContent-Length: 90\r\nContent-Security-Policy: frame-ancestors 'none'\r\nContent-Type: text/html; charset=utf-8\r\nDate: Wed, 30 Oct 2024 13:35:00 GMT\r\nServer: Microsoft-IIS/10.0\r\nStrict-Transport-Security: max-age=31536000; includeSubDomains\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: deny\r\nX-XSS-Protection: 1; mode=block\r\n\r\nAt least one version of package 'MyPackage' specified could not be found.\r\n```\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"43341439484","Type":"IssuesEvent","CreatedAt":"2024-10-30T08:13:04","Actor":"zigzag312","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10241","RelatedDescription":"Opened issue \"[Feature]: Filter by \"Last Updated\"\" (#10241) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nWhen searching for packages and sorting by relevance or downloads, unmaintained / deprecated packages that used to be popular are often shown. \r\n\r\nAnd sorting by last updated date shows too many new, untested packages. \n\n### The Elevator Pitch\n\nAbility to show only packages that were last updated in x past year(s), to filter out unmaintained / deprecated packages.\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43408395614","Type":"IssuesEvent","CreatedAt":"2024-11-01T00:48:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13903","RelatedDescription":"Opened issue \"nuget.config docs should make it clear protocolVersion is only for http sources\" (#13903) at NuGet/Home","RelatedBody":"See https://developercommunity.visualstudio.com/t/Visual-Studio-2022-throws-exception-NU1/10778056"},{"Id":"43408360738","Type":"IssuesEvent","CreatedAt":"2024-11-01T00:46:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13902","RelatedDescription":"Opened issue \"warn when protocolVersion used with local source\" (#13902) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nIn NuGet.Config files, `packageSources` can have `protocolVersion` attributes. However, this is only intended for HTTP feeds. There's no warning when used on local sources, despite it potentially causing issues (see https://github.com/NuGet/Home/issues/13901).\n\n### Desired Behavior\n\nThere should be a warning somewhere if `protocolVersion` is used on a local source\n\n### Additional Context\n\nsee https://developercommunity.visualstudio.com/t/Visual-Studio-2022-throws-exception-NU1/10778056"},{"Id":"43408126184","Type":"IssuesEvent","CreatedAt":"2024-11-01T00:31:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13901","RelatedDescription":"Opened issue \"Restore with local source and protocolVersion=3 causes NU1900 warnings\" (#13901) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, Visual Studio Package Management UI\n\n### Product Version\n\nNuGet 6.11\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nHave a local source added where `protocolVersion=\"3\"` is also specified. For example, `<add key=\"local\" value=\"nupkgs\" protocolVersion=\"3\" />`.\r\n\r\nRestore will result in a bunch of NU1900 warnings:\r\n\r\n> Warnung (active) - NU1900 - Error occurred while getting package vulnerability data: Object reference not set to an instance of an object.\r\n\r\n\n\n### Verbose Logs\n\n```shell\nOriginally reported in VS' Developer Community: https://developercommunity.visualstudio.com/t/Visual-Studio-2022-throws-exception-NU1/10778056\n```\n"},{"Id":"43404828834","Type":"IssuesEvent","CreatedAt":"2024-10-31T21:19:47","Actor":"DmitryLukyanov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13899","RelatedDescription":"Opened issue \"Creating a package for non sdk project with IncludeReferencedProject gives System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\" (#13899) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.9.1.3\n\n### Worked before?\n\nyes, few months ago\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nCommand that I run:\r\n\r\n>nuget pack \"project.csproj\"  -SolutionDirectory \"Solution\" -PackagesDirectory \"Solution/packages\"  -IncludeReferencedProjects -OutputDirectory artifacts -Verbosity detailed -Properties Configuration=Debug\r\n\r\nthe project has references on other nugets as well as on the projects. In some cases I see the output like:\r\n\r\n>Found packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nThe given key was not present in the dictionary.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessDependencies(PackageBuilder builder)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nThis command worked few months ago. Also it works if I remove the option `IncludeReferencedProjects`. Any ideas how can it be fixed?\n\n### Verbose Logs\n\n```shell\nNuGet Version: 6.9.1.3\r\nAttempting to build package from 'project.csproj'.\r\nMSBuild auto-detection: using msbuild version '17.11.9.46202' from 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nPacking files from 'Solution\\Project\\bin\\Debug'.\r\nAdd file 'Solution\\Project\\bin\\Debug\\Project.dll' to package as 'lib\\net452\\Project.dll'\r\nWARNING: NU5118: File 'Solution\\DependencyProject\\Images\\loaderbar.gif' is not added because the package already contains file 'content\\Images\\loaderbar.gif'\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nFound packages.config. Using packages listed as dependencies\r\nThe given key was not present in the dictionary.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at NuGet.CommandLine.ProjectFactory.ProcessDependencies(PackageBuilder builder)\r\n   at NuGet.CommandLine.ProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"43403805134","Type":"IssuesEvent","CreatedAt":"2024-10-31T20:36:56","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12253","RelatedDescription":"Closed issue \"Satellite assemblies for three-letter languages are not copied from NuGet package\" (#12253) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Satellite-assemblies-for-three-letter-la/10203830)._\r\n\r\n---\r\nSatellite assemblies for cultures with three-letter language codes, like “sma-NO” with “Sami, Southern (Norway)” provided in an NuGet package are not copied to the build output directory as two-letter language code cultures as “nb-NO” with “Norwegian Bokmål (Norway)” are. The three-letter language code satellite assembly is included in the NuGet package, and is located in the expected “sma-NO” subdirectory, next to two-letter language code satellite assemblies:\r\n\r\n.nuget\\packages\\package.name\\1.1.8\\lib\\netstandard2.0\r\n\r\nWhen referencing projects within the same solution, without the use of a NuGet package, three-letter language code satellite assemblies are copied to the output directory as expected.\r\n\r\nThis issue has been observed over time with VS 17.3.x and is still not working with 17.4.1.\r\n\r\n---\r\n\r\nI can repro this issue.\r\n![image](https://user-images.githubusercontent.com/8766776/202533872-8bfbacc6-3cef-4cbf-9ede-022cdbfe7e2d.png)\r\n![image](https://user-images.githubusercontent.com/8766776/202534212-7748897b-235e-42b7-b88c-10187fbb0179.png)\r\n\r\nSee original VSissue for repro steps and code."},{"Id":"43401938708","Type":"IssuesEvent","CreatedAt":"2024-10-31T19:26:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13587","RelatedDescription":"Closed issue \"Service 6.10 with CPM fix\" (#13587) at NuGet/Home","RelatedBody":"We're considering servicing Visual Studio 17.10 with https://github.com/NuGet/NuGet.Client/pull/5866 which fixes an unintentional breaking change in CPM for users that were selectively enabling the feature on a per-project basis."},{"Id":"43400316874","Type":"IssuesEvent","CreatedAt":"2024-10-31T18:27:33","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13880","RelatedDescription":"Closed issue \"Spacing adjustments in Details Pane Tabs\" (#13880) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.13 Preview 1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nI reviewed the Details Pane Tabs with the UX Board and they had some spacing adjustment suggestions:\r\n\r\n1. Increase spacing between tab headers and the horizontal bar.\r\n2. Reduce blank lines in the text explaining that there's no README for the current package.\n\n### Verbose Logs\n\n_No response_"},{"Id":"43399110734","Type":"IssuesEvent","CreatedAt":"2024-10-31T17:46:23","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13898","RelatedDescription":"Opened issue \" Simplify `CacheFile.LogMessages` by Removing Unnecessary `IAssetsLogMessage` Interface\" (#13898) at NuGet/Home","RelatedBody":"**Problem:**  \r\n`CacheFile.LogMessages` currently uses `IList<IAssetsLogMessage>`, adding unnecessary complexity for a data-only structure. Since `AssetsLogMessage` is a Data Transfer Object (DTO) meant purely for data transfer without polymorphic behavior, the `IAssetsLogMessage` interface introduces abstraction that provides no real benefit. This complicates serialization, requiring custom converters and adding maintenance overhead.\r\n\r\n**Solution:**  \r\nRefactor `CacheFile.LogMessages` to use `IList<AssetsLogMessage>` directly, removing the `IAssetsLogMessage` interface. "},{"Id":"43383667068","Type":"IssuesEvent","CreatedAt":"2024-10-31T10:03:51","Actor":"AskmethatFR","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13897","RelatedDescription":"Opened issue \"error NU1301: 92 / 5 000 Unable to load service index for source https://api.nuget.org/v3/index.json\" (#13897) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.0-rc.2.24473.5\n\n### Worked before?\n\nYes, Worked with 8.0.0 and 9.0.0-rc1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nUnable to run any command that need to connect to internet ( dotnet restore, dotnet workload update, dotnet tool install ).\r\n\r\nThese command run to the timeout. \r\nThe dotnet command are unable to get the result of : https://api.nuget.org/v3/index.json\r\n\r\nOFC this url works on my browser and from curl command.****\n\n### Verbose Logs\n\n```shell\ndotnet tool install --global dotnet-ef -v=diagnostic\r\n\r\nUnhandled exception: NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load service index for source https://api.nuget.org/v3/index.json.\r\n---> System.TimeoutException: The HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\nat NuGet.Protocol.TimeoutUtility.StartWithTimeout[T](Func`2 getTask, TimeSpan timeout, String timeoutMessage, CancellationToken token) at NuGet.Protocol.HttpRetryHandler.SendAsync(HttpRetryHandlerRequest request, String source, ILogger log, CancellationToken cancellationToken) at NuGet.Protocol.HttpSource.GetThrottle dResponse(Func`1 requestFactory, TimeSpan requestTimeout, TimeSpan downloadTimeout, Int32 maxTries, Boolean isRetry, Boolean isLastAttempt, Guid sessionId, ILogger log, CancellationToken cancellationToken) at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext() --- End of stack trace from previous location --- at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) at NuGet.Protocol.HttpSource.GetAsy nc[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token) at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) --- End of inner exception stack trace --- at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResource V3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) at NuGet.Protocol.PackageMetadataResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetPackageMetadataAsync(PackageSource source, String packageIdentifier, Boolean includePrerelease, Boolean includeUnlisted, CancellationToken cancellationToken) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetMatchingVersionInternalAsync(String packageIdentifier, IEnumerable`1 packageSources, VersionRange versionRange, CancellationToken cancellationToken) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetBestPackageVersionAsync(PackageId packageId, VersionRange versionRange, PackageSourceLocation packageSourceLocation) at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.<>c__DisplayClass8_0.<InstallPackage>b__0() at Microsoft.DotNet.Cli.TransactionalAction.Run[T](Func`1 action, Action commit, Action rollback) at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.<>c__DisplayClass22_0.<ExecuteInstallCommand>b__1() at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.RunWithHandlingInstallError(Action installAction, PackageId packageId) at Microsoft.Do tNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.ExecuteInstallCommand(PackageId packageId) at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.Execute() at Microsoft.DotNet.Tools.Tool.Install.ToolInstallCommand.Execute() at System.CommandLine.Invocation .InvocationPipeline.Invoke(ParseResult parseResult) at System.CommandLine.ParseResult.Invoke() at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, TimeSpan startupTime, ITelemetry telemetryClient)\r\n\r\n\r\ndotnet restore\r\n\r\n  /home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Secondaries/Askmethat.SmartRecipe.RecipeContext.Write.Secondaries.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/Application/Askmethat.SmartRecipe.Api/Askmethat.SmartRecipe.Api.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Read/Askmethat.SmartRecipe.RecipeContext.Read.Adapters/Askmethat.SmartRecipe.RecipeContext.Read.Adapters.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Primaries/Askmethat.SmartRecipe.RecipeContext.Write.Primaries.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Hexagon/Askmethat.SmartRecipe.RecipeContext.Write.Hexagon.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Read/Askmethat.SmartRecipe.RecipeContext.Read.Tests/Askmethat.SmartRecipe.RecipeContext.Read.Tests.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Tests/Askmethat.SmartRecipe.RecipeContext.Write.Tests.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n\r\nRestore failed with 7 error(s) in 2458.7s\n```\n"},{"Id":"43382262793","Type":"IssuesEvent","CreatedAt":"2024-10-31T09:17:52","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13896","RelatedDescription":"Opened issue \"[Bug Bash] An error occurred when reloading project according to warning tips after installing “Fsharp.Net.SDk” package for “F# Console Application (.NET framework)” project\" (#13896) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.50\n\n### Worked before?\n\nIt is not a regression since it also reproes on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 and D17.12.5\\35424.85 with implicit NuGet Client 6.12.0.129. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\n1. The repro rate is 100%.  \r\n\r\n2. The package was installed successfully on step 4. \r\n\r\n3. An additional error was showing on the top of VS after step 4 on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 as the screenshot below. \r\n![image](https://github.com/user-attachments/assets/b147b584-9a7f-409f-818e-15c8d76e4036)\r\n\r\n#### Repro Steps:    \r\n\r\n1. Create a “F# Console Application (.NET framework)” project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.    \r\n\r\n3. Click “Browse” tab and select “nuget.org” from Package source drop-down list. \r\n\r\n4. Search 'FSharp.NET.Sdk ' package in the filter of “Browse” tab and click the ‘Install’ button on the right panel.  \r\n\r\n5. An error “MSB4057: The target \"CollectNuGetAuditSuppressions\" does not exist in the project.” occur in error list window. \r\n\r\n6. Observe the top of VS and click the “Reload Projects” button. \r\n\r\n  \r\n\r\n#### Expected:    \r\n\r\nThe project was reloaded successfully. \r\n\r\n#### Actual:    \r\n\r\n An error “The project file cannot be opened by the project system, because it is missing some critical imports or the referenced SDK cannot be found.” occurred when reloading project as below screenshot. It makes the solution fail to use. \r\n![fsharp net sdk_firstInstall](https://github.com/user-attachments/assets/972e205a-9eb1-4526-9710-ba3bbed9558a)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"43371356559","Type":"IssuesEvent","CreatedAt":"2024-10-30T23:26:18","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13895","RelatedDescription":"Opened issue \"Deploying an experimental instance in 17.12 results in a compatibility version error on STJ\" (#13895) at NuGet/Home","RelatedBody":"Since VS 17.13 upgraded System.Text.Json (STJ) to 8.0.5 if you deploy an experimental instance using latest NuGet.Client code in 17.12 (and I believe older) you will have an error when opening the PM UI, looking at the error message I see that it's unable to get 8.0.5 STJ.\r\n\r\nI believe that we need to update our dependencies to use 8.0.4 if the VS build version is older than 17.13\r\n\r\n\r\n\r\n![image](https://github.com/user-attachments/assets/f7186802-e002-461b-86b7-af82f6b5425a)\r\n"},{"Id":"43342578890","Type":"IssuesEvent","CreatedAt":"2024-10-30T08:51:36","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13892","RelatedDescription":"Opened issue \"There is no PM UI horizontal scroll when the width is not enough to display all controls\" (#13892) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.46\n\n### Worked before?\n\nDev\\6.13.0.45\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.46\r\nVS Version: Main\\35429.116\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:\r\n1.\tRepro rate: 100%\r\n2.\tIt starts to repro from NuGet Client Dev\\6.13.0.46, doesn’t repro on NuGet Client Dev\\6.13.0.45.\r\n\r\n#### Repro Steps: \r\n1. Create a new C# Console App (.NET Core 9.0) project in VS and open it in full-screen VS Internal Preview.  \r\n2. Click menu “Tools -> NuGet Package Manager -> Manage NuGet Packages for Solution”.  \r\n3. Start shrinking width of VS Internal Preview window and observe the bottom of the PM UI.\r\n#### Expected Result:\r\nThere should be PM UI horizontal scroll when the width is not enough to display all controls.\r\n\r\n#### Actual Result:\r\nThere is no PM UI horizontal scroll when the width is not enough to display all controls as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/d89a5d20-166f-46ef-aa9b-9db970bcac3f)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"43331261686","Type":"IssuesEvent","CreatedAt":"2024-10-29T23:39:49","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13891","RelatedDescription":"Closed issue \"Deprecate SHA-1 fingerprints usage in NuGet Sign commands in favor of SHA-2 family fingerprints (nuget.exe sign, dotnet sign)\" (#13891) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently, the `dotnet nuget sign` and `nuget.exe sign` commands rely on the SHA-1 fingerprint of a certificate to locate it within the local certificate store. This method does not comply with Security Development Lifecycle (SDL) requirements, as SHA-1 is considered insecure for certificate thumbprints.\n\n### Desired Behavior\n\nModify the `dotnet nuget sign` and `nuget.exe sign` commands to accept fingerprints from the SHA-2 family (SHA256, SHA384, or SHA512) instead of SHA-1. If a SHA-1 fingerprint is passed, the commands should raise a warning indicating that SHA-1 is insecure. This warning may eventually escalate to an error around the .NET 10 timeframe to enforce stronger security standards. This approach will enhance security by ensuring that only strong, approved hash algorithms are used in NuGet sign commands.\n\n### Additional Context\n\n_No response_"},{"Id":"43331259094","Type":"IssuesEvent","CreatedAt":"2024-10-29T23:39:39","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13891","RelatedDescription":"Opened issue \"Deprecate SHA-1 fingerprints usage in NuGet Sign commands in favor of SHA-2 family fingerprints (nuget.exe sign, dotnet sign)\" (#13891) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently, the `dotnet nuget sign` and `nuget.exe sign` commands rely on the SHA-1 fingerprint of a certificate to locate it within the local certificate store. This method does not comply with Security Development Lifecycle (SDL) requirements, as SHA-1 is considered insecure for certificate thumbprints.\n\n### Desired Behavior\n\nModify the `dotnet nuget sign` and `nuget.exe sign` commands to accept fingerprints from the SHA-2 family (SHA256, SHA384, or SHA512) instead of SHA-1. If a SHA-1 fingerprint is passed, the commands should raise a warning indicating that SHA-1 is insecure. This warning may eventually escalate to an error around the .NET 10 timeframe to enforce stronger security standards. This approach will enhance security by ensuring that only strong, approved hash algorithms are used in NuGet sign commands.\n\n### Additional Context\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-01T03:30:18.9590261Z","RunDurationInMilliseconds":814}