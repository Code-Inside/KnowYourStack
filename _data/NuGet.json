{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"24451112365","Type":"IssuesEvent","CreatedAt":"2022-10-06T23:09:25","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9226","RelatedDescription":"Closed issue \"[NuGet.org Bug]: 500 - Internal Server Error when accessing certain package pages\" (#9226) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nI'm unable to use NuGet.org\r\n\r\n### Describe the bug\r\n\r\nIf in the package's README, a specific scenario exists, attempting to access the package's page results in a 500 error. This issue comes to light with the added support of internal links in READMEs.\r\n\r\nThe 500 error occurs as a result of an unhandled NullReferenceException.\r\n\r\nThis may be a result of a separate bug within Markdig (auto-links or auto-identifiers or a combination of the two). \r\n\r\n### Repro Steps\r\n\r\nThe following scenario must exist in the README for this issue to occur.\r\n\r\nScenario 1:\r\n```\r\n# Heading\r\n[Link Text [Heading]](URL)\r\n```\r\n\r\nScenario 2:\r\n```\r\n# Heading\r\n[Heading]\r\n```\r\n\r\n### Expected Behavior\r\n\r\nAccessing a page containing a README with either of the scenarios above should not result in a 500 error.\r\n\r\nThe resulting HTML for scenario 1 should look like this:\r\n\r\n```\r\n<h2>Heading</h2>\r\n<p><a href=\"URL\" rel=\"noopener noreferrer nofollow\">Link Text [Heading]</a></p>\r\n```\r\n\r\nThe resulting HTML for scenario 2 should look like this:\r\n\r\n```\r\n<h2>Heading</h2>\r\n<p>[Heading]</p>\r\n```\r\n\r\n### Screenshots\r\n\r\n![Screenshot 2022-09-07 151541](https://user-images.githubusercontent.com/25823466/189007584-1cd7dff7-935d-4abe-9617-c5e8a645a515.png)\r\n\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"24450439645","Type":"IssuesEvent","CreatedAt":"2022-10-06T22:16:33","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9271","RelatedDescription":"Closed issue \"[Deployment] 2022.10.04\" (#9271) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\n## Changes\r\n\r\n* https://github.com/NuGet/NuGetGallery/pull/9247 (tracked by https://github.com/NuGet/NuGetGallery/issues/9172)\r\n* https://github.com/NuGet/NuGetGallery/pull/9254\r\n* https://github.com/NuGet/NuGetGallery/pull/9256\r\n* https://github.com/NuGet/NuGetGallery/pull/9255\r\n* https://github.com/NuGet/NuGetGallery/pull/9261 (tracked by https://github.com/NuGet/Engineering/issues/4577)\r\n* https://github.com/NuGet/NuGetGallery/pull/9260\r\n* https://github.com/NuGet/NuGetGallery/pull/9270\r\n\r\n## Progress\r\n* [x] Merge PRs: https://github.com/NuGet/NuGetGallery/pull/9272\r\n* [x] Build\r\n* [x] Release\r\n* [ ] DEV DB Migration - _skipped_\r\n* [x] DEV\r\n* [ ] INT DB Migration - _skipped_\r\n* [x] INT\n* [ ] PROD DB Migration - _skipped_\r\n* [x] PROD"},{"Id":"24446418083","Type":"PullRequestEvent","CreatedAt":"2022-10-06T18:22:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9274","RelatedDescription":"Merged pull request \"Update NuGetGallery.Services to address CG alerts\" (#9274) at NuGet/NuGetGallery","RelatedBody":"Verified with a DEV deployment."},{"Id":"24446366694","Type":"PullRequestEvent","CreatedAt":"2022-10-06T18:20:17","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9274","RelatedDescription":"Opened pull request \"Update NuGetGallery.Services to address CG alerts\" (#9274) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"24421900588","Type":"PullRequestEvent","CreatedAt":"2022-10-05T21:09:28","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9272","RelatedDescription":"Merged pull request \"[ReleasePrep][2022.10.05] RI of dev into main\" (#9272) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"24420860885","Type":"PullRequestEvent","CreatedAt":"2022-10-05T20:10:12","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9273","RelatedDescription":"Opened pull request \"Address accessibility for syntax highlighting\" (#9273) at NuGet/NuGetGallery","RelatedBody":"Approach: use our own syntax highlighting css style to have more control over\r\n\r\nTest: Ran few packages with code fence readme with FastPass\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9269"},{"Id":"24420728642","Type":"PullRequestEvent","CreatedAt":"2022-10-05T20:02:59","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9272","RelatedDescription":"Opened pull request \"[ReleasePrep][2022.10.05] RI of dev into main\" (#9272) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"24452159612","Type":"IssuesEvent","CreatedAt":"2022-10-07T00:50:44","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12130","RelatedDescription":"Closed issue \"Details for Installed MAUI packages are missing NuGet Project PM UI\" (#12130) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Details-for-Installed-MAUI-packages-are-/10119414)._\n\n---\n[severity:It's more difficult to complete my work]\r\nRepro Steps:\n\n1. Open Visual Studio 2022 17.3\n2. Create a New MAUI App\n3. Let Visual Studio finish all background tasks\n4. Right click on Project, 'Manage NuGet Packages...'\n\nExpected: PM UI shows package details on Installed Tab, on Details pane when the package is clicked\n\nActual: No details info shown.\n\n**NOTE**: This works well in Solution PM UI.\n\n---\n### Original Comments\n\n#### Feedback Bot on 8/14/2022, 07:39 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 8/18/2022, 01:21 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"24451764243","Type":"IssuesEvent","CreatedAt":"2022-10-07T00:11:10","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12024","RelatedDescription":"Closed issue \"[Bug]: Remove check for nugetrecommendpkgs flight in 16.11\" (#12024) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n16.11\n\n### Worked before?\n\nWill stop working after VS 17.4 release\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe will stop using the nugetrecommendpkgs flight starting after VS 17.4 release, so we also need to remove the check for the nugetrecommendpkgs flight in previous LTS versions.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"24449919011","Type":"IssuesEvent","CreatedAt":"2022-10-06T21:39:11","Actor":"erinlah-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12140","RelatedDescription":"Opened issue \"[Bug]: nuget restore fails to warn user if two project.assets.json files collide\" (#12140) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet sdk 6.0.401, msbuild MSBuild version 17.3.1+2badb37d1 for .NET 17.3.1.41501\n\n### Worked before?\n\nn/a\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nA user approached me with a failing build, having trouble root causing the failure. The error messages generated misled the user into thinking it was a compile error, but investigation revealed that nuget restore malfunctioned on one of their projects. It turns out nuget restore fails to notice the file collision, so returns succcess but some projects have the incorrect project.assets.json, resulting in C# compilation errors that confuse the user.\r\n\r\ndotnet restore should error out if restore cannot be completed correctly due to file collisions.\r\n\r\n**Repro steps**\r\n1. check out repo https://github.com/erinlah-ms/bug-repros/tree/main/\r\n2. ensure dotnet sdk 6.0.401 is installed\r\n3. cd repro-two-proj-same-folder/oops\r\n4. dotnet restore /bl:restore.binlog dirs.proj\r\n5. dotnet build --no-restore /bl:build.binlog dirs.proj\r\n\r\n**[expected]**\r\nbuild error on step 4, during restore. Should report that file everything\\obj\\project.assets.json (project one.csproj) was overwitten or collided with the projects.assets.json file for another project (two.csproj)\r\n\r\n**[actual]**\r\nstep 5 fails with a misleading error message. User is further confused because attempting to build is nondeterministic. Sometimes one.csproj fails to build with `one.cs(1,12): error CS0103: The name 'Newtonsoft' does not exist in the current context`. Sometimes two.csproj fails to build with `two.cs(1,7): error CS0246: The type or namespace name 'Jint' could not be found`\r\n\n\n### Verbose Logs\n\n```shell\nN/A, too much pii\n```\n"},{"Id":"24446614007","Type":"IssuesEvent","CreatedAt":"2022-10-06T18:32:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12111","RelatedDescription":"Closed issue \"[Bug]: [Cross-platform Sign Verify]An error ” error NU1102: Unable to find package Microsoft.NETCore.App.Ref with version(= 6.0.10)” occurred when creating the long-lived test code signing certificate\" (#12111) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.4.0.97\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\n## Repro steps: \r\n1. Open a Command prompt.\r\n3. Create a test pass directory and path into it: mkdir .\\testpass && pushd .\\testpass:.\r\n4. Download the latest .NET install script: `curl -sSL https://dot.net/v1/dotnet-install.ps1 -o .\\dotnet-install.ps1`\r\n5. Install the .NET SDK using script: `powershell.exe .\\dotnet-install.ps1 -InstallDir .\\dotnet -Channel 7.0 -Version latest -Quality daily -NoPath.`\r\n6. Clone the NuGet Entropy repository:  `git clone https://github.com/NuGet/Entropy.git.`\r\n7. Create a long-lived test code signing certificate: `dotnet.exe run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0 -- -vp 10`\r\n\r\n## Expected:\r\nCreate the long-lived test code signing certificate successfully.\r\n\r\n## Actual:\r\nAn error ” error NU1102: Unable to find package Microsoft.NETCore.App.Ref with version(= 6.0.10)” occurred when creating the long-lived test code signing certificate as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/192229563-f0b31e1b-a7a1-45f5-8d39-f5dbad0ddd6d.png)\r\n## Notes:\r\n1. The issue also repro on Linux & MacOS as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/192229982-61389474-d3f8-489a-9949-bbef98f0c45c.png)\r\n![image](https://user-images.githubusercontent.com/40230425/192230007-c10f976c-7131-4fcf-9fec-1fd3cb6e487f.png)\r\n2. Workaround: The issue doesn’t repro after deleting TargetFramework net6.0 in MakeTestCert.csproj file.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24446281699","Type":"IssuesEvent","CreatedAt":"2022-10-06T18:15:55","Actor":"hknielsen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12139","RelatedDescription":"Closed issue \"[Bug]: Global.json is not  picked up by `NuGetSdkResolver` when using Microsoft.Build API\" (#12139) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nMicrosoft.Build nuget package\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUsing MsBuild on a `sln` file having a `Global.json` file, specifying the `msbuild-sdks` tag is picked up as expected.\r\n\r\nUsing `Microsoft.Build` nuget package to build does not.\r\n\r\nThe reason is that MsBuild.exe internal generates a .proj file, instead of the sln file. This is how the ProjectPath to the NuGetSdkResolver is invoked, and by that the `Global.json` is picked up.\r\n\r\nWe need a way to specify the location of `Global.json`. ie. GlobalProperty, or an environment variable.\r\n\r\nRepro steps:\r\nUsing MSBuildLocator\r\n`MSBuildLocator.RegisterDefaults();`\r\n\r\nParsing a Solution file `SolutionFile.Parse`\r\nAnd traversiong the ProjectsInSolution, to create Projects.\r\nOf the creating of \r\n`var Project = new Project(projectPath, globalProperties, projectCollection.DefaultToolsVersion, projectCollection);`\r\nWill go over the SDKResolvers, and try resolving with `NuGetSdkResolver`, this then does not have the path to the sln, but the project in the sln.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24444880024","Type":"IssuesEvent","CreatedAt":"2022-10-06T17:04:14","Actor":"hknielsen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12139","RelatedDescription":"Opened issue \"[Bug]: Global.json is not  picked up by `NuGetSdkResolver` when using Microsoft.Build API\" (#12139) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nMicrosoft.Build nuget package\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUsing MsBuild on a `sln` file having a `Global.json` file, specifying the `msbuild-sdks` tag is picked up as expected.\r\n\r\nUsing `Microsoft.Build` nuget package to build does not.\r\n\r\nThe reason is that MsBuild.exe internal generates a .proj file, instead of the sln file. This is how the ProjectPath to the NuGetSdkResolver is invoked, and by that the `Global.json` is picked up.\r\n\r\nWe need a way to specify the location of `Global.json`. ie. GlobalProperty, or an environment variable.\r\n\r\nRepro steps:\r\nUsing MSBuildLocator\r\n`MSBuildLocator.RegisterDefaults();`\r\n\r\nParsing a Solution file `SolutionFile.Parse`\r\nAnd traversiong the ProjectsInSolution, to create Projects.\r\nOf the creating of \r\n`var Project = new Project(projectPath, globalProperties, projectCollection.DefaultToolsVersion, projectCollection);`\r\nWill go over the SDKResolvers, and try resolving with `NuGetSdkResolver`, this then does not have the path to the sln, but the project in the sln.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24444532622","Type":"IssuesEvent","CreatedAt":"2022-10-06T16:47:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12057","RelatedDescription":"Closed issue \"[Bug]: [Bug Bash] The version of a deprecated package “Microsoft.NetCore.App” is empty and the “Update” button is available in Browse tab\" (#12057) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.4.0.51\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about Problem\r\nVS Version: Main\\32825.32\r\nNuGet Version: Dev\\6.4.0.51\r\nOS Version: Windows-11-Enterprise-21H2 ENU\r\n\r\n#### Detailed repro steps\r\n1. Create a “C# Web Driver Test for Edge (.NET Core)” project in VS.\r\n2. Right-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’.\r\n3. Click the “Browse” tab and search package “Microsoft.NetCore.App” in the filter.\r\n4. Click the searched package in the list and observe the right panel.\r\n\r\n#### Expected\r\nThe version of a deprecated package “Microsoft.NetCore.App” should not be empty. The “Update” button should not be available if the empty version is expected.\r\n#### Actual \r\nThe version of a deprecated package “Microsoft.NetCore.App” is empty and the “Update” button is available as below screenshot. \r\n![image](https://user-images.githubusercontent.com/20632625/186883485-25eb4947-e802-475d-a34e-1ebee660fd44.png)\r\n#### Note:\r\nIt doesn’t repro on NuGet Client 5.11.2.2.\n\n### Verbose Logs\n\n_No response_"},{"Id":"24444142388","Type":"IssuesEvent","CreatedAt":"2022-10-06T16:30:36","Actor":"BenVillalobos","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12138","RelatedDescription":"Opened issue \"dotnet restore: Ambiguous project name\" (#12138) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#8026**\r\n- Please respond to @codingdave.\r\n\r\n---\r\n\r\n_From @codingdave on Thursday, October 6, 2022 6:55:06 AM_\r\n\r\n### Issue Description\r\n\r\nI have an application that I want to brand by overwriting the AssemblyName. Now if the .exe gets the same name as a dll msbuild restore will fail with:\r\n\r\n```\r\ndotnet restore\r\n  Determining projects to restore...\r\nC:\\Program Files\\dotnet\\sdk\\6.0.401\\NuGet.targets(132,5): error : Ambiguous project name 'b'. \r\n\r\n```\r\n### Steps to Reproduce\r\n\r\n* Unzip the sample [dotnetrestore-issue.zip](https://github.com/dotnet/msbuild/files/9721988/dotnetrestore-issue.zip)\r\n\r\n* Go into the directory of the sln\r\n* Execute dotnet restore: You will see that it works flawlessly\r\n* Now override the MsBuild property `BrandingAssemblyName` by the name of the dll (powershell: $env:BrandingAssemblyName=\"b\")\r\n* Again execute dotnet restore: You will see the error reported above\r\n\r\n### Expected Behavior\r\nMy usecase is that I want to extend my application `a.exe` with the functionality of a plugin `b.dll` and brand the application as `b.exe`. \r\n\r\nThis will be the directory structure \r\n```\r\nb.exe\r\nPlugins/b/b.dll\r\n```\r\nSo the binaries will not get in their way\r\n\r\n### Actual Behavior\r\nThe error mentioned above\r\n\r\n### Analysis\r\nThe MsBuild RestoreTask seems to not take into account the extension, just the assemblyname. So it believes there is an ambiguity of b.exe and b.dll but they are differentiable by extension.\r\n\r\n### Versions & Configurations\r\ndotnet --version\r\n6.0.401\r\n\r\nI only use dotnet build from non-developer powershell. But for completeness this is the msbuild version extracted from the developer console from VS 2022 (Version 17.3.0)\r\nmsbuild -version\r\nMSBuild version 17.3.0+f67e3d35e for .NET Framework\r\n17.3.0.37102"},{"Id":"24443847110","Type":"IssuesEvent","CreatedAt":"2022-10-06T16:18:31","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12137","RelatedDescription":"Opened issue \"[Bug]: VS2022 17.1.2: Dependency between .NET Standard 2.0 and .NET 4.7.1 throws NuGet error System.Memory, Version=4.0.1.1 not found\" (#12137) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.3\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nOriginally reported at: https://developercommunity.visualstudio.com/t/VS2022-1712:-Dependency-between-NET-S/1704611\r\n\r\nIf I try to nuget pack a component targeting .NET Framework 4.7.1 which references a .NET Standard 2.0 project I will get this error while packing, never referencing the mentioned missing assembly anywhere:\r\n\r\nCommand line call:\r\n```\r\nnuget pack .\\ComponentLibrary1\\ComponentLibrary1.csproj -NonInteractive -OutputDirectory C:\\temp -Properties Configuration=release -Verbosity Detailed -NonInteractive -IncludeReferencedProjects\r\n```\r\n\r\nError message\r\n```\r\nThe file or assembly \"System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\" or a dependency of it was not found. The system can not find the stated file.\r\n```\r\nStacktrace:\r\n```\r\nFilename: \"System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"\r\n   at Microsoft.CodeAnalysis.Collections.SegmentedArray.Copy[T](SegmentedArray`1 sourceArray, SegmentedArray`1 destinationArray, Int32 length)\r\n   at Microsoft.CodeAnalysis.Collections.SegmentedList`1.set_Capacity(Int32 value)\r\n   at Microsoft.CodeAnalysis.Collections.SegmentedList`1.EnsureCapacity(Int32 min)\r\n   at Microsoft.CodeAnalysis.Collections.SegmentedList`1.AddWithResize(T item)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.BuildIncludeOperation(String rootDirectory, ProjectItemElement itemElement, Boolean conditionResult)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.ProcessItemElement(String rootDirectory, ProjectItemElement itemElement, Boolean conditionResult)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateItemElement(Boolean itemGroupConditionResult, ProjectItemElement itemElement, LazyItemEvaluator`4 lazyEvaluator)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateItemGroupElement(ProjectItemGroupElement itemGroupElement, LazyItemEvaluator`4 lazyEvaluator)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, ProjectCollection projectCollection)\r\n\r\n=== State information before binding ===\r\nLOG: DisplayName = System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n (Fully specified)\r\nLOG: Appbase = file:///C:/tools/NuGet/\r\nLOG: Original PrivatePath = NULL\r\nCalling Assembly : (Unknown).\r\n===\r\nLOG: This binding starts in the default load context.\r\nLOG: No application configuration file was found.\r\nLOG: The host configuration file is in use:\r\nLOG: Using the machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Policy reference: System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nLOG: The same binding has already occurred and caused the error hr = 0x80070002.\r\n```\r\n\r\nIf I don’t use `-IncludeReferencedProjects` or explicitly use Visual Studio 2019 (using parameter `-MSBuildVersion 16.11`), everything is working fine.\r\nI used different NuGet versions, also the latest recommended 6.0.0. The error always shows up.\r\n\r\nI’ve attached a minimal sample of the used solution. May this be a bug or is it something I’m missing?\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"24368370626","Type":"IssuesEvent","CreatedAt":"2022-10-03T17:00:05","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Opened issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com/. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com/.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."},{"Id":"23723590840","Type":"IssuesEvent","CreatedAt":"2022-08-30T17:25:48","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Opened issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2022-10-07T03:30:24.3385975Z","RunDurationInMilliseconds":1362}