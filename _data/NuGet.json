{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32185586973","Type":"IssuesEvent","CreatedAt":"2023-09-28T21:01:12","Actor":"thaiknguyen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9675","RelatedDescription":"Opened issue \"[Feature]: API to manage package owners\" (#9675) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nCurrently, using the UI is the only way to update package  owners.  In the scenario where all packages within an org needs to be updated, it is very tedious to do this individually via UI (there is not even a bulk edit feature in the UI to make it easier).  It would be preferred to have an API to be able to update package owners.\r\n\r\nIt would also be good to be able to specify package owners when pushing new packages to publish.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"32163898529","Type":"IssuesEvent","CreatedAt":"2023-09-28T07:00:37","Actor":"tcmailweb","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9674","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \" (#9674) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nWe find that api.nuget.org is blocked by Checkpoint IPS, is this normal?\n\n### Repro Steps\n\n1. open terminal and run \"curl -vk https://api.nuget.org/v3/index.json\r\n2. get below result\r\n3. * Establish HTTP proxy tunnel to api.nuget.org:443\r\n> CONNECT api.nuget.org:443 HTTP/1.1\r\n> Host: api.nuget.org:443\r\n> User-Agent: curl/7.61.1\r\n> Proxy-Connection: Keep-Alive\r\n>\r\n< HTTP/1.1 504 Gateway Timeout\r\n< Pragma: no-cache\r\n< Cache-Control: no-store\r\n< Connection: keep-alive\r\n< Proxy-Connection: keep-alive\r\n< Content-Type: text/html\r\n< Content-Length: 199\r\n<\r\n* Received HTTP code 504 from proxy after CONNECT\r\n* CONNECT phase completed!\r\n* Closing connection 0\r\ncurl: (56) Received HTTP code 504 from proxy after CONNECT\r\n\r\n\r\n\n\n### Expected Behavior\n\n1. open terminal and run \"curl -vk https://api.nuget.org/v3/index.json\r\n2. should be get the content in index.json\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"32126470565","Type":"PullRequestEvent","CreatedAt":"2023-09-26T23:13:46","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9658","RelatedDescription":"Merged pull request \"Make older versions collapsible\" (#9658) at NuGet/NuGetGallery","RelatedBody":"I made the older versions of the nuget Downloads page collapsible. When expanded, there should be a red message indicating that these versions are unsupported.\r\n\r\nTesting: Go to [this file](https://github.com/NuGet/NuGet.Services.Index/blob/main/PROD/dist.nuget.org-index/index.json). Click on \"raw\" (see image)\r\n<img width=\"118\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/0c3ecb8b-405d-4ac6-8847-821ed37baf76\">\r\n\r\nCopy the URL of the raw file. Now, go to Downloads.cshtml line 86 and instead of //dist.nuget.org/index.json, paste the URL you previously copied. Run the code. Go to Downloads. Older versions of win-x86 should be collapsible. There should also be a red message indicating that these versions are unsupported.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4949"},{"Id":"32121863270","Type":"IssuesEvent","CreatedAt":"2023-09-26T19:10:26","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9205","RelatedDescription":"Closed issue \"[Feature]: Support renaming users and organizations on NuGet.org\" (#9205) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\r\n\r\nWe've received several support requests on NuGet.org over the years to change a user account or organization username. This is not currently supported with either a tool available to users or to site admins.\r\n\r\nThe workaround is:\r\n\r\n1. Create a new account with the desired username.\r\n2. Add the new account as an owner on packages the old account owns.\r\n3. Accept ownership in the new account and remove the old account from ownership.\r\n4. Optionally, delete the old account.\r\n\r\nThis is workable in most cases but has some problems:\r\n\r\n- It's very painful if the number of accounts is high.\r\n- Other entities like ID prefix reservations or organization memberships are not transferred\r\n- API keys are reset\r\n- You need a second MSA or AAD account for the transition process\r\n\r\n\r\n### The Elevator Pitch\r\n\r\nWe should provide a tool that allows either users or site admins to perform this operation easily.\r\n\r\nThere are issues to consider with this feature:\r\n\r\n- Username changes break client trust policies that use username (https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages#trust-package-owners)\r\n- The old username should be blocked from usage to prevent impersonation attacks\r\n- Could this be used by spammers or other malicious actors to avoid detection?\r\n- Should we allow as many renames as you want? Or should there be some throttling? If we block old usernames this tool could be used to easily eat up a lot of usernames.\r\n\r\n### Additional Context and Details\r\n\r\nThere is another related request of changing username casing: https://github.com/NuGet/NuGetGallery/issues/5013. This could perhaps be solved at the same time.\r\n\r\nPast requests for a username change on our issue tracker are here:\r\n- https://github.com/NuGet/NuGetGallery/issues/4673\r\n- https://github.com/NuGet/NuGetGallery/issues/1838\r\n- https://github.com/NuGet/NuGetGallery/issues/319"},{"Id":"32121857157","Type":"IssuesEvent","CreatedAt":"2023-09-26T19:10:10","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9516","RelatedDescription":"Closed issue \"Remove unused 'OrganizationsEnabledForAll' file in blob storage\" (#9516) at NuGet/NuGetGallery","RelatedBody":"'OrganizationsEnabledForAll' property was removed  5 years ago.\nhttps://github.com/NuGet/NuGetGallery/pull/5822/files\n\nHowever, this property is still in Login-Discontinuation-Configuration.json, it throws exceptions when initialization loginconfiguration.\n\n "},{"Id":"32121833783","Type":"IssuesEvent","CreatedAt":"2023-09-26T19:09:09","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9373","RelatedDescription":"Closed issue \"[Search-by-TFM Bug Bash] Empty query string parameters should be left out of the url entirely\" (#9373) at NuGet/NuGetGallery","RelatedBody":"### Problem description\r\nEmpty query string parameters are included in the url, and the url looks unnecessarily cluttered.\r\n\r\nhttps://dev.nugettest.org/packages?q=&packagetype=&frameworks=&tfms=net472%2Cnet47%2C&prerel=True&sortby=relevance\r\n\r\n### Solution\r\nEmpty query string parameters should be left out of the url entirely.\r\n\r\nhttps://dev.nugettest.org/packages?tfms=net472%2Cnet47&prerel=True&sortby=relevance\r\n"},{"Id":"32121829444","Type":"IssuesEvent","CreatedAt":"2023-09-26T19:08:57","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9374","RelatedDescription":"Closed issue \"[Search-by-TFM Bug Bash] Make filters panel collapsible on mobile devices or narrow screens\" (#9374) at NuGet/NuGetGallery","RelatedBody":"### Problem description\r\nThe filters panel appears vertically above the search results on mobile devices and narrow screens, and the important search results are pushed to the bottom of the screen, and the user may even have to scroll to get to them, especially when the TFM sections are expanded. The search results should be the most prominent and visible feature on the page when it loads.\r\n\r\n### Solution\r\nMake the filters panel collapsible on mobile (and narrow screens). Have the collapsible icon after the 'There are x packages' text, in keeping with current nuget.org. Hide the 'sort by' by default too."},{"Id":"32094969970","Type":"PullRequestEvent","CreatedAt":"2023-09-26T00:07:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9673","RelatedDescription":"Merged pull request \"Move to latest NuGet.Jobs packages to align with ServerCommon update\" (#9673) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/4992"},{"Id":"32094480578","Type":"PullRequestEvent","CreatedAt":"2023-09-25T23:28:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9673","RelatedDescription":"Opened pull request \"Move to latest NuGet.Jobs packages to align with ServerCommon update\" (#9673) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/4992"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32187193641","Type":"IssuesEvent","CreatedAt":"2023-09-28T22:40:43","Actor":"meokullu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12911","RelatedDescription":"Opened issue \"Unexpected increase of Updates() when installing prelease packages.\" (#12911) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n6.7.0.127\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. install a prelease package..\r\n2. look for updates() tab.\n\n### Verbose Logs\n\n_No response_"},{"Id":"32186568490","Type":"IssuesEvent","CreatedAt":"2023-09-28T21:58:46","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12910","RelatedDescription":"Opened issue \"Add NuGet.Frameworks support for .NET 8\" (#12910) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nAdd the new .NET 8 framework literals and update the parsing logic in NuGet.Frameworks ahead of the .NET 8 release\n\n### Additional Context and Details\n\n_No response_"},{"Id":"32179929546","Type":"IssuesEvent","CreatedAt":"2023-09-28T16:43:10","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9180","RelatedDescription":"Closed issue \"Rename no-cache to no-http-cache\" (#9180) at NuGet/Home","RelatedBody":"Across all the tooling, dotnet.exe/nuget.exe/msbuild.exe, we have a --no-cache, -NoCache, RestoreNoCache switch to turn off our http cache caching, which includes a few things: \r\n\r\n- Caching the resources (thing caching repository signatures, servide index)\r\n- Caching the versions list\r\n- Caching the nupkgs \r\n\r\nThis whole experience is rather confusing. A lot of .NET Customers think of the global packages folder as a cache and they expect RestoreNoCache to exclude the global packages folder. In reality this is a nuget http cache and should be clearly indicated as such. \r\n\r\nRelated to https://github.com/NuGet/Home/issues/3116. \r\n\r\ncc @aortiz-msft @NuGet/nuget-client \r\n"},{"Id":"32163930197","Type":"IssuesEvent","CreatedAt":"2023-09-28T07:02:06","Actor":"msedi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12909","RelatedDescription":"Opened issue \"Apply deduplication of content files\" (#12909) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nOther/NA\n\n### Current Behavior\n\nWe are delivering large files with our nuget packages, similar to this question on stackoverflow: https://stackoverflow.com/questions/47468941/prevent-duplicating-files-in-nuget-content-and-contentfiles-folders.\r\n\r\nTo my knowledge for compatbility reasons nuget packs the content into **content** and **contentFiles** but this means that the resulting archive has double the size as it must have,\r\n\r\nFor example we have a nuget package of 85MB. If I unpack it it has 220MB. The size of the content alone is 109MB. Currently both, content and contentFiles 109MB.\r\n\r\nIf I simply take 7zip and pack the nuget package again, I get 72MB. So this is a first thing, obviously the NUGET zipper is not well optimized. But this is another thing.\r\n\r\nIf I now remove the content and just keep the contentFiles and then use 7zip again, I get a package of 36MB which is less then half the original size (of course taking the better compression performance of 7zip into account).\r\n\r\n\r\n\r\n\n\n### Desired Behavior\n\nSome tools, for example _innosetup_ have the possibility to deduplicate files and only holds the same file once but adds it in multiple locations. But these tools are working with binary statistics since innosetup doesn't know which files are duplicate.\r\n\r\nIn the case of nuget content and contentFiles we definitely know what is a duplicate. This would improve the package size a lot which would in turn reduce download size and overall performance. \r\n\n\n### Additional Context\n\n_No response_"},{"Id":"32157614629","Type":"IssuesEvent","CreatedAt":"2023-09-27T22:59:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12908","RelatedDescription":"Opened issue \"Bump NuGet runnable assemblies to net7.0\" (#12908) at NuGet/Home","RelatedBody":"\r\nThis bumps a bunch of our runnable assemblies to net7.0. \r\nSome of these projects such as `nuget.command.xplat` and `nuget.build.tasks` need to depend on newer versions of msbuild assemblies which only tend to target newer .net versions. \r\nSee for example: https://www.nuget.org/packages/Microsoft.Build#dependencies-body-tab. \r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-29T03:30:21.7925438Z","RunDurationInMilliseconds":1154}