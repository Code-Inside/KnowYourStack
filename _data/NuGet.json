{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40205170294","Type":"PullRequestEvent","CreatedAt":"2024-07-16T22:35:05","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10063","RelatedDescription":"Merged pull request \"Bump Azure.Identity from 1.11.3 to 1.11.4 in /src/NuGetGallery.Core\" (#10063) at NuGet/NuGetGallery","RelatedBody":"Bumps Azure.Identity from 1.11.3 to 1.11.4.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=Azure.Identity&package-manager=nuget&previous-version=1.11.3&new-version=1.11.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/NuGet/NuGetGallery/network/alerts).\n\n</details>"},{"Id":"40198300054","Type":"IssuesEvent","CreatedAt":"2024-07-16T17:42:39","Actor":"dtivel","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10073","RelatedDescription":"Opened issue \"Replace SHA-1 fingerprints with SHA-256 fingerprints\" (#10073) at NuGet/NuGetGallery","RelatedBody":"SHA-1 fingerprints should not be used.  Use SHA-256 fingerprints instead.  This is for SDL compliance.\r\n\r\nFrom https://github.com/search?q=repo%3ANuGet%2FNuGetGallery%20SHA-1&type=code\r\n\r\n- https://github.com/NuGet/NuGetGallery/blob/27cbca36096af5897d3d034ec495c37cd110a1c6/src/NuGetGallery/Views/Packages/_ValidationIssue.cshtml#L56\r\n- https://github.com/NuGet/NuGetGallery/blob/27cbca36096af5897d3d034ec495c37cd110a1c6/src/NuGetGallery.Core/Extensions/ValidationIssueExtensions.cs#L55\r\n- https://github.com/NuGet/NuGetGallery/blob/27cbca36096af5897d3d034ec495c37cd110a1c6/tests/NuGetGallery.Facts/Infrastructure/Mail/MarkdownMessageServiceFacts.cs#L1375\r\n- https://github.com/NuGet/NuGetGallery/blob/27cbca36096af5897d3d034ec495c37cd110a1c6/tests/NuGetGallery.Facts/Infrastructure/Mail/MarkdownMessageServiceFacts.cs#L2318"},{"Id":"40163256206","Type":"IssuesEvent","CreatedAt":"2024-07-15T18:45:14","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10067","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Alternating table row styling in Dark Mode\" (#10067) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe markdown rendering of alternating table row styling doesn't work well in dark mode\r\n\r\nhttps://www.nuget.org/packages/Azure.Identity#credential-classes\r\n\r\n<img width=\"872\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/1288848/726a229d-4736-44d5-9e9d-f9a617f30d4d\">\r\n\n\n### Repro Steps\n\n1. Open https://www.nuget.org/packages/Azure.Identity#credential-classes\r\n2. See the screenshot from above\n\n### Expected Behavior\n\nThe alternate table row styling should work in dark mode.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"40122548114","Type":"PullRequestEvent","CreatedAt":"2024-07-13T18:49:27","Actor":"guibranco","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10072","RelatedDescription":"Opened pull request \"Update Trusted-Image-Domains.json\" (#10072) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Add `app.deepsource.com` domain to the trusted image domains list.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9953"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40243481546","Type":"IssuesEvent","CreatedAt":"2024-07-18T00:28:12","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13636","RelatedDescription":"Opened issue \"Bubble-up Known Vulnerability Indicators in Solution Explorer for Transitive Packages\" (#13636) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nNuGet launched a vulnerability auditing feature last year and would like to enhance the experience further with project system help!\r\n\r\nToday a user must directly navigate to a transitive package to see a warning produced when `NuGetAuditMode = all`\r\n\r\n![image](https://github.com/dotnet/project-system/assets/1288848/fe143c36-4fcd-4c66-9731-1953b7f887d6)\r\n\r\nIdeally these warnings would bubble up the entire packages tree similar to what you see with a top-level dependency:\r\n\r\n![image](https://github.com/dotnet/project-system/assets/1288848/6a899b95-5142-4634-be5b-e65f2c311122)\r\n\r\nAt the end of the day, if there is a transitive dependency vulnerability warning, it should show in the `Dependencies` node so the user knows how to spelunk to find the culprit. This will also complement CLI work we did in a command called [`dotnet nuget why`](https://github.com/NuGet/Home/blob/e83e772d7372288fc4475ba8b511dca97768a006/accepted/2022/dotnet-nuget-why-proposal.md) which allows you to do similar.\n\n### Additional Context and Details\n\nMany users use the solution explorer to view their dependency tree alongside the newly released [transitive dependencies in visual studio](https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/) functionality that only works for project-level today.\r\n\r\nIn developer surveys, we found that the solution explorer is one of the most desired places for people to view vulnerability information about their dependencies.\r\n\r\nMore user impact/motivation can be found in an older proposal that is related more-so to the [iconography of these indicators](https://github.com/NuGet/Home/blob/package-status-indicators/proposed/2022/package-status-indicators.md#motivation)"},{"Id":"40242158805","Type":"IssuesEvent","CreatedAt":"2024-07-17T22:58:36","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13546","RelatedDescription":"Closed issue \"Use `SDKAnalysisLevel` in restore \"https everywhere: promote from warning to error\"\" (#13546) at NuGet/Home","RelatedBody":"Use https://github.com/NuGet/NuGet.Client/pull/5833, and avoid showing error based on the SDKAnalysisLevel value.\r\nif it is greater than or equal to 9.0.100 > show error message."},{"Id":"40238535597","Type":"IssuesEvent","CreatedAt":"2024-07-17T20:06:55","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13576","RelatedDescription":"Closed issue \"Enable `dotnet nuget why` on non-SDK style projects\" (#13576) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\n`dotnet nuget why` currently requires you to point to a project file, but the .NET SDK can only evaluate SDK style projects. Many non-SDK style Visual Studio projects try to import MSBuild props/targets files that don't exist in the .NET SDK and therefore trying to read project properties (to find the assets file) fails.\r\n\r\n`dotnet nuget why` is particularly useful for investigating why a package with a known vulnerability is used by a project, so allowing the command to work for non-SDK style projects will help customers investigate known vulnerabilities.\r\n\r\n`dotnet nuget why` should either allow a `project.assets.json` file to be passed as an argument instead of a project file.\r\n\r\nWe can instruct customers that they can find the assets file location using `msbuild.exe path\\to\\project.csproj -getProperty:ProjectAssetsFile`\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40238304532","Type":"IssuesEvent","CreatedAt":"2024-07-17T19:57:43","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11834","RelatedDescription":"Closed issue \"[DCR]: Central Package Management - Respect .props file as a way to opt-in to the feature.\" (#11834) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nOther/NA\r\n\r\n### Current Behavior\r\n\r\nTo opt-in to central package management, one must explicitly enable a MSBuild property today. This brings quite a bit of confusion to users given the original spec mentions that if a file exists, all projects will be opted-in to the feature.\r\n\r\nhttps://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions#opt-in-central-package-version-management\r\n\r\n### Desired Behavior\r\n\r\nIf a .props file exists or is imported appropriately, projects should be automatically opted-in to central package management unless there is an explicit MSBuild property disabling the use of the feature.\r\n\r\n### Additional Context\r\n\r\nThis is currently a papercut that brings confusion to everyday users. We have documented this for now, but would like to make this more intuitive in the future.\r\n\r\n### Breaking Change\r\nThis would be considered a breaking change in the scenario where a user has a `Directory.Packages.props` for some reason and is not setting the `ManagePackageVersionsCentrally` property.  CPM would now be on and they would need to set `ManagePackageVersionsCentrally` to `false` explicitly if they don't want to use CPM.\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>\r\n</PropertyGroup>\r\n```"},{"Id":"40238297098","Type":"IssuesEvent","CreatedAt":"2024-07-17T19:57:24","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/11834","RelatedDescription":"Reopened issue \"[DCR]: Central Package Management - Respect .props file as a way to opt-in to the feature.\" (#11834) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nOther/NA\r\n\r\n### Current Behavior\r\n\r\nTo opt-in to central package management, one must explicitly enable a MSBuild property today. This brings quite a bit of confusion to users given the original spec mentions that if a file exists, all projects will be opted-in to the feature.\r\n\r\nhttps://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions#opt-in-central-package-version-management\r\n\r\n### Desired Behavior\r\n\r\nIf a .props file exists or is imported appropriately, projects should be automatically opted-in to central package management unless there is an explicit MSBuild property disabling the use of the feature.\r\n\r\n### Additional Context\r\n\r\nThis is currently a papercut that brings confusion to everyday users. We have documented this for now, but would like to make this more intuitive in the future.\r\n\r\n### Breaking Change\r\nThis would be considered a breaking change in the scenario where a user has a `Directory.Packages.props` for some reason and is not setting the `ManagePackageVersionsCentrally` property.  CPM would now be on and they would need to set `ManagePackageVersionsCentrally` to `false` explicitly if they don't want to use CPM.\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>\r\n</PropertyGroup>\r\n```"},{"Id":"40237835858","Type":"PullRequestEvent","CreatedAt":"2024-07-17T19:39:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13634","RelatedDescription":"Opened pull request \"Supplied by platform design\" (#13634) at NuGet/Home","RelatedBody":"WIP: Not ready to be reviewed by anyone beyond an immediate group.\r\n\r\nPrototype in https://github.com/NuGet/NuGet.Client/tree/dev-nkolev92-suppliedByPlatform\r\nRelated: https://github.com/NuGet/NuGet.Client/pull/5919\r\n\r\nTo get dummy values from prototype, set `AddDummyPrunedPackageReferences` to `true`."},{"Id":"40234152969","Type":"IssuesEvent","CreatedAt":"2024-07-17T17:21:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9620","RelatedDescription":"Closed issue \"Convert Microsoft.VisualStudio.ProjectSystem.Managed from PackageDownload to PackageReference\" (#9620) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392/files#r428498657\r\n\r\n`Microsoft.VisualStudio.ProjectSystem` uses `PackageDownload` to reference `Microsoft.VisualStudio.ProjectSystem.Interop` directly with `EmbedInteropTypes` set to `true`.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/34ceb7d3d5a70ba4b1ecf196e5902dcc9ffed05d/test/NuGet.Clients.Tests/NuGet.PackageManagement.VisualStudio.Test/NuGet.PackageManagement.VisualStudio.Test.csproj#L62-L65\r\n\r\nhttps://github.com/NuGet/NuGet.Client/pull/3392/ copied this pattern for the .NET Project System packages, however this isn't necessary for `Microsoft.VisualStudio.ProjectSystem.Managed` and `Microsoft.VisualStudio.ProjectSystem.Managed.VS`.\r\n\r\nConverting these to `PackageReference` triggers a package downgrade error on `Microsoft.CodeAnalysis.FxCopAnalyzers`.\r\n\r\nUpgrading `Microsoft.CodeAnalysis.FxCopAnalyzers` that to `3.0.0` triggers 90 new errors, many of which look like they're worth a proper review."},{"Id":"40233303586","Type":"PullRequestEvent","CreatedAt":"2024-07-17T16:51:54","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/pull/13376","RelatedDescription":null,"RelatedBody":"This proposal aims to enable the PMUI to load package source attributes. Consequently, users will have the capability to view and modify these values.\r\nRendered: https://github.com/NuGet/Home/blob/697beb7ea1c8e320004591bfceb0989c45cdb060/accepted/2024/PMUI-packagesource-option.md"},{"Id":"40232474946","Type":"IssuesEvent","CreatedAt":"2024-07-17T16:22:00","Actor":"ViktorHofer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13633","RelatedDescription":"Opened issue \"Add opt-in warning/error to require a package readme file\" (#13633) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nWith the option to add package readmes to packages, repos like dotnet/runtime would like to enforce the existence of a package readme so that we have build validation that every shipping package has a package readme.\r\n\r\nIt would be great if NuGet could emit an opt-in warning/error that we we could conditionally enable, based on if the package is shipping or non-shipping (Arcade terms).\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-07-18T03:30:20.4311326Z","RunDurationInMilliseconds":969}