{"Data":{"Blog":{"FeedItems":[{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"38311861963","Type":"IssuesEvent","CreatedAt":"2024-05-13T07:30:15","Actor":"LL-SRN","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9946","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Cannot change organization email to email associated with Microsoft account\" (#9946) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWhen changing the email address associated with an organization, if the new email address is associated with a microsoft account, the address change workflow fails because a nuget account is created for that email address so it can no longer be used as an organization email address.\n\n### Repro Steps\n\nPrerequisites:\r\n\r\n- existing Nuget organization $ORGANIZATION\r\n- email address $ADDRESS that is associated with a Microsoft account but not with a nuget account\r\n\r\n1. Go to https://www.nuget.org/organization/$ORGANIZATION/ChangeEmail\r\n2. insert $ADDRESS under \"New Email Address\" and press \"save\"\r\n3. in mailbox for $ADDRESS, receive email with confirmation link\r\n4. open confirmation link in browser\r\n5. on opening link, receive request to select which Microsoft account you wish to associate with nuget\r\n6. select $ADDRESS\r\n7. Error message, approximately \"cannot use account, already a nuget account\"\r\n\n\n### Expected Behavior\n\n1. Go to https://www.nuget.org/organization/$ORGANIZATION/ChangeEmail\r\n2. insert $ADDRESS under \"New Email Address\" and press \"save\"\r\n3. in mailbox for $ADDRESS, receive email with confirmation link\r\n4. open confirmation link in browser\r\n5. $ADDRESS is now the email address associated with the nuget organization\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\nPossibly associated with this issue: https://github.com/NuGet/NuGetGallery/issues/8616"},{"Id":"38298217206","Type":"IssuesEvent","CreatedAt":"2024-05-12T12:13:53","Actor":"thompson-tomo","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9945","RelatedDescription":"Opened issue \"Inform user if package is available as part of framework\" (#9945) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nCurrently it is not easily possible for a user of nuget.org to know if the package is available as part of the framework.\n\n### The Elevator Pitch\n\nNuget.org should be the central location for viewing information about packages. To help achieve this the framework tab should provide  an indication of what frameworks the library is included in. This will replace the need to cross reference the package with https://apisof.net and at the same time make it even easier for developer's to know that they are referencing a package which is natively available as part of the framework. \n\n### Additional Context and Details\n\n_No response_"},{"Id":"38293343700","Type":"IssuesEvent","CreatedAt":"2024-05-12T01:20:43","Actor":"thompson-tomo","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9944","RelatedDescription":"Opened issue \"[Feature]: Provide additional options of CSPROJ elements\" (#9944) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI use central package management and global package references and am wanting to make it nice and easy for me to determine what information i need to add to my files\n\n### The Elevator Pitch\n\nWhen looking at package it should be quicker and easier for a developer to know what the xml element which needs to be added to install package as a global package reference. At the same time it should also be as easy to know how to add it when using central package management.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38278674865","Type":"PullRequestEvent","CreatedAt":"2024-05-10T20:48:10","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9943","RelatedDescription":"Merged pull request \"Ask from Privacy Review: Update \"Privacy Policy\" to be instead \"Privacy Statement\"\" (#9943) at NuGet/NuGetGallery","RelatedBody":"Ask from Privacy Review: change the link on the Nuget.org site from \"Privacy Policy\" to be instead \"Privacy Statement\" per the Microsoft guidelines (guidance is on this page - https://microsoft.sharepoint.com/sites/privacy/SitePages/Privacy-Statement.aspx)\r\n\r\nHelps with https://github.com/NuGet/Engineering/issues/5267"},{"Id":"38277514436","Type":"PullRequestEvent","CreatedAt":"2024-05-10T19:52:38","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9943","RelatedDescription":"Opened pull request \"Ask from Privacy Review: Update \"Privacy Policy\" to be instead \"Privacy Statement\"\" (#9943) at NuGet/NuGetGallery","RelatedBody":"Ask from Privacy Review: change the link on the Nuget.org site from \"Privacy Policy\" to be instead \"Privacy Statement\" per the Microsoft guidelines (guidance is on this page - https://microsoft.sharepoint.com/sites/privacy/SitePages/Privacy-Statement.aspx)\r\n\r\nHelps with https://github.com/NuGet/Engineering/issues/5267"},{"Id":"38268273458","Type":"IssuesEvent","CreatedAt":"2024-05-10T13:51:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9921","RelatedDescription":"Reopened issue \"[NuGet.org Bug]: many catalog package details leaves are redundant (duplicate) because of improper deprecation no-oping\" (#9921) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nAs part of https://github.com/NuGet/NuGetGallery/issues/8873, I was interested in implementing proper no-oping for deprecation. This is to ensure that redundant API calls do not easily cause many unnecessary V3 catalog leaves and therefore load on the DB.\r\n\r\nI did a data investigation with NuGet.Insights to see how often duplicate catalog leaves occurred. It turns out... a lot!\r\n\r\nOf catalog leaves with deprecation information, over 15% are duplicate, i.e. their mutable metadata (listed, vulnerabilities, and deprecation) are the same as the previous leaf for that same package.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nlet LeafCount = toscalar(NiCatalogLeafItems | count);\r\nSameAsPreviousLeaves\r\n| summarize LeavesWithDeprecation = count(), DuplicateLeaves = countif(SameAsPrevious)\r\n| extend TotalLeaves = LeafCount\r\n| extend ['Duplicate % of total'] = round(100.0 * DuplicateLeaves / TotalLeaves, 2)\r\n| extend ['Duplicate % of deprecated'] = round(100.0 * DuplicateLeaves / LeavesWithDeprecation, 2)\r\n```\r\n\r\n|LeavesWithDeprecation|DuplicateLeaves|TotalLeaves|Duplicate % of total|Duplicate % of deprecated|\r\n|---|---|---|---|---|\r\n|684887|103619|12725635|0.81|15.13|\r\n\r\nI believe this is made even worse for users that have access to the deprecation API private preview. It's easy to re-request deprecation of a growing set of versions with the API and cause a growing wave of duplicate deprecations. `azure-sdk` is at the top of the deprecation list because it is enabled for the deprecation API.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nSameAsPreviousLeaves\r\n| summarize DeprecationCount = count(), DuplicateCount = countif(SameAsPrevious) by Identity, LowerId\r\n| join kind=inner NiPackageOwners on LowerId\r\n| project LowerId, Identity, Owners, DeprecationCount, DuplicateCount\r\n| mv-expand Owner = Owners to typeof(string)\r\n| summarize DeprecationCount = sum(DeprecationCount), DuplicateCount = sum(DuplicateCount) by Owner\r\n| order by DuplicateCount desc\r\n| extend ['Duplicate %'] = round(100.0 * DuplicateCount / DeprecationCount, 2)\r\n| take 10\r\n```\r\n\r\n|Owner|DeprecationCount|DuplicateCount|Duplicate %|\r\n|---|---|---|---|\r\n|Microsoft|112632|55381|49.17|\r\n|azure-sdk|74116|52725|71.14|\r\n|monk.soul|73453|21262|28.95|\r\n|chinadotnet|61946|17637|28.47|\r\n|dotnetchina|61946|17637|28.47|\r\n|Thinkka|3860|3497|90.6|\r\n|nugetservicebus|4296|3030|70.53|\r\n|AppInsightsSdk|4168|2770|66.46|\r\n|RabbitFoot|15833|1990|12.57|\r\n|furion.net|6501|1847|28.41|\r\n\r\nWe should implement proper no-oping in `PackageDeprecationService`. Currently the code updates the `LastEdited` field on ALL packages in the deprecation batch if there is ANY change (rather than no-oping on a package-by-package basis).\r\nhttps://github.com/NuGet/NuGetGallery/blob/f58a360a3e081f633eb7b0791b0de625d2bb9399/src/NuGetGallery/Services/PackageDeprecationService.cs#L103-L110\n\n### Repro Steps\n\n1. Deprecate version X and Y of a package via the UI.\r\n2. Deprecate version X, Y, and Z of a package via the UI, carefully selecting the same deprecation settings as the previous step.\r\n\n\n### Expected Behavior\n\nVersion Z should only have it's `LastEdited` value updated.\r\n\r\nActual: X, Y, and Z have their `LastEdited` value updated.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"38249745966","Type":"IssuesEvent","CreatedAt":"2024-05-09T23:33:14","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9921","RelatedDescription":"Closed issue \"[NuGet.org Bug]: many catalog package details leaves are redundant (duplicate) because of improper deprecation no-oping\" (#9921) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nAs part of https://github.com/NuGet/NuGetGallery/issues/8873, I was interested in implementing proper no-oping for deprecation. This is to ensure that redundant API calls do not easily cause many unnecessary V3 catalog leaves and therefore load on the DB.\r\n\r\nI did a data investigation with NuGet.Insights to see how often duplicate catalog leaves occurred. It turns out... a lot!\r\n\r\nOf catalog leaves with deprecation information, over 15% are duplicate, i.e. their mutable metadata (listed, vulnerabilities, and deprecation) are the same as the previous leaf for that same package.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nlet LeafCount = toscalar(NiCatalogLeafItems | count);\r\nSameAsPreviousLeaves\r\n| summarize LeavesWithDeprecation = count(), DuplicateLeaves = countif(SameAsPrevious)\r\n| extend TotalLeaves = LeafCount\r\n| extend ['Duplicate % of total'] = round(100.0 * DuplicateLeaves / TotalLeaves, 2)\r\n| extend ['Duplicate % of deprecated'] = round(100.0 * DuplicateLeaves / LeavesWithDeprecation, 2)\r\n```\r\n\r\n|LeavesWithDeprecation|DuplicateLeaves|TotalLeaves|Duplicate % of total|Duplicate % of deprecated|\r\n|---|---|---|---|---|\r\n|684887|103619|12725635|0.81|15.13|\r\n\r\nI believe this is made even worse for users that have access to the deprecation API private preview. It's easy to re-request deprecation of a growing set of versions with the API and cause a growing wave of duplicate deprecations. `azure-sdk` is at the top of the deprecation list because it is enabled for the deprecation API.\r\n\r\n<!-- csl: https://ddteldata.kusto.windows.net/ClientToolsInsights -->\r\n```kusto\r\nlet SameAsPreviousLeaves = NiCatalogLeafItems\r\n| where isnotempty(Deprecation)\r\n| order by Identity asc, CommitTimestamp asc\r\n| project LowerId, Identity, CommitTimestamp, IsListed, Deprecation = tostring(Deprecation), Vulnerabilities = tostring(Vulnerabilities)\r\n| extend SameAsPrevious = Identity == prev(Identity) and Deprecation == prev(Deprecation) and IsListed == prev(IsListed) and Vulnerabilities == prev(Vulnerabilities)\r\n| project-reorder Identity, CommitTimestamp, SameAsPrevious, Deprecation, LowerId;\r\nSameAsPreviousLeaves\r\n| summarize DeprecationCount = count(), DuplicateCount = countif(SameAsPrevious) by Identity, LowerId\r\n| join kind=inner NiPackageOwners on LowerId\r\n| project LowerId, Identity, Owners, DeprecationCount, DuplicateCount\r\n| mv-expand Owner = Owners to typeof(string)\r\n| summarize DeprecationCount = sum(DeprecationCount), DuplicateCount = sum(DuplicateCount) by Owner\r\n| order by DuplicateCount desc\r\n| extend ['Duplicate %'] = round(100.0 * DuplicateCount / DeprecationCount, 2)\r\n| take 10\r\n```\r\n\r\n|Owner|DeprecationCount|DuplicateCount|Duplicate %|\r\n|---|---|---|---|\r\n|Microsoft|112632|55381|49.17|\r\n|azure-sdk|74116|52725|71.14|\r\n|monk.soul|73453|21262|28.95|\r\n|chinadotnet|61946|17637|28.47|\r\n|dotnetchina|61946|17637|28.47|\r\n|Thinkka|3860|3497|90.6|\r\n|nugetservicebus|4296|3030|70.53|\r\n|AppInsightsSdk|4168|2770|66.46|\r\n|RabbitFoot|15833|1990|12.57|\r\n|furion.net|6501|1847|28.41|\r\n\r\nWe should implement proper no-oping in `PackageDeprecationService`. Currently the code updates the `LastEdited` field on ALL packages in the deprecation batch if there is ANY change (rather than no-oping on a package-by-package basis).\r\nhttps://github.com/NuGet/NuGetGallery/blob/f58a360a3e081f633eb7b0791b0de625d2bb9399/src/NuGetGallery/Services/PackageDeprecationService.cs#L103-L110\n\n### Repro Steps\n\n1. Deprecate version X and Y of a package via the UI.\r\n2. Deprecate version X, Y, and Z of a package via the UI, carefully selecting the same deprecation settings as the previous step.\r\n\n\n### Expected Behavior\n\nVersion Z should only have it's `LastEdited` value updated.\r\n\r\nActual: X, Y, and Z have their `LastEdited` value updated.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"38249745667","Type":"PullRequestEvent","CreatedAt":"2024-05-09T23:33:12","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9941","RelatedDescription":"Merged pull request \"[ReleasePrep][2024.05.08]RI of dev into main \" (#9941) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"38338532608","Type":"IssuesEvent","CreatedAt":"2024-05-13T21:22:20","Actor":"AArnott","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13438","RelatedDescription":"Opened issue \"`dotnet add package` adds inappropriate metadata to Directory.Packages.props\" (#13438) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.204\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI ran the following command line in the directory of an SDK style csproj where CPVM is turned on:\r\n\r\n    dotnet add package MessagePackAnalyzer --version 3.0.54-alpha\r\n\r\nThis added the following xml to my csproj:\r\n```xml\r\n    <PackageReference Include=\"MessagePackAnalyzer\">\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n      <PrivateAssets>all</PrivateAssets>\r\n    </PackageReference>\r\n```\r\n\r\nThat looks good. But it also added the following xml to my Directory.Packages.props:\r\n```xml\r\n    <PackageVersion Include=\"MessagePackAnalyzer\" Version=\"3.0.54-alpha\">\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n      <PrivateAssets>all</PrivateAssets>\r\n    </PackageVersion>\r\n```\r\n\r\nPackageVersion items are not expected to have the metadata that the tool added, are they?\n\n### Verbose Logs\n\n_No response_"},{"Id":"38337620906","Type":"IssuesEvent","CreatedAt":"2024-05-13T20:44:22","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13408","RelatedDescription":"Closed issue \"NuGet.SemanticVersion does not parse prerelease versions.\" (#13408) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nNuGet.VisualStudio 17.9.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nThe `NuGet.VisualStudio` package includes a `SemanticVersion` type with a `TryParse` method that does not accept version strings with a dot `.` after any prerelease tag.\r\n\r\nFor example, `SemanticVersion.TryParse(\"17.6.0-preview.3\")` fails, whereas `SemanticVersion.TryParse(\"17.6.0-preview-3\")` succeeds.  The dot in a prerelease suffix is allowed by SemVer and accepted by the `SemanticVersion` type in the `NuGet.Versioning` package.\r\n\r\nUnfortunately, we require semver parsing in our Visual Studio extension and must use the `NuGet.VisualStudio` package.\n\n### Verbose Logs\n\n_No response_"},{"Id":"38331798661","Type":"IssuesEvent","CreatedAt":"2024-05-13T17:13:39","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13435","RelatedDescription":"Closed issue \"PetaPoco 对postgres 数据支持有bug \" (#13435) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.0.677\n\n### Worked before?\n\n6.0.677\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nPetaPoco 对postgres 数据支持有bug , 当插入数据表 表名 会有引号“myTable”, Npgsql.PostgresException:“42P01: 关系 \"myTable\" 不存在”, 实际表是存在的\n\n### Verbose Logs\n\n```shell\nPetaPoco 对postgres 数据支持有bug , 当插入数据表 表名 会有引号“myTable”, Npgsql.PostgresException:“42P01: 关系 \"myTable\" 不存在”, 实际表是存在的\n```\n"},{"Id":"38330491550","Type":"IssuesEvent","CreatedAt":"2024-05-13T16:28:22","Actor":"runderzero","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13437","RelatedDescription":"Opened issue \"Nuget Package Not Showing in the ToolBox (GunaUI12) [ Nuget Package Issue? ]\" (#13437) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\ndotnet\n\n### Worked before?\n\nYes\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI factory resetted my PC two days ago and now it seems Nuget Packages won't even show in the toolbox?\n\n### Verbose Logs\n\n_No response_"},{"Id":"38312762181","Type":"IssuesEvent","CreatedAt":"2024-05-13T07:59:21","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13436","RelatedDescription":"Opened issue \"Pack should also pack project references (recursive pack)\" (#13436) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nIf you do a `dotnet restore my.csproj` or `dotnet build my.csproj`, it will recursively restore or build all the projects.   `dotnet pack` should do the same.\r\n\r\n```\r\ndotnet new classlib -n ClassLib1\r\ndotnet new classlib -n ClassLib2\r\ndotnet add ClassLib1/ClassLib1.csproj reference ClassLib2\r\ndotnet pack ClassLib1\r\n```\r\n\r\nThe above should create nupkgs for both projects, not just ClassLib1. We can see that ClassLib2 was restored and built, just not packed.\r\n\n\n### Additional Context and Details\n\nWhile `dotnet publish` is similar to `dotnet pack`'s current behaviour, it does not recursively publish all referenced projects, I believe that's fine because the output of referenced projects are included in the target project's output. Therefore, I don't think that `dotnet publish` is \"prior art\" in having non-recursive behaviour as pack is not similar enough to publish."},{"Id":"38310084915","Type":"IssuesEvent","CreatedAt":"2024-05-13T06:25:34","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11881","RelatedDescription":"Closed issue \"An error “unable to find package ‘Microsoft.Web.Infrastructure’” occurs when running command “update-package” in PMC \" (#11881) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Manager Console\n\n### Product Version\n\nDev\\6.3.0.87\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n### Details about Problem\r\nVS Version: Main\\32613.100\r\nNuGet Version: Dev\\6.3.0.87\r\nOS Version: Windows-11-Enterprise-21H2\r\n\r\n### Repro steps:\r\n1.\tCreate a C# ASP.NET Web Application (.NET Framework 4.8) –> MVC project in VS.\r\n2.\tClick the menu Tools->NuGet Package Manager->Package Manager Console.\r\n3.\tType command “update-package” in PMC and hit Enter.\r\n\r\n### Expected:\r\nAll the packages can be update successfully.\r\n\r\n### Actual:\r\nAn error “unable to find package ‘Microsoft.Web.Infrastructure’” occurs as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/173550068-2f438f1d-eb4f-4ad7-814d-33410d74b9e2.png)\r\n### Notes:\r\n1.It does not repro when updating all the packages from PM UI of the same project.\r\n2.It still repro after restoring as the error recommended.\r\n3.It repro on Main\\32613.100 with implicit NuGet Client Dev\\6.3.0.81.\r\n4.It didn't repro on NuGet Dev\\6.3.0.73.\n\n### Verbose Logs\n\n_No response_"},{"Id":"38286077666","Type":"IssuesEvent","CreatedAt":"2024-05-11T09:47:52","Actor":"kchanghui","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13435","RelatedDescription":"Opened issue \"PetaPoco 对postgres 数据支持有bug \" (#13435) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.0.677\n\n### Worked before?\n\n6.0.677\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nPetaPoco 对postgres 数据支持有bug , 当插入数据表 表名 会有引号“myTable”, Npgsql.PostgresException:“42P01: 关系 \"myTable\" 不存在”, 实际表是存在的\n\n### Verbose Logs\n\n```shell\nPetaPoco 对postgres 数据支持有bug , 当插入数据表 表名 会有引号“myTable”, Npgsql.PostgresException:“42P01: 关系 \"myTable\" 不存在”, 实际表是存在的\n```\n"},{"Id":"38285027210","Type":"IssuesEvent","CreatedAt":"2024-05-11T07:42:34","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13434","RelatedDescription":"Opened issue \"[Bug Bash] The offline package source cannot be enabled after disabling it from the ‘Machine-wide package sources’ source list previously in the ‘Options->NuGet Package Manager->Package Sources’ window\" (#13434) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.11.0.49\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on D16.11\\34601.136, but reproes on D17.9\\34601.282.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps: \r\n1. Create a C# Console App (.NET Core 8.0) project in VS.\r\n2. Right-click the project in Solution Explorer window and select ‘Manage NuGet Packages…’ menu item to open PM UI.\r\n3. Click the settings button (gear button) in PM UI.  \r\n4. Click the ‘NuGet Package Manager->Package Sources’ in the opened ‘Options’ window. \r\n5. Disable the source ‘Microsoft Visual Studio Offline Packages’ in the source list ‘Machine-wide package sources’ and click the ‘OK’ button.\r\n6. Click the settings button (gear button) in PM UI again.  \r\n7. Enable the source ‘Microsoft Visual Studio Offline Packages’ again and click the ‘OK’ button.\r\n8. Observe the drop-down list ‘Package sources’ or reopen the ‘Options->NuGet Package Manager->Package Sources’ window again.\r\n\r\n#### Expected Result: \r\nThe offline package source should be enabled again.\r\n\r\n#### Actual Result:\r\nThe offline package source cannot be enabled again as recorded below.\r\n![OfflinePackageSourceDisabled](https://github.com/NuGet/Home/assets/20632625/df1267af-e09a-4e9b-b453-56a67ba2c091)\r\n#### Notes:\r\n1. Repro rate: 100%.\r\n2. It also reproes in the solution-level PM UI.\r\n3. This bug will be fixed automatically after closing VS and create another solution, so it only reproes on clean machines.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-05-14T03:30:18.1550931Z","RunDurationInMilliseconds":947}