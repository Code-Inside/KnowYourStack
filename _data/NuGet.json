{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"30414330089","Type":"PullRequestEvent","CreatedAt":"2023-07-13T23:49:13","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9533","RelatedDescription":"Opened pull request \"Updating to the latest servercommon\" (#9533) at NuGet/NuGetGallery","RelatedBody":"Bringing in the lates changes from ServerCommon."},{"Id":"30276479772","Type":"PullRequestEvent","CreatedAt":"2023-07-07T20:11:54","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9532","RelatedDescription":"Opened pull request \"Password reset redirects to password login page.\" (#9532) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Updated link to password login page.\r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9467"},{"Id":"30127329296","Type":"PullRequestEvent","CreatedAt":"2023-06-30T21:05:57","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9509","RelatedDescription":"Merged pull request \"Add revoke button to API keys page\" (#9509) at NuGet/NuGetGallery","RelatedBody":"* Revoke button added for api keys.\r\n* Existing revocation mechanism used.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9426\r\n\r\nedit by @joelverhagen -- added screenshot\r\n![image](https://github.com/NuGet/NuGetGallery/assets/94054/7f310b08-f091-4dba-908e-9d614a4bea86)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/102933/12e07f2f-60fa-480c-81af-0257d5537b59)\r\n"},{"Id":"30102981188","Type":"IssuesEvent","CreatedAt":"2023-06-29T21:12:57","Actor":"SoftCircuits","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9531","RelatedDescription":"Opened issue \"[NuGet.org Bug]: More Download Count Issues?\" (#9531) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nMy SoftCircuits.Wordify package has been climbing quickly in download counts relative to my other packages. But it seemed to suddenly stopped climbing.\r\n\r\nAs I review the package information, it says the package averages 11 downloads per day. But the download count shown on nuget.org has increased about 10 over the past month.\r\n\r\nI understand that people just may have suddenly just lost interest in my package. But then why does it say I'm averaging 11 downloads per day? Clearly something is off here. And I know there has been issues with the download counts in the past.\r\n\r\nIs there anyway to get this checked?\n\n### Repro Steps\n\nView the average downloads per day vs how fast the total download count grows.\n\n### Expected Behavior\n\nI expected the total download count to grow roughly by the average daily download count each day.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"30098815051","Type":"IssuesEvent","CreatedAt":"2023-06-29T17:23:51","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9518","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Table in README markdown looks ugly due to word wrap that breaks words\" (#9518) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n1. Table in README markdown looks ugly if some column contains a long text due to word wrap that breaks words in other columns even inside the inline code block. Compare rendered tables: Nuget https://www.nuget.org/packages/GlobRegex vs Github https://github.com/dscheg/GlobRegex\r\nGithub markdown looks good even on narrow screens. CSS to fix issue:\r\n```css\r\n.readme-common .table {\r\n  overflow: auto;\r\n  display: block;\r\n  word-break: normal;\r\n}\r\n```\r\n\r\n2. It might be better to have a horizontal scroll and turn off word wrap inside multiline code blocks, because it seems such code is hard to read, given that there are no line numbers and display of hyphens: it is not always clear whether the EOL is in the code itself or word wraping has been applied. The same example links above. CSS to fix issue: `pre code { white-space: pre; }` instead of `pre code { white-space: pre-wrap; }`\r\n\n\n### Repro Steps\n\nCreate readme for the package with:\r\n1. Table with 3 columns with a long text inside the middle column\r\n2. Multiple long lines inside multiline code block\n\n### Expected Behavior\n\n1. Table looks good even with long text in some column\r\n2. Multiline code blocks are easy to read even with long lines\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/1962268/513789fc-7d62-452b-9a10-e2e6607af536)\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"30413510071","Type":"IssuesEvent","CreatedAt":"2023-07-13T22:39:22","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12745","RelatedDescription":"Opened issue \"SourceLink configured incorrectly for NuGet.*.dll binaries shipping with VS\" (#12745) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.6\n\n### Worked before?\n\nnot a regression\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFor Visual Studio 17.6.5, the NuGet binaries shipping in `C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet` aren't working well with SourceLink.\r\n\r\nFor example, if you consider NuGet.Commands.dll, the pdb Guid is `5c317681-5168-4e3a-983e-6e469ba96795`, and the Pdb path is `D:\\a\\_work\\1\\s\\artifacts\\NuGet.Commands\\obj\\release\\net472\\NuGet.Commands.pdb`. \r\n\r\nI am able to download the pdb from symweb NuGet.Commands.pdb/5C31768151684E3A983E6E469BA967951/file.ptr, which redirects to `...\\D1568DA8B119BD3DBCCFD3AA34A882C37A72E6ADC9F8005F65C48CD8E41E00\\nuget.commands.pdb` (ask me for the full path on Teams)\r\n\r\nThe pdb is legacy PDB, not a portable PDB. If you open the .pdb in notepad and search for \"github\", you will only find this piece of Json:\r\n```json\r\n{\"documents\":{\"D:\\\\a\\\\_work\\\\1\\\\s\\\\submodules\\\\NuGet.Build.Localization\\\\*\":\"https://raw.githubusercontent.com/NuGet/NuGet.Build.Localization/239d0ae2156f12ffdba272fcb1ea3d2fb9da4e81/*\"}}\r\n```\r\n\r\nOther document paths are stored in a format such as `D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Commands\\SignCommand\\ISignCommandRunner.cs` which can't be used to download the sources from GitHub via SourceLink.\r\n\r\nTo be able to properly debug into NuGet binaries shipping with VS it is important to have SourceLink configured properly, as well as ideally consider portable Pdbs.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30413040814","Type":"IssuesEvent","CreatedAt":"2023-07-13T22:06:14","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12744","RelatedDescription":"Opened issue \"RestoreCollectorLogger logging into EvaluationLoggingContext after evaluation finished\" (#12744) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nmsbuild.exe 17.6.3+07e294721 for .NET Framework\n\n### Worked before?\n\nnot a regression\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nDuring evaluating MSBuild projects in the IDE we see exceptions under debugger where `RestoreCollectionLogger` is attempting to log into an `EvaluationLoggingContext` which is no longer valid.\r\n\r\nThe exception is:\r\n\r\n```\r\nMicrosoft.Build.Framework.InternalErrorException: MSB0001: Internal MSBuild Error: must be valid\r\n   at void Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(string message, Exception innerException, params object[] args)\r\n   at void Microsoft.Build.BackEnd.Logging.LoggingContext.LogCommentFromText(MessageImportance importance, string message)\r\n   at void Microsoft.Build.BackEnd.SdkResolution.SdkLogger.LogMessage(string message, MessageImportance messageImportance)\r\n   at void Microsoft.Build.NuGetSdkResolver.NuGetSdkLogger.Log(LogLevel level, string data) x 2\r\n   at void NuGet.Commands.RestoreCollectorLogger.Log(IRestoreLogMessage message) x 2\r\n   at void NuGet.Common.LoggerBase.Log(LogLevel level, string data)\r\n   at void NuGet.Common.LoggerBase.LogMinimal(string data)\r\n   at async Task<SortedDictionary<NuGetVersion, PackageInfo>> NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.FindPackagesByIdAsync(string id, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n   at async Task<SortedDictionary<NuGetVersion, PackageInfo>> NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.EnsurePackagesAsync(string id, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n   at async Task<bool> NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.DoesPackageExistAsync(string id, NuGetVersion version, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n   at async Task<LibraryIdentity> NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryCoreAsync(LibraryRange libraryRange, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n   at async Task<LibraryIdentity> NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)+(?) => { }\r\n   at async Task<LibraryIdentity> NuGet.Commands.SourceRepositoryDependencyProvider.FindLibraryAsync(LibraryRange libraryRange, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\n```\r\n\r\nThis line invalidates the logging context after evaluation finishes for a project:\r\nhttps://github.com/dotnet/msbuild/blob/4598629a2493ed6b366ab00d595ecd53a3164b60/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs#L42\r\n\r\nThe chain of loggers is as follows.\r\n\r\nEvaluation -> ResolveSdk(EvaluationLoggingContext) -> new SdkLogger(EvaluationLoggingContext) -> new SdkResolverContext(SdkLogger) -> NuGetSdkResolver.Resolve() -> new NuGetSdkLogger(SdkResolverContext.SdkLogger)\r\n\r\n 1. Evaluation calls into `ResolveSdk` to resolve an SDK such as Arcade, it passes the `EvaluationLoggingContext` which will be later invalidated after the project evaluation finishes\r\n 2. `ResolveSdk` calls `new SdkLogger(EvaluationLoggingContext)`: https://github.com/dotnet/msbuild/blob/4598629a2493ed6b366ab00d595ecd53a3164b60/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs#L22\r\n 3. `new SdkResolverContext` is created and passed the `SdkLogger`\r\n 4. `NuGetSdkResolver.Resolve()` is called and passed the `SdkResolverContext`\r\n 5. `new NuGetSdkLogger` is created and passed the `SdkResolverContext.SdkLogger`: https://github.com/NuGet/NuGet.Client/blob/b3c4e8094bbb924408180d700ae5b3d37713587c/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkLogger.cs#L42\r\n...\r\n(at some point later, it's unclear when or how)\r\n...\r\n\r\n`RestoreCollectorLogger` is passed the `innerLogger` which is the `NuGetSdkLogger`, which internally points to the `SdkLogger`, which in turn uses the `EvaluationLoggingContext`\r\n\r\nI'm guessing after some retries or network latencies the `RestoreCommand` calls `RestoreCollectorLogger.Log`, which calls `_innerLogger.Log` here, which in turn throws:\r\nhttps://github.com/NuGet/NuGet.Client/blob/b3c4e8094bbb924408180d700ae5b3d37713587c/src/NuGet.Core/NuGet.Commands/RestoreCommand/Logging/RestoreCollectorLogger.cs#L149\r\n\r\nAfter debugging for a while, I stopped being able to reproduce this, presumably because of the caches? Afraid to clear the caches now because I have some unrelated valuable context there, but hopefully by reasoning you can figure out under what circumstances the RestoreCollectorLogger can continue logging after the project evaluation that triggered the Sdk resolution completes.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30408017468","Type":"IssuesEvent","CreatedAt":"2023-07-13T17:44:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12743","RelatedDescription":"Opened issue \"NuGetAudit severity bugs\" (#12743) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 8 SDK previews\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nThere are some bugs regarding severity in the .NET 8 previews that introduced NuGetAudit\r\n\r\n1. GitHub advisories are being reported at 1 level lower than they should be. For example, [Newtonsoft.Json's advisory](https://github.com/advisories/GHSA-5crp-9r3c-p9vr) should be reported as high severity, but it's being reported as moderate.\r\n2. The same off-by-1 error means that low severity advisories are never reported.\r\n3. Similarly, using `<NuGetAuditLevel>` will filter out the github advisories of that level, since Audit thinks they're a lower severity than they really are.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30394977005","Type":"IssuesEvent","CreatedAt":"2023-07-13T09:31:31","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12742","RelatedDescription":"Opened issue \"[Bug Bash] No warning info shows when adding a package pattern with a long string which is more than maximum length characters in the “Add New Package Source Mapping” dialog\" (#12742) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.8.0.22\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nVS Version: Main\\33912.166\r\nNuGet Version: Dev\\6.8.0.22\r\nOS Version: Windows-11-Enterprise-22H2 ENU\r\n#### Repro Steps:\r\n1.\tOpen VS, click menu File->New Project, create a Console App (.Net Core) project.\r\n2.\tRight-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’.\r\n3.\tClick the “settings” button on the right panel and click “Package Source Mapping” tab.\r\n4.\tClick “Add” button and type a long string which is more than maximum length characters.\r\n#### Expected:\r\nThere should be a warning info to tell user the maximum length of the string.\r\n#### Actual:\r\nNo warning info shows as below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/dfe330c0-b50d-489f-a799-27578ffc3343)\r\n#### Notes:\r\nIt is not a regression since it is a new feature.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30394160560","Type":"IssuesEvent","CreatedAt":"2023-07-13T09:02:18","Actor":"idg10","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12741","RelatedDescription":"Opened issue \"Analyzer Metapackages\" (#12741) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nIf you want to use a common set of code analyzers across multiple projects, it would be really useful to be able to create a single package that refers to all of the analyzers you want to use, and to reference that single package.\r\n\r\nYou can create metapackages that consist of nothing but references to other packages, but this doesn't work for analyzers, because analyzers are, by design, not transitive. So this seems like it would require a special mechanism by which a metapackage can say \"Here are the packages that should become a development dependency for anything depending in this metapackage.\"\r\n\r\nThere doesn't seem to be a good way to do this.\n\n### Additional Context and Details\n\nThere's a bad way that works...kind of. \r\nFor example, we have an [`Endjin.RecommendedPractices`](https://github.com/endjin/Endjin.RecommendedPractices.NuGet) package that we use to apply certain common settings across a wide range of open source projects that we maintain. It does exactly what I'm describing, but to achieve this, it injects a `.targets` file that meddles with the `PackageReference` item group:\r\n\r\nhttps://github.com/endjin/Endjin.RecommendedPractices.NuGet/blob/f9492c74315bea7693ffb9e114c1ef76f69e8430/src/Endjin.RecommendedPractices.NuGet/build/Endjin.Common.Net.targets#L64-L76\r\n\r\nThe docs make it very clear that you are not meant to do this:\r\n\r\nhttps://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets#guidance-for-the-content-of-msbuild-props-and-targets\r\n\r\nAnd this technique causes a bunch of problems. Tools like dependabot do not understand what's happening. The Visual Studio package manager doesn't understand the origin of the dependency, and suggests updating a package reference in projects using this metapackage any time new versions of the target analyzer ship, but that's an unhelpful suggestion because those projects don't actually have a direct reference, so there's nothing to update.\r\n\r\nThese kinds of problems are to be expected if you do something the docs explicitly tell you not to. But there doesn't appear to be any other way to achieve this today."},{"Id":"30393140723","Type":"IssuesEvent","CreatedAt":"2023-07-13T08:23:53","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9959","RelatedDescription":"Closed issue \"An error “cannot find an instance of the NuGet.VisualStudio.IVsProjectAdapter service” occurred when installing a PackageReference package into a renamed .NET Framework project \" (#9959) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.8.0.6801\r\nVS Version: Main\\30430.19\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps\r\n1. Create a non-.Net SDK-style project [e.g. C# Class Library (.NET Framework)] in VS—named ClassLibrary.\r\n2. Open the PM UI of the project and rename the project (renamed ClassLibraryFw) in Solution Explorer (you can see the PM UI window name had updated automatically to ClassLibraryFw).\r\n3. Back to the PM UI and install a package with PackageReference format.\r\n## Expected\r\nNo error occur.\r\n## Actual\r\nError “cannot find an instance of the NuGet.VisualStudio.IVsProjectAdapter service” occurred as below.\r\n![image](https://user-images.githubusercontent.com/20632625/91719491-ff273400-ebc7-11ea-8456-ce7e5a929b61.png)\r\n## Error Info:\r\n`Microsoft.Assumes+InternalErrorException: Cannot find an instance of the NuGet.VisualStudio.IVsProjectAdapter service.   at Microsoft.Assumes.Fail(String message)   at Microsoft.Assumes.Present[T](T component)   at NuGet.PackageManagement.VisualStudio.NuGetProjectFactory.<CreateNuGetProjectAsync>d__9`1.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at NuGet.PackageManagement.VisualStudio.VSSolutionManager.<UpgradeProjectToPackageReferenceAsync>d__113.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at NuGet.PackageManagement.UI.NuGetUI.<UpdateNuGetProjectToPackageRef>d__10.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at NuGet.PackageManagement.UI.UIActionEngine.<CheckPackageManagementFormat>d__14.MoveNext()--- End of stack trace from previous location where exception was thrown ---   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)   at NuGet.PackageManagement.UI.UIActionEngine.<>c__DisplayClass12_0.<<PerformActionImplAsync>b__0>d.MoveNext()`\r\n## Notes:\r\n1.\tIt does not repro when installing a packages.config package in step3.\r\n2.\tIt seems a legacy issue, repro on D16.7\\30330.147 with implicit NuGet Client Release-5.7.x\\5.7.0.6726."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"},{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-07-14T03:30:23.3786669Z","RunDurationInMilliseconds":1146}