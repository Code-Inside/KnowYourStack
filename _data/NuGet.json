{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"45048806735","Type":"PullRequestEvent","CreatedAt":"2024-12-24T00:26:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10306","RelatedDescription":"Merged pull request \"[OIDC 16] Add IFederatedCredentialValidator for additional token validation\" (#10306) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10305.\r\n\r\nThis adds a new abstraction called `IFederatedCredentialValidator` which allows us to inject custom token validation code (i.e. closed source, \"shim\" code) into the token validation pipeline.\r\n\r\n0 or more `IFederatedCredentialValidator` implementations can be used by the policy evaluator to perform additional validations on bearer tokens. These additional implementations come from the `add-ins` directory via MEF, much like existing shims.\r\n\r\nThe flow of validation BEFORE the change is like this:\r\n1. Parse the JWT\r\n2. Identify the issuer\r\n3. Perform an OSS issuer-specific validation, such as [`EntraIdTokenValidator`](https://github.com/NuGet/NuGetGallery/blob/7c81548db51ed543ff8f6558c1306571a6bb368a/src/NuGetGallery.Services/Authentication/Federated/EntraIdTokenValidator.cs)\r\n4. If the issuer says the token is good, then compare it to the given list of trust policies.\r\n\r\nThis PR adds a new step between 3 and 4 where the request headers (in particular the `Authorization` header) is passed to each `IFederatedCredentialValidator` to get additional token validation results. If either the built-in token validation or any additional `IFederatedCredentialValidator` says the token is bad, it will be rejected. \r\n\r\nWe pass all request headers, the detected issuer type (e.g. Entra ID vs. GitHub Actions), and _unvalidated_ claims to the `IFederatedCredentialValidator`. This essentially provides all the context we have to the shim at the time so it can make the most informed decision.\r\n\r\nAt no point will as \"valid\" result from an `IFederatedCredentialValidator` override a \"bad\" result from the built-in token validation. In other words, if there is an inconsistency between various validation flows, we fail close and reject the token. We will log a warning if any of the validators disagree on valid vs. invalid.\r\n\r\nA `IFederatedCredentialValidator` can return `NotApplicable` if the validator is only meant for a specific issuer. For example, `IFederatedCredentialValidator` might only know how to validate GitHub Actions tokens, not Entra ID tokens. The GitHub Actions example is for the future of course. Right now, the only supported issuer is Entra ID.\r\n\r\nI chose to plumb the request headers in from the service layer (and eventually from the controller action) instead of using the current `HttpContext` so that the flow of data was clearer. I would have preferred to only provide the bearer token to `IFederatedCredentialValidator` instead of all headers, but our internal token validation library expects all request headers, not just the bearer token.\r\n\r\nOur internal token validation shim uses a newer version of Microsoft.Extensions.Caching.Memory so I had to bump up the version to avoid runtime issues."},{"Id":"45042422735","Type":"PullRequestEvent","CreatedAt":"2024-12-23T17:48:21","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10305","RelatedDescription":"Merged pull request \"[OIDC 15] Emit audit records during token exchange and policy admin\" (#10305) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10304.\r\n\r\nThis builds on a previous PR to actually emit new audit records from various \"write\" flows used in the OIDC feature. Most notibly, this provides an audit trail for admin actions on trust policies and an audit trail for token exchange.\r\n\r\nThe description of the audit entries in https://github.com/NuGet/NuGetGallery/pull/10291. This PR needs to come after our internal auditing library is updated to handle the new audit record shape. I have a PR opened for that but I won't link to it here since it is an internal repo."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"45075930008","Type":"IssuesEvent","CreatedAt":"2024-12-25T09:41:24","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13958","RelatedDescription":"Closed issue \"NU3018  The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\" (#13958) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Manager Console\n\n### Product Version\n\ndotnet NET6\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"JavaScript Engine Switcher. ChakraCore 3.26.0\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\n\n### Verbose Logs\n\n_No response_"},{"Id":"45075913980","Type":"IssuesEvent","CreatedAt":"2024-12-25T09:40:06","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14022","RelatedDescription":"Opened issue \"[Bug Bash] The text content of “README” tab isn’t visible in the detail panel of PM UI when the tab is too short to see its vertical scroll bar \" (#14022) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.105\n\n### Worked before?\n\nIt is not a regression it is a new feature.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\nThe repro rate is 100%.  \r\n\r\nIt doesn’t repro on the text content of “Package Details” tab. \r\n\r\nIt’s not a regression since it is a new feature. \r\n\r\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET framework 4.8.1) project in VS. \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.  \r\n\r\n3. Select the package source: \"nuget.org\" near the gear button.  \r\n\r\n4. Go to the “Browse\" tab and install any package (e.g. “Newtonsoft.Json”) into the Project. \r\n\r\n5. Click the “Installed” tab and switch to “README” tab. \r\n\r\n6. Drag the bottom edge of the “Error List” window to make “README” tab very short (cannot see the vertical scroll bar of this tab). \r\n\r\n#### Expected:    \r\n\r\nThe text content of “README” tab is visible (same with the “Package Details” tab) by sliding vertical scroll. \r\n\r\n \r\n\r\n#### Actual:    \r\n\r\nThe text content of “README” tab isn’t visible as below screenshot:  \r\n![image](https://github.com/user-attachments/assets/b90ff782-7990-40fb-8142-d41b2b67e432)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"45066712459","Type":"IssuesEvent","CreatedAt":"2024-12-24T17:55:57","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14021","RelatedDescription":"Opened issue \"Update doc: `dotnet list package --vulnerable` uses AuditSources\" (#14021) at NuGet/Home","RelatedBody":"Update the doc for `dotnet list package --vulnerable` to mention that `<AuditSources>` are also used as a source of vulnerability data"},{"Id":"45063828010","Type":"IssuesEvent","CreatedAt":"2024-12-24T14:57:34","Actor":"304NotModified","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14020","RelatedDescription":"Opened issue \"Flaky restore, NU1107 version conflict\" (#14020) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.404 (nuget  6.12.1.1)\n\n### Worked before?\n\nyes, not sure which version\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nIf I run  `dotnet.exe restore mySolution.sln --configfile someconfig.config --verbosity minimal`\r\n\r\nIt works most of the times (~80%), and sometimes gives NU1107 (with the same code, commit, versions etc)\r\n\r\nThis is on Azure DevOps pipelines (Windows 2022), but also sometimes in VS 2022 (Windows 11)\r\n\r\nI get this error:\r\n```\r\nC:\\Data\\Agent\\_work\\2005\\s\\Backend\\MyProject\\MyProject.csproj : error NU1107: Version conflict detected for Microsoft.Extensions.DependencyInjection.Abstractions. Install/reference Microsoft.Extensions.DependencyInjection.Abstractions 8.0.0 directly to project MyProject to resolve this issue.  [C:\\Data\\Agent\\_work\\2005\\s\\mySolution.sln]\r\nC:\\Data\\Agent\\_work\\2005\\s\\Backend\\MyProject\\MyProject.csproj : error NU1107:  MyProject -> Microsoft.Extensions.Options.DataAnnotations 8.0.0 -> Microsoft.Extensions.DependencyInjection.Abstractions (>= 8.0.0)  [C:\\Data\\Agent\\_work\\2005\\s\\mySolution.sln]\r\nC:\\Data\\Agent\\_work\\2005\\s\\Backend\\MyProject\\MyProject.csproj : error NU1107:  MyProject -> Microsoft.Extensions.DependencyInjection 8.0.1 -> Microsoft.Extensions.DependencyInjection.Abstractions (>= 8.0.2). [C:\\Data\\Agent\\_work\\2005\\s\\mySolution.sln]\r\n  Failed to restore C:\\Data\\Agent\\_work\\2005\\s\\Backend\\MyProject\\MyProject.csproj (in 222 ms)\r\n```\r\n\r\nI don't get it:\r\n- Why isn't  Microsoft.Extensions.DependencyInjection.Abstractions 8.0.2 selected?\r\n- Why does this work most of the time (same commit, same .NET version, same nuget.exe version)\r\n\r\nIf it does work, it will use 8.0.2 (as expected) - visible with `dotnet list mySolution.sln package)\r\n\r\n```\r\n   [net8.0]: \r\n   Top-level Package                                            Requested   Resolved\r\n   > Microsoft.ApplicationInsights                              2.*         2.22.0  \r\n   > Microsoft.Extensions.Configuration.Abstractions            8.*         8.0.0   \r\n   > Microsoft.Extensions.Configuration.Binder                  8.*         8.0.2   \r\n   > Microsoft.Extensions.DependencyInjection.Abstractions      8.*         8.0.2   \r\n   > Microsoft.Extensions.Http                                  8.*         8.0.1   \r\n   > Microsoft.Extensions.Logging.Abstractions                  8.*         8.0.2   \r\n```\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"45053492770","Type":"IssuesEvent","CreatedAt":"2024-12-24T06:16:15","Actor":"WeihanLi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14019","RelatedDescription":"Opened issue \"Include the fixed version info in the nuget audit warning message if possible\" (#14019) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nCurrently, we have the vulnerability url in the message, but not the fixed version, we could get the fixed version from the URL, while we may not care about the vulnerability details, just want to update a fixed version to stay safe, it would be convenient to include the fixed version in the message.\r\n\r\n> error NU1903: Warning As Error: Package 'System.Text.Json' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-hh2w-p6rv-4g7w\r\n\n\n### Additional Context and Details\n\nIt may also contribute to https://github.com/NuGet/Home/issues/13372\r\n"},{"Id":"45042316040","Type":"IssuesEvent","CreatedAt":"2024-12-23T17:43:08","Actor":"dfederm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14018","RelatedDescription":"Opened issue \"Graph restore fails due to unexpanded wildcards\" (#14018) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nvarious\n\n### Worked before?\n\nno\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nProject with something like:\r\n\r\n```xml\r\n    <ZipContent Include=\"ItemTemplates\\**\\*\">\r\n      <Archive>ItemTemplates\\$([System.IO.Path]::GetDirectoryName('%(RecursiveDir)')).zip</Archive>\r\n      <ArchivePath>%(Filename)%(Extension)</ArchivePath>\r\n    </ZipContent>\r\n```\r\n\r\nresults in:\r\n> MSB4184: The expression \"[System.IO.Path]::GetDirectoryName('')\" cannot be evaluated. The path is not of a legal form.\r\n\r\nUpon inspecting the binlog (after commenting out the metadata):\r\n\r\n![image](https://github.com/user-attachments/assets/3ca93519-0b1b-4858-92b4-7eb7d1ccc945)\r\n\r\nPoking around I found that static graph restore sets `MSBuildSkipEagerWildCardEvaluationRegexes` to avoid expanding wildcards.\n\n### Verbose Logs\n\n_No response_"},{"Id":"45002841213","Type":"IssuesEvent","CreatedAt":"2024-12-21T12:43:25","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13950","RelatedDescription":"Closed issue \"Restore trying the wrong source, and failing if that is unavailable\" (#13950) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100\n\n### Worked before?\n\nVersion 8, not sure exactly which\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI have a [GitHub repo](https://github.com/MrYossu/Pixata.Utilities) that generates [various Nuget packages](https://www.nuget.org/packages?q=pixata), one of which uses Telerik components for Blazor.\r\n\r\nThe `nuget.config` file for the repo can be [seen here](https://github.com/MrYossu/Pixata.Utilities/blob/master/nuget.config), and the YAML file for the master branch can be [seen here](https://github.com/MrYossu/Pixata.Utilities/blob/master/.github/workflows/master.yml).\r\n\r\nI have built this repo (and consequently published the packages) many times, and have never had problems (other than my own of course!). However, I pushed some changes today, and the build failed.\r\n\r\nFor every package referenced in the repo, I get lines like the following...\r\n\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor\\Pixata.Blazor.csproj : error NU1301: Failed to retrieve information about 'Microsoft.AspNetCore.Components' from remote source 'https://nuget.telerik.com/nuget/FindPackagesById()?id='Microsoft.AspNetCore.Components'&semVerLevel=2.0.0'.\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor\\Pixata.Blazor.csproj : error NU1301:   Response status code does not indicate success: 503 (Service Unavailable).\r\n\r\nNotice that the package in question is not a Telerik one, so I have no idea why it's looking on the Telerik feed. Also, the Telerik feed is the second one in the `nuget.config` file, so I would have expected it to check the nuget feed first. Furthermore, if I open the package manager in Visual Studio and look for packages on the Telerik feed, it finds them fine, which implies that the feed is working fine.\r\n\r\nI tried commenting out the line in `nuget.config` that references the Telerik feed, but that failed...\r\n\r\n>D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor.TelerikComponents\\Pixata.Blazor.TelerikComponents.csproj : error NU1101: Unable to find package Telerik.UI.for.Blazor. No packages exist with this id in source(s): C:\\Program Files\\dotnet\\library-packs, NuGet\r\n>  Failed to restore D:\\a\\Pixata.Utilities\\Pixata.Utilities\\Pixata.Blazor.TelerikComponents\\Pixata.Blazor.TelerikComponents.csproj (in 9.21 sec).\r\n\r\nI tried adding `` --ignore-failed-sources` to each `dotnet restore` line in the `.yaml` file, but that didn't help. The build failed with the same results. Didn't try the nuget feed after the Telerik one failed.\r\n\r\nAnyone able to advise? I need to publish a new version of a package, but can't.\r\n\r\nPlease let me know if there is any more info I can add.\r\n\r\nThanks\n\n### Verbose Logs\n\n_No response_"},{"Id":"44995666921","Type":"IssuesEvent","CreatedAt":"2024-12-20T22:45:14","Actor":"JoshuaBStevens","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14016","RelatedDescription":"Opened issue \"Setting \"Allow format selection on first package install\" meaning is unclear\" (#14016) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.13.0 Preview 3.0 [35619.97.main]\n\n### Worked before?\n\nN/A\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI couldn't understand what this setting on the NuGet > General page meant until Donnie explained it to me.  I read \"format selection\" as being about formatting text.  I'd suggest using the word \"prompt\", as in \"Prompt for format selection on first package install\".\n\n### Verbose Logs\n\n_No response_"},{"Id":"44995136578","Type":"IssuesEvent","CreatedAt":"2024-12-20T22:12:23","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14015","RelatedDescription":"Opened issue \"packages.lock.json reappears from deleted project after switching git branches\" (#14015) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/packageslockjson-reappears-from-delete/10812090)._\n\n---\n[severity:It bothers me. A fix would be nice]\nAll steps are done in VS2022 17.12.3, with the available built-in tools for project edition and git operations, in 1 active session.\n\n1. Create a new project in an existing solution \n2. Set &lt;RestorePackagesWithLockFile&gt;true&lt;/RestorePackagesWithLockFile&gt; in the csproj\n3. Add some nuget dependencies to the project\n4. Commit / Push the new project to a new branch in the git repository\n5. Switch back to a git branch where the created project does not exist.\n\nSwitching from a branch where a project exists to a branch where the project doesn't exist reproduces the issue.\n\nActual result: After a build the packages.lock.json will appear despite the projet not being here. Deleting the project folder doesn't seem to fix this behavior.\n\nExpected result: The packages.lock.json shouldn't reappear when the project disappeared in the git and solution contexts.\n\nWorkaround: Restarting Visual Studio fixes the issue.\n\n---\n### Original Comments\n\n#### Feedback Bot on 12/12/2024, 09:39 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Nigusu Yenework [MSFT] on 12/13/2024, 00:37 PM: \n\n<p>Thank you for reaching out. Shouldn’t the lock file be created within the folder of the new project you added? When you switch back to the other branch, wouldn’t the entire project folder (including the lock file) be expected to disappear? Could you clarify if the folder persists even after switching branches?</p>\n<p><strong>Why do we ask for more info?</strong><br>\nWe try to reproduce all issues reported with the information provided in the description and comments. When we can’t reproduce the issue, we ask you for more information so we can resolve the issue as quickly and efficiently as possible.<br>\nIn our <a target='_blank' href=\"https://aka.ms/vsfeedbackguidelines/#writing-a-good-bug-report-or-feature-suggestion\">guidelines</a>, you can get tips on how to provide clear and simple reproducible steps.</p>\n\n#### Matthieu Penant on 12/16/2024, 05:42 AM: \n\n<p>I created a repro project on github that exhibits the issue: <a target='_blank' href=\"https://github.com/Thieum/TestPackageLock\">https://github.com/Thieum/TestPackageLock</a></p>\n<p>The project used to reproduce the issue is a MSTest project. Switching from test-branch to master reproduces the issue on my machine.</p>\n<p>The commits also show the changes made for empty projects and solution.</p>\n<p>In this situation, switching from a branch where the project exists, to the branch where it does not, does not delete the project folder entirely. A folder persists with a bin / obj folder.</p>\n<p>The bin folder is empty, the obj folder is not.</p>\n<p>Rebuilding logs a restore on the disapeared project and creates the lock file :</p>\n<p>Rebuild started at 15:29…<br>\nRestored C:\\Users\\x\\Source\\Repos\\TestPackageLock\\TestPackageLock\\TestPackageLock.csproj (in 7 ms).<br>\n1&gt;------ Rebuild All started: Project: TestPackageLock, Configuration: Debug Any CPU ------<br>\nRestored C:\\Users\\x\\Source\\Repos\\TestPackageLock\\testPackageLock.Tests\\testPackageLock.Tests.csproj (in 70 ms).<br>\n1&gt;TestPackageLock -&gt; C:\\Users\\thieu\\Source\\Repos\\TestPackageLock\\TestPackageLock\\bin\\Debug\\net8.0\\TestPackageLock.dll</p>\n\n#### Nikolche Kolev [MSFT] on 12/20/2024, 02:12 PM: \n\n<p><a target='_blank' href=\"https:///user/16451\">Matthieu Penant</a></p>\n<p>thanks for the details.</p>\n<p>I can repro this.<br>\nLikely related to how unloaded projects are supposed to work.</p>\n<p><a target='_blank' href=\"https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1105#visual-studio\">https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1105#visual-studio</a></p>\n"},{"Id":"44992611522","Type":"IssuesEvent","CreatedAt":"2024-12-20T19:58:23","Actor":"IEvangelist","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14014","RelatedDescription":"Opened issue \"The `nuget push` command failure is misleading\" (#14014) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n**Context:**\r\n\r\nA few years ago, I wrote some packages that were prefixed with `GitHub.*` and GitHub has since reserved that prefix. The existing packages that I've maintained are able to be updated, but I'm not able to push new packages with the prefix anymore. I'm good with all that, but I was unaware that the prefix was reserved as the error/failure messages are misleading.\r\n\r\n**Reproduce:**\r\n\r\nPush a package to the official feeds where the package ID includes a prefix that is reserved.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-26T03:30:22.8069699Z","RunDurationInMilliseconds":1391}