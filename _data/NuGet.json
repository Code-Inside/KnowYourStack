{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40900887987","Type":"PullRequestEvent","CreatedAt":"2024-08-09T16:58:03","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10122","RelatedDescription":"Merged pull request \"Packaging for LogIntegration\" (#10122) at NuGet/NuGetGallery","RelatedBody":"A building block for NuGet/Engineering#5082\n\nAdds packaging support to create a wheel file using Poetry"},{"Id":"40898073804","Type":"PullRequestEvent","CreatedAt":"2024-08-09T15:11:40","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10122","RelatedDescription":"Opened pull request \"Cnov-statslogparser-packaging\" (#10122) at NuGet/NuGetGallery","RelatedBody":"A building block for NuGet/Engineering#5082\n\nAdds packaging support to create a wheel file using Poetry"},{"Id":"40896014492","Type":"PullRequestEvent","CreatedAt":"2024-08-09T14:05:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10115","RelatedDescription":"Merged pull request \"Add auth to V3 monitoring search cursor URLs\" (#10115) at NuGet/NuGetGallery","RelatedBody":"Currently the storage containers for our regional search instances are public. This is okay from a privacy standpoint (all of the content in there is public package metadata). But it is unnecessary. They are really internal storage accounts that should not have external callers. It will make our compliance simpler if we just lock these storage accounts down and use auth in the places that allow access.\r\n\r\nCurrently, this is our V3 monitoring pipeline, our cursor monitoring system (Synthetics), and NuGet Insights.\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/5576.\r\n\r\nThis PR adds support for using SAS or managed identity for accessing the Azure Search cursor URLs in the V3 monitoring pipeline. \r\n\r\nSummary of changes:\r\n- Enable base64 decoding on queue client. This is a breaking change in the new SDK (base64 encoding was forced on WindowsAzure.Storage)\r\n- Add `AzureBlobCursor` which is a `ReadCursor` implementation using `BlobClient`. This allows auth'd scenarios.\r\n- Fix default storage suffix for creating storage queues. This was broken before.\r\n- Add `-searchCursorSasValue-*` and `-searchCursorUseManagedIdentity-*` arguments to MonitoringProcessor and CatalogToMonitoring so that credentials can be plumbed in for accessing the search cursors. \r\n- Refactor `SearchEndpointConfiguration` and related types to allow the various search cursor read scenarios.\r\n- Improve UT coverage for `CommandHelpers`."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40929071884","Type":"IssuesEvent","CreatedAt":"2024-08-11T20:01:28","Actor":"MalcolmAnderson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13693","RelatedDescription":"Opened issue \"Page states that: Nuget Path is Windows: %ProgramFiles(x86)%\\NuGet\\Config - this is not true in VSC 2022\" (#13693) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 2022 - default install\n\n### Worked before?\n\nNo\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nPlease let me know what additional info is needed, I'm not a \"VSC expert\", and I'm approaching \"NuGet beginner\"\r\n\r\nMy current mission is to edit the paths pointing to \"Program Files (x86)\" because VSC 2022 apparently does not install into the (x86) dir anymore.\r\n\r\nOn a clean machine (never had ms dev products other than VSCode installed before)\r\ninstall Visual Studio Community 2022.\r\nTry to build a solution.\r\nError states:\r\nError (active)\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nNuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages'.\r\n\r\nThat is because on my machine, there are no VSC or Nuget directories in Program Files (x86)\r\nThe nuget package manager options show  2 different files that are being searched for in Program Files (x86)\r\nMicrosoft.VisualStudio.Offline.config and\r\nMicrosoft SDKs\\NuGetPackages\\\r\n![vsc_2022_nuget defaults to looking in ProgramFiles (x86)](https://github.com/user-attachments/assets/0c9b8035-b668-44c4-8872-964d0e8baf82)\r\n\r\n![vsc_2022_nuget defaults to looking in ProgramFiles (x86) - 2](https://github.com/user-attachments/assets/5b611a76-d854-4398-b2c3-9321f062ea76)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40927350434","Type":"IssuesEvent","CreatedAt":"2024-08-11T16:33:30","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13692","RelatedDescription":"Opened issue \"NuGet's dependency graph resolution algorithm does not scale well for large graphs\" (#13692) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nNuGet's current dependency graph resolution algorithm can be rather slow for large, complex graphs.  It walks the entire tree and for each level expands out every single node. This creates more of a tree representation but also includes duplicates.  Consider a popular package, `PackageX`, that might show up as a common dependency for lots of packages.  NuGet will create a graph in memory like this:\r\n\r\n```\r\nProjectA\r\n ├─ PackageA\r\n │  └─ PackageX\r\n │     ├─ PackageY\r\n │     └─ PackageZ\r\n ├─ PackageB\r\n │  └─ PackageX\r\n │     ├─ PackageY\r\n │     └─ PackageZ\r\n ├─ PackageC\r\n │  └─ PackageX\r\n │     ├─ PackageY\r\n │     └─ PackageZ\r\n ├─ PackageD\r\n │  └─ PackageX\r\n │     ├─ PackageY\r\n │     └─ PackageZ\r\n └─ PackageE\r\n    └─ PackageX\r\n       ├─ PackageY\r\n       └─ PackageZ\r\n```\r\n\r\nIn restores for large repos internal to Microsoft, individual projects end up with _millions_ of nodes in the graph. \r\n\r\nAfter create the graph, NuGet then walks through the graph N times looking for versions to eclipse, detecting cycles, detecting version conflicts, and detecting downgrades.  Walking millions of nodes several times causes restore times for 2,500 projects to be around 15 minutes.\n\n### Desired Behavior\n\nWe should rewrite the dependency graph resolution algorithm to be linear by having it only walk each node once, resolving versions as it goes.  Doing this in a single pass will greatly reduce the amount of time it takes to resolve complex graphs.\n\n### Additional Context\n\n_No response_"},{"Id":"40906609230","Type":"IssuesEvent","CreatedAt":"2024-08-09T21:12:38","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13691","RelatedDescription":"Opened issue \"[Feature] Add a command line flag to NuGet restore to verify contents of packages already extracted to cache\" (#13691) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nDuring the `restore` process, it would be beneficial to include a flag that verifies the contents of packages already stored in the cache. This could be done by checking the hash of the extracted contents against the original package hash to ensure they match.\r\n\r\nIf discrepancies are found, the flagged packages could be re-downloaded and re-extracted, while valid packages remain untouched.\n\n### Additional Context and Details\n\nThere have been instances where changes were detected in the cache, but identifying which specific packages were affected was challenging. The current workaround involves clearing the entire cache and starting the restore process from scratch, which can be time-consuming. A verification flag would allow users to quickly check the validity of cached packages, improving performance by avoiding unnecessary cache clearing and full restores."},{"Id":"40906498231","Type":"IssuesEvent","CreatedAt":"2024-08-09T21:06:45","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13687","RelatedDescription":"Closed issue \"[Bug Bash] The showing behaviors of transitive vulnerable package are inconsistent between project-level PM UI and solution-level PM UI \" (#13687) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.12.0.60\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since the vulnerability InfoBar does not display in the Solution Explorer window when the transitive package is a vulnerable package in .NET SDK 8.0.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:    \r\n\r\n1. Open VS and create a C# Console App (.NET 9.0) project. \r\n\r\n2. Right-click the project in Solution Explorer and select ‘Manage NuGet Packages…’ menu item to open the project-level PM UI.  \r\n\r\n3. Click “Browse” tab, search for the package ‘FSharp.Net.Http’ that has dependencies of vulnerable package and click the “Install” button on the right. \r\n\r\n4. Observe the Solution Explorer window, a golden InfoBar and a link “Manage NuGet Packages” will show on the top of the Solution Explorer window. \r\n\r\n5. Click the link “Manage NuGet Packages” on the golden InfoBar. \r\n\r\n#### Expected:    \r\n\r\nThe showing behaviors of transitive vulnerable package should be consistent between project-level PM UI and solution-level PM UI. \r\n\r\n#### Actual: \r\n\r\nThe showing behaviors of transitive vulnerable package are inconsistent between project-level PM UI and solution-level PM UI as below. (The warning icon and vulnerable info are showing on project-level PM UI, but not showing on solution-level PM UI.) \r\n![Unbenannt](https://github.com/user-attachments/assets/c0a6baf2-3be0-4004-a3b1-2bac62b2752c)\r\n#### Note:     \r\n\r\n1. The repro rate is 100%. \r\n2. The transitive vulnerable package info/warning-icon should be involved into solution-level PM UI because of the “The solution contains package with vulnerabilities” message at the top of the Solution Explorer window.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-12T03:30:18.3652931Z","RunDurationInMilliseconds":970}