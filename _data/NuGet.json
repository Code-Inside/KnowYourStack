{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"41809004536","Type":"PullRequestEvent","CreatedAt":"2024-09-10T22:37:11","Actor":"adityapatwardhan","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10179","RelatedDescription":"Opened pull request \"Set `SendCertificateChain` option in KeyVaultReader to enable SN+I authentication\" (#10179) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Set the ClientCertificateCredentialOptions with SendCertificateChain when the KeyVaultConfiguration is configured with SendCertificateChain\r\n"},{"Id":"41805547836","Type":"IssuesEvent","CreatedAt":"2024-09-10T20:06:14","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10177","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Make \"Validation\" Faster #5183 (The closed issue in 2017 still exists\" (#10177) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nUploading nuget package takes forever. This is a serious blocker of our work. It doesn't have the same behavior all the time. This issue is old since 2017 with the number #5183. But actually it's still there.\n\n### Repro Steps\n\nTry to upload a nuget package at different times and check the time it takes to be published\n\n### Expected Behavior\n\nUploading new nuget packages takes a reasonable time.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/a563c68a-c19d-42c9-ba0d-da1a6b716513)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"41800597948","Type":"IssuesEvent","CreatedAt":"2024-09-10T17:15:56","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13734","RelatedDescription":"Closed issue \"Explicitly enabling NuGet audit leads to incorrect NU1008 errors\" (#13734) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n9.0.100-preview.5.24307.\r\n\r\n### Worked before?\r\n\r\nUnknown\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nClone roslyn: https://github.com/dotnet/roslyn. Then add the following to `Directory.Packages.props`\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>\r\n\r\n    <!-- Add these three lines -->    \r\n    <NugetAuditMode>all</NuGetAuditMode>\r\n    <NugetAuditLevel>moderate</NugetAuditLevel>\r\n    <NugetAudit>true</NuGetAudit>\r\n\r\n  </PropertyGroup>\r\n  <Import Project=\"eng\\Directory.Packages.props\" />\r\n</Project>\r\n\r\n```\r\n\r\nChange `NuGet.config` to include \r\n\r\n```xml\r\n  <auditSources>\r\n      <clear />\r\n      <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </auditSources>\r\n```\r\n\r\nNow run `dotnet restore Rosyln.sln` and it will produce several hundred NU1008 errors. \r\n\r\n> C:\\Users\\jaredpar\\code\\roslyn-2\\src\\Compilers\\Test\\Resources\\Core\\Microsoft.CodeAnalysis.Compiler.Test.Resources.csproj : error NU1008: Projects that use central package version management should not define the version on the PackageReference items but on the PackageVersion items: Microsoft.CodeAnalysis.NetAnalyzers;Roslyn.Diagnostics.Analyzers;Microsoft.VisualStudio.Threading.Analyzers;Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers;RichCodeNav.EnvVarDump.\r\n\r\nThese errors are incorrect as none of the `PackageReference` involved have explicit versions. The repo already uses CPM so this error would've been firing already. Its' the addition of the nuget audit properties that triggers this to happen. \r\n\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"41797896980","Type":"IssuesEvent","CreatedAt":"2024-09-10T15:50:47","Actor":"namerril","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13777","RelatedDescription":"Opened issue \"NuGet Restore is inconsistent about raising NU1201\" (#13777) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild 17.10.4.21802\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nJustification: I'm attempting to build a package that depends on several different tools packages.  These tools packages are built in the same repo and produce a package that is target framework independent.  They are *not* dotnet tools.\r\n\r\nFor simplicity, I have the following projects:\r\n\r\nParent.csproj:\r\n```<Project Sdk=\"Microsoft.Build.NoTargets\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <PackageId>Parent.Package</PackageId>\r\n    <NoWarn>NU5128</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Child1\\Child1.csproj\" ReferenceOutputAssembly=\"true\" />\r\n    <ProjectReference Include=\"..\\Child2\\Child2.csproj\" ReferenceOutputAssembly=\"true\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nBoth Child.csproj projects look like the following:\r\n\r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n    <AssemblyName>Child1</AssemblyName>\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <NoWarn>NU5128</NoWarn>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <None Include=\"$(OutputPath)\\$(AssemblyName).exe\" PackagePath=\"tools\" Pack=\"true\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nEXCEPT Child2.csproj targets net6.0 instead of net472.\r\n\r\nThe net6.0 target framework causes the following error: `error NU1201: Project Child2 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project Child2 supports: net6.0 (.NETCoreApp,Version=v6.0)`\r\n\r\nThis is confusing to me.  Netstandard2.0 is not compatible with BOTH net6.0 and net472.  However, only net6.0 throws the error?\r\n\r\nMy real goal is to add the project references as a dependency to the NuGet, ignoring the target framework being used to build the tools DLL.  Is this possible?\n\n### Verbose Logs\n\n_No response_"},{"Id":"41791791031","Type":"IssuesEvent","CreatedAt":"2024-09-10T13:18:17","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13773","RelatedDescription":"Closed issue \"Saving PackageManagementFormat throws Nullable object must have a value.\" (#13773) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nany\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nWhen calling `ApplyChanges` on `PackageManagementFormat` settings , if the nullable property `_showDialogValue` is not set, the attempt to save settings to disk will fail.\r\n\r\n1. Create a PackageManagementFormat\r\n2. Do not call a `get` method for `Enabled` property\r\n3. Call `ApplyChanges` and observe the InvalidOperationException\n\n### Verbose Logs\n\n_No response_"},{"Id":"41791766390","Type":"IssuesEvent","CreatedAt":"2024-09-10T13:18:01","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13768","RelatedDescription":"Closed issue \"testFile.txt is not cleaned up after running Tests\" (#13768) at NuGet/Home","RelatedBody":"After running unit tests in the NuGet.Client repo., I noticed there are non-empty folders remaining in my `.test/work/` directory.\r\n\r\nIt seems that NuGet.Test.Utility.TestDirectory attempts to delete test folders after test completion; however, `NuGetPackageFileServiceTests` do 2 things:\r\n1. Files are locked open due to their file sharing access.\r\n2. A readonly test file is created, so it cannot be deleted\r\n\r\nExample of leftover test artifacts on my machine:\r\n![image](https://github.com/user-attachments/assets/aaffbc4c-6762-4994-b3c1-e06efebbbf49)\r\n\r\n"},{"Id":"41791762708","Type":"IssuesEvent","CreatedAt":"2024-09-10T13:17:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13766","RelatedDescription":"Closed issue \"Default Package icon shown even when embedded icon file exists on disk\" (#13766) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nAs identified in https://github.com/NuGet/Home/issues/9250, on the Browse tab, when search results come from an upstream source in an Azure DevOps feed the package icon may be inaccessible.\n\n### Desired Behavior\n\nIf the package already exists in the global packages folder or other local folder on the machine, load the icon from there rather than show the default icon.\n\n### Additional Context\n\n_No response_"},{"Id":"41781709191","Type":"IssuesEvent","CreatedAt":"2024-09-10T08:35:08","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13681","RelatedDescription":"Closed issue \"Update documentation for INuGetProjectService.GetInstalledPackagesAsync() to show that projects can be returned with result.Packages with empty InstallPath\" (#13681) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet SDK, Other/NA\r\n\r\n### Product Version\r\n\r\n17.10.5\r\n\r\n### Worked before?\r\n\r\nYes\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nTest Explorer in Visual Studio 2022 is having pretty bad performance due to an issue in INuGetProjectService.GetInstalledPackagesAsync() returning result.Packages with empty InstallPath\r\n\r\nRepro:\r\n- Open VS 2022 (main)\r\n- Open Roslyn.sln https://github.com/dotnet/roslyn \r\n- Open Test Explorer\r\n- Run the test 'Interceptors'\r\n- Open the Output Window | Tests\r\n\r\n\r\n```\r\n[8/1/2024 5:01:37.677 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.CSharp.EndToEnd.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.771 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.Build.Tasks.CodeAnalysis.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.780 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.CSharp.ExpressionCompiler.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.820 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.EditorFeatures.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.821 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.CSharp.Workspaces' referenced in project 'Microsoft.CodeAnalysis.EditorFeatures.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.821 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.VisualBasic.Workspaces' referenced in project 'Microsoft.CodeAnalysis.EditorFeatures.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:37.821 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Workspaces.Common' referenced in project 'Microsoft.CodeAnalysis.EditorFeatures.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:39.673 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:46.635 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.LanguageServer.Protocol.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:01:46.635 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.CSharp.Workspaces' referenced in project 'Microsoft.CodeAnalysis.LanguageServer.Protocol.Test.Utilities'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n\r\n...\r\n[8/1/2024 5:03:44.886 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:03:44.886 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.CSharp.Workspaces' referenced in project 'Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:03:44.886 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.VisualBasic.Workspaces' referenced in project 'Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:03:44.886 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Workspaces.Common' referenced in project 'Microsoft.VisualStudio.LanguageServices.CSharp.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n[8/1/2024 5:03:45.253 PM]  Failed to determine installation location for NuGet package 'Microsoft.CodeAnalysis.Common' referenced in project 'Microsoft.CodeAnalysis.CSharp.Emit2.UnitTests'. Check to make sure that a NuGet restore operation has been performed for this project and that no errors were reported during this operation.\r\n```\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"41767662500","Type":"IssuesEvent","CreatedAt":"2024-09-09T21:11:07","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13694","RelatedDescription":"Closed issue \"Default tab selection on Manage NuGet Packages\" (#13694) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nDefault tab selection is \"Installed\" while there are Browse, Installed and Updates tabs on fresh created empty project.\r\n![Screenshot 2024-08-12 141420](https://github.com/user-attachments/assets/bd417e4c-99c6-4455-acd5-429d96a347fa)\r\n\n\n### Desired Behavior\n\nDefault tab should be selected \"Browse\" instead of Installed on fresh created empty project.\r\n\n\n### Additional Context\n\nThousands of users use NuGet. A few seconds of UI improvements may result saving time, energy thus leads greener world."},{"Id":"41765696839","Type":"IssuesEvent","CreatedAt":"2024-09-09T20:00:34","Actor":"baronfel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13776","RelatedDescription":"Opened issue \"Walk TFMs in parallel when collecting pack outputs\" (#13776) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nToday, the `_WalkEachTargetPerFramework` target uses a large number of `MSBuild` Tasks in single-item batches to collect outputs to put into the final package. Each Task invocation incurs some overhead, and each Task invocation must be built sequentially. This results in relatively long and straight units of work. This looks like this:\r\n\r\n![image](https://github.com/user-attachments/assets/d5bd9c0c-7abc-4cbe-af90-5ffb1344fa71)\r\n\n\n### Desired Behavior\n\n`_WalkEachTargetPerFramework` should issue batches of parallel work to the `MSBuild` Task invocations so that the engine can schedule the parallel work items more efficiently. This should result in increased performance with no change to functionality. That would look like this:\r\n\r\n![image](https://github.com/user-attachments/assets/b09279a8-d185-401d-bbb0-5fc00a2c855b)\r\n\n\n### Additional Context\n\n_No response_"},{"Id":"41760167865","Type":"IssuesEvent","CreatedAt":"2024-09-09T16:49:30","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13632","RelatedDescription":"Closed issue \"`dotnet list package` does not work if project is using central package management system, after upgrading to `.NET 8.0`\" (#13632) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.x\r\n\r\n### Worked before?\r\n\r\n7.0.x\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\n1. Create a project that is managing package versions centrally.\r\n2. Run `dotnet restore`\r\n3. Run `dotnet build`\r\n4. Run `dotnet list package --vulnerable` using any `.NET 8.0` SDK (in the example, `8.0.303` was used).\r\n\r\n**Expected behavior:** The command must complete and list any vulnerable package.\r\n**Actual behavior:** The command fails as it cannot read the package references.\r\n\r\n---\r\nSince upgrading to `.NET 8.0`, the NuGet command to list packages (with any combination, but particularly with `--vulnerable`), is failing to complete when ran against a project which is using `Directory.Package.props` for managing its dependencies centrally.\r\n\r\nThe command mentions that it is unable to read the package references from the project, like the picture below:\r\n\r\n![net8](https://github.com/user-attachments/assets/40d8c793-b17d-4be1-a99c-f26046b80473)\r\n\r\n\r\nQuite literally the same project and command, when ran using the `.NET 7.0` SDK, is completing without any issues:\r\n\r\n![net7 0](https://github.com/user-attachments/assets/164aa4f2-abcc-43ce-b852-eaff059338a4)\r\n\r\nThis does not have to do with the .NET the project targets, as in both examples above the project has been built for `.NET 7.0`, but the command to view the vulnerable packages has been ran using a different SDK vesion (`7.0.316` and `8.0.303`).\r\n\r\nAlso, it seems that the issue is not re-creatable when the central package management is disabled and versions are mentioned in the `.csproj` files.\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\nUnable to read a package reference from the project `PATH_TO_CSPROJ_FILE`. Please make sure that your project file and project.assets.json file are in sync by running restore.\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-11T03:30:24.3873013Z","RunDurationInMilliseconds":1036}