{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40604588404","Type":"PullRequestEvent","CreatedAt":"2024-07-30T23:10:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10095","RelatedDescription":"Closed pull request \"Test, please ignore\" (#10095) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"40604263533","Type":"PullRequestEvent","CreatedAt":"2024-07-30T22:49:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10095","RelatedDescription":"Opened pull request \"Test, please ignore\" (#10095) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"40604257858","Type":"PullRequestEvent","CreatedAt":"2024-07-30T22:48:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10094","RelatedDescription":"Closed pull request \"Another test, please ignore\" (#10094) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"40604106308","Type":"PullRequestEvent","CreatedAt":"2024-07-30T22:39:22","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10094","RelatedDescription":"Opened pull request \"Another test, please ignore\" (#10094) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"40604098382","Type":"PullRequestEvent","CreatedAt":"2024-07-30T22:38:52","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10092","RelatedDescription":"Closed pull request \"TEST PR, PLEASE IGNORE\" (#10092) at NuGet/NuGetGallery","RelatedBody":"I am just checking CI triggers."},{"Id":"40603547238","Type":"PullRequestEvent","CreatedAt":"2024-07-30T22:07:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10093","RelatedDescription":"Merged pull request \"Merge NuGet.Jobs-CI into NuGetGallery-CI as a stage\" (#10093) at NuGet/NuGetGallery","RelatedBody":"The CI triggers don't seem to be working automatically with these two co-existing (I think that is the reason). I am going to try this approach."},{"Id":"40602987624","Type":"PullRequestEvent","CreatedAt":"2024-07-30T21:39:21","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10093","RelatedDescription":"Opened pull request \"Merge NuGet.Jobs-CI into NuGetGallery-CI as a stage\" (#10093) at NuGet/NuGetGallery","RelatedBody":"The CI triggers don't seem to be working automatically with these two co-existing (I think that is the reason). I am going to try this approach."},{"Id":"40602180451","Type":"PullRequestEvent","CreatedAt":"2024-07-30T21:02:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10092","RelatedDescription":"Opened pull request \"TEST PR, PLEASE IGNORE\" (#10092) at NuGet/NuGetGallery","RelatedBody":"I am just checking CI triggers."},{"Id":"40600982969","Type":"PullRequestEvent","CreatedAt":"2024-07-30T20:13:04","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10091","RelatedDescription":"Merged pull request \"Merge NuGet.Jobs repository into NuGetGallery\" (#10091) at NuGet/NuGetGallery","RelatedBody":"This brings NuGet.Jobs git tree into NuGetGallery. This is a first step in merging our OSS repositories to ease development.\r\n\r\nSince the diff is so large, I don't expect you to review it all. Instead, I'll describe my process:\r\n1. Clean up the files for NuGetGallery and NuGet.Jobs to reduce conflicts (already done).\r\n2. Merge NuGet.Jobs `dev` into NuGetGallery `dev`, allowing unrelated histories.\r\n    - NuGetGallery base: https://github.com/NuGet/NuGetGallery/commit/666ab64b1115731840ac0aa6c0f0278c3a850391\r\n    - NuGet.Jobs base: https://github.com/NuGet/NuGet.Jobs/commit/4d5379b0935aeff66100e27e54f29a4580e01ffe\r\n\r\n## Description of each additional commit:\r\n\r\n### Commit https://github.com/NuGet/NuGetGallery/commit/31a625772c204c4ec270345b52b44e654c8c74fd\r\n\r\nPurpose: merge the two Git histories into one, handling merge conflicts of overlapping files\r\n\r\n- Update `.pipelines/Release-trigger.yml` to trigger the NuGet.Jobs release also\r\n- Merge NuGet.Jobs build steps in `build.ps1`, add assembly version and package version parameters\r\n- Merge NuGet.Jobs test step in `test.ps1`\r\n- Merge version entries in `Directory.Packages.props` (simple union)\r\n- Merge package source mappings in `NuGet.config` (simple union)\r\n- Merge 3rd party assembly names in `sign.thirdparty.props` (simple union)\r\n- Rename NuGet.Jobs `README.md` to README.jobs.md`, for a subsequent README fix\r\n\r\n### Commit https://github.com/NuGet/NuGetGallery/commit/9213e649cc50072d41d307734846233f9de7394d\r\n\r\nPurpose: merge contents of `README.jobs.md` into `README.md`\r\n\r\n- Update `README.md` with a new jobs section\r\n- Clean up `README.md` gallery contents, some facts were wrong\r\n- Delete `README.jobs.md`\r\n\r\n### Commit https://github.com/NuGet/NuGetGallery/commit/6bb2527df7f9b1cb4efd9196c6fcdee7d4a67040\r\n\r\nPurpose: change package reference to project reference for projects that now exist in the same repo\r\n\r\nThese are the projects/packages that are in the same repo now:\r\n  - NuGet.Services.Entities\r\n  - NuGetGallery.Core\r\n  - NuGet.Jobs.Common\r\n  - NuGet.Services.Validation.Common.Job\r\n\r\nSummary of changes:\r\n\r\n- Add Gallery and Jobs version variables in the `.pipelines/NuGet.Jobs-CI.yml` and `.pipeline/NuGetGallery-CI.yml` files\r\n  - This is needed to keep assembly versions consistent for shared projects\r\n- Add `-SkipJobs` and `-SkipGallery` switches to `build.ps1` and `test.ps1`\r\n  - This allows us to build a subset of projects within this combined repo, along the repo bound we used to have\r\n- Update `build.ps1` to generate proper assembly info for projects shared between the solutions\r\n  - For example, NuGetGallery.Core should still have a `4.4.5` assembly version for compatibility\r\n- Remove package versions from `Directory.Packages.props` for projects that are now in the same repo\r\n- Remove package source mappings from `NuGet.config` that are not needed anymore\r\n- Update `NuGetGallery.sln`\r\n  - Change NuGet.Jobs.Common and NuGet.Services.Validation.Common.Job to `ProjectReference`\r\n  - Add these two projects to the solution\r\n- Update `NuGet.Jobs.sln`\r\n  - Change NuGet.Services.Entities and NuGetGallery.Core to `ProjectReference`\r\n  - Add these two projects to the solution\r\n- Add missing `<RuntimeIdentifier>` from GitHubIndexer tests. This is unrelated to the merge but a tiny warning fix."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40594577036","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:16:26","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13498","RelatedDescription":"Closed issue \"Add documentation for `allowInsecureConnections` option\" (#13498) at NuGet/Home","RelatedBody":"Add documentation for `allowInsecureConnections` option in the following commands\r\n- `nuget add`\r\n- `nuget update`"},{"Id":"40594541380","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:15:16","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13502","RelatedDescription":"Closed issue \"Add documentation for NU1302 \" (#13502) at NuGet/Home","RelatedBody":"Add documentation for NU1302 "},{"Id":"40581453516","Type":"IssuesEvent","CreatedAt":"2024-07-30T09:54:32","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13660","RelatedDescription":"Opened issue \"NuGet cache clearing fails after clicking the button “Clear All NuGet Storage” in “Options->NuGet Package Manager ->General” window for SDK project \" (#13660) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.12.0.36\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro before .NET MAUI (.NET 9 Preview) is involved to the VS Workloads.\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET 8.0) project in VS and open the PM UI or PMC window. \r\n\r\n2. Install several packages (e.g. Newtonsoft.Json and log4net) through PM UI. \r\n\r\n3. Click the settings button (gear button) on PM UI or PMC window. \r\n\r\n4. Click the “NuGet Package Manager->General” in the opened “Options” window. \r\n\r\n5. Click the button “Clear All NuGet Storage” and check the message. \r\n\r\n#### Expected:    \r\n\r\nThe message should show correctly like “NuGet storage cleared at [Time]” \r\n\r\n\r\n#### Actual: \r\n\r\nNuGet cache clearing fails as below: \r\n![Unbenannt_0730](https://github.com/user-attachments/assets/c1308af7-b037-4c25-a488-36673300c8d6)\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%. \r\n2. It blocked installing all packages after clicking the “Clear All NuGet Storage” button. \r\n3. It only reproes after installing the “.NET MAUI (.NET 9 Preview)” workload from .NET Multi-platform App UI development in VS installer, doesn’t repro if you didn’t install that workload. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40572623181","Type":"IssuesEvent","CreatedAt":"2024-07-30T04:28:51","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13479","RelatedDescription":"Closed issue \"Document auditSources \" (#13479) at NuGet/Home","RelatedBody":"document new feature: https://github.com/NuGet/NuGet.Client/pull/5708\r\n\r\nNew feature:\r\n* https://github.com/NuGet/Home/blob/dev/accepted/2023/NuGetAudit-without-nuget.org-as-packageSource.md\r\n* https://github.com/NuGet/Home/issues/12698\r\n* https://github.com/NuGet/Home/issues/13211"},{"Id":"40567239451","Type":"IssuesEvent","CreatedAt":"2024-07-29T22:36:36","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13575","RelatedDescription":"Closed issue \"NuGetAuditSuppress for packages.config\" (#13575) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe\n\n### The Elevator Pitch\n\nNuGetAuditSuppress has already been added for projects using PackageReference. Add support for packages.config as well.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40551168685","Type":"IssuesEvent","CreatedAt":"2024-07-29T13:20:22","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13585","RelatedDescription":"Closed issue \"https://github.com/NuGet/docs.microsoft.com-nuget/issues/3237 - Unsorted list in nuget package manager GUI within VS\" (#13585) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nAll\n\n### Worked before?\n\nnever\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOpen Nuget UI.  Search for Newtonsoft.\r\n\r\nYou won't get the base package first, and what you do get is a randomly sorted list!\n\n### Verbose Logs\n\n```shell\n.\n```\n"},{"Id":"40532727572","Type":"IssuesEvent","CreatedAt":"2024-07-29T00:42:32","Actor":"skirk-mpr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13659","RelatedDescription":"Opened issue \"NUGET_CERT_REVOCATION_MODE not using HTTPS\" (#13659) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nIn an AWS CodeBuild environment where I only allow outbound HTTPS traffic (443) the `dotnet restore` command would take an extremely long amount of time (20+ minutes) -- but by setting `NUGET_CERT_REVOCATION_MODE` to `offline` it would be as fast as if HTTP/80 was allowed (~15 seconds).  It seems like the status check of the certificate used to sign a package is done over HTTP and not HTTPS.    This blog post suggests everything should be done over HTTPS related to nuget: https://devblogs.microsoft.com/nuget/https-everywhere/\n\n### Desired Behavior\n\nClient should be able to enforce that the status check of the certificates used to sign a packages is done only over HTTPS/443.\n\n### Additional Context\n\nI have an open StackOverflow Question here that I slowly came to the hypothesis that this is the underlying culprit.: https://stackoverflow.com/questions/78755772/nuget-enforce-https-only-traffic-from-aws-codebuild"},{"Id":"40509616774","Type":"IssuesEvent","CreatedAt":"2024-07-26T23:37:55","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13658","RelatedDescription":"Opened issue \"NuGetAudit should check PackageDownload\" (#13658) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nNuGet has a feature intended for MSBuild SDKs to request NuGet to download a package on their behalf, but don't do any asset selection, package compatibility checks, or anything else. Just plain old download to a known location. The .NET SDK uses this to download platform specific runtime hosts, such as [Microsoft.NETCore.App.Runtime.linux-x64](https://www.nuget.org/packages/Microsoft.NETCore.App.Runtime.linux-x64/).\r\n\r\nThese packages can have known security vulnerabilities. Therefore, Audit should warn customers about these.\n\n### Additional Context and Details\n\noriginal feature spec, which might give some context for why it was added: https://github.com/NuGet/Home/wiki/%5BSpec%5D-PackageDownload-support"},{"Id":"40508805325","Type":"IssuesEvent","CreatedAt":"2024-07-26T22:26:14","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13651","RelatedDescription":"Closed issue \"[Cross-platform Dotnet NuGet Sign] The error “invalid value for’--certificate-fingerprint’ option” displays instead of error NU3001 when signing with certificate search criteria yields no certificate matches\" (#13651) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, NuGet SDK\r\n\r\n### Product Version\r\n\r\n.NET SDK 8.0.400- rtm.24367.3 patching with NuGet Dev\\6.12.0.33\r\n\r\n### Worked before?\r\n\r\nIt is a regression since it didn't repro on 8.0.400-preview.0.24324.5 patched with Dev\\6.11.0.110.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1.\t[Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (--SDKChannel 8.0.4xx and Nupkgs is from [Pipelines - Run 6.12.0.33 artifacts (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9905933&view=artifacts&pathAsName=false&type=publishedArtifacts))\r\n2.\tUse the patched \"dotnet.exe\" to sign a package. Where <PackageFilePath> is the test package path, sign the test package: \r\n               On Windows:  `.\\dotnet.exe nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n               On Linux/macOS:` ./dotnet nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n3.\tVerify the output of the previous step.\r\n#### Expected Result:\r\nThe error below displays.\r\n`Error: NU3001: No certificates were found that meet all the given criteria. For a list of accepted ways to provide a certificate, visit https://docs.nuget.org/docs/reference/command-line-reference.\" `\r\n#### Actual Result:\r\nThe error “invalid value for’—certificate-fingerprint’ option” displays instead of error NU3001 as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/6930deaa-ee32-4937-8e7f-15f5e0500d04)\r\n#### Notes:\r\nIt reproes on Windows/Linux/MacOS."},{"Id":"40508575932","Type":"IssuesEvent","CreatedAt":"2024-07-26T22:10:54","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13650","RelatedDescription":"Closed issue \"[Cross-platform Dotnet NuGet Sign] Adding trust for a certificate leads to an error SYSLIB5007 for .NET SDK 9.0.1xx\" (#13650) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 9.0.100.preview.7.24374.16\r\n\r\n### Worked before?\r\n\r\nIt doesn’t repro on .NET SDK 8.0.4xx.\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro Steps:**    \r\n\r\n1. [Patched dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) with ‘-SDKChannel 9.0.1xx’.\r\n2. Add net9.0 into the <TargetFrameworks> into both ‘MakeTestCert.csproj’ and ‘TrustTestCert.csproj’ file. \r\n3.  Go to the patchedSDK folder and create a new test certificate:  \r\n  On Windows:  `.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net9.0 --password password `\r\n  On Linux/macOS: ` ./dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net9.0 --password password `\r\n\r\n  5. Where <CertificateFilePath> is the file path to the created certificate (in step1) .cer or .pem file and <VersionedSdkDirectoryPath> is the directory path for the patched versioned .NET SDK directory (e.g.:  ./patchedSDK/sdk/9.0.100.xxx), add try to trust for the certificate:\r\nOn Windows:  `.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath>`\r\n    On Linux/macOS: ` ./dotnet run --project ./Entropy/TrustTestCert/TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath> -vsd <VersionedSdkDirectoryPath>`\r\n\r\n**Expected:**      \r\n    The certificate should be trusted successfully. \r\n\r\n**Actual:**\r\nAn error SYSLIB5007 displays as below: \r\n![image](https://github.com/user-attachments/assets/949e635c-f475-4ebc-9754-7b617320c964)\r\n\r\n**Notes:**  \r\n  1. It also reproes on MacOS and Linux platforms. \r\n  2. It only reproes on .NET SDK 9.0.1xx, doesn’t repro on .NET SDK 8.0.4xx. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-07-31T03:30:18.9272712Z","RunDurationInMilliseconds":992}