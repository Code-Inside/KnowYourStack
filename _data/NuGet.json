{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43787465765","Type":"IssuesEvent","CreatedAt":"2024-11-13T14:51:42","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10266","RelatedDescription":"Opened issue \"[Feature]: Change default dependents and GH used by to top 50 sorted by downloads/stars and allow users to see all\" (#10266) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nWe should increase this job/number to 50 by default and then provide a means to allow someone to \"view all\" which can load a separate page or even download a file that includes the entire used by list. These lists should still keep their sorting by popularity.\n\n![Image](https://github.com/user-attachments/assets/b0e8d7bd-6331-4b93-bf58-db29c2e9e8b5)\n\nOther examples:\n\nhttps://www.npmjs.com/package/react?activeTab=dependents\n\nhttps://www.npmjs.com/browse/depended/react\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43780225379","Type":"IssuesEvent","CreatedAt":"2024-11-13T11:54:43","Actor":"IrinaPykhova","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10265","RelatedDescription":"Opened issue \"[Feature]: Show .Net 9 in list of frameworks\" (#10265) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n.Net 9 is live, but nuget doesn't show it in list of supported frameworks for any package. For example:\r\nhttps://www.nuget.org/packages/C1.WPF.Schedule#supportedframeworks-body-tab\r\nhttps://www.nuget.org/packages/C1.ScheduleCore/#supportedframeworks-body-tab\r\nhttps://www.nuget.org/packages/C1.DataCollection/9.0.20242.202-preview\r\n![image](https://github.com/user-attachments/assets/8447655d-6141-4c19-9879-8f21ce0fd858)\r\n\r\nThe last shown version is .Net 8\n\n### The Elevator Pitch\n\nplease make sure that net9.0 and net9.0-platform is correctly computed and shown everywhere\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43760337373","Type":"PullRequestEvent","CreatedAt":"2024-11-12T22:42:42","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10264","RelatedDescription":"Opened pull request \"Add .NET 9 TFM checkbox\" (#10264) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/Engineering/issues/5512\r\n\r\nAdd new filtering checkbox for the .NET 9 TFM.\r\n\r\n![image](https://github.com/user-attachments/assets/2545849a-4042-48bc-a0c3-9f26eafa0517)\r\n\r\n*NOTE:* The backend index changes needed to support this are still in progress. I'll wait to merge this till we have that in place."},{"Id":"43752704580","Type":"PullRequestEvent","CreatedAt":"2024-11-12T18:16:07","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10246","RelatedDescription":"Merged pull request \"Make license text part of sidebar license link\" (#10246) at NuGet/NuGetGallery","RelatedBody":"1.Accessibility Issue:\r\nAI4W reported packages page sidebar link \"MIT\" and surrounding text \"license\" having issue.\r\n![image](https://github.com/user-attachments/assets/a3152407-a820-4ad7-b2aa-b8062ef31ece)\r\n2. Fixed the issue by removing \"license\" text into the link.\r\n3. Result: \r\n![image](https://github.com/user-attachments/assets/fa8f7d13-5874-43c2-ad86-c18231fd6de7)\r\n![image](https://github.com/user-attachments/assets/fa065457-6d4b-47cb-925d-7b09bdbdf8f9)\r\n\r\n\r\nBug URL:\r\nhttps://github.com/NuGet/NuGetGallery/issues/10247\r\n\r\n"},{"Id":"43747082733","Type":"PullRequestEvent","CreatedAt":"2024-11-12T15:40:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10262","RelatedDescription":"Merged pull request \"[OIDC 3] Add flight for using federated credentials\" (#10262) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10252.\r\n\r\nWe want to be able to control exactly which package owners should be using this feature. This adds a flight (i.e. a feature flag specific to the user) for the new federated credentials (OIDC) feature.\r\n\r\nI did some minor private const renaming to address an IDE suggestion (per `.editorconfig`) which is unrelated to the other changes.\r\n\r\nThe flight defaults to false meaning it is opt-in.\r\n\r\nWe generally do not have UTs for these changes since they are so simple."},{"Id":"43746046294","Type":"IssuesEvent","CreatedAt":"2024-11-12T15:15:00","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10263","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Beta version is not listed as latest version\" (#10263) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nFor new version with major changes, I do plan to offer several beta and rc versions. Even though, I have beta versions for v2.0.0, they are not listed as the latest versions.\n\n### Repro Steps\n\nPublish a stable version of NuGet package. (v1.0.0)\r\nPublish beta version for new version. (v2.0.0-beta)\r\nCheck out nuget.org\n\n### Expected Behavior\n\nSince v2.0.0-beta is higher than v1.x.y.z, v2.0.0-(any) should be listed as the latest version.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/bbab5c57-ab3c-4fd7-9db2-7b27251286ba)\r\n![Screenshot 2024-11-12 181020](https://github.com/user-attachments/assets/76d0427b-437d-431e-8920-10731d4b5256)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"43722843880","Type":"PullRequestEvent","CreatedAt":"2024-11-12T02:18:26","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10262","RelatedDescription":"Opened pull request \"[OIDC 3] Add flight for using federated credentials\" (#10262) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10252.\r\n\r\nWe want to be able to control exactly which package owners should be using this feature. This adds a flight (i.e. a feature flag specific to the user) for the new federated credentials (OIDC) feature.\r\n\r\nI did some minor private const renaming to address an IDE suggestion (per `.editorconfig`) which is unrelated to the other changes.\r\n\r\nThe flight defaults to false meaning it is opt-in.\r\n\r\nWe generally do not have UTs for these changes since they are so simple."},{"Id":"43722521492","Type":"PullRequestEvent","CreatedAt":"2024-11-12T02:00:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10204","RelatedDescription":"Closed pull request \"Pr 10173\" (#10204) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Detail 1\r\n* Detail 2\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43798090533","Type":"IssuesEvent","CreatedAt":"2024-11-13T19:44:12","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13923","RelatedDescription":"Opened issue \"Test:  test certificate not removed after test completion\" (#13923) at NuGet/Home","RelatedBody":"[This certificate](https://github.com/NuGet/NuGet.Client/blob/38729596a6549df3cd1eed37b93d51df1bf62bff/test/NuGet.Core.Tests/NuGet.Commands.Test/CertificatesFixture.cs#L22-L28) is added to the current user's personal store but not removed.\r\n\r\nThe reason is because `GetTrustedCertificate()` returns the private copy of the certificate, which is then disposed by the caller.  When `CertificatesFixture.Dispose()` executes, the certificate cannot be found (and removed) because the certificate has already been disposed."},{"Id":"43794128496","Type":"IssuesEvent","CreatedAt":"2024-11-13T17:37:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13922","RelatedDescription":"Opened issue \"Best practices for specifying sources and usage of properties such as RestoreSources, RestoreAdditionalProjectSources etc\" (#13922) at NuGet/Home","RelatedBody":""},{"Id":"43784912027","Type":"IssuesEvent","CreatedAt":"2024-11-13T13:53:10","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13919","RelatedDescription":"Closed issue \"Test:  client certificate tests need better cleanup\" (#13919) at NuGet/Home","RelatedBody":"In client certificate tests, there are numerous problems:\r\n\r\n* weak guarantees around test certificates being removed after tests run\r\n* test certificates have very long (1 year) validity periods\r\n* some disposable objects are not disposed"},{"Id":"43784911956","Type":"IssuesEvent","CreatedAt":"2024-11-13T13:53:10","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13919","RelatedDescription":"Closed issue \"Test:  client certificate tests need better cleanup\" (#13919) at NuGet/Home","RelatedBody":"In client certificate tests, there are numerous problems:\r\n\r\n* weak guarantees around test certificates being removed after tests run\r\n* test certificates have very long (1 year) validity periods\r\n* some disposable objects are not disposed"},{"Id":"43778951579","Type":"IssuesEvent","CreatedAt":"2024-11-13T11:19:07","Actor":"forki","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13921","RelatedDescription":"Opened issue \"dotnet tool restore fails on Linux with System.ArgumentException: \"\" is invalid version string\" (#13921) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 9.0.100\n\n### Worked before?\n\n8.x.y\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nAfter upgrade to .NET 9 the dotnet tool command fails. Here is a minimal repro and the stacktrace\r\n\r\n[dotnet-tools.json](https://github.com/user-attachments/files/17731461/dotnet-tools.json)\r\n[global.json](https://github.com/user-attachments/files/17731466/global.json)\r\n\r\n```\r\n{\r\n  \"version\": 1,\r\n  \"isRoot\": true,\r\n  \"tools\": {\r\n    \"fantomas\": {\r\n      \"version\": \"6.2.3\",\r\n      \"commands\": [\r\n        \"fantomas\"\r\n      ],\r\n      \"rollForward\": false\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nerror:\r\n```\r\n\r\nUnhandled exception: System.ArgumentException: \"\" ist keine gültige Versionszeichenfolge.\r\n   at NuGet.Versioning.VersionRange.Parse(String value, Boolean allowFloating)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1 creator, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1 creator, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize[T](JsonReader reader)\r\n   at NuGet.Protocol.PackageMetadataResourceV3.DeserializeStreamDataAsync[T](Stream stream, CancellationToken token)\r\n   at NuGet.Protocol.HttpSource.<>c__DisplayClass[15](https://gitlab/a-team/stream/-/jobs/1849400#L15)_0`1.<<GetAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n   at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token)\r\n   at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token)\r\n   at NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(String packageId, Boolean includePrerelease, Boolean includeUnlisted, VersionRange range, SourceCacheContext sourceCacheContext, ILogger log, CancellationToken token)\r\n   at NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(String packageId, Boolean includePrerelease, Boolean includeUnlisted, SourceCacheContext sourceCacheContext, ILogger log, CancellationToken token)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetPackageMetadataAsync(PackageSource source, String packageIdentifier, Boolean includePrerelease, Boolean includeUnlisted, CancellationToken cancellationToken)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetPackageMetadataAsync(String packageIdentifier, NuGetVersion packageVersion, IEnumerable`1 sources, CancellationToken cancellationToken, Boolean includeUnlisted)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetPackageSourceAndVersion(PackageId packageId, NuGetVersion packageVersion, PackageSourceLocation packageSourceLocation, Boolean includePreview, Boolean includeUnlisted, PackageSourceMapping packageSourceMapping)\r\n   at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.DownloadPackageAsync(PackageId packageId, NuGetVersion packageVersion, PackageSourceLocation packageSourceLocation, Boolean includePreview, Nullable`1 includeUnlisted, Nullable`1 downloadFolder, PackageSourceMapping packageSourceMapping)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.DownloadAndExtractPackage(PackageId packageId, INuGetPackageDownloader nugetPackageDownloader, String packagesRootPath, NuGetVersion packageVersion, PackageSourceLocation packageSourceLocation, Boolean includeUnlisted)\r\n   at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.<>c__DisplayClass8_0.<InstallPackage>b__0()\r\n   at Microsoft.DotNet.Cli.TransactionalAction.Run[T](Func`1 action, Action commit, Action rollback)\r\n   at Microsoft.DotNet.Tools.Tool.Restore.ToolRestoreCommand.InstallPackages(ToolManifestPackage package, Nullable`1 configFile)\r\n   at System.Linq.Enumerable.ArraySelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)\r\n   at System.Linq.Enumerable.ArraySelectIterator`2.ToArray()\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Microsoft.DotNet.Tools.Tool.Restore.ToolRestoreCommand.Execute()\r\n   at System.CommandLine.Invocation.InvocationPipeline.Invoke(ParseResult parseResult)\r\n   at System.CommandLine.ParseResult.Invoke()\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, TimeSpan startupTime, ITelemetry telemetryClient)\r\n```\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"43760719925","Type":"IssuesEvent","CreatedAt":"2024-11-12T22:59:08","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13920","RelatedDescription":"Opened issue \"Test:  `NuGet.PackageManagement.VisualStudio.Test.TelemetryOnceEmitterTests.EmitIfNeeded_MultipleThreads_EmitsOnceAsync` fails\" (#13920) at NuGet/Home","RelatedBody":"This test failed 3 times in a row in a CI build:\r\n\r\n```\r\n NuGet.PackageManagement.VisualStudio.Test.TelemetryOnceEmitterTests.EmitIfNeeded_MultipleThreads_EmitsOnceAsync [FAIL]\r\n    Failed NuGet.PackageManagement.VisualStudio.Test.TelemetryOnceEmitterTests.EmitIfNeeded_MultipleThreads_EmitsOnceAsync [261 ms]\r\n    Error Message:\r\n     Assert.Equal() Failure: Values differ\r\n  Expected: 1\r\n  Actual:   0\r\n    Stack Trace:\r\n       at NuGet.PackageManagement.VisualStudio.Test.TelemetryOnceEmitterTests.<EmitIfNeeded_MultipleThreads_EmitsOnceAsync>d__5.MoveNext() in D:\\a\\_work\\1\\s\\test\\NuGet.Clients.Tests\\NuGet.PackageManagement.VisualStudio.Test\\Telemetry\\TelemetryOnceEmitterTests.cs:line 81\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    Standard Output Messages:\r\n   2919 Created\r\n   2921 Created\r\n   2922 Created\r\n   2923 Created\r\n   2924 Created\r\n```"},{"Id":"43758040533","Type":"IssuesEvent","CreatedAt":"2024-11-12T21:18:06","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13919","RelatedDescription":"Opened issue \"Test:  clean up test certificates\" (#13919) at NuGet/Home","RelatedBody":"In client certificate tests, there are numerous problems:\r\n\r\n* weak guarantees around test certificates being removed after tests run\r\n* test certificates have very long (1 year) validity periods\r\n* some disposable objects are not disposed"},{"Id":"43752877057","Type":"IssuesEvent","CreatedAt":"2024-11-12T18:21:45","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13914","RelatedDescription":"Closed issue \"Update nuget.client to use net10.0 TFM for source build\" (#13914) at NuGet/Home","RelatedBody":"Now that .NET 10 development is in process, the [VMR](https://github.com/dotnet/dotnet) is currently using a .NET 10 SDK. This will require that the [nuget.client](https://github.com/nuget/nuget.client) repo be updated to use the `net10.0` TFM, specifically when being built for source build.\r\n\r\nFor reference, this is the same type of work that was done for .NET 9: https://github.com/NuGet/NuGet.Client/pull/5511.\r\n\r\nRelated to https://github.com/dotnet/sdk/pull/44685"},{"Id":"43749328525","Type":"IssuesEvent","CreatedAt":"2024-11-12T16:37:51","Actor":"gioce90","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13918","RelatedDescription":"Opened issue \"[Feature Request] Disable caching for Local Feed\" (#13918) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nI'm asking the same feature in #8251 , in light of new clearer reasons of which is the common scenario that the feature will resolve.\r\n\r\nFor local development purposes this feature is a must-have: I exhaustive described [here](https://github.com/NuGet/Home/issues/8251#issuecomment-2468435652) a common scenario, but - shortly - the idea is to give to developers the freedom to works on their local machines using [Local Feeds](https://learn.microsoft.com/en-us/nuget/hosting-packages/local-feeds) without facing cache issues.\r\n\r\nThis is especially needed when we work on 2 or more local projects, where one is a package project and the other is a project who consumes the package. When a developer make some changes on a package, before to push these changes he wants to test the changes using (in local) other project(s) which consumes the edited package. All of this happens in local and doesn't involve yet the CI/CD pipelines. This is a really common scenario in companies with large codebase and numerous package projects. \r\nNote that the purpose here is not to skip the CI/CD, but just speed-up the local development.\r\n\r\nSo the request is: _only and exclusively for packages on the local machine, that the cache should be disabled._\r\n\r\nIt could be by default or, as suggested [here](https://github.com/NuGet/Home/issues/8251#issuecomment-1260930006), with this configuration:\r\n```\r\nnuget.config\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n     <add key=\"Local packages for Windows\" value=\"%userprofile%\\.nuget\\packages\\localPackages\"  disableCache=\"True\" />\r\n     <add key=\"Local packages for MacOS\" value=\"~/.nuget/packages/localPackages\"  disableCache=\"True\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\nOf course `disableCache=\"True\"`  should works only for local feeds.\r\n\r\nAnother solution it can be to operate on the <PackageReference> in the .csproj in this way:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n         ...\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"MyPackage\" Version=\"8.0.0-Local\" disableCache=\"true\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```\r\n\r\nOther idea to disable cache for packages on the local machine are welcome.\n\n### Additional Context and Details\n\nIn local I use to produce a package using this convention: MyPackage.x.y.z-Local ... now, we all knows that increment the version is really important when we are shipping the package, but in local it should not be a serious thing, because is just distracting and a waste of time and focus.\r\nBut using just the \"-Local\" suffix without increment the version means facing cache issues: this should due to _global packages folder_ that keep the old package (I don't think that _http-cache_ is involved).\r\n\r\nNote:\r\n- In NuGet there are already several ways to skip cache, but not via .config or .csproj\r\n- Being forced to continuously increment the version number on both the package project and the project that references it, when we are still working locally, is non-sense [IMHO].\r\n- Typically a pre-release version of a package is built via CI/CD related to a feature branch: but being forced to push changes to start this pipeline, only to debug and test locally something a developer isn't entirely sure about, is a waste of time, resources (pipeline agents), and an unnecessary mess of git history. And have to wait the pipeline execution just to take the new pre-release version that then will however tested in local by the other project... is a waste of time and focus.\r\n- Avoiding this cache problem with the use of CLI commands, custom Powershell scripts, Directory.Builds.props (which is my case), clean all the cache manually every time... all of this is a burden that the feature proposed resolves.\r\n- Note that substitute the <PackageReference> tag with the more directly <Reference> tag in the .csproj of the project who uses the package expose to easy mistakes and compromises other things. \r\n- A fallback Package Folders doesn't resolve the problem (as initially pointed out in the closed issue)."},{"Id":"43734648839","Type":"IssuesEvent","CreatedAt":"2024-11-12T10:15:09","Actor":"thomasdgx","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13917","RelatedDescription":"Opened issue \"Sporadic Restore error: The process cannot access the file 'edpys1ay.f5i' because it is being used by another process. \" (#13917) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild Version 17.8.5+b5265ef37 / NuGet Client Version 6.8.1.2\n\n### Worked before?\n\ndon't know\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nOn our build server we observe sporadically some file access issues (see exception below) during the NuGet restore task.\r\n\r\n**Context:**\r\n- \tOsName : Microsoft Windows Server 2025 Standard \r\n- \tOsVersion : 10.0.26304\r\n- \tMSBuild Version 17.8.5+b5265ef37\r\n- \tNuGet Client Version 6.8.1.2\r\n\r\n\r\nThe NuGet.targets(156,5) seems points to the restore task.\r\n  <Target Name=\"Restore\" DependsOnTargets=\"_GenerateRestoreGraph\">\r\n\r\nThere seems to be a race condition in the PackageExtractor. The filename 'edpys1ay.f5i' suggests that it is about a temporary file (Path.GetRandomFileName()). \r\n\r\nMsBuild invokes NuGet restore with parallel threads. And since its running on a build server there are multiple MsBuild processes with restore running at the same time. A second build could also be in the middle of NuGet restore.\r\n\r\n**Further notes:**\r\n\r\nAfter the file access error happened other builds fail with NuGet package cache issues (see Follow up exception below). I think these type of exceptions are follow up errors from the first one:\r\n\r\nActually this corruption in the global package folder breaks many subsequent builds on that particular build server.\r\n\n\n### Verbose Logs\n\n```shell\nWhen running with MsBuild detailed log we get a callstack\r\n\r\n\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(156,5): error : The process cannot access the file 'edpys1ay.f5i' because it is being used by another process. [...csproj]\r\n\t  System.IO.IOException: The process cannot access the file 'edpys1ay.f5i' because it is being used by another process.\r\n\t     at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n\t     at System.IO.FileInfo.Delete()\r\n\t     at NuGet.Packaging.PackageExtractor.<>c__DisplayClass5_0.<<InstallFromSourceAsync>b__0>d.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__5`1.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\t     at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__5`1.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Packaging.PackageExtractor.<InstallFromSourceAsync>d__5.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.ProjectRestoreCommand.<InstallPackageAsync>d__16.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.ProjectRestoreCommand.<>c__DisplayClass15_1.<<InstallPackagesAsync>b__4>d.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.ProjectRestoreCommand.<InstallPackagesAsync>d__15.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n\t     at NuGet.Commands.ProjectRestoreCommand.<TryRestoreAsync>d__9.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n\t     at NuGet.Commands.RestoreCommand.<ExecuteRestoreAsync>d__86.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n\t     at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__68.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.RestoreRunner.<ExecuteAndCommitAsync>d__6.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__9.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.RestoreRunner.<RunAsync>d__2.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Commands.RestoreRunner.<RunAsync>d__0.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n\t     at NuGet.Build.Tasks.BuildTasksUtility.<RestoreAsync>d__12.MoveNext()\r\n\t  --- End of stack trace from previous location where exception was thrown ---\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n\t     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n\t     at NuGet.Build.Tasks.RestoreTask.<ExecuteAsync>d__47.MoveNext()\r\n\r\n\r\nFollow up exception:\r\n\r\n\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(156,5): error NU5037: The package is missing the required nuspec file. Path: C:\\Users\\<myuser>\\.nuget\\packages\\<myPackageName>\\<someversion> [<mycsproj>]\r\n  NuGet.Packaging.Core.PackagingException: The package is missing the required nuspec file. Path: C:\\Users\\<myuser>\\.nuget\\packages\\<myPackageName>\\<someversion>\r\n     at NuGet.Packaging.PackageFolderReader.GetNuspecFile()\r\n     at NuGet.Packaging.PackageReaderBase.GetNuspec()\r\n     at NuGet.Protocol.LocalPackageFileCache.GetNuspec(String manifestPath, String expandedPath)\r\n     at NuGet.Protocol.LocalPackageFileCache.<>c__DisplayClass7_1.<GetOrAddNuspec>b__1()\r\n     at System.Lazy`1.CreateValue()\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-14T03:30:20.5613143Z","RunDurationInMilliseconds":1172}