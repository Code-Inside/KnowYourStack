{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12917159549","Type":"PullRequestEvent","CreatedAt":"2020-07-15T22:55:19","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8108","RelatedDescription":"Merged pull request \"Adjust a test permalink\" (#8108) at NuGet/NuGetGallery","RelatedBody":"@loic-sharma I made one of these more realistic in response to your comment here (https://github.com/NuGet/NuGetGallery/pull/8088) but missed one alas! Here's the fix."},{"Id":"12907707912","Type":"PullRequestEvent","CreatedAt":"2020-07-15T05:46:24","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8108","RelatedDescription":"Opened pull request \"Adjust a test permalink\" (#8108) at NuGet/NuGetGallery","RelatedBody":"@loic-sharma I made one of these more realistic in response to your comment here (https://github.com/NuGet/NuGetGallery/pull/8088) but missed one alas! Here's the fix."},{"Id":"12907417918","Type":"PullRequestEvent","CreatedAt":"2020-07-15T04:53:22","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8088","RelatedDescription":"Merged pull request \"Replace permalink workaround with GitHub advisory permalink field\" (#8088) at NuGet/NuGetGallery","RelatedBody":"Field is now available in GitHub GraphQL API, so using it now and removing extension method. We no longer need GhsaId so I'm removing it from our types.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2890"},{"Id":"12906109407","Type":"PullRequestEvent","CreatedAt":"2020-07-15T00:33:05","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8107","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.07.14]RI dev into master\" (#8107) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12917356351","Type":"IssuesEvent","CreatedAt":"2020-07-15T23:28:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9803","RelatedDescription":"Opened issue \"Progress on making static graph restore the default experience.\" (#9803) at NuGet/Home","RelatedBody":"This is an epic tracking all things relevant to static graph restore and whether there are any blockers/concerns to making it the default. \r\n\r\nFor readers, you'll need Zenhub to see the linked issues. "},{"Id":"12917186172","Type":"IssuesEvent","CreatedAt":"2020-07-15T22:59:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9802","RelatedDescription":"Opened issue \"Restore: No-Op restore hashing should not use configuration data from child projects\" (#9802) at NuGet/Home","RelatedBody":"When generating the hash for projects with transitive dependencies, we hash the complete dg spec. \r\n\r\nThe dg spec ends up including settings from the transitive project which don't affect the current project. \r\n\r\nThere's a chance that this leads to a few unnecessary restores. \r\n\r\nIn general hashing only what we depend on should be a safer approach. "},{"Id":"12917162121","Type":"IssuesEvent","CreatedAt":"2020-07-15T22:55:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9801","RelatedDescription":"Opened issue \"Ordered solution load and impact on NuGet restore performance\" (#9801) at NuGet/Home","RelatedBody":"NuGet PackageReference is transitive and as such additional information in children projects will affect the restore of the project being restored. \r\n\r\nSay we have a large solution among which the projects are:  A => B => C. \r\n\r\nSay the nominations come in the following order: A, B, then C.\r\n\r\nIf Nuget decides to restore after A & B have been nominated, whenever C gets nominated again, we run a sln restore, we'll need to invalidate A & B's restores and performance a full restore again. \r\n\r\nIf the nominations come in the correct order, C => B=> A, no restore will be wasted.\r\n\r\n"},{"Id":"12916718548","Type":"IssuesEvent","CreatedAt":"2020-07-15T21:48:45","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9800","RelatedDescription":"Opened issue \"Enable dotnet list package --verbosity tests when the switch is enabled in the CLI\" (#9800) at NuGet/Home","RelatedBody":"Per https://github.com/NuGet/NuGet.Client/pull/3411#discussion_r454721863, this issue is tracking the enabling of the `DotnetListPackage_VerbositySwitchTogglesHttpVisibility` tests added in PR https://github.com/NuGet/NuGet.Client/pull/3411.\r\n\r\nThese tests are disabled via Xunit `Skip` because they require that the .NET CLI also has this switch. Because the NuGet changes have to be made before the CLI changes, it is not possible to have the tests enabled immediately.\r\n\r\nWhen a version of NuGet has been inserted into the dotnet/sdk repo that supports `--verbosity` on the `dotnet list package` command, then the tests can be enabled."},{"Id":"12915134966","Type":"IssuesEvent","CreatedAt":"2020-07-15T18:48:23","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5434","RelatedDescription":"Closed issue \"Nuget Restore slow on VS 2017 Community 15.2 and .Net Core 1.0.4\" (#5434) at NuGet/Home","RelatedBody":"## Details about Problem\r\nWe have a large solution (61 projects, and 178366 lines of code of c# files).\r\nWe target .net core 1.1 and .net framework 4.6.2.\r\nIt generally takes 60 seconds to execute a nuget restore command via Visual Studio 2017 Community 15.2. \r\n\r\nWe would like it to be much less, if possible. An acceptable number would be 15 seconds tops. \r\n\r\nOur CI server (Teamcity) uses the following command : \r\n**dotnet restore -r debian.8-x64 SolutionFile.sln** . The last build took 2 min 40 s. It seems very long.\r\n\r\nAnother question that comes to mind is that on subsequent runs, the restore should be much faster because all the packages are already downloaded to our machines / our build server. Isn't there some sort of cache to prevent scanning all versions of each csproj ?\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n**VS UI and dotnet.exe**\r\nNuGet version (x.x.x.xxx):\r\n**Package Manager Console Host Version 4.2.0.2457**\r\n\r\ndotnet.exe --version (if appropriate):\r\n**1.0.4**\r\n\r\nVS version (if appropriate): \r\n**VS 2017 Community 15.2**\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n**Win 10 v1703 15063.413**\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Have a large solution with a lot of nuget packages in each project\r\n\r\n2. Execute a Nuget Restore on solution via VS user interface\r\n\r\n3. See the slow performance of the nuget restore command\r\n\r\nAlternatively : Use **dotnet.exe restore file.sln --versbosity diag** and see that restoring nuget packages takes a very long time, each time it is run.\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nI included the **dotnet.exe restore file.sln --versbosity diag** from the solution that is also included in the zip file.\r\n\r\n[logs.txt](https://github.com/NuGet/Home/files/1081122/logs.txt)\r\n\r\n### Sample Project\r\n\r\nI included a sample solution that is exactly the solution we use. \r\nIt won't compile, because I deleted all files from it, except the .csproj. The nuget restore works though.\r\n\r\n[solution.zip](https://github.com/NuGet/Home/files/1081225/solution.zip)\r\n\r\n\r\n"},{"Id":"12912851147","Type":"IssuesEvent","CreatedAt":"2020-07-15T14:53:20","Actor":"sbanni","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9711","RelatedDescription":"Closed issue \"VSOE saving package sources in tools options will overwrite credentials\" (#9711) at NuGet/Home","RelatedBody":"Because we are not remoting the credentials across when we save from the dialog it will think that they were changed and overwrite the original values.\n\nProposed solution is to create a transactional object to save the sources that can be more configurable."},{"Id":"12909542999","Type":"IssuesEvent","CreatedAt":"2020-07-15T09:20:55","Actor":"MV10","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9799","RelatedDescription":"Opened issue \"PackageReference in csproj should identify preferred feed\" (#9799) at NuGet/Home","RelatedBody":"I am proposing that the NuGet `<PackageReference>` tags in csproj should optionally identify the preferred package source. \r\n\r\nThe restore behavior today is essentially random unless you carefully control which feeds are active and which are inactive on a project-by-project basis. Without carefully reviewing logs, you can't even tell where a package came from after the fact. Combine this with an automated build pipeline and it's a recipe for disaster. Worse, if you need two feeds and they both happen to contain variations on the same package, you have zero control of where the build sources the package.\r\n\r\nWhere I work (very large enterprise, thousands of developers) we have many internal package sources dedicated to copies of public feeds, various in-house dev, testing, and release feeds, and so on. We also have _thousands_ of project-specific feeds. On occasion, some of us doing R&D work even activate truly-public feeds. VS in a typical developer environment will list 10-20 feeds. It is not unusual to have duplicate packages in multiple feeds -- or worse, someone has published a package for their own project that \"hides\" an official package by the same name.\r\n\r\nIt's enough of a hassle that I tend to just pull packages down by hand and reference a local-path feed, apart from extremely well-known dependencies like `Microsoft.*` packages.\r\n\r\n(This same scenario -- many package sources -- was also the driver for something I requested many years ago: the ability to control the search order of package sources. A fundamentally different request of course, but still badly needed. Figured it can't hurt to mention it again.)"},{"Id":"12909110265","Type":"IssuesEvent","CreatedAt":"2020-07-15T08:37:57","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9798","RelatedDescription":"Opened issue \"[Test Failure][Signing] No warning is showed in Error List when installing a signed package with â€˜Package configâ€™ format in PM UI\" (#9798) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\n**NuGet Version:** Dev\\5.8.0.6721\r\n**VS Version:** Master\\30314.159\r\n**OS Version:** Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n1.\tInstall VS: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3891706&view=ms.vss-build-web.run-extensions-tab\r\n2.\tInstall NuGet Client: [\\\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Dev\\5.8.0.6721\\artifacts\\VS15\\NuGet.Tools.vsix](url)\r\n\r\n## Repro steps: \r\n1. Create a .NET Framework package for testing.\r\n2. Create a new test certificate: ` .\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority`.\r\n3. Sign a package: `NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath>`.\r\n4.  Open Package Manager UI, Install the package into a project with â€˜Package configâ€™ format.\r\n\r\n## Expected:\r\nWarning NU3027 should be showed in Error list as below screenshot.\r\n![bug71202](https://user-images.githubusercontent.com/20632775/87523356-6ab94e80-c6b9-11ea-8bd4-38d6c0663870.png)\r\n\r\n## Actual:\r\nNo warning showed in Error List as below screenshot.\r\n![0715](https://user-images.githubusercontent.com/20632775/87522276-fe8a1b00-c6b7-11ea-8322-3443ce213cb7.png)\r\n\r\n## Notes: \r\n1. The issue didnâ€™t repro on Master\\30314.159 without installing the VSIX above.\r\n2. The issue didnâ€™t repro when installing package using command `NuGet install [package name]` in developer command prompt.\r\n\r\n\r\n\r\n"},{"Id":"12907191377","Type":"IssuesEvent","CreatedAt":"2020-07-15T04:07:14","Actor":"santoshi12","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9768","RelatedDescription":"Closed issue \"Nuget Restore says all packages are already installed and there is nothing to restore but iam getting an error during build\" (#9768) at NuGet/Home","RelatedBody":"Getting the below error during build in vs 2019\r\nThis project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is ..\\packages\\Microsoft.Gsl.0.1.2.1\\build\\native\\Microsoft.Gsl.targets.\r\n\r\nThe packages folder in the solution is getting updated with that particular package whenever I restore but facing the above issue during build"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-16T05:30:40.6954328Z","RunDurationInMilliseconds":1658}