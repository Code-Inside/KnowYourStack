{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12896012462","Type":"IssuesEvent","CreatedAt":"2020-07-14T05:23:48","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8102","RelatedDescription":"Opened issue \"Hard package deletes don't remove vulnerability data from gallery db\" (#8102) at NuGet/NuGetGallery","RelatedBody":"In this code:\r\nhttps://github.com/NuGet/NuGetGallery/blob/master/src/NuGetGallery/Services/PackageDeleteService.cs#L321\r\nthere is no removal of related vulnerability rows.\r\nSpecifics:\r\n* There is a potential cascading delete of rows in `VulnerablePackageVersionRangePackages` (the m:m table which connects Packages rows to `VulnerablePackageVersionRanges` rows). This needs to be confirmed, but it seems to be the case, as we don't have orphaned rows occurring here.\r\n* If a row in `VulnerablePackageVersionRanges` no longer has any package/version rows in Packages associated with it by a row in `VulnerablePackageVersionRangePackages`, it should be removed explicitly.\r\n* If a row in `PackageVulnerabilities` no longer has entries in `VulnerablePackageVersionRanges` with links to it, it should be deleted explicitly.\r\nHaving orphaned rows has resulted in ingress job fails (which can also be made more robust).\r\nIf a package with vulnerabilities has been hard-deleted and is reintroduced into the database, the GitHub data can be re-polled as if it were a new package.\r\n/cc @xavierdecoster "},{"Id":"12894759344","Type":"PullRequestEvent","CreatedAt":"2020-07-14T01:25:20","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8101","RelatedDescription":"Opened pull request \"Removing TLS banner\" (#8101) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8100\r\n\r\nThis effectively reverses changes introduced by https://github.com/NuGet/NuGetGallery/pull/8012 and https://github.com/NuGet/NuGetGallery/pull/8046 dropping the `<div>` with the banner. The CSS changes are preserved for later reuse."},{"Id":"12894748359","Type":"IssuesEvent","CreatedAt":"2020-07-14T01:23:11","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8100","RelatedDescription":"Opened issue \"Remove TLS banner\" (#8100) at NuGet/NuGetGallery","RelatedBody":"A month had passed since NuGet.org had TLS 1.0/1.1 support disabled. It is time to drop the banner with the announcement.\r\nTop search results for the error you get when you try restoring packages on affected systems although not ideal do contain a fix that should help on the majority of the systems ([Google](https://www.google.com/search?q=nuget+Could+not+create+SSL%2FTLS+secure+channel), [Bing](https://www.bing.com/search?q=nuget+Could+not+create+SSL%2FTLS+secure+channel)), so people should be able to self-help."},{"Id":"12893119891","Type":"PullRequestEvent","CreatedAt":"2020-07-13T20:57:28","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8099","RelatedDescription":"Opened pull request \"Update Fabric.css from 7.0.0 to 7.3.0\" (#8099) at NuGet/NuGetGallery","RelatedBody":"[A previous PR](https://github.com/NuGet/NuGetGallery/pull/8095) has been created to update the fabric.css file. But it turns out I forgot to update the second copy of the fabric.css on the gallery. "},{"Id":"12891854254","Type":"PullRequestEvent","CreatedAt":"2020-07-13T18:30:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8098","RelatedDescription":"Opened pull request \"Use protected configuration provider instead of reflection\" (#8098) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3206\r\n\r\n1. Done: test using configured machine key settings before and after this PR\r\n1. Done: test default (unconfigured) machine key settings before and after this PR\r\n1. TODO: test on DEV environment"},{"Id":"12891421948","Type":"IssuesEvent","CreatedAt":"2020-07-13T17:42:18","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8097","RelatedDescription":"Opened issue \"[Advanced search] Add gallery functional tests \" (#8097) at NuGet/NuGetGallery","RelatedBody":"Hit specific URLs for test data and check results are expected."},{"Id":"12890983126","Type":"PullRequestEvent","CreatedAt":"2020-07-13T16:55:07","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8096","RelatedDescription":"Merged pull request \"Add RECOMPILE query hint to package dependents SQL\" (#8096) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/8078\r\n\r\nThe alternative was to revert to raw SQL. I discussed with @agr and we agreed to go with this EF extension approach."},{"Id":"12890549437","Type":"IssuesEvent","CreatedAt":"2020-07-13T16:10:45","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8068","RelatedDescription":"Closed issue \"Not found nuget/Packages\" (#8068) at NuGet/NuGetGallery","RelatedBody":"### Issue with the NuGet.Server\r\n\r\n### Describe the bug\r\nDescription is available [here](https://stackoverflow.com/q/60869232/7530449) \r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior are available [here](https://stackoverflow.com/q/60869232/7530449)\r\n\r\n### Expected behavior\r\nAn OK status code and the list of the packages\r\n\r\n### Screenshots\r\nNot applied\r\n\r\n### Additional context\r\nDocumentation [here](https://docs.microsoft.com/en-us/nuget/hosting-packages/nuget-server)"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12894286560","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:52:31","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9792","RelatedDescription":"Closed issue \"Signing process timed out\" (#9792) at NuGet/Home","RelatedBody":"Signing process is extremely slow:\r\nvs2019mb-00000O : https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886826&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e&s=b15d9194-8f26-5328-b47f-5968c76b37e7\r\n\r\nvs2019mb-00000I: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886826&view=logs&j=2f3b5724-75af-5e9f-8e88-844be7aa7661&t=7c0025f2-7f9b-5137-0038-5bda3515fd86\r\n\r\nvs2019mb-000005: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886781&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e\r\n\r\nCompared to a normal build: (only 2 minutes)\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886647&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e\r\n\r\nThe ticket is raised to tracking this issue:\r\nhttps://icm.ad.msft.net/imp/v3/incidents/details/196425291/home\r\n"},{"Id":"12894172518","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:31:24","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9125","RelatedDescription":"Closed issue \"Add a TypeConverter for the SemanticVersion class\" (#9125) at NuGet/Home","RelatedBody":"The `SemanticVersion` class lacks a `TypeConverter`. Although it's easy to manually use `Parse` and `ToString()`, it's not always convenient. If, for instance, I want to use `SemanticVersion` in my model, I need to create a converter myself to support JSON serialization. Same if I want to accept a `SemanticVersion` as an parameter to an API endpoint.\r\n\r\nIf `SemanticVersion` had a `TypeConverter`, it would be automatically picked up by JSON.NET and `SimpleTypeModelBinder`.\r\n\r\nIn the meantime, a workaround is to implement that converter manually and add it dynamically using `TypeDescriptor.AddAttributes`:\r\n\r\n```csharp\r\n    class SemanticVersionConverter : TypeConverter\r\n    {\r\n        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\r\n        {\r\n            return sourceType == typeof(string);\r\n        }\r\n    \r\n        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\r\n        {\r\n            if (value is null)\r\n                return null;\r\n            if (value is string versionString)\r\n                return SemanticVersion.Parse(versionString);\r\n\r\n            throw new ArgumentException($\"Cannot convert '{value.GetType()}' to '{typeof(SemanticVersion)}'\");\r\n        }\r\n\r\n        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\r\n        {\r\n            return destinationType == typeof(string);\r\n        }\r\n\r\n        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\r\n        {\r\n            if (value is null)\r\n                return null;\r\n\r\n            if (destinationType != typeof(string))\r\n                throw new ArgumentException($\"Cannot convert '{value.GetType()}' to '{typeof(string)}'\");\r\n\r\n            if (value is SemanticVersion version)\r\n            {\r\n                return version.ToString();\r\n            }\r\n            \r\n            throw new ArgumentException($\"Cannot convert '{value.GetType()}' to '{typeof(string)}'\");\r\n        }\r\n    }\r\n\r\n    ...\r\n\r\n    TypeDescriptor.AddAttributes(\r\n        typeof(SemanticVersion),\r\n        new TypeConverterAttribute(typeof(SemanticVersionConverter)));\r\n\r\n```"},{"Id":"12894137762","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:25:05","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9792","RelatedDescription":"Opened issue \"Signing process timed out\" (#9792) at NuGet/Home","RelatedBody":"Signing process is extremely slow:\r\nvs2019mb-00000O : https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886826&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e&s=b15d9194-8f26-5328-b47f-5968c76b37e7\r\n\r\nvs2019mb-00000I: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886826&view=logs&j=2f3b5724-75af-5e9f-8e88-844be7aa7661&t=7c0025f2-7f9b-5137-0038-5bda3515fd86\r\n\r\nvs2019mb-000005: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886781&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e\r\n\r\nCompared to a normal build: (only 2 minutes)\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3886647&view=logs&j=8460ae35-dae7-5d3d-b89d-5bc71d24ad43&t=7fae96b6-c2dd-57a3-906e-fd7d7625276e\r\n\r\nThe ticket is raised to tracking this issue:\r\nhttps://icm.ad.msft.net/imp/v3/incidents/details/196425291/home\r\n"},{"Id":"12894122241","Type":"IssuesEvent","CreatedAt":"2020-07-13T23:22:16","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9723","RelatedDescription":"Closed issue \"NuGet.Client packages depend on .NET Standard 1.x packages.\" (#9723) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nAs also happened in microsoft/msbuild#5242, NuGet's NuGet .NET Standard 2.0 packages reference some libraries that were intended for .NET Standard 1.x and are no longer maintained. What is more, these libraries do not directly target .NET Standard 2.0, they greatly expand the package dependency tree. Because we no longer support .NET Standard 1.x the simplest solution is to just remove these package references.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): `NuGet.Client` packages\r\n\r\nNuGet version (x.x.x.xxx): 5.7.0-preview.3\r\n\r\ndotnet.exe --version (if appropriate): N/A\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): N/A\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Using Paket (which shows dependencies), create a `paket.dependencies` file that contains a reference to a prerelease version of a package like `NuGet.Common`.\r\n\r\n2. `paket install`\r\n\r\n3. The resulting `paket.lock` file has more than 100 lines for a single dependency.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n_N/A_\r\n\r\n### Sample Project\r\n\r\n_N/A_\r\n"},{"Id":"12893506500","Type":"IssuesEvent","CreatedAt":"2020-07-13T21:47:34","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9737","RelatedDescription":"Closed issue \"Bug in NuGet.CommandLine.Console's PrintJustified method\" (#9737) at NuGet/Home","RelatedBody":"The PrintJustified method in NuGet.CommandLine.Console does not account for newlines properly when wrapping. An example of this is:\r\n\r\nInput - \r\n```\r\nLogging abstractions for Microsoft.Extensions.Logging.\r\n\r\nCommonly Used Types:\r\nMicrosoft.Extensions.Logging\r\nMicrosoft.Extensions.Logging...\r\n```\r\nWhen we call Console.PrintJustified(2, text);\r\n\r\nActual Output - \r\n```\r\n  Logging abstractions for Microsoft.Extensions.Logging.\r\n\r\nCommonly Used Types:\r\nMicrosoft.Extensions.Lo...\r\n```\r\n\r\nExpected Output -\r\n```\r\n  Logging abstractions for Microsoft.Extensions.Logging.\r\n\r\n  Commonly Used Types:\r\n  Microsoft.Extensions.Lo...\r\n```"},{"Id":"12893109147","Type":"IssuesEvent","CreatedAt":"2020-07-13T20:56:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9460","RelatedDescription":"Closed issue \"Inconsistent analyzer references between legacy and SDK projects\" (#9460) at NuGet/Home","RelatedBody":"NuGet version (x.x.x.xxx):\r\n\r\n```\r\n>msbuild /version\r\nMicrosoft (R) Build Engine version 16.7.0-preview-20215-01+aa655667e for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.7.0.21501\r\n```\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nUnzip [Repro.zip](https://github.com/NuGet/Home/files/4512818/Repro.zip) and build the solution.\r\n\r\nChecking the binlog, the compiler receives different sets of analyzers, even though both projects have the same PackageReference:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/79918785-f6d11800-83e1-11ea-839b-53e1fb0a7ee6.png)\r\n\r\n![image](https://user-images.githubusercontent.com/41759/79918793-f9337200-83e1-11ea-9ddd-2650badbe10a.png)\r\n\r\nIn legacy project the compiler receives satellite assemblies. This is unexpected.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"12893085920","Type":"IssuesEvent","CreatedAt":"2020-07-13T20:53:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9459","RelatedDescription":"Closed issue \"NuGet Pack does not encode file names with non-ASCII characters\" (#9459) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet product used:** nuget.exe\r\n**NuGet version:** 4.6.0 - 5.5.1\r\n**OS version:** Windows 10, version 1909, 18363.778\r\n**Worked before?** yes, 4.5.3\r\n\r\n## Summary\r\n\r\nStarting in NuGet 4.6.0, the pack command does not encode file names containing some special characters (such as Chinese characters: `ä¸­æ–‡æ–‡ä»¶.txt`). This causes older clients and OPC readers to behave incorrectly.\r\n\r\n## Impact\r\n\r\nOlder NuGet client versions, including any code using NuGet.Core such as NuGet.Server (https://github.com/NuGet/NuGetGallery/issues/7955), fail to open the package.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Pack a package with Chinese characters in the file name\r\n1. Open the .nupkg in 7-Zip and look at the file name.\r\n1. Attempt to open the package with `System.IO.Packaging`\r\n\r\n\r\n### 4.5.3\r\n\r\n[TestPack.4.5.3.zip](https://github.com/NuGet/Home/files/4511729/TestPack.4.5.3.zip)\r\n\r\n![image](https://user-images.githubusercontent.com/94054/79897212-3980f900-83be-11ea-8c43-bbd894fa3442.png)\r\n\r\n#### Test tool output\r\n\r\n```\r\n/contentFiles/any/any/modules/testpack/wwwroot/????.txt\r\n/contentFiles/any/any/modules/testpack/wwwroot/????.txt\r\n/package/services/metadata/core-properties/ea59128cca144a82b30ef0b3de6a08a5.psmdcp\r\n/TestPack.nuspec\r\n/_rels/.rels\r\n```\r\n\r\n### 4.6.0\r\n\r\n[TestPack.4.6.0.zip](https://github.com/NuGet/Home/files/4511730/TestPack.4.6.0.zip)\r\n\r\n![image](https://user-images.githubusercontent.com/94054/79897238-469de800-83be-11ea-9f39-6bf8e6438d73.png)\r\n\r\n#### Test tool output - .NET Core\r\n\r\n(the non-encoded files are ignored)\r\n\r\n```\r\n/package/services/metadata/core-properties/e22cd3c096914f2f8f346c156d8b5167.psmdcp\r\n/TestPack.nuspec\r\n/_rels/.rels\r\n```\r\n\r\n#### Test tool exception - .NET Framework\r\n\r\n(the non-encoded files cause an exception)\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: Item has already been added. Key in dictionary: 'contentFiles/any/any/modules/testpack/wwwroot/????????????.txt'  Key being added: 'contentFiles/any/any/modules/testpack/wwwroot/????????????.txt'\r\n   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n   at System.Collections.Hashtable.Add(Object key, Object value)\r\n   at System.Collections.Specialized.OrderedDictionary.Add(Object key, Object value)\r\n   at MS.Internal.IO.Zip.ZipIOCentralDirectoryBlock.ParseRecord(BinaryReader reader, Int64 centralDirectoryOffset, Int32 centralDirectoryCount, Int64 expectedCentralDirectorySize)\r\n   at MS.Internal.IO.Zip.ZipIOCentralDirectoryBlock.SeekableLoad(ZipIOBlockManager blockManager)\r\n   at MS.Internal.IO.Zip.ZipIOBlockManager.get_CentralDirectoryBlock()\r\n   at MS.Internal.IO.Zip.ZipArchive.GetFiles()\r\n   at System.IO.Packaging.ZipPackage.ContentTypeHelper..ctor(ZipArchive zipArchive, IgnoredItemHelper ignoredItemHelper)\r\n   at System.IO.Packaging.ZipPackage..ctor(Stream s, FileMode mode, FileAccess access, Boolean streaming)\r\n   at System.IO.Packaging.Package.Open(Stream stream, FileMode packageMode, FileAccess packageAccess, Boolean streaming)\r\n   at System.IO.Packaging.Package.Open(Stream stream)\r\n   at ConsoleApp1.Program.Main(String[] args) in D:\\trash\\2020-04-21\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 20\r\n```\r\n\r\n### Test tool to show problem\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Packaging;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // var path = @\"C:\\Users\\jver\\Downloads\\TestPack.4.5.3.zip\";\r\n            var path = @\"C:\\Users\\jver\\Downloads\\TestPack.4.6.0.zip\";\r\n            using (var stream = File.OpenRead(path))\r\n            using (var package = Package.Open(stream))\r\n            {\r\n                foreach (var parts in package.GetParts())\r\n                {\r\n                    Console.WriteLine(parts.Uri);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n"},{"Id":"12892947145","Type":"IssuesEvent","CreatedAt":"2020-07-13T20:36:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9416","RelatedDescription":"Closed issue \"Getting \"Text file busy\" error while update NuGet.exe\" (#9416) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 4.1.0\r\n\r\ndotnet.exe --version (if appropriate): No using mono 6.8.0.105\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Linux Ubuntu 18.04.4 kernel 4.15.0-96-generic\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Fresh install of Ubuntu 18.04.4\r\n2. Installed the package mono-complete from the apt repo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\"\r\n3. `$ sudo mono tools/nuget/nuget.exe update -self`\r\n\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n```\r\nXXXX@XXX:~/$ sudo mono tools/nuget/nuget.exe update -self\r\nChecking for updates from https://www.nuget.org/api/v2/.\r\nCurrently running NuGet.exe 4.1.0.\r\nUpdating NuGet.exe to 5.4.0.\r\nText file busy\r\n```\r\n### Sample Project: N/A\r\n\r\n"},{"Id":"12892940445","Type":"IssuesEvent","CreatedAt":"2020-07-13T20:35:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9415","RelatedDescription":"Closed issue \"NuGet should not fail a restore if a feed is inaccessible but no * versioning is required\" (#9415) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n- Any nuget configuration\r\n- Nuget Version: 4.*? Really anything recent\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.  Create a new project (of any real kind that has a nuget package reference). A dotnet core console app works fine. The project should have not * versioning. For example, the following package ref works:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Windows.Compatibility\" Version=\"3.1.0\" />\r\n  </ItemGroup>\r\n```\r\n2. Add a feed to the Nuget.config which can't be accessed.  A 404 or a 401 works fine here. For example, the following NuGet.config:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <solution>\r\n    <add key=\"disableSourceControlIntegration\" value=\"true\" />\r\n  </solution>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"inaccessible\" value=\"https://api.nuget.org/v10/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n```\r\n3. Restore. The restore will fail because the inaccessible feed cannot be accessed\r\n\r\n## Why this shouldn't fail\r\n\r\nWe do not need to fail. Because there is no * versioning in any part of the dependency graph, the restore will either find the required packages, or it will not and it and restore will fail. **Because there is no * versioning, an exhaustive search of all input feeds is not required.**\r\n\r\nThe reason why the dotnet team wants this behavior over the current behavior is that we are an open source project that primarily works in the open, but occasionally needs to do internal builds for security fixes. When doing these security fixes, internal feeds will appear in our On release day, we:\r\n1. Publish our built packages to nuget.org\r\n2. Push the internal commits used to build the release to the public repos and tag them. Customers use these commits to build their own versions of the repos.\r\n3. These commits have internal feeds in their nuget.config files, but because external customers do not have access to these feeds, they cannot build the commit without altering the nuget.config file, even though all required dependencies are accessible.\r\n\r\nWe've worked around this in .NET Core by creating scripting which dynamically alters the nuget.config file prior to build, but this is clunky, only applies to automated builds, and non-obvious.\r\n\r\nThere are some other reasons not to fail:\r\n- If we fail, it means altering or refactoring feed structures can mean that old commits become unbuildable. For instance, the .NET Core team will remove feeds containing isolated, stable packages that are created while doing final builds as those packages are moved to nuget.org. Those feeds still exist in nuget.config from old commits, but those commits will no longer build even though the packages that they need are fully accessible."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-14T05:30:43.7124523Z","RunDurationInMilliseconds":1730}