{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26482831618","Type":"IssuesEvent","CreatedAt":"2023-01-17T15:49:59","Actor":"mariuszgromada","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9352","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Download statistics are not updated\" (#9352) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nFor many days now, for some packages, the download statistics show the same value. \r\n\r\n![image](https://user-images.githubusercontent.com/16277367/212944506-2c434a9c-0cbf-4d2c-8b4c-55a65654583e.png)\r\n\r\nConfirmation can also be found in Nuget Trends.\r\n\r\n![image](https://user-images.githubusercontent.com/16277367/212944848-ddf90b75-f300-4598-8d51-8c7b79a11faa.png)\r\n\n\n### Repro Steps\n\nOn this URL: https://www.nuget.org/packages?q=math\r\nOn this URL: https://nugettrends.com/packages?months=24&ids=MathParser.org-mXparser\n\n### Expected Behavior\n\nMathParser.org-mXparser package has c.a. 1500-2000 downloads daily.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"26424199539","Type":"IssuesEvent","CreatedAt":"2023-01-14T01:07:04","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9336","RelatedDescription":"Closed issue \"[NuGet.org Bug]: HTTP responses aren't reported to user\" (#9336) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nIf a package author tries to upload\r\na) a signed package without a registered signing key, or\r\nb) an unsigned package when a signing key is registered,\r\n...the package will not be uploaded and no error message will be shown to the author.\r\n\r\nThe only way to find any kind of information is to open the DevTools and inspect the HTTP response. The HTTP response will look something like\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/209454605-bf34c11d-20f9-4ae3-b557-ced11ce2c24b.png)\r\n\n\n### Repro Steps\n\nSee above\n\n### Expected Behavior\n\nThe error message is shown to the user, and it clearly explains what the author must do in order to upload the package. The error message in the HTTP response **is not** be sufficient.\r\nLinks to documentation that articulates the necessity would also be helpful.\r\n\r\nA slight necessary OT: our organisation maintains several packages some of which are signed and some of which aren't. We can't sign all of the packages (and it's besides the point). Up until recently we published all packages without issues, and now when I tried to upload a new version of the signed package I couldn't do it. After some head scratching and investigations, essentially I was forced to register the signing key. And after that I could no longer upload a new version of the unsigned package....\r\n_If_ this is now \"by design\" this has to be explained, as well as steps to resolve such situations should be provided. \"Sign all your packages\" may not be an option.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26543361851","Type":"IssuesEvent","CreatedAt":"2023-01-19T21:19:30","Actor":"mathieubourgeois","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12375","RelatedDescription":"Opened issue \"Restoring sln file restores project with improper configuration/platform pairs\" (#12375) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild version \"17.4.1+9a89d02ff\"\n\n### Worked before?\n\nUnsure\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI am trying to port a solution to .Net 6. In the process, I've noticed a weird issue with the restore. In VS, everything works fine. However, when building from MSBuild, I am getting extra assemblies copied to my output folder which shouldn't be there based on the configuration.\r\n\r\nAfter analysis of the binlog, I've narrowed it down to the combination of NuGet and a project with a conditional `ProjectReference`. Under some `Configuration` values, I have a reference to the project or not. However, when building with the `Configuration` that shouldn't have this project referred, it still gets copied (along with its dependencies) to the output. The reason seems to be from the fact that I am restoring a solution file. More specifically, I have :\r\n\r\n- Sln file\r\n  - Solution Configuration|Platform pairs : `Debug|x64` and `Release|x64`\r\n- Multiple csproj, each with their own set of Configuration|Platform pair, which don't necessarily match\r\n\r\nWhen looking at the evaluation of the restore project in the binlog, it becomes pretty clear what the source of the problem is : when doing the restoring evaluation in the csproj, `Configuration` and `Platform` end up being those of the solution, and not those of the actual project being restored. This is why the unreferenced project ends up copied, because NuGet evaluated it in a Configuration|Platform pair where the `ProjectReference` is actually used.\r\n\r\nI narrowed down the actual source of the issue, which is the `_LoadRestoreGraphEntryPoints`, more specifically, the `GetRestoreSolutionProjectsTask` task inside the target. The `RestoreGraphProjectInputItems` items generated are of the following fashion :\r\n\r\n```\r\n<RestoreGraphProjectInputItems Include=\"Path/to/the/file.csproj\" >\r\n  <AdditionalProperties>Configuration=Release; Platform=x64</AdditionalProperties>\r\n  <Platform>AnyCPU</Platform>\r\n  <Configuration>RedactedProjectConfiguration</Configuration>\r\n  <ToolsVersion>Current</ToolsVersion>\r\n  <SkipNonexistentProjects>Build</SkipNonexistentProjects>\r\n</RestoreGraphProjectInputItems>\r\n```\r\n\r\nAnd that's where the problem becomes (relatively) clear. The `AdditionalProperties` are passed straight to the restore MSBuild tasks, and they contain the solution configuration/platform pairs, which override the whole thing and cause the issue. The reason why I'm suggesting this is a problem coming from `GetRestoreSolutionProjectsTask` is because this task takes into input `ProjectReference` from the solution, which, in this case, can be of the `.metaproj` variety. This task then removes the .metaproj and considers it as a valid restore input. Which is fair, except for the fact that the csproj and its metaproj file are actually different : specifically, a metaproj file seems to be a wrapper on top of the csproj, and works based on Solution-level logic (i.e. Solution-level configuration and platform), while the csproj is actually based on that csproj' configuration and platform. When going from a metaproj back to a csproj, we are forgetting to go back from the solution configuration/platform to the csproj configuration/platform.\r\n\r\nI have a solution to circumvent the issue, though it is not exactly long-term proof : we can add the following `after.$(SolutionName).sln.targets` file next to the solution, with the following content :\r\n\r\n```\r\n<Project>\r\n  <Target Name=\"_PatchNugetSolutionProjectReferences\" DependsOnTargets=\"_LoadRestoreGraphEntryPoints\" BeforeTargets=\"_FilterRestoreGraphProjectInputItems\" Returns=\"@(RestoreGraphProjectInputItems)\">\r\n    <ItemGroup>\r\n      <RestoreGraphProjectInputItems Update=\"$(RestoreGraphProjectInput)\">\r\n        <AdditionalProperties>Configuration=%(RestoreGraphProjectInputItems.Configuration); Platform=%(RestoreGraphProjectInputItems.Platform)</AdditionalProperties>\r\n      </RestoreGraphProjectInputItems>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nWith this, I'm doing (essentially) what I'm saying is missing, i.e. regenerate the `AdditionalProperties` for the projects based on the actual `Configuration`/`Platform` pair that's provided and that the csproj will run on normally. It's not exactly perfect (this relies on the fact that `AdditionalProperties` only contains Configuration and Platform, and that the `Configuration` and `Platform` metadata attributes are indeed the csproj-level Configuration and Platform.\r\n\r\nThis solution seems to be sufficient on my end to circumvent the issue, but I think a proper fix would make more sense. I'm willing to give it a try if that can help, however I am unsure if what I'm proposing, even if cleaned up, is sufficient. A cleaner version of what I did would be to parse and rewrite the `AdditionalProperties` in `GetRestoreSolutionProjectsTask` to only modify `Configuration` and `Platform`. However, we'd still rely on the (maybe correct, but I'm not sure) assumption that the `Configuration` and `Platform` metadata are the actual csproj-level properties.\n\n### Verbose Logs\n\n_No response_"},{"Id":"26540665273","Type":"IssuesEvent","CreatedAt":"2023-01-19T18:59:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12374","RelatedDescription":"Opened issue \"NuGet should include the files emitted during restore in the binary log\" (#12374) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nDuring a build, it is possible to embed arbitrary files in the binary log.  The .NET SDK by default includes the `project.assets.json` file during build: https://github.com/dotnet/sdk/pull/16840\r\n\r\nHowever, during restore the file does not exist yet so a binlog for just restore can be missing files.  NuGet should include these files after restore is complete.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"26514197395","Type":"IssuesEvent","CreatedAt":"2023-01-18T19:27:46","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12373","RelatedDescription":"Opened issue \"Static graph-based restore crashes on systems with alternate console encodings\" (#12373) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nVisual Studio 17.5 and above\n\n### Worked before?\n\nYes, Visual Studio 17.4\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nIn Windows Region settings, enable \"Use Unicode UTF-8 for worldwide language support\"\r\n\r\n![image](https://user-images.githubusercontent.com/17556515/213275269-9fd1c932-a002-4da7-9dd1-786230fb913e.png)\r\n\r\nThis seems to make Console.StandardInput have a 3-byte preamble, causing the logic that read the static graph restore arguments to not work correctly.\r\n\r\nReported by @vlada-shubina\r\n\r\nCaused by https://github.com/NuGet/NuGet.Client/pull/4772\n\n### Verbose Logs\n\n_No response_"},{"Id":"26511901794","Type":"IssuesEvent","CreatedAt":"2023-01-18T17:45:03","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12372","RelatedDescription":"Opened issue \"Static graph-based restore should always log an error on failure\" (#12372) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nWhen static graph-based restore runs, the restore is run in a different process.  The logic in this process has a few spots where something can go wrong and the EXE will not log an error.  In rare cases, no error is logged and restore appears to succeed.\n\n### Desired Behavior\n\nAll places in the EXE's code where something can go wrong should log an error and the RestoreTaskEx should consider looking at the exit code in case its non-zero instead of only determining success/failure based on if any errors were logged.\n\n### Additional Context\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-01-20T03:31:57.8779477Z","RunDurationInMilliseconds":1531}