{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"38547926245","Type":"PullRequestEvent","CreatedAt":"2024-05-20T22:42:05","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9935","RelatedDescription":"Merged pull request \"[Dark Theme] Fix failing functional tests related to minification\" (#9935) at NuGet/NuGetGallery","RelatedBody":"Functional tests related to minification started to fail with this new feature.\r\nWhat is happening is that CSS minification isn't able to understand the CSS variables because we are using an old package to handle bundle/minification (System.Web.Optimization from 2014).\r\n\r\n```\r\nFound:    Minification failed\r\n      In value: /* Minification failed. Returning unminified contents.\r\n      (296,15): run-time error CSS1039: Token not allowed after unary operator: '-brandForegroundLinkRest'\r\n      (301,15): run-time error CSS1039: Token not allowed after unary operator: '-brandForegroundLinkHover'\r\n      (306,27): run-time error CSS1039: Token not allowed after unary operator: '-neutralStrokeFocus2Rest'\r\n      (533,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground3Rest'\r\n      (622,26): run-time error CSS1039: Token not allowed after unary operator: '-neutralBackground5Rest'\r\n      (1582,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground3Rest'\r\n      (1819,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground2Rest'\r\n      (1821,33): run-time error CSS1039: Token not allowed after unary operator: '-neutralStroke2Rest'\r\n      (1838,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground1Rest'\r\n      (1859,26): run-time error CSS1039: Token not allowed af\r\n      Stack Trace:\r\n        D:\\a\\_work\\1\\s\\tests\\NuGetGallery.FunctionalTests\\StaticAssets\\StaticAssetsTests.cs(145,0): at NuGetGallery.FunctionalTests.StaticAssets.StaticAssetsTests.<NoBundleFailsMinification>d__14.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\n\r\n#### Fix\r\n\r\nGrunt also creates minified files every time we use `grunt` command, with this change I'm no longer adding the files to the `site.min.css` bundle to avoid minification and instead use the minified file we already have. \r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9936"},{"Id":"38513207444","Type":"PullRequestEvent","CreatedAt":"2024-05-19T20:30:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9951","RelatedDescription":"Opened pull request \"[Hotfix] Allow unrelated entity changes to be committed in PackageDeprecationService\" (#9951) at NuGet/NuGetGallery","RelatedBody":"Mitigation for https://github.com/NuGet/NuGetGallery/issues/9950 in the package deprecation path.\r\n\r\n**Hotfix justification:** deprecation API calls that would otherwise no-op sometimes return HTTP 500. Since this is a private preview API, there is no data correctness impact, and non-no-op deprecations work just fine, we could choose to not do a hotfix. I would just to prefer to get this fixed ASAP to eliminate a source of HTTP 500s.\r\n\r\nCurrently, if a deprecation call no-ops all package version and the node handling the deprecation has a different download count cached for a package version than is what in the DB, an HTTP 500 occurs.\r\n\r\nThis is because the package entity has changes (per the issue referenced above) but the deprecation service does not detect any changes on the entity. `IPackageUpdateService.UpdatePackagesAsync` is called with an empty list and throws an argument exception which is causing the HTTP 500. We have seen this about 300 times on the deprecation API in the past week, all of which are first party packages or are related to https://github.com/DefinitelyTyped/NugetAutomation/issues/21.\r\n\r\nThis was not detected locally because storage-based statistics are not used. This was not detected on DEV or INT because the package used for testing had the same download count in DB and in the downloads.v1.json file therefore the `DownloadCountObjectMaterializedInterceptor` did not introduce any entity changes."},{"Id":"38512407110","Type":"IssuesEvent","CreatedAt":"2024-05-19T18:58:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9950","RelatedDescription":"Opened issue \"[NuGet.org Bug]: DownloadCountObjectMaterializedInterceptor modifies packages in EF context\" (#9950) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen we read download counts from a downloads.v1.json file in Gallery and therefore have `DownloadCountObjectMaterializedInterceptor` enabled, potentially unexpected entity changes can be staged in the EF context by the interceptor.\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/c92f5fdf7b53392d94d967e5c53d842c79afa3e6/src/NuGetGallery/Services/DownloadCountObjectMaterializedInterceptor.cs#L46\r\n\r\nThis line of code modifies the `DownloadCount` property on the package meaning and `SaveChanges` later in the same EF context scope will update this property along with other changes.\r\n\r\nIt's unclear whether leaking downloads.v1.json values into the DB slowly, and organically along with other package entity changes was intended. But what is does do is case EF context to return `HasChanges = true` in more cases than the server layer code may expect making no-ops not work properly.\n\n### Repro Steps\n\n1. Enable downloads.v1.json integration in gallery (via `Gallery.AzureStorage.Statistics.ConnectionString`)\r\n2. Make the DB value different from the downloads.v1.json value for a package\r\n3. Deprecate that package\r\n4. Deprecate that package again with the same settings (should no-op)\r\n\r\nActual behavior: HTTP 500 due to no packages being passed into this line:\r\nhttps://github.com/NuGet/NuGetGallery/blob/c92f5fdf7b53392d94d967e5c53d842c79afa3e6/src/NuGetGallery/Services/PackageDeprecationService.cs#L161\r\n\r\nI think the most ideal case would be no modifying the entity at all with the value from the downloads.v1.json and just using it for view purposes. Unfortunately, we have combined our view model and our entity model in many cases meaning it's hard to use a different download count in our app without modifying the entity.\n\n### Expected Behavior\n\nPackage deprecation should no-op instead of having an HTTP 500.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"38490857291","Type":"PullRequestEvent","CreatedAt":"2024-05-18T01:25:01","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9949","RelatedDescription":"Opened pull request \"UI fixes for Dark theme\" (#9949) at NuGet/NuGetGallery","RelatedBody":"This PR fixes some UI errors found while testing in dev deployment\r\n\r\nSpec: https://github.com/NuGet/Engineering/pull/5209\r\nMain Issue: https://github.com/NuGet/NuGetGallery/issues/8773"},{"Id":"38490836090","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:06","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9865","RelatedDescription":"Closed issue \"[UI] Add new theme to Account pages\" (#9865) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"38490835400","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:03","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9896","RelatedDescription":"Closed issue \"Add Telemetry to \"Theme\" select in Account Settings\" (#9896) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"38490835032","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:00","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9880","RelatedDescription":"Closed issue \"[UI] Add theme to Package view page\" (#9880) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"38544968250","Type":"IssuesEvent","CreatedAt":"2024-05-20T20:25:07","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13448","RelatedDescription":"Closed issue \"TaskResultCache incorrectly shares the same lock object for all the keys.\" (#13448) at NuGet/Home","RelatedBody":"There is a *very* subtle bug in `TaskResultCache` that is causing the same lock object to be used rather than a different one per key. Here's the offending code:\r\n\r\n`object lockObject = _perTaskLock.GetOrAdd(key, static () => new object());`\r\n\r\nThis erroneously caches the *delegate* that is used. The intent was to pass in a delegate that will create a new object and cache/lock on that."},{"Id":"38525938486","Type":"IssuesEvent","CreatedAt":"2024-05-20T09:32:29","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13452","RelatedDescription":"Opened issue \"An error “Package System.ArgumentNullException: Value cannot be null” occurs when restoring package with the context menu: ‘Restore NuGet Packages’ after cleaning solution\" (#13452) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Right-click the solution node in Solution Explorer window and click the context menu: ‘Clean Solution’. \r\n\r\n3. Right-click the solution node in Solution Explorer window and click the context menu: ‘Restore NuGet Packages’. \r\n\r\n#### Expected:    \r\n\r\nThe retore is successful without any error. \r\n\r\n#### Actual: \r\n\r\nAn error “Package System.ArgumentNullException: Value cannot be null” occurs as below: \r\n![image (1)](https://github.com/NuGet/Home/assets/84695155/781da4f9-b725-431f-942a-a0375651e22b)\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It doesn’t repro on non-SDK project that install package with “packages.config” format. \r\n\r\n3. It doesn’t repro after running ‘dotnet restore’ or ‘msbuild /t:restore’ command in CLI and ‘nuget restore’ in PMC.  \r\n\r\n \n\n### Verbose Logs\n\n_No response_"},{"Id":"38525786449","Type":"IssuesEvent","CreatedAt":"2024-05-20T09:27:29","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13451","RelatedDescription":"Opened issue \"Failed to regenerate a new cache file after deleting cache file and rebuilding solution\" (#13451) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Build the solution, observe generate a restore cache file inside obj/ folder.  \r\n\r\n3. Delete the cache file manually. \r\n\r\n4. Rebuild the solution, observe if it will regenerate a cache file inside obj/ folder and the timestamp is updated. \r\n\r\n#### Expected:    \r\n\r\nA cache file with an updated timestamp is regenerated in the obj/ folder. \r\n\r\n#### Actual: \r\n\r\nNo cache file is regenerated in the obj/ folder as below: \r\n![time](https://github.com/NuGet/Home/assets/84695155/374a87ec-6ff0-4619-87af-86825ca0a120)\r\n\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It also reproes on UWP project and non-SDK project that install package with “PackageReference” format \n\n### Verbose Logs\n\n_No response_"},{"Id":"38502709999","Type":"IssuesEvent","CreatedAt":"2024-05-19T00:05:29","Actor":"gilmorem560","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13450","RelatedDescription":"Opened issue \"NU1202 Package Framework Compatiblity Error Emitted on Precisely Compatible Framework (Windows Only?)\" (#13450) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\ndotnet CLI 8.0.204 (Windows), Nuget Package Manager 6.9.2\n\n### Worked before?\n\ndotnet CLI 8.0.204 (macOS)\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n```\r\ndotnet new classlib -f net6.0\r\ndotnet add package Microsoft.EntityFrameworkCore -v 6.0.7\r\n```\r\n\r\nFound today trying to load a project I'm working on using .NET 6 that a package which here clearly states it is compatible with net6.0 (and we have indeed had in a few net6.0 projects for a long time) is now not compatible with net6.0: https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/6.0.7#supportedframeworks-body-tab\r\n\r\nFor the record, the latest 6.0.x version does restore, as do the 6.0.6 and 6.0.8 versions right around this one. Additionally, doing this very same, with the same version of the dotnet CLI tool actually does work on macOS. Thus far this appears to strictly be happening with package version 6.0.7 of this package on Windows.\r\n\r\nI don't have a means at present to contact the package authors but I wanted to get this visible to folks here as everything on the published package that I can see indicates net6.0 should be very much supported.\r\n\r\nFor the record both the link above and the NuGet Package Manager in Visual Studio display net6.0 as the compatible framework for this package:\r\n\r\n![image](https://github.com/NuGet/Home/assets/36053668/e71cadc5-87ee-4e6e-93be-9591be8ad470)\r\n\r\nUpgrading package is fine in my personal use case, but still this seems pretty contradictory and may indicate some deeper issue. I want to make sure I document this in case anyone else runs into this sort of problem where the package add/restore operation directly contradicts the package metadata on Windows.\n\n### Verbose Logs\n\n```shell\nerror: NU1202: Package Microsoft.EntityFrameworkCore 6.0.7 is not compatible with net6.0 (.NETCoreApp,Version=v6.0). Package Microsoft.EntityFrameworkCore 6.0.7 does not support any target frameworks.\n```\n"},{"Id":"38501675129","Type":"IssuesEvent","CreatedAt":"2024-05-18T21:26:01","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13190","RelatedDescription":"Closed issue \"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd\" (#13190) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd"},{"Id":"38500224976","Type":"IssuesEvent","CreatedAt":"2024-05-18T18:32:41","Actor":"JustinPechstein","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13427","RelatedDescription":"Reopened issue \"Reference not working after migrating to PackageReference\" (#13427) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n.NET SDK Version 8.0.204\n\n### Worked before?\n\nUnknown\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nHello, \r\nyesterday I restructured my files and projects a bit and since I did this I have this new errormessage \" Must use PackageReference\".\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/dba9adc6-1c98-4250-bfbf-521c0c6b19f7)\r\n\r\nI quickly found out that I have to migrate the packages.config to PackageReferences to solve this problem. \r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/8cd20f39-b214-4543-950d-ec5c0c4d3b8c)\r\n\r\nSo I did the migration as shown (once with every transitive dependencies checked and once with only the Top-level dependencies).\r\n\r\nThis worked completely fine for all the projects, instead of \"Microsoft.Office.Interop.Excel\". After the migration the reference is bugged and the \"new\" behavior is hard to explain. In general the reference exists:\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/559c231d-0b98-4853-9de4-0089961d27b1)\r\n\r\nand I can use it in the using section without any problems:\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/e460708a-360f-4820-b69c-8c3a951d6279)\r\n\r\nBut, without doing anything I have tons of errors because of whatever reason...\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/4fcc65cd-a5b5-44be-be85-743e84c8f604)\r\n\r\nThere are several datatypes that can be resolved but the properties for \"Rows\" and \"Cells\" are not being found.\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/006ede65-d197-460f-8f52-950207d6957f)\r\n\r\nI am very curious about this, did I miss something, did the migration miss something? Or might this be a problem with that package?\r\n\r\nI am thankful for every helpful response because I cannot carry on right now...\n\n### Verbose Logs\n\n_No response_"},{"Id":"38490559325","Type":"IssuesEvent","CreatedAt":"2024-05-18T00:52:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13449","RelatedDescription":"Opened issue \"NuGet nomination code causes unnecessary allocations\" (#13449) at NuGet/Home","RelatedBody":"Check `VsSolutionRestoreService` and `VSNominationUtilities` for inappropriate usage of LINQ, particularly examples like:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/f702fc3dc44e17a0666dea01e9aa18c5c1175b27/src/NuGet.Clients/NuGet.SolutionRestoreManager/VsSolutionRestoreService.cs#L295-L298\r\n\r\nCollections should be created with the correct initial capacity to avoid risk of resizing.\r\n\r\nanonymous lamba functions cause allocations too, which can be avoided with for loops."},{"Id":"38485066247","Type":"IssuesEvent","CreatedAt":"2024-05-17T19:01:27","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13448","RelatedDescription":"Opened issue \"TaskResultCache incorrectly shares the same lock object for all the keys.\" (#13448) at NuGet/Home","RelatedBody":"There is a *very* subtle bug in `TaskResultCache` that is causing the same lock object to be used rather than a different one per key. Here's the offending code:\r\n\r\n`object lockObject = _perTaskLock.GetOrAdd(key, static () => new object());`\r\n\r\nThis erroneously caches the *delegate* that is used. The intent was to pass in a delegate that will create a new object and cache/lock on that."},{"Id":"38481714876","Type":"IssuesEvent","CreatedAt":"2024-05-17T16:46:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13413","RelatedDescription":"Closed issue \"IVsNuGetProjectUpdateEvents.ProjectUpdateStarted or ProjectUpdateFinished should only provide a list of files that will get changed.\" (#13413) at NuGet/Home","RelatedBody":"https://learn.microsoft.com/en-us/nuget/visual-studio-extensibility/nuget-api-in-visual-studio#ivsnugetprojectupdateevents-interface\r\n\r\nIVsNuGetProjectUpdateEvents.ProjectUpdateStarted or ProjectUpdateFinished should provide a list of files that will/got changed.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/2027014"},{"Id":"38468443762","Type":"IssuesEvent","CreatedAt":"2024-05-17T09:45:03","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13447","RelatedDescription":"Opened issue \"[Bug Bash] The layout of ‘Options->NuGet Package Manager->General’ window messes up after clicking the button ‘Clear All NuGet Storage’ when the settings of ‘Scale’ are different in multiple screens\" (#13447) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.11.0.53\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on D16.11\\34601.136 but reproes on D17.9\\34601.282. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**  \r\n\r\n1. Create a C# Console App (.NET Framework) project in VS.   \r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n3. Click the settings button (gear button) in PM UI. \r\n4. Click the ‘NuGet Package Manager->General’ in the opened ‘Options’ window. \r\n5. Click the button ‘Clear All NuGet Storage’. \r\n6. Obverse the layout of ‘NuGet Package Manager->General' window. \r\n\r\n**Expected:**      \r\nThe layout of ‘Options->NuGet Package Manager->General’ window would not change after clicking the button ‘Clear All NuGet Storage’. \r\n\r\n**Actual:** \r\nThe layout of ‘Options->NuGet Package Manager->General’ window messes up after clicking the button ‘Clear All NuGet Storage’ as below: \r\n![image](https://github.com/NuGet/Home/assets/149561645/bdda5d0a-41d2-460f-82e5-a20b061354b8)\r\n\r\n**Notes:**   \r\n1. The repro rate is 100% when the settings of ‘Scale’ are different in multiple screens (for example: one screen is 100% and the second screen is 125% as below). \r\n![image](https://github.com/NuGet/Home/assets/149561645/9ff79aa2-2fc8-4441-a929-839923faaa87)\r\n2. If you didn’t repro it on one screen, it will repro after dragging the VM to the second screen and click the button ‘Clear All NuGet Storage’ again. (But the precondition is you have different ‘Scale’ settings in multiple screens.)\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-05-21T03:30:18.4877964Z","RunDurationInMilliseconds":1026}