{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33996246294","Type":"PullRequestEvent","CreatedAt":"2023-12-07T23:50:47","Actor":"RiadGahlouz","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9747","RelatedDescription":"Opened pull request \"Allow admins to select a specific number of package versions\" (#9747) at NuGet/NuGetGallery","RelatedBody":"This PR adds a little prompt when you click in the `Select listed` or `Select unlisted` asking you how many packages you want to select. If you type anything but a number, it selects all (default behavior, just press enter) \r\n![image](https://github.com/NuGet/NuGetGallery/assets/1711217/ee4750ef-e46c-4421-8ae8-2e68483e1087)\r\n\r\nAfter Clicking: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/1711217/16eeca91-ce67-4bfc-9efb-f6d5e24b581b)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9517"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33997182607","Type":"IssuesEvent","CreatedAt":"2023-12-08T00:44:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13079","RelatedDescription":"Opened issue \"Stop ilmerging pack\" (#13079) at NuGet/Home","RelatedBody":"This currently prevents us from moving all of our assemblies to net5.0 from netstandard2.0. \r\n\r\nNote that theoretically we could move the net472 leg to netstandard2.0 to satisfy compatibility, but we'd need to make sure that there's no conditional code in those packages. \r\n\r\nRelated: https://github.com/NuGet/Home/issues/9886"},{"Id":"33991139664","Type":"IssuesEvent","CreatedAt":"2023-12-07T20:04:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13078","RelatedDescription":"Opened issue \"Many implementations of restore lead to maintability issues\" (#13078) at NuGet/Home","RelatedBody":"As a consequence of how restore has evolved over it's existence in NuGet, we have many different implementations of restore that require maintaining. \r\n\r\n1. packages.config is supported in nuget.exe, msbuild and VS, and while there's a lot of shared code, at the end, wiring up each restore correctly may lead to a bug/inconsistency in one or more tools.\r\n2. PackageReference is supported in nuget.exe, msbuild, dotnet and VS. In addition to that, msbuild and dotnet have static and non static graph restore.  VS on the other hand, has a legacy and CPS PackageReference projects.\r\n\r\nAdding a single property requires changes in 3 or 4 different codepaths.\r\n\r\nSome things are really hard to change, example, legacy PR project vs CPS project. \r\nOthers are easier, regular vs static graph restore.\r\n\r\nNote that I don't necessarily have a proposal here, beyond minimize duplication where possible and we're really affected by the fact that we're doubling an SDK: see https://github.com/NuGet/Home/issues/13077, but it is something that we need to be driving towards."},{"Id":"33990774357","Type":"IssuesEvent","CreatedAt":"2023-12-07T19:50:13","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13048","RelatedDescription":"Closed issue \"[Bug]: Building test project with only one framework causes NU1701 warning on different one\" (#13048) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#9432**\r\n- Please respond to @msmolka.\r\n\r\n---\r\n\r\n_From @msmolka on Friday, November 17, 2023 7:19:59 AM_\r\n\r\n### Issue Description\n\nI have simple test project: See attached file\r\nit is multi target with one eol .dotnet version 5\r\n\r\n```xml\r\n<TargetFrameworks>net8.0;net462;net5.0</TargetFrameworks>\r\n```\r\n\r\nI've added package:\r\n\r\n```xml\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.Extensions.TimeProvider.Testing\" Version=\"8.0.0\" />\r\n    </ItemGroup>\r\n```\r\n\r\nnow building project reports warning on ALL 3 target versions. If I remove .net5 - all is correct\r\nif I add it reports warning\r\n\r\neven running simple command with forcing build only for .net 8 produces nu1701 warning.\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\r\n\r\n\r\n[TestMultiTarget.zip](https://github.com/dotnet/msbuild/files/13388533/TestMultiTarget.zip)\r\n\n\n### Steps to Reproduce\n\nRun attached repo with framework 8\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\n\n### Expected Behavior\n\nWarning only appears when building target framework 5 not any other supported ones.\n\n### Actual Behavior\n\nWarning is produced even for supported frameworks:\r\n\r\n```\r\nwarning NU1701: Package 'Microsoft.Extensions.TimeProvider.Testing 8.0.0' was restored using '.NETF \r\nramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project tar \r\nget framework 'net5.0'. This package may not be fully compatible with your project. [TargetFramework=net8.0]\r\n\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_"},{"Id":"33990570012","Type":"IssuesEvent","CreatedAt":"2023-12-07T19:42:22","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13041","RelatedDescription":"Closed issue \"Nuget Central Package Management cannot update versions in imported \"Directory.Packages.props\" files with non-default name\" (#13041) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n\"nuget.exe\" reports 6.8.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhile experimenting with CPM, I first tried something similar to this rather weird structure of nuget CPM declarations:\r\n\r\nIn the solution root, there sits a \"Directory.Packages.props\" file that imports a file \"Included_Directory.Packages.props\". \r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <Import Project=\".\\Included_Directory.Packages.props\" />\r\n  <ItemGroup>\r\n    <!--Additional package versions -->\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis file \"Included_Directory.Packages.props\" defines a version for \"Newtonsoft.Json\":\r\n```\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe projects declare a package reference:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\n\r\nWhen using Nuget Package Manager to update \"Newtonsoft.Json\", it does not update the version in \"Included_Directory.Packages.props\" but overwrites the version in each project file:\r\n```\r\n  <ItemGroup>\r\n    <PackageVersion Update=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n  </ItemGroup>\r\n```\r\n\r\nSee attached sample (with original state - you have to update \"Newtonsoft.Json\" to reproduce the problem): [NugetCPM_NonDefault.zip](https://github.com/NuGet/Home/files/13463457/NugetCPM_NonDefault.zip)\r\n\r\n\r\nMy reason for doing something like this: I have a rather large tools solution with a lot of utility dlls, and I have an application that references those utility dlls (by including copies of the tools dll in a local folder and referencing those dlls instead of using Nuget package references - due to historical reasons :-( ). So I want to copy the \"Directory.Packages.props\" from the utility solution to the application solution with a different name, and import it in the application solution \"Directory.Packages.props\". When updating a nuget package, VS would modify each project file instead of trying to write to the imported \"Directory.Packages.props\".\r\n\r\n\r\n\r\nIt works when the imported file has the name \"Directory.Packages.props\" and is just placed in a subdir. So, this would be the workaround for me.\r\nHere is a sample with this workaround:\r\n[NugetCPM_Default.zip](https://github.com/NuGet/Home/files/13463458/NugetCPM_Default.zip)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33989464940","Type":"IssuesEvent","CreatedAt":"2023-12-07T18:59:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13077","RelatedDescription":"Opened issue \"Merge NuGet.ProjectModel, NuGet.DependencyResolver.Core and NuGet.LibraryModel \" (#13077) at NuGet/Home","RelatedBody":"Current project graph: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/bb361f15-f4f2-4027-bc53-e93197084484)\r\n\r\n\r\n- NuGet itself doubles as a tool and an SDK. \r\n- Unfortunately the SDK part frequently conflicts with the goals of the tool. For example, for performance purposes, we frequently want to refactor parts of the restore code, but NuGet being an SDK itself frequently leads to issues on that end, where we need to maintain multiple implementations. \r\n\r\nMerging these libraries into 1 and selectively reducing the public API area would lead to long term benefits as these assemblies are all restore specific. \r\n\r\nNow this is likely to lead to some migration issues early on, but will have long term benefits. \r\n\r\nNote that we can either merge all of these into 1 assembly, for example, nuget project model, or we can just merge them into nuget.commands directly. \r\n\r\nWhile there are more assemblies that can be merged in general, this is likely to be the least breaking one of the ones I could come up with. \r\n"},{"Id":"33975575472","Type":"IssuesEvent","CreatedAt":"2023-12-07T11:48:24","Actor":"mcanzerini","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13062","RelatedDescription":"Closed issue \"dotnet restore takes too much time (docker dotnet/sdk:8.0)\" (#13062) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndocker dotnet/sdk 8.0\n\n### Worked before?\n\ndocker dotnet/sdk 7.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n### The Bug\r\n\r\nWith dotnet/sdk:8.0, `dotnet restore` in a container takes way too much time (45 minutes to restore a project).\r\n\r\nThis only happens in my gitlab ci, not in local. It is probably due to limited resources available for the gitlab runner. \r\nThe ops in charge of the runner tells my that the CPU usage was above 100% during the long restore.\r\n\r\n```\r\n$ dotnet restore --no-cache\r\nRestored /builds/**/A.csproj (in 10.11 min).\r\nRestored /builds/**/B.csproj (in 14.13 min).\r\nRestored /builds/**/C.csproj (in 2.03 min).\r\nRestored /builds/**/D.csproj (in 36.08 min).\r\n```\r\n\r\nWith dotnet/sdk:7.0, the project is restored in 45 seconds.\r\n\r\nSee below the logs if I add the option `-v diagnostic`. The process is extermely long during this kind of operations.\n\n### Verbose Logs\n\n```shell\n...\r\nAcquiring lock for the installation of System.Diagnostics.Tracing 4.3.0 (TaskId:91)\r\nAcquired lock for the installation of System.Diagnostics.Tracing 4.3.0 (TaskId:91)\r\nInstalled Xamarin.UITest 4.2.0 from https://my.artifactory/artifactory/api/nuget/nuget/ with content hash <xxx>. (TaskId:91)\r\nAcquiring lock for the installation of System.Globalization 4.3.0 (TaskId:91)\r\nAcquired lock for the installation of System.Globalization 4.3.0 (TaskId:91)\r\nAssembly loaded during TaskRun (NuGet.Build.Tasks.RestoreTask): System.Diagnostics.StackTrace, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: /usr/share/dotnet/shared/Microsoft.NETCore.App/8.0.0/System.Diagnostics.StackTrace.dll, MVID: 9f2e188b-5afc-4c69-84d1-4627254ba14f, AppDomain: [Default]) (TaskId:91)\r\n...\n```\n"},{"Id":"33974536055","Type":"IssuesEvent","CreatedAt":"2023-12-07T11:14:28","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13064","RelatedDescription":"Closed issue \"`FrameworkReducer` does not create same result as `dotnet restore` command line\" (#13064) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Frameworks 6.8.0\n\n### Worked before?\n\nno\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. Create a project with target framework net8.0-windows\r\n2. Add reference to `Steema.TeeChart.NET` in version 4.2023.11.17\r\n3. `dotnet restore`\r\n\r\nThe package `Microsoft.WinForms.Designer.SDK` is restored because it is an [indirect dependency of `Steema.TeeChart.NET` for the target framework `net6.0-windows7.0`](https://www.nuget.org/packages/Steema.TeeChart.NET/4.2023.11.17#dependencies-body-tab).\r\n\r\n4. Create a console app (I've used target framework `net6.0`, but I think this is not relevant.)\r\n5. Add reference to `NuGet.Protocol` in version `6.8.0` (I'm explicitly using `NuGet.Protocol` and implicitly using `NuGet.Frameworks`.)\r\n6. Run the tests below.\r\n\r\nBoth tests should succeed, but one fails.\r\nThe failing test exactly reproduces the exact package definition of the example `Steema.TeeChart.NET` and which is successful in `dotnet restore`.\r\nThe successful tests is slightly different and maybe shows the glitch in the definition of the sample package.\r\n\r\nAnyway:\r\n1. Why `dotnet restore` works differently from using `FrameworkReducer` from `NuGet.Frameworks`?\r\n2. Is it correct that the package specifies \"net6.0-windows7.0\" as dependency target platform?\r\n\r\nFailing test is using \"net6.0-windows7.0\" as dependency target platform:\r\n```cs\r\n[Fact]\r\npublic void GetNearest_UsingWindows7_WindowsSpecificTargetUsed()\r\n{\r\n    var frameworkReducer = new FrameworkReducer();\r\n    var projectTargetFramework = NuGetFramework.Parse(\"net8.0-windows\");\r\n    var frameworks = new List<NuGetFramework>\r\n    {\r\n        NuGetFramework.Parse(\"net6.0\"),\r\n        NuGetFramework.Parse(\"net6.0-windows7.0\"),\r\n        NuGetFramework.Parse(\".NETFramework,Version=v4.0\"),\r\n        NuGetFramework.Parse(\".NETFramework,Version=v4.8\")\r\n    };\r\n    \r\n    var nearest = frameworkReducer.GetNearest(projectTargetFramework, frameworks);\r\n\r\n    nearest!.ToString().Should().Be(\"net6.0-windows7.0\");\r\n}\r\n```\r\n\r\nSuccessful test is using \"net6.0-windows\" without \"7.0\":\r\n```cs\r\n[Fact]\r\npublic void GetNearest_UsingWindows_WindowsSpecificTargetUsed()\r\n{\r\n    var frameworkReducer = new FrameworkReducer();\r\n    var projectTargetFramework = NuGetFramework.Parse(\"net8.0-windows\");\r\n    var frameworks = new List<NuGetFramework>\r\n    {\r\n        NuGetFramework.Parse(\"net6.0\"),\r\n        NuGetFramework.Parse(\"net6.0-windows\"),\r\n        NuGetFramework.Parse(\".NETFramework,Version=v4.0\"),\r\n        NuGetFramework.Parse(\".NETFramework,Version=v4.8\")\r\n    };\r\n    \r\n    var nearest = frameworkReducer.GetNearest(projectTargetFramework, frameworks);\r\n\r\n    nearest!.ToString().Should().Be(\"net6.0-windows\");\r\n}\r\n```\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33971991620","Type":"IssuesEvent","CreatedAt":"2023-12-07T09:58:27","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13076","RelatedDescription":"Opened issue \"[Bug Bash] There should not be dirty indicator at the right of “NuGet-Solution” when just opening the solution-level PM UI \" (#13076) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.9.0.50\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:  \r\n1.Create a C# Console App (.NET Core 8.0) [or C# Console App (.NET Framework)] project in VS.\r\n2.Add a new C# Console App (.NET Core 8.0) [or C# Console App (.NET Framework)] project into the solution.\r\n3.Right-click the solution in the Solution Explorer window and select the menu item “Manage NuGet Packages for Solution…”.\r\n4.Observe the right of “NuGet-Solution” on the opened solution-level PM UI.\r\n\r\n#### Expected Results:  \r\nNo dirty indicator is showing at the right of “NuGet-Solution”.\r\n\r\n#### Actual Results:  \r\nA dirty indicator is showing at the right of “NuGet-Solution” as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/84a7552a-5a47-418a-b80a-e2c77088ccc2)\r\n\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It reproes on 17.8 [34223.131.d17.8].\r\n3.It only reproes on a solution having multiple projects, doesn’t repro on a project-level PM UI.\r\n4.It only reproes on a solution with multiple .NET Framework projects on 16.11 and 17.0, doesn’t repro on a solution with multiple .NET Core projects.\n\n### Verbose Logs\n\n_No response_"},{"Id":"33971318882","Type":"IssuesEvent","CreatedAt":"2023-12-07T09:38:13","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13075","RelatedDescription":"Opened issue \"[Bug Bash] The “Update” button is clickable when switching back to the package which had installed the latest version from another package in the Browse tab  \" (#13075) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.50\n\n### Worked before?\n\nIt can be repro on 17.8(17.8\\34223.131),  but it doesn't repro on 16.11[34301.259] and 17.0[33801.228].\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:       \r\n\r\n1. Create a C# Console App (.NET Core) -- .NET 8.0 project.   \r\n\r\n2. Right-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n\r\n3. Go to \"Browse\" tab, select a package (for example \"Newtonsoft.Json\"), click the ↓ button and click “OK” button in the \"Preview Changes\" window. \r\n\r\n4. Switch to any other package and then switch back to the installed package (for example \"Newtonsoft.Json\"). \r\n\r\n5. Observe the right panel. \r\n\r\n#### Expected:     \r\n\r\nThe “Update” button should be still unclickable.  \r\n\r\n#### Actual:        \r\n\r\nThe “Update” button is clickable after switching back as below: \r\n![Picture1](https://github.com/NuGet/Home/assets/84695155/b576089e-369d-4336-b7a8-3428580b9bf5)\r\n\r\n#### Note:    \r\n\r\n1.The repro rate is 100%.  \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33971187786","Type":"IssuesEvent","CreatedAt":"2023-12-07T09:34:14","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13074","RelatedDescription":"Opened issue \"[Bug Bash] An error “isEmpty” occurs in the Installed/Updated/Consolidate tab of solution-level PM UI after unloading and reloading project\" (#13074) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.50\n\n### Worked before?\n\nIt can be repro on 16.11[34301.259] \\17.0[33801.228] \\17.8[34223.131]..\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:       \r\n\r\n1. Create a C# Class Library (.NET Framework) project in VS.   \r\n\r\n2. Right-click the solution in the Solution Explorer window and select \"Manage NuGet Packages for Solution...\" menu item to open the solution-level PM UI.   \r\n\r\n3. Right-click the project in Solution Explorer and select the \"Unload Project\" menu item.   \r\n\r\n4. Right-click the project in Solution Explorer and select the \"Reload Project\" menu item.   \r\n\r\n5. Observe the Installed/Updated/Consolidate tab in solution-level PM UI. \r\n\r\n     \r\n\r\n#### Expected:  \r\n\r\nThere is no error in the Installed/Updated/Consolidate tab.   \r\n\r\n#### Actual:        \r\n\r\nAn error “isEmpty” occurs in the Installed/Updated/Consolidate tab as below: \r\n\r\n \r\n![image](https://github.com/NuGet/Home/assets/84695155/a80110bc-a2c5-4f83-b525-6073f808e9d8)\r\n\r\n\r\n#### Notes:    \r\n\r\n1. The repro rate is 80%.   \r\n\r\n2. The issue also repro on .Net Core template project. \r\n\r\n3. The error is described as “An internal error occurred. Please contact Microsoft Support.” on 16.11 and 17.0 branch. \n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-08T03:30:21.604002Z","RunDurationInMilliseconds":1339}