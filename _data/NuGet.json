{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14135684202","Type":"IssuesEvent","CreatedAt":"2020-11-10T02:19:57","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8318","RelatedDescription":"Opened issue \"Layout page change has broken status razor build\" (#8318) at NuGet/NuGetGallery","RelatedBody":"This change: \r\nhttps://github.com/NuGet/NuGetGallery/pull/8256/files\r\nSpecifically this line:\r\nhttps://github.com/NuGet/NuGetGallery/blob/master/src/NuGetGallery/Views/Shared/Gallery/Layout.cshtml#L35\r\n...will now block updating the NuGetGallery submodule in https://github.com/NuGet/NuGet.Services.Status. If you build the repo with an updated submodule, it will complete, but the default page has a dependency on layout.cshtml which causes the razor compile to fail at this line (looks like ViewBag is unknown)."},{"Id":"14134229507","Type":"PullRequestEvent","CreatedAt":"2020-11-09T22:51:51","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8317","RelatedDescription":"Merged pull request \"Accept packages with a minClientVersion of 5.8.0\" (#8317) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8316"},{"Id":"14134082976","Type":"PullRequestEvent","CreatedAt":"2020-11-09T22:35:38","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8317","RelatedDescription":"Opened pull request \"Accept packages with a minClientVersion of 5.8.0\" (#8317) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8316"},{"Id":"14134073896","Type":"IssuesEvent","CreatedAt":"2020-11-09T22:34:35","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8316","RelatedDescription":"Opened issue \"Support packages with minClientVersion of 5.8.0\" (#8316) at NuGet/NuGetGallery","RelatedBody":"NuGet.exe v5.8.0 was released today.\r\n\r\nSee: https://docs.microsoft.com/en-us/nuget/reference/nuspec#minclientversion"},{"Id":"14133953562","Type":"PullRequestEvent","CreatedAt":"2020-11-09T22:21:20","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8315","RelatedDescription":"Opened pull request \"[SAS Token] Fallback when permissions cannot be use on container creation.\" (#8315) at NuGet/NuGetGallery","RelatedBody":"In some places we create a container and right after setting the permission access, since we cannot modify permissions after a container has been created when using a sas token we need to modify this behavior to add the permissions at creation time.\r\n\r\n**AuthorizationFailure** is the error we get when trying to perform an update of the permissions of an already created container.\r\nSee error on: https://docs.microsoft.com/en-us/rest/api/storageservices/sas-error-codes\r\n\r\nAddress: https://github.com/NuGet/Engineering/issues/3484"},{"Id":"14131341115","Type":"PullRequestEvent","CreatedAt":"2020-11-09T18:09:15","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8306","RelatedDescription":"Merged pull request \"Removed unused localIP member of CloudAuditingService.\" (#8306) at NuGet/NuGetGallery","RelatedBody":"While looking for `Task.Result` code I stumbled upon `localIp = AuditActor.GetLocalIpAddressAsync().Result` call in `DefaultDepenenciesModule` that then was passed into the `CloudAuditingService` constructor, stored in its member and never used.\r\nLooking at the [commit](https://github.com/NuGet/NuGetGallery/commit/0972d34ca76c22d8d0fde38c56634e0fd88008e3#diff-37cab84da1c323a1f9471a097fe7961e57f58238dd39a25cfa4558799920cc8eR27) that introduced that constructor argument, it was unused from the beginning. Removing it, will get rid of one `Task.Result` call."},{"Id":"14131330286","Type":"PullRequestEvent","CreatedAt":"2020-11-09T18:08:19","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8309","RelatedDescription":"Merged pull request \"Dropping the narration completely for absent signature and deprecation information\" (#8309) at NuGet/NuGetGallery","RelatedBody":"Another take on https://github.com/NuGet/NuGetGallery/issues/8196 (Previous attempt: https://github.com/NuGet/NuGetGallery/pull/8287)\r\n\r\nThe expectation actually was that empty cells are not read completely by a narrator, instead of producing an explanation regarding why the cell is empty.\r\n\r\nThe new behavior is as follows: if there are no deprecation or signature icons in the table, narrator completely ignores the existence of those columns (i.e. says \"3 by 4\" instead of \"3 by 6\" for the table size and it is no longer possible to navigate to those empty cells with Ctrl+Alt+Arrow keys); if there are deprecation or signature icons the column number will accommodate (i.e. will become \"3 by 5\" or \"3 by 6\" depending on number of icons) and those icons can be focused, empty cells still cannot be focused."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14134034649","Type":"IssuesEvent","CreatedAt":"2020-11-09T22:30:13","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10244","RelatedDescription":"Opened issue \"Add warning to nuget.exe restore suggesting to use msbuild restore instead\" (#10244) at NuGet/Home","RelatedBody":"## Background\r\n\r\nSolutions which only use PackageReference never needed to use nuget.exe restore. Solutions that had at least 1 packages.config project HAD to use nuget.exe, until we added `-p:RestorePackagesConfig=true` some time ago.\r\n\r\nSince NuGet 5.8 had to introduce a change to the assets file for .NET 5, this has exposed a problem where customers use an old version of nuget.exe to restore their project (create the assets file), but then the version of the build tools they use (msbuild, .NET SDK) expects NuGet's newer \"version\" of the SDK. This causes the build to fail. It was made worse by an unclear error message that asked the customer to restore, rather than telling them that they were using inconsistent versions of tooling. But it shouldn't be so \"difficult\" to use consistent versions of tooling.\r\n\r\nThis is particularly a problem for CI, where the customer's build scripts will have steps like 1. Download/configure NuGet.exe (often specifying a specific version) 2. nuget.exe restore 3. msbuild -t:build. - It's difficult for customers to know they need to keep the versions of nuget.exe in-sync with the version of msbuild, especially when the build script uses whatever version of Visual Studio (msbuild) is installed on the CI agent, often out of their control, but they are responsible for getting nuget.exe, since it doesn't ship with VS. If they have a CI agent pool where different agents have different versions of Visual Studio/MSBuild, the customer's CI script has no chance of getting it \"right\", although the chance that different agents in a single pool using different versions of tools is very low, since most engineers expect the entire agent pool to be consistent.\r\n\r\n## Proposal\r\n\r\nNuGet.exe already does msbuild version detection. When we detect MSBuild version X or higher, we should emit an info message or warning telling the customer to use msbuild restore instead, with a link to docs where we explain how. We can detect if the solution uses any packages.config, or is PackageReference only, to give different messages, if needed.\r\n\r\nWhich version X of MSBuild to warn on is up for debate. We could figure out which version of msbuild we first shipped `-p:RestorePackagesConfig=true` and use that version. Or we could use 16.8, since this is the version starting to cause the current issues.\r\n\r\nThis will help us educate customers that they no longer need to use nuget.exe to restore."},{"Id":"14132280405","Type":"IssuesEvent","CreatedAt":"2020-11-09T19:35:14","Actor":"sbanni","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10008","RelatedDescription":"Closed issue \"PM UI Perf - search tab - in codespaces/non-codespaces\" (#10008) at NuGet/Home","RelatedBody":"metadata retrieval\nversion retrieval\n...\n"},{"Id":"14131729220","Type":"IssuesEvent","CreatedAt":"2020-11-09T18:44:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10241","RelatedDescription":"Closed issue \"Can nuget restore download packages from private repository using only API Key?\" (#10241) at NuGet/Home","RelatedBody":"## Details about Problem\r\nCan `nuget restore` (`dotnet restore`, `msbuild -t:Restore <path to project>`) use API key for the private repository to get packages from it, or Username / Password are required?\r\n\r\nEvery Nuget documentation page that mentioned API keys is for uploading the package to Nuget repository (which works fine for me), and none of them tells you if you can use API key when restoring packages. The [discussion](https://github.com/NuGet/Home/issues/6233) raises the similar issue, but I could find there a definite answer to this question.\r\nAnswer [here](https://github.com/NuGet/Home/issues/3664#issuecomment-354946142) also hints that username/password are required.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version: 5.7.0.6726\r\n\r\ndotnet.exe --version (if appropriate): 3.1.403\r\n\r\nVS version (if appropriate): 16.7.7\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): 10.0.17134 Build 17134\r\n\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Have a package in a private repo that requires you to provide login/password in order to download a package. (Let's call it RepoP)\r\n\r\n2. Have a project and references the package mentioned above.\r\n\r\n3. Have valid API key that allows you to upload package to the _RepoP_\r\n\r\n4. Set `nuget.config`\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>\r\n      <config />\r\n      <packageRestore>\r\n        <!-- Allow NuGet to download missing packages -->\r\n        <add key=\"enabled\" value=\"True\" />\r\n    \r\n        <!-- Automatically check for missing packages during build in Visual Studio -->\r\n        <add key=\"automatic\" value=\"True\" />\r\n      </packageRestore>\r\n      <packageSources>\r\n        <clear />\r\n        <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\r\n        <add key=\"RepoP\" value=\"<RepoP Url>\" />\r\n      </packageSources>\r\n      <apikeys>\r\n        <add key=\"<RepoP Url>\" value=\"<Valid Encrypted API Key>\" />\r\n      </apikeys>\r\n    </configuration>\r\n\r\n5. Use `nuget restore <project path> -ConfigFile .\\nuget.config`\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\nCannot provide that, but nuget requests user to enter login/password for the RepoP repository.\r\n\r\n### Sample Project\r\n\r\n"},{"Id":"14131563168","Type":"IssuesEvent","CreatedAt":"2020-11-09T18:28:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9406","RelatedDescription":"Closed issue \"Restore fails with -Source <Relative Path>\" (#9406) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n`nuget restore` fails when specifying a relative path with `-Source` option in 5.5.1 or later versions. Because it tries to resolve the relative path based on the project file location.\r\n\r\nThis problem also occurs in dotnet-sdk 3.1.201, but dotnet-sdk 3.0.103 is fine.\r\n\r\nNuGet product used : NuGet.exe and dotnet.exe\r\nNuGet version : 5.5.1\r\nOS version (i.e. win10 v1607 (14393.321)): Tested on mono 6.8 and ubuntu 16.04\r\nWorked before? If so, with which NuGet version: 5.4.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.  Make a project structure like below:\r\n```\r\n├── ConsoleApp1\r\n│   ├── ConsoleApp1.csproj\r\n│   └── Program.cs\r\n├── NuGets\r\n│   ├── microsoft.netcore.app.ref.3.0.0.nupkg\r\n│   └── newtonsoft.json.12.0.3.nupkg\r\n├── ConsoleApp1.sln\r\n```\r\n2. Clear all nuget caches\r\n```\r\nnuget.exe locals all -clear\r\n```\r\n\r\n3. Restore the project with a relative nuget source path \r\n```\r\nnuget.exe restore ConsoleApp1.sln -Source ./NuGets\r\n```\r\n\r\n### Verbose Logs\r\n\r\n```\r\n+ echo '#### Restore with nuget 5.4.0 ###'\r\n#### Restore with nuget 5.4.0 ###\r\n+ mono tools/nuget_5.4.0.exe locals all -clear\r\nClearing NuGet HTTP cache: /home/user/.local/share/NuGet/v3-cache\r\nClearing NuGet global packages folder: /home/user/.nuget/packages/\r\nClearing NuGet Temp cache: /tmp/NuGetScratch\r\nClearing NuGet plugins cache: /home/user/.local/share/NuGet/plugins-cache\r\nLocal resources cleared.\r\n+ mono tools/nuget_5.4.0.exe restore ConsoleApp1.sln -Source ./NuGets\r\nMSBuild auto-detection: using msbuild version '15.0' from '/usr/lib/mono/msbuild/15.0/bin'.\r\nRestoring packages for /home/user/RestoreWithRelativePath/ConsoleApp1/ConsoleApp1.csproj...\r\nInstalling Microsoft.NETCore.App.Ref 3.0.0.\r\nInstalling Newtonsoft.Json 12.0.3.\r\nCommitting restore...\r\nAssets file has not changed. Skipping assets file writing. Path: /home/user/RestoreWithRelativePath/ConsoleApp1/obj/project.assets.json\r\nRestore completed in 404.66 ms for /home/user/RestoreWithRelativePath/ConsoleApp1/ConsoleApp1.csproj.\r\n\r\nNuGet Config files used:\r\n    /home/user/.config/NuGet/NuGet.Config\r\n\r\nFeeds used:\r\n    /home/user/RestoreWithRelativePath/NuGets\r\n\r\nInstalled:\r\n    1 package(s) to /home/user/RestoreWithRelativePath/ConsoleApp1/ConsoleApp1.csproj\r\n\r\n+ echo '#### Restore with nuget 5.5.1 ###'\r\n#### Restore with nuget 5.5.1 ###\r\n+ mono tools/nuget_5.5.1.exe locals all -clear\r\nClearing NuGet HTTP cache: /home/user/.local/share/NuGet/v3-cache\r\nClearing NuGet global packages folder: /home/user/.nuget/packages/\r\nClearing NuGet Temp cache: /tmp/NuGetScratch\r\nClearing NuGet plugins cache: /home/user/.local/share/NuGet/plugins-cache\r\nLocal resources cleared.\r\n+ mono tools/nuget_5.5.1.exe restore ConsoleApp1.sln -Source ./NuGets\r\nMSBuild auto-detection: using msbuild version '15.0' from '/usr/lib/mono/msbuild/15.0/bin'.\r\nRestoring packages for /home/user/RestoreWithRelativePath/ConsoleApp1/ConsoleApp1.csproj...\r\nThe local source '/home/user/RestoreWithRelativePath/ConsoleApp1/NuGets' doesn't exist.\r\n```\r\n\r\n### Sample Project\r\nhttps://github.com/WonyoungChoi/RestoreWithRelativePath\r\n\r\n\r\n\r\n"},{"Id":"14131008750","Type":"IssuesEvent","CreatedAt":"2020-11-09T17:40:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10111","RelatedDescription":"Closed issue \"NuGet.VisualStudio.Internal.Contracts should use PublicAPIAnalyzers\" (#10111) at NuGet/Home","RelatedBody":"`NuGet.VisualStudio.Internal.Contracts` is not packed into a nupkg, and is entirely for NuGet's own internal use. However, it defines the over-the-wire contracts for Code Spaces (and Live Share?) scenarios. Therefore, backwards compatibility is still very important. Hence we should use PublicApiAnalyzers to minimise the risk that someone accidentally adds a breaking change.\r\n"},{"Id":"14123972579","Type":"IssuesEvent","CreatedAt":"2020-11-09T08:09:27","Actor":"kobelobster","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10243","RelatedDescription":"Opened issue \"mono nuget.exe not able to build solution with multiple projects\" (#10243) at NuGet/Home","RelatedBody":"I am using `mono nuget.exe`, because I'm behind a proxy, and the `dotnet` command doesn't seem to work with a proxy: See this issue: https://github.com/dotnet/sdk/issues/14456\r\n\r\nAnyway, for easier access, I'm copy/pasting my information from the other ticket in here\r\n\r\n### Description\r\n\r\nOkay, this will be a loooooooooooong description, because this is such a special use case (it seems)\r\n\r\nI currently am building a pipeline on GitLab for our .NET projects which should\r\n\r\n* Build the project\r\n* Run the unit tests\r\n* Deploy the image (Later...)\r\n\r\nWe also have a custom NuGet feed hosted at a SonaType Nexus instance on premise. All our services are behind a proxy and use a self-signed certificate.\r\n\r\nSo, basically, the steps we have to do in the pipeline are the following\r\n\r\n* Create a pipeline, based on `mcr.microsoft.com/dotnet/core/sdk:3.1`\r\n* Set the proxy environment variables\r\n* Install the custom certificate\r\n* Add & enable our custom NuGet feed sources\r\n* Restore all packages\r\n* Build the solution\r\n* Run the unit tests\r\n\r\nSince we will have many C# projects that will all have the same \"issue\" that they are using packages on a custom nuget feed, behind a proxy with a self signed certificate, my first action was to create a \"base image\" which\r\n\r\n* Set the proxy environment variables\r\n* Install the custom certificate\r\n\r\nSo this is the code I came up with\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1\r\n\r\n# Will be populated by CLI\r\nARG NUGET_USER_PASSWORD\r\nARG proxy\r\n\r\n# SETTING PROXY\r\nENV http_proxy=${proxy}\r\nENV https_proxy=${proxy}\r\nENV HTTP_PROXY=${proxy}\r\nENV HTTPS_PROXY=${proxy}\r\n\r\n# INSTALL DEPS & CERTS\r\nRUN apt-get update && apt-get -yqq install ca-certificates mono-complete\r\nRUN mkdir -p /usr/local/share/ca-certificates/cert.com\r\nCOPY .docker/cert.com.crt /usr/local/share/ca-certificates/cert.com/\r\nRUN update-ca-certificates --fresh\r\n\r\n# Install nuget\r\nRUN wget -q https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\r\nRUN mv nuget.exe /usr/local/bin/nuget.exe\r\n```\r\n\r\nYou might already be wondering why I'm using `mono nuget.exe` and not `dotnet`. This is because there is NO way to set an http_proxy with `dotnet`, but only with the `nuget.exe` which requires `mono` because we are on Linux (because of the base image)\r\n\r\nSo then, the next step is to add & enable our custom NuGet feed sources\r\n\r\n```\r\nRUN mono /usr/local/bin/nuget.exe config -set http_proxy=\"${proxy}\"\r\nRUN mono /usr/local/bin/nuget.exe sources Add -Source \"https://sonatype-nexus.ourdomain.com/repository/digital-de-ng-releases/\" -Name \"Digital DE Repository\" -UserName \"digital-de-nuget\" -Password $NUGET_USER_PASSWORD -StorePasswordInClearText\r\nRUN mono /usr/local/bin/nuget.exe sources Add -Source \"https://sonatype-nexus.ourdomain.com/repository/nuget.org-proxy/\" -Name \"NuGet Proxy\"\r\nRUN mono /usr/local/bin/nuget.exe sources Enable -Name \"Digital De Repository\"\r\nRUN mono /usr/local/bin/nuget.exe sources Enable -Name \"NuGet Proxy\"\r\n```\r\n\r\n------\r\n\r\nSo now, the base image is set. \r\n\r\nNow, I build another project, which is a \"common\" library which's purpose is to provide C# functionality used across many projects (such as specific interfaces, that can be used in multiple projects) and this project should also be deployed automatically to our custom feed, so I have this\r\n\r\n```\r\n## Image definitions\r\nimage: registry.ourdomain.com/cms/previouslycreatedimage:1.0.2\r\n\r\n[...code].\r\n  script:\r\n    - dotnet pack -p:PackageVersion=${VERSION}\r\n    - mono /usr/local/bin/nuget.exe push Common/bin/Debug/Common.${VERSION}.nupkg -Source https://sonatype-nexus.ourdomain.com/repository/digital-de-ng-releases\r\n```\r\n\r\nThis works without any problems. The package is pushed to our custom nuget feed. In my **NEXT AND THIRD** project, I now want to use this COMMON package, which, on a local machine also works. But as soon as I push it to GitLab, where a new pipeline runs, it fails when tryting to restore the packages. \r\n\r\n* When I use `dotnet restore --configfile {configfileFromMono)`, it fails with an SSL exception, as if it wouldn't be using any http_proxy settings. To fix this, I tried...\r\n  * Adding `- export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt` and `- export SSL_CERT_DIR=/dev/null` -> No success\r\n  * I also tried `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0` -> No success\r\n\r\nI also used `cat ~/.config/NuGet/NuGet.Config` and can see my `http_proxy` properly configured in there, so it is configured correctly. But anyway, since I was using `mono` for all my other commands, I thought, it makes sense to use `mono` in here as well, so I changed `dotnet restore` to `mono /usr/local/bin/nuget.exe restore`\r\n\r\nbut this is the output\r\n\r\n```\r\n MSBuild auto-detection: using msbuild version '' from '/usr/bin'.\r\n>>>> xbuild tool is deprecated and will be removed in future updates, use msbuild instead <<<<\r\nMSBUILD: error MSBUILD0004: Too many project files specified\r\n```\r\nBecause my project has a `Project.csproj` and a `Tests.csproj`. \r\n\r\nSo what I would like to know is:\r\n\r\n* Why does the `dotnet` command not accept the certificates whereas `mono` does it without problems?\r\n* Why does the `dotnet` command appear not to use the proxy settings whereas `mono` does it without problems?\r\n* Why can't the `nuget.exe` restore a solution with multiple projects whereas `dotnet` can without any problems?\r\n* Why is there no possibility to tell `nuget.exe` to restore a solution for a specific project, so I could restore each project individually?"},{"Id":"14123966527","Type":"IssuesEvent","CreatedAt":"2020-11-09T08:08:53","Actor":"kobelobster","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10242","RelatedDescription":"Closed issue \"DEL\" (#10242) at NuGet/Home","RelatedBody":"DEL"},{"Id":"14123933352","Type":"IssuesEvent","CreatedAt":"2020-11-09T08:05:35","Actor":"kobelobster","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10242","RelatedDescription":"Opened issue \"mono nuget.exe cannot build solution with multiple projects\" (#10242) at NuGet/Home","RelatedBody":"I am using `mono nuget.exe`, because I'm behind a proxy, and the `dotnet` command doesn't seem to work with a proxy: See this issue: https://github.com/dotnet/runtime/issues/44346\r\n\r\nAnyway, for easier access, I'm copy/pasting my information from the other ticket in here\r\n\r\n### Description\r\n\r\nOkay, this will be a loooooooooooong description, because this is such a special use case (it seems)\r\n\r\nI currently am building a pipeline on GitLab for our .NET projects which should\r\n\r\n* Build the project\r\n* Run the unit tests\r\n* Deploy the image (Later...)\r\n\r\nWe also have a custom NuGet feed hosted at a SonaType Nexus instance on premise. All our services are behind a proxy and use a self-signed certificate.\r\n\r\nSo, basically, the steps we have to do in the pipeline are the following\r\n\r\n* Create a pipeline, based on `mcr.microsoft.com/dotnet/core/sdk:3.1`\r\n* Set the proxy environment variables\r\n* Install the custom certificate\r\n* Add & enable our custom NuGet feed sources\r\n* Restore all packages\r\n* Build the solution\r\n* Run the unit tests\r\n\r\nSince we will have many C# projects that will all have the same \"issue\" that they are using packages on a custom nuget feed, behind a proxy with a self signed certificate, my first action was to create a \"base image\" which\r\n\r\n* Set the proxy environment variables\r\n* Install the custom certificate\r\n\r\nSo this is the code I came up with\r\n\r\n```\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1\r\n\r\n# Will be populated by CLI\r\nARG NUGET_USER_PASSWORD\r\nARG proxy\r\n\r\n# SETTING PROXY\r\nENV http_proxy=${proxy}\r\nENV https_proxy=${proxy}\r\nENV HTTP_PROXY=${proxy}\r\nENV HTTPS_PROXY=${proxy}\r\n\r\n# INSTALL DEPS & CERTS\r\nRUN apt-get update && apt-get -yqq install ca-certificates mono-complete\r\nRUN mkdir -p /usr/local/share/ca-certificates/cert.com\r\nCOPY .docker/cert.com.crt /usr/local/share/ca-certificates/cert.com/\r\nRUN update-ca-certificates --fresh\r\n\r\n# Install nuget\r\nRUN wget -q https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\r\nRUN mv nuget.exe /usr/local/bin/nuget.exe\r\n```\r\n\r\nYou might already be wondering why I'm using `mono nuget.exe` and not `dotnet`. This is because there is NO way to set an http_proxy with `dotnet`, but only with the `nuget.exe` which requires `mono` because we are on Linux (because of the base image)\r\n\r\nSo then, the next step is to add & enable our custom NuGet feed sources\r\n\r\n```\r\nRUN mono /usr/local/bin/nuget.exe config -set http_proxy=\"${proxy}\"\r\nRUN mono /usr/local/bin/nuget.exe sources Add -Source \"https://sonatype-nexus.ourdomain.com/repository/digital-de-ng-releases/\" -Name \"Digital DE Repository\" -UserName \"digital-de-nuget\" -Password $NUGET_USER_PASSWORD -StorePasswordInClearText\r\nRUN mono /usr/local/bin/nuget.exe sources Add -Source \"https://sonatype-nexus.ourdomain.com/repository/nuget.org-proxy/\" -Name \"NuGet Proxy\"\r\nRUN mono /usr/local/bin/nuget.exe sources Enable -Name \"Digital De Repository\"\r\nRUN mono /usr/local/bin/nuget.exe sources Enable -Name \"NuGet Proxy\"\r\n```\r\n\r\n------\r\n\r\nSo now, the base image is set. \r\n\r\nNow, I build another project, which is a \"common\" library which's purpose is to provide C# functionality used across many projects (such as specific interfaces, that can be used in multiple projects) and this project should also be deployed automatically to our custom feed, so I have this\r\n\r\n```\r\n## Image definitions\r\nimage: registry.ourdomain.com/cms/previouslycreatedimage:1.0.2\r\n\r\n[...code].\r\n  script:\r\n    - dotnet pack -p:PackageVersion=${VERSION}\r\n    - mono /usr/local/bin/nuget.exe push Common/bin/Debug/Common.${VERSION}.nupkg -Source https://sonatype-nexus.ourdomain.com/repository/digital-de-ng-releases\r\n```\r\n\r\nThis works without any problems. The package is pushed to our custom nuget feed. In my **NEXT AND THIRD** project, I now want to use this COMMON package, which, on a local machine also works. But as soon as I push it to GitLab, where a new pipeline runs, it fails when tryting to restore the packages. \r\n\r\n* When I use `dotnet restore --configfile {configfileFromMono)`, it fails with an SSL exception, as if it wouldn't be using any http_proxy settings. To fix this, I tried...\r\n  * Adding `- export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt` and `- export SSL_CERT_DIR=/dev/null` -> No success\r\n  * I also tried `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0` -> No success\r\n\r\nI also used `cat ~/.config/NuGet/NuGet.Config` and can see my `http_proxy` properly configured in there, so it is configured correctly. But anyway, since I was using `mono` for all my other commands, I thought, it makes sense to use `mono` in here as well, so I changed `dotnet restore` to `mono /usr/local/bin/nuget.exe restore`\r\n\r\nbut this is the output\r\n\r\n```\r\n MSBuild auto-detection: using msbuild version '' from '/usr/bin'.\r\n>>>> xbuild tool is deprecated and will be removed in future updates, use msbuild instead <<<<\r\nMSBUILD: error MSBUILD0004: Too many project files specified\r\n```\r\nBecause my project has a `Project.csproj` and a `Tests.csproj`. \r\n\r\nSo what I would like to know is:\r\n\r\n* Why does the `dotnet` command not accept the certificates whereas `mono` does it without problems?\r\n* Why does the `dotnet` command appear not to use the proxy settings whereas `mono` does it without problems?\r\n* Why can't the `nuget.exe` restore a solution with multiple projects whereas `dotnet` can without any problems?\r\n* Why is there no possibility to tell `nuget.exe` to restore a solution for a specific project, so I could restore each project individually?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-11-10T05:30:39.6363024Z","RunDurationInMilliseconds":2073}