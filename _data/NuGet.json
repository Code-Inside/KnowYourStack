{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40475611606","Type":"PullRequestEvent","CreatedAt":"2024-07-25T21:06:38","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10056","RelatedDescription":"Closed pull request \"[Feature]: DNDocs #10055\" (#10056) at NuGet/NuGetGallery","RelatedBody":"Created a link to DNDocs in similar way like FuGet does.\r\nCreated Unit Tests \r\n\r\nAddresses [https://github.com/NuGet/NuGetGallery/issues/10055](https://github.com/NuGet/NuGetGallery/issues/10055)"},{"Id":"40463452804","Type":"IssuesEvent","CreatedAt":"2024-07-25T14:07:27","Actor":"JKorf","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10081","RelatedDescription":"Opened issue \"[NuGet.org issue]: NuGet.org support unavailable\" (#10081) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nNuGet.org support is unavailable or unresponsive depending on the topic of the support request.\r\n\r\nSpecifically when information about the `Binance.Net` package is requested it seems the message is lost along the way.\r\n\r\nJokes aside; NuGet support is only reachable via email (or webform, but that's basically the same). Not receiving any answer on sent messages for over 2 weeks on why my package is unlisted doesn't seem right. \n\n### Repro Steps\n\n1. Develop / maintain a NuGet package for 7 years and build up a user base\r\n2. Report a package with a similar name to your own package for artificial download numbers on the NuGet gallery\r\n3. Receive confirmation from NuGet support that the package has been unlisted after investigation\r\n4. Realize your own package is now also unlisted\r\n\r\nNuGet support will now no longer respond to any questions around the package. Note that requests unrelated to this are still possible.\n\n### Expected Behavior\n\nWhen a package is unlisted information should be given to the owner, and questions should be answered. Especially if this seems to be an error.\r\n\r\nThe package doesn't break any rules so I'd like to have it (and the account publishing it) restored. \n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"40443303648","Type":"PullRequestEvent","CreatedAt":"2024-07-25T00:48:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10080","RelatedDescription":"Merged pull request \"Fix gallery functional tests now that CPM is enabled\" (#10080) at NuGet/NuGetGallery","RelatedBody":"Functional tests were broken by me via https://github.com/NuGet/NuGetGallery/pull/10076. Package reference versions should not be set in project files when CPM (central package management) is used.\r\n\r\nAlso did some minor cleanup of unused scripts. Uses repo root build tools instead of a copy just for functional tests."},{"Id":"40437934685","Type":"PullRequestEvent","CreatedAt":"2024-07-24T19:58:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10080","RelatedDescription":"Opened pull request \"Fix gallery functional tests now that CPM is enabled\" (#10080) at NuGet/NuGetGallery","RelatedBody":"Functional tests were broken by me via https://github.com/NuGet/NuGetGallery/pull/10076. Package reference versions should not be set in project files when CPM (central package management) is used.\r\n\r\nAlso did some minor cleanup of unused scripts. Uses repo root build tools instead of a copy just for functional tests."},{"Id":"40435115985","Type":"PullRequestEvent","CreatedAt":"2024-07-24T18:09:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10079","RelatedDescription":"Merged pull request \"Move to latest ServerCommon build tools\" (#10079) at NuGet/NuGetGallery","RelatedBody":"This does not change behavior, just brings alignment."},{"Id":"40434743212","Type":"PullRequestEvent","CreatedAt":"2024-07-24T17:55:32","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10079","RelatedDescription":"Opened pull request \"Move to latest ServerCommon build tools\" (#10079) at NuGet/NuGetGallery","RelatedBody":"This does not change behavior, just brings alignment."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40474618586","Type":"IssuesEvent","CreatedAt":"2024-07-25T20:24:05","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13655","RelatedDescription":"Opened issue \"[Tech Debt] Improve test for XPlatHelpOutputTests.cs\" (#13655) at NuGet/Home","RelatedBody":"More context in this PR: https://github.com/NuGet/NuGet.Client/pull/5931#discussion_r1690669461\r\n\r\nWe can improve XPlatHelpOutputTests.cs tests by a injecting TextWriter into the MainInternal method and have the Main method just pass Console.Out so that we don't have to update the global state of Console.\r\n"},{"Id":"40464625522","Type":"IssuesEvent","CreatedAt":"2024-07-25T14:38:10","Actor":"voroninp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13653","RelatedDescription":"Opened issue \"Coud yoy reference a bug in the docs, please?\" (#13653) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nThere's a known bug https://github.com/dotnet/sdk/issues/25294 which is already 2 years old.\r\nIt can save time people, if it is referenced in [this section](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#enabling-the-lock-file)\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40463280000","Type":"IssuesEvent","CreatedAt":"2024-07-25T14:02:52","Actor":"voroninp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13652","RelatedDescription":"Closed issue \"Publish error: `Found multiple publish output files with the same relative path` for `packages.loc.json` files.\" (#13652) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 8.0303\n\n### Worked before?\n\nIDK\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen publishing an application with multiple projects and `<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>` defined in `Directory.Packages.pros` file, I get the error:\r\n> [Publish error: Found multiple publish output files with the same relative path](https://stackoverflow.com/questions/69919664/publish-error-found-multiple-publish-output-files-with-the-same-relative-path)\r\n\r\nI can fix it by defining `ItemGroup`:\r\n```\r\n<ItemGroup>\r\n        <Content Update=\"**\\packages.lock.json\" CopyToPublishDirectory=\"Never\" CopyToOutputDirectory=\"Never\" /></ItemGroup>\r\n```\r\n\r\nBut this should be the default.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40454624695","Type":"IssuesEvent","CreatedAt":"2024-07-25T09:38:37","Actor":"voroninp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13652","RelatedDescription":"Opened issue \"Publish error: Found multiple publish output files with the same relative path for `packages.loc.json` files.\" (#13652) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 8.0303\n\n### Worked before?\n\nIDK\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen publishing an application with multiple projects and `<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>` defined in `Directory.Packages.pros` file, I get the error:\r\n> [Publish error: Found multiple publish output files with the same relative path](https://stackoverflow.com/questions/69919664/publish-error-found-multiple-publish-output-files-with-the-same-relative-path)\r\n\r\nI can fix it by defining `ItemGroup`:\r\n```\r\n<ItemGroup>\r\n        <Content Update=\"**\\packages.lock.json\" CopyToPublishDirectory=\"Never\" CopyToOutputDirectory=\"Never\" /></ItemGroup>\r\n```\r\n\r\nBut this should be the default.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40453356563","Type":"IssuesEvent","CreatedAt":"2024-07-25T09:00:56","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13651","RelatedDescription":"Opened issue \"[Cross-platform Dotnet NuGet Sign] The error “invalid value for’--certificate-fingerprint’ option” displays instead of error NU3001 when signing with certificate search criteria yields no certificate matches\" (#13651) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, NuGet SDK\n\n### Product Version\n\n.NET SDK 8.0.400 patching with NuGet Dev\\6.12.0.33\n\n### Worked before?\n\nIt is a regression since it didn't repro on 8.0.400-preview.0.24324.5 patched with Dev\\6.11.0.110.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\t[Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (--SDKChannel 8.0.4xx and Nupkgs is from [Pipelines - Run 6.12.0.33 artifacts (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9905933&view=artifacts&pathAsName=false&type=publishedArtifacts))\r\n2.\tUse the patched \"dotnet.exe\" to sign a package. Where <PackageFilePath> is the test package path, sign the test package: \r\n               On Windows:  `.\\dotnet.exe nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n               On Linux/macOS:` ./dotnet nuget sign <PackageFilePath> --overwrite  --certificate-fingerprint abc  --timestamper http://timestamp.digicert.com/ -v n` \r\n3.\tVerify the output of the previous step.\r\n#### Expected Result:\r\nThe error below displays.\r\n`Error: NU3001: No certificates were found that meet all the given criteria. For a list of accepted ways to provide a certificate, visit https://docs.nuget.org/docs/reference/command-line-reference.\" `\r\n#### Actual Result:\r\nThe error “invalid value for’—certificate-fingerprint’ option” displays instead of error NU3001 as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/6930deaa-ee32-4937-8e7f-15f5e0500d04)\r\n#### Notes:\r\nIt reproes on Windows/Linux/MacOS.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40453028740","Type":"IssuesEvent","CreatedAt":"2024-07-25T08:51:06","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13650","RelatedDescription":"Opened issue \"[Cross-platform Dotnet NuGet Sign] Adding trust for a certificate leads to an error SYSLIB5007 for .NET SDK 9.0.1xx\" (#13650) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK Version: 9.0.100.preview.7.24374.16\n\n### Worked before?\n\nIt doesn’t repro on .NET SDK 8.0.4xx.\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n**Repro Steps:**    \r\n\r\n1. [Patched dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) with ‘-SDKChannel 9.0.1xx’.\r\n2. Add net9.0 into the <TargetFrameworks> into both ‘MakeTestCert.csproj’ and ‘TrustTestCert.csproj’ file. \r\n3.  Go to the patchedSDK folder and create a new test certificate:  \r\n  On Windows:  `.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net9.0 --password password `\r\n  On Linux/macOS: ` ./dotnet run --project ./Entropy/MakeTestCert/MakeTestCert.csproj --framework net9.0 --password password `\r\n\r\n  5. Where <CertificateFilePath> is the file path to the created certificate (in step1) .cer or .pem file and <VersionedSdkDirectoryPath> is the directory path for the patched versioned .NET SDK directory (e.g.:  ./patchedSDK/sdk/9.0.100.xxx), add try to trust for the certificate:\r\nOn Windows:  `.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath>`\r\n    On Linux/macOS: ` ./dotnet run --project ./Entropy/TrustTestCert/TrustTestCert.csproj --framework net9.0 -- add -c <CertificateFilePath> -vsd <VersionedSdkDirectoryPath>`\r\n\r\n**Expected:**      \r\n    The certificate should be trusted successfully. \r\n\r\n**Actual:**\r\nAn error SYSLIB5007 displays as below: \r\n![image](https://github.com/user-attachments/assets/949e635c-f475-4ebc-9754-7b617320c964)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40416149035","Type":"IssuesEvent","CreatedAt":"2024-07-24T08:35:16","Actor":"StefanOverHaevgRZ","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13649","RelatedDescription":"Opened issue \"Machine readable output for 'why' command\" (#13649) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nThe output of the `dotnet nuget why` command is easily readable for humans but not for machines.\n\n### Desired Behavior\n\nHave an optional switch that allows the output to be machine readable from the console output.\r\n\r\nIdeas for the output format: `json` or `plain` with a delimiter.\r\n**json**\r\n```json\r\n{\r\n  \"net472\": { },\r\n  \"net6.0\": [\r\n    {\r\n      \"name\": \"Azure.Core\",\r\n      \"version\": \"1.38.0\",\r\n      \"packages\": [\r\n        {\r\n          \"name\": \"System.Text.Json\",\r\n          \"version\": \"8.0.3\"\r\n        },\r\n        {\r\n          \"name\": \"System.Memory.Data\",\r\n          \"version\": \"1.0.2\",\r\n          \"packages\": [\r\n            {\r\n              \"name\": \"System.Text.Json\",\r\n              \"version\": \"8.0.3\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**plain**\r\n```\r\nnet472/\r\nnet6.0/System.Text.Json:8.0.3\r\nnet6.0/Azure.Core:1.38.0/System.Text.Json:8.0.3\r\nnet6.0/Azure.Core:1.38.0/System.Memory.Data:1.0.2/System.Text.Json:8.0.3\r\n```\n\n### Additional Context\n\nFollowing up on issue #13639.\r\n\r\nWe want to use the results of the dotnet nuget why command in automated reports for our developers.\r\nWe therefore desire to use the data of the `why` command programmatically and make several processes easier."},{"Id":"40404816874","Type":"PullRequestEvent","CreatedAt":"2024-07-23T22:31:26","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/13376","RelatedDescription":"Closed pull request \"load package source attributes in PMUI.\" (#13376) at NuGet/Home","RelatedBody":"### **This is targeting 17.12**\r\nThis proposal aims to enable the PMUI to load package source attributes. Consequently, users will have the capability to view and modify these values.\r\nRendered: https://github.com/NuGet/Home/blob/697beb7ea1c8e320004591bfceb0989c45cdb060/accepted/2024/PMUI-packagesource-option.md"},{"Id":"40403046739","Type":"IssuesEvent","CreatedAt":"2024-07-23T21:03:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13631","RelatedDescription":"Closed issue \"MSB4018 When using central package managing and package is not specified in Directory.Packages.props \" (#13631) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\ndotnet 8.0303\n\n### Worked before?\n\nI do not know =)\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI just coppied some projects into my solution.\r\nThose projects contain `PackageReference` but existing `Directory.Packages.props` files does not contain those projects in the list, that is no `PackageVersion` entry. \r\n\r\nWhen I try to build the solution, I get a very ugly message:\r\n```\r\nMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.NET.Build.Tasks.ProjectContext.<>c__DisplayClass31_0.<GetTopLevelDependencies>b__3(String projectFileDependency)\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.ComputePackageExclusions()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\t\r\nC:\\Program Files\\dotnet\\sdk\\8.0.303\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\r\n```\r\n\r\nSee the repro: https://github.com/voroninp/FailingMsBuild\r\nIMO, the message shoud be developer-friendy and tell me that `PackageVersion` element is not specified.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-07-26T03:30:19.204893Z","RunDurationInMilliseconds":999}