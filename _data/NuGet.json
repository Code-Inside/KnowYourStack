{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34946834155","Type":"PullRequestEvent","CreatedAt":"2024-01-19T01:13:26","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9782","RelatedDescription":"Opened pull request \"[Search-by-TFM] New Framework Filter Options UI\" (#9782) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5171\r\n\r\nThis change adds 2 new framework filter options to the search page:\r\n\r\n- **Include Computed Frameworks**\r\n     Checkbox that sets a boolean `true`/`false` value (default is `true`). When this is set to `false`, we filter packages only by their asset frameworks, and only show asset framework badges. When this is set to `true`, we filter packages by asset frameworks + computed frameworks, and we show both types of badges as well.\r\n- **Framework Filter Mode**\r\n     Toggle that chooses between `All` and `Any` (default is `All`). This affects cases when multiple framework or TFM filters are selected. When this is set to `All`, we will show packages matching **all** the framework and TFM filters. If it is set to `Any`, we will show packages matching **any one of** the selected filters.\r\n\r\nThe changes are behind a feature flag.\r\n\r\nI ran Accessibility FastPass, and it didn't throw up any issues. I also checked color contrast for the new UI elements.\r\n\r\n**NOTE:** I made an additional bug fix for the TFM badges in this PR. The TFM badges link to the frameworks tab on the package details page, but we weren't providing a package version, so the links sometimes took us to the wrong version's page. I've now fixed that.\r\n\r\n### Screenshots\r\n\r\n**TODO**\r\n\r\n<details><summary>You can now enter a list of packages you want to transfer popularity from, and a list of packages you want to transfer to. </summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/4c162811-b05c-4460-9517-9351f5f52ae8)\r\n</details> \r\n\r\n<details><summary>It then validates your input. </summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/265a5abb-3199-4e48-9005-ea26e7e660df)\r\n</details> \r\n\r\n<details><summary>Submitting your changes updates the DB with new entries in the PackageRenames table.</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/adcaf6c3-35ff-4788-95a3-75e84a443df2)\r\n\r\nYou can see the new Serilog (Key = 11) --> Moq (Key = 9) entry\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/6a315e46-0686-4776-be62-56fefa752dee)\r\n</details> \r\n\r\n<details><summary>Error Handling</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5d5dc90a-b10f-4884-80f0-a51795ef7a83)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/dea204c9-20bc-44c1-8691-7438c1c4418a)\r\n</details> \r\n\r\n<details><summary>Checking for existing popularity transfers</summary>\r\n\r\n**NOTE:** Our current playbook asks us to delete any existing popularity transfers for the 'From' packages, so the popularity transfer operation deletes previous entries from the DB. Let me know if this doesn't sound right, or we want to give the DRIs more information/options on what to do with existing popularity transfers. Currently, we just show a warning when we validate the input, and then if a user submits the changes, then we remove all previous entries.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/c9130282-d647-40e1-93fd-20139771e7c7)\r\n\r\nWe also show a warning if one of the 'To' packages has existing renames, as this would result in a transitive popularity transfer relationship (a -> b -> c). The DRI can then look at the table in the DB to see if they still want to proceed.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/a126aa44-0d18-46dc-bfea-70de63af78fb)\r\n\r\n</details> \r\n\r\n<details><summary>Multiple packages at once</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/fd73204e-b628-4dc3-a0c0-59a8cfc0f51b)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/48ceb4d5-6c8a-4965-b010-aa0b95111466)\r\n</details> \r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34976137145","Type":"IssuesEvent","CreatedAt":"2024-01-20T00:04:33","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13173","RelatedDescription":"Opened issue \"Generate solution-level `nuget.config` with cleared Package Sources sections\" (#13173) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, dotnet.exe\n\n### Current Behavior\n\nWhen using NuGet Tooling to add a NuGet setting, `NuGet.Configuration.dll` will walk up the tree of `nuget.config` files until it finds a matching section. Even if a solution-level config file exists, it will not write [Package Sources sections](https://learn.microsoft.com/en-us/nuget/reference/nuget-config-file#package-source-sections) to it.\r\n\r\nIf a solution-level config exists with `<packageSources>` and the customer disables one of those sources using Visual Studio Options, the `<disabledPackageSources>` node will be created in the machine-wide config.\r\nHowever, if `<disabledPackageSources><clear/></disabledPackageSources>` exists in the solution-wide config then that section will be updated as expected.\r\n\r\nhttps://learn.microsoft.com/en-us/nuget/reference/nuget-config-file#package-source-sections\n\n### Desired Behavior\n\nSince customers are encouraged to follow this suggested best-practice anyway, I believe tooling should guide them by generating a solution `nuget.config` implementing those practices, unless the customer expresses otherwise.\r\n\r\nTo steer customers towards solution-level configs, the following workflow is suggested for NuGet Tooling (eg, VS Options or `dotnet new nugetconfig`) when that tooling attempts to write to a [Package Sources sections](https://learn.microsoft.com/en-us/nuget/reference/nuget-config-file#package-source-sections). \r\n\r\n## VS Options\r\nWhen modifying any of the package sources sections, check the package source sections using the following workflow.\r\n\r\n1. Solution config exists? If not, create one.\r\n2. The node being modified exists (in solution config)? If not, create one with `<clear/>`.\r\n3. The node being modified exists (in solution config) but is missing a clear? Add a `<clear/>`.\r\n4. _Repeat 2-3 for all package sources sections._\r\n5. Write the actual change to the section.\r\n\r\nPrompt the customer if steps 1-4 find a missing ideal configuration. If the customer agrees, NuGet tooling completes steps 1-3 in the solution config for the customer. \r\n\r\nOtherwise, continue to step 5.\r\n\r\n## `dotnet new nugetconfig`\r\nCustomers using the `nuget.config` template without parameters will continue getting only the `<packageSource>` node from the package sources sections by default. Provide CLI options for appending the remaining package sources sections.\r\n\r\nPrimarily, these options should be available:\r\n`--add-package-source-mapping`\r\n`--add-disabled-sources`\r\n\r\nSecondarily, these options could be available:\r\n`--add-package-source-credentials`\r\n`--add-api-keys`\r\n`--add-active-package-source`\r\n`--add-trusted-signers`\r\n\r\nPotentially useful as well may be `--no-clear` in case customers intend to create a merged configuration. \r\n\r\n\r\n\n\n### Additional Context\n\nFeature suggestion of a dotnet CLI config command: https://github.com/NuGet/Home/issues/9571\r\nSuggestion to stop creating default configs and/or prompt customers to use the `dotnet new nugetconfig`: https://github.com/NuGet/Home/issues/13027"},{"Id":"34974262924","Type":"IssuesEvent","CreatedAt":"2024-01-19T22:01:45","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6705","RelatedDescription":"Closed issue \"Add support for trusted signers in VS UI\" (#6705) at NuGet/Home","RelatedBody":"Spec task: https://github.com/NuGet/Home/issues/6524"},{"Id":"34974172232","Type":"IssuesEvent","CreatedAt":"2024-01-19T21:56:39","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6705","RelatedDescription":"Closed issue \"Add support for trusted signers in VS UI\" (#6705) at NuGet/Home","RelatedBody":"Spec task: https://github.com/NuGet/Home/issues/6524"},{"Id":"34973743270","Type":"IssuesEvent","CreatedAt":"2024-01-19T21:31:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4949","RelatedDescription":"Closed issue \"Authentication issues for Restore with multi-feeds in nuget.config\" (#4949) at NuGet/Home","RelatedBody":"Till now, Following issues are identified:\r\n\r\n## Todo: \r\n[see Epic]\r\n\r\n## Completed:\r\n- [x] [Authentication] In multi-feed scenario, NuGet install does not honor the feed selected as package source in PM-UI#[5034](https://github.com/NuGet/Home/issues/5034)\r\n- [x] NuGet should install package from local cache even if disconnected from other feeds. #[5035](https://github.com/NuGet/Home/issues/5035)\r\n- [x] NuGet tries to repeatedly authenticate even when authentication fails or times out for one of the authentication feeds. https://github.com/NuGet/Home/issues/5373\r\n- [x] NuGet does not remember password for custom feeds https://github.com/NuGet/Home/issues/4615"},{"Id":"34973640147","Type":"IssuesEvent","CreatedAt":"2024-01-19T21:26:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13172","RelatedDescription":"Opened issue \"Test.Utility has too many dependencies\" (#13172) at NuGet/Home","RelatedBody":"Test.Utility depends on:\r\n\r\n```xml\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Clients\\NuGet.CommandLine\\NuGet.CommandLine.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Clients\\NuGet.PackageManagement.VisualStudio\\NuGet.PackageManagement.VisualStudio.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Clients\\NuGet.VisualStudio.Common\\NuGet.VisualStudio.Common.csproj\" />\r\n```\r\n\r\n```xml\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Core\\NuGet.Commands\\NuGet.Commands.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Core\\NuGet.Resolver\\NuGet.Resolver.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\src\\NuGet.Core\\NuGet.PackageManagement\\NuGet.PackageManagement.csproj\" />\r\n```\r\n\r\nThis is probably like 30 projects.\r\n\r\n NuGet.Versioning does not have any dependencies.\r\n\r\nNuGet.Versioning.Test for example, depends on Test.Utility, which effectively means, NuGet.Versioning.Test, depends on 31 projects. \r\n\r\nThis is unnecessary, and makes test running slower.\r\nWe need a better pattern than just having everything dependency on Test.Utility. \r\n\r\nIdeas:\r\n* Compile the utility code into every test project.\r\n* Break down the Test.Utility into more than 1 project. \r\n* Don't reference Test.Utility in every project. "},{"Id":"34973094474","Type":"IssuesEvent","CreatedAt":"2024-01-19T20:58:35","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13111","RelatedDescription":"Closed issue \"[Signing] Package signing failed with an error: \"Key does not exist\" after nuget signing a package with certificate comes from CurrentUser certificate store\" (#13111) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.9.0.67\r\n\r\n### Worked before?\r\n\r\nIt worked in nuget client Dev\\6.8.0.101 since we used the \"CreateTestCertificate.ps1\" file to create certificate but we use \"MakeTestCert.csproj\" this time.\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack <PackageName>.csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate: \r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0` \r\n4. Where _CertificateFilePath_ is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n `.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath> `\r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package, where _Fingerprint_ is the Fingerprint (SHA-1) from step 3:\r\n`NuGet.exe sign <PackageFilePath> -CertificateFingerprint <Fingerprint> -CertificateStoreName Root`\r\n6.  Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n\r\n**Expected:**\r\nPackage signing is successful and no error or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Actual:**\r\nPackage signing failed with an error: \"Key does not exist\" after nuget signing a package with certificate comes from CurrentUser certificate store as below screenshot\r\n![image](https://github.com/NuGet/Home/assets/149561645/58a865b2-4676-4361-8d54-0be92af59096)\r\n\r\n\r\n**Note:**   \r\nThe repro rate is 100%. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"34971774199","Type":"IssuesEvent","CreatedAt":"2024-01-19T19:54:18","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9670","RelatedDescription":"Closed issue \"Configs and defaults\" (#9670) at NuGet/Home","RelatedBody":"See also: https://github.com/NuGet/Home/issues/9118\r\n\r\nWe need to examine how we handle configs and defaults."},{"Id":"34969406650","Type":"IssuesEvent","CreatedAt":"2024-01-19T18:06:34","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13171","RelatedDescription":"Closed issue \"NuGet Package can't find \"latest\" version of Azure.AI.OpenAI\" (#13171) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.net SDK 7.0.* and .net SDK 8.0.*\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nSince 1.0.0-beta.12 is the latest version of Azure.AI.OpenAI, I would expect nothing to come back from :\r\n\r\ndotnet list package --outdated\r\n\r\nfor this package.\r\n\r\nActual behavior:\r\n\r\nProject `xxx` has the following updates to its packages\r\n   [net7.0]: \r\n   Top-level Package      Requested      Resolved       Latest                  \r\n   > Azure.AI.OpenAI      1.0.0-beta.12   1.0.0-beta.12   Not found at the sources\r\n\r\nReproduction Steps:\r\n\r\non macOS (I'm running 14.2.1) create a sample project with the Azure.AI.OpenAI project reference above:\r\n\r\nand then run:\r\n\r\ndotnet list package --outdated\r\n\r\nEnvironment\r\n\r\nall MacOS command line, tried with 7.x .net sdk's, most recently tried with latest 8.x .net sdk:\r\n\r\ndotnet --info\r\n.NET SDK:\r\nVersion: 8.0.100-rc.2.23502.2\r\nCommit: 0abacfc2b6\r\n\r\nRuntime Environment:\r\nOS Name: Mac OS X\r\nOS Version: 14.1\r\nOS Platform: Darwin\r\nRID: osx-arm64\r\nBase Path: /usr/local/share/dotnet/sdk/8.0.100-rc.2.23502.2/\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\nVersion: 8.0.0-rc.2.23479.6\r\nArchitecture: arm64\r\nCommit: 0b25e38ad3\r\n\r\n.NET SDKs installed:\r\n7.0.100-rc.2.22477.23 [/usr/local/share/dotnet/sdk]\r\n7.0.100 [/usr/local/share/dotnet/sdk]\r\n7.0.101 [/usr/local/share/dotnet/sdk]\r\n7.0.102 [/usr/local/share/dotnet/sdk]\r\n7.0.200 [/usr/local/share/dotnet/sdk]\r\n7.0.201 [/usr/local/share/dotnet/sdk]\r\n7.0.202 [/usr/local/share/dotnet/sdk]\r\n7.0.203 [/usr/local/share/dotnet/sdk]\r\n7.0.302 [/usr/local/share/dotnet/sdk]\r\n7.0.304 [/usr/local/share/dotnet/sdk]\r\n7.0.305 [/usr/local/share/dotnet/sdk]\r\n7.0.306 [/usr/local/share/dotnet/sdk]\r\n7.0.400 [/usr/local/share/dotnet/sdk]\r\n7.0.401 [/usr/local/share/dotnet/sdk]\r\n7.0.402 [/usr/local/share/dotnet/sdk]\r\n7.0.403 [/usr/local/share/dotnet/sdk]\r\n8.0.100-rc.2.23502.2 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\nMicrosoft.AspNetCore.App 7.0.0-rc.2.22476.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 8.0.0-rc.2.23480.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 7.0.0-rc.2.22472.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.7 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.10 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.12 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 8.0.0-rc.2.23479.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\nx64 [/usr/local/share/dotnet/x64]\r\nregistered at [/etc/dotnet/install_location_x64]\r\n\r\nEnvironment variables:\r\nNot set\r\n\r\nglobal.json file:\r\nNot found\r\n\r\nLearn more:\r\nhttps://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\nhttps://aka.ms/dotnet/download\r\n\r\nNOTE: dotnet team punted the issue from their repo and determined it was a nuget issue - seems macOS specific: https://github.com/dotnet/sdk/issues/36637\n\n### Verbose Logs\n\n_No response_"},{"Id":"34961069761","Type":"IssuesEvent","CreatedAt":"2024-01-19T13:00:35","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13101","RelatedDescription":"Closed issue \"Do not use an exact version, but cause NU1106.\" (#13101) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK:  Version:   7.0.404  Commit:    22f221a24c\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI created a project and referenced two packages.\r\n```\r\n<ItemGroup>\r\n\t<PackageReference Include=\"Microsoft.Management.Services.CloudPC.Reporting.Extensions\" Version=\"2.1.0\"/>\r\n\t<PackageReference Include=\"Microsoft.CloudManagedDesktop.ReliabilityCommon.Core.Function\" Version=\"1.0.2537.81\"/>\r\n</ItemGroup>\r\n```\r\nThese two packages depend on some same packages but not the same version.\r\n![image](https://github.com/NuGet/Home/assets/36906182/93ee8d86-45d4-4f89-881f-f76f208d079b)\r\n\r\n**What I expected:**\r\nAs documents mentioned, [lowest applicable version](https://learn.microsoft.com/en-us/nuget/concepts/dependency-resolution#lowest-applicable-version) rule will applied and version 5.1.8 can be chosen.\r\n\r\n**What I got:**\r\n`Unable to satisfy conflicting requests for 'Microsoft.CloudManagedDesktop.Core.Flighting': Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.1.8) (via package/Microsoft.CloudManagedDesktop.ReliabilityCommon.Core.Function 1.0.2537.81), Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.0.6) (via package/Microsoft.Management.Services.CloudPC.Reporting.Client 2.1.0), Microsoft.CloudManagedDesktop.Core.Flighting (>= 5.0.6) (via package/Microsoft.Management.Services.CloudPC.AzureWrappers 5.0.6) Framework: (.NETCoreApp,Version=v6.0)`\r\n\r\nI know how to fix it, just apply [direct-dependency-wins](https://learn.microsoft.com/en-us/nuget/concepts/dependency-resolution#direct-dependency-wins) rule, but I do not understand why this error happened.\r\n![image](https://github.com/NuGet/Home/assets/36906182/6f4c9e34-7028-4455-9fd3-633586bcec1d)\r\n\r\nCan you help me answer this question? If necessary, please correct this erroneous statement and update this case in the documentation. Thank you.\r\n\n\n### Verbose Logs\n\n```shell\nDetails can be found in [project.assets.json](http://home.xiaoshiyi.online:177/kodbox/?explorer/share/fileOut&shareID=99ZiI39A&path=%7BshareItemLink%3A99ZiI39A%7D%2F&name=/project.assets.json&download=1)\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-20T03:30:19.5724098Z","RunDurationInMilliseconds":1119}