{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12624078006","Type":"IssuesEvent","CreatedAt":"2020-06-14T03:36:21","Actor":"gbirchmeier","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8045","RelatedDescription":"Opened issue \"Unable to change email address due to old Nuget/new MSA unification glitch\" (#8045) at NuGet/NuGetGallery","RelatedBody":"### For issues regarding the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), file a bug on [NuGet Home](https://github.com/nuget/home/issues).\r\n\r\n### Describe the bug\r\nMy account email address is at grantb.net (email usernames withheld from this bot-readable report), but my Login account is at connamara.com. When I view my Account Settings, I see both these email addresses on the same page: \"@grantb.net\" is under \"Email Address\", and \"@connamara.com\" is under Login Account.\r\n\r\nI tried to change my email address to \"@connamara.com\", but I get \"this address is already in use\". Yeah, I know it is, BY ME, ON THIS ACCOUNT.\r\n\r\nI think this all stems from when Nuget used to be an independent site. I think I registered it originally with \"@grantb.net\", and then when it was absorbed by the MSA system, my account was merged with a \"@connamara.com\" MSA account. Is there some other \"ghost\" account with the same email? Can this be resolved somehow so I can remove my personal email from this account and ONLY use my @grantb.net address?\r\n\r\n### To Reproduce\r\n1. Login as me (with @grantb.net address)\r\n2. Try to change email address to my @connamara.com address\r\n3. Witness nonsensical failure\r\n\r\n### Expected behavior\r\nMy login address will be changed to my @connamara.com address\r\n\r\n### Screenshots\r\nAttached.\r\n\r\n<img width=\"1285\" alt=\"Screen Shot 2020-06-13 at 22 31 17\" src=\"https://user-images.githubusercontent.com/237288/84584089-0ce9cc00-adc6-11ea-8504-2f54427f3e36.png\">\r\n![Screen Shot 2020-06-13 at 22 34 07](https://user-images.githubusercontent.com/237288/84584090-0e1af900-adc6-11ea-827b-530af9ef2981.png)\r\n\r\n### Additional Information\r\nI submitted this as a support request on May 4 (can't remember what form I used to do this, but I did get an email confirmation from support@nuget.org.  No response.\r\n"},{"Id":"12618995273","Type":"IssuesEvent","CreatedAt":"2020-06-12T22:46:08","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8044","RelatedDescription":"Opened issue \"[2020-06-12] Deployment\" (#8044) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12618943909","Type":"IssuesEvent","CreatedAt":"2020-06-12T22:35:14","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8002","RelatedDescription":"Closed issue \"Add banner to announce TLS 1.2 enforcement\" (#8002) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12618941826","Type":"PullRequestEvent","CreatedAt":"2020-06-12T22:34:50","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8043","RelatedDescription":"Opened pull request \"Added configurable cache \" (#8043) at NuGet/NuGetGallery","RelatedBody":"Added files to be able to manually configure the cache time for the dependent packages in the package details page. Time can be configured using a json file.\r\n\r\nProgress on: https://github.com/NuGet/NuGetGallery/issues/8038"},{"Id":"12618878878","Type":"PullRequestEvent","CreatedAt":"2020-06-12T22:22:22","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8034","RelatedDescription":"Merged pull request \"API key generation without defaulting to the current owner selection\" (#8034) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323"},{"Id":"12618318336","Type":"PullRequestEvent","CreatedAt":"2020-06-12T20:51:27","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8031","RelatedDescription":"Merged pull request \"Added verified checkmark to packages\" (#8031) at NuGet/NuGetGallery","RelatedBody":"\r\n* On the NuGet packages area of the Used By section, those packages that are verified will have the verified icon (white checkmark enclosed in a blue circle) next to their package name\r\n \r\n![image](https://user-images.githubusercontent.com/63263324/84212512-9be8a280-aaad-11ea-916b-1496eb77007a.png)\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3221"},{"Id":"12608749125","Type":"IssuesEvent","CreatedAt":"2020-06-11T23:20:49","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7906","RelatedDescription":"Closed issue \"[Package Renames] A/B test popularity transfers\" (#7906) at NuGet/NuGetGallery","RelatedBody":"* [x] Delete existing `012` search resources?? Check with Joel\r\n* [x] Create new `012` resources. Enable popularity transfers for this deployment (see https://github.com/NuGet/NuGetGallery/issues/7977)\r\n* [x] Add popularity transfers to PROD\r\n* [x] Verify search results\r\n* [x] Create service index for Visual Studio testing\r\n* [x] Split traffic at 50% (started 5/2/6/2020 @ 2:15pm PST)  \r\n* [x] Send instructions to internal partner team on how to test the A/B test instance.\r\n* [x] Wait a week, then evaluate search relevancy changes \r\n* âš  Set traffic to 0% (6/8/2020 @ 3:32pm PST)\r\n\r\n```\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-08T21:20:00Z');\r\n```\r\n\r\nQuery to compare clicks on Azure.Storage.Blobs:\r\n\r\n```\r\n// Clicks on first page %\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-02T21:20:00Z');\r\ncustomMetrics\r\n| where timestamp > minTimestamp \r\n| where timestamp < maxTimestamp\r\n| where name == \"BrowserSearchSelection\"\r\n| extend isPreviewSearch = customDimensions.IsPreviewSearch == \"True\"\r\n| extend PackageId = tostring(customDimensions.PackageId)\r\n| where\r\n  PackageId == \"WindowsAzure.Storage\" or\r\n  PackageId startswith \"Microsoft.Azure.Storage\" or\r\n  PackageId startswith \"Azure.Storage.\"\r\n| where PackageId !in (\"Microsoft.Azure.Storage.DataMovement\", \"Microsoft.Azure.Storage.CPP.v140\")\r\n//| where PackageId startswith \"Microsoft.Azure.KeyVault\" or PackageId startswith \"Azure.Security.KeyVault\"\r\n| summarize count() by isPreviewSearch, PackageId\r\n| where isPreviewSearch == true\r\n| render piechart \r\n```"},{"Id":"12608599471","Type":"IssuesEvent","CreatedAt":"2020-06-11T22:54:16","Actor":"lostmsu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8042","RelatedDescription":"Opened issue \"Increase package size limit/and or support LZMA2\" (#8042) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nI am trying to package TensorFlow binaries, but the uncompressed size of a single 2.x GPU binary is 1.3GB. ZIP+Deflate-compressed is ~400MB. XZ+LZMA2-compressed is ~100MB, but NuGet does not support LZMA2 compression, meaning unpacking needs installation scripts, which are no longer supported.\r\n\r\n### Describe the solution you'd like\r\nOverall, I think supporting LZMA2 or even just ZIP+LZMA would be the best scenario, but the client team already closed that issue for whatever reason https://github.com/NuGet/Home/issues/890 . So as an alternative for my scenario it would be sufficient to up the limit to 500MB, or better 750MB to be future-proof.\r\n\r\n### Additional context\r\nN/A"},{"Id":"12608584624","Type":"PullRequestEvent","CreatedAt":"2020-06-11T22:51:38","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8040","RelatedDescription":"Closed pull request \"API key generation without defaulting to the current owner selection #8034\" (#8040) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12622301168","Type":"IssuesEvent","CreatedAt":"2020-06-13T16:43:59","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9676","RelatedDescription":"Opened issue \"EPIC: Docs on creating packages that are wrappers of native code\" (#9676) at NuGet/Home","RelatedBody":"This issue is tracking customer requests about how to create a package that is a .NET wrapper of native dll/so.\r\n\r\nOut of scope: packages to be used by native (c/c++) projects\r\n\r\nLinked issues are tracked via ZenHub (I'm unsatisfied with how GitHub links issues)."},{"Id":"12622142191","Type":"IssuesEvent","CreatedAt":"2020-06-13T15:57:28","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9237","RelatedDescription":"Closed issue \"[Centrally managing NuGet packages and versions] Prototype Package Manager UI with `Directory.Packages.props` updater service\" (#9237) at NuGet/Home","RelatedBody":"Design doc section for the Project System API requirements to support all the scenarios for Visual Studio Package Reference updates when projects that are opt-in CPVM.\r\n\r\nThis work item includes any necessary prototype work needed.\r\n\r\nRelated : #9016"},{"Id":"12621727460","Type":"IssuesEvent","CreatedAt":"2020-06-13T13:59:51","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9272","RelatedDescription":"Closed issue \"Creating package with x86 and x64 managed and native libraries into single package\" (#9272) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nHere is my current setup.  I am creating a game engine in **C**# that uses **SDL**.  There is a popular **C**# wrapper library that **P/Invokes** into \r\nthe native **SDL2** libraries for the purpose of creating games.  These native libraries have **x86** and **x64** architecture versions of them and \r\nI need to to take advantage of both which means my game engine has only **x86** and **x64** architectures.\r\n\r\nWhat I am trying to do is create a nuget package that contains multiple architectures of not only the native libraries but of my **C**# game\r\nengine library as well.  I have already learned that I can get the native libraries properly put into the package using the **csproj** file\r\nXML content that is similar to the what you see below.\r\n\r\n```\r\n<Target Name=\"Add-x64-SDL-Libs\" Condition=\"$(ConfigurationName) == 'Debug'\" AfterTargets=\"Build\">\r\n\t<ItemGroup>\r\n\t\t<Content Include=\"$(ProjectDir)SDL\\x86\\SDL-x86.dll\" Pack=\"true\" PackagePath=\"\\runtimes\\win10-86\\native\" />\r\n\t\t<Content Include=\"$(ProjectDir)SDL\\x64\\SDL-x64.dll\" Pack=\"true\" PackagePath=\"\\runtimes\\win10-64\\native\" />\r\n\t</ItemGroup>\r\n</Target>\r\n```\r\n\r\nThis will of course put both the **x86** and **x64** version of the SDL libraries into the package.\r\n\r\nThe issue I am having is how do I get both architecture versions of my library into the package as well?  My thinking is that the consumer of the package\r\ncould use my package and either choose **x86** or **x64** and **Visual Studio** would just use the proper architecture for the libraries based on the architecture of their project. Is this even feasible?\r\n\r\nI thought that maybe I could do 2 separate packages.  One for **x86** and one for **x64**, but that does not seem like the right way to do it and I know there are packages out there that have it all in one. One good example is the **[System.Data.SQLite.Core](https://www.nuget.org/packages/System.Data.SQLite.Core/#show-github-usage)** nuget package which supports many different platforms and architectures.\r\n\r\nI dug into the package and seen that they make use of a build directory which I know are additional instructions for **MSBuild** to use during the build process.  I tried finding documentation on this but I cannot find barely any information on the **microsoft docs** site or anywhere else on the format and use of the **.targets** files.\r\n\r\nI also do not want to take a path that will eventually be getting deprecated or that is not the recommended way of doing it.  An example of this is using **.nuspec** files.  I read that using them is not the preferred way of doing this anymore and that it is only used inside of the package, not part of your project.\r\n\r\nAgain my end goal is to just simply release multiple architectures of my native AND managed libraries in one package and anybody could just consume it, point to the right architecture and then it works.\r\n\r\nI have been struggling with this issue for about 2 weeks and even though I have learned a lot, I am coming up to a dead end. Any help is greatly appreciated.\r\n\r\n---\r\n\r\n**NuGet Product Used:** VS UI\r\n\r\n**VS Version:** 16.4.5\r\n\r\n**OS Version:** win10 - v1709.16299.1625"},{"Id":"12621614621","Type":"IssuesEvent","CreatedAt":"2020-06-13T13:25:20","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8941","RelatedDescription":"Closed issue \"Warning NU5127 msbuild\" (#8941) at NuGet/Home","RelatedBody":"I'm upgrading some project to 3.1 and I get a warning from nuget pack command \r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5127: This package does not contain a lib/ or ref/ folder, and will therefore be treated as compatible for all frameworks. Since framework specific files were found under the build/ directory for netstandard1.0, consider creating the following empty files to correctly narrow the compatibility of the package: [D:\\git\\coverlet\\src\\coverlet.collector\\coverlet.collector.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5127: -lib/netstandard1.0/_._ [D:\\git\\coverlet\\src\\coverlet.collector\\coverlet.collector.csproj]\r\n```\r\n\r\nI'm using msbuild to generage package https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package-msbuild\r\n\r\nFirst question, is there way to generate empty folder using msbuild?\r\n\r\nIf I create correct structure under project with an empty file called `_._` and add `<TfmSpecificPackageFile Include=\"$(ProjectDir)\\lib\\netstandard1.0\\_._\" PackagePath=\"lib\\netstandard1.0\\\" />` the warning goes away, but I'm pretty sure that there is a better way to do it.\r\n\r\nBTW after update above I get another warning\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5128: Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below: [D:\\git\\coverlet\\src\\coverlet.collector\\coverlet.collector.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5128: - Add a dependency group for .NETStandard1.0 to the nuspec [D:\\git\\coverlet\\src\\coverlet.collector\\coverlet.collector.csproj]\r\n```\r\n\r\nand again the question above, is there a way to fix this warning adding a dependecy group using msbuild style?I didn't find anything on guide and I'm not using nuspec.\r\n\r\nThis is the project file https://github.com/tonerdo/coverlet/blob/master/src/coverlet.collector/coverlet.collector.csproj\r\n\r\n"},{"Id":"12620090708","Type":"IssuesEvent","CreatedAt":"2020-06-13T04:31:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9665","RelatedDescription":"Closed issue \"NuGet.Build.Tasks.Console binding redirects are broken\" (#9665) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): 16.7.0-preview-20308-01+584ca5f11\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install latest internal preview of Visual Studio\r\n2. Restore packages with `RestoreEnableStaticGraphEvaluation` set to `true`\r\n\r\n`NuGet.Build.Tasks.Console.exe` crashes because [the binding redirects](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/App.config) were updated in MSBuild but not in NuGet.\r\n\r\n## Workaround\r\nUpdate your local `NuGet.Build.Tasks.Console.exe.config` to this:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <runtime>\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcserver-element -->\r\n    <gcServer enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gccpugroup-element -->\r\n    <GCCpuGroup enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/thread-useallcpugroups-element -->\r\n    <Thread_UseAllCpuGroups enabled=\"true\" />\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <!-- Use codeBase entries for MSBuild assemblies so that the NGen'd native images will be used -->\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Tasks.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Tasks.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Utilities.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Buffers\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\r\n        <codeBase version=\"4.0.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Buffers.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Collections.Immutable\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-1.2.3.0\" newVersion=\"1.2.3.0\" />\r\n        <codeBase version=\"1.2.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Collections.Immutable.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Memory\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.1.1\" newVersion=\"4.0.1.1\" />\r\n        <codeBase version=\"4.0.1.1\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Memory.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Numerics.Vectors\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.4.0\" newVersion=\"4.1.4.0\" />\r\n        <codeBase version=\"4.1.4.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Numerics.Vectors.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Resources.Extensions\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" />\r\n        <codeBase version=\"4.0.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Resources.Extensions.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.6.0\" newVersion=\"4.0.6.0\" />\r\n        <codeBase version=\"4.0.6.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Runtime.CompilerServices.Unsafe.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Threading.Tasks.Dataflow\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.6.3.0\" newVersion=\"4.6.3.0\" />\r\n        <codeBase version=\"4.6.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Threading.Tasks.Dataflow.dll\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime>\r\n  <startup>\r\n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.7.2\" />\r\n  </startup>\r\n</configuration>\r\n```\r\n\r\n\r\n"},{"Id":"12618185352","Type":"IssuesEvent","CreatedAt":"2020-06-12T20:32:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8283","RelatedDescription":"Closed issue \"Smart refreshing of the update/installed/consolidate tabs in the PM UI\" (#8283) at NuGet/Home","RelatedBody":"Motivation and follow up to https://github.com/NuGet/Home/issues/6570. \r\nhttps://github.com/NuGet/NuGet.Client/pull/2908\r\n\r\nWhen either of the 3 tabs is opened in the background, the next time we focus on the UI the whole thing is refreshed. \r\n\r\nThe reason for this is these tabs reflect project/solution state. \r\nFrequently these refreshes are not needed. \r\nCurrently the UI does not get any notifications about project state changes (mostly because there's no infra doing that right now). \r\n\r\nAdding that infra should allow us to preserve the context when someone switches off of the Installed/Consolidates/Updates tabs. "},{"Id":"12618175530","Type":"IssuesEvent","CreatedAt":"2020-06-12T20:31:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9675","RelatedDescription":"Opened issue \"Smart refreshing of the consolidate tab\" (#9675) at NuGet/Home","RelatedBody":""},{"Id":"12617919322","Type":"IssuesEvent","CreatedAt":"2020-06-12T19:56:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9189","RelatedDescription":"Closed issue \"Restore:  skip .NET SDK-style projects during no-op evaluation\" (#9189) at NuGet/Home","RelatedBody":"In Visual Studio, because .NET SDK-style projects restores are triggered by project nominations from the project system, there should be no need to perform another restore (even a no-op restore) in most build-triggered restores.  By skipping these projects during no-op restore evaluation, no-op restore becomes faster relative to how many .NET SDK-style projects are skipped; so, a solution with no .NET SDK-style projects will realize no benefit while a solution with only .NET SDK-style projects will realize maximum benefit.\r\n\r\nAs an example, I [tested a prototype](https://github.com/NuGet/Home/issues/8906) on the [NuGet.Client solution](https://github.com/NuGet/NuGet.Client/tree/fcdcfb4c87265e14f5808ee6db03b54d5a5391cc), which at the time had 83 projects (74 .NET SDK-style projects and 9 legacy PackageReference projects).  With the solution loaded in Visual Studio and the solution fully restored and built once already, building the up-to-date solution involved a ~2.6 no-op restore.  By skipping .NET SDK-style projects during no-op restore evaluation, the no-op restore dropped to ~0.6 seconds.  GC heap allocations dropped from ~380 MB to ~88 MB.  Total GC pauses dropped by ~1 second.\r\n\r\nFor this optimization we need to ensure:\r\n*  .NET SDK-style projects are only skipped when we know the projects are already up-to-date.  If a nomination and no-op restore evaluation occur closely together; the no-op restore evaluation should block or be blocked on completion of all nominations or fallback to a real restore.\r\n*  .NET SDK-style projects must not be skipped during clean builds (or rebuilds) or explicit restore requests, only the no-op restores that occur implicitly during many larger user scenarios (e.g.:  build, debug, static code analysis, etc.).\r\n\r\nCC @aortiz-msft, @anangaur "},{"Id":"12617891495","Type":"IssuesEvent","CreatedAt":"2020-06-12T19:52:23","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9633","RelatedDescription":"Closed issue \"Thousands of NuGet.Versioning.NuGetVersion items are created\" (#9633) at NuGet/Home","RelatedBody":"I noticed this item is multiplying by thousands during memory leak investigation for another [item](https://github.com/NuGet/Home/issues/9595).\nLooks like it's under our Nuget.Client domain.\n![image.png](https://images.zenhubusercontent.com/5eb1d84a3cd56675c3efe510/dbb96fdb-3673-4e14-b9ec-41c32db0e882)\nI think we need to investigate it. For now assigned to myself, most likely I'll work during this or next sprint."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-14T05:30:38.0274438Z","RunDurationInMilliseconds":1827}