{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26686078592","Type":"PullRequestEvent","CreatedAt":"2023-01-26T22:03:55","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9364","RelatedDescription":"Opened pull request \"[TFM] net6.0-windows7.0 compatibility added.\" (#9364) at NuGet/NuGetGallery","RelatedBody":"## Description\r\nWe use NuGet client sdk in order to create a compatibility matrix for displaying TFMs on nuget.org. Currently there is no knowledge on nuget client sdk on what net5+ platform version exists (like net6.0-windows7.0) and they are not computed.\r\n\r\n## Changes\r\n* net6.0-windows7.0 compatibility has been hardcoded with known values.\r\n* This compatibility will only show if a package contains that specific TFM in their assets.\r\n\r\n## Screenshots\r\n\r\n![Before](https://user-images.githubusercontent.com/17834924/214958483-83ed5463-ce87-4a93-86e0-de2ceedfe872.png)\r\n\r\n![After](https://user-images.githubusercontent.com/17834924/214958491-6f98386b-02b2-4d79-b40c-baa369998355.png)\r\n\r\n## Notes\r\n* Why doesn't these PR cover all the other versions?\r\n  * We don't know the exhaustive compatibility on platform versions. \r\n* For further improvements we will need to collaborate with NuGet client and dotnet sdk: https://github.com/NuGet/Engineering/issues/4730. \r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9337"},{"Id":"26684823144","Type":"IssuesEvent","CreatedAt":"2023-01-26T20:55:54","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9363","RelatedDescription":"Opened issue \"[Deployment] 2023.01.26\" (#9363) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n## Changes\r\n* https://github.com/NuGet/NuGetGallery/pull/9361\r\n* https://github.com/NuGet/NuGetGallery/pull/9357\r\n* https://github.com/NuGet/NuGetGallery/pull/9342\r\n* https://github.com/NuGet/NuGetGallery/pull/9348\r\n* https://github.com/NuGet/NuGetGallery/pull/9349\r\n\r\n## Progress\r\n* [ ] Merge PR: https://github.com/NuGet/NuGetGallery/pull/9362\r\n* [ ] Build:\r\n* [ ] Release\r\n* [ ] DEV\r\n* [ ] INT\r\n* [ ] PROD\r\n\r\n# Stats.CreateAzureCdnWarehouseReports job\r\n## Changes\r\n* https://github.com/NuGet/NuGet.Jobs/pull/1124\r\n\r\n## Progress\r\n* [ ] Release: https://dev.azure.com/devdiv/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1424727\r\n* [x] DEV\r\n* [ ] INT\r\n* [ ] PROD"},{"Id":"26684785417","Type":"PullRequestEvent","CreatedAt":"2023-01-26T20:53:46","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9362","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.01.26]RI of dev into main\" (#9362) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"26684517675","Type":"PullRequestEvent","CreatedAt":"2023-01-26T20:38:50","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9361","RelatedDescription":"Merged pull request \"More telemetry for downloads service.\" (#9361) at NuGet/NuGetGallery","RelatedBody":"Related to https://github.com/NuGet/NuGetGallery/issues/9352.\r\n\r\nWe have a weird situation when downloads.v1.json, Gallery DB and Search service all align on a downloads count for a certain package, yet the number displayed in the package list is different.\r\n\r\nIt should come from DB: https://github.com/NuGet/NuGetGallery/blob/c1ccf24a931fb3e048e23c484f663580e906f30d/src/NuGetGallery/Helpers/ViewModelExtensions/PackageViewModelFactory.cs#L58\r\nBut some EF interception magic happens and it is actually ends up being populated from data retrieved by [CloudDownloadCountService](https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery/Services/CloudDownloadCountService.cs) and it is unclear if it actually refreshes the statistics data fully. To investigate the issue from that angle, more telemetry is added to that service."},{"Id":"26664715300","Type":"PullRequestEvent","CreatedAt":"2023-01-26T01:39:28","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9361","RelatedDescription":"Opened pull request \"More telemetry for downloads service.\" (#9361) at NuGet/NuGetGallery","RelatedBody":"Related to https://github.com/NuGet/NuGetGallery/issues/9352.\r\n\r\nWe have a weird situation when downloads.v1.json, Gallery DB and Search service all align on a downloads count for a certain package, yet the number displayed in the package list is different.\r\n\r\nIt should come from DB: https://github.com/NuGet/NuGetGallery/blob/c1ccf24a931fb3e048e23c484f663580e906f30d/src/NuGetGallery/Helpers/ViewModelExtensions/PackageViewModelFactory.cs#L58\r\nBut some EF interception magic happens and it is actually ends up being populated from data retrieved by [CloudDownloadCountService](https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery/Services/CloudDownloadCountService.cs) and it is unclear if it actually refreshes the statistics data fully. To investigate the issue from that angle, more telemetry is added to that service."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26688185979","Type":"IssuesEvent","CreatedAt":"2023-01-27T00:35:27","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12388","RelatedDescription":"Opened issue \"Make PackageReference the default in Visual Studio\" (#12388) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nCurrently in a fresh install of Visual Studio 2022, the default package management format is set to `Packages.config`.\r\n\r\nThis tends to throw people off with certain project types that do support `PackageReference` which requires the user to figure out the current behavior, NuGet options, and change the default behavior after removing the `packages.config` file to restart.\r\n\r\n<img width=\"460\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1288848/214980975-e6d9ae5e-ea15-44ae-a351-57e072953615.png\">\r\n\n\n### Desired Behavior\n\nWe should change the default behavior to `PackageReference` in this dropdown.\n\n### Additional Context\n\n_No response_"},{"Id":"26685217284","Type":"IssuesEvent","CreatedAt":"2023-01-26T21:17:16","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12387","RelatedDescription":"Closed issue \"Revert 9836b4469a575b6b1aa7c9072c28b2f4ef6ec91d\" (#12387) at NuGet/Home","RelatedBody":"Until we figure out a plan, we should revert https://github.com/NuGet/NuGet.Client/commit/9836b4469a575b6b1aa7c9072c28b2f4ef6ec91d.  The dev branch inserts into both .NET 7.0.2xx SDK and .NET 8.0.1xx SDK, but we only want the change for .NET 8 for now.\r\n\r\nCC @aortiz-msft"},{"Id":"26681311627","Type":"IssuesEvent","CreatedAt":"2023-01-26T17:55:48","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12387","RelatedDescription":"Opened issue \"Revert 9836b4469a575b6b1aa7c9072c28b2f4ef6ec91d\" (#12387) at NuGet/Home","RelatedBody":"Until we figure out a plan, we should revert https://github.com/NuGet/NuGet.Client/commit/9836b4469a575b6b1aa7c9072c28b2f4ef6ec91d.  The dev branch inserts into both .NET 7.0.2xx SDK and .NET 8.0.1xx SDK, but we only want the change for .NET 8 for now.\r\n\r\nCC @aortiz-msft"},{"Id":"26676678649","Type":"IssuesEvent","CreatedAt":"2023-01-26T14:45:52","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12386","RelatedDescription":"Opened issue \"Backport https://github.com/NuGet/NuGet.Client/pull/4850 to release-6.3.x (6.0.4xx)\" (#12386) at NuGet/Home","RelatedBody":".NET 6.0.4xx SDK already backported a [change](https://github.com/dotnet/sdk/commit/dd40395b67e42c330397ba96308fd6817c070d67) that switched from the single CS+TS CTL to separate CS and TS CTL's.\r\n\r\nWe need to backport https://github.com/NuGet/NuGet.Client/pull/4850 to release-6.3.x."},{"Id":"26664493008","Type":"IssuesEvent","CreatedAt":"2023-01-26T01:17:55","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12385","RelatedDescription":"Opened issue \"Automatically detect and include readme/license/icon file when packing\" (#12385) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nUnderstand desired experience (auto include or not)\r\nUnderstand readme/license/icon file convention (path, naming etc.)\r\nAutomatically detect and include readme/license/icon file if the file exists.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"26662797678","Type":"IssuesEvent","CreatedAt":"2023-01-25T22:58:03","Actor":"Pxtl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12384","RelatedDescription":"Opened issue \"Nuget.exe CLI not getting correct versions when running in -ExcludeVersion mode\" (#12384) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuget 6.4.0.123\n\n### Worked before?\n\nunknown\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n##Context: \r\n\r\nWhen using Install -ExcludeVersion mode and changing the desired version in packages.config, Nuget.exe does not actually replace the package with the desired version.  Note that this issue only occurs when the packages are already cached -- if the cache is freshly cleared using `nuget locals all -clear`, this does not occur.  `-nocache` does not help.\r\n\r\nIn powershell, in a fresh folder, execute the following:\r\n\r\n'''ps\r\n\r\nif(Test-path packages) {rm packages -r}\r\n\r\n'<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<packages>\r\n  <package id=\"SqlServer\" version=\"21.0.17099\" />\r\n</packages>' > packages.config\r\n\r\n'<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"PSGallery\" value=\"https://www.powershellgallery.com/api/v2/\" />\r\n  </packageSources>\r\n  <config>\r\n    <add key=\"repositoryPath\" value=\".\\packages\" />\r\n  </config>\r\n</configuration>' > nuget.config\r\n\r\nWrite-Output \"* INSTALLING OLD VERSION *\"\r\n\r\nnuget install packages.config -excludeversion -verbosity detailed\r\n\r\nWrite-Output \"* DOWNLOADED VERSION: $((Import-PowershellDataFile \"./packages/SqlServer/SqlServer.psd1\").ModuleVersion) *\"\r\n\r\n'<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n <packages>\r\n   <package id=\"SqlServer\" version=\"21.1.18245\" />\r\n</packages>' > packages.config\r\n\r\nWrite-Output \"* INSTALLING NEW VERSION *\"\r\n\r\nnuget install packages.config -excludeversion -verbosity detailed\r\n\r\nWrite-Output \"* DOWNLOADED VERSION: $((Import-PowershellDataFile \"./packages/SqlServer/SqlServer.psd1\").ModuleVersion) *\"\r\n'''\r\n\r\nSee in the logs below, the DOWNLOADED VERSION remains unchanged after the second `nuget install` command.\n\n### Verbose Logs\n\n```shell\n* INSTALLING OLD VERSION *\r\nNuGet Version: 6.4.0.123\r\nFeeds used:\r\n  C:\\Users\\zaratem\\.nuget\\packages\\\r\n  https://www.powershellgallery.com/api/v2/\r\n\r\nRestoring NuGet package SqlServer.21.0.17099.\r\nAdding package 'SqlServer.21.0.17099' to folder 'C:\\temp\\NugetBugDemo\\packages'\r\nAdded package 'SqlServer.21.0.17099' to folder 'C:\\temp\\NugetBugDemo\\packages'\r\nAdded package 'SqlServer.21.0.17099' to folder 'C:\\temp\\NugetBugDemo\\packages' from source 'C:\\Users\\zaratem\\.nuget\\packages\\'\r\n* DOWNLOADED VERSION: 21.0.17099 *\r\n* INSTALLING NEW VERSION *\r\nNuGet Version: 6.4.0.123\r\nFeeds used:\r\n  C:\\Users\\zaratem\\.nuget\\packages\\\r\n  https://www.powershellgallery.com/api/v2/\r\n\r\nRestoring NuGet package SqlServer.21.1.18245.\r\nAdding package 'SqlServer.21.1.18245' to folder 'C:\\temp\\NugetBugDemo\\packages'\r\nAdded package 'SqlServer.21.1.18245' to folder 'C:\\temp\\NugetBugDemo\\packages'\r\nAdded package 'SqlServer.21.1.18245' to folder 'C:\\temp\\NugetBugDemo\\packages' from source 'C:\\Users\\zaratem\\.nuget\\packages\\'\r\n* DOWNLOADED VERSION: 21.0.17099 *\n```\n"},{"Id":"26645852241","Type":"IssuesEvent","CreatedAt":"2023-01-25T09:55:20","Actor":"fermoyboy","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12383","RelatedDescription":"Opened issue \"Out of Memory on Simple project with dotnet restore\" (#12383) at NuGet/Home","RelatedBody":"I am running dotnet restore as part of a Jenkins build pipeline. The restore often fails with variations on OutOfMemory. I initially increased the 8Gb RAM on the machine to 16Gb, but this had no effect.\r\n\r\nThe solution is relatively straightforward, containing c. 12 projects. None of these project are unusual, excepting perhaps that they are all .NET Framework 4.8 based. They all build on Visual Studio 2022 without problems.\r\n\r\nTo recreate the situation, I ran two command-line processes on the build machine, both of which failed. The command lines were:\r\n\r\n> D:\\Build_Pipeline>dotnet restore -v diag Client\\DeptXWindowsService.sln 1> dotnet-restore.txt 2>&1\r\n\r\n> D:\\Build_Pipeline>dotnet restore --disable-parallel -v diag Client\\DeptXWindowsService.sln 1> dotnet-restore-disable-parallel.txt 2>&1\r\n\r\n[dotnet-restore.txt](https://github.com/NuGet/Home/files/10498109/dotnet-restore.txt)\r\n[dotnet-restore-disable-parallel.txt](https://github.com/NuGet/Home/files/10498110/dotnet-restore-disable-parallel.txt)\r\n\r\nThis created the two outputs below. You can see that both processes have exited with a failure after apparently running out of memory. Memory usage is only around 5% of the 16Gb before running these processes. This also takes quite some time. As this is not the only solution in our build pipeline, this slows our build pipeline significantly. \r\n\r\nWhat can I do to stop this happening?\r\n\r\nVersions Information:\r\nD:\\Build_Pipeline>msbuild /version\r\nMSBuild version 17.4.1+9a89d02ff for .NET Framework\r\n17.4.1.60106\r\nD:\\Build_Pipeline>dotnet --version\r\n7.0.102\r\n\r\n\r\n"},{"Id":"26634976416","Type":"PullRequestEvent","CreatedAt":"2023-01-24T21:05:13","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/pull/12174","RelatedDescription":null,"RelatedBody":"Allow the inclusion of additional metadata properties in package authoring and allow them to be used in search queries.\r\n\r\nThe motivation for this is to create associations of NuGet packages which bind and/or redistribute platform native libraries on other platforms and package management systems."},{"Id":"26632950509","Type":"IssuesEvent","CreatedAt":"2023-01-24T19:20:01","Actor":"baronfel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12382","RelatedDescription":"Opened issue \"Support declaring PackageSourceMappings via MSBuild items\" (#12382) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nPackages provided directly via the SDK (via the pre-existing LibraryPacks feature or other mechanisms) previously have had some sharp edges with Package Source Mapping and Central Package Version Management. https://github.com/dotnet/sdk/issues/27840 is one example of this, but there have been some enhancements to those mechanisms to automatically filter out certain kinds of packages or package sources (e.g. https://github.com/NuGet/Home/issues/11951). This is a great approach, but a future-facing approach might be to allow the SDK to programmatically update Package Source and Mappings for sources and packages that it contributes via adding certain kinds of MSBuild metadata or items - that pushes the work onto the SDK team and relieves the NuGet logic from having to update these distinctions if the desired logic should change at some future time.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"26628217474","Type":"IssuesEvent","CreatedAt":"2023-01-24T15:57:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12377","RelatedDescription":"Closed issue \".NET Framework (non-SDK) projects don't load IsImplicityDefined metadata on PackageReferences\" (#12377) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nall?\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nHave a non-SDK style project, and a PackageReference item with `IsDefinedImplicitly=\"true\"`. For example:\r\n\r\n```xml\r\n<PackageReference Include=\"NuGet.Versioning\" Version=\"6.4.0\" IsDefinedImplicitly=\"true\" />\r\n```\r\n\r\nThen, open the Package Manager UI, go to the installed tab, and try to change the package version.  If you do this with an SDK style project, you'll see the version selection is disabled, with the top entry saying \"Disabled by project\".  When you try this with a non-SDK style project, it lets you change the version, and when the PackageReference comes from a read-only file (for example, a targets file in the Visual Studio install directory), trying to install the package fails.\n\n### Verbose Logs\n\n_No response_"},{"Id":"26616132005","Type":"IssuesEvent","CreatedAt":"2023-01-24T07:17:18","Actor":"bhaeussermann","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12381","RelatedDescription":"Opened issue \"Packages not found while restoring cause ArgumentNullException\" (#12381) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Commands 6.4.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSee the following code used for restoring a NuGet package:\r\n\r\n```\r\npublic async Task RestoreAsync()\r\n{\r\n    var packageToRestore = new PackageIdentity(\"FluentAssertions\", NuGetVersion.Parse(\"6.8.0\"));\r\n\r\n    var progressCallback = new Action<string, TraceLevel>((message, traceLevel) => Console.WriteLine(message));\r\n    var machineWideSettings = new MachineWideSettings();\r\n    var settings = Settings.LoadDefaultSettings(null, null, machineWideSettings);\r\n\r\n    using var sourceCacheContext = new SourceCacheContext();\r\n    var restoreArgs = new RestoreArgs\r\n    {\r\n        AllowNoOp = true,\r\n        CacheContext = sourceCacheContext,\r\n        CachingSourceProvider = new CachingSourceProvider(new PackageSourceProvider(settings)),\r\n        ConfigFile = null,\r\n        DisableParallel = false,\r\n        Runtimes = new HashSet<string>(),\r\n        FallbackRuntimes = new HashSet<string>(),\r\n        RequestProviders = new List<IRestoreRequestProvider>(),\r\n        Sources = new List<string>(),\r\n        GlobalPackagesFolder = null,\r\n        HideWarningsAndErrors = false,\r\n        Inputs = new List<string>(),\r\n        IsLowercaseGlobalPackagesFolder = false,\r\n        LockFileVersion = null,\r\n        ValidateRuntimeAssets = null,\r\n        Log = Logger.Create(progressCallback),\r\n        MachineWideSettings = machineWideSettings,\r\n        PackageSaveMode = PackageSaveMode.Defaultv3\r\n    };\r\n    restoreArgs.PreLoadedRequestProviders.Add(\r\n        new DependencyGraphSpecRequestProvider(\r\n            new RestoreCommandProvidersCache(),\r\n            GetDependencyGraph(packageToRestore)));\r\n\r\n    await RestoreRunner.RunAsync(restoreArgs);\r\n}\r\n\r\nprivate DependencyGraphSpec GetDependencyGraph(PackageIdentity package)\r\n{\r\n    var frameworkName = new FrameworkName(\".NETCoreApp,Version=v6.0\");\r\n\r\n    var packageSpec = ToolRestoreUtility.GetSpec(\r\n        Path.Combine(Path.GetTempPath(), $\"{package.Id}{package.Version}.csproj\"),\r\n        package.Id,\r\n        new VersionRange(package.Version),\r\n        new NuGetFramework(frameworkName.Identifier, frameworkName.Version, \".NETCoreApp\", new Version(\"6.0\")),\r\n        Path.Combine(Path.GetTempPath(), \"TestNuGet\"),\r\n        new List<string>(),\r\n        new List<PackageSource> { new PackageSource(@\"https://api.nuget.org/v3/index.json\") },\r\n        new WarningProperties());\r\n\r\n    var dependencyGraphSpec = new DependencyGraphSpec();\r\n    dependencyGraphSpec.AddProject(packageSpec);\r\n    dependencyGraphSpec.AddRestore(packageSpec.Name);\r\n    return dependencyGraphSpec;\r\n}\r\n```\r\n\r\nRunning the code unchanged works. However, if I either:\r\n- change the ID of the `PackageIdentity` to a package that does not exist, eg. \"NonExistent\", or\r\n- change the version to one that doesn't exist, eg. \"99.0.0\"\r\n\r\nI get the exception `System.ArgumentNullException : Value cannot be null. (Parameter 'path')`\r\nI would expect a more informative exception.\r\n\r\nThe same exception also occurs when restoring while the package source cannot be reached (eg. internet connection down).\r\nTo reproduce:\r\n- Debug the code and set a breakpoint on the first line of the method\r\n- Clear the _%temp%\\TestNuGet_ folder\r\n- Clear the NuGet cache\r\n- Disable all network adaptors that connect to the internet\r\n- Continue debugging\r\n\r\nThe exact same `ArgumentNullException` is thrown.\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-01-27T03:30:24.7577483Z","RunDurationInMilliseconds":1389}