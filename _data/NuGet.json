{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"31953664360","Type":"PullRequestEvent","CreatedAt":"2023-09-19T22:01:49","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9668","RelatedDescription":"Opened pull request \"Admin Panel for Popularity Transfers\" (#9668) at NuGet/NuGetGallery","RelatedBody":"## Admin Panel for Popularity Transfers\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4746\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3a6ef4ec-da95-483c-bad5-89c51673afd1)\r\n\r\nYou can now enter a list of packages you want to transfer popularity from, and a list of packages you want to transfer to. \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/4c162811-b05c-4460-9517-9351f5f52ae8)\r\n\r\nIt then validates your input. \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/265a5abb-3199-4e48-9005-ea26e7e660df)\r\n\r\nSubmitting your changes updates the DB with new entries in the PackageRenames table.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/9aff4cfb-4b08-45a0-816b-114f1af9e8ed)\r\n\r\n<details><summary>DB changes</summary>\r\n\r\nYou can see the new Serilog (Key = 11) --> Moq (Key = 9) entry\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/6a315e46-0686-4776-be62-56fefa752dee)\r\n</details> \r\n\r\n<details><summary>Error Handling</summary>\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5d5dc90a-b10f-4884-80f0-a51795ef7a83)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/dea204c9-20bc-44c1-8691-7438c1c4418a)\r\n</details> \r\n\r\n**NOTE:** Our current playbook asks us to delete any existing popularity transfers for the 'From' packages, so the popularity transfer operation deletes previous entries from the DB. Let me know if this doesn't sound right, or we want to give the DRIs more information/options on what to do with existing popularity transfers. Currently, we just show a warning when we validate the input, and then if a user submits the changes, then we remove all previous entries.\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/ddb3f6ec-1f79-4256-a17b-a8aa068140b9)"},{"Id":"31920590739","Type":"PullRequestEvent","CreatedAt":"2023-09-18T20:07:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9640","RelatedDescription":"Merged pull request \"Fix Update-Database.ps1 to work on DevBox\" (#9640) at NuGet/NuGetGallery","RelatedBody":"On DevBox, global packages folder location is overridden using NUGET_PACKAGES environment variable. This currently breaks the Update-Database.ps1 script, which assumes GPF is at the default location: %userprofile%\\.nuget\\packages.\r\n\r\nNuGet Client docs: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders"},{"Id":"31919057445","Type":"IssuesEvent","CreatedAt":"2023-09-18T18:58:18","Actor":"Spork-Schivago","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9667","RelatedDescription":"Opened issue \"[Feature]: using custom PackageAuthenticationService class\" (#9667) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nNuGet.Server supports the use API keys, however, this support is very premative.    For example, NuGet.Server does not support retrieving api keys from secret managers like the Vault. \n\n### The Elevator Pitch\n\nI would like to use my own custom PackageAuthenticationService that implements a more secure approach, such as using ephemeral API keys from the Vault.  I have modified the PackageAuthenticationService and added it to my ASP.NET Web Application (NET Framework) project but there doesn't seem to be any clear way to set NuGet.Server to use my custom class over it's built in one, maybe besides writing a custom resolver and setting NuGetODataConfig.cs to use my resolver instead.\r\n\r\nIs there a way to accomplish what I want to accomplish, and if not, can it be implemented?   So NuGet.Server uses a custom PackageAuthenticationService?   Thanks. \n\n### Additional Context and Details\n\n_No response_"},{"Id":"31871848295","Type":"PullRequestEvent","CreatedAt":"2023-09-15T18:24:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9666","RelatedDescription":"Merged pull request \"Add FlatContainer empty config to web.config\" (#9666) at NuGet/NuGetGallery","RelatedBody":"This makes it easier to remember to set this value when you set the storage type to `AzureStorage`. This is needed when uploading embedded licenses."},{"Id":"31869976142","Type":"PullRequestEvent","CreatedAt":"2023-09-15T16:51:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9666","RelatedDescription":"Opened pull request \"Add FlatContainer empty config to web.config\" (#9666) at NuGet/NuGetGallery","RelatedBody":"This makes it easier to remember to set this value when you set the storage type to `AzureStorage`. This is needed when uploading embedded licenses."},{"Id":"31851514186","Type":"IssuesEvent","CreatedAt":"2023-09-15T02:20:06","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8916","RelatedDescription":"Closed issue \"[Tests] Migrate existing Gallery Functionaltests to use a newer framework.\" (#8916) at NuGet/NuGetGallery","RelatedBody":"Our WebUITests projects uses legacy technology `MSTestV1`, this caused problems with binding redirects (please see: https://github.com/NuGet/NuGetGallery/pull/8890). There might be more problems caused for this legacy framework so moving to a newer technology or upgrading it would help us improving our processes."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"31955964033","Type":"IssuesEvent","CreatedAt":"2023-09-20T01:00:25","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4095","RelatedDescription":"Closed issue \"Dotnet nuget push can't find credential from global nuget.config\" (#4095) at NuGet/Home","RelatedBody":""},{"Id":"31955911928","Type":"IssuesEvent","CreatedAt":"2023-09-20T00:56:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4343","RelatedDescription":"Closed issue \"Package Installation Status API\" (#4343) at NuGet/Home","RelatedBody":"This is needed to fix https://github.com/dotnet/cli/issues/5325 which was opened by @rrelyea \r\n\r\ndotnet CLI brings along a cached version of Microsoft.NetCore.App and several other metapackages. During first-run, CLI unpacks these packages and attempts to install them. As @rrelyea pointed out in the aforementioned issue, the UX on first run would be greatly improved if CLI could bypass this step altogether when the needed packages are already present. To do this, however, we need an API that will tell us that a given package identity, along with transitive dependencies, is already present in the current user context. `bool IsInstalled(\"Microsoft.NetCore.App\", \"1.1.0\")` would be the pseudocode signature, I suspect...\r\n\r\nWe considered inspecting the packages folder directly, but per past conversations we decided not to pursue taking dependencies on the layout of nuget's packages store."},{"Id":"31952973357","Type":"PullRequestEvent","CreatedAt":"2023-09-19T21:20:42","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12886","RelatedDescription":"Opened pull request \"Spec for dotnet search implementing nuget list functionality.\" (#12886) at NuGet/Home","RelatedBody":"This PR provides a spec for implementing `nuget list` functionality in DotNet.\r\nI previously made a spec that included this as a sub project, however, I noticed that making its own spec for it would be a better idea. Here is a link to the other PR : https://github.com/NuGet/Home/pull/12870 . "},{"Id":"31947157920","Type":"IssuesEvent","CreatedAt":"2023-09-19T16:57:53","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12879","RelatedDescription":"Closed issue \"The value of the 'TargetFrameworkMoniker' and 'NuGetTargetMoniker' properties in the 'x64' configuration are both empty.\" (#12879) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nOther/NA\r\n\r\n### Product Version\r\n\r\nVisual Studio 16.11.29\r\n\r\n### Worked before?\r\n\r\nVisual Studio 16.11.18\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nLong ago I've created a simple project to deal with Angular code. After VS update (16.11.13 --> 16.11.29) it can no longer load the project. Please, can you help with a workaround? I need VS to be updated for other reasons.\r\n\r\nerror:\r\n![image](https://github.com/NuGet/Home/assets/22357016/b3661f69-c701-43f6-b03d-d86d33712b41)\r\n\r\n\r\nproject:\r\n```\r\n<Project Sdk=\"Microsoft.Build.NoTargets/3.2.14\">\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build.NoTargets\" Version=\"3.2.14\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <!-- Any target framework you want as long as its compatible with your referenced NuGet packages -->\r\n    <TargetFramework>net462</TargetFramework>\r\n    <Platforms>x64</Platforms>\r\n    <!-- Do not add TargetFramework to OutputPath -->\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n    <!-- Do not expect pdb files to be generated (this is for fast up-to-date check) -->\r\n    <DebugType>None</DebugType>\r\n    <!-- Do not include files by default -->\r\n    <EnableDefaultItems>false</EnableDefaultItems>\r\n    <!-- Output subdir name -->\r\n    <AngularProject>test</AngularProject>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\r\n    <OutputPath>..\\..\\Bin\\Debug\\</OutputPath>\r\n    <BuildCommand>ng build --no-progress --output-path $(OutputPath)$(AngularProject)\\</BuildCommand>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n    <OutputPath>..\\..\\Bin\\Release\\</OutputPath>\r\n    <BuildCommand>ng build --no-progress --output-path $(OutputPath)$(AngularProject)\\ --prod</BuildCommand>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"**\" Exclude=\"node_modules\\**;$(BaseIntermediateOutputPath)\\**;$(MSBuildProjectFile)\" />\r\n    \r\n    <!-- This deals with fast up-to-date checks -->\r\n    <UpToDateCheckBuilt Original=\"package-lock.json\" Include=\"node_modules/.build\" />\r\n    \r\n    <UpToDateCheckInput Include=\"@(None);$(MSBuildProjectFile)\" Set=\"AngularFiles\" />\r\n    <UpToDateCheckOutput Include=\"$(OutputPath)$(AngularProject)\\index.html\" Set=\"AngularFiles\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"InitModules\" Inputs=\"package-lock.json\" Outputs=\"node_modules/.build\">\r\n    <Exec Command=\"npm ci --no-progress --no-color\" YieldDuringToolExecution=\"true\" />\r\n    <Exec Command=\"cd . &gt; node_modules/.build\" />\r\n  </Target>\r\n\r\n  <Target Name=\"BuildAngular\" BeforeTargets=\"AfterBuild\" Inputs=\"@(None);node_modules/.build;$(MSBuildProjectFile)\" Outputs=\"$(OutputPath)$(AngularProject)\\index.html\" DependsOnTargets=\"InitModules\">\r\n    <Exec Command=\"$(BuildCommand)\" YieldDuringToolExecution=\"true\" />\r\n  </Target>\r\n\r\n  <Target Name=\"CleanAngular\" BeforeTargets=\"AfterClean\">\r\n    <RemoveDir Directories=\"$(OutputPath)$(AngularProject)\\\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"31945697245","Type":"IssuesEvent","CreatedAt":"2023-09-19T16:00:23","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12015","RelatedDescription":"Closed issue \"The http removal will break private NuGet servers (NU1803 warning)\" (#12015) at NuGet/Home","RelatedBody":"I completely support the effort to force users to use https, however I'm concerned about not being able to use private NuGet servers (such as BaGet) on my local machine since:\r\n\r\n> In November 2024, we will throw an error when a non-HTTPS source is used. You will not be able to opt-out of this behavior. https://devblogs.microsoft.com/nuget/https-everywhere\r\n\r\nPlease consider keeping the opt-out option permanently or suggest an alternative solution."},{"Id":"31942118930","Type":"IssuesEvent","CreatedAt":"2023-09-19T14:06:14","Actor":"AR-May","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12884","RelatedDescription":"Opened issue \"[Bug]: Content item marked with Pack=\"True\" not included in NuGet package when using <TargetFrameworks> in csproj\" (#12884) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#9230**\r\n- Please respond to @bhaeussermann.\r\n\r\n---\r\n\r\n_From @bhaeussermann on Tuesday, September 19, 2023 8:13:55 AM_\r\n\r\n### Issue Description\n\nIn my solution I have an MSBuild targets file that looks as follows:\r\n\r\n```\r\n<Project>\r\n    <Target Name=\"IncludeContentInPackage\" AfterTargets=\"AfterCompile\">\r\n\t\t<ItemGroup>\r\n\t\t\t<PackAsRuntimeFile Include=\"file-to-include.txt\" PackagePath=\"content/file-to-include.txt\" />\r\n\t\t</ItemGroup>\r\n\r\n\t\t<ItemGroup>\r\n\t\t\t<Content Include=\"@(PackAsRuntimeFile)\" Pack=\"True\" />\r\n\t\t</ItemGroup>\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nWhen I package my project using the command\r\n```\r\ndotnet pack --configuration Release --output out\r\n```\r\nThe resultant package file will include the specified file inside of a folder named \"content\".\r\n\r\nHowever, when I change the project's `<TargetFramework>` element into a `<TargetFrameworks>`, the file will no longer be included in the package!\n\n### Steps to Reproduce\n\nA sample project that demonstrates the issue is attached.\r\nRun the following command inside of the solution folder to create a package:\r\n```\r\ndotnet pack --configuration Release --output out\r\n```\r\nRename the resultant _.nupkg_ file to a _.zip_ file in order to inspect its contents.\r\n\r\n[MultipleTargetFrameworks.zip](https://github.com/dotnet/msbuild/files/12657361/MultipleTargetFrameworks.zip)\r\n\n\n### Expected Behavior\n\nThe _.nupkg_ file contains the _file-to-include.txt_ file inside of a _content_ folder.\n\n### Actual Behavior\n\nThe file to include is not in the package like when I use the `<TargetFramework>` tag on the project instead of `<TargetFrameworks>`.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\ndotnet --version: 7.0.401\r\n\r\nMSBuild version 17.7.3+8ec440e68 for .NET\r\n17.7.3.40206\r\n"},{"Id":"31939995329","Type":"IssuesEvent","CreatedAt":"2023-09-19T13:20:16","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12811","RelatedDescription":"Closed issue \"NuGet Package not being built in Visual Studio 2022 or on Github actions\" (#12811) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\nmsbuild 17.7.2.37605\n\n### Worked before?\n\nunknown\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nTo make things simple to reproduce, clone the master branch from this repository which is having the problem:  https://github.com/rambotech/BOG.Framework\r\n\r\nThe Framework project has the <GeneratePackageOnBuild>true</GeneratePackageOnBuild> node in the project file.  The project also has a Nuspec file for the package.  Visual Studio 2022 will build the project with no errors, and previously the package file would appear as BOG.Framework.*.nupkg in bin/release.  Note: This is a .NET Framework 4.8.1 project, previously targeting 4.7.2 ... but neither target created the nupkg file in Visual Studio 2022.\r\n\r\nThe project also has Actions in the Github repo, which are looking for output in Framework/bin/release, but find none.  Locally, I get no package looking for *.nupkg (dir {repo_root}\\*.nupkg /s /b) after building in 2022.\r\n\r\nFor comparison, I have another project on GitHub which targets .NET 7, but the 2 projects generating nuget packages target .NET Standard 2.1, have the same GeneratePackageOnBuild node in their projects, and do generate their nuget packages in the bin/release folders.   See: https://github.com/rambotech/BOG.DropZone\r\n\r\nI've exhausted my options, so... help, please.\n\n### Verbose Logs\n\n```shell\nlogs can be obtained locally from the source code.\n```\n"},{"Id":"31914799543","Type":"IssuesEvent","CreatedAt":"2023-09-18T16:01:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12298","RelatedDescription":"Closed issue \"Spec for locals command: deleting an specific package from Global Packages Folder\" (#12298) at NuGet/Home","RelatedBody":"Goal: Get this spec merged: https://github.com/NuGet/Home/pull/10427"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-20T03:30:22.4198207Z","RunDurationInMilliseconds":1117}