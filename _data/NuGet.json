{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42838803128","Type":"PullRequestEvent","CreatedAt":"2024-10-14T20:55:19","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10220","RelatedDescription":"Merged pull request \"Update Azure.Core and System.Formats.Asn1 package\" (#10220) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/Engineering/issues/5532\r\nPart of https://github.com/NuGet/Engineering/issues/5546\r\nPart of https://github.com/NuGet/Engineering/issues/5670\r\nPart of https://github.com/NuGet/Engineering/issues/5531\r\n\r\nPreviously not identified root dependencies bringing `Azure.Core` vulnerable version, besides all of them are vulnerable so decided them update too.\r\n![image](https://github.com/user-attachments/assets/18ae9540-a7af-4b78-bcd7-0229f45e22ac)\r\n"},{"Id":"42838058826","Type":"IssuesEvent","CreatedAt":"2024-10-14T20:28:09","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10146","RelatedDescription":"Closed issue \"[NuGet.org Bug]: MonitoringProcessor can hang in KV secret injection\" (#10146) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI noticed this bug in DEV and in INT but, thankfully, not in PROD. \r\n\r\nThe `SecretDictionary` type of ours is used by `Ng` for storing secrets. It uses our `ISecretInjectory.InjectAsync` but is a sync context. We can change this to be sync all the way down to avoid deadlocks. \n\n### Repro Steps\n\nLet MonitoringProcessor restart. It does so every 24 hours. Sometimes, it will hang on secret injection.\n\n### Expected Behavior\n\nThis job should not hang. We should avoid sync-over-async.\n\n### Screenshots\n\n<img width=\"853\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ba8dbaa6-4aab-4d2b-b7e5-59c8b640a0ad\">\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"42835274802","Type":"PullRequestEvent","CreatedAt":"2024-10-14T18:37:22","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10220","RelatedDescription":"Opened pull request \"Update System.Formats.Asn1 package\" (#10220) at NuGet/NuGetGallery","RelatedBody":"Follow up on https://github.com/NuGet/NuGetGallery/pull/10160\r\nPart of https://github.com/NuGet/Engineering/issues/5532\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42839538912","Type":"IssuesEvent","CreatedAt":"2024-10-14T21:28:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11315","RelatedDescription":"Closed issue \"[Feature]: `dotnet list package --vulnerable` could have an non-zero exit code when a vulnerable package is found\" (#11315) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\n`dotnet list package --vulnerable` is a great feature we can use in CI workflows.\r\n\r\nIt would be great to quickly know if a project is vulnerable during the CI processes without having to parse the output of the command.\r\n\r\nA quick way to achieve this would be to add an option like `--exit-code` (just an example) and then the command would return a non-zero exit code if there is at least one vulnerable package.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42839346086","Type":"IssuesEvent","CreatedAt":"2024-10-14T21:18:27","Actor":"bkoelman","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13855","RelatedDescription":"Opened issue \"Regression in .NET 9 RC2: NU1605 Downgrade error which isn't a downgrade\" (#13855) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\n.NET 9 RC2 (SDK 9.0.100-rc.2.24474.11)\n\n### Worked before?\n\nYes, no such errors on .NET 8 and .NET 6\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen building an existing solution with .NET 9 RC2 in Visual Studio, the following warning shows up in the error list. The build output contains \"NuGet package restore failed. Please see Error List window for detailed warnings and errors.\"\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError (active)\tNU1605\tWarning As Error: Detected package downgrade: Microsoft.EntityFrameworkCore.Relational from 8.0.0 to 8.0.8. Reference the package directly from the project to select a different version. \r\n SourceGeneratorTests -> TestBuildingBlocks -> Microsoft.EntityFrameworkCore.Relational (>= 8.0.0) \r\n SourceGeneratorTests -> JsonApiDotNetCore -> Microsoft.EntityFrameworkCore.Relational (>= 8.0.8)\tSourceGeneratorTests (net6.0), SourceGeneratorTests (net8.0), SourceGeneratorTests (net9.0)\tD:\\Bart\\Source\\Repos\\JsonApiDotNetCore\\test\\SourceGeneratorTests\\SourceGeneratorTests.csproj\t1\t\r\n```\r\n\r\nNote in the message above, that \"Detected package downgrade: ... from 8.0.0 to 8.0.8\" isn't a downgrade. It's an upgrade, which shouldn't result in an error or warning.\r\n\r\nInterestingly, this error does _not_ show up when running `dotnet restore` from the command line.\r\n\r\nI can work around it by adding an explicit package reference to the affected project(s), but that shouldn't be required.\n\n### Verbose Logs\n\n_No response_"},{"Id":"42839324196","Type":"IssuesEvent","CreatedAt":"2024-10-14T21:17:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4837","RelatedDescription":"Closed issue \"PackageReference is missing copy files to output feature\" (#4837) at NuGet/Home","RelatedBody":"_Moved from https://github.com/Microsoft/msbuild/issues/1880 on behalf of original poster @Ciantic._\r\n\r\nI'm trying to use [PhantomJS NuGET package](https://www.nuget.org/packages/PhantomJS/), but it's not possible with `PackageReference`:\r\n\r\n```xml\r\n<PackageReference Include=\"PhantomJS\" Version=\"2.1.1\">\r\n      <IncludeAssets>all</IncludeAssets>\r\n</PackageReference>\r\n```\r\n\r\nIt does not do anything. I'd expect it to copy the files inside PhantomJS package to the output directory so I could use the binary file inside the package.\r\n\r\nI think `PackageReference` does not have support using packages such as PhantomJS which have no .NET code in it, just random files.\r\n\r\nI suggest a feature to be able to copy files from a NuGET package to output directory\r\n\r\n```xml\r\n<PackageReference Include=\"PhantomJS\" Version=\"2.1.1\">\r\n      <CopyToOutputDirectory>tools/*</CopyToOutputDirectory> <!-- new feature here -->\r\n</PackageReference>\r\n```\r\n\r\nNote that the PhantomJS has folder called \"tools\" inside, that needs to be copied to output directory to make it usable in the app."},{"Id":"42839027936","Type":"IssuesEvent","CreatedAt":"2024-10-14T21:04:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13839","RelatedDescription":"Closed issue \"Advice on the preferred method for fixing vulnerable package references\" (#13839) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nVisual Studio Package Management UI, dotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nThere are some feature suggestions for how to fix vulnerabilities of a referenced package in dotnet CLI and Visual Studio.\r\n\r\nFor example, let's say my project has following dependencies.\r\n`My App -> Package A -> Package B`\r\n\r\nThe version 1.0 of Package B is vulnerable, and this vulnerability has been fixed in the version 1.1.\r\nThe version 1.0 of Package A references the version 1.0 of Package B.\r\nAnd when the new version 1.1 of Package A is released, it will reference the version 1.1 of Package B.\r\n\r\nEven if the version 1.0 of Package A itself is not vulnerable, it is indirectly vulnerable because it references vulnerable Package B.\r\nHowever, nuget.org does not always report that the version 1.0 of Package A is vulnerable.\r\n\r\nFor example, [the version 5.15 of the Microsoft.Data.SqlClient package](https://www.nuget.org/packages/Microsoft.Data.SqlClient/5.1.5) is not marked as vulnerable, but [the version 1.10.3 of Azure.Identity package ](https://www.nuget.org/packages/Azure.Identity/1.10.3)it references is vulnerable.\r\nEven if a newer, non-vulnerable version of `Azure.Identity` package will be install, if minimum requirements specify a vulnerable version, it should still be displayed as having an indirect vulnerability.\r\n\r\nIn this case, I can choose from two options.\r\n\r\n1. Update the version of Package A to 1.1, which indirectly references version 1.1 of Package B.\r\n2. While referencing version 1.0 of Package A, directly reference version 1.1 of Package B.\r\n\r\nIn this case, I would first like to choose option 1 (if vulnerabilities is still not resolved, I will reluctantly choose option 2).\r\n\r\nHowever, current dotnet CLI and Visual Studio only indicate that Package B is vulnerable, and do not indicate that updating only Package A will resolve issues.\r\nIf I follow tool's advice and directly reference the version 1.1 of package B, and then decide to reference the version 1.1 of package A for reasons other than fixing vulnerabilities, I no longer need to directly reference package B, but the reference is not deleted automatically.\r\n\r\nThere are several suggestions to resolve this situation.\r\n\r\n* nuget.org should reliably report that if a dependency package is vulnerable, then higher-level packages that reference it are also vulnerable.\r\n* The `dotnet list package` command should provide `-–tree` option to display dependency tree, to help identify which higher-level packages reference vulnerable packages (the `––include-transitive` option is automatically enabled when the `––tree` option is used). If the `--vulnerable` option is also specified, this command will display reference paths from application to vulnerable packages.\r\n* I want to be able to set a policy for fixing vulnerabilities of indirectly dependent packages, either by directly referencing them or by trying to update packages that are closer to application first, in csproj or NuGet.config.\r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"42815502769","Type":"IssuesEvent","CreatedAt":"2024-10-14T08:51:40","Actor":"keldaaas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13793","RelatedDescription":"Reopened issue \"Updating multiple packages (with CPM and transitive pinning) should verify the referenced versions afterwards\" (#13793) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Current Behavior\r\n\r\nWith CPM and transitive pinning enabled:\r\n\r\nSolution S contains a console app and a test project. \r\nThe console app references package A.\r\nThe test project references package B.\r\n**Package B has a dependency on package A.**\r\n\r\n_ConsoleApp -> Package A\r\nTestProject -> Package B -> Package A_\r\n\r\n\r\nWhenever one tries to update both packages at the same time with the Package Manager UI there is an error [NU1109](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1109). I suppose this happens because the check for package B's dependencies doesn't take into account that package A will be updated as well. Instead it stops this process to avoid referencing different versions of package A.\r\nAt the moment the only solution is to update package A first and package B afterwards. This makes the CPM really annoying to use in solutions with a lot of dependencies.\r\n\r\n### Desired Behavior\r\n\r\nEither take into account that a referenced transitive dependency gets updated \"at the same time\" or check for different versions after the updates were executed.\r\n\r\n### Additional Context\r\n\r\ndotnet outdated updates the packages as expected."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-15T03:30:23.8676896Z","RunDurationInMilliseconds":875}