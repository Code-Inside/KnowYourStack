{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"41705326363","Type":"PullRequestEvent","CreatedAt":"2024-09-06T20:27:56","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10175","RelatedDescription":"Opened pull request \"Add statistics python project to build pipeline\" (#10175) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"41700717899","Type":"PullRequestEvent","CreatedAt":"2024-09-06T17:13:18","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10174","RelatedDescription":"Merged pull request \"[FI] main to dev\" (#10174) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"41675859596","Type":"PullRequestEvent","CreatedAt":"2024-09-06T00:44:32","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10174","RelatedDescription":"Opened pull request \"[FI] main to dev\" (#10174) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"41671205837","Type":"PullRequestEvent","CreatedAt":"2024-09-05T20:33:42","Actor":"kzu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10173","RelatedDescription":"Opened pull request \"Add support for markdown > alerts via markdig\" (#10173) at NuGet/NuGetGallery","RelatedBody":"Markdig supports alert blocks as documented at https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AlertBlockSpecs.md.\r\n\r\nBumping markdig and adding `.UseAlertBlocks()` now renders the expected html.\r\n\r\nNot sure how to go about adding the styles as needed.\r\n\r\nPartial fix for #10125\r\n\r\nSummary of the changes (in less than 80 characters):\r\n\r\n* Detail 1\r\n* Detail 2\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"41708825132","Type":"IssuesEvent","CreatedAt":"2024-09-07T00:25:02","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13775","RelatedDescription":"Opened issue \"Do not force \" (#13775) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.400\n\n### Worked before?\n\n8.0.300\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nhttps://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs#targeting-and-support-rules\r\n\r\n.NET documents 8.0.400 as having a minimum VS version of 17.8. However, because NuGet compiles against a higher version of MSBuild, it doesn't work.\r\n\r\nNuGet that ships in the 8.0.400 SDK needs to respect the .NET SDK's minimum VS version number.\n\n### Verbose Logs\n\n_No response_"},{"Id":"41708493741","Type":"IssuesEvent","CreatedAt":"2024-09-06T23:51:41","Actor":"AndriySvyryd","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13774","RelatedDescription":"Opened issue \"Feature Request: Add \"Support end date\" metadata\" (#13774) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nPackages that follow a set release lifecycle would expose this information. Then when building a package that claims to be supported longer than some of its transient dependencies NuGet would show a warning. This would help to proactively identify dependencies that would be deprecated before the using package.\n\n### Additional Context and Details\n\nAn extra feature would be to allow extending the \"Support end date\" without releasing a new package version or reuploading it."},{"Id":"41708003455","Type":"IssuesEvent","CreatedAt":"2024-09-06T23:05:44","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13773","RelatedDescription":"Opened issue \"Saving PackageManagementFormat throws Nullable object must have a value.\" (#13773) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nany\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nWhen calling `ApplyChanges` on `PackageManagementFormat` settings , if the nullable property `_showDialogValue` is not set, the attempt to save settings to disk will fail.\r\n\r\n1. Create a PackageManagementFormat\r\n2. Do not call a `get` method for `Enabled` property\r\n3. Call `ApplyChanges` and observe the InvalidOperationException\n\n### Verbose Logs\n\n_No response_"},{"Id":"41704806953","Type":"IssuesEvent","CreatedAt":"2024-09-06T20:04:17","Actor":"dfederm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13772","RelatedDescription":"Opened issue \"\"Sequence contains no matching element\" when using a bad TF\" (#13772) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild version 17.9.8+b34f75857 for .NET Framework\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nError:\r\n```\r\n...\\Current\\bin\\NuGet.targets(169,5): error : Sequence contains no matching element [<repo>\\dirs.proj]\r\n```\r\n\r\nThis happened when accidentally using:\r\n\r\n```xml\r\n    <TargetFramework>net8.0;net472</TargetFramework>\r\n```\r\n\r\nThis is clearly a user error, but the error message could be more helpful. At the very least it should point to the problematic project instead of the root project for the restore.\r\n\r\nI can only get this specific error to repro under certain conditions which I'm not able to fully understand. eg it manifests this way when restoring from the root. When restoring the project directly I helpfully get:\r\n\r\n>NETSDK1046: The TargetFramework value 'net8.0;net472' is not valid. To multi-target, use the 'TargetFrameworks' property instead.\r\n\r\nI would guess it maybe only manifests when a projects depends on the problematic project? Not super sure though.\r\n\r\nAttaching a debugger shows that the exception is thrown here:\r\n![image](https://github.com/user-attachments/assets/c2ac4873-f741-471c-98b0-7f84aa1489af)\r\n\r\nAnd the stack in case it's helpful:\r\n![image](https://github.com/user-attachments/assets/98b1ea4d-417e-4238-a07d-731a4e7a8ece)\r\n\r\nI can provide more specific details (specific internal repo and commit) offline if desired.\n\n### Verbose Logs\n\n_No response_"},{"Id":"41674216501","Type":"IssuesEvent","CreatedAt":"2024-09-05T22:53:48","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13613","RelatedDescription":"Closed issue \"ManagePackageVersionsCentrally preventing restore with UsingTask from package\" (#13613) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n.NET  8.0.302, VS 17.10.3\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUsing `ManagePackageVersionsCentrally` with a package that includes a build task (i.e. `UsingTask`) that is referenced via `GeneratePathProperty` prevents the package from restoring with an `\"ResolvePackageAssets\" task failed unexpectedly` error.\r\n\r\nThe attached repo project includes the package `MSBuild.Microsoft.VisualStudio.Web.targets`, which defines a `TransformXml` task. When this task is used in an `AfterTargets=\"BeforeCompile\"` target, the mentioned errors occur (see logs).\r\n\r\n```\r\n<ItemGroup>\r\n  <PackageReference Include=\"MSBuild.Microsoft.VisualStudio.Web.targets\" GeneratePathProperty=\"true\" />\r\n</ItemGroup>\r\n\r\n<UsingTask TaskName=\"TransformXml\"\r\n           AssemblyFile=\"$(PkgMSBuild_Microsoft_VisualStudio_Web_targets)\\tools\\VSToolsPath\\Web\\Microsoft.Web.Publishing.Tasks.dll\"/>\r\n\r\n<Target Name=\"PerformTransform\" AfterTargets=\"BeforeCompile\">\r\n  <TransformXml Source=\"TestFile.xml\" Destination=\"TestFile.xml\" Transform=\"TestFile.xml\" />\r\n</Target>\r\n```\r\n\r\nThe only workaround we've found is to apply a condition on every target that uses the task. e.g. `Condition=\"'$(PkgMSBuild_Microsoft_VisualStudio_Web_targets)' != ''\"`\r\n\r\nThis issue does not occur when not using centrally managed packages.\r\n\r\n[CentralPackagesRepo.zip](https://github.com/user-attachments/files/16152071/CentralPackagesRepo.zip)\n\n### Verbose Logs\n\n```shell\nNuGet package restore failed. Please see Error List window for detailed warnings and errors.\r\n\r\nError (active)\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.<GetProjectFileDependencySet>g__IndexOfWhiteSpace|6_1(String s)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetProjectFileDependencySet(LockFile lockFile, String frameworkAlias)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<WritePackageDependenciesDesignTime>g__GetPackageDependencies|59_0()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WritePackageDependenciesDesignTime()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroup(Action writeItems)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroups()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.Write()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteToCacheFile()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tCentralPackagesRepo\tc:\\program files\\dotnet\\sdk\\8.0.302\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t266\n```\n"},{"Id":"41673434440","Type":"IssuesEvent","CreatedAt":"2024-09-05T22:11:15","Actor":"Matheos96","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13771","RelatedDescription":"Opened issue \"Skip vulnerable package versions in dependency resolution during nuget restore\" (#13771) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nThis feature request is based on the discussion in the dotnet/runtime repo for issue https://github.com/dotnet/runtime/issues/105028. The copy pasted quote below describes well the requested feature. It basically tries to address the issue where we are using a certain NuGet dependency which has its own dependency (a transitive dependency of ours) which has a known vulnerability AND a newer version addressing this vulnerability. The current behaviour is to always pick the minimum version that fullfills all dependency requirements. We wish this behaviour to change accordingly:\r\n\r\nQuote by @ibruynin from https://github.com/dotnet/runtime/issues/105028#issuecomment-2328984994\r\n> The nuget resolution goes for minimal version that fulfills all the dependencies in the project tree, which - in our case - upgrades 4.7.2 (not affected) to 8.0.0 (affected) but not to 8.0.4 which is available but does not match minimal version requirements.\r\n> \r\n> Suppose, we thought, that nuget keeps on doing what it does today but takes known vulnerabilities into account.\r\n> When looking at the versions of [System.Text.Json](https://www.nuget.org/packages/System.Text.Json/) only 8.0.4 is a good one now. If nuget restore skips all vulnerable versions, it will automatically result in 8.0.4 and all problems are gone automagically.\r\n\r\nAdditionally, I personally suggest this skip feature should respect Major boundaries and never skip \"on\" to the next Major. We should probably only skip to the latest `X.Minor.Patch` to ensure no surprise breaking changes are introduced by the implicit NuGet package upgrade. This of course assumes that developers have respected the SemVer 2.0 standard. In cases where this feature would cause an issue, due to breaking changes in Minor or Patch, perhaps simply an exact `PackageReference` to a specific version could be used.\n\n### Additional Context and Details\n\nThis is an all too common occurence, where we have transitive dependencies with vulnerabilities and the only way to solve them, besides waiting for the package we depend on to be updated, is to add an \"unnecessary\" direct reference to that package. These direct references are a mess to maintain and easily they get out of control when you in the future forget what is what, and why some reference ever was a direct reference etc. We want to just depend on the packages we actually directly depend on, and let them manage their own dependencies (along with the proposed package resolve improvement)."},{"Id":"41670569354","Type":"IssuesEvent","CreatedAt":"2024-09-05T20:08:45","Actor":"hreisin-qontigo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13770","RelatedDescription":"Closed issue \"Version constraints in Directory.Build.targets are not considered in transitive dependencies\" (#13770) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.302\r\n\r\n### Worked before?\r\n\r\nhaven't checked\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nConsider a solution with a single project `A`. Say the project has a package dependency on component `B`, and in turn, `B` has a package dependency on component `C`. Project A has (A.csproj): \r\n```\r\n<PackageReference Include=\"B\" />\r\n```\r\n\r\nThe file `Directory.Build.targets` has\r\n```\r\n<PackageReference Update=\"B\" Version=\"[1.0.0,)\" />\r\n<PackageReference Update=\"C\" Version=\"[1.0.0,)\" />\r\n```\r\n\r\nWhen `Directory.Build.targets` is changed to \r\n```\r\n<PackageReference Update=\"B\" Version=\"[1.1.0,)\" />\r\n<PackageReference Update=\"C\" Version=\"[1.0.0,)\" />\r\n```\r\nThe new version of `B` is restored properly. Yet, when `Directory.Build.targets` is changed to \r\n```\r\n<PackageReference Update=\"B\" Version=\"[1.0.0,)\" />\r\n<PackageReference Update=\"C\" Version=\"[1.1.0,)\" />\r\n```\r\nThe solution is NOT updating the version of referenced package `C`, keeping 1.0.0, even though that version is incompatible with the new constraint. Note that this is not a problem of conflicts between `A`, `B` and `C`, but rather that `dotnet restore` simply ignores the version of `C` when is not directly referenced by `A`.\r\n\r\nNote also that when the package dependency on component `C` is added to project `A` (A.csproj): \r\n```\r\n<PackageReference Include=\"B\" />\r\n<PackageReference Include=\"C\" />\r\n```\r\nThen, any update of the version of `C` in `Directory.Build.targets` is taken. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-09T03:30:18.7781164Z","RunDurationInMilliseconds":882}