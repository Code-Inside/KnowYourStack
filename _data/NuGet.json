{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"43622223966","Type":"PullRequestEvent","CreatedAt":"2024-11-08T01:44:20","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10255","RelatedDescription":"Opened pull request \"Dev eryondon azure.core gc\" (#10255) at NuGet/NuGetGallery","RelatedBody":"Related to https://github.com/NuGet/Engineering/issues/5546\r\n\r\nThere're some transitive vulnerable versions are still coming from Azure.Core"},{"Id":"43620465303","Type":"IssuesEvent","CreatedAt":"2024-11-08T00:03:27","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10254","RelatedDescription":"Opened issue \"[Feature]: Show OpenSSF Scorecard on NuGet.org\" (#10254) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nAs OpenSSF scorecards mature and more ecosystems adopt their practices, it would be a good idea to show an OpenSSF scorecard on NuGet.org on the details page similar to the collab we did with deps.dev:\n\ni.e. https://deps.dev/nuget/system.text.json\n\n![Image](https://github.com/user-attachments/assets/dd4a0030-046b-4247-ad78-aa7a6611a123)\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43616009103","Type":"PullRequestEvent","CreatedAt":"2024-11-07T20:47:20","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10248","RelatedDescription":"Merged pull request \"Search MSI migration + .NET 9 TFM support\" (#10248) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5439\r\nPart of https://github.com/NuGet/Engineering/issues/5512\r\n\r\nConfig changes PR: https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGetDeployment/pullrequest/2541\r\n\r\nThis adds MSI support for the search jobs and the search service.\r\n\r\nWe also add .NET TFMs to our list of \"Supported Frameworks\" so that they show up as computed frameworks on the frameworks tab and in the search index. The other changes in the `SupportedFrameworks.cs` file were just reordering to make it a bit more readable.\r\n\r\nI also had to make some tests a bit less sensitive to changes. Earlier we were trying to match an exact list of 'computed' compatible frameworks in some tests. With that setup, we would need to keep updating the test cases every time a new .NET TFM is added. I've made the tests less sensitive now, so they still check for the same behavior, but don't need the test case list to be exhaustive."},{"Id":"43609512081","Type":"IssuesEvent","CreatedAt":"2024-11-07T17:07:58","Actor":"D0LBA3B","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10253","RelatedDescription":"Opened issue \"[Feature]: Allow images from github.com/user-attachments/assets/*\" (#10253) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nHello,\r\nImages from github.com/user-attachments/assets/** are not allowed.\r\nThese images have been published on Github via an image copy/paste in the github README editor :\r\n\r\n![image](https://github.com/user-attachments/assets/f5961b13-09c3-46b2-9cae-4efe5476ce60)\r\n\r\n\r\nNuGet Package in question: https://www.nuget.org/packages/Our.Umbraco.Dashbraco/\n\n### The Elevator Pitch\n\nAllow these images to be displayed on the Nuget package page\n\n### Additional Context and Details\n\n_No response_"},{"Id":"43607411824","Type":"PullRequestEvent","CreatedAt":"2024-11-07T16:10:40","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10252","RelatedDescription":"Opened pull request \"[OIDC 2] Add federated credential entities (no DB change yet)\" (#10252) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10251.\r\n\r\nThis adds Entity Framework entities for federated credentials. There are two new tables:\r\n\r\n1. `FederatedCredentialPolicy` - this is a set of criteria that a user can provide as an acceptable pattern of credentials for authenticating as their user. For example, a policy would could be \"allow this specific Entra ID service principal to push packages on my behalf\".\r\n1. `FederatedCredential` - a record of federated credentials that were accepted by a federated credential policy. This is only used to prevent token replay.\r\n\r\nA future PR will introduce the DB migration."},{"Id":"43606055258","Type":"PullRequestEvent","CreatedAt":"2024-11-07T15:36:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10251","RelatedDescription":"Opened pull request \"Add basic Entra ID token validation\" (#10251) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\n\r\nThis adds an `IEntraIdTokenValidator` interface which accepts a parsed JWT (JSON web token) and performs basic Entra ID validation. This will be used by higher level code in a future PR.\r\n\r\nThe goal of this class is to assert that a given JWT is issued by Entra ID and is valid. The following checks are performed:\r\n\r\n1. The JWT signature is valid per Entra ID's signing keys, fetched via JWKS. This is done inside `ConfigurationManager<OpenIdConnectConfiguration>`.\r\n2. The issuer is an expected Entra ID value (`iss` claim and `issuer` property on the key). This is done via `AadIssuerValidator.GetAadIssuerValidator` and `EnableAadSigningKeyIssuerValidation`.\r\n3. The token is not expired (`nbf` and `exp` claims). This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n4. The token has a valid audience (`aud` claim). A valid `aud` claim is our configured app client ID. This is done inside `JsonWebTokenHandler.ValidateTokenAsync`.\r\n\r\nOther validations like replay protection, matching tenant ID/object ID, etc will be done elsewhere."},{"Id":"43585993385","Type":"IssuesEvent","CreatedAt":"2024-11-07T05:36:04","Actor":"zivkan","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10250","RelatedDescription":"Opened issue \"[NuGet.org Bug]: search by tfm doesn't find non-latest versions of packages that are compatible\" (#10250) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nA customer recently reported a problem to Visual Studio roughly related to package compatibility with their project: https://developercommunity.visualstudio.com/t/NuGet-package-update-of-MicrosoftBuild-/10782347\r\n\r\nI remembered that nuget.org's website has TFM filtering, so I thought I'd give it a go, but I found that it does not work in a way that this customer would have wanted.\r\n\r\nThe customer wants to find versions of a package that is compatible with their project, even if it's not the latest version of the package\n\n### Repro Steps\n\n[Search for `packageid:Microsoft.Build`](https://www.nuget.org/packages?q=packageid%3Amicrosoft.build&includeComputedFrameworks=true&prerel=true&sortby=relevance).\r\n\r\nSee the search result for version 17.12.6 is compatible with .NET Framework 4.7.2 and .NET 9.\r\n\r\nIn the search filter, select .NET 8 and click apply. [see that now it claims there are no packages](https://www.nuget.org/packages?q=packageid%3Amicrosoft.build&tfms=net8.0&includeComputedFrameworks=true&frameworkFilterMode=all&prerel=true&sortby=relevance)\n\n### Expected Behavior\n\nThe search results should return [package version 17.11.4](https://www.nuget.org/packages/Microsoft.Build/17.11.4), which is compatible with .NET 8\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"43618580846","Type":"IssuesEvent","CreatedAt":"2024-11-07T22:26:36","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13742","RelatedDescription":"Closed issue \"[Epic] Support for credential providers deployed via .NET tools\" (#13742) at NuGet/Home","RelatedBody":"* [x] [NuGet discovers credentials providers installed using .NET tools](https://github.com/NuGet/Home/issues/13740)\r\n* [x] [NuGet executes credentials providers installed using .NET tools](https://github.com/NuGet/Home/issues/13741)"},{"Id":"43618580750","Type":"IssuesEvent","CreatedAt":"2024-11-07T22:26:36","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12567","RelatedDescription":"Closed issue \"Support for credential providers deployed via .NET tools\" (#12567) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe, NuGet SDK\r\n\r\n### Current Behavior\r\n\r\nCurrently, credential providers support \\*.exe for .NET Framework or \\*.dll for .NET Core, and are usually split between two folders under the NuGet credential provider base path. For .NET Framework the providers are discovered by searching credentialprovider*.exe and executing that program, and for .NET Core they are discovered by searching credentialprovider*.dll and executing ```dotnet <credentialprovider>.dll```. Prior to .NET Core 2.0 this split was required as .NET Core only supported platform agnostic dll's (with the side affect of excluding platform dependent credential providers not based on .NET). With the latest versions of .NET however, this split is no longer necessary and requires multiple versions to be supported and deployed. This is also reinforced by the two plugin path environment variables ```NUGET_NETFX_PLUGIN_PATHS``` and ```NUGET_NETCORE_PLUGIN_PATHS``` which need to be set per framework version.\r\n\r\nA deployment solution for dotnet is [.NET tools](https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools) which provide a seamless .NET install and management experience for NuGet packages. Using .NET tools as a deployment mechanism has been a recurring feature ask for users of the .NET ecosystem which need to authenticate with private repositories. The ideal workflow would be (for private repositories like Azure DevOps):\r\n1. Customers have dotnet CLI tools installed\r\n2. Run ```dotnet tool install -g Microsoft.CredentialProviders```\r\n3. Run ```dotnet restore``` with a private endpoint and it 'just works' (e.g. credential providers from step 2 are used during credential acquisition and used to authenticate against private endpoints)\r\n\r\nThis almost works today, but for Windows .NET Framework only. The goal is to support this cross-platform for all supported .NET runtimes.\r\n\r\n### Problems\r\nThis work for Windows and .NET Framework today with the following caveats:\r\n1. You must use the \"tool path\" option when installing to get the tool in a path known by NuGet. By default .NET tools are installed to %USERPROFILE%\\\\.dotnet\\\\tools which is a location not examined by NuGet today. This can be specified explicitly, but can be error prone and doesn't take into account any environment customization:\r\n    ```\r\n    dotnet tool install -g Microsoft.CredentialProviders --tool-path %USERPROFILE%\\.nuget\\plugins\\netfx\\CredentialProvider.Microsoft\r\n    ```\r\n2. .NET tools will wrap up the .NET application and layout with a single *.exe and hide all the details of the NuGet package and associated files in a .store directory as an implementation detail. This works for .NET Framework which exclusively checks for *.exe, but not for .NET Core.\r\n\r\nDeployment via a .NET tool doesn't work for .NET Core or cross platform for the following reasons:\r\n1. For Windows .NET tools will always use a *.exe extension. This doesn't work for .NET Core as that requires a *.dll to be invoked from dotnet, even if the .NET tool exe would otherwise work for both versions.\r\n2. For Linux/OSX the executable will not have any extension, but instead just have an executable with the execute bit (+x) set on it. E.g.:\r\n    ```\r\n    ~$ dotnet tool install -g my-dotnet-tool\r\n    You can invoke the tool using the following command: my-dotnet-tool\r\n    Tool 'my-dotnet-tool' (version '0.0.1') was successfully installed.\r\n\r\n    ~$ ls -l -a ~/.dotnet/tools\r\n    total 120\r\n    drwxrwxrwx  3 user user   4096 Mar 25  2019 .\r\n    drwxrwxrwx 13 user user   4096 Mar 30 17:34 ..\r\n    drwxrwxrwx  4 user user   4096 Mar 25  2019 .store\r\n    -rwxr-xr-x  1 user user 106744 Mar 25  2019 my-dotnet-tool\r\n    ```\r\nThis doesn't work as NuGet is exclusively looking for *.exe or *.dll\r\n\r\n### Desired Behavior\r\n\r\nThe following changes in behavior would be required to make the proposal work:\r\n\r\n### 1. Support platform appropriate executables\r\nFor Windows: support *.exe for both .NET Framework and .NET Core.\r\nFor Linux/OSX: support extensionless executables (+x bit set).\r\n\r\n### 2. Support single plugin path environment variable\r\nIn order to ship a single credential provider that works for both .NET Framework and .NET Core that doesn't conflict with the existing semantics of the ```NUGET_NETFX_PLUGIN_PATHS``` and ```NUGET_NETCORE_PLUGIN_PATHS``` environment variables, a new environment variable should be introduced that supports the new semantics for # 1 above. It's possible that ```NUGET_PLUGIN_PATHS``` can be repurposed here, but that currently has lower precedence that the framework versions.\r\n\r\n### 3. Support the .NET tool default installation location for credential providers\r\nThe default .NET tool installation directory should be included when discovering credential providers. This will simplify the installation and should reduce cases where tools are installed to a location that NuGet does not consider, reducing troubleshooting and support cases.\r\n\r\n\r\n\r\n### Additional Context\r\n\r\nThe overall context and vision for the credential providers that support Azure DevOps (nuget, npm, python, etc.) is that they should be supported and easily installable in the ecosystems they are used in. For .NET using the dotnet CLI that means installable using dotnet tool install, for npm that means npm install, etc. Currently, various installation scripts are required, per platform, which already assume a set of tools and configuration about the users environment (PowerShell/pwsh, bash/sh, etc.)."},{"Id":"43585362915","Type":"IssuesEvent","CreatedAt":"2024-11-07T05:03:42","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8623","RelatedDescription":"Closed issue \"Guide for packaging C# library using P/Invoke to per-architecture and/or per-platform C++ native DLLs\" (#8623) at NuGet/Home","RelatedBody":"I am trying to make a NuGet package deploying a C# .NET Standard 2.0 library which does P/Invoke calls into a platform-dependent C++ library, which must therefore also be deployed, but is obviously architecture-dependent (x86, x64, ARM, ARM64), as well as platform-dependent (Desktop (Win32) vs. UWP).\r\n\r\nI read most documentations on docs.microsoft.com, issues on this GitHub and others, SO issues, etc. and it is still very unclear how to do this. Information is sparse, sometimes contradictory, and the lack of details on some concepts like TFMs makes the task nearly impossible. This whole thing could really use some detailed documenting and samples.\r\n\r\nIn no particular order:\r\n\r\n## Target frameworks\r\n\r\n- https://docs.microsoft.com/en-us/nuget/reference/target-frameworks has a long list of supported frameworks, but `native` is not included, as reported in NuGet/docs.microsoft.com-nuget#1480. However https://devblogs.microsoft.com/nuget/native-support/ clearly states that:\r\n  > When targeting native projects, a new target framework name is now recognized: **native**.\r\n\r\n- This page lists `netcore` as a framework with versions like `5.0`. But .NET Core is just releasing its 3.0 this week. So clearly there is no relation between the two, but there is not a word on it.\r\n\r\n- This page also casually mentions the TFM `win10`:\r\n  > win10 (not supported by Windows 10 Platform)\r\n\r\n  There is no explanation on what `win10` is (is this Desktop, as opposed to UWP?) nor why `win10` would not be supported on Windows 10 despite the name clearly saying otherwise.\r\n\r\n## Package structure\r\n\r\n- https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package goes into details about the NuGet package structure, but does not mention anything about native DLLs.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder should be used to put the native DLLs, but https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package says it is only for `.targets` and `.props` files.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder respects target frameworks, but does that mean that `build/native/x86/my.dll` vs. `build/native/x64/my.dll` works? Or should architecture-specific native DLLs be put in `runtimes/`?\r\n\r\n- Does NuGet support Desktop (Win32) and UWP inside the same package? I could not find any documentation about that. I tried using `runtimes\\win10-x86\\native\\my.dll` for the Desktop variant, and `runtimes\\win10-x86\\lib\\uap10.0\\my.dll` for the UWP variant of the native DLL, but I get an error _error APPX1101: Payload contains two or more files with the same destination path_. Why is that? Those are different frameworks, why is NuGet trying to import both files into a UWP project?\r\n\r\n## P/Invoke\r\n\r\nIt seems many people have problem with deploying architecture-specific native DLLs. A quick search on nuget.org shows that [packages like Microsoft.Net.Native.Compiler have many \"runtime\" variants](https://www.nuget.org/packages/runtime.win10-x64.Microsoft.Net.Native.Compiler/2.2.7-rel-27913-00) starting with _e.g._ a `runtime.win10-x64.` prefix, but it doesn't seem there is documentation about this approach.\r\n\r\nhttps://github.com/Mizux/dotnet-native attempts to provide an example using [the undocumented `runtime.json`](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) used by CoreFX, but looking at the example it seems that for each native DLL variant, a specific .NET Standard 2.0 wrapper assembly is needed, instead of using a single one with multiple native DLLs. This sounds very cumbersome, is that the only option?\r\n\r\nRelated to that, if it is possible to use a single .NET Standard 2.0 assembly, then how to deploy the correct native DLL? With a .NET Core 3.0 sample app, it seems that currently NuGet copies the entire `runtimes/` folder inside the `bin/` folder of the app, instead of only the appropriate native DLL. This results in multiple copies, and of course the wrong DLL path which prevents `DllImport` from finding the native DLL.\r\n\r\n## Other issues\r\n\r\nThere are many other logged issues that seem partially related:\r\n- #6645 mentions that\r\n  >  runtimes/{rid}/native does not work with netfx\r\n\r\n  but there is no context about where that comes from. And it suggests putting native DLLs in `lib/` which is reserved for assemblies, so doesn't seem to be a correct solution.\r\n- #6648 closed as duplicate, although the context is not clear (what kind of app / platform is this about?)\r\n- #3931 seems to be somewhat related, but uses `project.json` (?)\r\n- #2350 asks about the P/Invoke and packaging issue, but was closed without answer.\r\n- #6846 touches on the deploy problem when consuming the package\r\n- #8573, #8435, #1221, #5606, ... I didn't read all of them, there are too many.\r\n- Several issues mention https://stackoverflow.com/questions/49162127/how-to-include-native-assets-in-nuget-on-multiple-platforms-only-64-bit but this seems to be only a subset of the issues, it is not clear how this scales to multiple architectures AND multiple platforms at the same time. It also seems to suggest multiple assemblies are needed.\r\n- The road of the [`AssemblyLoadContext`](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) seems to be a runtime solution to a packaging problem, and really not a path I want to get onto.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-09T03:30:19.7506341Z","RunDurationInMilliseconds":1001}