{"Data":{"Blog":{"FeedItems":[{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we're excited to announce that you can pack a `README.md` file in your NuGet package and have it fully rendered on NuGet.org!\nThe post Add a README to Your NuGet Package appeared first on The...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"22992145785","Type":"PullRequestEvent","CreatedAt":"2022-07-20T21:48:58","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9178","RelatedDescription":"Merged pull request \"[ReleasePrep][2022.07.20]RI of dev into main\" (#9178) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"22992088752","Type":"PullRequestEvent","CreatedAt":"2022-07-20T21:45:15","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9178","RelatedDescription":"Opened pull request \"[ReleasePrep][2022.07.20]RI of dev into main\" (#9178) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"22991551314","Type":"PullRequestEvent","CreatedAt":"2022-07-20T21:11:06","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9177","RelatedDescription":"Opened pull request \"Add noindex meta tag \" (#9177) at NuGet/NuGetGallery","RelatedBody":"Add the `noindex` meta tag to the user profiles page (for locked users) and to the report abuse page and package statistics pages for all packages. \r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4457"},{"Id":"22991127167","Type":"PullRequestEvent","CreatedAt":"2022-07-20T20:46:23","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9176","RelatedDescription":"Merged pull request \"Update newtonsoft.json \" (#9176) at NuGet/NuGetGallery","RelatedBody":"Functional test failed with error message below: \r\nRun deployment issue: The assembly or module 'Newtonsoft.Json' directly or indirectly referenced by the test container 'd:\\a\\_work\\1\\s\\tests\\nugetgallery.loadtests\\bin\\release\\nugetgallery.loadtests.dll' was not found.\r\n\r\nThere are several workarounds: \r\n1. Add package reference with specific version\r\n2. Download assembly to Global Assembly Cache at agent where we run functional tests\r\n\r\nSince we don't have control of agent pool, I think workaround 1 will be better.  Please let me know if there is better workaround\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4452"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"23035831494","Type":"IssuesEvent","CreatedAt":"2022-07-22T18:37:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11980","RelatedDescription":"Closed issue \"Remove extra layers of abstractions from IVsProjectAdapter, move RuntimeGraph specific methods from VSProject to LegacyPackageReferenceProject\" (#11980) at NuGet/Home","RelatedBody":""},{"Id":"23023973022","Type":"IssuesEvent","CreatedAt":"2022-07-22T07:44:20","Actor":"lonix1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11981","RelatedDescription":"Opened issue \"[Bug]: NU1604 when using CPM with analyser packages\" (#11981) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0.302, msbuild 16.5.0.26101, uget 6.2.1.7\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nI'm using the new \"Central Package Managment\" feature. It doesn't work for analyser (and similar) packages.\r\n\r\nFor example, I want to use the [`AsyncFixer`](https://www.nuget.org/packages/AsyncFixer#package-reference) package.\r\n\r\nIt is installed in `MyProject.csproj` like this:\r\n````xml\r\n<PackageReference Include=\"AsyncFixer\" Version=\"1.6.0\">\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n</PackageReference>\r\n````\r\nBut since I'm using CPM, I remove the `Version` property (and add it to `Directory.Packages.props` instead).\r\n\r\nWhen I run `dotnet restore`, I get this:\r\n> /home/username/MyProject/MyProject.csproj : warning NU1604: Project dependency AsyncFixer does not contain an inclusive lower bound. Include a lower bound in the dependency version to ensure consistent restore results.\r\n\r\nI don't have that problem for normal packages, only ones with `PrivateAssets` and `IncludeAssets`.\r\n\r\nIs this a bug, or is it just me?\n\n### Verbose Logs\n\n_No response_"},{"Id":"23017437656","Type":"IssuesEvent","CreatedAt":"2022-07-21T23:05:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11980","RelatedDescription":"Opened issue \"Remove extra layers of abstractions from IVsProjectAdapter, move RuntimeGraph specific methods from VSProject to LegacyPackageReferenceProject\" (#11980) at NuGet/Home","RelatedBody":""},{"Id":"23012579275","Type":"IssuesEvent","CreatedAt":"2022-07-21T17:42:44","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11977","RelatedDescription":"Closed issue \"Update Microsoft.VisualStudio.Sdk.TestFramework to 17.2.7\" (#11977) at NuGet/Home","RelatedBody":"The `Microsoft.VisualStudio.Sdk.TestFramework` should be updated to the Latest Stable, which is currently `17.2.7`.\r\nThis task is a step of https://github.com/NuGet/Client.Engineering/issues/438.\r\n\r\nNote: https://github.com/NuGet/Home/issues/11975 was found when performing this upgrade (and is already fixed) "},{"Id":"23011364766","Type":"IssuesEvent","CreatedAt":"2022-07-21T16:34:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11970","RelatedDescription":"Closed issue \"[DCR]: Only cancel VS cred provider requests if VS is closing\" (#11970) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nNuGet provides extensibility for credential providers, which can obtain credentials to provide feeds more intelligently than if NuGet simply asking the customer to manually enter valid credentials. In some cases this can be automatic, without prompting the customer.  There are different cred providers for command line and VS.\r\n\r\nIn VS, NuGet currently passes the same `CancellationToken` that will eventually make the HTTP request to the credential provider. This means that in scenarios where NuGet wants to cancel the HTTP request (like PM UI is closed while a pending request is waiting), NuGet will instruct the credential provider to cancel obtaining a credential.\r\n\r\nThis leads to bad experiences, because the cred provider might display a GUI and interactively pompt the customer to take an action, but then the cred provider sees the cancellation token requesting cancellation, and then doesn't cache a valid, working token. This means the next time a token is required, the cred provider needs to prompt the customer again.\r\n\r\nSince PM UI is becoming more aggressive at cancelling HTTP requests (cancel when search query changes, cancel when PM UI closes, cancel when different package is selected in the package list so a different package is requested in the details panel), it means these bad experiences are increasing in probability.\n\n### Desired Behavior\n\nNuGet should allow the credential provider to complete obtaining valid credentials, unless NuGet know that it will not need valid credentials in the future. If NuGet doesn't want to wait for the credential provider to return a result, then it should find another way to exit early, without cancelling the credential provider request.\n\n### Additional Context\n\n_No response_"},{"Id":"23011216053","Type":"IssuesEvent","CreatedAt":"2022-07-21T16:26:47","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3324","RelatedDescription":"Closed issue \"NuGet and long file name support\" (#3324) at NuGet/Home","RelatedBody":"I often have the following exception during restore on Windows:\n\n```\nThe specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\n```\n\nIn the NuGet 2.x API, there is a nice interface `IFileSystem`. So, I could implement own file system which supports long paths. In the NuGet 3.x API, `IFileSystem` is legacy; the core logic works with the file system directly via `System.IO` (see [an example](https://github.com/NuGet/NuGet.Client/blob/3.5.0-rc1-final/src/NuGet.Core/NuGet.Common/PathUtil/FileUtility.cs)).\n\nIs there a workaround which adds the long paths support in NuGet 3.x?\n"},{"Id":"23010603657","Type":"IssuesEvent","CreatedAt":"2022-07-21T15:56:06","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11979","RelatedDescription":"Opened issue \"[Feature]: Add filesystem abstraction to NuGet SDK\" (#11979) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nFrom the original request of https://github.com/NuGet/Home/issues/3324\r\n\r\n> I often have the following exception during restore on Windows:\r\n> ```\r\n> The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\r\n> ```\r\n> In the NuGet 2.x API, there is a nice interface IFileSystem. So, I could implement own file system which supports long paths. In the NuGet 3.x API, IFileSystem is legacy; the core logic works with the file system directly via System.IO (see [an example](https://github.com/NuGet/NuGet.Client/blob/3.5.0-rc1-final/src/NuGet.Core/NuGet.Common/PathUtil/FileUtility.cs)).\r\n\r\n> \r\n> Is there a workaround which adds the long paths support in NuGet 3.x?\n\n### Additional Context and Details\n\nIn the past we've had a similar request because the customer wanted to do something custom to use Azure Storage, rather than local files or a file share: https://github.com/NuGet/Home/issues/10325\r\n\r\nWe've also had a chat with the Try.NET team who mentioned that if NuGet was to ever run in Try.NET in the web browser, it would need a filesystem abstraction.\r\n\r\nSo, there are use-cases that are not just \"support long paths via rewriting the path every IO call, rather than use Windows \"built-in\" long path support\"."},{"Id":"23010389143","Type":"IssuesEvent","CreatedAt":"2022-07-21T15:45:59","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11955","RelatedDescription":"Closed issue \"[Bug]: Nuget Package Manager - source path with accentuated character messes with .NET Interactive #r directive\" (#11955) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Manager Console\n\n### Product Version\n\nVisual studio 2019 (16.11.6) - Nuget Package Manager 5.11.0 - VSCode 1.69.0 - .NET Interactive notebooks v1.0.3314011 - F# Interactive version 11.4.2.0 pour F# 5.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nIn the Visual Studio (2019 or 2022) Nuget package manager, add 2 sources :\r\n\r\nC:\\nuget\\rihanna\r\nC:\\nuget\\beyoncé\r\n\r\nCreate the underlying directories as well.\r\n\r\nIn Visual Studio Code :\r\n- create a .NET Interactive Notebooks\r\n- add a C# or F# code cell\r\n- type #r \"nuget: Newtonsoft.Json\" and execute\r\nYou will get : `stdin(1,1): error FS3217: The source directory 'C:\\Nuget\\beyonc%EF%BF%BD' not found`\r\n\r\nNotes :\r\n- the package that is tried to be loaded is not supposed to be in any local source directory.\r\n- you get the error even if the faulty source is unticked in the package manager. The only workaround is to remove it.\r\n\r\nThe problem also occurs in F# Interactive as I reported a few months back: https://github.com/dotnet/fsharp/issues/12401. I only realized yesterday it occurs in .NET Interactive.\n\n### Verbose Logs\n\n_No response_"},{"Id":"23010127229","Type":"IssuesEvent","CreatedAt":"2022-07-21T15:33:48","Actor":"ds27680","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11978","RelatedDescription":"Opened issue \"[Bug]: ContentFiles not working as expected in .Net Framework project using PackageReference\" (#11978) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe, Visual Studio Package Management UI\n\n### Product Version\n\nNuGet: 5.4.0.6315, VisualStudio: 2022\n\n### Worked before?\n\nNot really\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFor the purpose of better managing translations, we are looking into moving resource files out of one of our projects to a repository where translators have access.\r\n\r\nWe would like to have the resource files only within that repository.\r\n\r\nCurrently, the resources are typically split within a project following this type of pattern:\r\n\r\n![TypicalProjectStructure](https://user-images.githubusercontent.com/6855697/180239837-f6eece6f-7082-47aa-94b8-8a231a35cf99.JPG)\r\n\r\nOne basically has folders ResourcesA, ResourcesB a.s.o. containing Resources.resx and their localizations.\r\n\r\nThe idea would be then, to generate NuGet packages from the separate repository, containing the resources as contentFiles, remove the resource files from our projects in the original repository, and simply reference the NuGet packages created from the repository the packages were moved to.\r\n\r\nThe original project containing the resources is a .Net Framework **.csproj** (currently targeting 4.8) using **PackageReferences**.\r\n\r\nGenerating NuGet packages is done using a Nuspec in the lines of:\r\n\r\n<?xml version=\"1.0\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\r\n\t<metadata>\r\n\t\t<id>SomeClassLibrary.Resources</id>\r\n\t\t<version>1.0.0</version>\r\n\t\t<title>Common resources NuGet package for reproducing contentFiles Issues in .Net Framework Projects.</title>\r\n\t\t<authors>Stefan Duca</authors>\r\n\t\t<owners>Stefan Duca</owners>\r\n\t\t<description>Common resources NuGet package for the Riem project (retina workplace).</description>\r\n\t\t<releaseNotes>Initial release.</releaseNotes>\r\n\t\t<copyright>Free for all.</copyright>\r\n\t\t<tags>NuGet, Issues, ContentFiles, Resources, .NET</tags>\r\n\t\t<dependencies/>\r\n\t\t\r\n\t\t<contentFiles>\r\n\t\t\t<files include=\"**/ResourcesA/*.resx\" buildAction=\"EmbeddedResource\" />\r\n\t\t\t<files include=\"**/ResourcesB/*.resx\" buildAction=\"EmbeddedResource\" />\r\n\t\t</contentFiles>\r\n\t\r\n\t</metadata>\r\n\r\n\t<files>\r\n\t  <file src=\".\\ResourcesA\\*.resx\" target=\"contentFiles\\any\\any\\ResourcesA\" /> \r\n\t  <file src=\".\\ResourcesB\\*.resx\" target=\"contentFiles\\any\\any\\ResourcesB\" />\t  \r\n\t</files>\r\n\r\n</package>\r\n\r\nRemoving the *.resx files from the original project and referencing the NuGet package created using the above **Nuspec** leads to a build error:\r\n\r\n**Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tTwo output file names resolved to the same output path: \"obj\\Debug\\SomeClassLibrary.Resources.resources\"\tSomeClassLibrary\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets\t3262**\t\r\n\r\nIndeed, looking at the MSBuild output one has:\r\n\r\n1>Task \"AssignTargetPath\" (TaskId:13)\r\n1>  Task Parameter:RootFolder=C:\\Temp\\NugetContentSample\\TestContentPackage-WithPackageResourcesRemoved\\SomeClassLibrary (TaskId:13)\r\n1>  Task Parameter:\r\n1>      Files=\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.es.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.es.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0 (TaskId:13)\r\n1>  Output Item(s): \r\n1>      _Temporary=\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.es.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>                  OriginalItemSpec=C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.es.resx\r\n1>                  **TargetPath=Resources.es.resx**\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>                  OriginalItemSpec=C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesA\\Resources.resx\r\n1>                  **TargetPath=Resources.resx**\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.es.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>                  OriginalItemSpec=C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.es.resx\r\n1>                  **TargetPath=Resources.es.resx**\r\n1>          C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.resx\r\n1>                  NuGetItemType=EmbeddedResource\r\n1>                  NuGetPackageId=SomeClassLibrary.Resources\r\n1>                  NuGetPackageVersion=1.0.0\r\n1>                  OriginalItemSpec=C:\\Users\\mssdu\\.nuget\\packages\\someclasslibrary.resources\\1.0.0\\contentFiles\\any\\any\\ResourcesB\\Resources.resx\r\n1>                  **TargetPath=Resources.resx (TaskId:13)**\r\n\r\nSo, it seems that the TargetPath gets flattened out, although this is not requested in the nuspec. Searched and found also this: #7255. \r\n\r\nHowever:\r\n\r\n1. The logs indicate that an attempt is being made to honor the contentFiles properly, and I did not find any indication in the documentation that the functionality does not work in .Net framework project with PackageReferences.\r\n\r\n2. The NuGet package works as expected in a .Net Core project.\r\n\r\n3. Even if I only have just the resources in ResourceA in the NuGet package I still get a build error (so the flattening of the folder structure is not the issue here), I have the impression it is more a conflict between the mebedded resources from the NuGet and the default assembly manifest resources getting basically the same *.resource output names\r\n \r\nI attached an archive to this report. Please see:\r\n\r\n[NugetContentSample-21.07.2022.zip](https://github.com/NuGet/Home/files/9160501/NugetContentSample-21.07.2022.zip)\r\n\r\nThe archive contains:\r\n\r\n![ZipContents](https://user-images.githubusercontent.com/6855697/180250226-ea5e38f1-a83d-4a08-9e72-ec2f54956a6b.JPG)\r\n\r\nWhere:\r\n\r\n**NuGetContent:**  Contains the files and the Nuspec for generating the resources NuGet package. One can generate/re-generate the package by opening a cmd prompt in the folder and issuing: **> nuget pack SomeClassLibrary.nuspec -OutputDirectory ../NuGetPackages**\r\n**NuGetPackages:** Contains the generated NuGet package. The projects contained in **TestContentPackage-WithPackageResourcesRemoved** and **TestContentPackage-.NetCore** configure this directory as the only Nuget package source avaiable for simplicity.\r\n**Screenshots:** Contains some of the screenshots in the report.\r\n**TestContentPackage-Start:** Contains the original \"sample\" .Net Framework project with the resource files in. Builds and works as expected. It contains a console project and a library (which contains the resources). The console can be executed with \"en-US\" or \"es\" as parameter and gets and prints out two resource strings one from the **ResourcesA** and one from **ResourcesB**, to illustrate that all works \"as expected\"\r\n**TestContentPackage-WithPackageResourcesRemoved:** Contains a copy of the \"sample\" .Net Framework project where the resx files were removed from the library and the library references the resources NuGet package. It does not build, gives error message described above. Console app is also present and is identical to the one in **TestContentPackage-Start**.\r\n**TestContentPackage-.NetCore:** A .Net Core project that similarly to the **TestContentPackage-WithPackageResourcesRemoved** contains a library where the resx files were removed  and the library references the resources NuGet package. It builds and works as expected. It contains a console project that works in the same way as the one in \"TestContentPackage-Start\".\r\n\r\nI know I could maybe \"fix\" my problem by using a .targets file that does copy the *.resx files to the projects before build, but I would rather avoid doing this.\r\n\r\nCurrently I'm still hoping that I am doing something something wrong...\r\n\r\n\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"22991391149","Type":"PullRequestEvent","CreatedAt":"2022-07-20T21:01:29","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/11740","RelatedDescription":"Closed pull request \"transitive list is expanded by default\" (#11740) at NuGet/Home","RelatedBody":"Transitive header in Installed tab will be expanded by default."},{"Id":"22970402957","Type":"IssuesEvent","CreatedAt":"2022-07-20T02:08:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11977","RelatedDescription":"Opened issue \"Update Microsoft.VisualStudio.Sdk.TestFramework to 17.2.7\" (#11977) at NuGet/Home","RelatedBody":"The `Microsoft.VisualStudio.Sdk.TestFramework` should be updated to the Latest Stable, which is currently `17.2.7`.\r\n\r\nNote: https://github.com/NuGet/Home/issues/11975 was found when performing this upgrade (and is already fixed) "},{"Id":"22970221684","Type":"IssuesEvent","CreatedAt":"2022-07-20T01:52:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11975","RelatedDescription":"Closed issue \"[Bug]: Test CpsPackageReferenceProjectTests.._WhenChildProjectChanges_ has Setups that fail in Moq 4.18.1\" (#11975) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nI'm upgrading Moq from 4.16.1 to 4.18.1. Apparently, the verification of Setups is more strict in this version, because the following test now fails. After investigating, I found that this Setup's criteria indeed is indeed not met.\r\n\r\n`TestPackageManager_ExecuteNuGetProjectActionsAsync_WithProgressReporter_WhenChildProjectChanges_AssetsFileWritesForParentsAreReported`\r\n\r\nRemoving these 2 setups will resolve the verification issue: https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.PackageManagement.VisualStudio.Test/CpsPackageReferenceProjectTests.cs#L3989-L3990\r\n\r\n/cc @nkolev92 in case you want to leave these Setups, and instead we can refactor the test in another way.\n\n### Verbose Logs\n\n_No response_"},{"Id":"22969669103","Type":"IssuesEvent","CreatedAt":"2022-07-20T00:59:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11976","RelatedDescription":"Opened issue \"Error messages such as NU1605 or NU1109 do not provide the target graph on the commandline, making it difficult to figure out the offending graph\" (#11976) at NuGet/Home","RelatedBody":"This problem does not exist in VS.\r\nExample:\r\n\r\n```console\r\n\"C:\\Code\\Temp\\CPM\\CPM.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Code\\Temp\\CPM\\Lib1\\Lib1.csproj : error NU1605: Detected package downgrade: Newtonsoft.Json from 13.0.1 to 9.0.1. R\r\neference the package directly from the project to select a different version.  [C:\\Code\\Temp\\CPM\\CPM.sln]\r\nC:\\Code\\Temp\\CPM\\Lib1\\Lib1.csproj : error NU1605:  Lib1 -> NuGet.Packaging 6.2.0 -> Newtonsoft.Json (>= 13.0.1)  [C:\\Co\r\nde\\Temp\\CPM\\CPM.sln]\r\nC:\\Code\\Temp\\CPM\\Lib1\\Lib1.csproj : error NU1605:  Lib1 -> Newtonsoft.Json (>= 9.0.1) [C:\\Code\\Temp\\CPM\\CPM.sln]\r\n\r\n```\r\n\r\ncc @erinlah-ms"},{"Id":"22969442566","Type":"IssuesEvent","CreatedAt":"2022-07-20T00:36:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4071","RelatedDescription":"Closed issue \"Package Search should limit results to compatible packages for target project(s)\" (#4071) at NuGet/Home","RelatedBody":"Usability of NuGet inside of VS would be much improved if we could filter search results based on compatibility for the target project(s).\r\n\r\n[Searched for an existing issue, but couldn't find. Will dupe others to this.]"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"22334696634","Type":"IssuesEvent","CreatedAt":"2022-06-14T17:23:29","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2022-30184 | .NET Information Disclosure Vulnerability\" (#62) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2022-30184 | .NET Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0 and .NET Core 3.1, NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0) where a nuget.org credential could be leaked.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/nuget/home/issues. (TBD)\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.0.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.11.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.9.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.7.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 4.9.4 version or earlier.\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET 6.0 application running on .NET 6.0.5 or earlier.\r\n- Any .NET 3.1 application running on .NET Core 3.1.25 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet.exe, NuGet package, or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version 4.9.5, 5.7.2, 5.9.2, 5.11.2, 6.0.2, 6.2.1). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nIf you're using NuGet.exe 6.2.0 or lower, you should download and install 6.2.1 from https://dist.nuget.org/win-x86-commandline/v6.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 6.0.1 or lower, you should download and install 6.0.2 from https://dist.nuget.org/win-x86-commandline/v6.0.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.11.1 or lower, you should download and install 5.11.2 from https://dist.nuget.org/win-x86-commandline/v5.11.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.9.1 or lower, you should download and install 5.9.2 from https://dist.nuget.org/win-x86-commandline/v5.9.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.7.1 or lower, you should download and install 5.7.2 from https://dist.nuget.org/win-x86-commandline/v5.7.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.2.0 or lower, you should download and install 5.2.1 from https://dist.nuget.org/win-x86-commandline/v5.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 4.9.4 or lower, you should download and install 4.9.5 from https://dist.nuget.org/win-x86-commandline/v4.9.5/nuget.exe.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nIf you're using .NET Core 6.0, you should download and install Runtime 6.0.6 or SDK 6.0.106 (for Visual Studio 2022 v17.0) or SDK 6.0.301 (for Visual Studio 2022 v17.2) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nIf you're using .NET Core 3.1, you should download and install Runtime 3.1.26 or SDK 3.1.420 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET 5 or .NET 6.0, please email details to [secure@microsoft.com](secure@microsoft.com). Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at [https://github.com/NuGet/NuGet.Client](https://github.com/NuGet/NuGet.Client). The [Announcements repo](https://github.com/NuGet/Announcements/issues) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2022-30184](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30184)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 14, 2022): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2022-06-14_\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null},{"Id":"1514312671931346950","CreatedAt":"2022-04-13T18:40:50+00:00","UserScreenname":"nuget","Text":"📦Introducing Central Package Management📦\n\n📥 Manage dependencies in a central location.\n📌 Transitive package version… https://t.co/koNbWTt5m2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":247,"FavoriteCount":75,"RawContent":null},{"Id":"1511771370253864962","CreatedAt":"2022-04-06T18:22:36+00:00","UserScreenname":"nuget","Text":"Hi friends,\n\nTwo fun proposals this week!\n\nPack ProjectReferences - https://t.co/Mvu8bTaq5D 📦\n\nIssue Triage Policy… https://t.co/dTbIa9McB2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":21,"RawContent":null},{"Id":"1493700008000073731","CreatedAt":"2022-02-15T21:33:28+00:00","UserScreenname":"nuget","Text":"📦Introducing Compatible Packages 📦\n\n🖼 New Frameworks Tab\n😎 Target Framework Badges\n🧩 Computed Compatibility Table\n🛠… https://t.co/qDUkqayBjC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":171,"FavoriteCount":43,"RawContent":null},{"Id":"1488563020074737670","CreatedAt":"2022-02-01T17:20:54+00:00","UserScreenname":"nuget","Text":"NuGet is celebrating 20 years of @dotnet with over 290,000 unique packages and 160 billion downloads to date! Tune… https://t.co/kCkBuvp3OW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2022-07-23T03:30:37.2711698Z","RunDurationInMilliseconds":1494}