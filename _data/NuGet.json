{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42952532488","Type":"PullRequestEvent","CreatedAt":"2024-10-17T16:13:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10229","RelatedDescription":"Merged pull request \"Suppress warning on CS4014\" (#10229) at NuGet/NuGetGallery","RelatedBody":"These are fire and forget tasks performed during app shutdown.\r\n\r\nThese errors appear in the IDE due to our .editorconfig settings, and can be suppressed. \r\n\r\nThis is a little clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42948883200","Type":"PullRequestEvent","CreatedAt":"2024-10-17T14:37:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10229","RelatedDescription":"Opened pull request \"Suppress warning on CS4014\" (#10229) at NuGet/NuGetGallery","RelatedBody":"These are fire and forget tasks performed during app shutdown.\r\n\r\nThese errors appear in the IDE due to our .editorconfig settings, and can be suppressed. \r\n\r\nThis is a little clean-up I found while working on https://github.com/NuGet/NuGetGallery/issues/10212."},{"Id":"42943239925","Type":"PullRequestEvent","CreatedAt":"2024-10-17T12:15:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10226","RelatedDescription":"Merged pull request \"Update package dependencies to 8.x and improve shims failed load\" (#10226) at NuGet/NuGetGallery","RelatedBody":"This takes a feature branch from @agr and adds a couple more fixes on top.\r\n\r\nSummary of changes\r\n- Bring existing Microsoft.* dependencies up to 8.x\r\n   - I need this for the https://github.com/NuGet/NuGetGallery/issues/10212 when I pull in new Identity libraries\r\n- Fix binding redirects in CDNRedirect (this app is currently broken)\r\n- Fix binding redirects in NuGetGallery, needed due to package updates\r\n- Bring test fixes for logging package update (thanks @agr)\r\n- Improve error logging when our shims layer fails to load (the Loader exceptions show Fusion logs for the failed load, these show up in the error logs section in App Service Kudu).\r\n\r\nThis change needs to be carried to our shims also."},{"Id":"42928097993","Type":"PullRequestEvent","CreatedAt":"2024-10-17T03:21:23","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10228","RelatedDescription":"Opened pull request \"[Storage Migration] V3 jobs\" (#10228) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"42921388597","Type":"PullRequestEvent","CreatedAt":"2024-10-16T21:08:39","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10227","RelatedDescription":"Merged pull request \"Order of operations update for `UploadAsync`\" (#10227) at NuGet/NuGetGallery","RelatedBody":"Can't update headers for a blob that haven't been uploaded yet. This change fixes the ProcessSignature job."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42938984499","Type":"IssuesEvent","CreatedAt":"2024-10-17T10:09:24","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13863","RelatedDescription":"Opened issue \"[Bug Bash] There is a message “not available in this source” and incorrect package icon for the recommended package “RestSharp” in “Brower” tab of the non-SDK project-level PM UI\" (#13863) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.26\n\n### Worked before?\n\nIt is a regression since it doesn't repro on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 and D17.11.5\\35327.3 with implicit NuGet Client 6.11.1.2. \n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\n1. The repro rate is 100%.  \r\n2. This issue doesn’t repro when searching the package in the search box as below: \r\n![1017-1](https://github.com/user-attachments/assets/e2e0433c-fa9f-477c-b65f-f9f2117a6aff)\r\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET framework) project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI and select “nuget.org” in the “Package source” dropdown list.    \r\n\r\n3. Switch to “Brower” tab and observe the recommended package “RestSharp” in packages list. \r\n#### Expected:    \r\n\r\nThere is no message “not available in this source” under the recommended package “RestSharp” and the package icon should be correct. \r\n\r\n#### Actual:    \r\n\r\nThere is a message “not available in this source” under the recommended package “RestSharp” and the package icon is incorrect as below screenshot:  \r\n![1017](https://github.com/user-attachments/assets/1f5f8f3f-87b7-4075-a3e2-5ca26aad3132)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42931810165","Type":"IssuesEvent","CreatedAt":"2024-10-17T06:36:27","Actor":"AlexBaratheon","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13862","RelatedDescription":"Opened issue \"Nuget restore and Visual Studio build produce different project.assets.json files with C++/CLI transitive references\" (#13862) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.9.1.3\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\n\r\n [ProjectAssetJsonTests.zip](https://github.com/user-attachments/files/17407136/ProjectAssetJsonTests.zip)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42931585169","Type":"IssuesEvent","CreatedAt":"2024-10-17T06:27:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13834","RelatedDescription":"Closed issue \"NuGet Fails in Containers When HOME Is Not Set\" (#13834) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK:  Version:           9.0.100-rc.2.24468.2  Commit:            c204043de1  Workload version:  9.0.100-manifests.47de87af  MSBuild version:   17.12.0-preview-24467-02+988196b1c\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Problem\r\n\r\nWhen running NuGet commands inside a container environment where the HOME environment variable is not set, NuGet fails with the following error, while other .NET SDK commands work as expected. The failure is caused by NuGet not having a fallback to SpecialFolder.UserProfile, unlike other SDK commands that already handle this scenario.\r\n\r\n#### Proposed Solution\r\n\r\nNuGet already uses the UserProfile fallback for the full .NET Framework. This issue proposes extending the same fallback logic for CoreCLR to align the behavior of NuGet commands with other SDK tools.\r\n\r\nThe proposed PR adds the fallback behavior to NuGetEnvironment.GetFolderPath, allowing it to retrieve the correct user profile path even when HOME is not set, preventing failures in containerized environments.\r\nExample of Working Behavior (from .NET SDK):\r\n\r\nOther SDK commands use the following fallback to handle the absence of HOME:\r\n\r\n    [Link to SDK Code Reference](https://github.com/dotnet/sdk/blob/c3a8f72/src/Common/CliFolderPathCalculatorCore.cs#L38-L38)\r\n\r\n#### Why This Change Is Important\r\n\r\n    Consistency: Aligns the behavior of NuGet with other SDK tools.\r\n    Usability: Improves the developer experience when working inside containerized environments, avoiding the need to manually set environment variables.\n\n### Verbose Logs\n\n```shell\nThe \"WarnForInvalidProjectsTask\" task failed unexpectedly.\r\n  System.InvalidOperationException: Required environment variable 'HOME' is not set. Try setting 'DOTNET_CLI_HOME' or 'HOME' and running the operation\r\n     at NuGet.Common.NuGetEnvironment.GetValueOrThrowMissingEnvVarsDotnet(Func`1 getValue, String home, String dotnetHome)\r\n     at NuGet.Common.NuGetEnvironment.GetHome()\r\n     at NuGet.Common.NuGetEnvironment.<>c.<.cctor>b__20_0()\r\n     at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n     at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n     at System.Lazy`1.CreateValue()\r\n     at NuGet.Common.NuGetEnvironment.GetFolderPath(SpecialFolder folder)\r\n     at NuGet.Common.NuGetEnvironment.GetFolderPath(NuGetFolderPath folder)\r\n     at NuGet.Common.PathUtility.CheckIfFileSystemIsCaseInsensitive()\r\n     at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n     at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n     at System.Lazy`1.CreateValue()\r\n     at NuGet.Common.PathUtility.get_IsFileSystemCaseInsensitive()\r\n     at NuGet.Common.PathUtility.GetStringComparerBasedOnOS()\r\n     at NuGet.Build.Tasks.WarnForInvalidProjectsTask.Execute()\r\n     at Microsoft.Build.BackEnd.TaskExecutionHost.Execute()\r\n     at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n```\n```\n"},{"Id":"42928450296","Type":"IssuesEvent","CreatedAt":"2024-10-17T03:43:15","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13860","RelatedDescription":"Opened issue \"Make ExcludeAssets visible in Audit and nuget why\" (#13860) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nThere's a common pattern to reference a package as `ExcludeAssets=\"Runtime\"` to compile against a package but not use the runtime assembly from the package.  The runtime assembly would be deployed by someone else in this case. \r\n\r\nIn these cases it might be beneficial to surface this in nuget audit or nuget why.  Many CVEs are in the runtime assembly of the package, so surfacing the information that the runtime assets are not used can be helpful when making a suppression decision.\r\n\r\nI don't think NuGet can automatically ignore these cases since some vulnerabilities are in build assets, or some customers may not even wish to tolerate any  vulnerable package downloaded at all.  Still I think it's valuable to surface this information to help developers better understand their actual exposure to a CVE.\n\n### Additional Context and Details\n\nWe may want to design a first class experience around plugins.  Related to that which @JonDouglas suggests in https://github.com/NuGet/Home/issues/13821.  Even if we do that I don't think it precludes also raising visibility of ExcludeAssets"},{"Id":"42919835269","Type":"IssuesEvent","CreatedAt":"2024-10-16T20:10:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13857","RelatedDescription":"Closed issue \"System.Text.Json 8.0.4 has security vulnerability\" (#13857) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nlatest\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nNuGet.Client references System.Text.Json 8.0.4: \r\n https://github.com/NuGet/NuGet.Client/blob/fd6880078a435aa63fb1290e9bc58fb8dea6a4fd/Directory.Packages.props#L8\r\n\r\nThis version has a security vulnerability:  https://github.com/advisories/GHSA-8g4q-xg66-9fp4\n\n### Verbose Logs\n\n_No response_"},{"Id":"42913270471","Type":"IssuesEvent","CreatedAt":"2024-10-16T16:33:53","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13719","RelatedDescription":"Reopened issue \"Version in GlobalPackageReference is resolved incorrectly for legacy-style csproj projects\" (#13719) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n6.11.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Target the legacy csproj to .Net Framework 4.7.2 with `<TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>`\r\n2. Specify in Directory.Packages.props:\r\n   ```\r\n    <ItemGroup>\r\n      <GlobalPackageReference Include=\"IDisposableAnalyzers\" Version=\"3.4.15\" />\r\n      <GlobalPackageReference Include=\"Microservice.CodeAnalyzers\" version=\"1.1.23\" />\r\n      <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"8.0.0\" />\r\n      <GlobalPackageReference Include=\"Microsoft.VisualStudio.SlnGen\" Version=\"4.2.5\" />\r\n      <GlobalPackageReference Include=\"Microsoft.VisualStudio.Threading.Analyzers\" Version=\"17.0.64\" />\r\n      <GlobalPackageReference Include=\"Microsoft.Build.Telemetry\" Version=\"1.0.17\" />\r\n    </ItemGroup>\r\n   ```\r\n3. Manage NuGet packages for the legacy csproj, you will see all of 6 packages resolved into wrong versions: IDisposableAnalyzers > 1.0.0; Microservice.CodeAnalyzers > 1.1.4; Microsoft.CodeAnalysis.NetAnalyzers > 5.0.0; Microsoft.VisualStudio.SlnGen > 3.0.16; Microsoft.VisualStudio.Threading.Analyzers > 15.0.240; Microsoft.Build.Telemetry > 1.0.0\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42893816235","Type":"IssuesEvent","CreatedAt":"2024-10-16T07:56:40","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6222","RelatedDescription":"Closed issue \"PackageManagement UI depends on VS, hindering component reuse\" (#6222) at NuGet/Home","RelatedBody":"The current PackageManagement UI has dependencies on Visual Studio. This makes it nearly impossible to reuse the WPF controls in other apps that may want to interact with NuGet in a consistent way. For example, NuGet Package Explorer needs a \"Package Chooser\" dialog. This should be an ideal reusable widget where the output is the selected package. Possibly downloaded and referenced from the local cache as well.\r\n\r\nI would like to see the dependency order flipped so that the Visual Studio-specific components reference the non-VS components as this would enable more reuse."},{"Id":"42893814815","Type":"IssuesEvent","CreatedAt":"2024-10-16T07:56:37","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13719","RelatedDescription":"Closed issue \"Version in GlobalPackageReference is resolved incorrectly for legacy-style csproj projects\" (#13719) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n6.11.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Target the legacy csproj to .Net Framework 4.7.2 with `<TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>`\r\n2. Specify in Directory.Packages.props:\r\n   ```\r\n    <ItemGroup>\r\n      <GlobalPackageReference Include=\"IDisposableAnalyzers\" Version=\"3.4.15\" />\r\n      <GlobalPackageReference Include=\"Microservice.CodeAnalyzers\" version=\"1.1.23\" />\r\n      <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"8.0.0\" />\r\n      <GlobalPackageReference Include=\"Microsoft.VisualStudio.SlnGen\" Version=\"4.2.5\" />\r\n      <GlobalPackageReference Include=\"Microsoft.VisualStudio.Threading.Analyzers\" Version=\"17.0.64\" />\r\n      <GlobalPackageReference Include=\"Microsoft.Build.Telemetry\" Version=\"1.0.17\" />\r\n    </ItemGroup>\r\n   ```\r\n3. Manage NuGet packages for the legacy csproj, you will see all of 6 packages resolved into wrong versions: IDisposableAnalyzers > 1.0.0; Microservice.CodeAnalyzers > 1.1.4; Microsoft.CodeAnalysis.NetAnalyzers > 5.0.0; Microsoft.VisualStudio.SlnGen > 3.0.16; Microsoft.VisualStudio.Threading.Analyzers > 15.0.240; Microsoft.Build.Telemetry > 1.0.0\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42884266738","Type":"IssuesEvent","CreatedAt":"2024-10-16T00:54:48","Actor":"MatthieuMEZIL","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13859","RelatedDescription":"Opened issue \"PackageReference GeneratePathProperty does not work with IsPackable=\"true\" on multi-targeted project\" (#13859) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\n.NET 8.0.203, msbuild 17.11.9.46202, nuget 6.10.1\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOutput project does not support GeneratePathProperty causing GenerateNuspec target to fail.\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n \r\n  <PropertyGroup>\r\n    <TargetFrameworks>net8.0;net472</TargetFrameworks>\r\n    <IsPackable>true</IsPackable>\r\n    <Authors>Name</Authors>\r\n    <Company>Company</Company>\r\n  </PropertyGroup>\r\n \r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"8.0.5\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\" />\r\n  </ItemGroup>\r\n \r\n  <ItemGroup>\r\n    <Content Include=\"$(PkgSystem_Text_Json)\\lib\\netstandard2.0\\System.Text.Json.dll\" />\r\n  </ItemGroup>\r\n \r\n  <Target Name=\"Foo\"\r\n    AfterTargets=\"Build\"\r\n    Condition=\" '$(IsCrossTargetingBuild)' == 'true' \"\r\n    DependsOnTargets=\"GenerateNuspec\">\r\n  </Target>\r\n \r\n</Project>\r\n```\r\n \r\n It fails because PkgSystem_Text_Json is empty for the output project. \r\n See NuGetBug.csproj.nuget.g.props:\r\n ```\r\n <PropertyGroup Condition=\" '$(TargetFramework)' == 'net472' AND '$(ExcludeRestorePackageImports)' != 'true' \">\r\n  <PkgSystem_Text_Json Condition=\" '$(PkgSystem_Text_Json)' == '' \">D:\\NuGet\\system.text.json\\8.0.5</PkgSystem_Text_Json>\r\n</PropertyGroup>\r\n<PropertyGroup Condition=\" '$(TargetFramework)' == 'net8.0' AND '$(ExcludeRestorePackageImports)' != 'true' \">\r\n  <PkgSystem_Text_Json Condition=\" '$(PkgSystem_Text_Json)' == '' \">D:\\NuGet\\system.text.json\\8.0.5</PkgSystem_Text_Json>\r\n</PropertyGroup>\r\n```\r\n\r\nI don't understand why PkgSystem_Text_Json is only defined when TargetFramework is set, and this is causing GenerateNuspec target to fail. \n\n### Verbose Logs\n\n```shell\nSystem.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\lib\\netstandard2.0'.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileSystemEnumerableIterator`1.CommonInit()\r\n   at System.IO.FileSystemEnumerableIterator`1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler`1 resultHandler, Boolean checkHost)\r\n   at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption)\r\n   at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includeEmptyDirectories, String& normalizedBasePath)\r\n   at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String targetPath, Boolean includeEmptyDirectories)\r\n   at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude)\r\n   at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files)\r\n   at NuGet.Commands.MSBuildProjectFactory.CreateBuilder(String basePath, NuGetVersion version, String suffix, Boolean buildIfNeeded, PackageBuilder builder)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromProjectFile(String path)\r\n   at NuGet.Build.Tasks.Pack.PackTask.Execute()\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-18T03:30:22.533841Z","RunDurationInMilliseconds":873}