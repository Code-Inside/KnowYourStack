{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"36358778018","Type":"IssuesEvent","CreatedAt":"2024-03-08T02:27:44","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9816","RelatedDescription":"Closed issue \"[Bug Bash] Frameworks tooltip is not bootstrap\" (#9816) at NuGet/NuGetGallery","RelatedBody":"## Problem\r\n\r\nWe're using bootstrap tooltips everywhere else, but the tooltip next to the 'Frameworks' header in the Filter Panel is browser-native.\r\n\r\n## Solution\r\n\r\nMake the Frameworks header tooltip use bootstrap too, i.e. like this one: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/b606ba6c-76dc-4666-a01d-8301a283542e)\r\n\r\nThe Frameworks tooltip also acts as a link, so the TFM badges may be a better example:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/62b6ea67-6602-48d6-83c0-b6519da6fe27)\r\n\r\n"},{"Id":"36347243002","Type":"PullRequestEvent","CreatedAt":"2024-03-07T18:02:01","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9847","RelatedDescription":"Merged pull request \"Fixes a11y bug on search page tooltip\" (#9847) at NuGet/NuGetGallery","RelatedBody":"Some of my previous changes introduced a new a11y bug. The 'Frameworks' filter tooltip was missing an aria-label, which I've now fixed.\r\n\r\nI also took the chance to change the aria-label string to a `NuGetGallery.Strings` resource so that we don't have to change the text in multiple places the next time we need changes.\r\n\r\nThis clears a11y Fast Pass now. There's no visible UI changes.\r\n\r\nNOTE: The changes on lines 77-81 are just whitespace changes."},{"Id":"36327140873","Type":"PullRequestEvent","CreatedAt":"2024-03-07T08:21:20","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9849","RelatedDescription":"Merged pull request \"[HotFix]Fix rejection of all safety reasons.\" (#9849) at NuGet/NuGetGallery","RelatedBody":"Fix a bug introduced in https://github.com/NuGet/NuGetGallery/pull/9727 where we were rejecting all safety reasons reported instead of a small subset of them."},{"Id":"36320317941","Type":"PullRequestEvent","CreatedAt":"2024-03-07T02:43:13","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9849","RelatedDescription":"Opened pull request \"[HotFix]Fix rejection of all safety reasons.\" (#9849) at NuGet/NuGetGallery","RelatedBody":"Fix a bug introduced in https://github.com/NuGet/NuGetGallery/pull/9727 where we were rejecting all safety reasons reported instead of a small subset of them."},{"Id":"36294517021","Type":"IssuesEvent","CreatedAt":"2024-03-06T11:09:29","Actor":"v-manil2","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9848","RelatedDescription":"Opened issue \"NuGet package size limit\" (#9848) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nHello,  \r\n\r\nIs there a way to increase the package size limit? \r\n\r\nWe have a package including native libs and support for multiple platforms and archs, but we started getting over the 250MB limit for the next release we’re preparing and NuGet is rejecting the push. \r\n\r\nIs there a way to get an exception?\n\n### The Elevator Pitch\n\nIt would be good if the package size limit is increased.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"36284276255","Type":"PullRequestEvent","CreatedAt":"2024-03-06T04:47:10","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9847","RelatedDescription":"Opened pull request \"Fixes a11y bug on search page tooltip\" (#9847) at NuGet/NuGetGallery","RelatedBody":"Some of my previous changes introduced a new a11y bug. I've fixed that by adding an aria-label.\r\n\r\nI also took the chance to change the string to a `NuGetGallery.Strings` resource so that we don't have to change the text in multiple places the next time we need changes.\r\n\r\nThis clears a11y Fast Pass now. There's no visible UI changes.\r\n\r\nNOTE: The changes on lines 77-81 are just whitespace changes."},{"Id":"36283009159","Type":"IssuesEvent","CreatedAt":"2024-03-06T03:24:11","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9846","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Search parameter `tfms=net` lights up the .NET framework generation checkbox\" (#9846) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen you search on nuget.org using the `tfms=net` parameter, the `.NET` framework checkbox is shown as selected. This should not be selected. \r\n\r\nThe `.NET` framework generation checkbox should only be selected if `frameworks=net` is in the URL. `tfms=net` refers to the version-less '.NET Framework' (not '.NET') TFM, not a framework generation.\n\n### Repro Steps\n\n1. Go to https://www.nuget.org/packages?q=&tfms=net\r\n2. The `.NET` framework generation checkbox is selected in the filter panel, even though there is no `frameworks=net` parameter.\n\n### Expected Behavior\n\nNone of the checkboxes should be selected in this case.\r\n\r\n`tfms=net` refers to the version-less .NET Framework **TFM** (shortname = 'net'), not the .NET 5+ **framework generation**. The js code in https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery/Scripts/gallery/page-list-packages.js#L177 does not distinguish between `frameworks=` and `tfms=` parameters properly, and needs to be fixed.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"36351394088","Type":"IssuesEvent","CreatedAt":"2024-03-07T20:25:38","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13297","RelatedDescription":"Closed issue \"[Dotnet Package Search] The package sorting from “dotnet package search” is different with PM UI\" (#13297) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 8.0.300-preview.24154.12\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps: \r\n1. [Patch](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Dotnet%20Package%20Search%20Test.one%7Cf765a470-67cc-4d36-839c-01ce4dda10d0%2FPre-testing%20Steps%7Cc0dfdc5e-b3f9-4451-8fa6-b461f70965aa%2F%29&wdorigin=703) the latest .NET SDK 8.0.3xx version with NuGet Client Dev latest [6.10.0.72](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9193043&view=artifacts&pathAsName=false&type=publishedArtifacts) nupkgs. \r\n2. Open the PowerShell command prompt and go to the “PatchedSDK” folder.\r\n3. Enter the command `dotnet package search <search argument> --format table` (for example: ` .\\dotnet package search Newtonsoft.Json --format table`) and press Enter.\r\n4. Open the NuGet package manager UI in VS and search for the same search argument.\r\n5. Compare the generated output with the result by performing the same search using NuGet PM UI on Visual Studio. \r\n#### Expected Result: \r\n- The search phrase provided as the argument should be successfully searched for. \r\n- The generated output should be same as that of a search in NuGet PM UI-Browse tab on Visual Studio. \r\n#### Actual Result:\r\nThe package sorting from “dotnet package search” is different with PM UI as the screenshot below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/4649fa3e-f2c4-44db-819e-1d6915fa8d87)\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It’s not a regression since it is a new feature."},{"Id":"36350780868","Type":"IssuesEvent","CreatedAt":"2024-03-07T20:03:04","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13298","RelatedDescription":"Closed issue \"[Dotnet Package Search] The column “Owners” should not be empty when running the command “dotnet package search <Package Name> --exact-match”\" (#13298) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 8.0.300-preview.24154.12\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps: \r\n1. [Patch](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Dotnet%20Package%20Search%20Test.one%7Cf765a470-67cc-4d36-839c-01ce4dda10d0%2FPre-testing%20Steps%7Cc0dfdc5e-b3f9-4451-8fa6-b461f70965aa%2F%29&wdorigin=703) the latest .NET SDK 8.0.3xx version with NuGet Client Dev latest [6.10.0.72](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9193043&view=artifacts&pathAsName=false&type=publishedArtifacts) nupkgs. \r\n2. Open the PowerShell command prompt and go to the “PatchedSDK” folder.\r\n3. Enter the command `dotnet package search <Package Name> --exact-match` (for example: `.\\dotnet package search Newtonsoft.Json --exact-match`) and press Enter.\r\n4. Open the NuGet package manager UI in VS and search for the same package name.\r\n5. Compare the generated output with the result by performing the same search using NuGet PM UI on Visual Studio. \r\n#### Expected Result: \r\n- All versions of the specified package should be listed as a table without empty columns.\r\n- The generated output should be same as that of a search in NuGet PM UI-Browse tab on Visual Studio. \r\n#### Actual Result:\r\nThe column “Owners” is empty as the screenshot below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/15fb31c3-ffb4-4ecb-a141-bd9bd5401f33)\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It’s not a regression since it is a new feature."},{"Id":"36350569068","Type":"IssuesEvent","CreatedAt":"2024-03-07T19:55:37","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13299","RelatedDescription":"Closed issue \"[Dotnet Package Search] The search result is hard to read when searching with detailed verbosity\" (#13299) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK Version: 8.0.300-preview.24154.12\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps: \r\n1. [Patch](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Dotnet%20Package%20Search%20Test.one%7Cf765a470-67cc-4d36-839c-01ce4dda10d0%2FPre-testing%20Steps%7Cc0dfdc5e-b3f9-4451-8fa6-b461f70965aa%2F%29&wdorigin=703) the latest .NET SDK 8.0.3xx version with NuGet Client Dev latest [6.10.0.72](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9193043&view=artifacts&pathAsName=false&type=publishedArtifacts) nupkgs. \r\n2. Open the PowerShell command prompt and go to the “PatchedSDK” folder.\r\n3. Enter the command `dotnet package search <search argument> --verbosity detailed `(for example: .`\\dotnet package search log4net --verbosity detailed`) and press Enter.\r\n4. Open the NuGet package manager UI in VS and search for the same search argument.\r\n5. Compare the generated output with the result by performing the same search using NuGet PM UI on Visual Studio. \r\n#### Expected Result: \r\n-The output will be highly detailed, and it should be easy to read. For each package, it will display the following metadata:\r\n  Package ID\r\n  Latest Version\r\n  Owners\r\n  Total Downloads\r\n  Vulnerable\r\n  Deprecation\r\n  Project URL\r\n  Description\r\n- The generated output should be same as that of a search in NuGet PM UI-Browse tab on Visual Studio.\r\n#### Actual Result:\r\nThe search result is hard to read as the screenshot below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/2c95557d-3eda-414d-b652-b581d9a4c5aa)\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It’s not a regression since it is a new feature."},{"Id":"36350541179","Type":"IssuesEvent","CreatedAt":"2024-03-07T19:54:39","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13162","RelatedDescription":"Reopened issue \"dotnet package search --verbosity detailed output table too wide\" (#13162) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nthe search command outputs a table that is as wide as its content\n\n### Desired Behavior\n\ntable format should wrap instead of create a table that's the width of the result. \n\n### Additional Context\n\n_No response_"},{"Id":"36348790628","Type":"IssuesEvent","CreatedAt":"2024-03-07T18:53:45","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12745","RelatedDescription":"Closed issue \"SourceLink configured incorrectly for NuGet.*.dll binaries shipping with VS\" (#12745) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.6\n\n### Worked before?\n\nnot a regression\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFor Visual Studio 17.6.5, the NuGet binaries shipping in `C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet` aren't working well with SourceLink.\r\n\r\nFor example, if you consider NuGet.Commands.dll, the pdb Guid is `5c317681-5168-4e3a-983e-6e469ba96795`, and the Pdb path is `D:\\a\\_work\\1\\s\\artifacts\\NuGet.Commands\\obj\\release\\net472\\NuGet.Commands.pdb`. \r\n\r\nI am able to download the pdb from symweb NuGet.Commands.pdb/5C31768151684E3A983E6E469BA967951/file.ptr, which redirects to `...\\D1568DA8B119BD3DBCCFD3AA34A882C37A72E6ADC9F8005F65C48CD8E41E00\\nuget.commands.pdb` (ask me for the full path on Teams)\r\n\r\nThe pdb is legacy PDB, not a portable PDB. If you open the .pdb in notepad and search for \"github\", you will only find this piece of Json:\r\n```json\r\n{\"documents\":{\"D:\\\\a\\\\_work\\\\1\\\\s\\\\submodules\\\\NuGet.Build.Localization\\\\*\":\"https://raw.githubusercontent.com/NuGet/NuGet.Build.Localization/239d0ae2156f12ffdba272fcb1ea3d2fb9da4e81/*\"}}\r\n```\r\n\r\nOther document paths are stored in a format such as `D:\\a\\_work\\1\\s\\src\\NuGet.Core\\NuGet.Commands\\SignCommand\\ISignCommandRunner.cs` which can't be used to download the sources from GitHub via SourceLink.\r\n\r\nTo be able to properly debug into NuGet binaries shipping with VS it is important to have SourceLink configured properly, as well as ideally consider portable Pdbs.\n\n### Verbose Logs\n\n_No response_"},{"Id":"36346483976","Type":"IssuesEvent","CreatedAt":"2024-03-07T17:36:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13309","RelatedDescription":"Opened issue \"Roll-out new breaking change process for SDK tools, respect SdkAnalysisLevel\" (#13309) at NuGet/Home","RelatedBody":""},{"Id":"36336366905","Type":"IssuesEvent","CreatedAt":"2024-03-07T12:58:43","Actor":"josundt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13308","RelatedDescription":"Opened issue \"dotnet list <SOLUTION> package --vulnerable/--outdated/--deprecated  fails with Azure Artifacts Credential Provider \" (#13308) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 8.0.200 (NuGet 6.9.1.3)\n\n### Worked before?\n\nDon't know\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nGiven a repository with the following .NET solution:\r\n```\r\n┌─src\r\n├─┬─MyProject1\r\n│ └───MyProject1.csproj\r\n├─┬─MyProject2\r\n│ └───MyProject2.csproj\r\n├─┬─MyProject3\r\n│ └───MyProject3.csproj\r\n├───MySolution.sln\r\n├───nuget.config\r\n\r\n```\r\nAll the 3 projects have NuGet `PackageReference`s from two different NuGet feeds:\r\n* The public NuGet feed (https://api.nuget.org/v3/index.json)\r\n* Our Azure DevOps Artifacts feed (https://pkgs.dev.azure.com/[myorg]/_packaging/[myfeed]/nuget/v3/index.json\r\n\r\nBoth of these feeds are listed in the **nuget.config** file.\r\n\r\nI have installed the [Azure Artifacts Credential Provider](https://github.com/microsoft/artifacts-credprovider) on the current device (tested on both Windows and Linux).\r\n\r\n**I have _already_ successfully authenticated and acquired a token for the Azure DevOps feed** by using the `--interactive` option with some dotnet command; f.ex. by having run `dotnet restore --interactive` once from the `src` folder.\r\n```bash\r\n~/repos/myrepo/src> dotnet restore --interactive --no-cache\r\n  Determining projects to restore...\r\n      [CredentialProvider]DeviceFlow: https://pkgs.dev.azure.com/[myorg]/_packaging/[myfeed]/nuget/v3/index.json\r\n      [CredentialProvider]ATTENTION: User interaction required.\r\n\r\n      **********************************************************************\r\n\r\n      To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code ****** to authenticate.\r\n\r\n      **********************************************************************\r\n\r\n  Restored /home/me/repos/myrepo/MyProject1/MyProject1.csproj (in 36,52 sec).\r\n  Restored /home/me/repos/myrepo/MyProject2/MyProject2.csproj (in 36,6 sec).\r\n  Restored /home/me/repos/myrepo/MyProject3/MyProject3.csproj (in 36,64 sec).\r\n```\r\n\r\nI can now successfully run `dotnet restore` without the `--interactive` option each time, since the acquired token is still valid and has not expired, and I won't need to include the `--interactive` option again before token has expired:\r\n```bash\r\n~/repos/myrepo/src> dotnet restore\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\nWhen changing `cwd` to one of the project directories, f.ex. src/MyProject1, I can now successfully run the `dotnet list package --vulnerable` command successfully; authentication to the Azure DevOps feed works fine:\r\n```bash\r\n~/repos/myrepo/src/MyProject1> dotnet list package --vulnerable\r\n\r\nThe following sources were used:\r\n   https://api.nuget.org/v3/index.json\r\n   https://pkgs.dev.azure.com/[myorg]/_packaging/[myfeed]/nuget/v3/index.json\r\n\r\nThe given project `MyProject1` has no vulnerable packages given the current sources.\r\n```\r\n\r\nBut if I try to do the same from the solution folder (src):\r\n```bash\r\n~/repos/myrepo/src> dotnet list package --vulnerable\r\n\r\nwarn : The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`\r\nerror: Response status code does not indicate success: 401 (Unauthorized).\r\n\r\n\r\nUsage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n  ...\r\n```\r\n\r\nIt looks like the solution file in the current folder is read but now authentication to the Azure DevOps feed fails.\r\nIf I explicitly pass the SOLUTION file path as argument the same thing happens.\r\n\r\nPlease figure out why authentication fails when using solution files but works when only using project files.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"36332730119","Type":"IssuesEvent","CreatedAt":"2024-03-07T11:06:36","Actor":"josundt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13307","RelatedDescription":"Opened issue \"dotnet list package: fails when using <PROJECT | SOLUTION> argument\" (#13307) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 8.0.200 (NuGet 6.9.1.3)\n\n### Worked before?\n\nDon't know\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWith the `dotnet list` command; `<PROJECT | SOLUTION>` (project or solution file path) is an optional argument meant to be supported:\r\n\r\n```bash\r\n> dotnet list -h\r\n\r\nDescription:\r\n  List references or packages of a .NET project.\r\n\r\nUsage:\r\n  dotnet list [<PROJECT | SOLUTION>] [command] [options]\r\n\r\nArguments:\r\n  <PROJECT | SOLUTION>  The project or solution file to operate on. If a file is not specified, the command will search the current directory for one. [default: /home/me/repos/myrepo/src]\r\n\r\nOptions:\r\n  -?, -h, --help  Show command line help.\r\n\r\n\r\nCommands:\r\n  package    List all package references of the project or solution.\r\n  reference  List all project-to-project references of the project.\r\n```\r\n\r\nUnfortunately it does not work in latest .NET SDK (8.0.200).\r\n\r\n## Expected behavior scenarios ##\r\nFor the following 4 scenarios, this is the expected behavior for determining which .NET project files to process used by most .NET SDK commands:\r\n\r\n1. Scenario 1: When `<PROJECT | SOLUTION>` argument is a **DIRECTORY** path\r\n    * If **multiple** `SOLUTION` files are found in directory, message _\"Specify which project or solution file to use...\"_ + `error exit code`\r\n    * Else if a **single** `SOLUTION` file is found in directory, use that solution file/all projects referenced in solution file.\r\n    * Else if **multiple** `PROJECT` files are found in directory, message _\"Specify which project or solution file to use...\"_ + `error exit code`\r\n    * Else if a **single** `PROJECT` file is found in directory, use that file.\r\n    \r\n2. Scenario 2: When `<PROJECT | SOLUTION>` argument is **NOT** provided:\r\n    * Same as 1. using `cwd` as directory\r\n\r\n3. Scenario 3: When `<PROJECT | SOLUTION>` argument is a **SOLUTION** file path:\r\n    *  Use the solution file/all projects referenced in solution file.\r\n\r\n4. Scenario 4: When `<PROJECT | SOLUTION>` argument is a **PROJECT** file path:\r\n    * Use the project file.\r\n\r\n## Actual behavior ##\r\n_NB! The actual behavior was tested on both Windows and Linux_\r\n\r\n1. Scenario 1: **Actual behavior does NOT meet expected behavior**:\r\n    ```bash\r\n    > dotnet list src/ package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MySolution.sln/src/nuget.config'.\r\n    error:   Could not find a part of the path '/home/me/repos/myrepo/src/MySolution.sln/src'.\r\n    \r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n    \r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config file and folder path_\r\n\r\n2. Scenario 2: **Actual behavior consistent with expected.**\r\n\r\n3. Scenario 3: **Actual behavior does NOT meet expected behavior**:\r\n    ```bash\r\n    > dotnet list MySolution.sln package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MySolution.sln/nuget.config'.\r\n    error:   The file '/home/me/repos/myrepo/src/MySolution.sln' already exists.\r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n    \r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config path - and also the strange error that the file already exists_\r\n\r\n4. Scenario 4: **Actual behavior consistent if the specified project file is in `cwd`, otherwise not.** \r\n    Example when specifying a project file in a different folder than `cwd`:\r\n    ```bash\r\n    > dotnet list MyProject/MyProject.csproj package\r\n    error: Unexpected failure reading NuGet.Config. Path: '/home/me/repos/myrepo/src/MyProject/MyProject.csproj/nuget.config'.\r\n    error:   The file /home/me/repos/myrepo/src/MyProject/MyProject.csproj' already exists.\r\n    \r\n    \r\n    Usage: NuGet.CommandLine.XPlat.dll package list [arguments] [options]\r\n    \r\n    Arguments:\r\n      <PROJECT | SOLUTION>  A path to a project, solution file or directory.\r\n\r\n    ...\r\n    ```\r\n    _PS! Notice the malformed expected nuget.config path - and also the strange error that the file already exists_\r\n\r\n## Expected NuGet.Config search strategy ##\r\nThe problems decribed above seem to be caused by looking the wrong place for NuGet.Config files.\r\nI therefore also list what I believe to be the expected NuGet config file search strategy for the 4 described scenarios:\r\n\r\n1. Scenario 1 (When  `<PROJECT | SOLUTION>` is a directory):\r\n    - Search the directory and recursively search parent directories until NuGet config file is found.\r\n2. Scenario 1 (When  `<PROJECT | SOLUTION>` not specified):\r\n    - Search `cwd` and recursively search parent directories until NuGet config file is found.\r\n3. Scenario 1 (When  `<PROJECT | SOLUTION>` is a solution file path):\r\n    - Search the directory containing the solution file and recursively search parent directories until NuGet config file is found.\r\n4. Scenario 1 (When  `<PROJECT | SOLUTION>` is a project file path):\r\n    - Search the directory containing the project file and recursively search parent directories until NuGet config file is found.\r\n \n\n### Verbose Logs\n\n_No response_"},{"Id":"36328327971","Type":"IssuesEvent","CreatedAt":"2024-03-07T08:59:00","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13306","RelatedDescription":"Opened issue \"[Bug Bash] The Error List window only displays the vulnerability warning for the first installed vulnerable package \" (#13306) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.10.0.75\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. Create a C# Console App (.NET Framework) project in VS.   \r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n3. On the “Browse” tab, search for a vulnerable package (e.g. “NewtsonSoft.Json” -12.0.3) and install it with “packages.config” format. \r\n4. Right-click the solution in Solution Explorer and click \"Restore NuGet Packages\".\r\n5. Obverse the error list and it contains a NU19003 vulnerability warning for “NewtsonSoft.Json” package.\r\n6. Install another vulnerable package (“log4net” -2.0.9).\r\n7. Right-click the solution in Solution Explorer and click \"Restore NuGet Packages\".\r\n\r\n**Expected:**   \r\nThe Error List window should display vulnerability warnings for all installed vulnerable packages. \r\n\r\n**Actual:**\r\nThe Error List window only displays the vulnerability warning for the first installed vulnerable package as below: \r\n![image](https://github.com/NuGet/Home/assets/149561645/725063a5-b9a5-40d3-86e7-2809f41befa7)\r\n\r\n\r\n**Notes:**     \r\n\r\n1.The repro rate is 100%.   \r\n2.This is not a regression since it is a new feature.     \r\n3.The issue doesn’t repro after closing VS and reopening the solution. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"36328152799","Type":"IssuesEvent","CreatedAt":"2024-03-07T08:53:56","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13305","RelatedDescription":"Opened issue \"[Bug Bash] The vulnerability InfoBar does not display in the Solution Explorer window of “packages.config” project until restoring at the second time\" (#13305) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.10.0.75\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Class Library (.NET Framework 4.8.1) project.   \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n\r\n3. Select the package source: “nuget.org” near the gear button.   \r\n\r\n4. Click the “settings” button (top-right of right panel), check \"Allow format selection on first package install\" in “General” tab and click OK button.  \r\n\r\n5. Go to the \"Browse\" tab and search for a vulnerable package (e.g. \"Newtonsoft.Json\").  \r\n\r\n6. Select a vulnerable package version (e.g. 12.0.1), install the package with “packages.config” format. \r\n\r\n7. Right-click the solution node in Solution Explorer and click \"Restore NuGet Packages\". \r\n\r\n#### Expected:    \r\n\r\nA golden InfoBar and a link “Manage NuGet Packages” will show on the top of the Solution Explorer window. \r\n\r\n#### Actual: \r\n\r\nThe vulnerability InfoBar does not display in the Solution Explorer window of “packages.config” project until restoring at the second time as the record below:  \r\n\r\n![vu](https://github.com/NuGet/Home/assets/84695155/7299fba8-beb7-4ed4-8ed9-f24b75d68a56)\r\n#### Notes:     \r\n\r\n1.The repro rate is 100%.     \r\n2.This is not a regression since it is a new feature.   \n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-03-08T03:30:16.9767542Z","RunDurationInMilliseconds":934}