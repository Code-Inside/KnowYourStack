{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33769804250","Type":"IssuesEvent","CreatedAt":"2023-11-30T21:23:42","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9743","RelatedDescription":"Opened issue \"[Feature]: Show when a NuGet package supports Native AOT\" (#9743) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nIt would be cool to provide some type of metadata associated with a .NET library that supports the Native AOT functionality.\r\n\r\nhttps://devblogs.microsoft.com/dotnet/creating-aot-compatible-libraries/\r\n\r\nWe could show badges and provide filtering experiences for packages that are compatible with this functionality and consumers may want to use in their projects for the benefits they get from the feature.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33769757831","Type":"IssuesEvent","CreatedAt":"2023-11-30T21:22:00","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9386","RelatedDescription":"Closed issue \"Plan for NuGet in 2023\" (#9386) at NuGet/NuGetGallery","RelatedBody":"Plan is detailed in the issue: https://github.com/NuGet/Home/issues/12407"},{"Id":"33765684738","Type":"IssuesEvent","CreatedAt":"2023-11-30T18:50:27","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9742","RelatedDescription":"Closed issue \"[NuGet.org Bug]: inconsistencies between catalog page content and catalog page items in index\" (#9742) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n5 pages have inconsistent data in the index (1300, 1309, 1313, 1367, 1436)\n\n### Repro Steps\n\n```shell\r\n$ curl -s https://api.nuget.org/v3/catalog0/index.json | jq '.items[] | select(.\"commitId\" == (\"7c51a2eb-dc87-40a8-831b-83469b2526d7\", \"02842ef9-7e5c-4df5-9dad-fa09bf7675da\", \"c652a5a3-a0ad-4986-bcf3-229aa33af5b0\", \"a6fb5dc0-ab0d-4d6d-9f66-65f1c7b0e188\", \"bb0c5083-a8cd-4bba-b49e-d877b58bf853\"))'\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page1300.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"7c51a2eb-dc87-40a8-831b-83469b2526d7\",\r\n  \"commitTimeStamp\": \"2016-01-13T22:11:37.7649356Z\",\r\n  \"count\": 549\r\n}\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page1309.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"02842ef9-7e5c-4df5-9dad-fa09bf7675da\",\r\n  \"commitTimeStamp\": \"2016-01-15T04:02:48.8858301Z\",\r\n  \"count\": 548\r\n}\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page1313.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"c652a5a3-a0ad-4986-bcf3-229aa33af5b0\",\r\n  \"commitTimeStamp\": \"2016-01-15T16:18:09.8452301Z\",\r\n  \"count\": 550\r\n}\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page1367.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"a6fb5dc0-ab0d-4d6d-9f66-65f1c7b0e188\",\r\n  \"commitTimeStamp\": \"2016-02-11T10:00:49.8705942Z\",\r\n  \"count\": 550\r\n}\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page1436.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"bb0c5083-a8cd-4bba-b49e-d877b58bf853\",\r\n  \"commitTimeStamp\": \"2016-03-12T07:06:56.3828123Z\",\r\n  \"count\": 548\r\n}\r\n\r\n# But the pages don't match\r\n\r\n$ curl -s https://api.nuget.org/v3/catalog0/page1300.json | jq '. | {commitId, commitTimeStamp, count}'\r\n{\r\n  \"commitId\": \"dae05307-06a5-4954-aeaf-567b88c6b266\", # Expect 7c51a2eb-dc87-40a8-831b-83469b2526d7\r\n  \"commitTimeStamp\": \"2016-01-13T22:11:49.1579762Z\", # Expect 2016-01-13T22:11:37.7649356Z\r\n  \"count\": 550 # Expect 549\r\n}\r\n\r\n$ curl -s https://api.nuget.org/v3/catalog0/page1309.json | jq '. | {commitId, commitTimeStamp, count}'\r\n{\r\n  \"commitId\": \"ac9f13d7-bd08-4df5-b562-994a9ff0df18\", # Expect 02842ef9-7e5c-4df5-9dad-fa09bf7675da\r\n  \"commitTimeStamp\": \"2016-01-15T04:02:56.9796327Z\", # Expect 2016-01-15T04:02:48.8858301Z\r\n  \"count\": 550 # Expect 548\r\n}\r\n\r\n$ curl -s https://api.nuget.org/v3/catalog0/page1313.json | jq '. | {commitId, commitTimeStamp, count}'\r\n{\r\n  \"commitId\": \"3c10fced-9fd1-4ecc-a9a9-ecba436a454b\", # Expect c652a5a3-a0ad-4986-bcf3-229aa33af5b0\r\n  \"commitTimeStamp\": \"2016-01-15T16:18:13.8407352Z\", # Expect 2016-01-15T16:18:09.8452301Z\r\n  \"count\": 552 # Expect 550\r\n}\r\n$ curl -s https://api.nuget.org/v3/catalog0/page1367.json | jq '. | {commitId, commitTimeStamp, count}'\r\n{\r\n  \"commitId\": \"b4376f7c-98f0-4a69-96df-975b8d083379\", # Expect a6fb5dc0-ab0d-4d6d-9f66-65f1c7b0e188\r\n  \"commitTimeStamp\": \"2016-02-11T10:00:55.9548404Z\", # Expect 2016-02-11T10:00:49.8705942Z\r\n  \"count\": 551 # Expect 550\r\n}\r\n\r\n$ curl -s https://api.nuget.org/v3/catalog0/page1436.json | jq '. | {commitId, commitTimeStamp, count}'\r\n{\r\n  \"commitId\": \"12a57072-5065-44be-b872-24564369aff1\", # Expect bb0c5083-a8cd-4bba-b49e-d877b58bf853\r\n  \"commitTimeStamp\": \"2016-03-12T07:07:06.3777682Z\", # Expect 2016-03-12T07:06:56.3828123Z\r\n  \"count\": 549 # Expect 548\r\n}\r\n\r\n```\n\n### Expected Behavior\n\nThe index metadata about the page (in particular the `commitId`) matches the page metadata when the page is pulled.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33775122347","Type":"IssuesEvent","CreatedAt":"2023-12-01T01:27:41","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13060","RelatedDescription":"Opened issue \"PM UI transitive dependencies should display all transitive dependencies, not ones brought in through packages directly installed in a project\" (#13060) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nThere's many facets to this: \r\n\r\nExample 1: \r\n\r\n\r\nStart with a project Library, referencing Newtonsoft.Json version 12.0.3, which is vulnerable. \r\nReference that project from an application. \r\nGo to the application project, see you have no packages listed (despite having transitive packages)\r\n\r\nThis is incorrect, since Newtonsoft.Json is a transitive package to Application through library. \r\nYes, library the project directly installing it, but in the end it is available for coding in Application in the default behavior for packages. \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"12.0.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n[Example1.zip](https://github.com/NuGet/Home/files/13519378/Example1.zip)\r\n\r\n\r\nExample 2: \r\n\r\nBuilding on top of example 1, say you install NuGet.Packaging version 5.11.5. \r\nNote that this references version 9.0.1, while the project references version 12.0.3. \r\n\r\nNote that the transitive package itself is shown, despite the fact that it is the project itself that brings in the transitive package. \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/c2d9f29f-6995-49b1-88fa-4543fe74554e)\r\n\r\n[Example2.zip](https://github.com/NuGet/Home/files/13519455/Example2.zip)\r\n\r\nExample 3: \r\n\r\nSay you have the following application project: \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nAnd the following library project; \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\t<NoWarn>NU1605</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"6.0.4\" />  \r\n  </ItemGroup>\r\n\t\r\n  <ItemGroup>\r\n\t<PackageReference Include=\"NuGet.Packaging\" Version=\"5.11.5\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIf you restore these projects in Visual Studio, you'd get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/612c7d72-a693-48c0-b1e2-50147a408a7f)\r\n\r\nYet, if you open the PM UI, you get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/ddc62799-4633-4520-a41c-c459f3922186)\r\n\r\nIt inconsistent with what restore shows\r\n\r\nFor all these examples, there is an inconsistency. \r\n\r\n- dotnet list package --include-transitive shows all transitive packages\r\n- Solution Explorer shows all transitive packages (on demand, you need to expand them).\r\n- Inconsistent with restore\r\n\n\n### Desired Behavior\n\nShow all transitive packages, regardless of how they were installed.\r\n\r\nThe current behavior leads to inconsistency among Package Manager UI, Solution Explorer, dotnet list package and restore itself.\r\nThe behavior should be aligned.\n\n### Additional Context\n\n_No response_"},{"Id":"33771832207","Type":"IssuesEvent","CreatedAt":"2023-11-30T22:42:36","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13031","RelatedDescription":"Closed issue \"Migrate NuGet.CommandLine.XPlat package search to use System.CommandLine\" (#13031) at NuGet/Home","RelatedBody":"\r\nTracking issue for migrating NuGet.CommandLine.XPlat package search to use System.CommandLine\r\n\r\n"},{"Id":"33769603474","Type":"IssuesEvent","CreatedAt":"2023-11-30T21:16:20","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13049","RelatedDescription":"Closed issue \"Static graph-based restore should not enumerate every item's metadata\" (#13049) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nStatic graph-based restore uses an implementation of IMSBuildItem which is supposed to allow access to the names of all of the metadata items associated with a particular MSBuild item.  However, the names are not needed during static graph-based restore.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildProjectItemInstance.cs#L30\n\nI only found one usage in Pack which seems like its not causing any slowness issues.\n\n### Verbose Logs\n\n\n\n![Image](https://github.com/NuGet/Home/assets/17556515/636fcc2d-8752-45ce-a68d-226ec234ac60)\n\n"},{"Id":"33769087143","Type":"IssuesEvent","CreatedAt":"2023-11-30T20:57:29","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11447","RelatedDescription":"Closed issue \"When a package is installed in the global packages folder, add details about the package location\" (#11447) at NuGet/Home","RelatedBody":"Currently the message is: \r\n\r\n> Installed NuGet.Frameworks 6.0.0 from https://api.nuget.org/v3/index.json with content hash pEWTGa8sGEbSBE7VtKBlWZafG5tWNCGPzyNL91zneWoxZubNEWK1MN5QPN3fk+cV5CaySePT5reYjCAqELn5DA==.\r\n\r\nThe suggestion is that we add the `path` to this message as well. \r\n\r\ncc @JonDouglas "},{"Id":"33766969423","Type":"IssuesEvent","CreatedAt":"2023-11-30T19:38:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13059","RelatedDescription":"Opened issue \"Use System.Text.Json to read  the cache file in CacheFileFormat\" (#13059) at NuGet/Home","RelatedBody":""},{"Id":"33765918977","Type":"IssuesEvent","CreatedAt":"2023-11-30T18:59:10","Actor":"lifengl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13058","RelatedDescription":"Opened issue \"NuGet restore cache check is no longer using file existence cache\" (#13058) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.9\n\n### Worked before?\n\nnot sure\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nCheck Visual Studio solution loading trace when cache is available,  or performance DDRITs can be used here. During NuGet restore runner time, NuGet took out many thread pool threads, and most of them will be blocked to check whether sha256 files exist (or basically, whether the version of NuGet package is still in the NuGet cache folder).  Because package references are added to the closure of project references, each file is often checked in multiple projects. With often hundreds of files per project, in a large solution, it introduces heavy amounts of system calls/IOs.\r\n\r\nHere is the thread time of one trace:\r\n\r\n<img width=\"1697\" alt=\"image\" src=\"https://github.com/NuGet/Home/assets/11638466/29b35148-5f15-4323-bf93-ac06dfc9942d\">\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33748459857","Type":"IssuesEvent","CreatedAt":"2023-11-30T10:03:22","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13057","RelatedDescription":"Opened issue \"[Bug Bash] There will be a duplicated package source when modifying the name of source “Microsoft Visual Studio Offline Packages”\" (#13057) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.9.0.45\n\n### Worked before?\n\nIt doesn’t repro on 17.6 (D17.6\\34302.98) and 16.11 (D16.11\\34301.259).\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\n#### Repro Steps:  \r\n1.Create a C# Console App (.NET Core 8.0) project in VS and open the PM UI or PMC window.  \r\n2.Click the settings button (gear button) on PM UI or PMC window.  \r\n3.Click the NuGet Package Manager->Package Sources in the opened “Options” window. \r\n4.Select the source “Microsoft Visual Studio Offline Packages” in the source list, modify the name in the “Name” textbox and click the OK button.\r\n5.Click the settings button (gear button) on PM UI or PMC window and click the “Package Sources” node again.  \r\n\r\n#### Expected Results:  \r\nThere should not be a duplicated package source in step5. Or the source “Microsoft Visual Studio Offline Packages” should not be modified in step4. The same source cannot be modified (as below screenshot) in the auto-created offline package source after deleting the default “nuget.config” file.\r\n![image](https://github.com/NuGet/Home/assets/20632625/48278cf0-2e6d-48f5-994b-33ec08f52ead)\r\n#### Actual Results:  \r\nThere will be a duplicated package source as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/dd87b310-57d9-49b9-8279-cd04d7b40208)\r\n#### Notes:\r\nRepro rate: 100%. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33740352202","Type":"IssuesEvent","CreatedAt":"2023-11-30T04:04:04","Actor":"TheOnlyWei","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13056","RelatedDescription":"Opened issue \"Validate --source for \"dotnet restore --source\"\" (#13056) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently, there is an easy developer pitfall due to caching of package sources. Once I run something like the following code:\r\n```\r\ndotnet restore --source 'https://api./nuget.org/v3/index.json'\r\n```\r\nThis will cache the source's packages on my computer. Therefore, if I run a restore command again in the same project like the following:\r\n```\r\ndotnet restore --source 'asdasdfasfasfsgdfhgrsdtyhrtuhrthjfghj'\r\n```\r\nThe command will work because the source doesn't actually matter after the packages are cached. The developer will only run into issues if `dotnet restore --source 'asdasdfasfasfsgdfhgrsdtyhrtuhrthjfghj'` is run before `dotnet restore --source 'https://api./nuget.org/v3/index.json'`.\n\n### Desired Behavior\n\nIf a developer specifies `--source` flag, it means they want to use that source, not the cached source. So, a command like the following should fail because the source is obviously invalid:\r\n```\r\ndotnet restore --source 'asdasdfasfasfsgdfhgrsdtyhrtuhrthjfghj'\r\n```\n\n### Additional Context\n\n_No response_"},{"Id":"33739435156","Type":"IssuesEvent","CreatedAt":"2023-11-30T03:07:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13055","RelatedDescription":"Opened issue \"Vulnerability InfoBar remains visible in the Solution Explorer after closing solution\" (#13055) at NuGet/Home","RelatedBody":"When closing a solution when the vulnerability infobar was shown, I noticed that the infobar remains visible. When solutions are closed, this infobar should be removed since the context is no longer present in VS.\r\n\r\n![image](https://github.com/NuGet/Home/assets/49205731/06527807-1b3b-4b1f-aa45-f2cdaf9adaf0)\r\n"},{"Id":"33736672182","Type":"IssuesEvent","CreatedAt":"2023-11-30T00:24:49","Actor":"Forgind","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13054","RelatedDescription":"Opened issue \"PackageReference to native code does not error when it's absent\" (#13054) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.0-alpha.1.23577.7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nCopy the contents of [this folder](https://github.com/dotnet/sdk/tree/bd786cf2963e46fe866e80d1803b717d79806b1b/src/Assets/TestProjects/DesktopMinusRid).\r\nBuild it with `dotnet build /p:RuntimeIdentifier=win-x86`\r\n\r\nThat csproj has `<PackageReference Include=\"Libuv\" Version=\"1.9.1\" />`. Libuv version 1.9.1 doesn't have a win-x86 version, so it fails to copy Libuv to the output directory. When you run the exe, it fails.\r\n\r\ndotnet build, however, succeeds with no errors. This led me to hours of head-scratching.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-01T03:30:21.4704128Z","RunDurationInMilliseconds":1089}