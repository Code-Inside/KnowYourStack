{"Data":{"Blog":{"FeedItems":[{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Summary\nOver the past few years, we have continually invested in strengthening the supply-chain security for .NET packages. To strengthen the ecosystem further, NuGet.org will begin requiring...","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"20670148917","Type":"IssuesEvent","CreatedAt":"2022-03-10T00:39:49","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9042","RelatedDescription":"Opened issue \"[NuGet.org Bug]: A11y_NuGet Service_coverlet.msbuild_Used By-NuGet packages_DeveloperTool : Table name is not set for the 'NuGet packages' table present on the screen.\" (#9042) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nSource: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1468937\r\n\r\n\n\n### Repro Steps\n\n1. Launch the application URL: https://www.nuget.org/packages/coverlet.msbuild/\r\n2. \"coverlet.msbuild\" page will get open.\r\n3. Tab to 'Used by' tab controls and press enter to select it.\r\n4. Tab to 'NuGet packages' table.\r\n5. Open developer tool by using ctrl+shift+c and hover over 'NuGet packages' table to check its name. \r\n\r\n**Actual Behavior**:\r\n\r\nTable name is not set for the 'NuGet packages' table present on the screen.\r\n\r\nSimilar issue is observed in through out the application where ever such tables are present.\n\n### Expected Behavior\n\nProper name should be set for the 'NuGet packages' table present on the screen as per the data/purpose of the table \n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"20669894310","Type":"PullRequestEvent","CreatedAt":"2022-03-10T00:13:43","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9041","RelatedDescription":"Opened pull request \"[A11y] Added alt text to reserved namespace icon on package details page\" (#9041) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9036\r\n\r\n**Problem:**\r\n\r\nIn the Package Details page's 'Used By' tab, the 'reserved namespace' icons next to the Package Dependents did not have alt attributes.\r\n\r\nPrevious version:\r\n![image](https://user-images.githubusercontent.com/82980589/157561027-35f0bf2b-182b-427f-93c9-893623193477.png)\r\n![image](https://user-images.githubusercontent.com/82980589/157561109-7bc0d30d-a780-45af-83ae-716a33b443cd.png)\r\n\r\n**Fix:**\r\n\r\nTo fix this, I added the alt attribute to the reserved namespace img element.\r\n\r\nAfter the changes:\r\n![image](https://user-images.githubusercontent.com/82980589/157560972-4dc54599-1207-4404-8b12-e3e08d8d8d3e.png)\r\n"},{"Id":"20669883204","Type":"PullRequestEvent","CreatedAt":"2022-03-10T00:12:34","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9040","RelatedDescription":"Closed pull request \"[A11y] Added alt text to reserved namespace icon element\" (#9040) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9036\r\n\r\n**Problem:**\r\n\r\nIn the Package Details page's 'Used By' tab, the 'reserved namespace' icons next to the Package Dependents did not have alt attributes.\r\n\r\nPrevious version:\r\n![image](https://user-images.githubusercontent.com/82980589/157561027-35f0bf2b-182b-427f-93c9-893623193477.png)\r\n![image](https://user-images.githubusercontent.com/82980589/157561109-7bc0d30d-a780-45af-83ae-716a33b443cd.png)\r\n\r\n**Fix:**\r\n\r\nTo fix this, I added the alt attribute to the reserved namespace img element.\r\n\r\nAfter the changes:\r\n![image](https://user-images.githubusercontent.com/82980589/157560972-4dc54599-1207-4404-8b12-e3e08d8d8d3e.png)\r\n"},{"Id":"20669882164","Type":"PullRequestEvent","CreatedAt":"2022-03-10T00:12:27","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9040","RelatedDescription":"Opened pull request \"[A11y] Added alt text to reserved namespace icon element\" (#9040) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9036\r\n\r\n**Problem:**\r\n\r\nIn the Package Details page's 'Used By' tab, the 'reserved namespace' icons next to the Package Dependents did not have alt attributes.\r\n\r\nPrevious version:\r\n![image](https://user-images.githubusercontent.com/82980589/157561027-35f0bf2b-182b-427f-93c9-893623193477.png)\r\n![image](https://user-images.githubusercontent.com/82980589/157561109-7bc0d30d-a780-45af-83ae-716a33b443cd.png)\r\n\r\n**Fix:**\r\n\r\nTo fix this, I added the alt attribute to the reserved namespace img element.\r\n\r\nAfter the changes:\r\n![image](https://user-images.githubusercontent.com/82980589/157560972-4dc54599-1207-4404-8b12-e3e08d8d8d3e.png)\r\n"},{"Id":"20665224725","Type":"IssuesEvent","CreatedAt":"2022-03-09T18:36:40","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9039","RelatedDescription":"Opened issue \"[Upload UI]: Recommend adding a README if a package has none \" (#9039) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nIf I upload a package with no README or license I see:\r\n\r\n![image](https://user-images.githubusercontent.com/737941/157503952-c57bf021-8f57-44c0-ab07-68c1d5ddd7f6.png)\r\n \n\n### The Elevator Pitch\n\nWe should also recommend adding a README!\n\n### Additional Context and Details\n\n_No response_"},{"Id":"20665156455","Type":"PullRequestEvent","CreatedAt":"2022-03-09T18:32:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9038","RelatedDescription":"Opened pull request \"[Upload UI]: Improve experience when package has no license\" (#9038) at NuGet/NuGetGallery","RelatedBody":"The web UI shows a warning if you upload a package without a license:\r\n\r\n![image](https://user-images.githubusercontent.com/737941/157503952-c57bf021-8f57-44c0-ab07-68c1d5ddd7f6.png)\r\n\r\nThis switches the `Learn more` URL from https://aka.ms/deprecateLicenseUrl to https://aka.ms/nuget/authoring-best-practices#licensing as that's a more helpful guide in this scenario.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9037\r\n\r\n/cc @agr @chgill-MSFT "},{"Id":"20665118103","Type":"IssuesEvent","CreatedAt":"2022-03-09T18:30:13","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9037","RelatedDescription":"Opened issue \"[Upload UI]: Improve experience when package has no license \" (#9037) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nThe web UI shows a warning if you upload a package without a license:\r\n\r\n![image](https://user-images.githubusercontent.com/737941/157503952-c57bf021-8f57-44c0-ab07-68c1d5ddd7f6.png)\r\n\r\nToday the `Learn more` links to: https://aka.ms/deprecateLicenseUrl\r\n\r\nThis doc is for packages that provide the legacy URL but isn't ideal for brand new packages.\n\n### The Elevator Pitch\n\nLink to the licensing best practices instead! https://aka.ms/nuget/authoring-best-practices#licensing\n\n### Additional Context and Details\n\n_No response_"},{"Id":"20648461620","Type":"IssuesEvent","CreatedAt":"2022-03-08T23:50:47","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9036","RelatedDescription":"Opened issue \"[NuGet.org Bug]: [A11y] NuGetServiceMicrosoft.Data.SqlClient: Ensures <img> elements have alternate text or a role of none or presentation\" (#9036) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nSource: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1468388\n\n### Repro Steps\n\n1. Launch the application URL: https://www.nuget.org/packages/Microsoft.Data.SqlClient/\r\n2. Tab to the Used by\r\n3. Run the Accessibility insights for web \r\n\r\nSimilar issue is observed in the following scenarios:\r\nProfile-Used by\r\nProfile-Json Bson\r\nProfile-AWSSDK\r\nProfile-AutoMapper\r\nProfile-NUnit\n\n### Expected Behavior\n\nEnsures <img> elements have alternate text or a role of none or presentation (image-alt - https://accessibilityinsights.io/info-examples/web/image-alt) \r\n\r\nTarget application: NuGet Gallery | Microsoft.Data.SqlClient 4.0.1 - https://www.nuget.org/packages/Microsoft.Data.SqlClient/ \r\nElement path: tr:nth-child(2) > .used-by-desc-column > .reserved-indicator[title=\"\"]\r\n\r\nSnippet: <img class=\"reserved-indicator\" src=\"/Content/gallery/img/reserved-indicator.svg\" onerror=\"this.src='https://www.nuget.org/Content/gallery/img/reserved-indicator-14x14.png'; this.onerror = null;\" title=\"\" data-original-title=\"The ID prefix of this package has been reserved for one of the owners of this package by NuGet.org.\">  \n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"20647434782","Type":"IssuesEvent","CreatedAt":"2022-03-08T22:49:15","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9030","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Frameworks not displayed for SpecFlow NuGet package\" (#9030) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nThe Framework tab of our main NuGet packages is empty.\n\n### Repro Steps\n\nLook at package pages of\r\n- https://www.nuget.org/packages/SpecFlow/\r\n- https://www.nuget.org/packages/SpecFlow.NUnit/\r\n- https://www.nuget.org/packages/SpecFlow.MsTest/\r\n- https://www.nuget.org/packages/SpecFlow.xUnit/\r\n\r\nSwitch to `Frameworks` Tab\r\n\r\nNothing is displayed\n\n### Expected Behavior\n\nSupported Frameworks are displayed.\n\n### Screenshots\n\n![image](https://user-images.githubusercontent.com/859801/156369568-14ebcd37-a66d-43b7-96ed-c93c186a0708.png)\r\n\n\n### Additional Context and logs\n\nOur NuGet packages are doing more than your standard NuGet Packages, so perhaps something of this breaks the detection."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"20671074644","Type":"IssuesEvent","CreatedAt":"2022-03-10T02:16:42","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11666","RelatedDescription":"Opened issue \"[DCR]: \" (#11666) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nCurrently, a package in the Package Manager list is a representation of a single package and its version. In the browse tab, the package will have its latest version associated with the package in the list. In the Installed tab, the version will be the version of the package that is installed. In the updates tab, the version will be the latest version of the package. The problem with this approach is that there are cases where it would be useful to have information from more than one version of the package. For example, if we wanted to show deprecation and vulnerability information for a package version in the Updates tab, the packages list would need to know about what package is installed AND what the latest package version is.\r\n\r\nThe Solution PMUI works the same way as the Project PMUI with respect to how packages are represented in the packages list, but the issue is more prevalent. As an example, if PackageA is installed in three different project and each project has a different version of PackageA installed, the PMUI will only choose only one of the versions as the representation of the package in the packages list, which I believe is the most recent of the package versions installed across the three projects. Then, if that version of the package is not vulnerable or deprecated, but there is a version that is installed in a different project that is vulnerable or deprecated, the PMUI packages list will not know about it until the user clicks on the package and sees the details in the right-hand pane.\n\n### Desired Behavior\n\nA package in the PMUI should contain a list of package versions, each with their own metadata. That is, a package representation should not have a one-to-one relationship with a single version of a package. It should know what the currently installed version for each project for the solution PMUI, what the currently installed package is in the project PMUI, and what the latest version of the package is at a minimum and each version should contain metadata specific to them, including but not limited to vulnerability and deprecation data.\n\n### Additional Context\n\nThis would enable the ability to display package vulnerability and deprecation information for the updates tab, and for the installed and updates tabs in the solution PMUI, etc. and would allow for future changes where data from multiple versions of the package is important, such as being able to show the version of a transitive dependency from other projects."},{"Id":"20670177001","Type":"IssuesEvent","CreatedAt":"2022-03-10T00:42:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11665","RelatedDescription":"Opened issue \"NRE when NominateProjectAsync is called during early solution initalizaiton\" (#11665) at NuGet/Home","RelatedBody":"Comment from https://github.com/NuGet/NuGet.Client/pull/4157#discussion_r823222111. \r\n\r\n❗ This line is getting executed in two cases where it should not be allowed:\r\n\r\nWhen OperationCanceledExecption is thrown by FromIVsSolution2\r\nWhen a different exception is thrown, but the solution is not yet fully loaded\r\nIn each of these cases, AddProjectRestoreInfoSource throws ArgumentNullException for projectNames.\r\n\r\nOriginally mentioned in https://github.com/dotnet/roslyn/issues/60072."},{"Id":"20668123132","Type":"PullRequestEvent","CreatedAt":"2022-03-09T21:44:41","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/11640","RelatedDescription":"Merged pull request \"Spec update: Transitive Dependencies from project references\" (#11640) at NuGet/Home","RelatedBody":"Following-up on comment: https://github.com/NuGet/NuGet.Client/pull/4465#discussion_r816133121\r\n\r\n- Updates Transitive Dependencies specs to reflect decisions made on Transitive Dependencies in PM UI.\r\n- Documents tracking issue for CLI experience with transitive dependencies from referenced projects.\r\n- Documents tracking issue for project PM UI experience with transitive dependencies from referenced projects.\r\n"},{"Id":"20648185048","Type":"IssuesEvent","CreatedAt":"2022-03-08T23:31:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11222","RelatedDescription":"Closed issue \"[Bug]: Very slow restore when using NoWarn in single project that has lots of dependents\" (#11222) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nMSBuild.exe\r\n\r\n### Product Version\r\n\r\n16.11\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nWhen you have a large project tree with lots of transitive project references and packages, the calculation transitive NoWarn values takes forever.  This code is attempting to search through transitive references:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/5df07c3271aebfbeb86269d59a98d1acc9996670/src/NuGet.Core/NuGet.Commands/RestoreCommand/Logging/TransitiveNoWarnUtils.cs#L163\r\n\r\nBut in the debugger I found the queue to contain _millions_ of items.  This causing a massive amount of allocations which leads to GC pressure and makes restore very slow.\r\n\r\n![image](https://user-images.githubusercontent.com/17556515/132549969-f62a9d4d-45ea-4ca5-a13f-ca188b3f9f27.png)\r\n\r\n### Workaround\r\nCurrently, the only way to work around the issue is to remove all `NoWarn` definitions in specific projects and instead specify them in a common import like `Directory.Build.props` so that every project has the exact same set of `NoWarn`.  This makes the code not need to walk through recursively to determine `NoWarn`.\r\n\r\n### Verbose Logs\r\n\r\n_No response_\r\n"},{"Id":"20645981806","Type":"IssuesEvent","CreatedAt":"2022-03-08T21:14:29","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10753","RelatedDescription":"Closed issue \"Create and style popup to display originating package info on a hovered transitive dependency\" (#10753) at NuGet/Home","RelatedBody":""},{"Id":"20645569544","Type":"IssuesEvent","CreatedAt":"2022-03-08T20:48:16","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11662","RelatedDescription":"Opened issue \"[Bug]: Warning about ignoring VersionOverride assumes that no other central package management is in use\" (#11662) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\n17.2 Preview 2\n\n### Worked before?\n\n17.2 Preview 1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Use `Microsoft.Build.CentralPackageVersions`\r\n2. Specify `VersionOverride` on a `<PackageReference />`\r\n3. Update to Visual Studio 17.2 Preview 2\r\n\r\nRestore will log a warning:\r\n```\r\nC:\\src\\foo\\foo.csproj : warning NU1504: The package reference Something specifies a VersionOverride but central package manageent is currently disabled so the value was ignored. [C:\\src\\foo\\foo.csproj]\r\n```\r\n\r\nNuGet's central package management assumes that if its disabled, the user has no other reason to use `VersionOverride` metadata.  We'll need to remove this warning until we can find a good way to determine if the user would need to see this warning.\n\n### Verbose Logs\n\n_No response_"},{"Id":"20641868254","Type":"IssuesEvent","CreatedAt":"2022-03-08T16:59:27","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10327","RelatedDescription":"Closed issue \" Restore fails with NU1106 for solution that uses StaticGraph and CPVM\" (#10327) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: `dotnet.exe`\r\n\r\ndotnet.exe --version: `5.0.100`\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run `dotnet restore --force /p:RestoreUseStaticGraphEvaluation=true`\r\n\r\n```\r\n...\\CpvmStaticGraphIssue\\Project203\\Project203.csproj : error NU1106: Unable to satisfy conflicting requests for 'System.Threading.Tasks': \r\nSystem.Threading.Tasks (>= 4.0.11) (via package/System.IO 4.1.0), \r\nSystem.Threading.Tasks (>= 4.0.11) (via package/System.IO 4.1.0) Framework: (.NETCoreApp,Version=v3.1) \r\n```\r\n\r\n## Other suggested things\r\n\r\n`dotnet restore --force /p:RestoreUseStaticGraphEvaluation=false` works fine.\r\n\r\n### Sample Project\r\n\r\nI've discovered the problem in larger solution, but I was able to reduce it to [CpvmStaticGraphIssue.zip](https://github.com/NuGet/Home/files/5607782/CpvmStaticGraphIssue.zip):\r\n```\r\n              -> Project142 -> log4net\r\n             /\r\n  Project203                -> Project157 -> log4net\r\n             \\             /\r\n              -> Project160\r\n                           \\\r\n                            -> FSharp.Core\r\n```\r\n\r\n`Directory.Packages.props`:\r\n```\r\n<Project>\r\n  <ItemGroup>\t\t\r\n    <PackageVersion Include=\"FSharp.Core\" Version=\"4.7.0\" />\r\n    <PackageVersion Include=\"log4net\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n`Directory.Build.props`:\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n</Project>\r\n```"},{"Id":"20641868155","Type":"IssuesEvent","CreatedAt":"2022-03-08T16:59:26","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10389","RelatedDescription":"Closed issue \"[Feature]: Add option to allow versions of transitive dependencies to be overridden\" (#10389) at NuGet/Home","RelatedBody":"Recently we've noticed a [PR](https://github.com/NuGet/NuGet.Client/pull/3719) that disables the transitive pinning behaviour for CPVM.\r\nIt worries us because we started to rely on that feature (or rather on the unintentional side effect of that feature).\r\n\r\nSo the problem we are struggling with is the slowness of the restore operation. For large solutions that contain many projects and reference many packages the time needed for restore operation becomes unacceptable (see https://github.com/NuGet/Home/issues/10030 for details). As it is explained in the linked issue, the slowness is caused by the exponential nature of the graph walking algorithm.\r\n\r\nWe've discovered that enabling the CPVM for such solutions makes it to restore **much** quicker. It turns out that transitive pinning helps to reduce the impact of exponential nature of the graph walking algorithm. Because of the transitive pinning the graph walking needs to traverse the dependency graph of each centrally managed package only once. It happens only when a package node is visited from the top level node and it is skipped when visited from all other nodes (due to the [\"Nearest wins\"](https://docs.microsoft.com/en-us/nuget/concepts/dependency-resolution#nearest-wins) rule).\r\n\r\nI know that transitive pinning is a controversial feature. Some users want it but others really don't. But do you consider bringing it back and making it an opt-in feature as it was suggested in the comments of https://github.com/NuGet/Home/issues/10115 ? It is really important for us, so I'm happy to work on making this change if you are willing to accept it.\r\n"},{"Id":"20639128770","Type":"IssuesEvent","CreatedAt":"2022-03-08T14:46:24","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11647","RelatedDescription":"Closed issue \"[Bug]: CPVM - NuGet.exe doesn't include central transitive dependencies in the nuspec of the created package\" (#11647) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\ndev branch\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\n- `dotnet pack` adds transitive dependencies (when [transitive dependency pinning is enabled](https://github.com/NuGet/NuGet.Client/pull/4025)) to the dependency groups in the nuspec of the created package (see https://github.com/NuGet/NuGet.Client/blob/b76bf48337114102098d31c80271589feb0d28eb/src/NuGet.Core/NuGet.Build.Tasks.Pack/PackTaskLogic.cs#L922-L932).\r\n- `nuget.exe pack` doesn't add transitive dependencies thus as a result packages created with `dotnet pack` and `nuget.exe pack` are inconsistent.\r\n\r\nNot providing detailed repro steps as the https://github.com/NuGet/NuGet.Client/pull/4025 has not been merged yet. It seems that when transitive dependency pinning was implemented originally, support for `centralTransitiveDependencyGroups` was added to `PackTask/dotnet/msbuild` but NuGet.exe was missed.\n\n### Verbose Logs\n\n_No response_"},{"Id":"20633363979","Type":"IssuesEvent","CreatedAt":"2022-03-08T09:21:43","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11659","RelatedDescription":"Opened issue \"[Bug]: Duplicated installed packages show in “Installed” tab of solution-level PM UI after installing different versions of the same package into a solution after enabling transitive package\" (#11659) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.2.0.95\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n### Details about Problem\r\nVS Version: Main\\32307.127\r\nNuGet Version: Dev\\6.2.0.95\r\nOS Version: Windows-11-Enterprise-21H2\r\n\r\n### Repro steps\r\n1. Set NUGET_TRANSITIVE_DEPENDENCIES_IN_PMUI environment variable to 1.\r\n2. Create a solution with multiple C# Console App (.NET Framework 4.8) projects in VS.\r\n3. Right-Click the solution in the Solution Explorer and select the “Mange NuGet Packages for Solution”\r\n4. Go to “Browse” tab, select a package (e.g. Newtonsoft.Json) and install different versions (with PackageReference format) into the different projects. (e.g. install 12.0.1 into the first project, install 12.0.2 into the second project)\r\n5. Go to the “Installed” tab.\r\n### Expected\r\nThere is only one package in the “Installed” tab.\r\n### Actual\r\nDuplicated installed packages show as below.\r\n![image](https://user-images.githubusercontent.com/20632625/157206685-4d6dcf76-f2ad-4d49-bcad-aa5db313543c.png)\r\n### Notes:\r\n1.It is not a regression since it brings up by the new feature of transitive package.\r\n2.It doesn’t repro after setting NUGET_TRANSITIVE_DEPENDENCIES_IN_PMUI environment variable to 0.\n\n### Verbose Logs\n\n_No response_"},{"Id":"20633312223","Type":"IssuesEvent","CreatedAt":"2022-03-08T09:18:46","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11658","RelatedDescription":"Opened issue \"[Bug]: Package description shows instead of top-level packages info in the tooltip of a transitive package\" (#11658) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.2.0.95\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n### Details about Problem\r\nVS Version: Main\\32307.127\r\nNuGet Version: Dev\\6.2.0.95\r\nOS Version: Windows-11-Enterprise-21H2\r\n### Repro steps\r\n1. Set NUGET_TRANSITIVE_DEPENDENCIES_IN_PMUI environment variable to 1.\r\n2. Launch VS and create a C# Console Application (.NET Core 6.0) project.\r\n3. Open the PM UI of the project and go to “Browse” tab.\r\n4. Install the package “Microsoft.EntityFrameworkCore.Design” and go to “Installed” tab.\r\n5. Expand the “Transitive packages” node and hover on a transitive package.\r\n### Expected\r\nThe top-level packages which bring the transitive package in should show in the tooltip as below (described in the [spec).](https://github.com/NuGet/Home/blob/dev/proposed/2020/Transitive-Dependencies.md#description-what-is-it)\r\n![image](https://user-images.githubusercontent.com/20632625/157205448-57b48198-de32-44e8-a9dd-5dc132528893.png)\r\n### Actual\r\nPackage description shows instead of top-level packages info in the tooltip as below.\r\n![image](https://user-images.githubusercontent.com/20632625/157205505-f1684676-5452-4c3a-a623-6b13204af5f5.png)\r\n### Notes:\r\nIt is not a regression since it is a new feature. Start to repro from Dev\\6.2.0.89 - Flows and shows Transitive Origin Data into PM UI (https://github.com/NuGet/NuGet.Client/pull/4465[)](https://github.com/NuGet/NuGet.Client/commit/b76bf48337114102098d31c80271589feb0d28eb)\n\n### Verbose Logs\n\n_No response_"},{"Id":"20631320567","Type":"IssuesEvent","CreatedAt":"2022-03-08T07:04:19","Actor":"Smartisa","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11657","RelatedDescription":"Opened issue \"Are there any programmable interfaces that can get all top-level dependencies when migrating packages.config to packagereference?\" (#11657) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/11656\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Smartisa** March  8, 2022</sup>\r\nFor example:\r\n![image](https://user-images.githubusercontent.com/47079990/157184221-a5723f26-e0f1-406f-863e-3ba17f6261ca.png)\r\nHow can I automatically obtain top-level dependencies?</div>"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"20398585964","Type":"IssuesEvent","CreatedAt":"2022-02-22T18:32:01","Actor":"clairernovotny","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/61","RelatedDescription":"Opened issue \"Requiring two-factor authentication on NuGet.org\" (#61) at NuGet/Announcements","RelatedBody":"We announced plans to require tFA on all accounts on NuGet.org. Details in the [blog post](https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/)."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":58,"FavoriteCount":21,"RawContent":null},{"Id":"1493700008000073731","CreatedAt":"2022-02-15T21:33:28+00:00","UserScreenname":"nuget","Text":"📦Introducing Compatible Packages 📦\n\n🖼 New Frameworks Tab\n😎 Target Framework Badges\n🧩 Computed Compatibility Table\n🛠… https://t.co/qDUkqayBjC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":171,"FavoriteCount":43,"RawContent":null},{"Id":"1488563020074737670","CreatedAt":"2022-02-01T17:20:54+00:00","UserScreenname":"nuget","Text":"NuGet is celebrating 20 years of @dotnet with over 290,000 unique packages and 160 billion downloads to date! Tune… https://t.co/kCkBuvp3OW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2022-03-10T03:30:23.7969749Z","RunDurationInMilliseconds":1347}