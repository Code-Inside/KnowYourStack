{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42667294967","Type":"PullRequestEvent","CreatedAt":"2024-10-09T00:08:05","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10209","RelatedDescription":"Merged pull request \"Targeting netstandard2.0 for scanandsign.core\" (#10209) at NuGet/NuGetGallery","RelatedBody":"At least one project consuming this package targets net6.0. Not sure how it worked so far, but multitargeting should address warnings produced while building that project."},{"Id":"42666436799","Type":"PullRequestEvent","CreatedAt":"2024-10-08T23:12:25","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10209","RelatedDescription":"Opened pull request \"Targeting netstandard2.0 for scanandsign.core\" (#10209) at NuGet/NuGetGallery","RelatedBody":"At least one project consuming this package targets net6.0. Not sure how it worked so far, but multitargeting should address warnings produced while building that project."},{"Id":"42665535877","Type":"PullRequestEvent","CreatedAt":"2024-10-08T22:23:45","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10208","RelatedDescription":"Opened pull request \"Treating package version not found warnings as errors.\" (#10208) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/5665 in this repo."},{"Id":"42663393556","Type":"IssuesEvent","CreatedAt":"2024-10-08T20:50:01","Actor":"FXZFun","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10207","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Error Uploading Package\" (#10207) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI am unable to upload my package to the gallery. I completed the upload form on the website and reviewed the details, then when I tried to submit it, it displayed an error message and said to try again. I checked the details again and attempted to submit it again, but now all I get is the message \r\n> [!CAUTION]\r\n> There is a conflict with the ID and version of your package and another package. Please change your package's ID or version and try again. \r\n\r\nI have checked to ensure no other packages exist with my package ID (including unlisted packages). It seems like the package ID was reserved for my package but the upload failed in a halfway state.\r\n\r\nI have tried using the contact form but haven't received any help with my issue beyond the initial confirmation yet.\n\n### Repro Steps\n\n1. Open https://www.nuget.org/packages/manage/upload\r\n2. Choose .nupkg file and verify details\r\n3. Submit the package to the gallery\r\n4. View the error message displayed\n\n### Expected Behavior\n\nSuccessful submission of a new package without issues.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/3b64a8f1-b972-49dc-b42f-34675e67be58)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42673926708","Type":"IssuesEvent","CreatedAt":"2024-10-09T06:30:03","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13708","RelatedDescription":"Closed issue \"dotnet restore should report security vulnerabilities for shared assembly projects.\" (#13708) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nWhen a shared assembly has a vulnerability in one of its dependencies, it should be identified explicitly.  Instead, the vulnerability is reported through the containing application with a link to the vulnerability.  \r\n\r\nThe problem is the suggested fix leads the dev to fix the application with a PackageReference/explicit version instead of addressing the issue directly in the shared assembly and obfuscates the fact that other uses of hte shared assembly have the same vulnerability.\n\n### Additional Context and Details\n\nI encountered the System.Private.Uri security vulnerability today after upgrading my VS installation when building a 'test application' for testing some Maui-base shared assemblies.  \r\n\r\nAt first, I thought his was an issue with the VS upgrade, since I had been building the shared assemblies and all dependent applications over the previous few days without any issues.\r\n\r\nNext, I thought there was an issue with the test application itself, so I added the PackageReference to it.\r\n\r\nI then started running dotnet resolve against the dependent applications and started seeing the same issue for a number of the applications.\r\n\r\nAfter researching the issue, I found this thread (https://github.com/dotnet/sdk/issues/42651) and the suggestion to searching project.assets.json and found numerous applications had the same issue and eventually determined that the root cause was in one of my shared assemblies.\r\n\r\nIf dotnet resolve had identified the shared assembly in addition to, or instead of, the various application projects, it would have been much quicker to find the root cause.  As it stands, I could have easily fixed on application only to discover it in others later. "},{"Id":"42668174183","Type":"IssuesEvent","CreatedAt":"2024-10-09T01:02:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13842","RelatedDescription":"Closed issue \"NuGet Client SDK packages updating to net8.0\" (#13842) at NuGet/Home","RelatedBody":"All of the NuGet Client SDK packages target `net472` and `netstandard2.0`, and the following additionally currently target `net5.0`: NuGet.Resolver, NuGet.Commands, NuGet.Protocool, NuGet.ProjectModel, NuGet.Credentials, NuGet.DependencyResolver.Core, NuGet.Packaging\r\n\r\nThese 7 packages will instead target `net472`, `netstandard2.0`, and `net8.0`.  NuGet does not support signed packages with the `netstandard2.0` binaries, so any apps targeting `net5.0`, `net6.0`, or `net7.0` and referencing one of the above packages will get the `netstandard2.0` binaries from the package, and lose support for signed packages.\r\n\r\nAs per https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs#lifecycle, .NET 5.0 went out of support in May 2022. Additionally, the current version of NuGet in development will be released as part of the .NET 9.0.200 SDK, which will be months after .NET 6 is no longer supported. At that time, .NET 8 will be the lower version of .NET (Core) that is still supported by Microsoft. \r\n\r\nTherefore, anyone affected by this change in NuGet's Client SDK packages will be targeting .NET versions that are not supported."},{"Id":"42666787824","Type":"IssuesEvent","CreatedAt":"2024-10-08T23:34:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13844","RelatedDescription":"Reopened issue \"Linux: Installing packages with uppercase versions\" (#13844) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet (linux)\r\n\r\n### Product Version\r\n\r\n.NET 10 (8 and 9)\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nOn Linux systems, it is not possible to install packages with uppercase characters in their version. The .NET SDKcalls `NugetV3LocalRepository` to find the package files, however its `PathResolver` member is set to enforce lowercase by default. \r\nThis means it will always search for the file with lowercase versions (even if it is stored with uppercase characters). This is not an issue on Windows because of the case agnostic fs, but it impacts Linux customers. \r\n\r\nHere are some related issues: https://github.com/NuGet/Home/issues/13275, https://github.com/dotnet/sdk/issues/24419, https://github.com/dotnet/sdk/issues/39105, https://github.com/dotnet/sdk/issues/41844\r\n\r\nOne of the issues mentions that NuGet expects all versions to be normalized. However this is currently not enforced by `dotnet pack -p:Version` command.\r\n\r\nSome proposed solutions are:\r\n1. Remove default lowercase normalization for `NugetV3LocalRepository::PathResolver` \r\n2. Have overloading of `NugetV3LocalRespository::FindPackage(String id, NugetVersion version, bool lowercase)` so that consumers of that method are able to specify whether they want to check for lower/uppercase versions\r\n3. Start enforcing lowercase versions on `dotnet pack` (having the generated package filenames be lowercased)\r\n\r\ncc: @nkolev92 \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42666786596","Type":"IssuesEvent","CreatedAt":"2024-10-08T23:34:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13844","RelatedDescription":"Closed issue \"Linux: Installing packages with uppercase versions\" (#13844) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet (linux)\r\n\r\n### Product Version\r\n\r\n.NET 10 (8 and 9)\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nOn Linux systems, it is not possible to install packages with uppercase characters in their version. The .NET SDKcalls `NugetV3LocalRepository` to find the package files, however its `PathResolver` member is set to enforce lowercase by default. \r\nThis means it will always search for the file with lowercase versions (even if it is stored with uppercase characters). This is not an issue on Windows because of the case agnostic fs, but it impacts Linux customers. \r\n\r\nHere are some related issues: https://github.com/NuGet/Home/issues/13275, https://github.com/dotnet/sdk/issues/24419, https://github.com/dotnet/sdk/issues/39105, https://github.com/dotnet/sdk/issues/41844\r\n\r\nOne of the issues mentions that NuGet expects all versions to be normalized. However this is currently not enforced by `dotnet pack -p:Version` command.\r\n\r\nSome proposed solutions are:\r\n1. Remove default lowercase normalization for `NugetV3LocalRepository::PathResolver` \r\n2. Have overloading of `NugetV3LocalRespository::FindPackage(String id, NugetVersion version, bool lowercase)` so that consumers of that method are able to specify whether they want to check for lower/uppercase versions\r\n3. Start enforcing lowercase versions on `dotnet pack` (having the generated package filenames be lowercased)\r\n\r\ncc: @nkolev92 \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42666171116","Type":"IssuesEvent","CreatedAt":"2024-10-08T22:57:11","Actor":"edvilme","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13844","RelatedDescription":"Opened issue \"Linux: Installing packages with uppercase versions\" (#13844) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOn Linux systems, it is not possible to install packages with uppercase characters in their version. The .NET SDKcalls `NugetV3LocalRepository` to find the package files, however its `PathResolver` member is set to enforce lowercase by default. \r\nThis means it will always search for the file with lowercase versions (even if it is stored with uppercase characters). This is not an issue on Windows because of the case agnostic fs, but it impacts Linux customers. \r\n\r\nHere are some related issues: https://github.com/NuGet/Home/issues/13275, https://github.com/dotnet/sdk/issues/24419, https://github.com/dotnet/sdk/issues/39105, https://github.com/dotnet/sdk/issues/41844\r\n\r\nOne of the issues mention that NuGet expects all versions to be normalized. However this is currently not enforced by `dotnet pack -p:Version` command.\r\n\r\nSome proposed solutions are:\r\n1. Remove default lowercase normalization for `NugetV3LocalRepository::PathResolver` \r\n2. Have overloading of `NugetV3LocalRespository::FindPackage(String id, NugetVersion version, bool lowercase)` so that consumers of that method are able to specify whether they want to check for lower/uppercase versions\r\n3. Start enforcing lowercase versions on `dotnet pack` \r\n\r\ncc: @nkolev92 \n\n### Verbose Logs\n\n_No response_"},{"Id":"42664935392","Type":"IssuesEvent","CreatedAt":"2024-10-08T21:54:27","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13843","RelatedDescription":"Opened issue \"PushCommand_AllowsTimeoutToBeSpecifiedLowerThan100Seconds test can hang\" (#13843) at NuGet/Home","RelatedBody":"I've observed the following when running Windows Functional Tests (net472):\r\n\r\n```\r\nNuGet.CommandLine.FuncTest: [Long Running Test] 'NuGet.CommandLine.FuncTest.Commands.PushCommandTest.PushCommand_AllowsTimeoutToBeSpecifiedLowerThan100Seconds', Elapsed: 00:50:31\r\n```\r\n\r\nThis shows the test was running for 50 minutes before the test run timed out.  We should figure out how this test would hang.\r\n\r\nThere are two tests:\r\n`PushCommand_AllowsTimeoutToBeSpecifiedHigherThan100Seconds`\r\n`PushCommand_AllowsTimeoutToBeSpecifiedLowerThan100Seconds`\r\n\r\nHowever, the default push timeout is now 5 minutes (300 second) not 100 seconds.  I think these tests should just be deleted or disabled."},{"Id":"42660590820","Type":"PullRequestEvent","CreatedAt":"2024-10-08T19:09:01","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13673","RelatedDescription":"Merged pull request \"Add spec for Trusted Publishers (OIDC auth for NuGet)\" (#13673) at NuGet/Home","RelatedBody":"See the [rendered functional description](https://github.com/NuGet/Home/blob/jver-oidc/accepted/2024/trusted-publishers-oidc-for-nuget-push.md) (main spec) and [rendered technical description](https://github.com/NuGet/Home/blob/jver-oidc/accepted/2024/trusted-publishers-oidc-for-nuget-push.technical.md) (supporting document).\r\n\r\nThis is a spec for https://github.com/NuGet/NuGetGallery/issues/9332.\r\n\r\nIt brings OpenSSF's https://repos.openssf.org/trusted-publishers-for-all-package-repositories document to NuGet.org.\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-10T03:30:21.0640139Z","RunDurationInMilliseconds":893}