{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26911237475","Type":"IssuesEvent","CreatedAt":"2023-02-07T00:04:39","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9352","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Download statistics are not updated\" (#9352) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nI'm unable to use NuGet.org statistics\r\n\r\n### Describe the bug\r\n\r\nFor many days now, for some packages, the download statistics show the same value. \r\n\r\n![image](https://user-images.githubusercontent.com/16277367/212944506-2c434a9c-0cbf-4d2c-8b4c-55a65654583e.png)\r\n\r\nConfirmation can also be found in Nuget Trends.\r\n\r\n![image](https://user-images.githubusercontent.com/16277367/212944848-ddf90b75-f300-4598-8d51-8c7b79a11faa.png)\r\n\r\n\r\n### Repro Steps\r\n\r\nOn this URL: https://www.nuget.org/packages?q=math\r\nOn this URL: https://nugettrends.com/packages?months=24&ids=MathParser.org-mXparser\r\n\r\n### Expected Behavior\r\n\r\nMathParser.org-mXparser package has c.a. 1500-2000 downloads daily.\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"26910271274","Type":"IssuesEvent","CreatedAt":"2023-02-06T22:53:55","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9381","RelatedDescription":"Opened issue \"[Deployment] 2023-02-06\" (#9381) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\n## Changes\r\n* https://github.com/NuGet/NuGetGallery/pull/9364 (tracked by https://github.com/NuGet/NuGetGallery/issues/9337)\r\n* https://github.com/NuGet/NuGetGallery/pull/9358 (tracked by https://github.com/NuGet/NuGetGallery/issues/9359)\r\n* https://github.com/NuGet/NuGetGallery/pull/9347 (tracked by https://github.com/NuGet/Engineering/issues/4669)\r\n* https://github.com/NuGet/Engineering/issues/4669\r\n\r\n## Progress\r\n* [ ] Merge PRs: \r\n* [ ] Build\r\n* [ ] Release\r\n* [ ] DEV\r\n* [ ] INT\r\n* [ ] PROD"},{"Id":"26907719741","Type":"PullRequestEvent","CreatedAt":"2023-02-06T20:33:44","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9360","RelatedDescription":"Merged pull request \"AAD account checks on packages for safety reports\" (#9360) at NuGet/NuGetGallery","RelatedBody":"We'll allow safety report categories only on MSA-only account-owned packages as a first step."},{"Id":"26905305638","Type":"IssuesEvent","CreatedAt":"2023-02-06T18:33:43","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9224","RelatedDescription":"Closed issue \"UX cleanup for upload page\" (#9224) at NuGet/NuGetGallery","RelatedBody":"- remove unnecessary metadata\r\n- change font (not use italics)"},{"Id":"26905242604","Type":"IssuesEvent","CreatedAt":"2023-02-06T18:30:35","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9359","RelatedDescription":"Closed issue \"How to include a readme reference is not clear\" (#9359) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nconfuse customers\r\n\r\n### Describe the bug\r\n\r\nOn the upload page, there is warning message about missing readme. the refence link \"how to include a readme\" is not insufficient. it doesn't point to how to include a readme.  \r\nit links to this page now. https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices#readme\r\n\r\n### Repro Steps\r\n\r\n1. go to nuget.org upload page\r\n2.  upload a package without embedded readme\r\n3.  see warning message, click link.\r\n\r\n### Expected Behavior\r\n\r\nLinks to actually documentation how to include a readme\r\n\r\n### Screenshots\r\n\r\n_No response_\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"26878900428","Type":"IssuesEvent","CreatedAt":"2023-02-05T11:47:30","Actor":"zaafonin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9380","RelatedDescription":"Closed issue \"[NuGet.org Bug]: v3 API not available from Russia\" (#9380) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nI'm unable to use NuGet.org\r\n\r\n### Describe the bug\r\n\r\nI've been unable to use `dotnet restore`, `dotnet new install` and other features. When enabling verbose output, it seems like my machine cannot access [https://api.nuget.org/v3/index.json](https://api.nuget.org/v3/index.json). I'm able to use it, albeit very slowly, through a VPN. Last time I've used .NET (a couple of years ago) this problem wasn't there.\r\n\r\nWeirdly enough, [https://www.nuget.org/api/v2/](https://www.nuget.org/api/v2/) seems functional and provides output in browser.\r\n\r\n### Repro Steps\r\n\r\n1. Use a Russian IP (Beeline ISP)\r\n2. Try to use `dotnet restore` on any project\r\n3. Wait\r\n\r\n### Expected Behavior\r\n\r\nFunctional NuGet API\r\n\r\n### Screenshots\r\n\r\nWhen using VPN:\r\n![image](https://user-images.githubusercontent.com/21102341/216789830-5effa31c-869d-4979-ba88-ab7d456959f0.png)\r\n\r\nWithout VPN:\r\n![image](https://user-images.githubusercontent.com/21102341/216789850-660b5cba-1dc2-4693-9896-7d2360757cbe.png)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"26874263487","Type":"IssuesEvent","CreatedAt":"2023-02-04T21:10:16","Actor":"zaafonin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9380","RelatedDescription":"Opened issue \"[NuGet.org Bug]: API not available from Russia\" (#9380) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI've been unable to use `dotnet restore`, `dotnet new install` and other features. When enabling verbose output, it seems like my machine cannot access [https://api.nuget.org/v3/index.json](). I'm able to use it, albeit very slowly, through a VPN. Last time I've used .NET (a couple of years ago) this problem wasn't there. `api.nuget.org` is not pingable.\n\n### Repro Steps\n\n1. Use a Russian IP (Beeline ISP)\r\n2. Try to use `dotnet restore` on any project\r\n3. Wait\n\n### Expected Behavior\n\nFunctional NuGet API\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26910909916","Type":"IssuesEvent","CreatedAt":"2023-02-06T23:37:37","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12415","RelatedDescription":"Opened issue \"Validate and show information during pack about missing readme file\" (#12415) at NuGet/Home","RelatedBody":"Validate and show information during pack about missing readme file.\r\nThis is the first step of task https://github.com/NuGet/Home/issues/12070"},{"Id":"26909287848","Type":"IssuesEvent","CreatedAt":"2023-02-06T21:55:56","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12414","RelatedDescription":"Opened issue \"Static graph-based restore improvements for 17.6\" (#12414) at NuGet/Home","RelatedBody":"## Issues\r\n- [ ] https://github.com/NuGet/Home/issues/12372\r\n- [ ] https://github.com/NuGet/Home/issues/12322\r\n- [ ] https://github.com/NuGet/Home/issues/12019\r\n- [ ] https://github.com/NuGet/Home/issues/11761\r\n- [ ] https://github.com/NuGet/Home/issues/11680\r\n- [ ] https://github.com/NuGet/Home/issues/10789\r\n- [ ] https://github.com/NuGet/Home/issues/9026\r\n- [ ] https://github.com/NuGet/Home/issues/9300"},{"Id":"26909168105","Type":"IssuesEvent","CreatedAt":"2023-02-06T21:49:53","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12413","RelatedDescription":"Opened issue \"Central Package Management improvements for 17.6\" (#12413) at NuGet/Home","RelatedBody":"- [ ] https://github.com/NuGet/Home/issues/12270"},{"Id":"26907460404","Type":"IssuesEvent","CreatedAt":"2023-02-06T20:20:29","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12376","RelatedDescription":"Closed issue \"Frequent error on sln restore: System.InvalidOperationException: Collection was modified; enumeration operation may not execute\" (#12376) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nMSBuild.exe\r\n\r\n### Product Version\r\n\r\nMSBuild version 17.5.0-preview-23053-01+ac0911a00 for .NET Framework ; VS 17.5 preview 3\r\n\r\n### Worked before?\r\n\r\nNot sure, I rearely use the command-line to restore\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nWe have a solution with ~80 projets.\r\n\r\nWe use a custom nuget.config on the sln directory, which adds two packages sources (devops and devexpress) and I also jave a custom NuGet.config in %appdata%\\NuGet. Because of the stacktrace, I suppose there is something wrong (no concurrency supported) on some methods related to config and source loading.\r\n\r\nWhen using msbuild /t:Restore xxx.sln, I often receive this error. I have to run multiple retries for the restore to succeed.\r\n\r\nIf I try to build the sln using `msbuild xxx.sln` before, I found that the error occurs less often.\r\n\r\n### Verbose Logs\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(132,5)\r\n: error : Collection was modified; enumeration operation may not execute. [C:\\code\\team\\Travel\\Goyave.sln]\r\n  System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n     at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n     at System.Collections.Generic.Dictionary`2.Enumerator.MoveNext()\r\n     at NuGet.Configuration.UnknownItem.Merge(UnknownItem item)\r\n     at NuGet.Configuration.VirtualSettingSection.Merge(SettingSection other)\r\n     at NuGet.Configuration.NuGetConfiguration.MergeSectionsInto(Dictionary`2 sectionsContainer)\r\n     at NuGet.Configuration.Settings..ctor(IList`1 settingsFiles)\r\n     at NuGet.Configuration.Settings.LoadSettingsForSpecificConfigs(String root, String configFileName, List`1 validSet\r\n  tingFiles, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, Sett\r\n  ingsLoadingContext settingsLoadingContext)\r\n     at NuGet.Configuration.Settings.LoadSettingsGivenSettingsFiles(List`1 settings)\r\n     at NuGet.Configuration.Settings.LoadImmutableSettingsGivenConfigPaths(IList`1 configFilePaths, SettingsLoadingCont\r\n  ext settingsLoadingContext)\r\n     at NuGet.Commands.DependencyGraphSpecRequestProvider.Create(String projectNameToRestore, ExternalProjectReference\r\n  project, HashSet`1 projectReferenceClosure, RestoreArgs restoreArgs, DependencyGraphSpec projectDgSpec, SettingsLoadi\r\n  ngContext settingsLoadingContext)\r\n     at NuGet.Commands.DependencyGraphSpecRequestProvider.<>c__DisplayClass6_0.<GetRequestsFromItems>b__2(String projec\r\n  tNameToRestore)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()\r\n     at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n     at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object <p0>)\r\n```\r\n"},{"Id":"26901893597","Type":"IssuesEvent","CreatedAt":"2023-02-06T16:11:17","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12412","RelatedDescription":"Opened issue \"Package Source Mapping - Re-download and overwrite packages in global package folder for easier onboarding.\" (#12412) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nPackage source mapping currently requires a manual onboarding step of clearing out the global packages folder. \r\n\r\n```\r\ndotnet nuget locals global-packages -c\r\n```\r\n\r\nhttps://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping#manual-onboarding\r\n\r\nTo make this easier for the end-user to have things \"just work\", we should reconsider this step:\r\n\r\n```\r\nWhen you restore packages for a project, NuGet will first look in the global package folder to see if the required packages are already installed there. If they are, NuGet will use them, instead of downloading them again.\r\n```\r\n\r\nInstead, NuGet should overwrite any defined package ID included in source mapping forcing a download so manual steps can be reduced and room for error lessens.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"26901118445","Type":"IssuesEvent","CreatedAt":"2023-02-06T15:42:46","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12411","RelatedDescription":"Opened issue \"Add a template for a \"class library NuGet package\" to `dotnet new` and Visual Studio.\" (#12411) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe, Other/NA\n\n### The Elevator Pitch\n\nCurrently there exists no `dotnet new` template today for a standard class library that follows best packaging guidelines including `<IsPackable>`. There is no additional arguments one can provide to make a file new template a \"package\" archetype either.\r\n\r\nThere's a project of \".NET Boxed\" includes a batteries-included NuGet template which might be a good idea to bring into the SDK & Visual Studio itself:\r\n\r\nhttps://github.com/Dotnet-Boxed/Templates/blob/main/Docs/NuGet.md\r\n\r\nThe `dotnet new` template should include the best practices that the NuGet & .NET team is aware of today such as metadata, modern features, and quality of life enhancements to consumers of said package.\r\n\r\nThe Visual Studio template would also consume this template but perhaps the user interface could include checkboxes that allow one to determine additional information such as what license, including symbols, and how they prefer to ship said symbols.\r\n\r\n![image](https://user-images.githubusercontent.com/1288848/217012620-1242afda-6044-4780-9549-a6989edca87c.png)\n\n### Additional Context and Details\n\n_No response_"},{"Id":"26898365978","Type":"IssuesEvent","CreatedAt":"2023-02-06T14:04:24","Actor":"uweigand","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12410","RelatedDescription":"Opened issue \"\"Too many open files\" error on Linux (on s390x)\" (#12410) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 6.0, 7.0\n\n### Worked before?\n\nn/a\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThe original use case where we ran into this problem was running Red Hat's regression test suite:\r\nhttps://github.com/redhat-developer/dotnet-regular-tests\r\nagainst the Red Hat dotnet RPMs on linux-s390x.\r\n\r\nAfter some investigation, I was able to create a much simpler test case:\r\n1. Create a dotnet project with a non-trivial set of dependencies.  The simplest I found is a `dotnet new xunit` hello world.\r\n2. Create a `nuget.config` that pulls in a large number of repo sources, e.g. along these lines: https://github.com/dotnet/installer/blob/release/6.0.1xx/NuGet.config\r\n3. Start from an empty nuget cache, i.e. removing `~/.nuget/packages` or  setting `NUGET_PACKAGES` to an empty directory.\r\n4. Run `dotnet restore`\r\n\r\nThis results in many many errors along the lines of:\r\n```\r\n  Determining projects to restore...\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/system.io.compression/index.json'.\r\n  Too many open files in system (api.nuget.org:443)\r\n    Too many open files in system\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/1e329448-4305-4ce3-bd4c-fb5718f7a5b1/nuget/v3/flat2/system.reflection.extensions/index.json'.\r\n  Too many open files in system (pkgs.dev.azure.com:443)\r\n    Too many open files in system\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://pkgs.dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_packaging/d1622942-d16f-48e5-bc83-96f4539e7601/nuget/v3/flat2/system.reflection/index.json'.\r\n  Too many open files in system (pkgs.dev.azure.com:443)\r\n    Too many open files in system\r\n  Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/system.io.compression.zipfile/index.json'.\r\n  Too many open files in system (api.nuget.org:443)\r\n    Too many open files in system\r\n```\r\n\r\nNote that the test runner framework employed by `dotnet-regular-tests` implicitly performs steps 2) and 3) above; 2) is done to allow testing dotnet prereleases that may pull in dependencies not yet on `nuget.org`, and 3) is done to ensure reproducible results.\r\n\r\n[ Note also that we're only seeing this on the s390x (IBM Z) architecture, not on Intel.  I wasn't able to figure out any platform-specific code difference that might responsible for that - it seems to simply come down to different I/O timing behavior. ]\r\n\r\nInitial investigation with `strace` confirms that the error message is correct: at the time of failure, we do indeed have 1024 open file descriptors, which is the default limit on Linux.  (While it is possible to increase that limit, this is not done by default, since file handles larger than 1024 cannot be processed via `select` due to the fixed size of the `fd_set` data type, and therefore some applications may no longer work correctly if that limit is extended.)\r\n\r\nThose 1024 open file descriptors for the most part appear to originate from about 500 simultaneous connections to various nuget sources, where each such connection uses two file descriptors - one for the TCP socket, and one for a local lock file.  Those connections are (nearly) all about collecting package metadata, i.e. `index.json` files from many versions of many packages across many nuget sources.\r\n\r\nIn some cases, I was able to collect an exception backtrace, and it looks mostly similar to this:\r\n```\r\nat Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\nat Interop.CheckIo(Error error, String path, Boolean isDirectory, Func`2 errorRewriter)\r\nat Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\nat Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\nat System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\nat System.IO.Strategies.UnixFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\nat System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\nat System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean useAsync)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\nat NuGet.Protocol.FindPackagesByIdNupkgDownloader.<>c__DisplayClass13_0.<ProcessCacheEntryAsync>b__0(CancellationToken lockedToken)\r\nat NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__4`1[[System.IO.FileStream, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\nat NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__4`1[[System.IO.FileStream, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\nat NuGet.Protocol.FindPackagesByIdNupkgDownloader.ProcessCacheEntryAsync(CacheEntry cacheEntry, Func`2 processStreamAsync, CancellationToken token)\r\nat NuGet.Protocol.FindPackagesByIdNupkgDownloader.ProcessNupkgStreamAsync(PackageIdentity identity, String url, Func`2 processStreamAsync, SourceCacheContext cacheContext, ILogger logger, CancellationToken token)\r\nat NuGet.Protocol.FindPackagesByIdNupkgDownloader.GetNuspecReaderFromNupkgAsync(PackageIdentity identity, String url, SourceCacheContext cacheContext, ILogger logger, CancellationToken token)\r\nat NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource.GetDependencyInfoAsync(String id, NuGetVersion version, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\nat NuGet.Commands.SourceRepositoryDependencyProvider.GetDependenciesCoreAsync(LibraryIdentity match, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\nat NuGet.Commands.SourceRepositoryDependencyProvider.<>c__DisplayClass21_0.<<GetDependenciesAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location ---\r\nat NuGet.Commands.SourceRepositoryDependencyProvider.GetDependenciesAsync(LibraryIdentity libraryIdentity, NuGetFramework targetFramework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\nat NuGet.DependencyResolver.ResolverUtility.CreateGraphItemAsync(RemoteMatch match, NuGetFramework framework, SourceCacheContext cacheContext, ILogger logger, CancellationToken cancellationToken)\r\nat NuGet.DependencyResolver.ResolverUtility.FindLibraryEntryAsync(LibraryRange libraryRange, NuGetFramework framework, String runtimeIdentifier, RemoteWalkContext context, CancellationToken cancellationToken)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGraph runtimeGraph, Func`2 predicate, GraphEdge`1 outerEdge, TransitiveCentralPackageVersions transitiveCentralPackageVersions)\r\nat NuGet.DependencyResolver.RemoteDependencyWalker.CreateGraphNode(LibraryRange libraryRange, NuGetFramework framework, String runtimeName, RuntimeGr                        at NuGet.DependencyResolver.RemoteDependencyWalker.WalkAsync(LibraryRange library, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, Boolean recursive)\r\nat NuGet.Commands.ProjectRestoreCommand.WalkDependenciesAsync(LibraryRange projectRange, NuGetFramework framework, String runtimeIdentifier, RuntimeGraph runtimeGraph, RemoteDependencyWalker walker, RemoteWalkContext context, CancellationToken token)\r\nat NuGet.Commands.ProjectRestoreCommand.TryRestoreAsync(LibraryRange projectRange, IEnumerable`1 frameworkRuntimePairs, NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteDependencyWalker remoteWalker, RemoteWalkContext context, Boolean forceRuntimeGraphCreation, CancellationToken token, TelemetryActivity telemetryActivity, String telemetryPrefix)\r\nat NuGet.Commands.RestoreCommand.ExecuteRestoreAsync(NuGetv3LocalRepository userPackageFolder, IReadOnlyList`1 fallbackPackageFolders, RemoteWalkContext context, CancellationToken token, TelemetryActivity telemetryActivity)\r\nat NuGet.Commands.RestoreCommand.ExecuteAsync(CancellationToken token)\r\nat NuGet.Commands.RestoreRunner.ExecuteAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\nat NuGet.Commands.RestoreRunner.ExecuteAndCommitAsync(RestoreSummaryRequest summaryRequest, CancellationToken token)\r\nat NuGet.Commands.RestoreRunner.CompleteTaskAsync(List`1 restoreTasks)\r\nat NuGet.Commands.RestoreRunner.RunAsync(IEnumerable`1 restoreRequests, RestoreArgs restoreContext, CancellationToken token)\r\nat NuGet.Commands.RestoreRunner.RunAsync(RestoreArgs restoreContext, CancellationToken token)\r\nat NuGet.Build.Tasks.BuildTasksUtility.RestoreAsync(DependencyGraphSpec dependencyGraphSpec, Boolean interactive, Boolean recursive, Boolean noCache, Boolean ignoreFailedSources, Boolean disableParallel, Boolean force, Boolean forceEvaluate, Boolean hideWarningsAndErrors, Boolean restorePC, Boolean cleanupAssetsForUnsupportedProjects, ILogger log, CancellationToken cancellationToken)\r\nat NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log) (TaskId:36)\r\n```\r\n\r\nNow, looking at the nuget source code, this doesn't appear to be the result of any obvious bug, it's more of a design issue - in this scenario, nuget really does have to check all these nuget sources for different versions of the dependent packages, and it is indeed better to run those checks in parallel.  That said, it still would seem preferable to at least limit concurrency to the extent that we don't exceed default system limits.\r\n\r\nI also noticed that there *are* in fact two mechanisms in place that appear to have the intent to limit concurrency just so, but they don't work in this particular use case.\r\n\r\nThe first is a limit imposed by `./src/NuGet.Core/NuGet.Protocol/HttpSource/HttpSource.cs` by the `throttle` argument to the `HttpSource` constructor: https://github.com/NuGet/NuGet.Client/blob/419ab86c016778ee3aeab40ea6fee879c09c7365/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpSource.cs#L41\r\nHowever, the default for this throttle appears to be to provide no limitation at all - it gets used only when either the `--disable-parallel` option is given to `dotnet restore`, or if there is a `maxHttpRequestsPerSource` statement in `nuget.config`.\r\nThis actually works (sometimes) for my use case: `--disable-parallel` makes it succeed reliably, but takes are very long time (5 minutes to restore the hello world example); while setting `maxHttpRequestsPerSource` to a low value like 16 makes the restore succeed sometimes (after about 30 seconds), but still fails in other cases, apparently depending on random timing effects.\r\n\r\nThe second mechanism is an extra throttle in `src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs` which was apparently added to address a problem with MacOS only supporting 256 open files by default:   https://github.com/NuGet/NuGet.Client/blob/419ab86c016778ee3aeab40ea6fee879c09c7365/src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs#L47\r\nBut this doesn't work either - it's only enabled on MacOS, not Linux, and even if I do enable it, it still doesn't work reliably.  The latter appears to be due to the fact the throttle isn't applied consistently: while *most* uses of the `_findPackagesByIdResource` callbacks are guarded by the throttle, there is one call to `_findPackagesByIdResource.DoesPackageExistAsync` which isn't.  This looks like an oversight to me ...\r\n\r\nIf I add a throttle guard to that call, and enable the throttle on Linux, `dotnet restore` now succeeds reliably, and takes only about 18 seconds for a full restore from an empty nuget cache.\r\n\r\nI'd appreciate any comments or suggestions on whether this change looks reasonable and might be acceptable upstream, or whether this should be solved in a different way - happy to try other solutions!   For reference, this is the patch I'm currently using - I'd be happy to submit a PR along those lines if you'd like me to.\r\n\r\n```\r\ndiff --git a/src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs b/src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs\r\nindex d859f17fb..4913b1914 100644\r\n--- a/src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs\r\n+++ b/src/NuGet.Core/NuGet.Commands/RestoreCommand/SourceRepositoryDependencyProvider.cs\r\n@@ -44,7 +44,7 @@ public class SourceRepositoryDependencyProvider : IRemoteDependencyProvider\r\n         // Limiting concurrent requests to limit the amount of files open at a time on Mac OSX\r\n         // the default is 256 which is easy to hit if we don't limit concurrency\r\n         private readonly static SemaphoreSlim _throttle =\r\n-            RuntimeEnvironmentHelper.IsMacOSX\r\n+            RuntimeEnvironmentHelper.IsMacOSX || RuntimeEnvironmentHelper.IsLinux\r\n                 ? new SemaphoreSlim(ConcurrencyLimit, ConcurrencyLimit)\r\n                 : null;\r\n\r\n@@ -211,8 +211,27 @@ public class SourceRepositoryDependencyProvider : IRemoteDependencyProvider\r\n                 if (libraryRange.VersionRange?.MinVersion != null && libraryRange.VersionRange.IsMinInclusive && !libraryRange.VersionRange.IsFloating)\r\n                 {\r\n                     // first check if the exact min version exist then simply return that\r\n-                    if (await _findPackagesByIdResource.DoesPackageExistAsync(\r\n-                        libraryRange.Name, libraryRange.VersionRange.MinVersion, cacheContext, logger, cancellationToken))\r\n+                    bool versionExists = false;\r\n+                    try\r\n+                    {\r\n+                        if (_throttle != null)\r\n+                        {\r\n+                            await _throttle.WaitAsync();\r\n+                        }\r\n+\r\n+                        versionExists = await _findPackagesByIdResource.DoesPackageExistAsync(\r\n+                            libraryRange.Name,\r\n+                            libraryRange.VersionRange.MinVersion,\r\n+                            cacheContext,\r\n+                            logger,\r\n+                            cancellationToken);\r\n+                    }\r\n+                    finally\r\n+                    {\r\n+                        _throttle?.Release();\r\n+                    }\r\n+\r\n+                    if (versionExists)\r\n                     {\r\n                         return new LibraryIdentity\r\n                         {\r\n```\r\n\r\nRelated issues for reference:\r\nhttps://github.com/NuGet/Home/issues/2004\r\nhttps://github.com/NuGet/Home/issues/2163\r\nhttps://github.com/NuGet/Home/issues/8571\r\n\r\nFYI @omajid @tmds @crummel\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"26889138327","Type":"IssuesEvent","CreatedAt":"2023-02-06T07:20:20","Actor":"yaakov-h","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12409","RelatedDescription":"Opened issue \"Solution-Level or Repo-Level Lock Files\" (#12409) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nManaging multiple project lock files for a huge solution or a repo can be daunting. This was even called out in 2019 when lock files were introduced:\r\n\r\nhttps://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/#solution-or-repo-lock-file\r\n\r\nHas there been any further thought or development on solution-level or repository-level lock files?\r\n\r\nThe link in those paragraphs doesn't contain any further information on centralised lock files, only on centralised versioning, and I can't find any related issues here on GitHub either.\n\n### Additional Context and Details\n\nThis is particularly important to me as I don't want to have to go and update approx. 1000 csproj files when updating a core package such as a Roslyn Analyzers package, or Newtonsoft.Json, or similar.\r\n\r\nThis also gets much more difficult when multiple developers are trying to make changes (e.g. adding a ProjectReference which adds new transitive NuGet dependencies, which I believe requires updating the lock file?), and looks like it will quite quickly lead to merge conflict hell.\r\n\r\nIn many of our projects already use [Paket](http://github.com/fsprojects/Paket), which provides a single top-level lock file for all dependencies defined in a `paket.dependencies` file (analogous to `nuget.config` + `Directory.Packages.props`). This makes batch operations such as upgrading or downgrading a package across an entire repo a fairly easy and straightforward process. Changes to individual projects require no changes outside of their own project files (`.csproj` + `paket.references`) and as such enable many type of concurrent changes to be made without file merge conflicts."},{"Id":"26865433788","Type":"PullRequestEvent","CreatedAt":"2023-02-03T22:59:41","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12408","RelatedDescription":"Opened pull request \"FabricBot: fix a condition when switching \"waiting for\" label\" (#12408) at NuGet/Home","RelatedBody":"Fix a condition when switching \"waiting for\" label."},{"Id":"26863671720","Type":"IssuesEvent","CreatedAt":"2023-02-03T20:58:36","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12407","RelatedDescription":"Opened issue \"Plan for NuGet in 2023\" (#12407) at NuGet/Home","RelatedBody":"Today we are excited to share with you the plan for NuGet and NuGet.org. This issue contains summary of the plan for the year and acts as a place for you to leave feedback.\r\n\r\nThis plan is a collection of input from many stakeholders and outlines where we intend to invest our time in NuGet and NuGet.org.\r\n\r\n> **IMPORTANT**\r\n> This plan is not a commitment; it will evolve as we continue to learn throughout the release. Some things that are not currently planned for NuGet may get pulled in. Some things currently planned may even be pushed out.\r\n\r\n# General information\r\n\r\nNuGet has a major release following [NuGet 6.4](https://docs.microsoft.com/nuget/release-notes/nuget-6.4) and is currently scheduled for release in November 2023 at the same time as .NET 8.\r\n\r\nNuGet will align with the [.NET support policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core) and will therefore be a long-term support (LTS) release.\r\n\r\nNuGet.org does not currently follow any specific schedule and releases features & bug fixes regularly throughout the year.\r\n\r\n### Breaking changes\r\n\r\nNuGet may contain a small number of breaking changes as we continue to evolve NuGet with the .NET platform. Our goal is to minimize breaking changes as much as possible to keep you productive when upgrading. You'll be able to find them at the [.NET 8 Breaking Changes](https://learn.microsoft.com/en-us/dotnet/core/compatibility/8.0).\r\n\r\n## Themes\r\n\r\nThe large investments in NuGet are the following themes:\r\n\r\n### Highly Requested Features\r\n\r\nAs always, a major input into our planning process comes from [votes (👍) for features on GitHub](https://github.com/NuGet/Home/blob/dev/CONTRIBUTING.md#before-submitting-an-issue).\r\n\r\nThese features are areas we are actively engaged in with regards to designing, implementing, and polishing the respective experiences for.\r\n\r\n#### Security\r\n\r\n- https://github.com/NuGet/Home/issues/8087\r\n- https://github.com/NuGet/Home/issues/1851\r\n- https://github.com/NuGet/Home/issues/11262\r\n- https://github.com/NuGet/Home/issues/10730\r\n- https://github.com/NuGet/Home/issues/12015\r\n\r\n#### Tooling\r\n\r\n- https://github.com/NuGet/Home/issues/9015\r\n\r\n#### Season of Giving\r\n\r\n- https://github.com/NuGet/Home/issues/7752\r\n- https://github.com/NuGet/Home/issues/8476\r\n- https://github.com/NuGet/Home/issues/8420\r\n- https://github.com/NuGet/Home/issues/7912\r\n- https://github.com/NuGet/Home/issues/6938\r\n- https://github.com/NuGet/Home/issues/6437\r\n- https://github.com/NuGet/Home/issues/6279\r\n- https://github.com/NuGet/Home/issues/6060\r\n- https://github.com/NuGet/Home/issues/5713\r\n- https://github.com/NuGet/Home/issues/5556\r\n- https://github.com/NuGet/Home/issues/5138\r\n- https://github.com/NuGet/Home/issues/4879\r\n- https://github.com/NuGet/Home/issues/4855\r\n- https://github.com/NuGet/Home/issues/4254\r\n- https://github.com/NuGet/Home/issues/4103\r\n\r\n#### NuGet Gallery\r\n\r\n- https://github.com/NuGet/NuGetGallery/issues/3098\r\n- https://github.com/NuGet/NuGetGallery/issues/8773\r\n- https://github.com/NuGet/NuGetGallery/issues/8964\r\n- https://github.com/NuGet/NuGetGallery/issues/9339\r\n- https://github.com/NuGet/NuGetGallery/issues/7297\r\n\r\n### .NET Platforms and Ecosystem\r\n\r\nMuch of the work planned for NuGet involves improving the package management experience for .NET across different platforms and ecosystem. This involves work in NuGet to ensure a great experience across .NET technologies.\r\n\r\n- https://github.com/NuGet/Home/issues/10430\r\n- https://github.com/NuGet/Home/issues/10872\r\n- https://github.com/NuGet/Home/issues/5154\r\n\r\n### Migrating to .NET\r\n\r\nNuGet has always [supported many scenarios for package management](https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference). In our continued efforts to help you migrate to the latest version of .NET, we will be working on improvements to the [Upgrade Assistant](https://github.com/dotnet/upgrade-assistant) and core package management experiences to help you migrate your project to use the latest version of NuGet.\r\n\r\n## Performance\r\n\r\nWith each [new release of NuGet & Visual Studio comes a plethora of performance improvements](https://devblogs.microsoft.com/visualstudio/performance-improvements-in-nuget/) when restoring NuGet packages, managing project dependencies, and browsing for the next great package to include in your solution. We will continue to invest time to improve your experiences every .NET & Visual Studio release.\r\n\r\n# Feedback\r\n\r\nYour feedback is important to us. The best way to indicate the importance of an issue is to vote (👍) for that [issue on GitHub](https://github.com/NuGet/Home/issues) and [Visual Studio Developer Community](https://developercommunity.visualstudio.com/). We use this data to help us with our regular planning so we can work on the things that matter most to you.\r\n\r\nPlease **comment on this issue** if you believe we are missing something that is critical for NuGet, or are focusing on the wrong areas. Give us a little bit of context as to why you believe so and feel free to upvote each other's comments to help us make changes to our future plans.\r\n\r\nHuge thanks to @ajcvickers and the Entity Framework Core team for a wonderful format and forum to discuss product plans in OSS. 🎉\r\n\r\nLast year's plan can be found in https://github.com/NuGet/Home/issues/11571"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":47,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-02-07T03:30:25.3125256Z","RunDurationInMilliseconds":1301}