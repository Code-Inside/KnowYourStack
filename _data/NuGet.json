{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"31016764254","Type":"IssuesEvent","CreatedAt":"2023-08-09T23:29:25","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9616","RelatedDescription":"Opened issue \"[NuGet.org Bug]: It is very slow to load the package details page for packages with many versions\" (#9616) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nIt takes seconds to load the package details page for packages with many versions.\n\n### Repro Steps\n\n1. Go to https://www.nuget.org/packages/AWSSDK.Core.\r\n2. It takes seconds to load this page.\n\n### Expected Behavior\n\nAs more and more package versions are published, loading all package versions may not be an ideal UI experience.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"30991776425","Type":"IssuesEvent","CreatedAt":"2023-08-09T05:34:05","Actor":"cremor","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9615","RelatedDescription":"Opened issue \"[Feature]: NuGet.org should show framework references\" (#9615) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI am trying to figure out if a specific package has a `<frameworkReference>`. I'm unable to see this on NuGet.org, instead I have to open the NuGet Package Explorer and go to the \"Dependencies\" tab there.\n\n### The Elevator Pitch\n\nThe \"Frameworks\" tab on NuGet.org should also show framework references.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"30987622399","Type":"PullRequestEvent","CreatedAt":"2023-08-08T23:57:19","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9614","RelatedDescription":"Opened pull request \"Make search collapsible\" (#9614) at NuGet/NuGetGallery","RelatedBody":"I made the advanced search collapsible on narrow screens.\r\n\r\nBefore:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/7be0bf38-cb88-44b4-8a75-c12148666866)\r\n\r\n\r\nAfter:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/b8f08692-94ed-46f8-9d34-5dba8549ba63)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/8cc48514-f149-46b9-8d93-e55091c6c947)\r\n\r\nThere are details in the problem description that I didn't change (removing sort-by and putting filters below packages returned) because I talked with PM and designers and we didn't find these changes useful.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9374ery/issues/123"},{"Id":"30987586624","Type":"PullRequestEvent","CreatedAt":"2023-08-08T23:53:57","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9613","RelatedDescription":"Closed pull request \"Make search collapsible\" (#9613) at NuGet/NuGetGallery","RelatedBody":"I made the advanced search collapsible on narrow screens.\r\n\r\nBefore:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/dfebb221-8f79-45ee-92b3-a60417f9b06b)\r\n\r\nAfter:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/4482e612-6d3b-4e4b-918d-c521c56c88a8)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/9007b134-1713-47c1-9585-6737fd8a319e)\r\n\r\n\r\nThere are details in the problem description that I didn't change (removing sort-by and putting filters below packages returned) because I talked with PM and designers and we didn't find these changes useful.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9374"},{"Id":"30987549183","Type":"PullRequestEvent","CreatedAt":"2023-08-08T23:50:17","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9613","RelatedDescription":"Opened pull request \"Make search collapsible\" (#9613) at NuGet/NuGetGallery","RelatedBody":"I made the advanced search collapsible on narrow screens.\r\n\r\nBefore:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/dfebb221-8f79-45ee-92b3-a60417f9b06b)\r\n\r\nAfter:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/4482e612-6d3b-4e4b-918d-c521c56c88a8)\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/58230697/9007b134-1713-47c1-9585-6737fd8a319e)\r\n\r\n\r\nThere are details in the problem description that I didn't change (removing sort-by and putting filters below packages returned) because I talked with PM and designers and we didn't find these changes useful.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9374"},{"Id":"30985062940","Type":"IssuesEvent","CreatedAt":"2023-08-08T21:00:59","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9612","RelatedDescription":"Opened issue \"NuGet.exe and NuGet Packages Support Policy\" (#9612) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"31012278365","Type":"IssuesEvent","CreatedAt":"2023-08-09T19:12:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12424","RelatedDescription":"Closed issue \"NU5104 (stable package should not use prerelease) should not warn when upper version uses -0\" (#12424) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\nall\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nNU5104 basically says that SemVer stable versions of packages should not take dependencies on prelreease versions of packages. According to https://github.com/NuGet/Home/issues/6434#issuecomment-1323572424 this warning triggers when the version range `[1.0.0, 2.0.0-0)` is specified.\r\n\r\nHowever, and upper exclusive range of `2.0.0-0` explicitly means that no pre-release version of 2.0.0 will match since `-0` is the lowest possible prerelease version, and exclusive bound means that it won't allow the exact match. Therefore, the `-0` and the NU5104 are trying to achieve the exact same thing, so it shouldn't be warning.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"31008149119","Type":"IssuesEvent","CreatedAt":"2023-08-09T16:08:57","Actor":"DaleMckeown","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12803","RelatedDescription":"Opened issue \"CPM - Provide option to explicitly use version tags\" (#12803) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nCurrently, when CPM is used and new NuGet packages are added to a solution, the `Version` attribute is added to the `PackageReference` in the `Directory.Packages.props` file.\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore\" Version=\"7.0.10\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen it comes to git usage, this causes issues when dependency updating tools such as Dependabot are used, because git uses the line before and after to detect changes. If consecutive packages are updated in the same Dependabot run, this will cause merge conflicts, which require manual intervention to fix.\n\n### Desired Behavior\n\nThe git conflicts are really easy to fix by explicitly using version tags in the package reference, like so:\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore\">\r\n      <Version>7.0.10</Version>\r\n    </PackageVersion>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen adding new packages to a solution, we have to remember to manually amend the package references to this format. It would be better if we could specify a flag that would enforce NuGet to use the explicit version tags automatically, instead of using the inline string.\r\n\r\nA property such as `UseExplicitPackageVersionTags` could be used to enable this behaviour.\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    <UseExplicitPackageVersionTags>true</UseExplicitPackageVersionTags>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Microsoft.EntityFrameworkCore\">\r\n      <Version>7.0.10</Version>\r\n    </PackageVersion>\r\n  </ItemGroup>\r\n</Project>\r\n```\n\n### Additional Context\n\nThis would improve the developer experience for CPM users, where package update processes are in place."},{"Id":"30997004723","Type":"IssuesEvent","CreatedAt":"2023-08-09T09:25:58","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8275","RelatedDescription":"Closed issue \"Hard to see the border of “Preview Changes” window when installing a package into a new project in Dark theme\" (#8275) at NuGet/Home","RelatedBody":"## Details about Problem\r\nVS Version: D16.2stg 29027.113\r\nOS Version: 17763.RS5_Release.180914-1434.\r\nInstallation:\r\nInstall VS: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2806963&view=results\r\nInstall NuGet: \\\\\\ddfiles\\Drops\\NuGet\\Drops\\CI\\NuGet.Client\\Dev\\5.2.0.6067\\artifacts\\VS15\\NuGet.Tools.vsix\r\n## Detailed repro steps\r\n1. Launch Visual Studio 2019 and select “Dark” as the theme.\r\n2. Create a new C# Console App (.Net Core) project and open PM UI in Solution Explorer window.\r\n3. Install a package (e.g. NUnit) into the project.\r\n4. Observe “Preview Changes” window.\r\n## Expected\r\nThe “Preview Changes” window can be distinguished by its border.\r\n## Actual\r\nHard to see the border of “Preview Changes” window when installing a package into a new project in Black theme as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/60335050-7d3de880-99cf-11e9-86ab-a7bae58bd728.png)\r\n## Note\r\nSimilar bug 891275 has been fixed. \r\n"},{"Id":"30996440371","Type":"IssuesEvent","CreatedAt":"2023-08-09T09:05:16","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3204","RelatedDescription":"Closed issue \"Solution Package Manager UI version combo-box gets clipped in default layout of VS\" (#3204) at NuGet/Home","RelatedBody":"**Repro Steps:**\n1. Create a new C# ConsoleApplication.\n2. Right-click the solution and select “Manage NuGet Packages for Solution…”.\n3. Click “Browse” tab and click anyone package.\n4. Look at the version combo-box on the right pane.\n\n**Expected Result:**\nThe drop-down button (on the right of the version combo-box) show correctly.\n\n**Actual Result:**\nThe drop-down button get clipped as below screenshot.\n![dropdownbuttonlostindefaultlayout](https://cloud.githubusercontent.com/assets/20632775/17096548/72d232e4-528c-11e6-9a98-7758a3fd2eb9.png)\n\n**Note:**\n1. The issue also repro on VS2015Update3 w/ NuGet 3.4.4.\n2. It doesn’t repro in the project level Package Manager UI for the same scenario.\n3. It will never repro after you resize the NuGet-Solution window to the right and repro again when you reset the window layout. Please see attached record\n[DropDownButtonLostInDefaultLayout.zip](https://github.com/NuGet/Home/files/381126/DropDownButtonLostInDefaultLayout.zip).\n"},{"Id":"30985526846","Type":"IssuesEvent","CreatedAt":"2023-08-08T21:26:11","Actor":"jhennessey","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12801","RelatedDescription":"Opened issue \"CPM: PackageVersion metadata should be copied to PackageReference items\" (#12801) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe\n\n### Current Behavior\n\n- When using the NuGet Central Package Management feature, if additional metadata is defined on the `PackageVersion` item it is not copied to the corresponding `PackageReference`. I am specifically interested in the `PrivateAssets` metadata. I realize that the `PackageReference` can specify this, but it easier to do this in the global package `.props` file instead of requiring all projects to specify it.\n\n### Desired Behavior\n\nAny metadata specified on the `PackageVersion` item should be copied to the corresponding `PackageReference` item. If the `PackageReference` already contains a value for the specified metadata then it should probably take precedence over the global value.\n\n### Additional Context\n\nThe [Microsoft.Build.CentralPackageVersions](https://github.com/microsoft/MSBuildSdks/tree/main/src/CentralPackageVersions) implementation handled this without issue because it relied on using `<PackageReference Update=\"xyz\" />` instead of mapping a different item."},{"Id":"30972194694","Type":"IssuesEvent","CreatedAt":"2023-08-08T12:27:18","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12800","RelatedDescription":"Opened issue \"NuGet warnings and errors for non-SDK PackageReference projects disappear from VS's error list\" (#12800) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS17.7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nCreate a .NET Framework (non-SDK style) project, and using PackageReference as the package format, install NuGet.Protocol version 6.6.0, and Newtonsoft.Json 9.0.1.\r\n\r\nThe first time you try to build, you'll see a NU1605 warning in the Error List.  Try to build a second time, and the NU1605 disappears. Closing the project and reloading it will add it to the Error List again after the first restore/build, until the second time you build.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30967771971","Type":"IssuesEvent","CreatedAt":"2023-08-08T09:32:56","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11940","RelatedDescription":"Closed issue \"[Cross-platform sign Verify] The expected error/warning disappeared after restoring the project on Mac\" (#11940) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.3.0.102\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n## Repro steps\r\n1. Git clone [https://github.com/NuGet/Entropy.git](https://github.com/NuGet/Entropy.git)\r\n2. Set the following parameters in “pathOnUnix.ps1” file:\r\n    a. The SDK channel must be: 6.0.4xx\r\n    b. The SDK version should be:  latest\r\n    c. Add a -Quality/--quality argument with a value of: signed\r\n3. Cd /home/nuget/Desktop/SDKPatchTool/ and type in command './patchOnUnix.ps1'\r\n4. Create a new test certificate: ` .\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority -Password password -GenerateCerFile`\r\n5. Sign a package:` NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath>` on NuGet path.\r\n6. Copy the.pfx file/.cer file and signed package from the above Windows machine to Mac machine.\r\n7. Add the certificate to trusted store: \r\n`sudo security add-trusted-cert -d -r trustRoot -k \"/Library/KeyChains/System.keychain\" \"<cerFilePath>\"`\r\n8. Trusted Certificate:  \r\n     a. Copy the PFX file to your Mac machine.\r\n    b. Open a Terminal window and execute:\r\n    `    openssl pkcs12 -in <PfxFilePath> -out <PemFilePath> -nokeys`\r\n        When prompted, enter the PFX password.\r\n    c. Open the PEM file created in step 3.\r\n   d. Copy the entire block labelled with BEGIN CERTIFICATE/END CERTIFICATE:\r\n-----BEGIN CERTIFICATE-----\r\n…\r\n-----END CERTIFICATE-----\r\n\r\n  e. In the versioned directory of your patched .NET SDK open ./trustedroots/codesignctl.pem.\r\n  f. At the end of the file on a new blank line, paste the copied certificate in PEM format.\r\n  g. Save the file.\r\n\r\n8. Create a project, add package reference in the .csproj file\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"<packageName>\" Version=\"<packageVersion>\" />\r\n  </ItemGroup>\r\n```\r\n9. Add the feed (path contains the signed package), set required mode in nuget.config file with trusted signers list:\r\n  ```\r\n  <packageSources>\r\n      <add key=\"<anyname>\" value=\"<signed package parent folder>\" />\r\n     <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n   </packageSources>\r\n   <config>\r\n    <add key=\"signatureValidationMode\" value=\"require\" />\r\n   </config>\r\n  <trustedSigners>\r\n     <author name=\"JamieZhang\">       \r\n         <certificate fingerprint=\"AAAAA\" hashAlgorithm=\"SHA256\" allowUntrustedRoot=\"false\" />\r\n     </author>\r\n  </trustedSigners>\r\n```\r\n10. Clear the cache: <patchedSDKPath>`./dotnet nuget locals all –clear`.\r\n11. Delete the <projectPath>/obj folder if there is any.\r\n12. Set the envrioment:\r\n  `export DOTNET_NUGET_SIGNATURE_VERIFICATION=true`\r\n13. Go inside the project folder, verify the package by running restore: <patchedSDKPath>`./dotnet restore <projectpath>/<projectname>.csproj`\r\n\r\n## Expected\r\nThe expected error/warning should show after restoring the project.\r\n\r\n## Actual\r\nThe expected error/warning disappeared after restoring the project.\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"30965767239","Type":"IssuesEvent","CreatedAt":"2023-08-08T08:18:20","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10015","RelatedDescription":"Closed issue \"16.10: remove package source 1.0 service. remove obsolete APIs (in nuget.configuration that we added in 16.8)\" (#10015) at NuGet/Home","RelatedBody":"Per @zivkan comment in PR: https://github.com/NuGet/NuGet.Client/pull/3649/files/e70389d28297073fc21d7d03a28c27143c66f290#r485233215\n\nConsider approach for codespaces and these apis:\nNuGet.Configuration.IPackageSourceProvider2\nNuGet.Configuration.IPackageSourceProvider2.SavePackageSources(System.Collections.Generic.IEnumerable<NuGet.Configuration.PackageSource> sources, NuGet.Configuration.PackageSourceUpdateOptions packageSourceUpdateOptions) -> void\nNuGet.Configuration.PackageSourceProvider.SavePackageSources(System.Collections.Generic.IEnumerable<NuGet.Configuration.PackageSource> sources, NuGet.Configuration.PackageSourceUpdateOptions sourceUpdateSettings) -> void\nNuGet.Configuration.PackageSourceUpdateOptions\nNuGet.Configuration.PackageSourceUpdateOptions.PackageSourceUpdateOptions(bool updateCredentials, bool updateEnabled) -> void\nNuGet.Configuration.PackageSourceUpdateOptions.UpdateCredentials.get -> bool\nNuGet.Configuration.PackageSourceUpdateOptions.UpdateEnabled.get -> bool\nstatic readonly NuGet.Configuration.PackageSourceUpdateOptions.Default -> NuGet.Configuration.PackageSourceUpdateOptions"},{"Id":"30965767104","Type":"IssuesEvent","CreatedAt":"2023-08-08T08:18:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12776","RelatedDescription":"Closed issue \"Disabling nuget.org in VS options creates a second nuget.org in nuget.config\" (#12776) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.8 preview 1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nFrom an internal email:\r\n\r\n1.\tLaunch VS 17.8 preview 1 and Simulate offline in VM by uncheck all the package sources and click “OK” in VS.\r\n \r\n    ![image](https://github.com/NuGet/Home/assets/5030577/a713f81b-86d4-4056-9262-da3d1aaee358)\r\n\r\n2.\tAfter step1,  extra feed will be added in NuGet.Config file.\r\n\r\n    ![image](https://github.com/NuGet/Home/assets/5030577/3a79ef98-30e7-4c45-8552-f94bdae8aa1c)\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"},{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-08-10T03:30:22.007805Z","RunDurationInMilliseconds":1010}