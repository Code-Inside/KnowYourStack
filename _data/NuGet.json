{"Data":{"Blog":{"FeedItems":[{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13144755749","Type":"PullRequestEvent","CreatedAt":"2020-08-08T00:04:32","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8147","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.08.07] RI of dev into master\" (#8147) at NuGet/NuGetGallery","RelatedBody":"Deployment work item: https://github.com/NuGet/NuGetGallery/issues/8145"},{"Id":"13144655492","Type":"PullRequestEvent","CreatedAt":"2020-08-07T23:43:12","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8148","RelatedDescription":"Opened pull request \"Document how to use AAD\" (#8148) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13143026844","Type":"PullRequestEvent","CreatedAt":"2020-08-07T19:11:24","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8144","RelatedDescription":"Merged pull request \"When V1 Odata requests OrderBy is invalid, return 400\" (#8144) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/3308\r\n\r\nThis causes monitoring noise."},{"Id":"13142707067","Type":"IssuesEvent","CreatedAt":"2020-08-07T18:27:57","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8094","RelatedDescription":"Closed issue \"Autocomplete APIs dont show .NET 5.0 prerelease packages\" (#8094) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI am seeing inconsistent results via the web interface and the autocomplete API. Am I doing something wrong?\r\n\r\nThe web interface shows me pre-release versions of .NET 5 packages: https://www.nuget.org/packages/runtime.linux-x64.Microsoft.NETCore.DotNetAppHost/5.0.0-preview.6.20305.6\r\n\r\nThe autocomplete API doesn't. I tried:\r\n- https://api-v2v3search-0.nuget.org/autocomplete?id=runtime.linux-x64.Microsoft.NETCore.DotNetAppHost&prerelease=true\r\n- https://azuresearch-usnc.nuget.org/autocomplete?id=runtime.linux-x64.Microsoft.NETCore.DotNetAppHost&prerelease=true\r\n\r\nNeither does the search API:\r\n\r\n- https://azuresearch-usnc.nuget.org/query?q=runtime.linux-x64.Microsoft.NETCore.DotNetAppHost&prerelease=true\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Point your browser to\r\n- https://www.nuget.org/packages/runtime.linux-x64.Microsoft.NETCore.DotNetAppHost/5.0.0-preview.6.20305.6\r\n- https://api-v2v3search-0.nuget.org/autocomplete?id=runtime.linux-x64.Microsoft.NETCore.DotNetAppHost&prerelease=true\r\n\r\n### Expected behavior\r\nThe website and search API show consistent view of packages. Right now, the webiste shows the pre-release versions. I dont seem them via the nuget APIs"},{"Id":"13142636055","Type":"IssuesEvent","CreatedAt":"2020-08-07T18:18:44","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8131","RelatedDescription":"Closed issue \"NuGet Package Manager Browse tab search results are unordered and too broad\" (#8131) at NuGet/NuGetGallery","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1100552/nuget-package-manager-browse-tab-search-results-ar.html)._\n\n---\nIn ther latest versions of Visual Studio (e.g., 16.6.1), searching for a package on the Browse tab of the NuGet Package Manager seems to be doing a full-text search and returning the thousands of results in a random order.  \n\nFor example, when I search for the Newtonsoft.Json package, the results that come back seem to contain either Newtonsoft or Json somewhere in the name, description, or dependencies(?).  There seems to be no ordering for quality of match with the package name or anything that would make it reasonable to find the package to install it in my current project.  For my example search, the Newtonsoft.Json package I was searching for was result number 656 in the list returned.  This makes the tool virtually unusable and I have resorted to using nuget.org to find the packages/versions and manually editing the csproj files rather than wasting my time trying to find them in this tool.\n\n---\n### Original Comments\n\n#### Feedback Bot on 7/2/2020, 07:06 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Feedback Bot on 7/28/2020, 05:10 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n#### Feedback Bot on 7/28/2020, 05:11 PM: \n\n<p>Thank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\">https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq</a>. In case you need answers to common questions or need assisted support, be sure to use <a target='_blank' href=\"https://visualstudio.microsoft.com/vs/support/\">https://visualstudio.microsoft.com/vs/support/</a>. We’ll keep you posted on any updates to this feedback.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"13142624829","Type":"IssuesEvent","CreatedAt":"2020-08-07T18:17:17","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8142","RelatedDescription":"Closed issue \"nuget server packagesPath using a URL\" (#8142) at NuGet/NuGetGallery","RelatedBody":"I would love to be able to give my local nuget server an url for its packages source, could it be possible? My packages would be hosted on a s3 bucket."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13149047990","Type":"IssuesEvent","CreatedAt":"2020-08-09T02:09:27","Actor":"miniv","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9889","RelatedDescription":"Opened issue \"GeneratePathProperty should automatically populate package path variables for package dependencies transitively\" (#9889) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): **msbuild16 using PackageReference in csproj**\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): **msbuild16**\r\n\r\nVS version (if appropriate): \r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version: **No, didn't work**\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nWhen GeneratePathProperty is specified in a PackageReference, please populate package path variables for that package's dependencies transitively. We have run into issues where props/targets files associated with the package in the PackageReference need path variables for package dependencies and they are not populated correctly.\r\n\r\nSetup:\r\n- Nuget Package A that depends on Nuget Package B\r\n- A targets file in Package A needs package path variable for Package B\r\n- Application XYZ has PackageReference (with GeneratePathProperty=\"true\") to Package A and uses the above targets file from Package A to build\r\n- Package path variable for Package B is not populated and build fails\r\n\r\n\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"13145416360","Type":"IssuesEvent","CreatedAt":"2020-08-08T03:20:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9881","RelatedDescription":"Closed issue \"Static graph restore is inconsistent wrt to the CrossTargeting property in compared to VS & regular msbuild evaluation restore \" (#9881) at NuGet/Home","RelatedBody":"Take the following project: \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net5.0</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nRun all three restores and look at the dgspec json\r\n\r\n* Regular restore => crossTargeting=\"true\" \r\n* Static Graph restore => crossTargeting=\"false\"\r\n* VS restore => crossTargeting=\"true\"\r\n\r\nIn fact VS has a specific check for that: https://github.com/NuGet/NuGet.Client/blob/0b2568615d61e9f9393d597cb806f02af1b40a78/src/NuGet.Clients/NuGet.SolutionRestoreManager/VsSolutionRestoreService.cs#L233-L242. \r\n\r\nNow the impact here is minor given that static graph is experimental & occasions of project files like the above are rare, but still worth fixing. "},{"Id":"13145416354","Type":"IssuesEvent","CreatedAt":"2020-08-08T03:20:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9870","RelatedDescription":"Closed issue \"In static graph restore, with multi targeted projects, NuGet should read the target framework related information from the inner build.\" (#9870) at NuGet/Home","RelatedBody":"Child of: #9756\r\n\r\nCurrently in command line scenarios NuGet reads the target framework information in the outer build.\r\nThat is incorrect because the the contract is that we should depend on on TargetFrameworkIdentifier and the like properties.\r\nWe do that here: https://github.com/NuGet/NuGet.Client/blob/bd482514a87a0085f8eb8603842ee1cb3ca5f277/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L500-L526\r\n\r\nThis task covers, the static graph restore changes. "},{"Id":"13143773038","Type":"IssuesEvent","CreatedAt":"2020-08-07T20:58:57","Actor":"zpep92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9888","RelatedDescription":"Opened issue \"NuGet Package Update Automation\" (#9888) at NuGet/Home","RelatedBody":"I am facing an issue with automating NuGet package update operations.  These commands had leveraged the NuGet.Core library for automating the process of applying NuGet updates to project files, but that library looks to have long since been deprecated.  \r\n\r\nThere is an issue with upgrading netstandard2.0 packages within a project (TargetFrameworkVersion 4.7.2). The debug message flow from PackageManager is:\r\n\r\n-----------------------------------------------\r\n> Looking for updates for 'MYPACKAGE'...\r\n\r\n> Updating 'MYPACKAGE' from version 'x.y.z' to 'a.b.c' in project 'MYPROJECT'.\r\n\r\n> Removing 'MYPACKAGE x.y.z' from MYPROJECT.\r\n\r\n> Added file 'packages.config'.\r\n> Successfully removed 'MYPACKAGE x.y.z' from MYPROJECT.\r\n\r\n> Adding 'MYPACKAGE a.b.c' to MYPROJECT.\r\n-----------------------------------------------\r\nAt which point a \"MYPROJECT does not reference 'MYPACKAGE'\" error is thrown.\r\n\r\n\r\nThe project is still using packages.config file to manage its NuGet package references.  NuGet packages are used to split and package code from various modules which are consumed by an application project.  An automated process in Azure DevOps pipelines is used to update those packages and push out to a CI environment for testing.\r\n\r\n\r\nI have looked at the following scenarios unsuccessfully on how to upgrade our process to support newer netstandard2.0 packages:\r\n\r\n-----------------------------------------------\r\n01: Update NuGet.Core version\r\n-> Library is deprecated, no newer version to upgrade to\r\n\r\n02: NuGet.exe version update (to version 5.6.0)\r\n-> NuGet version update has no effect on underlying NuGet.Core code\r\n\r\n03: Leverage built-in NuGet supported tasks within Azure DevOps\r\n-> NuGet.exe CLI does not support our necessary functions\r\n    -> .csproj file is not updated with assembly references\r\n    -> Files contained within NuGet packages are not updated/extracted as anticipated\r\n\r\n04: Leverage commands supported by Visual Studio NuGet Package Manager Console\r\n-> Commands can only be run within Visual Studio (no support for automation from command line)\r\n\r\n-----------------------------------------------\r\n\r\n\r\nWhat options does NuGet currently support for updating/managing package installations in automated fashion (such as from a CLI)?\r\nIs there an option that has feature parity with the Visual Studio Package Manager Console?\r\n\r\nAre there any libraries that have superseded NuGet.Core for programmatically updating NuGet packages? \r\nIs there a recommended migration path (with accompanying documentation)?\r\n\r\n"},{"Id":"13143136660","Type":"IssuesEvent","CreatedAt":"2020-08-07T19:26:29","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9887","RelatedDescription":"Opened issue \"Details Pane Versions Dropdown default selection should be Installed/LatestStable on Installed/Updates tabs\" (#9887) at NuGet/Home","RelatedBody":"My recent change to not refresh the Updates tab when switching from Installed does not change the selected Version dropdown as it previously did. \r\n\r\n- Installed Tab should select Installed Version in the dropdown.\r\n- Updates Tab should select Latest Stable in the dropdown.\r\n\r\n![Latest version Update tab](https://user-images.githubusercontent.com/49205731/89680642-58e65800-d8c1-11ea-80ee-f6bb9c2924f3.gif)\r\n_courtesy of @chgill-MSFT_\r\n\r\nComments from @chgill-MSFT :\r\n> If I recall correctly, when the tab switch to the Update tab used to trigger a refresh, we should show the latest available version in the \"Version:\" box by default to make it a one-click experience to update. Since the tab switch doesn't refresh anymore, it doesn't show the latest available version in the box.\r\n\r\n> ... the plan with the floating version PMUI work is to make it show requested version in the installed tab"},{"Id":"13142827364","Type":"IssuesEvent","CreatedAt":"2020-08-07T18:44:19","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9886","RelatedDescription":"Opened issue \"net5.0 TFM may need to be cleared from some projects\" (#9886) at NuGet/Home","RelatedBody":"For now, we added net5.0 for the following projects, \r\nsrc: (12)\r\n```\r\nMicrosoft.Build.NuGetSdkResolver\r\nNuGet.Build.Tasks\r\nNuGet.Build.Tasks.Console\r\nNuGet.CommandLine.Xplat\r\nNuGet.Commands\r\nNuGet.Credentials\r\nNuGet.DependencyResolver.Core\r\nNuGet.Packaging\r\nNuGet.Packaging.Core\r\nNuGet.ProjectModel\r\nNuGet.Protocol\r\nNuGet.Resolver\r\n```\r\ntest: (23)\r\n```\r\nMicrosoft.Build.NuGetSdkResolver.Tests\r\nNuGet.Build.Tasks.Test\r\nNuGet.Build.Tasks.Console.Test\r\nNuGet.CommandLine.Xplat.Tests\r\nNuGet.Commands.Test\r\nNuGet.DependencyResolver.Core.Tests\r\nNuGet.Packaging.Test\r\nNuGet.ProjectModel.Test\r\nNuGet.Protocol.Tests\r\nNuGet.Resolver.Test\r\nNuGet.Common.Test\r\nNuGet.Build.Tasks.Pack.Test\r\nNuGet.Configuration.Test\r\nNuGet.Shared.Tests\r\nNuGet.Versioning.Test\r\nDotnet.Integration.Test\r\nNuGet.Core.FuncTest\r\nNuGet.Packaging.FuncTest\r\nNuGet.Commands.FuncTest\r\nNuGet.Protocol.FuncTest\r\nNuGet.XPlat.FuncTest\r\nTestablePlugin\r\nTest.Utility\r\n```\r\nWe need to check if the above projects need the net5.0.\r\nThanks for @zivkan 's suggestion, that, the projects without `#if NET5_0 ` and  `#if IS_SIGNING_ENABLED`, the netstandard2.0 and net5.0 assemblies may be the same.\r\nWe should also consider the \"entry point\" project, like NuGet.Build.Tasks, even if there is no #if, we still need to add net5.0 to it.\r\n\r\n"},{"Id":"13142040621","Type":"IssuesEvent","CreatedAt":"2020-08-07T17:02:41","Actor":"aaafgcfg","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9885","RelatedDescription":"Opened issue \"suggest idea: add source of packages \"cached packages\" for vs2017/19\" (#9885) at NuGet/Home","RelatedBody":"suggest idea: add source of packages \"cached packages\" for vs2017/19\r\nI think this will be helpful?"},{"Id":"13141947312","Type":"IssuesEvent","CreatedAt":"2020-08-07T16:51:14","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9884","RelatedDescription":"Opened issue \"Ensure tests run for nuget.packaging.extraction\" (#9884) at NuGet/Home","RelatedBody":"ensure proper test coverage for net45 code paths for: https://github.com/NuGet/Home/issues/9883"},{"Id":"13141919683","Type":"IssuesEvent","CreatedAt":"2020-08-07T16:47:47","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9883","RelatedDescription":"Opened issue \"Support Nuget.Packaging and transitive closure for net45\" (#9883) at NuGet/Home","RelatedBody":"VS Setup team is trying to build better support for installing nupkgs into a central fallback folder.\r\nUnfortunately, VS setup code targets net45, since 3% of vs installers currently are running that net framework on their machine.\r\nVS Setup upgrades people to at least net472, but at the time the nupkg installation would run, the new net framework isn't installed.\r\n\r\nWe could have used nuget 4.5.3 packages which still support net45, but they don't support:\r\n- creating .nupkg.metadata file when extracting packages\r\n- validating signatures of packages when extracting packages.\r\n\r\nSo our approach is to make sure we can have the latest improvements in that area to support this VS setup feature.\r\n\r\nSo at least for VS 16.x, this code needs to support net45. In VS 17.x, they might up their tfm targeting, but it doesn't happen until it happens - business deicision.\r\n\r\nApproach we've landed on:\r\n- nuget.package.extraction.dll is a new DLL that subsets NuGet.Packaging to be able to support PackageExtractor.cs and all transitive closures.\r\n- nuget.versioning, nuget.common, nuget.configuration, and nuget.frameworks - all will also target net45.\r\n\r\nWe plan to merge into dev branch. (also considered release-4.7.x-net45 of the like."},{"Id":"13138238182","Type":"IssuesEvent","CreatedAt":"2020-08-07T09:51:13","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/9487","RelatedDescription":"Reopened issue \"[Test Failure][Unstable]The info in the “Preview Changes” window is not correct when trying to uninstall local packages from the existing solution\" (#9487) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.7.0.6595\r\nVS Version: Master\\30027.154\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1. Opne an exist solution that already installed several embedded icon packages.\r\n2. Open the solution PM UI and go to “Installed” tab.\r\n3. Choose an embedded icon package and click “Uninstall” button.\r\n## Expected\r\nThe info in the prompt “Preview Changes” window should be correct.\r\n## Actual\r\nThe info in the prompt “Preview Changes” window is not correct as below screenshot. It try to install a package which had been installed on the project.\r\n![PreviewChanges](https://user-images.githubusercontent.com/20632625/80495022-f2849c00-8999-11ea-8963-5db521bb2a0b.png)\r\n## Notes\r\n1. It also repro in the project PM UI.\r\n2. Package “FwPackage” is a local created .NET Framework 4.8 package with embedded icon. Package “classlib.net48” is installed from devops source: https://pkgs.dev.azure.com/farhub/_packaging/farhub/nuget/v3/index.json."},{"Id":"13138178118","Type":"IssuesEvent","CreatedAt":"2020-08-07T09:44:12","Actor":"Happypig375","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9867","RelatedDescription":"Closed issue \"dotnet nuget push with wildcards and snupkgs does not push all packages\" (#9867) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.7.0.4\r\n\r\ndotnet.exe --version (if appropriate): 5.0.100-preview.6.20318.15\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1909 (18363.959)\r\n\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n![image](https://user-images.githubusercontent.com/19922066/89126986-a444e300-d51c-11ea-8324-8d367a6ed652.png)\r\n\r\n```\r\nhadri@Home MINGW64 ~/source/repos/CSharpMath (master)\r\n$ dotnet nuget push .nupkgs/*.nupkg -k [REDACTED] -s https://api.nuget.org/v3/index.json\r\nPushing CSharpMath.0.5.0-alpha2.2.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  Created https://www.nuget.org/api/v2/package/ 1666ms\r\nYour package was pushed.\r\nPushing CSharpMath.0.5.0-alpha2.2.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n  PUT https://www.nuget.org/api/v2/symbolpackage/\r\n  Created https://www.nuget.org/api/v2/symbolpackage/ 425ms\r\nYour package was pushed.\r\n\r\nhadri@Home MINGW64 ~/source/repos/CSharpMath (master)\r\n$ dotnet nuget push .nupkgs/CSharpMath.*.nupkg -k [REDACTED] -s https://api.nuget.org/v3/index.json\r\nPushing CSharpMath.0.5.0-alpha2.2.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  Conflict https://www.nuget.org/api/v2/package/ 1497ms\r\nTo skip already published packages, use the option --skip-duplicate\r\nerror: Response status code does not indicate success: 409 (A package with ID 'CSharpMath' and version '0.5.0-alpha2.2' already exists and cannot be modified.).\r\n\r\n\r\nUsage: dotnet nuget push [arguments] [options]\r\n\r\nArguments:\r\n  [root]  Specify the path to the package and your API key to push the package to the server.\r\n\r\nOptions:\r\n  -h|--help                      Show help information\r\n  --force-english-output         Forces the application to run using an invariant, English-based culture.\r\n  -s|--source <source>           Package source (URL, UNC/folder path or package source name) to use. Defaults to DefaultPushSource if specified in NuGet.Config.\r\n  -ss|--symbol-source <source>   Symbol server URL to use.\r\n  -t|--timeout <timeout>         Timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).\r\n  -k|--api-key <apiKey>          The API key for the server.\r\n  -sk|--symbol-api-key <apiKey>  The API key for the symbol server.\r\n  -d|--disable-buffering         Disable buffering when pushing to an HTTP(S) server to decrease memory usage.\r\n  -n|--no-symbols                If a symbols package exists, it will not be pushed to a symbols server.\r\n  --no-service-endpoint          Does not append \"api/v2/package\" to the source URL.\r\n  --interactive                  Allow the command to block and require manual action for operations like authentication.\r\n  --skip-duplicate               If a package and version already exists, skip it and continue with the next package in the push, if any.\r\n\r\nhadri@Home MINGW64 ~/source/repos/CSharpMath (master)\r\n$ dotnet nuget push .nupkgs/CSharpMath.E*.nupkg -k [REDACTED] -s https://api.nuget.org/v3/index.json\r\nPushing CSharpMath.Editor.0.5.0-alpha2.2.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  Created https://www.nuget.org/api/v2/package/ 1633ms\r\nYour package was pushed.\r\nPushing CSharpMath.Editor.0.5.0-alpha2.2.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n  PUT https://www.nuget.org/api/v2/symbolpackage/\r\n  Created https://www.nuget.org/api/v2/symbolpackage/ 424ms\r\n```\r\n\r\nIn the first command input, I tried to upload all the packages in the folder. However, it only uploaded the first one found. The second command confirms that the first package did successfully upload. The third command confirms that only the first package uploaded.\r\n\r\n## Other suggested things\r\n\r\nWorkaround is to do command trickery to list files then upload packages one by one instead of the entire folder.\r\n\r\n### Verbose Logs\r\n\r\n`-d` enables diagnostic output, however no additional info was provided:\r\n\r\n```\r\nhadri@Home MINGW64 ~/source/repos/CSharpMath (master)\r\n$ dotnet -d nuget push .nupkgs/CSharpMath.*a*alpha*.nupkg -k [REDACTED] -s https://api.nuget.org/v3/index.json\r\nTelemetry is: Enabled\r\nPushing CSharpMath.Avalonia.0.5.0-alpha2.2.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n  PUT https://www.nuget.org/api/v2/package/\r\n  Created https://www.nuget.org/api/v2/package/ 1573ms\r\nYour package was pushed.\r\nPushing CSharpMath.Avalonia.0.5.0-alpha2.2.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n  PUT https://www.nuget.org/api/v2/symbolpackage/\r\n  Created https://www.nuget.org/api/v2/symbolpackage/ 454ms\r\nYour package was pushed.\r\n```\r\n\r\n### Sample Project\r\n\r\nhttps://github.com/verybadcat/CSharpMath/tree/337d49363e45aaa8fa3414f5d0c0ca497cf594e9"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2020-08-09T05:30:39.5087199Z","RunDurationInMilliseconds":1823}