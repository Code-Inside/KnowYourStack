{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"25603845135","Type":"IssuesEvent","CreatedAt":"2022-12-01T23:00:05","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9310","RelatedDescription":"Closed issue \"[A11y] Incorrect role attribute on breadcrumb headings\" (#9310) at NuGet/NuGetGallery","RelatedBody":"Issue: \r\nThe breadcrumb heading `<h1>` tags on pages like the 'Report Package' page cannot have the role \"list\". These serve more as headings anyway, so no role attribute should be required.\r\n\r\nhttps://www.nuget.org/packages/Newtonsoft.Json/13.0.2-beta2/ReportAbuse"},{"Id":"25603839353","Type":"IssuesEvent","CreatedAt":"2022-12-01T22:59:40","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9300","RelatedDescription":"Closed issue \"[A11y]Flags elements whose role is none or presentation and which cause the role conflict resolution to trigger.\" (#9300) at NuGet/NuGetGallery","RelatedBody":"Copied from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1656375\r\n\r\nEnvironment Details:\r\nApplication Name: NuGet Service\r\n#URL: https://www.nuget.org/account/ForgotPassword\r\nWindows version: Windows 10\r\nChromiumEdge Version: 105.0.1343.42 (Official Build) (64-bit)\r\n\r\nRepro Steps:\r\nPlease do not close this bug. This bug should only be closed by TCS, C+AI Accessibility tester after verification of the fix\r\nLaunch the application URL: https://www.nuget.org/account/ForgotPassword\r\nRun the Accessibility insights for web \r\nIssue: \r\nFlags elements whose role is none or presentation and which cause the role conflict resolution to trigger. (presentation-role-conflict - https://dequeuniversity.com/rules/axe/4.4/presentation-role-conflict?application=msftAI)\r\n\r\nTarget application: NuGet Gallery | Forgot Password - https://www.nuget.org/account/ForgotPassword\r\n\r\nElement path: iframe[title=\"reCAPTCHA\"]\r\n\r\nSnippet: <iframe title=\"reCAPTCHA\" src=\"https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lf4P10UAAAAAPp-L5yBSChLOGUdU4ci187t7JCv&amp;co=aHR0cHM6Ly93d3cubnVnZXQub3JnOjQ0Mw..&amp;hl=en&amp;v=vP4jQKq0YJFzU6e21-BGy3GP&amp;size=invisible&amp;cb=ioqna7bs53lh\" width=\"256\" height=\"60\" role=\"presentation\" name=\"a-le5htsccnaz0\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation\" tabindex=\"1\">\r\n\r\nSimilar issue observed in following scenarios:\r\nhttps://www.nuget.org/packages/Microsoft.Azure.Services.AppAuthentication/1.6.1/ReportAbuse\r\n\r\nHow to fix:\r\nFix all of the following:\r\n  Element is not focusable.\r\n\r\nEnvironment: Microsoft Edge version 106.0.1370.52\r\n\r\nNotes:\r\nThis appears to complain about the fix we made for tab ordering with the recaptcha iFrame. We should discuss what the proper tab ordering is here."},{"Id":"25603832829","Type":"IssuesEvent","CreatedAt":"2022-12-01T22:59:12","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9301","RelatedDescription":"Closed issue \"[A11y]Ensures role attribute has an appropriate value for the element\" (#9301) at NuGet/NuGetGallery","RelatedBody":"Copied from https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1656381\r\nEnvironment Details:\r\nApplication Name: NuGet Service\r\n#URL: https://www.nuget.org/profiles/Blazor.Components\r\nWindows version: Windows 10\r\nChromiumEdge Version: 105.0.1343.42 (Official Build) (64-bit)\r\n\r\nRepro Steps:\r\nPlease do not close this bug. This bug should only be closed by TCS, C+AI Accessibility tester after verification of the fix\r\nLaunch the application URL: https://www.nuget.org/profiles/Blazor.Components\r\nRun the Accessibility insights for web \r\n\r\nIssue: \r\nEnsures role attribute has an appropriate value for the element (aria-allowed-role - https://dequeuniversity.com/rules/axe/4.4/aria-allowed-role?application=msftAI)\r\n\r\nTarget application: NuGet Gallery | Blazor.Components - https://www.nuget.org/profiles/Blazor.Components\r\n\r\nElement path: .package[role=\"listitem\"]:nth-child(1)\r\n\r\nSnippet: <article class=\"package\" role=\"listitem\">\r\n\r\nHow to fix:\r\nFix any of the following:\r\n  ARIA role listitem is not allowed for given element\r\n\r\nEnvironment: Microsoft Edge version 106.0.1370.52\r\n\r\nNote:\r\nThis also shows up in many places, and should be fixed in all locations with a template fix. Fix should hopefully be as simple as updating to a different element that allows listitem role."},{"Id":"25533371801","Type":"IssuesEvent","CreatedAt":"2022-11-29T10:07:25","Actor":"zabszk","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9307","RelatedDescription":"Closed issue \"[Feature]: Allow README URLs from flat.badgen.net\" (#9307) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nbadgen.net is already on the list of allowed domains, however their subdomain flat.badgen.net (that provides a different badges style) is not.\r\n\r\nCan we have flat.badgen.net subdomain added as well, so projects can use the flat style of badges as well?\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25524488691","Type":"IssuesEvent","CreatedAt":"2022-11-29T00:15:33","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9313","RelatedDescription":"Reopened issue \"[Feature]: Add support for the net7.0 TFMs on the Frameworks tab\" (#9313) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n.NET 7 GA's in November (this month). Let's get `net7.0`, `net7.0-windows` etc showing on the Frameworks tab, as computed frameworks.\r\n\r\nThe asset framework (meaning a `net7.0` asset is in the package) shows up fine:\r\n![image](https://user-images.githubusercontent.com/94054/202015994-767c888d-8621-40e9-b288-24111eeccd8c.png)\r\n\r\nBut the computed frameworks do not.\r\n![image](https://user-images.githubusercontent.com/94054/202016132-9b3f7870-cfdd-45d1-9c82-07eeb322c216.png)\r\n\n\n### The Elevator Pitch\n\nAdd `net7.0` and the corresponding OS-specific frameworks to the Frameworks tab.\r\n\r\nAccording to @JonDouglas and [in the docs](https://learn.microsoft.com/en-us/dotnet/standard/frameworks#net-5-os-specific-tfms), the set of OS-specific frameworks is the same as `net6.0`.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25523896384","Type":"PullRequestEvent","CreatedAt":"2022-11-28T23:25:28","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9318","RelatedDescription":"Merged pull request \"Add domain flat.badgen.net\" (#9318) at NuGet/NuGetGallery","RelatedBody":"Add image domain 'flat.badgen.net' to allowlist \r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9307"},{"Id":"25523594734","Type":"PullRequestEvent","CreatedAt":"2022-11-28T23:02:43","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9318","RelatedDescription":"Opened pull request \"Add domain flat.badgen.net\" (#9318) at NuGet/NuGetGallery","RelatedBody":"Add image domain 'flat.badgen.net' to allowlist \r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9307"},{"Id":"25522869098","Type":"IssuesEvent","CreatedAt":"2022-11-28T22:14:00","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9313","RelatedDescription":"Closed issue \"[Feature]: Add support for the net7.0 TFMs on the Frameworks tab\" (#9313) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n.NET 7 GA's in November (this month). Let's get `net7.0`, `net7.0-windows` etc showing on the Frameworks tab, as computed frameworks.\r\n\r\nThe asset framework (meaning a `net7.0` asset is in the package) shows up fine:\r\n![image](https://user-images.githubusercontent.com/94054/202015994-767c888d-8621-40e9-b288-24111eeccd8c.png)\r\n\r\nBut the computed frameworks do not.\r\n![image](https://user-images.githubusercontent.com/94054/202016132-9b3f7870-cfdd-45d1-9c82-07eeb322c216.png)\r\n\n\n### The Elevator Pitch\n\nAdd `net7.0` and the corresponding OS-specific frameworks to the Frameworks tab.\r\n\r\nAccording to @JonDouglas and [in the docs](https://learn.microsoft.com/en-us/dotnet/standard/frameworks#net-5-os-specific-tfms), the set of OS-specific frameworks is the same as `net6.0`.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25522868157","Type":"PullRequestEvent","CreatedAt":"2022-11-28T22:13:57","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9317","RelatedDescription":"Merged pull request \"[ReleasePre][2022.11.22] FI of dev into main\" (#9317) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"25520171614","Type":"PullRequestEvent","CreatedAt":"2022-11-28T19:45:29","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9315","RelatedDescription":"Merged pull request \"[A11y] Remove aria-hidden attribute for prefix reserved element\" (#9315) at NuGet/NuGetGallery","RelatedBody":"Previous PR addressing the below issued introduced a new accessibility issue in which the prefix reserved checkmark was not accessible to screen readers. This PR removes the aria-hidden attribute associated with the prefix reserved icon and link. This solves the issue of the below a11y bug while also maintaining that the prefix reserved icon is not read aloud along with the package title header.\r\n\r\nPrevious PR: https://github.com/NuGet/NuGetGallery/pull/9314\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9299"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"25606673400","Type":"IssuesEvent","CreatedAt":"2022-12-02T02:56:51","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12288","RelatedDescription":"Closed issue \"Default scroll position in package list hides best search result\" (#12288) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n33129.541.main\n\n### Worked before?\n\n17.4\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe Package Manager UI's left listbox begins life scrolled down so that the most relevant hit is invisible! I've wondered for days what made the most obvious hit so hard to find in the search results, and only today finally figured out it was because the default scroll position hides the best result! \r\n\r\n![nugetscrolling](https://user-images.githubusercontent.com/3548/205150739-4e09e262-0833-4190-be03-30f4228e531c.gif)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"25605917713","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:49:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12289","RelatedDescription":"Opened issue \"Warn when vulnerabilities are detected during PackageReference restore \" (#12289) at NuGet/Home","RelatedBody":""},{"Id":"25605417705","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:05:15","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5608","RelatedDescription":"Closed issue \"Get-project not finding project when moved in solution tree\" (#5608) at NuGet/Home","RelatedBody":"Get-project not finding project when project was moved in solution tree\r\n\r\n## Details about Problem\r\nNuGet product used: Package Manager Console\r\nNuGet version : don't know how to check it\r\nVS version: 15.2 (26430.15)\r\n\r\n## Detailed repro steps\r\n1. In Visual Studio in you solution, create structure with **/DirA/ProjectA**, **/DirB/**\r\n2. Rebuild, restart Visual Studio\r\n3. Open **Package Manager Console**\r\n4. Type:\r\n`PM> Get-Project ProjectA`\r\nYou should get:\r\n```\r\nProjectName                         Type                 FullName                               \r\n-----------                             ----                 --------                               \r\nProjectA                                 C#                   path...\r\n```\r\n5. Cut **ProjectA** in solution tree, then **paste it in DirB/**\r\n6. Run Get-Project again, and command output is empty\r\n\r\n## Workaround\r\nRebuild solution does not help. You have to **Reload Solution** to get it work."},{"Id":"25605416919","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:05:11","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5625","RelatedDescription":"Closed issue \"Provide diagnostics info for init scripts execution\" (#5625) at NuGet/Home","RelatedBody":"### Problem\r\nInit scripts execution is hard to diagnose for when it ran and how many packages processed.\r\nThis makes it impossible to write reliable end-to-end tests for the key customer scenarios.\r\n\r\n### Solution\r\nProvide an event hub where such diagnose events can be reported.\r\n"},{"Id":"25605416278","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:05:08","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5626","RelatedDescription":"Closed issue \"PMC window should close on Ctrl+Esc\" (#5626) at NuGet/Home","RelatedBody":"Package management console should handle <kbd>Ctrl+Esc</kbd> key combination and kill the instance. After that it should be possible to restart it via Tools menu. Instead, Tools -> NuGet Package Manager -> Package Manager Console menu appears to be disabled. This leads to poor user experience as it requires restarting Visual Studio to restore PMC window.\r\n"},{"Id":"25605415594","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:05:06","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5692","RelatedDescription":"Closed issue \"Improve min client version design\" (#5692) at NuGet/Home","RelatedBody":""},{"Id":"25605414913","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:05:03","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5727","RelatedDescription":"Closed issue \"Bug in NuGet.CommandLine.MsBuildUtility.GetToolsetFromUserVersion()\" (#5727) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 4.1.0.2450\r\n\r\nVS version (if appropriate): Visual Studio 2015\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 7 Professional. v6.1 (Build 7601: Service Pack 1)\r\n\r\nWorked before? No.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Prepare a Windows 7 Professional installation with regional settings set to German. Important is that the \"Decimal Symbol\" (in regional settings) should be set to \",\" (comma) as usual for decimal numbers in German.\r\n\r\n2. Prepare a Solution with any nuget package you like (using Visual Studio 2015 in my case). Assure it's working.\r\n\r\n3. Erase the \"packages\" folder within the Solution folder to simulate a fresh build.\r\n\r\n4. Fire up a command line and execute the following command:\r\n\r\n<Path To Nuget>\\nuget.exe restore c:\\Projects\\TestSolution.sln -MSBuildVersion 14 -Source https://api.nuget.org/v3/index.json -Verbosity detailed\r\n\r\n5. An error will show up (See \"Verbose Logs\" for details)\r\n\r\n## Other suggested things\r\n\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nNuGet Version: 4.1.0.2450\r\nSystem.AggregateException: One or more errors occurred. ---> NuGet.CommandLine.CommandLineException: Cannot find the s\r\n   at NuGet.CommandLine.MsBuildUtility.GetToolsetFromUserVersion(String userVersion, IEnumerable`1 installedToolsets)\r\n   at NuGet.CommandLine.MsBuildUtility.GetMsBuildDirectoryInternal(String userVersion, IConsole console, IEnumerable`1\r\n   at NuGet.CommandLine.MsBuildUtility.GetMsBuildDirectory(String userVersion, IConsole console)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at NuGet.CommandLine.RestoreCommand.ProcessSolutionFile(String solutionFileFullPath, PackageRestoreInputs restoreIn\r\n   at NuGet.CommandLine.RestoreCommand.<DetermineRestoreInputsAsync>d__37.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__30.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n---> (Inner Exception #0) NuGet.CommandLine.CommandLineException: Cannot find the specified version of msbuild: '14'\r\n   at NuGet.CommandLine.MsBuildUtility.GetToolsetFromUserVersion(String userVersion, IEnumerable`1 installedToolsets)\r\n   at NuGet.CommandLine.MsBuildUtility.GetMsBuildDirectoryInternal(String userVersion, IConsole console, IEnumerable`1\r\n   at NuGet.CommandLine.MsBuildUtility.GetMsBuildDirectory(String userVersion, IConsole console)\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at NuGet.CommandLine.RestoreCommand.ProcessSolutionFile(String solutionFileFullPath, PackageRestoreInputs restoreIn\r\n   at NuGet.CommandLine.RestoreCommand.<DetermineRestoreInputsAsync>d__37.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__30.MoveNext()<---\r\n\r\n### Code Analysis\r\n\r\nAs this problem kept me busy I went through the code and found the following problem in method\r\n\r\n  NuGet.CommandLine.MsBuildUtility.GetToolsetFromUserVersion()\r\n  {\r\n    // Force version string to 1 decimal place\r\n    string userVersionString = userVersion;\r\n    decimal parsedVersion = 0;\r\n    if (decimal.TryParse(userVersion, out parsedVersion))\r\n    {\r\n        decimal adjustedVersion = (decimal)(((int)(parsedVersion * 10)) / 10F);\r\n        *userVersionString = adjustedVersion.ToString(\"F1\");*\r\n    }\r\n    ....\r\n  }\r\n\r\nThe problematic line is\r\n\r\n   *userVersionString = adjustedVersion.ToString(\"F1\");*\r\n\r\nAssume \"adjustedVersion\" has got a decimal \"14.0\" then the above mentioned conversion would result in \"14,0\" on a machine with German regional settings (with English regional settings it would be \"14.0\"). Unfortunately this will fail the following version detection expressions \"installedToolsets.FirstOrDefault()\".\r\n\r\nTo proove this I switched my regional settings to English and it worked like a charm."},{"Id":"25605414173","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:59","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5760","RelatedDescription":"Closed issue \"ServiceIndexResourceV3 should have a constructor that accepts a list of ServiceIndexEntries\" (#5760) at NuGet/Home","RelatedBody":"I'm working on a monitoring job for NuGet.org's V3 and it's very painful to work with `ServiceIndexResourceV3` when the service index is not constructed from json.\r\n\r\nSee https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Resources/ServiceIndexResourceV3.cs\r\n\r\nBasically, if you want to create a service index from memory, you must either provide fake json or override all of the public methods. This is because `ServiceIndexResourceV3` only has a constructor that accepts json that is then parsed into `ServiceIndexEntry`s.\r\n\r\nIt would be much easier if `ServiceIndexResourceV3` had another constructor that accepted a list of `ServiceIndexEntry`s. I think it would also be nice if the class had an interface instead of being passed around as the class itself."},{"Id":"25605413540","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:56","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5844","RelatedDescription":"Closed issue \"Inconsistent text between VS ouptut and Tools -> Option\" (#5844) at NuGet/Home","RelatedBody":"Customer Repro:\r\n1. Install VS217 Community.\r\n2. Create any project that has a NuGet reference (UWP, .NET Standard, etc.)\r\n3. Once your shared library is referenced by each project, right-click\r\nthe UWP project, and select \"Build\"\r\n\r\nRESULT: Output window has following text:\r\nRestoring NuGet packages...\r\nTo prevent NuGet from restoring packages during build, open the Visual\r\nStudio Options dialog, click on the Package Manager node and...\r\n\r\nRESULT: Options dialog has a \"NuGet Package Manager\" node, not a\r\n\"Package Manager\" node.\r\n\r\nEXPECTED: Text matches Option dialog node text.\r\n\r\nI would recommend updating the build output text.\r\n"},{"Id":"25605412875","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:53","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5984","RelatedDescription":"Closed issue \"nuget.exe install does not strip spaces on ID but does on version\" (#5984) at NuGet/Home","RelatedBody":"Try this command:\r\n```powershell\r\n.\\nuget.exe install \"Knapcode.TorSharp \" -Source https://api.nuget.org/v3/index.json -Verbosity Detailed\r\n```\r\n\r\nor\r\n```powershell\r\n$id = \"Knapcode.TorSharp \" # this could come from anywhere\r\n.\\nuget.exe install $id -Source https://api.nuget.org/v3/index.json -Verbosity Detailed\r\n```\r\n\r\nThis results in the following logs:\r\n```\r\nNuGet Version: 4.3.0.4406\r\nFeeds used:\r\n  https://api.nuget.org/v3/index.json\r\n\r\n  GET https://api.nuget.org/v3/registration3-gz-semver2/knapcode.torsharp /index.json\r\n  NotFound https://api.nuget.org/v3/registration3-gz-semver2/knapcode.torsharp /index.json 335ms\r\nUnable to find package 'Knapcode.TorSharp '\r\nNuGet.CommandLine.CommandLineException: Unable to find package 'Knapcode.TorSharp '\r\n   at NuGet.CommandLine.InstallCommand.<InstallPackage>d__30.MoveNext()\r\n```\r\n\r\nSo, why not just tell people to... not do that? Well, try this in your .csproj:\r\n```xml\r\n    <PackageReference Include=\"Knapcode.TorSharp \">\r\n      <Version>1.6.1</Version>\r\n    </PackageReference>\r\n```\r\n\r\nAnd try this:\r\n```powershell\r\n$id = \"Knapcode.TorSharp\"\r\n$version = \" 1.6.1 \"\r\n.\\nuget.exe install $id -Version $version -Source https://api.nuget.org/v3/index.json -Verbosity Detailed\r\n```\r\n\r\nWorks great. If we are supporting this in checked in, long living artifacts, I think we should support this on the command line where leading or trailing whitespace is easy to come by."},{"Id":"25605412214","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:50","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6019","RelatedDescription":"Closed issue \"Missing HourGlass and/or Progress indicator when clicking UPDATE\" (#6019) at NuGet/Home","RelatedBody":"FEEDBACKTICKET 505312\r\nWhen clicking UPDATE on packages, we don't know what it's doing.  Add a hourglass and progress indicator please.  This is hard to know what is going on. "},{"Id":"25605411534","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:47","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6093","RelatedDescription":"Closed issue \"Suggested minor edits to nuget.exe CLI built-in help\" (#6093) at NuGet/Home","RelatedBody":"After reconciling the nuget.exe docs with the help coming out of the CLI itself, I have two suggestions for changes to the CLI:\r\n\r\n1.\tAdd: in the CLI help, the expand option is described as “If provided, a package added to offline feed is also expanded.” In the docs, it reads as, “If provided, all the files in the package are added to your package source.” Given that add works only with non-HTTP sources, it seems that the CLI help’s text is a little misleading and would do better to match the docs.\r\n\r\n2.\tDelete: CLI help shows NoPrompt but the tool gives a warning that it’s deprecated. I think it should be removed from the CLI altogether.\r\n"},{"Id":"25605410727","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:44","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6136","RelatedDescription":"Closed issue \"Text incorrect in the \"Consolidate\" tab (PM UI)\" (#6136) at NuGet/Home","RelatedBody":"1. Create a solution with multiple projects referencing different versions of a package **but not the latest** version.\r\n2. Go to \"Manage NuGet packages for Solution..\" \r\n3. Go to consolidate tab\r\n4. The recommended version to install for all projects is the highest version of the package that is installed in the solution across projects.\r\n\r\n**Expected**: The text should say: \"Recommended latest \\<version>\"\r\n**Actual**: Its says: \"Latest stable\" which is incorrect\r\n![image](https://user-images.githubusercontent.com/14800916/32354560-79778c6a-bfe7-11e7-93d5-1e3ca72ad8a8.png)\r\n"},{"Id":"25605410010","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:41","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6153","RelatedDescription":"Closed issue \"Enable CLI push use enhanced authentication mechanism\" (#6153) at NuGet/Home","RelatedBody":"We need to clean up the various ways to push NuGet packages and storing the encrypted/plain-text API keys.\r\n\r\nMore coming soon.."},{"Id":"25605409393","Type":"IssuesEvent","CreatedAt":"2022-12-02T01:04:38","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6291","RelatedDescription":"Closed issue \"[Feedback] [Test Failure] Error message shows in PMC after updating package ‘Microsoft.NET.Test.Sdk’\" (#6291) at NuGet/Home","RelatedBody":"Repro steps: \r\n1. Create a C# .NET Core -> Unit Test Project (.NET Core).\r\n2. Open the ‘Manage NuGet Packages…’ for the project.\r\n3. Go to the ‘Installed’ tab and we found the package ‘Microsoft.NET.Test.Sdk’ is installed with latest version.\r\n4. Open ‘Package Manager Console’.\r\n5. Type in command ‘Update-Package Microsoft.NET.Test.Sdk’.\r\n \r\nExpected:\r\nCorrect message should show in PMC as below screenshot.\r\n\r\n \r\nActual:\r\nError message shows in PMC as below screenshot.\r\n \r\n![image](https://user-images.githubusercontent.com/18219758/33794178-8ab278e0-dc7b-11e7-87b9-8f57a4125e52.png)\r\n\r\n \r\nMore infor:\r\nPM> Update-Package Microsoft.NET.Test.Sdk\r\nUpdate-Package : Already referencing a newer version of 'Microsoft.NET.Test.Sdk'..\r\nAt line:1 char:1\r\n+ Update-Package Microsoft.NET.Test.Sdk\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Update-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageComm\r\n   and\r\n \r\nTime Elapsed: 00:00:00.4948169\r\n \r\nNotes:\r\n The issue repro on D15Rel 27024.01 (Default NuGet Dev-4529)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"24695608920","Type":"IssuesEvent","CreatedAt":"2022-10-19T11:53:07","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Closed issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."},{"Id":"24531970399","Type":"IssuesEvent","CreatedAt":"2022-10-11T17:13:00","Actor":"kartheekp-ms","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/65","RelatedDescription":"Opened issue \"Microsoft Security Advisory  CVE-2022-41032 | .NET Elevation of Privilege Vulnerability\" (#65) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE-2022-41032 | .NET Elevation of Privilege Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 7.0.0-rc, .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 7.0.0-rc.1, .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol) where a malicious actor could cause a user to execute arbitrary code.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/nuget/home/issues. (TBD)\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.3.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.2.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.0.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.11.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.9.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.7.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 4.9.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET 6.0 application running on .NET 6.0.9 or earlier.\r\n- Any .NET 3.1 application running on .NET Core 3.1.29 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n\r\n- If you're using NuGet.exe 6.3.0 or lower, you should download and install 6.3.1 from https://dist.nuget.org/win-x86-commandline/v6.3.1/nuget.exe .\r\n\r\n- If you're using NuGet.exe 6.2.1 or lower, you should download and install 6.2.2 from https://dist.nuget.org/win-x86-commandline/v6.2.2/nuget.exe .\r\n\r\n- If you're using NuGet.exe 6.0.2 or lower, you should download and install 6.0.3 from https://dist.nuget.org/win-x86-commandline/v6.0.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.11.2 or lower, you should download and install 5.11.3 from https://dist.nuget.org/win-x86-commandline/v5.11.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.9.2 or lower, you should download and install 5.9.3 from https://dist.nuget.org/win-x86-commandline/v5.9.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.7.2 or lower, you should download and install 5.7.3 from https://dist.nuget.org/win-x86-commandline/v5.7.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 4.9.5 or lower, you should download and install 4.9.6 from https://dist.nuget.org/win-x86-commandline/v4.9.6/nuget.exe .\r\n\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nIf you're using .NET Core 6.0, you should download and install Runtime 6.0.10 or SDK 6.0.110 (for Visual Studio 2022 v17.0) or SDK 6.0.402 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nIf you're using .NET Core 3.1, you should download and install Runtime 3.1.30 or SDK 3.1.424 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core 3.1 or .NET 6.0, please email details to [secure@microsoft.com](secure@microsoft.com). Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at [https://github.com/NuGet/NuGet.Client](https://github.com/NuGet/NuGet.Client). The [Announcements repo](https://github.com/NuGet/Announcements/issues) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Edward Thomson](https://twitter.com/ethomson) \r\n\r\n### External Links\r\n\r\n[CVE 2022-41032](https://www.cve.org/CVERecord?id=CVE-2022-41032)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 11, 2022): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2022-10-11_\r\n"},{"Id":"24368370626","Type":"IssuesEvent","CreatedAt":"2022-10-03T17:00:05","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Opened issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com/. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com/.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2022-12-02T03:31:00.2893495Z","RunDurationInMilliseconds":1458}