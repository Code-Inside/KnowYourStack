{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"35348019997","Type":"IssuesEvent","CreatedAt":"2024-02-02T12:43:45","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9794","RelatedDescription":"Opened issue \"[Feature]: Change Target Framework Badges to be Latest instead of Lowest.\" (#9794) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nWhen we started this work for Framework badges we had a decision to make of whether to do something familiar for package users in terms of providing them the lowest framework asset in the package or the highest.\r\n\r\nWe initially went with the lowest framework asset as that was the common practice with .NET & NuGet and would adjust based on feedback.\r\n\r\nNow with further feedback, I believe we should re-consider this to be the latest asset to show how up-to-date the package actually is as it may make more sense long term for a consumer to see a package continues to provide support for the latest version of .NET.\r\n\r\n**TL;DR - Display the latest TFM included rather than the lowest.**\r\n\r\nRelated and can be ignored if we do this work instead: https://github.com/NuGet/NuGetGallery/issues/9044\n\n### Additional Context and Details\n\n_No response_"},{"Id":"35306083087","Type":"IssuesEvent","CreatedAt":"2024-02-01T09:26:21","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9793","RelatedDescription":"Opened issue \"Parameterize Framework Badges front end code using helpers\" (#9793) at NuGet/NuGetGallery","RelatedBody":"We can use a helper method to make the code in https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery/Views/Packages/_SupportedFrameworksBadges.cshtml more concise."},{"Id":"35278731677","Type":"IssuesEvent","CreatedAt":"2024-01-31T14:07:59","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9792","RelatedDescription":"Opened issue \"Make DateTime ISO 8601 throughout NuGet.org\" (#9792) at NuGet/NuGetGallery","RelatedBody":"\r\n<img width=\"1872\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/1288848/c06ad27e-ddc0-495e-8b19-32e05e89c89c\">\r\n\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/7f55d930b98e3fcd0d901bb897819d96a9ebedb8/src/NuGetGallery.Services/Extensions/DateTimeExtensions.cs#L21C9-L24C10\r\n\r\n->\r\n\r\n```\r\npublic static string ToNuGetShortDateString(this DateTime self)\r\n{\r\n    return self.ToString(\"yyyy-MM-dd\");\r\n}\r\n```\r\n\r\nOr similar?"},{"Id":"35262820182","Type":"IssuesEvent","CreatedAt":"2024-01-31T03:46:01","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9791","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \" (#9791) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nStatistics on the search page don't match statistics on the package details page.\n\n### Repro Steps\n\nSearch for Fabulous Scheduler on NuGet.org and view the results: https://www.nuget.org/packages?q=fabulous+scheduler\r\nClick on the FabulousScheduler link on the results page and view the stats on the package details page: https://www.nuget.org/packages/FabulousScheduler\r\n\r\nThey don't match.\n\n### Expected Behavior\n\nBoth screen show the same download count.\n\n### Screenshots\n\nSearch results:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/14225979/b4367bef-acd3-48a0-9c9b-d7ff714aeb7e)\r\n\r\nPackage details:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/14225979/08dccb02-94a8-4f06-963d-cc593b4b31f0)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35224619781","Type":"IssuesEvent","CreatedAt":"2024-01-30T02:00:57","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9790","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Search filters panel blinks when we click 'Apply'\" (#9790) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe checkboxes for the framework generations and TFMs blink when the search page is loaded with filter parameters. \r\n\r\nThe likely cause for it how we initialize checobox states on the page. JavaScript code reads the search page URL and uses it to set the state of the checkboxes on the page. This happens after page load, which is why we see the blinking.\n\n### Repro Steps\n\n1. Select a framework generation or TFM filter checkbox, say `.NET`\r\n2. Click on `Apply`\r\n3. The `.NET` checkbox will blink after the page loads\n\n### Expected Behavior\n\nThe checkbox states should be set in the `.cshtml` itself so that we don't need to run any JavaScript.\r\n\r\nWe can modify the `FrameworkFilterGroup` objects in the view model to have a checkbox state enum with `Checked/Unchecked/Indeterminate` values.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\nSee https://github.com/NuGet/NuGetGallery/pull/9782#issuecomment-1907354318"},{"Id":"35177150237","Type":"IssuesEvent","CreatedAt":"2024-01-28T05:10:49","Actor":"toras9000","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9789","RelatedDescription":"Opened issue \"[NuGet.org Bug]: The primary search feed for api.nuget.org may be staying.\" (#9789) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe primary SearchQueryService and secondary SearchQueryService presented in the following feeds return different numbers of downloads.\r\nThe primary SearchQueryService appears to be lagging behind.\r\nhttps://api.nuget.org/v3/index.json\r\n\r\nI do not know if this is the planned behavior.\r\n\n\n### Repro Steps\n\nI compared the following two results (usnc and ussc)\r\n\r\n- Primary SearchQueryService\r\n    - https://azuresearch-usnc.nuget.org/query?q=packageid:System.Data.SQLite.Core\r\n- Secondary SearchQueryService\r\n    - https://azuresearch-ussc.nuget.org/query?q=packageid:System.Data.SQLite.Core\r\n\r\nThe following web page display is close to the secondary\r\n\r\n- Web page\r\n    - https://www.nuget.org/packages/System.Data.SQLite.Core\r\n\n\n### Expected Behavior\n\nIf this is the response for the intended reason, then this is not a particular problem.\r\nI created this issue because I had a question about the fact that the primary appears to return old results.\r\n\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35168776420","Type":"IssuesEvent","CreatedAt":"2024-01-27T11:43:52","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9784","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Number of downloads changes among web and mobile.\" (#9784) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nOn last view, I realized number of downloads don't change on web view and I was suspecting if there is a problem through data. Then I checked, new versions of packages' download count and check mobile view to see same result. Interestingly, mobile view show correct number of downloads while web view doesn't.\n\n### Repro Steps\n\n1. Open URL on web view. https://www.nuget.org/profiles/Okullu\r\n2. Open URL on mobile view. https://www.nuget.org/profiles/Okullu\n\n### Expected Behavior\n\nSame number of downloads on both usage of same web site.\n\n### Screenshots\n\nMobile view:\r\n![photo_2024-01-23_17-36-22](https://github.com/NuGet/NuGetGallery/assets/4971757/cd22f130-df9e-410c-b74a-ad176073bbd1)\r\n\r\nWeb view: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/f30d0759-dee5-4b32-ac6e-f86a48ee1a07)\r\n\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"35361180169","Type":"IssuesEvent","CreatedAt":"2024-02-02T20:33:59","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13184","RelatedDescription":"Closed issue \"LibraryDependency creates a collection that is mostly empty\" (#13184) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe `LibraryDependency` creates a list for warnings but in a lot of code paths it ends up being empty so there's no need to allocate the list and instead it could be an empty singleton.\n\nhttps://github.com/NuGet/NuGet.Client/blob/a6fff16af6f44927a83851448a99beb1d2801600/src/NuGet.Core/NuGet.LibraryModel/LibraryDependency.cs#L22\n\nOriginally reported internally: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1826369\n\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"35360750552","Type":"IssuesEvent","CreatedAt":"2024-02-02T20:15:14","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13216","RelatedDescription":"Opened issue \"[Feature] Enable Transitive Dependencies for Solution-level in Visual Studio\" (#13216) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nPeople love using the new transitive dependencies feature in Visual Studio for their projects! \r\n\r\nhttps://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/\r\n\r\nOne common follow-up is that people would love to see this experience in the solution-level within Visual Studio.\r\n\r\nAs we know from survey data, people use projects / solution levels just about equally and we originally went with projects to experiment with this feature as it has not been done before in Visual Studio.\r\n\r\nThis issue tracks bringing this experience to the solution-level in Visual Studio.\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉\n\n### Additional Context and Details\n\n_No response_"},{"Id":"35359591949","Type":"PullRequestEvent","CreatedAt":"2024-02-02T19:25:55","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13215","RelatedDescription":"Opened pull request \"FabricBot: Onboarding to GitOps.ResourceManagement because of FabricBot decommissioning\" (#13215) at NuGet/Home","RelatedBody":"Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement\n\n Details on the replacement service and the syntax of the new yaml configuration file is available publicly at: https://microsoft.github.io/GitOps/policies/resource-management.html\n\nPlease review and merge this PR to complete the process of onboarding to the new service."},{"Id":"35355262891","Type":"IssuesEvent","CreatedAt":"2024-02-02T16:38:04","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13182","RelatedDescription":"Closed issue \"SetCentralDependencies is calling OrderBy without specifying comparison defaulting to cultural-sensitive compare\" (#13182) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe `SetCentralDependencies` method writes the PackageVersion items to the `project.assets.json`.  It sorts the list but doesn't specify a string comparer which defaults to a culture-sensitive comparer.  This leads to wasted CPU time.  Instead, it should specify `StringComparer.OrdinalIgnoreCase` since the list is already de-duplicated.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/PackageSpecWriter.cs#L666\n\nOriginally reported internally: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1926308\n\n### Verbose Logs\n\n_No response_"},{"Id":"35355252578","Type":"IssuesEvent","CreatedAt":"2024-02-02T16:37:41","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13183","RelatedDescription":"Closed issue \"PackageSpecWriter should write out original string for versions instead of allocating a new one\" (#13183) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe `SetCentralDependencies` method writes out the PackageVersion items to the `project.assets.json` and uses the normalized version.  This section is only read by our reader which parses it again during read so there's no need to allocate another string and instead should just write out the original string.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/PackageSpecWriter.cs#L668\n\nOriginally reported internally: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1828422\n\n### Verbose Logs\n\n_No response_"},{"Id":"35355238546","Type":"IssuesEvent","CreatedAt":"2024-02-02T16:37:13","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13214","RelatedDescription":"Opened issue \"ProjectModel.HashObjectWriter.OnFlush is using a SHA512 hash versus a cheaper hash which seems like overkill\" (#13214) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nOriginally filed by the VS Perf team.  The `ProjectModel.HashObjectWriter` currently uses a SHA512 hash algorithm and we're wondering if a faster hash algorithm would still work and speed things up.\n\n### Desired Behavior\n\nA faster hashing algorithm that still yields the same outcome.\n\n### Additional Context\n\n_No response_"},{"Id":"35355160872","Type":"IssuesEvent","CreatedAt":"2024-02-02T16:34:37","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13213","RelatedDescription":"Opened issue \"PackageSpecWriter is calling Any on an ICollection<T>/IList<T> instances instead of .Count\" (#13213) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, NuGet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe `PackageSpecWriter` class calls the `.Any()` method on some `IList<T>` objects which causes allocations.  These should be avoided on hot paths.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35352100831","Type":"IssuesEvent","CreatedAt":"2024-02-02T14:54:22","Actor":"rbdavison","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13212","RelatedDescription":"Opened issue \"REST updates to licenses from licenses.nuget.org\" (#13212) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, NuGet SDK, Other/NA\n\n### The Elevator Pitch\n\nLicenses such as MIT when served from https://licenses.nuget.org/MIT contain text like\r\n```\r\nMIT License\r\nCopyright (c) <year> <copyright holders>\r\n...\r\n```\r\nIt would be really nice if place holder fields it the various licenses could be replaced at retrieval time with replacements that we quite possibly already know from the package or could be added with new metadata attributes/fields.\r\n\r\nFor example, a request could be made to https://licenses.nuget.org/MIT?year=2022&owner=Ty%20Coon,%20President%20of%20Vice\r\nThe license could be updated on the fly to return\r\n```\r\nMIT License\r\nCopyright (c) 2022 Ty Coon, President of Vice\r\n...\r\n```\r\n\n\n### Additional Context and Details\n\nFor a more lengthy example if we look at a license such as https://licenses.nuget.org/CPAL-1.0\r\nHow can we attribute the code properly if there fields are left empty?\r\nFor cases like this license I would think there's a case that having an embedded license (`<license type=\"file\">`) is mandatory. But I'm sure this could be coded around, though much harder that the MIT license case.\r\n\r\nIf the package metadata contained.\r\n<license type=\"expression\">CPAL-1.0 OR MIT</license>\r\nAdmittedly that would be an odd combination but lets play with it for a moment...\r\n`nuget pack` could query the [URL](https://https://licenses.nuget.org/CPAL-1.0?year=2024,author=Bob%20Loblaw,alternateLicense=MIT,contributors=John%20Doe,%20Jane%20Doe,%20Max%20Headroom) and save the license in the package as License.txt and add the `<license type=\"file\">License.txt</license>`\r\nEmbedding the license file is particularly useful when using the package in an offline/standalone environment which doesn't have access to the internet. In these environments the expressions are 100% useless since the license can't be retrieved for viewing and/or inclusion in product release notes as required by some licenses.\r\n\r\nTo make the process of building the URLs easier it might be advantageous to add some new metadata fields/attributes to the `<license />`\r\nexamples of items that I think could be useful\r\n- **year** attribute - example: `<license type=\"expression\" year=\"2008-2024\">MIT</license>` could be used in building the URL `https://https://licenses.nuget.org/MIT?year=**<The value of the year attribute>**`\r\n- **owner** attribute - example: `<license type=\"expression\" owner=\"ACME Inc\">CPAL-1.0</license>` could be used in building the URL `https://https://licenses.nuget.org/CPAL-1.0?owner=**<The value of the owner attribute>**`\r\n- **<contributors><contributor></contributor></contributors>** elements - example \r\n  ```\r\n  <metadata>\r\n  ...\r\n  <contributors>\r\n    <contributor>John Doe</contributor>\r\n    <contributor>Jane Doe</contributor>\r\n    <contributor>Max Headroom</contributor>\r\n  </contributors>\r\n  ...\r\n  </metadata>\r\n```\r\n could be used in building the URL `https://https://licenses.nuget.org/CPAL-1.0?contributors=**<The value all contributors joined>**`"},{"Id":"35332753370","Type":"IssuesEvent","CreatedAt":"2024-02-02T00:59:30","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13211","RelatedDescription":"Opened issue \"Read auditSources from nuget.config files\" (#13211) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nThe first step for being able to use NuGetAudit without adding nuget.org as a package source, is to add `<auditSources>` to the nuget.config file, as specified in the feature spec: https://github.com/NuGet/Home/blob/dev/accepted/2023/NuGetAudit-without-nuget.org-as-packageSource.md\r\n\r\nThe work for this issue is to add APIs to NuGet.Configuration to be able to read the sources from nuget.config files. \n\n### Additional Context and Details\n\nWhen this issue is complete, it does not mean that NuGetAudit, as part of restore, will use these sources yet. See this issue for the complete work:\r\n* https://github.com/NuGet/Home/issues/12698"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-02-03T03:30:17.8083926Z","RunDurationInMilliseconds":995}