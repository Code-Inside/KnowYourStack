{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14045364996","Type":"PullRequestEvent","CreatedAt":"2020-11-02T01:15:03","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8305","RelatedDescription":"Merged pull request \"Migrate nuget-build feed from myget to Azure DevOps\" (#8305) at NuGet/NuGetGallery","RelatedBody":"For: NuGet/Engineering#2909"},{"Id":"14045235480","Type":"PullRequestEvent","CreatedAt":"2020-11-02T00:45:07","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8307","RelatedDescription":"Opened pull request \"Not using Task.Result in async context.\" (#8307) at NuGet/NuGetGallery","RelatedBody":"Unclear why the code was written this way originally, but we can get rid of `Task.Result` call here pretty painless."},{"Id":"14040031548","Type":"PullRequestEvent","CreatedAt":"2020-10-31T23:54:21","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8306","RelatedDescription":"Opened pull request \"Removed unused localIP member of CloudAuditingService.\" (#8306) at NuGet/NuGetGallery","RelatedBody":"While looking for `Task.Result` code I stumbled upon `localIp = AuditActor.GetLocalIpAddressAsync().Result` call in `DefaultDepenenciesModule` that then was passed into the `CloudAuditingService` constructor, stored in its member and never used.\r\nLooking at the [commit](https://github.com/NuGet/NuGetGallery/commit/0972d34ca76c22d8d0fde38c56634e0fd88008e3#diff-37cab84da1c323a1f9471a097fe7961e57f58238dd39a25cfa4558799920cc8eR27) that introduced that constructor argument, it was unused from the beginning. Removing it, will get rid of one `Task.Result` call."},{"Id":"14035031495","Type":"IssuesEvent","CreatedAt":"2020-10-30T23:10:13","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8304","RelatedDescription":"Closed issue \"powershellgallery not responding and fails when attempting install-module\" (#8304) at NuGet/NuGetGallery","RelatedBody":"Received 500 error when attempting to open PowerShellGallery.com (specifically https://www.powershellgallery.com/package/AzureAD) to obtain package. This has been reproducing for about 12 hours at this point. The entire site is almost entirely unresponsive.  Checking the status page at https://github.com/PowerShell/PowerShellGallery/blob/master/psgallery_status.md#powershell-gallery-status shows \"The PowerShell Gallery is currently: Experiencing an outage\" but the most current/recent entry with details about an outage is from October 15th. "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14037480019","Type":"IssuesEvent","CreatedAt":"2020-10-31T11:46:19","Actor":"TFTomSun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10215","RelatedDescription":"Opened issue \"Visual Studio doesn't restore floating prerelease versions on rebuld\" (#10215) at NuGet/Home","RelatedBody":"Normally, Visual Studio restores the latest package version on rebuild when you use a non-prerelease floating version ('*'). I expect the same behavior with the floating prerelease version '*-*'.\r\n\r\nI have created demo repository with 3 projects:\r\nhttps://github.com/AppGates/AppGates.Build.Versioning\r\n\r\nIt uses Nerdbank.Versioning. The ExternalLibrary is referenced as a PackageReference in the ReferencingLibrary. \r\n\r\nsteps to reproduce:\r\n- build the external library to get an initial local package (the pack out dir is <repo>\\pack)\r\n- rebuild the referencing project, the external library package will be restored\r\n- make a change to the external library and commit it\r\n- rebuild the external library to generate a new package\r\n- rebuild the referencing project\r\n-> the referencing project sticks with the previous package version of the external library. The packages.lock file is not updated"},{"Id":"14035283688","Type":"IssuesEvent","CreatedAt":"2020-10-31T00:01:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10214","RelatedDescription":"Closed issue \"Ability to restrict nuget package to specific feed\" (#10214) at NuGet/Home","RelatedBody":"(_or one possible way NuGet could improve the `dotnet restore` story around failed sources_)\r\n\r\nI understand that the current behavior is by design (#7035, #7015, #6373) and I'm proposing improvements to it.\r\n\r\n---\r\n\r\nToday the all of our builds were broken because of \r\n\r\n1.) `dotnet restore` requires that every single package source to be accessible\r\n\r\n**and**\r\n\r\n2.) [MyGet had an outage](https://user-images.githubusercontent.com/177608/97761649-03e36800-1ae5-11eb-8853-8c740bf69b19.png) that lasted several hours (still out as of this writing)\r\n\r\n---\r\n\r\nIn my scenario, all nuget packages come from nuget.org except for 1 (one) single package that comes from a vendor - that happens to be hosted in a MyGet private feed. I tried to add one more dependency (from nuget.org) but because MyGet was down, I got an error:\r\n\r\n```\r\nNuGet.targets(128,5): error : Unable to load the service index for source https://www.myget.org/F/vendor/api/v3/index.json\r\n```\r\n\r\nMy `.csproj` was changed from something like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"Serilog\" Version=\"2.10.0\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" />\r\n</ItemGroup>\r\n```\r\n\r\nTo something like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"AutoMapper\" Version=\"10.1.1\" />\r\n  <PackageReference Include=\"Serilog\" Version=\"2.10.0\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can see, all I've done was to add a new dependency (that would be found only in nuget.org).\r\n\r\nI had done a `dotnet restore` previously so both `Serilog` and `VendorPackage` were already in the local nuget cache (along with their own dependencies), and the newly added package `AutoMapper` in this example needed to be restored from nuget.org.\r\n\r\nNow, there seems to be a couple of issues here that I don't fully understand:\r\n\r\n1.) Why does nuget need to try to access any on-line package sources, if I'm asking for VendorPackage v1.2.3 and it's already in the local cache along with all of its dependencies?\r\n\r\nI would understand the need to check for new versions if I used a wildcard in the version number e.g. `<PackageReference Include=\"VendorPackage\" Version=\"1.2.*\" />` but I didn't... I have a very specific and hard-coded version there... That should be enough.\r\n\r\n2.) Why does nuget need to search for the package in every single source? Again, I declared `AutoMapper v10.1.1` that exists in the local nuget cache, and was found in nuget.org. Why doesn't it stop with the first feed that satisfy the hard-coded version requirement?\r\n\r\n---\r\n\r\n### Proposal\r\n\r\nRegardless of the answers to the questions above, I believe the `dotnet restore` experience would improve a lot of we could define which feed(s) should be searched for each package.\r\n\r\nA new attribute on `PackageReference` e.g. `Feed` could allow one or more names (CSV) of package sources that are defined in the nuget configuration (machine/local).\r\n\r\ne.g.\r\n\r\n.csproj\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"AutoMapper\" Version=\"10.1.1\" Feed=\"nuget.org\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" Feed=\"vendor\" />\r\n</ItemGroup>\r\n```\r\n\r\nnuget.config\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"vendor\" value=\"https://www.myget.org/F/vendor/api/v3/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n  <fallbackPackageFolders>\r\n    <clear />\r\n  </fallbackPackageFolders>\r\n</configuration>\r\n```\r\n\r\n---\r\n\r\n### Verbose Logs\r\n\r\n```\r\nC:\\project>dotnet restore\r\n  Determining projects to restore...\r\n  Restored C:\\project\\src\\Project.Utils\\Project.Utils.csproj (in 386 ms).\r\n  Restored C:\\project\\src\\Project.ApiModels\\Project.ApiModels.csproj (in 386 ms).\r\n  Restored C:\\project\\test\\Project.Api.IntegrationTests\\Project.Api.IntegrationTests.csproj (in 632 ms).\r\n  Restored C:\\project\\test\\Project.Utils.UnitTests\\Project.Utils.UnitTests.csproj (in 639 ms).\r\n  Restored C:\\project\\src\\Project.Utils.Excel\\Project.Utils.Excel.csproj (in 727 ms).\r\n  Restored C:\\project\\src\\Project.DataModels.Migrations\\Project.DataModels.Migrations.csproj (in 780 ms).\r\n  Restored C:\\project\\src\\Project.DataModels\\Project.DataModels.csproj (in 786 ms).\r\nC:\\Program Files\\dotnet\\sdk\\3.1.403\\NuGet.targets(128,5): error : Unable to load the service index for source https://www.myget.org/F/vendor/api/v3/index.json. [C:\\project\\project.sln]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.403\\NuGet.targets(128,5): error :   Response status code does not indicate success: 503 (Service Unavailable). [C:\\project\\project.sln]\r\n```\r\n\r\n---\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.403\r\n Commit:    9e895200cd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.9\r\n  Commit:  774fc3d6a9\r\n```"},{"Id":"14035105065","Type":"IssuesEvent","CreatedAt":"2020-10-30T23:24:13","Actor":"augustoproiete","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10214","RelatedDescription":"Opened issue \"Ability to restrict nuget package to specific feed\" (#10214) at NuGet/Home","RelatedBody":"(_or one possible way NuGet could improve the `dotnet restore` story around failed sources_)\r\n\r\nI understand that the current behavior is by design (#7035) and I'm proposing improvements to it.\r\n\r\n---\r\n\r\nToday the all of our builds were broken because of \r\n\r\n1.) `dotnet restore` requires that every single package source to be accessible\r\n\r\n**and**\r\n\r\n2.) [MyGet had an outage](https://user-images.githubusercontent.com/177608/97761649-03e36800-1ae5-11eb-8853-8c740bf69b19.png) that lasted several hours (still out as of this writing)\r\n\r\n---\r\n\r\nIn my scenario, all nuget packages come from nuget.org except for 1 (one) single package that comes from a vendor - that happens to be hosted in a MyGet private feed. I tried to add one more dependency (from nuget.org) but because MyGet was down, I got an error:\r\n\r\n```\r\nNuGet.targets(128,5): error : Unable to load the service index for source https://www.myget.org/F/vendor/api/v3/index.json\r\n```\r\n\r\nMy `.csproj` was changed from something like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"Serilog\" Version=\"2.10.0\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" />\r\n</ItemGroup>\r\n```\r\n\r\nTo something like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"AutoMapper\" Version=\"10.1.1\" />\r\n  <PackageReference Include=\"Serilog\" Version=\"2.10.0\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can see, all I've done was to add a new dependency (that would be found only in nuget.org).\r\n\r\nI had done a `dotnet restore` previously so both `Serilog` and `VendorPackage` were already in the local nuget cache (along with their own dependencies), and the newly added package `AutoMapper` in this example needed to be restored from nuget.org.\r\n\r\nNow, there seems to be a couple of issues here that I don't fully understand:\r\n\r\n1.) Why does nuget need to try to access any on-line package sources, if I'm asking for VendorPackage v1.2.3 and it's already in the local cache along with all of its dependencies?\r\n\r\nI would understand the need to check for new versions if I used a wildcard in the version number e.g. `<PackageReference Include=\"VendorPackage\" Version=\"1.2.*\" />` but I didn't... I have a very specific and hard-coded version there... That should be enough.\r\n\r\n2.) Why does nuget need to search for the package in every single source? Again, I declared `AutoMapper v10.1.1` that exists in the local nuget cache, and was found in nuget.org. Why doesn't it stop with the first feed that satisfy the hard-coded version requirement?\r\n\r\n---\r\n\r\n### Proposal\r\n\r\nRegardless of the answers to the questions above, I believe the `dotnet restore` experience would improve a lot of we could define which feed(s) should be searched for each package.\r\n\r\nA new attribute on `PackageReference` e.g. `Feed` could allow one or more names (CSV) of package sources that are defined in the nuget configuration (machine/local).\r\n\r\ne.g.\r\n\r\n.csproj\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"AutoMapper\" Version=\"10.1.1\" Feed=\"nuget.org\" />\r\n  <PackageReference Include=\"VendorPackage\" Version=\"1.2.3\" Feed=\"vendor\" />\r\n</ItemGroup>\r\n```\r\n\r\nnuget.config\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    <add key=\"vendor\" value=\"https://www.myget.org/F/vendor/api/v3/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n  <fallbackPackageFolders>\r\n    <clear />\r\n  </fallbackPackageFolders>\r\n</configuration>\r\n```\r\n\r\n---\r\n\r\n### Verbose Logs\r\n\r\n```\r\nC:\\project>dotnet restore\r\n  Determining projects to restore...\r\n  Restored C:\\project\\src\\Project.Utils\\Project.Utils.csproj (in 386 ms).\r\n  Restored C:\\project\\src\\Project.ApiModels\\Project.ApiModels.csproj (in 386 ms).\r\n  Restored C:\\project\\test\\Project.Api.IntegrationTests\\Project.Api.IntegrationTests.csproj (in 632 ms).\r\n  Restored C:\\project\\test\\Project.Utils.UnitTests\\Project.Utils.UnitTests.csproj (in 639 ms).\r\n  Restored C:\\project\\src\\Project.Utils.Excel\\Project.Utils.Excel.csproj (in 727 ms).\r\n  Restored C:\\project\\src\\Project.DataModels.Migrations\\Project.DataModels.Migrations.csproj (in 780 ms).\r\n  Restored C:\\project\\src\\Project.DataModels\\Project.DataModels.csproj (in 786 ms).\r\nC:\\Program Files\\dotnet\\sdk\\3.1.403\\NuGet.targets(128,5): error : Unable to load the service index for source https://www.myget.org/F/vendor/api/v3/index.json. [C:\\project\\project.sln]\r\nC:\\Program Files\\dotnet\\sdk\\3.1.403\\NuGet.targets(128,5): error :   Response status code does not indicate success: 503 (Service Unavailable). [C:\\project\\project.sln]\r\n```\r\n\r\n---\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.403\r\n Commit:    9e895200cd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.9\r\n  Commit:  774fc3d6a9\r\n```"},{"Id":"14034232752","Type":"IssuesEvent","CreatedAt":"2020-10-30T21:11:09","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10213","RelatedDescription":"Opened issue \"Validate Search branch before merging into Dev\" (#10213) at NuGet/Home","RelatedBody":""},{"Id":"14033841606","Type":"IssuesEvent","CreatedAt":"2020-10-30T20:27:04","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10112","RelatedDescription":"Closed issue \"PM UI:  selecting projects in a solution-level context is slow\" (#10112) at NuGet/Home","RelatedBody":"Repro steps:\r\n1.  Open the NuGet.Client solution (https://github.com/NuGet/NuGet.Client).\r\n2.  In Solution Explorer right-click on the solution and select \"Manage NuGet Packages for Solution...\"\r\n3.  In PM UI switch to the Browse tab.\r\n4   Select a package.\r\n5.  In the right-hand details pane check the checkbox for all projects.\r\n\r\nExpected result:  The action will complete nearly instantaneously.\r\nActual result:  The action takes ~2 seconds to complete in 16.8.  In 16.7 (and the release-5.6.x branch instead of dev) it's nearly instantaneous.\r\n\r\nThis appears to be the result of heavy asyncification with JTF.  We should consider batching as a tool in improving performance.\r\n\r\nThis is partially affected by https://github.com/NuGet/Home/issues/10094."},{"Id":"14033237707","Type":"IssuesEvent","CreatedAt":"2020-10-30T19:22:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10212","RelatedDescription":"Opened issue \"A lot of the restore coverage relies on project.json instead of PackageReference tests\" (#10212) at NuGet/Home","RelatedBody":"These 2 are largely equivalent in the core restore part, but there are some slight differences. \r\nWe should move these tests to PR.\r\n\r\nRelated: https://github.com/NuGet/Home/issues/10211"},{"Id":"14033212224","Type":"IssuesEvent","CreatedAt":"2020-10-30T19:19:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10211","RelatedDescription":"Opened issue \"Add metadata to restore tests, make them go through the no-op codepath\" (#10211) at NuGet/Home","RelatedBody":"While I investigating https://github.com/NuGet/Home/issues/10068, I hit an known problem of the no-op codepath not being exercised in a good amount of unit test. \r\n\r\nThe reason is that the packagespec is not created with the same amount of details prod package spec would be.\r\nIn prod scenarios, all restores go through the restorerunner which calls https://github.com/NuGet/NuGet.Client/blob/c3219e49852add8371db25680a300cce5551ef00/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/SpecValidationUtility.cs#L28 to validate that things like the `RestoreMedata` are not null or empty.\r\n\r\nNow this is not a major problem for no-op, I have not discovered any regressions because of this, but it *does* not reflect what the actual restore code run is."},{"Id":"14032929773","Type":"IssuesEvent","CreatedAt":"2020-10-30T18:50:22","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10210","RelatedDescription":"Opened issue \"PM UI:  performance of installing package to solution has regressed\" (#10210) at NuGet/Home","RelatedBody":"In VS 2019 16.7.6 it took ~17.5 minutes to install [System.Ben 1.0.1](https://www.nuget.org/packages/System.Ben/1.0.1) to all 82 projects in the NuGet.Client solution.\r\n```\r\nTime Elapsed: 00:17:27.1112177\r\n========== Finished ==========\r\n```\r\nIn VS 2019 16.9 P2 it took ~27 minutes to install.\r\n```\r\nTime Elapsed: 00:27:18.8386891\r\n========== Finished ==========\r\n```\r\nNot only is 17 minutes too long to begin with, but the 10- minute regression is even worse.\r\n\r\nI haven't investigated yet, so it's unclear exactly when the regression occurred; however, the CodeSpaces work in 16.8 is a reasonable first guess.\r\n\r\nCC @rrelyea, @sbanni"},{"Id":"14032602059","Type":"IssuesEvent","CreatedAt":"2020-10-30T18:17:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8957","RelatedDescription":"Closed issue \"Item template is no longer visible after adding Asset elements\" (#8957) at NuGet/Home","RelatedBody":"- After adding the `Asset` elements for nuget packages. The template is no longer listed in list of available item to add to projects.\n\n- I also don't understand why do I need to set `repositoryId` in template properties to VSIX project id, essentially creating circular dependency between those project. \n\n- The \"2. Place your `nupkg` files in a folder called `Packages` within the VSIX.\" instruction is also not clear. Is putting the folder in file system enough? Do I need to also include it in the project definition? Should I copy it to output directory or set the files as resources? \n- Where exactly do I put the `&lt;Reference ...&gt;` element mentioned in \"Best practices\"?\n\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: bbf9be6a-e7b0-b9b6-a3e8-8b5de3c6900d\n* Version Independent ID: c12505c9-6f14-7111-2578-5c2664b4515d\n* Content: [NuGet Packages in Visual Studio templates](https://docs.microsoft.com/en-us/nuget/visual-studio-extensibility/visual-studio-templates)\n* Content Source: [docs/visual-studio-extensibility/Visual-Studio-Templates.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/visual-studio-extensibility/Visual-Studio-Templates.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-11-02T05:30:39.6823159Z","RunDurationInMilliseconds":1752}