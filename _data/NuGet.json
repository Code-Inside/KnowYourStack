{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"29474307163","Type":"IssuesEvent","CreatedAt":"2023-06-01T20:43:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9519","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \"Minimum NuGet Client Version\" field is empty in package metadata preview\" (#9519) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen a package is uploaded specifying [`minClientVersion`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#minclientversion) metadata attribute it seems there is an attempt to surface the value in the confirmation page after package upload, but the value is not printed under the header.\n\n### Repro Steps\n\n1. Make a package with a valid value of `minClientVersion` metadata attribute (`6.0` for example).\r\n2. Try uploading it through web UI.\r\n3. Observe empty line after \"Minimum NuGet Client Version\" header under \"Verify\"\n\n### Expected Behavior\n\nAn actual version displayed.\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/102933/69a4cb47-fd50-4f53-99aa-b40900ac8eb2)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29472503422","Type":"IssuesEvent","CreatedAt":"2023-06-01T19:16:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9146","RelatedDescription":"Closed issue \"[Feature]: Increase the page size of the V3 catalog\" (#9146) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nCurrently, the V3 catalog on NuGet.org has a page size of 550. This has served us well for many years but, as the protocol demands, the catalog is append only so the catalog `index.json` will only grow as the number of catalog leaves accumulates. To slow down the `index.json` growth rate we can increase the page size.\r\n\r\nThis will give us more time to plan a fully scalable solution (e.g. https://github.com/NuGet/NuGetGallery/issues/7787).\r\n\r\nThe downloads.v1.json file is over 100 MB and still parses fine but the difference here is that the catalog index.json may be downloaded much more frequently (to poll for catalog commits). A smaller file is better.\n\n### The Elevator Pitch\n\nWe should add the ability to configure the page size. It's a .NET constant right now of 550. We should increase it to a larger size. The value of 1650 seems to be working just fine in DEV for several weeks\n\n### Additional Context and Details\n\nWe have an internal discussion [on Teams](https://teams.microsoft.com/l/message/19:d10cd9192de2492986fba3baeea3093c@thread.skype/1652468991222?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=ad34ac55-6785-4e7c-82c3-7ba405d30c3c&parentMessageId=1652468991222&teamName=NuGet&channelName=Server&createdTime=1652468991222).\r\n\r\nThe index.json size over time is here:\r\n![image](https://user-images.githubusercontent.com/94054/174692360-048bc4e8-dc22-4a77-8acb-cc511f156bab.png)\r\n(y = bytes, x = month)\r\n\r\nWe already have several jumbo pages from deprecations:\r\nPageUrl | LeafCount | max_CommitTimestamp\r\n-- | -- | --\r\nhttps://api.nuget.org/v3/catalog0/page9598.json | 1728 | 2020-02-09 13:04:53.7647929\r\nhttps://api.nuget.org/v3/catalog0/page10769.json | 1183 | 2020-08-20 19:28:36.8641381\r\nhttps://api.nuget.org/v3/catalog0/page10770.json | 1134 | 2020-08-20 19:29:20.2945851\r\nhttps://api.nuget.org/v3/catalog0/page12124.json | 997 | 2021-03-12 10:27:09.9984875\r\nhttps://api.nuget.org/v3/catalog0/page10857.json | 839 | 2020-09-03 13:35:37.7371129\r\n\r\nThe change in index.json MoM (month over month) is here:\r\n![image](https://user-images.githubusercontent.com/94054/174692474-68b819e8-9203-4ca1-b085-cd5e0c13eb69.png)\r\n"},{"Id":"29472494639","Type":"IssuesEvent","CreatedAt":"2023-06-01T19:15:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9504","RelatedDescription":"Closed issue \"[NuGet.org Bug]: 404 reason phrase is not properly returned for package unlist\" (#9504) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nThe reason phrase we configure in gallery for API 404 responses is clobbered by our default pretty 404 error page. As you can see this just has the default \"Not found\" here:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/94054/ce926e92-58c5-40f1-84db-570b27494110)\r\n\r\nIt should be showing this string:\r\nhttps://github.com/NuGet/NuGetGallery/blob/912cd3bd73432f6edf8a9e20106d3cc635ca99df/src/NuGetGallery/Controllers/ApiController.cs#L876-L877\r\n\r\nOther status codes like 400 work properly.\n\n### Repro Steps\n\nTry to unlist a package using `nuget.exe delete` that does not exist and check the error response. It just says \"not found\" not a full message.\r\n\r\nIt says `Response status code does not indicate success: 404 (Not Found).`\n\n### Expected Behavior\n\nIt should say `\"Response status code does not indicate success: 404 (A package with ID 'does-not-exist' and version '1.0.0' does not exist.).\"`\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29338556594","Type":"IssuesEvent","CreatedAt":"2023-05-26T12:11:45","Actor":"dscheg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9518","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Table in README markdown looks ugly due to word wrap that breaks words\" (#9518) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n1. Table in README markdown looks ugly if some column contains a long text due to word wrap that breaks words in other columns even inside the inline code block. Compare rendered tables: Nuget https://www.nuget.org/packages/GlobRegex vs Github https://github.com/dscheg/GlobRegex\r\nGithub markdown looks good even on narrow screens. CSS to fix issue:\r\n```css\r\n.readme-common .table {\r\n  overflow: auto;\r\n  display: block;\r\n  word-break: normal;\r\n}\r\n```\r\n\r\n2. It might be better to have a horizontal scroll and turn off word wrap inside multiline code blocks, because it seems such code is hard to read, given that there are no line numbers and display of hyphens: it is not always clear whether the EOL is in the code itself or word wraping has been applied. The same example links above. CSS to fix issue: `pre code { white-space: pre; }` instead of `pre code { white-space: pre-wrap; }`\r\n\n\n### Repro Steps\n\nCreate readme for the package with:\r\n1. Table with 3 columns with a long text inside the middle column\r\n2. Multiple long lines inside multiline code block\n\n### Expected Behavior\n\n1. Table looks good even with long text in some column\r\n2. Multiline code blocks are easy to read even with long lines\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/1962268/513789fc-7d62-452b-9a10-e2e6607af536)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29298313034","Type":"IssuesEvent","CreatedAt":"2023-05-24T23:50:39","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9517","RelatedDescription":"Opened issue \"[NuGet.org Bug]: [Admin UI] Show number of package versions that have been selected in the Admin Unlist UI\" (#9517) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWhen we have to unlist many package versions at once, we often need to break it up into smaller batches. Showing the number of package versions that have been selected in the bulk unlist UI would help me do a better job of batch-sizing.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2aacb376-6d0d-44c0-bc21-c5d442bcf831)\r\n\r\nWe could even add the ability to select the first 'X' <unlisted/listed> package versions to help with this.\n\n### Repro Steps\n\n1. Go to the Bulk Unlist UI in the Admin Panel\r\n2. Enter names of packages you need to unlist\r\n3. Scroll down\n\n### Expected Behavior\n\n1. Show how many package versions have been selected (possibly in the button text)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2aacb376-6d0d-44c0-bc21-c5d442bcf831)\r\n\r\n2. Add the ability to select the first 'X' <unlisted/listed> package versions among those shown.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"29293556712","Type":"PullRequestEvent","CreatedAt":"2023-05-24T19:00:17","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9501","RelatedDescription":"Merged pull request \"[2FA] Avoid new accounts coming to the Register page.\" (#9501) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Add `noindex` for `Register` (signup) and `SignInNugetAccount` (LogOnNuGetAccount) to avoid displaying them on search engines\r\n* `SignUp` (/users/account/signup) page now redirects to `Sign In`.\r\n* `LegacyRegister` (/account/register) page now redirects to `Sign In`.\r\n* `Register` POST endpoint redirects to `Sign In` when it has a password registration and 2FA enforcement flag is turned.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/4768"},{"Id":"29270036909","Type":"IssuesEvent","CreatedAt":"2023-05-24T01:17:35","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9516","RelatedDescription":"Opened issue \"Remove unused 'OrganizationsEnabledForAll' file in blob storage\" (#9516) at NuGet/NuGetGallery","RelatedBody":"'OrganizationsEnabledForAll' property was removed  5 years ago.\nhttps://github.com/NuGet/NuGetGallery/pull/5822/files\n\nHowever, this property is still in Login-Discontinuation-Configuration.json, it throws exceptions when initialization loginconfiguration.\n\n "},{"Id":"29266406334","Type":"PullRequestEvent","CreatedAt":"2023-05-23T20:49:21","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9515","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.05.23]RI of dev into main\" (#9515) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"29261367196","Type":"PullRequestEvent","CreatedAt":"2023-05-23T16:51:30","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9515","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.05.23]\" (#9515) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"29477521059","Type":"IssuesEvent","CreatedAt":"2023-06-02T00:28:41","Actor":"pharring","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12628","RelatedDescription":"Opened issue \"OutputPath contains double path separator leading to NU5019 in nuget pack\" (#12628) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 8 Preview 4 SDK\n\n### Worked before?\n\n.NET 7 SDK\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOriginally reported at https://github.com/dotnet/sdk/issues/32971\r\n\r\n### Describe the bug\r\n.NET 8 Preview 4 SDK\r\nRequires: A .NET SDK project with multi-targeting (TargetFrameworks plural) and a custom .nuspec\r\nThe OutputPath property ends up with a double slash (path separator) because PlatformName is undefined.\r\nNuget pack doesn't like the double-slash, leading to a NU5019 (file not found) error.\r\n\r\n### To Reproduce\r\nHere's a gist:\r\nhttps://gist.github.com/pharring/aef107238843a1c6c7ea9f0be87795d6\r\n\r\nCopy the three files to a local directory and build it with `dotnet build`\r\nOutput:\r\n```\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5019: File not found: 'b\r\nin\\\\Debug\\foo.txt'. [C:\\throwaway\\foo2\\foo.csproj]\r\n```\r\n\r\n### Exceptions (if any)\r\nNote that this repros only with multitargeting. If you change `TargetFrameworks` to `TargetFramework` (singular), then it works.\r\nThe problem seems to be that `PlatformName` is not set in the multitargeting case (it should default to `AnyCpu`) so `OutputPath` gets initialized with a double path separator.\r\n\r\n### Further technical details\r\n- Output of `dotnet --info`:\r\n```\r\n.NET SDK:\r\n Version:   8.0.100-preview.4.23260.5\r\n Commit:    2268e7b15c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0-preview.4.23259.5\r\n  Architecture: x64\r\n  Commit:       84a3d0e37e\r\n\r\n.NET SDKs installed:\r\n  7.0.400-preview.23274.1 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100-preview.4.23260.5 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-preview.4.23260.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-preview.4.23259.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-preview.4.23260.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n \r\n- The IDE (VS / VS Code/ VS4Mac) you're running on, and its version: VS 2022 17.7 Preview 2\n\n### Verbose Logs\n\n```shell\nThe complete log is too long to fit here. This is the relevant piece, I think:\r\n\r\n\r\n1:11>Target \"_GetPackageFiles\" in file \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets\" from project \"C:\\throwaway\\foo\\foo.csproj\" (target \"GenerateNuspec\" depends on it):\r\n  1:11>Done building target \"_GetPackageFiles\" in project \"foo.csproj\".\r\n  1:11>Target \"SetNuspecProperties\" in project \"C:\\throwaway\\foo\\foo.csproj\" (target \"GenerateNuspec\" depends on it):\r\n       Task \"Message\"\r\n         Platform = AnyCPU\r\n       Done executing task \"Message\".\r\n       Task \"Message\"\r\n         PlatformName = \r\n       Done executing task \"Message\".\r\n       Task \"Message\"\r\n         OutputPath = bin\\\\Release\\\r\n       Done executing task \"Message\".\r\n  1:11>Done building target \"SetNuspecProperties\" in project \"foo.csproj\".\r\n  1:11>Target \"_GetAbsoluteOutputPathsForPack\" in file \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets\" from project \"C:\\throwaway\\foo\\foo.csproj\" (target \"_GetOutputItemsFromPack\" depends on it):\r\n       Task \"ConvertToAbsolutePath\"\r\n       Done executing task \"ConvertToAbsolutePath\".\r\n       Task \"ConvertToAbsolutePath\"\r\n       Done executing task \"ConvertToAbsolutePath\".\r\n       Task \"ConvertToAbsolutePath\"\r\n       Done executing task \"ConvertToAbsolutePath\".\r\n  1:11>Done building target \"_GetAbsoluteOutputPathsForPack\" in project \"foo.csproj\".\r\n  1:11>Target \"_GetOutputItemsFromPack\" in file \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets\" from project \"C:\\throwaway\\foo\\foo.csproj\" (target \"_CalculateInputsOutputsForPack\" depends on it):\r\n       Assembly loaded during TaskRun: NuGet.Build.Tasks.Pack, Version=6.7.0.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35 (location: C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\CoreCLR\\NuGet.Build.Tasks.Pack.dll, MVID: 7989af01-cc0c-4237-82b7-99060fb0a512, AppDomain: [Default])\r\n       Using \"GetPackOutputItemsTask\" task from assembly \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\..\\CoreCLR\\NuGet.Build.Tasks.Pack.dll\".\r\n       Task \"GetPackOutputItemsTask\"\r\n       Done executing task \"GetPackOutputItemsTask\".\r\n  1:11>Done building target \"_GetOutputItemsFromPack\" in project \"foo.csproj\".\r\n  1:11>Target \"_CalculateInputsOutputsForPack\" in file \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets\" from project \"C:\\throwaway\\foo\\foo.csproj\" (target \"GenerateNuspec\" depends on it):\r\n  1:11>Done building target \"_CalculateInputsOutputsForPack\" in project \"foo.csproj\".\r\n       Target \"_GetProjectReferenceVersions\" skipped, due to false condition; ('$(NuspecFile)' == '') was evaluated as ('foo.nuspec' == '').\r\n       Target \"_InitializeNuspecRepositoryInformationProperties\" skipped, due to false condition; ('$(SourceControlInformationFeatureSupported)' == 'true') was evaluated as ('' == 'true').\r\n  1:11>Target \"GenerateNuspec\" in file \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets\" from project \"C:\\throwaway\\foo\\foo.csproj\" (target \"Pack\" depends on it):\r\n       Building target \"GenerateNuspec\" completely.\r\n       Output file \"C:\\throwaway\\foo\\bin\\Release\\foo.1.0.0.nupkg\" does not exist.\r\n       Task \"ConvertToAbsolutePath\"\r\n       Done executing task \"ConvertToAbsolutePath\".\r\n       Using \"PackTask\" task from assembly \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\..\\CoreCLR\\NuGet.Build.Tasks.Pack.dll\".\r\n       Task \"PackTask\"\r\n         Assembly loaded during TaskRun (NuGet.Build.Tasks.Pack.PackTask): System.Linq.Parallel, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.0-preview.4.23259.5\\System.Linq.Parallel.dll, MVID: eb5dd35b-7504-47fe-a24a-f1e015205dd7, AppDomain: [Default])\r\n  1:11>C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.4.23260.5\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5019: File not found: 'bin\\\\Release\\netstandard2.0\\foo.txt'. [C:\\throwaway\\foo\\foo.csproj]\r\n         Assembly loaded during TaskRun (NuGet.Build.Tasks.Pack.PackTask): System.Diagnostics.StackTrace, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (location: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.0-preview.4.23259.5\\System.Diagnostics.StackTrace.dll, MVID: b61d4061-c3a1-4f42-bf39-6feedf83f3f4, AppDomain: [Default])\r\n         NuGet.Packaging.Core.PackagingException: File not found: 'bin\\\\Release\\netstandard2.0\\foo.txt'.\r\n            at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String exclude)\r\n            at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files)\r\n            at NuGet.Packaging.PackageBuilder..ctor(String path, String basePath, Func`2 propertyProvider, Boolean includeEmptyDirectories, Boolean deterministic)\r\n            at NuGet.Commands.PackCommandRunner.CreatePackageBuilderFromNuspec(String path)\r\n            at NuGet.Commands.PackCommandRunner.BuildFromNuspec(String path)\r\n            at NuGet.Build.Tasks.Pack.PackTask.Execute()\r\n       Done executing task \"PackTask\" -- FAILED.\r\n  1:11>Done building target \"GenerateNuspec\" in project \"foo.csproj\" -- FAILED.\r\n  1:11>Done Building Project \"C:\\throwaway\\foo\\foo.csproj\" (pack target(s)) -- FAILED.\n```\n"},{"Id":"29476512629","Type":"IssuesEvent","CreatedAt":"2023-06-01T22:59:46","Actor":"midnite8177","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12627","RelatedDescription":"Opened issue \"ResolverComparer does not return consistent results with DependencyBehavior.HighestMinor and DependencyBehavior.HighestPatch\" (#12627) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n6.6.0\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nExecute code that tries to resolve dependencies with DependencyBehavior.HighestMinor or DependencyBehavior.HighestPatch and a dependency has the same Major, Minor, and Patch values, but differ in a prerelease string value. In my case, I am using code derived from FolderNuGetProject.\r\n\r\nIn the code there is a call to `list.Sort(_prioritySorter);` which will fail because an IComparer (ResolverComparer) has returned confusing values.\r\n\r\nFor example, the dependencies: \"Serilog.Settings.Configuration 4.0.0-dev-00482\" and \"Serilog.Settings.Configuration 4.0.0-dev-00389\" will return -1 from ResolverComparer.Compare for both permutations.\r\n\r\nIn testing a fix, I found putting the following code before the return of these two cases of the switch statement at the bottom of Compare, fixed it:\r\n```\r\nif( xv.Major == yv.Major &&\r\n    xv.Minor == yv.Minor &&\r\n    xv.Patch == yv.Patch )\r\n{\r\n   // Same version, sort by prerelease version\r\n   return -1 * _versionComparer.Compare(xv, yv);\r\n}\r\n```\r\n\r\nThe reasoning is:\r\n```\r\nreturn new[] { x, y }.OrderBy(p => p.Version.Major)\r\n     .ThenByDescending(p => p.Version.Minor)\r\n     .ThenByDescending(p => p.Version.Patch).FirstOrDefault() == x ? -1 : 1;\r\n\r\n```\r\nIs always going to return -1 when Major/Minor/Patch values are equal.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"29474973434","Type":"IssuesEvent","CreatedAt":"2023-06-01T21:16:58","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/12623","RelatedDescription":"Reopened issue \"The vulnerable label doesn’t show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages \" (#12623) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.7.0.51\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:      \r\n\r\n1. Create a C# Console App (.NET Core 8.0) project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open the PM UI.  \r\n\r\n3. Select the package source: “nuget.org” near the gear button.  \r\n\r\n4. Go to \"Browse\" tab, search a package “Newtonsoft.Json” which have vulnerable versions and expand the \"Version\" drop-down box in the right panel. \r\n\r\n#### Expected:      \r\n\r\nThe vulnerable label should show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages \r\n\r\n#### Actual:      \r\n\r\nThe vulnerable label doesn’t show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages below screenshot: \r\n![image](https://github.com/NuGet/Home/assets/84695155/d653fa75-9687-4452-9d29-df6113023496)\r\n#### Notes:   \r\n1.The repro rate is 100%.   \r\n2. It doesn’t repro on Dev\\6.7.0.50 since the feature changed from Dev\\6.7.0.51. \r\n3. It does not repro when no vulnerable packages are searched as below screenshot: \r\n![image](https://github.com/NuGet/Home/assets/84695155/6b3aafb7-cf66-4e79-93b2-89dc789946c8)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"29468165416","Type":"IssuesEvent","CreatedAt":"2023-06-01T16:02:38","Actor":"NikolaMilosavljevic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12626","RelatedDescription":"Opened issue \"Use of obsolete API for Exception constructor\" (#12626) at NuGet/Home","RelatedBody":"When using the latest build of .NET 8 Preview 4 SDK to build the `nuget.client` repo, it results in the following analyzer error:\r\n`\r\n/vmr/src/nuget-client/src/NuGet.Core/NuGet.Frameworks/FrameworkException.cs(17,88): error SYSLIB0051: 'Exception.Exception(SerializationInfo, StreamingContext)' is obsolete: 'This API supports obsolete formatter-based serialization. It should not be called or extended by application code.' (https://aka.ms/dotnet-warnings/SYSLIB0051) [/vmr/src/nuget-client/src/NuGet.Core/NuGet.Frameworks/NuGet.Frameworks.csproj::TargetFramework=net8.0]\r\n`\r\nThis was caught by the Source-build bootstrapping build workflow which uses a source-built version of the latest SDK to build the product's repos."},{"Id":"29446858617","Type":"IssuesEvent","CreatedAt":"2023-05-31T22:39:12","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12555","RelatedDescription":"Closed issue \"Compliance Assessments for Global Readiness\" (#12555) at NuGet/Home","RelatedBody":""},{"Id":"29442094882","Type":"IssuesEvent","CreatedAt":"2023-05-31T18:34:06","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12598","RelatedDescription":"Closed issue \"Enable source-build pre-built detection\" (#12598) at NuGet/Home","RelatedBody":"Contributes to https://github.com/dotnet/source-build/issues/3017\r\n\r\nEnable source-build pre-build detection in `nuget.client` repo, with a custom model of tracking prebuilts. Unlike all other repost that contribute to .NET product, `nuget.client` does not use Arcade build infra. It is not currently possible to flow .NET dependencies, i.e. SBRP intermediate package. Without package flow, prebuilts can not be eliminated at the point of detection.\r\n\r\nSpecifics of this work:\r\n- Enable prebuilt detection, ensuring that we only detect prebuilts in inner source-build\r\n- Use baseline exclusion list (https://github.com/NuGet/NuGet.Client/blob/dev/eng/SourceBuildPrebuiltBaseline.xml) to capture all current prebuilts. All exclusions for .NET packages should use `*` version. All external packages should use current, static version\r\n- Enable `nuget.client` contributors to communicate any new prebuilts back to source-build team, by documenting the process and/or by leaving a hint in build output of prebuilt detection step\r\n- [Optional] Update source-build infra to enable publishing of source-build intermediate package\r\n\r\nProcess to be followed by repo contributors introducing new prebuilts:\r\n- Follow the upcoming instructions for communicating new prebuilts to source-build team\r\n- Add any new prebuilts to the aforementioned baseline XML, as part of the PR, ensuring source-build leg is clean"},{"Id":"29440816855","Type":"IssuesEvent","CreatedAt":"2023-05-31T17:35:54","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12623","RelatedDescription":"Closed issue \"The vulnerable label doesn’t show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages \" (#12623) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.7.0.51\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:      \r\n\r\n1. Create a C# Console App (.NET Core 8.0) project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open the PM UI.  \r\n\r\n3. Select the package source: “nuget.org” near the gear button.  \r\n\r\n4. Go to \"Browse\" tab, search a package “Newtonsoft.Json” which have vulnerable versions and expand the \"Version\" drop-down box in the right panel. \r\n\r\n#### Expected:      \r\n\r\nThe vulnerable label should show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages \r\n\r\n#### Actual:      \r\n\r\nThe vulnerable label doesn’t show in the “version” dropdown box of “Browse” tab when searching for vulnerable packages below screenshot: \r\n![image](https://github.com/NuGet/Home/assets/84695155/d653fa75-9687-4452-9d29-df6113023496)\r\n#### Notes:   \r\n1.The repro rate is 100%.   \r\n2. It doesn’t repro on Dev\\6.7.0.50 since the feature changed from Dev\\6.7.0.51. \r\n3. It does not repro when no vulnerable packages are searched as below screenshot: \r\n![image](https://github.com/NuGet/Home/assets/84695155/6b3aafb7-cf66-4e79-93b2-89dc789946c8)\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"},{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-06-02T03:30:21.6927245Z","RunDurationInMilliseconds":1192}