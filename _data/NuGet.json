{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"45048806735","Type":"PullRequestEvent","CreatedAt":"2024-12-24T00:26:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10306","RelatedDescription":"Merged pull request \"[OIDC 16] Add IFederatedCredentialValidator for additional token validation\" (#10306) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10305.\r\n\r\nThis adds a new abstraction called `IFederatedCredentialValidator` which allows us to inject custom token validation code (i.e. closed source, \"shim\" code) into the token validation pipeline.\r\n\r\n0 or more `IFederatedCredentialValidator` implementations can be used by the policy evaluator to perform additional validations on bearer tokens. These additional implementations come from the `add-ins` directory via MEF, much like existing shims.\r\n\r\nThe flow of validation BEFORE the change is like this:\r\n1. Parse the JWT\r\n2. Identify the issuer\r\n3. Perform an OSS issuer-specific validation, such as [`EntraIdTokenValidator`](https://github.com/NuGet/NuGetGallery/blob/7c81548db51ed543ff8f6558c1306571a6bb368a/src/NuGetGallery.Services/Authentication/Federated/EntraIdTokenValidator.cs)\r\n4. If the issuer says the token is good, then compare it to the given list of trust policies.\r\n\r\nThis PR adds a new step between 3 and 4 where the request headers (in particular the `Authorization` header) is passed to each `IFederatedCredentialValidator` to get additional token validation results. If either the built-in token validation or any additional `IFederatedCredentialValidator` says the token is bad, it will be rejected. \r\n\r\nWe pass all request headers, the detected issuer type (e.g. Entra ID vs. GitHub Actions), and _unvalidated_ claims to the `IFederatedCredentialValidator`. This essentially provides all the context we have to the shim at the time so it can make the most informed decision.\r\n\r\nAt no point will as \"valid\" result from an `IFederatedCredentialValidator` override a \"bad\" result from the built-in token validation. In other words, if there is an inconsistency between various validation flows, we fail close and reject the token. We will log a warning if any of the validators disagree on valid vs. invalid.\r\n\r\nA `IFederatedCredentialValidator` can return `NotApplicable` if the validator is only meant for a specific issuer. For example, `IFederatedCredentialValidator` might only know how to validate GitHub Actions tokens, not Entra ID tokens. The GitHub Actions example is for the future of course. Right now, the only supported issuer is Entra ID.\r\n\r\nI chose to plumb the request headers in from the service layer (and eventually from the controller action) instead of using the current `HttpContext` so that the flow of data was clearer. I would have preferred to only provide the bearer token to `IFederatedCredentialValidator` instead of all headers, but our internal token validation library expects all request headers, not just the bearer token.\r\n\r\nOur internal token validation shim uses a newer version of Microsoft.Extensions.Caching.Memory so I had to bump up the version to avoid runtime issues."},{"Id":"45042422735","Type":"PullRequestEvent","CreatedAt":"2024-12-23T17:48:21","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10305","RelatedDescription":"Merged pull request \"[OIDC 15] Emit audit records during token exchange and policy admin\" (#10305) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10304.\r\n\r\nThis builds on a previous PR to actually emit new audit records from various \"write\" flows used in the OIDC feature. Most notibly, this provides an audit trail for admin actions on trust policies and an audit trail for token exchange.\r\n\r\nThe description of the audit entries in https://github.com/NuGet/NuGetGallery/pull/10291. This PR needs to come after our internal auditing library is updated to handle the new audit record shape. I have a PR opened for that but I won't link to it here since it is an internal repo."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"45165793438","Type":"IssuesEvent","CreatedAt":"2024-12-30T20:44:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/14026","RelatedDescription":"Closed issue \"NugetVersion acceptes a postfix of +15, but silently drops it off. \" (#14026) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently with the changes to gitversion v6, a fullsemver is produced like 9.0.8-141871-git-version.1+15, nugetversion will accept the value but will drop off the +15. In giversion v5, there was the following:\r\n`\"NuGetVersionV2\": \"9.0.7-141167-dex-param0008\",\r\n  \"NuGetVersion\": \"9.0.7-141167-dex-param0008\",\r\n  \"NuGetPreReleaseTagV2\": \"141167-dex-param0008\",\r\n  \"NuGetPreReleaseTag\": \"141167-dex-param0008\",`\r\n  Variables, but these are not available anymore. \n\n### Desired Behavior\n\nWould it be possible to adjust gitversion to convert the +15 to 0015, so that continuous versioning won't break. \n\n### Additional Context\n\nThis is after the breaking changes in gitversion v5 to v6, which is following [Semantic Versioning & auto-incremented NuGet package versions](https://www.xavierdecoster.com/post/2013/04/29/semantic-versioning-auto-incremented-nuget-package-versions.html) "},{"Id":"45165441556","Type":"IssuesEvent","CreatedAt":"2024-12-30T20:20:27","Actor":"ChaosYoda","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14026","RelatedDescription":"Opened issue \"NugetVersion acceptes a postfix of +15, but silently drops it off. \" (#14026) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nCurrently with the changes to gitversion v6, a fullsemver is produced like 9.0.8-141871-git-version.1+15, nugetversion will accept the value but will drop off the +15. In giversion v5, there was the following:\r\n`\"NuGetVersionV2\": \"9.0.7-141167-dex-param0008\",\r\n  \"NuGetVersion\": \"9.0.7-141167-dex-param0008\",\r\n  \"NuGetPreReleaseTagV2\": \"141167-dex-param0008\",\r\n  \"NuGetPreReleaseTag\": \"141167-dex-param0008\",`\r\n  Variables, but these are not available anymore. \n\n### Desired Behavior\n\nWould it be possible to adjust gitversion to convert the +15 to 0015, so that continuous versioning won't break. \n\n### Additional Context\n\nThis is after the breaking changes in gitversion v5 to v6, which is following [Semantic Versioning & auto-incremented NuGet package versions](https://www.xavierdecoster.com/post/2013/04/29/semantic-versioning-auto-incremented-nuget-package-versions.html) "},{"Id":"45157028676","Type":"IssuesEvent","CreatedAt":"2024-12-30T12:54:20","Actor":"marcin-krystianc","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14025","RelatedDescription":"Opened issue \"Restore cannot be completed for a large solution\" (#14025) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nSDK Version: 10.0.100-alpha.1.24630.4\n\n### Worked before?\n\nSDK Version: 9.0.101\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n- Start a clean Linux container:\r\n`docker.exe run -t -i --rm ubuntu`\r\n- Get daily build of dotnet and checkout test solutions:\r\n```\r\napt-get update && apt-get install -y wget git tar &&  \\\r\nmkdir /dotnet \\\r\n && wget https://aka.ms/dotnet/10.0.1xx/daily/dotnet-sdk-linux-x64.tar.gz \\\r\n && tar -C /dotnet -xvzf dotnet-sdk-linux-x64.tar.gz \\\r\n && rm dotnet-sdk-linux-x64.tar.gz \\\r\n && echo \"export DOTNET_ROOT=/dotnet\" >> $HOME/.bashrc \\\r\n && echo \"export PATH=$PATH:/dotnet:$HOME/.dotnet/tools\" >> $HOME/.bashrc \\\r\n && source ~/.bashrc \\\r\n && git clone https://github.com/marcin-krystianc/TestSolutions.git \\\r\n && cd TestSolutions \\\r\n && git reset --hard 142722bebfe90c4e5c98303fa1598db6a760adae\r\n``` \r\n- Run the restore:\r\n```\r\ndotnet restore -clp:PerformanceSummary -clp:summary --force /p:RestoreUseStaticGraphEvaluation=true LargeAppWithPrivatePackagesCentralisedNGBVRemoved/solution/LargeAppWithPrivatePackagesCentralisedNGBVRemoved.sln\r\n```\r\n\r\nIn version 9.0.101, the restore operation completes after about 10-20s.\r\nIn the recent daily build, the restore operation wasn't completed after >150s. It also consumes more and more RAM (tens of Gigabytes) until it exhausts all available resources and crashes the container.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"45153149749","Type":"IssuesEvent","CreatedAt":"2024-12-30T09:39:28","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14024","RelatedDescription":"Opened issue \"[Bug Bash] The warning icon on the right of installed vulnerable package version doesn’t show for the dependent project in “Consolidate” tab of solution-level PM UI\" (#14024) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.106\n\n### Worked before?\n\nIt’s not a regression since it is a new feature. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.106\r\nVS Version: Main\\35627.41\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\nThe repro rate is 100%.  \r\n#### Repro Steps:    \r\n1.Create a solution with two C# Console App (.NET [latest]) projects (called Project1 & Project2) and make sure Project1 referenced Project2.\r\n2.Right-click the project in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu item to open PM UI.\r\n3.Select the package source: \"nuget.org\" near the gear button.\r\n4.Go to the “Browse\" tab, install a vulnerable package version “Newtonsoft.json 12.0.1” into the Project2.\r\n5.Go to the “Installed” tab, click the installed package (e.g. \"Newtonsoft.Json\") in the package list and install another vulnerable package version “Newtonsoft.json 12.0.2” into the Project1.\r\n6.Go to the “Consolidate” tab and observe the warning icon on the right of every installed vulnerable package version.\r\n#### Expected Result:\r\nThe warning icon should show on the right of every installed vulnerable package version.\r\n#### Actual Result:\r\nThe warning icon on the right of installed vulnerable package version doesn’t show for the dependent project as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/4ad6d9a5-0ace-447d-b56c-2a2d83eedfac)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"45150372088","Type":"IssuesEvent","CreatedAt":"2024-12-30T07:00:21","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14023","RelatedDescription":"Opened issue \"[Bug Bash] The vulnerable warning icon info shows inconsistently between the right of the “Installed” tab and the right of the “Installed” column in solution-level PM UI \" (#14023) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.106\n\n### Worked before?\n\nIt is not a regression it is a new feature.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n #### Notes:   \r\n\r\nThe repro rate is 100%.  \r\n#### Repro Steps:    \r\n\r\n1. Create a solution with two C# Console App (.NET [latest]) projects (called Project1 & Project2) and make sure Project1 referenced Project2.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu item to open PM UI.    \r\n\r\n3. Select the package source: \"nuget.org\" near the gear button.    \r\n\r\n4. Go to the “Browse\" tab, install a vulnerable package version “Newtonsoft.json 12.0.1” into the Project2. \r\n\r\n5. Go to the “Installed” tab and click the installed package (e.g. \"Newtonsoft.Json\") in the package list.  \r\n\r\n6. Observe the package list, hover on the warning icon on the **right of the “Installed” tab** and the warning icon on the **right of the “Installed” column**. \r\n\r\n#### Expected:    \r\n\r\nThe warning icon info shows consistently between the right of the “Installed” tab and the right of the “Installed” column. \r\n\r\n \r\n\r\n#### Actual:    \r\n\r\nThe vulnerable warning icon info shows inconsistently between the right of the “Installed” tab and the right of the “Installed” column as below: \r\n![1230——3](https://github.com/user-attachments/assets/b0751ce1-7525-4cb0-a15a-36f2f18736d9)\r\n\r\n![1230_6](https://github.com/user-attachments/assets/b1948f81-4397-4381-9a8f-46a6dce03787)\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-31T03:30:22.1972057Z","RunDurationInMilliseconds":992}