{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"25533371801","Type":"IssuesEvent","CreatedAt":"2022-11-29T10:07:25","Actor":"zabszk","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9307","RelatedDescription":"Closed issue \"[Feature]: Allow README URLs from flat.badgen.net\" (#9307) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nbadgen.net is already on the list of allowed domains, however their subdomain flat.badgen.net (that provides a different badges style) is not.\r\n\r\nCan we have flat.badgen.net subdomain added as well, so projects can use the flat style of badges as well?\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25524488691","Type":"IssuesEvent","CreatedAt":"2022-11-29T00:15:33","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9313","RelatedDescription":"Reopened issue \"[Feature]: Add support for the net7.0 TFMs on the Frameworks tab\" (#9313) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n.NET 7 GA's in November (this month). Let's get `net7.0`, `net7.0-windows` etc showing on the Frameworks tab, as computed frameworks.\r\n\r\nThe asset framework (meaning a `net7.0` asset is in the package) shows up fine:\r\n![image](https://user-images.githubusercontent.com/94054/202015994-767c888d-8621-40e9-b288-24111eeccd8c.png)\r\n\r\nBut the computed frameworks do not.\r\n![image](https://user-images.githubusercontent.com/94054/202016132-9b3f7870-cfdd-45d1-9c82-07eeb322c216.png)\r\n\n\n### The Elevator Pitch\n\nAdd `net7.0` and the corresponding OS-specific frameworks to the Frameworks tab.\r\n\r\nAccording to @JonDouglas and [in the docs](https://learn.microsoft.com/en-us/dotnet/standard/frameworks#net-5-os-specific-tfms), the set of OS-specific frameworks is the same as `net6.0`.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25523896384","Type":"PullRequestEvent","CreatedAt":"2022-11-28T23:25:28","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9318","RelatedDescription":"Merged pull request \"Add domain flat.badgen.net\" (#9318) at NuGet/NuGetGallery","RelatedBody":"Add image domain 'flat.badgen.net' to allowlist \r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9307"},{"Id":"25523594734","Type":"PullRequestEvent","CreatedAt":"2022-11-28T23:02:43","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9318","RelatedDescription":"Opened pull request \"Add domain flat.badgen.net\" (#9318) at NuGet/NuGetGallery","RelatedBody":"Add image domain 'flat.badgen.net' to allowlist \r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9307"},{"Id":"25522869098","Type":"IssuesEvent","CreatedAt":"2022-11-28T22:14:00","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9313","RelatedDescription":"Closed issue \"[Feature]: Add support for the net7.0 TFMs on the Frameworks tab\" (#9313) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n.NET 7 GA's in November (this month). Let's get `net7.0`, `net7.0-windows` etc showing on the Frameworks tab, as computed frameworks.\r\n\r\nThe asset framework (meaning a `net7.0` asset is in the package) shows up fine:\r\n![image](https://user-images.githubusercontent.com/94054/202015994-767c888d-8621-40e9-b288-24111eeccd8c.png)\r\n\r\nBut the computed frameworks do not.\r\n![image](https://user-images.githubusercontent.com/94054/202016132-9b3f7870-cfdd-45d1-9c82-07eeb322c216.png)\r\n\n\n### The Elevator Pitch\n\nAdd `net7.0` and the corresponding OS-specific frameworks to the Frameworks tab.\r\n\r\nAccording to @JonDouglas and [in the docs](https://learn.microsoft.com/en-us/dotnet/standard/frameworks#net-5-os-specific-tfms), the set of OS-specific frameworks is the same as `net6.0`.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25522868157","Type":"PullRequestEvent","CreatedAt":"2022-11-28T22:13:57","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9317","RelatedDescription":"Merged pull request \"[ReleasePre][2022.11.22] FI of dev into main\" (#9317) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"25520171614","Type":"PullRequestEvent","CreatedAt":"2022-11-28T19:45:29","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9315","RelatedDescription":"Merged pull request \"[A11y] Remove aria-hidden attribute for prefix reserved element\" (#9315) at NuGet/NuGetGallery","RelatedBody":"Previous PR addressing the below issued introduced a new accessibility issue in which the prefix reserved checkmark was not accessible to screen readers. This PR removes the aria-hidden attribute associated with the prefix reserved icon and link. This solves the issue of the below a11y bug while also maintaining that the prefix reserved icon is not read aloud along with the package title header.\r\n\r\nPrevious PR: https://github.com/NuGet/NuGetGallery/pull/9314\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9299"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"25577830118","Type":"IssuesEvent","CreatedAt":"2022-12-01T00:18:14","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12286","RelatedDescription":"Closed issue \"Return different exit codes for dotnet list package report command in case vulnerable/outdated/deprecated package detected\" (#12286) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\nn/a\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\n_No response_\r\n\r\n### Repro Steps & Context\r\n\r\nCurrently `dotnet list package --format json` command only returns 0 or 1. Here 1 means `successfully generated report` or 1 means [some issue with generating the report](https://github.com/NuGet/Home/blob/04b3ebec7868c09054f800af8996148e4e3b15c8/proposed/2022/DotnetListPackageMachineReadableJsonOutput.md).\r\nStill customer have to parse json output to check if my report has any vulnerability/outdated/deprecated package.\r\nInstead, we could use return [different application exit code ](https://tldp.org/LDP/abs/html/exitcodes.html) to signal customer if there is any vulnerability issue or not, it would save them time.\r\nRelated issue: https://github.com/NuGet/Home/issues/7752\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"25577410932","Type":"IssuesEvent","CreatedAt":"2022-11-30T23:47:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7605","RelatedDescription":"Closed issue \"`dotnet list package --outdated` doesn't work with sources that need auth\" (#7605) at NuGet/Home","RelatedBody":"if a project has a source that needs to be authenticated, dotnet list package --outdated fails with the following error:\r\n\r\n```\r\nerror: Unable to load the service index for source https://msazure.pkgs.visualstudio.com/_packaging/**********.\r\nerror:   Response status code does not indicate success: 401 (Unauthorized).\r\n```"},{"Id":"25576440588","Type":"IssuesEvent","CreatedAt":"2022-11-30T22:37:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12252","RelatedDescription":"Closed issue \"Feature Request: Allow hard copy of  ContentFiles without the need for a separate target to copy the files.\" (#12252) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nI created a package that contain files either using nuspec files as described in [nuget home samples](https://github.com/NuGet/Samples/blob/main/ContentFilesExample/authoring/ContentFilesExample.nuspec) or from csproj file using `<content ... or None`\r\n```\r\n <ItemGroup>\r\n    <Content Include=\"contentfiles\\mytool.exe\">\r\n      <Pack>true</Pack>\r\n      <PackageCopyToOutput>true</PackageCopyToOutput>\r\n      <PackageFlatten>true</PackageFlatten>\r\n      <PackagePath>tools\\any\\any;content\\any\\any\\tools;;contentFiles\\any\\any\\tools</PackagePath>           \r\n    </Content>\r\n  </ItemGroup>\r\n```\r\nWhen I use this  package from a consumer project (net6 and net472), all files appear in visual studio as a link.\r\nIn VS code it's invisible at all and can not be reached although I use `PackageCopyToOutput`\r\n\r\nSome of these contents are tools that I want to run from within the project using MsBuild  'Exec`` command.\r\nThese files are not physically copied and I can not call these linked tool (they are not symbolic link files). \r\n\r\nFor example, run `dir' in the Console tool, don't list these files.\r\nI know that i can use a target to copy these files as described in this [thread](https://github.com/NuGet/Home/issues/6743#issuecomment-473425762)\r\n\r\nIt's nice if there an attribute used to insure this physical copy of files (text, exe,...) without the extra effort in creating a target.\r\n\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"25574778958","Type":"IssuesEvent","CreatedAt":"2022-11-30T21:01:07","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8265","RelatedDescription":"Closed issue \"Investigate signature trust and validity functional tests\" (#8265) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used: NuGet API\r\n\r\nNuGet version: dev branch\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): NuGet CI Pipeline\r\n\r\nWorked before? If so, with which NuGet version: These are tests that fails intermitently. \r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run a CI Build\r\n\r\nThe tests that are failing are:\r\n\r\n- `VerifySignaturesAsync_WithExpiredPrimarySignature_ValidCountersignature_AndPrimarySignatureValidAtCountersignTime_SucceedsAsync` [permalink](https://github.com/NuGet/NuGet.Client/blob/b039c16d01170759f12fb5da4a78aba36a425779/test/NuGet.Core.FuncTests/NuGet.Packaging.FuncTest/SigningTests/SignatureTrustAndValidityVerificationProviderTests.cs#L474) Failing at line 512 (approximately)\r\n- `VerifySignaturesAsync_WithExpiredAndUntrustedPrimarySignature_ValidCountersignature_AndPrimarySignatureValidAtCountersignTime_SucceedsAsync` [permalink](https://github.com/NuGet/NuGet.Client/blob/b039c16d01170759f12fb5da4a78aba36a425779/test/NuGet.Core.FuncTests/NuGet.Packaging.FuncTest/SigningTests/SignatureTrustAndValidityVerificationProviderTests.cs#L522) Failing at line 562 (apporximately)\r\n\r\n\r\n## Other suggested things\r\n\r\nBoth tests fails at verifying a results list that should be empty, according to the tests.\r\n\r\n```c#\r\n  var resultsWithErrors = result.Results.Where(r => r.GetErrorIssues().Any());\r\n```\r\n\r\nOther failing builds:\r\n\r\n- https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2798844&view=logs\r\n- https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2772497&view=logs&runId=6816226&resultId=100819\r\n- https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2792043&view=logs&runId=6965562&resultId=100192"},{"Id":"25574778053","Type":"IssuesEvent","CreatedAt":"2022-11-30T21:01:05","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8997","RelatedDescription":"Closed issue \"Clearly call out that the NuGet package manager settings are not part of import and export settings\" (#8997) at NuGet/Home","RelatedBody":"Motivation from https://developercommunity.visualstudio.com/content/problem/860482/nuget-package-sources-not-included-in-settings.html"},{"Id":"25574132053","Type":"IssuesEvent","CreatedAt":"2022-11-30T20:23:28","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12286","RelatedDescription":"Opened issue \"Return different exit codes for dotnet list package command in case vulnerable/outdated/deprecated package detected\" (#12286) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nn/a\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nCurrently `dotnet list package --format json` command only returns 0 or 1. Here 1 means `successfully generated report` or 1 means [some issue with generating the report](https://github.com/NuGet/Home/blob/04b3ebec7868c09054f800af8996148e4e3b15c8/proposed/2022/DotnetListPackageMachineReadableJsonOutput.md).\r\nStill customer have to parse json output to check if my report has any vulnerability/outdated/deprecated package.\r\nInstead, we could use return different application return code to signal customer if there is any vulnerability issue or not.\n\n### Verbose Logs\n\n_No response_"},{"Id":"25571799942","Type":"IssuesEvent","CreatedAt":"2022-11-30T18:18:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12285","RelatedDescription":"Opened issue \"CPM opt in detection in VS and commandline is different\" (#12285) at NuGet/Home","RelatedBody":"1. dotnet new classlib\r\n1. Change the project file to\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally >true</ManagePackageVersionsCentrally>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Versioning\" Version=\"6.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n1. Restore on the commandline (succeed)\r\n1. Load in VS.\r\n![image](https://user-images.githubusercontent.com/2878341/204876611-ad4c60bd-f9d7-47c8-9474-5a2a01bcfc21.png)\r\n\r\n\r\nThe checks in VS and commandline are different. The reason is that the commandline implementation checks for the existence of the directory.packages.props file, but the VS one does not. \r\n\r\nThese should be the same. \r\n\r\n2 ideas: \r\n\r\n- Do not require the directory.packages.props file to exist. This would be the project would fail on the commandline as well.\r\n- set the ManagePackageVersionsCentrally property to true if and only if, the prop value is true and the file was imported. This would allow nomination to just work. "},{"Id":"25570812198","Type":"IssuesEvent","CreatedAt":"2022-11-30T17:31:18","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12284","RelatedDescription":"Opened issue \"Fix CI failures for release-5.7.x branch\" (#12284) at NuGet/Home","RelatedBody":""},{"Id":"25563444413","Type":"IssuesEvent","CreatedAt":"2022-11-30T12:36:33","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12283","RelatedDescription":"Opened issue \"[Bug Bash] [Suggestion] Suggest making version “0.0.0” an invalid instead of valid package version and not showing an invalid version in PM UI\" (#12283) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.5.0.108\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\n#### Details about Problem\r\nVS Version: Main\\33129.147\r\nNuGet Version: Dev\\6.5.0.108\r\nOS Version: Windows-11-Enterprise-22H2 ENU\r\n\r\n#### Repro Steps:\r\n1. Create a C# Console App (.NET Core 7.0) project in VS.\r\n2. Right-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’ and select “nuget.org” in the source selection.\r\n3. Click “Browse” tab and search package “afine” in the filter.\r\n4. Select “afine” in the package list and click the “Version” drop-down list to observe.\r\n\r\n#### Expected:\r\nSuggest making version “0.0.0” an invalid instead of valid package version and not showing an invalid version in PM UI.\r\n\r\n#### Actual:\r\nThere is a version “0.0.0” as below. \r\n![image](https://user-images.githubusercontent.com/20632625/204797610-0589707f-aa69-40c9-bc95-73b6297340e6.png)\r\n\r\n#### Notes:\r\n**1.This version “0.0.0” seems invalid in some national culture, like Chinese culture. So we suggest make it an invalid instead of a valid version.**\r\n2.It’s not a regression, just a suggestion.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"25563345782","Type":"IssuesEvent","CreatedAt":"2022-11-30T12:32:08","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12282","RelatedDescription":"Opened issue \"[Bug Bash] Top-level Packages and transitive packages show incorrectly in “Installed” tab after the first auto-refreshing\" (#12282) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.5.0.108\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about Problem\r\nVS Version: Main\\33129.147\r\nNuGet Version: Dev\\6.5.0.108\r\nOS Version: Windows-11-Enterprise-22H2 ENU\r\n\r\n#### Repro Steps:\r\n1. Create a C# Console App (.NET Core 7.0) project in VS.\r\n2. Right-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’.\r\n3. Click “Browse” tab, search a package (e.g. “Microsoft.EntityFrameworkCore”) that has dependencies and click the “Install” button (↓) on the right.\r\n4. Click “OK” button in the “Preview Changes” dialog and click “I Accept” button in the “License Acceptance” dialog.\r\n5. Click “Installed” tab and observe the package list.\r\n6. Install a transitive package (e.g. “Microsoft.EntityFrameworkCore.Analyzers”) and observe the package list in “Installed” tab.\r\n\r\n#### Expected:\r\nTop-level Packages and transitive packages show correctly in “Installed” tab after the first auto-refreshing\r\n\r\n#### Actual:\r\nTop-level Packages and transitive packages show incorrectly in “Installed” tab after the first auto-refreshing as below video. They become correct after the second auto-refreshing.\r\n![TransitivePackage](https://user-images.githubusercontent.com/20632625/204793581-291188de-3a27-4833-a510-1bfb631e473a.gif)\n\n### Verbose Logs\n\n_No response_"},{"Id":"25553139228","Type":"IssuesEvent","CreatedAt":"2022-11-30T02:41:19","Actor":"lbussell","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12281","RelatedDescription":"Opened issue \"Update Microsoft.Web.Xdt to 7.0.0 in NuGet.Client\" (#12281) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe\n\n### Current Behavior\n\nNuGet.Client references Microsoft.Web.Xdt version 3.0.0.\n\n### Desired Behavior\n\nThe version of NuGet.Client shipping in .NET should reference Microsoft.Web.Xdt version 7.0.0, which is the version that ships in .NET 7.\n\n### Additional Context\n\nIn .NET source-build, we must manually replace this version with the one that ships in the .NET product (7.0.0 for .NET 7.0). It would be best if NuGet.Client references the most recent version of this package so that the .NET source-build and the NuGet.Client build are as closely aligned as possible.\r\n\r\nAdditional context where this caused an issue here: https://github.com/NuGet/Home/issues/12261 "},{"Id":"25553055501","Type":"IssuesEvent","CreatedAt":"2022-11-30T02:33:54","Actor":"lbussell","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12280","RelatedDescription":"Opened issue \"NuGet.Client uses the wrong compiler when building in a source-build tarball.\" (#12280) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\n.NET 6.0, 7.0, 8.0 source-build only\n\n### Worked before?\n\nThis seems to have been an issue since nuget-client was added to .NET source-build.\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nThis applies to all versions of .NET 6.0, 7.0, and probably 8.0 as well.\r\n\r\nWhen building in an end-to-end source-build tarball context, NuGet Client is using the \"bootstrap\" version of the compiler, instead of the version that was built earlier in the source-bulid from the Roslyn repo. This causes new CS9057 errors whenever the compiler version is different between our bootstrap SDK and the version we build in source-build. We can no-warn CS9057 but this should be addressed.\r\n\r\nThis is likely an issue with the way we try to use arcade in NuGet Client, since it isn't fully onboarded like other projects in the `dotnet` org.\r\n\r\ncc @crummel who worked on the NuGet Client arcade infrastructure before.\n\n### Verbose Logs\n\n_No response_"},{"Id":"25550914903","Type":"IssuesEvent","CreatedAt":"2022-11-29T23:37:40","Actor":"skofman1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12279","RelatedDescription":"Opened issue \"PM UI versions drop-down should show vulnerability information\" (#12279) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI\n\n### The Elevator Pitch\n\nWhen choosing which version to install in PM UI, it would be helpful if the drop down (on Search, Install, Update tabs), will show if a package is vulnerable, for example by adding a warning icon next to the version.\r\n\r\n![image](https://user-images.githubusercontent.com/16807822/204671655-a70f3635-9f54-4b87-82d1-94bcd9fa171e.png)\r\n\r\nPotentially aligning with the nuget.org view:\r\n![image](https://user-images.githubusercontent.com/16807822/204671765-c2d60543-a951-4a85-ab01-a130a62b8205.png)\r\n \n\n### Additional Context and Details\n\nAs we focus on showing vulnerability information in different parts of the VS UI, IMO this would help in making the experience consistent across the board."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"24695608920","Type":"IssuesEvent","CreatedAt":"2022-10-19T11:53:07","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Closed issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."},{"Id":"24531970399","Type":"IssuesEvent","CreatedAt":"2022-10-11T17:13:00","Actor":"kartheekp-ms","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/65","RelatedDescription":"Opened issue \"Microsoft Security Advisory  CVE-2022-41032 | .NET Elevation of Privilege Vulnerability\" (#65) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE-2022-41032 | .NET Elevation of Privilege Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 7.0.0-rc, .NET 6.0, .NET Core 3.1, and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 7.0.0-rc.1, .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol) where a malicious actor could cause a user to execute arbitrary code.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/nuget/home/issues. (TBD)\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.3.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.2.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 6.0.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.11.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.9.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 5.7.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol 4.9.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET 6.0 application running on .NET 6.0.9 or earlier.\r\n- Any .NET 3.1 application running on .NET Core 3.1.29 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.Protocol versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n\r\n- If you're using NuGet.exe 6.3.0 or lower, you should download and install 6.3.1 from https://dist.nuget.org/win-x86-commandline/v6.3.1/nuget.exe .\r\n\r\n- If you're using NuGet.exe 6.2.1 or lower, you should download and install 6.2.2 from https://dist.nuget.org/win-x86-commandline/v6.2.2/nuget.exe .\r\n\r\n- If you're using NuGet.exe 6.0.2 or lower, you should download and install 6.0.3 from https://dist.nuget.org/win-x86-commandline/v6.0.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.11.2 or lower, you should download and install 5.11.3 from https://dist.nuget.org/win-x86-commandline/v5.11.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.9.2 or lower, you should download and install 5.9.3 from https://dist.nuget.org/win-x86-commandline/v5.9.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 5.7.2 or lower, you should download and install 5.7.3 from https://dist.nuget.org/win-x86-commandline/v5.7.3/nuget.exe .\r\n\r\n- If you're using NuGet.exe 4.9.5 or lower, you should download and install 4.9.6 from https://dist.nuget.org/win-x86-commandline/v4.9.6/nuget.exe .\r\n\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nIf you're using .NET Core 6.0, you should download and install Runtime 6.0.10 or SDK 6.0.110 (for Visual Studio 2022 v17.0) or SDK 6.0.402 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nIf you're using .NET Core 3.1, you should download and install Runtime 3.1.30 or SDK 3.1.424 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core 3.1 or .NET 6.0, please email details to [secure@microsoft.com](secure@microsoft.com). Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at [https://github.com/NuGet/NuGet.Client](https://github.com/NuGet/NuGet.Client). The [Announcements repo](https://github.com/NuGet/Announcements/issues) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Edward Thomson](https://twitter.com/ethomson) \r\n\r\n### External Links\r\n\r\n[CVE 2022-41032](https://www.cve.org/CVERecord?id=CVE-2022-41032)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 11, 2022): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2022-10-11_\r\n"},{"Id":"24368370626","Type":"IssuesEvent","CreatedAt":"2022-10-03T17:00:05","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/64","RelatedDescription":"Opened issue \"Transition from Symantec timestamping service to DigiCert timestamping service\" (#64) at NuGet/Announcements","RelatedBody":"Between October 4th, 2022 and October 24, 2022 we will transition from the deprecated Symantec timestamping service currently in use to the DigiCert timestamping service for both Microsoft author signing and NuGet.org repository signing NuGet packages for new package submissions only.\r\n\r\n*  October 4th – October 24th:  Update NuGet.org repository signing to use http://timestamp.digicert.com/. Although all environments (DEV, INT, and PROD) will be updated during this window, http://nuget.org (PROD) specifically will be updated only near the beginning and end of this window.\r\n*  October 18th – 20th:  Update Microsoft author signing to use http://timestamp.digicert.com/.\r\n \r\nWe expect a smooth and quiet transition; however, if you have questions or concerns, either contact support@nuget.org or post [here](https://github.com/NuGet/NuGetGallery/issues/9259).\r\n \r\nPlease see [dotnet/core#7688](https://github.com/dotnet/core/issues/7688) and [Proposal to re-enable signed NuGet package verification](https://github.com/dotnet/designs/blob/main/accepted/2021/signed-package-verification/re-enable-signed-package-verification.md) for context."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":13,"RawContent":null}]}},"RunOn":"2022-12-01T03:30:26.6663547Z","RunDurationInMilliseconds":1458}