{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"28662085479","Type":"PullRequestEvent","CreatedAt":"2023-04-26T00:11:52","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9440","RelatedDescription":"Merged pull request \"[Search DV] Display deprecation and vulnerabilities on search page.\" (#9440) at NuGet/NuGetGallery","RelatedBody":"### Changes\r\n* Retrieve Deprecation and Vulnerabilities from Search Service.\r\n* Added Deprecation and Vulnerabilities properties to Package.\r\n* Display badges on search page.\r\n\r\n### Screenshots\r\n\r\n![Vulnerable and Deprecated](https://user-images.githubusercontent.com/17834924/227634254-474afdcb-d797-40a4-b978-6bd9f8209aec.png)\r\n\r\n![Only Deprecated](https://user-images.githubusercontent.com/17834924/227634271-01930545-7689-4b72-9744-7f2c51d4708e.png)\r\n\r\n![Only Vulnerable](https://user-images.githubusercontent.com/17834924/227634288-1fe3a617-b789-45cb-a361-57e915233031.png)\r\n\r\n![Vulnerability title](https://user-images.githubusercontent.com/17834924/229469044-439ce242-ebb9-4434-95bc-6bf528e6c1a6.png)\r\n\r\n![Deprecation title](https://user-images.githubusercontent.com/17834924/229469016-d18bd3a7-f01d-47b8-b0e1-de671c58c558.png)\r\n\r\n### Addresses\r\n* https://github.com/NuGet/Engineering/issues/4734"},{"Id":"28656000106","Type":"IssuesEvent","CreatedAt":"2023-04-25T18:14:45","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9337","RelatedDescription":"Closed issue \"Gallery computed target frameworks missing for target platform versions\" (#9337) at NuGet/NuGetGallery","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI've recently uploaded the package [RoslynPad.Roslyn.Windows](https://www.nuget.org/packages/RoslynPad.Roslyn.Windows) which targets `net6.0-windows7.0` (not sure why `dotnet pack` added the `7.0`).\r\n\r\nHowever, the gallery website is missing the computed target `net7.0-windows`. It seems to be compatible with it as I've managed to restore it in a `net7.0-windows` project.\r\n\r\nIs that a bug? [Prism.Wpf](https://www.nuget.org/packages/Prism.Wpf) targets `net5.0-windows7.0` and it does show both `net6.0-windows` and `net7.0-windows` as computed targets.\n\n### Verbose Logs\n\n_No response_"},{"Id":"28654144802","Type":"PullRequestEvent","CreatedAt":"2023-04-25T16:50:24","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9484","RelatedDescription":"Opened pull request \"Users/lilixie/form label\" (#9484) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Add labels to profiles->Organizations->Members\r\n* Add css for related changes\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9482"},{"Id":"28652660521","Type":"PullRequestEvent","CreatedAt":"2023-04-25T15:49:26","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9483","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.04.25]RI of dev into main\" (#9483) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"28662501885","Type":"IssuesEvent","CreatedAt":"2023-04-26T00:48:48","Actor":"jerhon","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12562","RelatedDescription":"Opened issue \"nuget restore fails for solution filters not in same directory as the solution it references.\" (#12562) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nnuget 6.5\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThe new solution filters feature added in 6.5 with nuget restore does not use the correct pathing if the solution filter is kept in a different directory than the solution file.\r\n\r\nIf I place a solution filter in a directory outside of where the solution file is kept, it will not restore properly.\r\nIt evaluates the paths for the projects in the solution filter relative to where the solution filter is rather than relative to where the solution file is.\r\n\r\nIf I use the same solution filter and run it with \"dotnet restore\" instead, it restores file.\r\n\r\nI have created a minimal reproducible example in a git repository here: https://github.com/jerhon/nuget-slnf-bug\r\n\r\nIt has two GitHub actions to show this, one with `dotnet restore` restoring the nuget packages and one with `nuget restore` restoring the nuget packages.  Both restore against the same solution filter.  The dotnet restore command restores the nuget packages.  The nuget restore command succeeds but doesn't restore the nuget packages so the build step fails.\n\n### Verbose Logs\n\n_No response_"},{"Id":"28661845703","Type":"IssuesEvent","CreatedAt":"2023-04-25T23:52:00","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12561","RelatedDescription":"Opened issue \"Calls to get installed/transitive packages asynchronously are restarted unnecessarily\" (#12561) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.7 Preview 1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nWhen changing tabs, some asynchronous work inevitably needs to be cancelled. However, I believe cancelling loading of installed packages (including transitives) and restarting the lookup is not appropriate for tab switches. Particularly since the result is supposed to be stored in a cache, I think resources are being wasted by always restarting the lookup.\r\n\r\nMy proposal is that `refreshCts.Token` is the wrong cancellation token to be using in this call to `loader.GetInstalledAndTransitivePackagesAsync`.\r\nhttps://github.com/NuGet/NuGet.Client/blob/31133579f24f6440a4333f91648acfe329c7942f/src/NuGet.Clients/NuGet.PackageManagement.UI/Xamls/PackageManagerControl.xaml.cs#L973\r\n\r\n![image](https://user-images.githubusercontent.com/49205731/234432010-04a074f9-b5af-44d8-b7d4-e534cc846634.png)\r\n\r\n<details>\r\n<summary>stack trace</summary>\r\n\r\n \t[External Code]\t\r\n \t[Waiting on Async Operation, double-click or press enter to view Async Call Stacks]\t\r\n \tNuGet.Protocol.dll!NuGet.Protocol.HttpSource.GetAsync.AnonymousMethod__0(System.Threading.CancellationToken lockedToken) Line 159\tC#\r\n \t[Async Call Stack]\t\r\n \t[Async] NuGet.Common.dll!NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync<NuGet.Protocol.Model.RegistrationIndex>(string filePath, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<NuGet.Protocol.Model.RegistrationIndex>> action, System.Threading.CancellationToken token) Line 102\tC#\r\n \t[Async] NuGet.Protocol.dll!NuGet.Protocol.HttpSource.GetAsync<NuGet.Protocol.Model.RegistrationIndex>(NuGet.Protocol.HttpSourceCachedRequest request, System.Func<NuGet.Protocol.HttpSourceResult, System.Threading.Tasks.Task<NuGet.Protocol.Model.RegistrationIndex>> processAsync, NuGet.Common.ILogger log, System.Threading.CancellationToken token) Line 79\tC#\r\n \t[Async] NuGet.Protocol.dll!NuGet.Protocol.PackageMetadataResourceV3.LoadRegistrationIndexAsync(NuGet.Protocol.HttpSource httpSource, System.Uri registrationUri, string packageId, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, System.Func<NuGet.Protocol.HttpSourceResult, System.Threading.Tasks.Task<NuGet.Protocol.Model.RegistrationIndex>> processAsync, NuGet.Common.ILogger log, System.Threading.CancellationToken token) Line 192\tC#\r\n \t[Async] NuGet.Protocol.dll!NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(string packageId, bool includePrerelease, bool includeUnlisted, NuGet.Versioning.VersionRange range, NuGet.Protocol.Core.Types.SourceCacheContext sourceCacheContext, NuGet.Common.ILogger log, System.Threading.CancellationToken token) Line 90\tC#\r\n \t[Async] NuGet.Protocol.dll!NuGet.Protocol.PackageMetadataResourceV3.GetMetadataAsync(string packageId, bool includePrerelease, bool includeUnlisted, NuGet.Protocol.Core.Types.SourceCacheContext sourceCacheContext, NuGet.Common.ILogger log, System.Threading.CancellationToken token) Line 54\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.SourceRepositoryExtensions.GetPackageMetadataListAsync(NuGet.Protocol.Core.Types.SourceRepository sourceRepository, string packageId, bool includePrerelease, bool includeUnlisted, System.Threading.CancellationToken cancellationToken) Line 218\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.MultiSourcePackageMetadataProvider.GetMetadataTaskSafeAsync<System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.IPackageSearchMetadata>>(System.Func<System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.IPackageSearchMetadata>>> getMetadataTask) Line 278\tC#\r\n \t[External Code]\t\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.MultiSourcePackageMetadataProvider.GetPackageMetadataListAsync(string packageId, bool includePrerelease, bool includeUnlisted, System.Threading.CancellationToken cancellationToken) Line 118\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.TaskCombinators.ThrottledAsync.AnonymousMethod__0() Line 33\tC#\r\n \t[External Code]\t\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.TaskCombinators.ThrottledAsync<NuGet.Packaging.Core.PackageIdentity, System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.IPackageSearchMetadata>>(System.Collections.Generic.IEnumerable<NuGet.Packaging.Core.PackageIdentity> sources, System.Func<NuGet.Packaging.Core.PackageIdentity, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NuGet.Protocol.Core.Types.IPackageSearchMetadata>>> valueSelector, System.Threading.CancellationToken cancellationToken) Line 42\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.UpdatePackageFeed.GetPackagesWithUpdatesAsync(string searchText, NuGet.Protocol.Core.Types.SearchFilter searchFilter, System.Threading.CancellationToken cancellationToken) Line 76\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.UpdatePackageFeed.ContinueSearchAsync(NuGet.PackageManagement.VisualStudio.ContinuationToken continuationToken, System.Threading.CancellationToken cancellationToken) Line 49\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.SearchObject.SearchAsync(string searchText, NuGet.Protocol.Core.Types.SearchFilter filter, bool useRecommender, System.Threading.CancellationToken cancellationToken) Line 60\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.SearchObject.GetAllPackagesAsync(NuGet.Protocol.Core.Types.SearchFilter searchFilter, System.Threading.CancellationToken cancellationToken) Line 149\tC#\r\n \t[Async] NuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.NuGetPackageSearchService.GetAllPackagesAsync(System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.IProjectContextInfo> projectContextInfos, System.Collections.Generic.IReadOnlyCollection<NuGet.VisualStudio.Internal.Contracts.PackageSourceContextInfo> packageSources, System.Collections.Generic.IReadOnlyCollection<string> targetFrameworks, NuGet.Protocol.Core.Types.SearchFilter searchFilter, NuGet.VisualStudio.Internal.Contracts.ItemFilter itemFilter, bool isSolution, System.Threading.CancellationToken cancellationToken) Line 102\tC#\r\n \t[External Code]\t\r\n \t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageItemLoader.GetInstalledAndTransitivePackagesAsync(System.Threading.CancellationToken cancellationToken) Line 179\tC#\r\n\t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageManagerControl.RefreshInstalledAndUpdatesTabsAsync() Line 973\tC#\r\n \t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageManagerControl.RefreshAsync() Line 1318\tC#\r\n \t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageManagerControl.ExecuteAction.AnonymousMethod__1() Line 1623\tC#\r\n \t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageManagerControl.RunAndEmitRefreshAsync(System.Func<System.Threading.Tasks.Task> runner, NuGet.PackageManagement.Telemetry.RefreshOperationSource source, System.TimeSpan lastRefresh, System.Diagnostics.Stopwatch sw, bool isUIFiltering) Line 1348\tC#\r\n \t[Async] NuGet.PackageManagement.UI.dll!NuGet.PackageManagement.UI.PackageManagerControl.ExecuteAction.AnonymousMethod__0() Line 1623\tC#\r\n \t[Async] [Awaited by multiple tasks/threads]\t\r\n</details>\n\n### Verbose Logs\n\n_No response_"},{"Id":"28644421027","Type":"IssuesEvent","CreatedAt":"2023-04-25T10:46:23","Actor":"dhyaman","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12560","RelatedDescription":"Opened issue \"License Type\" (#12560) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nWhy does NuGet only display the license URL in package details, unlike other package managers? Wouldn't it be easier to find out the license of a package through APIs or similar means?\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28641346510","Type":"IssuesEvent","CreatedAt":"2023-04-25T08:44:37","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12559","RelatedDescription":"Opened issue \"[Cross-platform Dotnet NuGet Sign] A redundant warning NU3018 shows after signing an already signed package with another trusted certificate on Linux\" (#12559) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK Version: 7.0.203\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Note:** It is an extended scenario instead of original test case\r\n\r\n#### Repro Steps:\r\n1. [Patched dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7b8a3c6685-1661-47f4-8807-b765ca62aea1%7d&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703).\r\n2. On Windows: Create a new test **certificate1**:  `.\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority -Password password -GenerateCerFile` (in the powershell \"Developer Command Prompt\"). \r\n    On Linux: Copy the .cer file (should be generated under the same path with .pfx file) and the .pfx file from the above Windows machine to Linux machine.\r\n3. On Windows: Create another test **certificate2**:  `.\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority -Password password -GenerateCerFile` (in the powershell \"Developer Command Prompt\"). \r\n    On Linux: Copy the .cer file (should be generated under the same path with .pfx file) and the .pfx file from the above Windows machine to Linux machine.\r\n4. Where <CertificateFilePath> is the file path to the created two certificates (in step2 & step3) .cer or .pem file and <VersionedSdkDirectoryPath> is the directory path for the patched versioned .NET SDK directory (e.g.:  ./patchedSDK/sdk/7.0.100), add trust for **the two certificates:** \r\n    On Linux:  `./dotnet run --project ./Entropy/TrustTestCert/TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFile1Path> -vsd <VersionedSdkDirectoryPath> `\r\n    On Linux: ` ./dotnet run --project ./Entropy/TrustTestCert/TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFile2Path> -vsd <VersionedSdkDirectoryPath> `\r\n5. Use the patched \"dotnet.exe\" to sign a package for the first time. Where <PackageFilePath> is the test package path and <PfxFilePath> is the file path to the .pfx file of the **first** trusted certificate, sign the test package: \r\n    On Linux: ` ./patchedSDK ./dotnet nuget sign <PackageFilePath> --certificate-path <PfxFilePath> --certificate-password password --timestamper http://timestamp.digicert.com/ -v n `\r\n6. Verify that the package is signed successfully in the output, with no warnings and no errors.\r\n   Package(s) signed successfully. \r\n7. Use the patched \"dotnet.exe\" to sign the package for the second time. Where <PackageFilePath> is the test package path and <PfxFilePath> is the file path to the .pfx file of the **second** trustedccertificate, sign the test package: \r\n    On Linux:  `./patchedSDK./dotnet nuget sign <PackageFilePath> --certificate-path <PfxFilePath> --certificate-password password --timestamper http://timestamp.digicert.com/ -v n `\r\n\r\n#### Expected:\r\nVerify that the second signing failed for 1 error in the output: \r\nError: NU3001: The package already contains a signature. Please remove the existing signature before adding a new signature. \r\n\r\n#### Actual:\r\nA redundant warning NU3018 shows as below screenshot. The warning doesn't make sense because the second certificate has been trusted.\r\n![image](https://user-images.githubusercontent.com/20632625/234220912-3395caff-c073-4c32-a082-4e4390da1579.png)\r\n\r\n#### Notes:\r\n1.It only reproes on Linux platform, doesn’t repro on Mac & Windows.\r\n2.It is not a regression since the scenario is extended case instead of original case.\r\n3.It doesn’t repro in the original test case: [Dotnet nuget sign command:  sign an already signed package without overwriting](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FDotnet%20nuget%20sign%20command%20%20sign%20an%20already%20signed%20package%20%7Cee4f9421-a04f-4e96-a23b-49039e069cd3%2F%29&wdorigin=703) (sign two times with the same trusted certificate)\n\n### Verbose Logs\n\n_No response_"},{"Id":"28640537540","Type":"IssuesEvent","CreatedAt":"2023-04-25T08:11:57","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11797","RelatedDescription":"Closed issue \"Package Source Mapping UI - PM UI Actions support source pinning & create mappings in nuget.config\" (#11797) at NuGet/Home","RelatedBody":"Refer to https://github.com/NuGet/Home/issues/11361 and https://github.com/NuGet/Home/blob/dev/implemented/2021/PackageSourceMapping.md"},{"Id":"28633587027","Type":"IssuesEvent","CreatedAt":"2023-04-24T23:45:56","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12557","RelatedDescription":"Opened issue \"Create Spec for normalizing validation of `nuget.config` between CLI & VS\" (#12557) at NuGet/Home","RelatedBody":"Create a spec to make progress on https://github.com/NuGet/Home/issues/12245\r\n\r\nExamples of topics to address:\r\n- Malformed config causes odd behavior when opening VS Options\r\n- Inconsistencies between hand-editing and using VS Options to modify settings.\r\n  - VS Options enforces distinct Package Source names (case insensitive)\r\n  - Hand-editing a nuget.config with both \"nuget.org\" and \"NuGet.ORg\" is accepted by VS (no errors). \r\n \r\nIdeally, we'd have consistent behavior across the board, but the Spec needs to call out any breaking change potential.\r\n"},{"Id":"28628637777","Type":"IssuesEvent","CreatedAt":"2023-04-24T18:54:42","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12556","RelatedDescription":"Opened issue \"Refactor UIActionEngineTests that use packagesFolder to avoid looking at the drive root\" (#12556) at NuGet/Home","RelatedBody":"> @\"\\packagesFolder\" seems like a bad idea. A single leading '' usually means \"from the root of the drive\" on Windows. A temporary directory or a local directory (@\".\\packgesFolder\") seems better.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/pull/5109/files#r1175482193"},{"Id":"28627328761","Type":"IssuesEvent","CreatedAt":"2023-04-24T17:53:53","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12555","RelatedDescription":"Opened issue \"Compliance Assessments for Global Readiness\" (#12555) at NuGet/Home","RelatedBody":""},{"Id":"28624182778","Type":"IssuesEvent","CreatedAt":"2023-04-24T15:39:37","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12553","RelatedDescription":"Opened issue \"PackCommand_MultiTfm_PrereleaseDependency_ProjectLevelWarningSuppressed_Succeed test is flaky\" (#12553) at NuGet/Home","RelatedBody":"Since my change to run tests against .NET 8, the test `PackCommand_MultiTfm_PrereleaseDependency_ProjectLevelWarningSuppressed_Succeed` is failing occasionally.  I'm going to update the test to give more information because for now it just says:\r\n\r\n```\r\nExpected result.Success to be true, but found False.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/17556515/234046647-df2bbb9a-68dc-485b-beef-cc9cc03eda0a.png)\r\n"},{"Id":"28618494745","Type":"IssuesEvent","CreatedAt":"2023-04-24T12:23:57","Actor":"sbazant","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12552","RelatedDescription":"Opened issue \"[CPVM] dotnet add package with --no-restore causes NU1008\" (#12552) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n7.0.203\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Create empty project with `dotnet new console`\r\n2. Add Directory.Packages.props file with\r\n``` xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n3. Add package with --no-restore option i.e. `dotnet add package Newtonsoft.Json --no-restore`\r\n4. Run restore `dotnet restore`\n\n### Verbose Logs\n\n```shell\nC:\\repos\\test>dotnet add package --no-restore Newtonsoft.Json\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET.\r\ninfo : X.509 certificate chain validation will use the default trust store selected by .NET.\r\ninfo : Adding PackageReference for package 'Newtonsoft.Json' into project 'C:\\repos\\test\\test.csproj'.\r\nwarn : --no-restore|-n flag was used. No compatibility check will be done and the added package reference will be unconditional.\r\ninfo : PackageReference for package 'Newtonsoft.Json' version '*' added to file 'C:\\repos\\test\\test.csproj'.\r\n\r\nC:\\repos\\test>dotnet restore\r\n  Determining projects to restore...\r\nC:\\repos\\test\\test.csproj : error NU1008: Projects that use central package version management should not define the version on the PackageReference items but on the PackageVersion items: Newtonsof\r\nt.Json.\r\n  Failed to restore C:\\repos\\test\\test.csproj (in 129 ms).\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27423335680","Type":"IssuesEvent","CreatedAt":"2023-03-01T18:16:58","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Opened issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27174265829","Type":"IssuesEvent","CreatedAt":"2023-02-17T22:51:59","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/60","RelatedDescription":"Closed issue \"NuGet.org migration towards a new multi-CDN infrastructure\" (#60) at NuGet/Announcements","RelatedBody":"In the coming weeks, nuget.org will be migrating towards a new multi-CDN infrastructure that will improve the experience of our users. This change allows our team flexibility to switch to a back-up provider in the case that one CDN is down, which will broaden coverage for our users.\r\n\r\nSome changes are coming for older TLS cipher suites, which may result in connectivity issues. From our data we believe this will affect only a small percentage of requests. We will be monitoring all feedback channels during the migration to assess impact and adjust our roll-out timeline as needed.\r\n\r\nBelow, we provide resources to determine whether you will be affected by this change. This utilizes the [.NET CLI](https://dotnet.microsoft.com/) to install a package from our pre-production (INT) environment which tests connectivity:\r\n\r\n\r\n```\r\nmkdir cdn-test\r\ncd cdn-test\r\ndotnet new classlib\r\ndotnet add package BaseTestPackage.NetStandard --source https://apiint.nugettest.org/v3/index.json\r\n```\r\n\r\nIf you are experiencing connectivity issues while connecting to nuget.org or restoring packages from https://api.nuget.org/v3/index.json, such as:\r\n\r\n\"The SSL connection could not be established\"\r\n\r\nPlease ensure that TLS 1.2 and any of the following cipher suites have been enabled on your machine:\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\r\n\r\nIf you have any questions, do reach out to us at support@nuget.org or by commenting on the discussion issue: NuGet/Home#11058"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1631370937248481281","CreatedAt":"2023-03-02T19:08:35+00:00","UserScreenname":"nuget","Text":"Your package's README is your chance to showcase your hard work and make a great first impression. Here are some ti… https://t.co/SU8480LbkL","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1630609651275382793","CreatedAt":"2023-02-28T16:43:30+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.5 📦\n\n🧰 Visual Studio Support for Central Package Management\n🔁 Use server-provided Retry-After… https://t.co/FsMPajDT1u","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":26,"FavoriteCount":8,"RawContent":null},{"Id":"1625612488216649729","CreatedAt":"2023-02-14T21:46:34+00:00","UserScreenname":"nuget","Text":"📦 Search by Target Framework on https://t.co/F9kiKfvqkS 📦\n\n🔭 Improved package compatibility discovery\n📊 New sorts a… https://t.co/Xojm66sLar","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":35,"FavoriteCount":22,"RawContent":null},{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":128,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":46,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2023-04-26T03:30:23.1244131Z","RunDurationInMilliseconds":1523}