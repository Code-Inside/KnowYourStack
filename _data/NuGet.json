{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34670272964","Type":"PullRequestEvent","CreatedAt":"2024-01-09T05:51:07","Actor":"v-ayushchat","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9774","RelatedDescription":"Opened pull request \"[ReleasePrep][2024.01.09]RI of dev into main\" (#9774) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"34662904842","Type":"PullRequestEvent","CreatedAt":"2024-01-08T21:44:16","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9764","RelatedDescription":"Merged pull request \"Show TFM badges in package search results\" (#9764) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9629\r\n\r\nThis adds TFM badges to package search results:\r\n- We can choose to show either just asset frameworks, or both asset and computed frameworks. This will be based on whether the user selects the 'Include Computed Frameworks' checkbox in the new search filters (will be added with a later change). \r\n- We will show the lowest (asset/computed) version TFM from each of the 4 Framework generations (`.NET`, `.NET Core`, `.NET Standard`, `.NET Framework`).\r\n- The badges will link to the package's frameworks tab.\r\n- The TFM badges will be behind a feature flight.\r\n\r\nWe are reusing code previously written to display TFM badges on the package details page, but this needed some refactoring (See `src/NuGetGallery.Core/Frameworks/PackageFrameworkCompatibilityFactory.cs`) that touched a lot of different files.\r\n\r\nThe changes were primarily made in these files:\r\n\r\n- `src/NuGetGallery.Core/*`\r\n- `src/NuGetGallery/Controllers/PackagesController.cs`\r\n- `src/NuGetGallery/Helpers/ViewModelExtensions/ListPackageItemViewModelFactory.cs`\r\n- `src/NuGetGallery/Infrastructure/Lucene/ExternalSearchService.cs`\r\n- `src/NuGetGallery/ViewModels/ListPackageItemViewModel.cs`\r\n- `src/NuGetGallery/Views/Packages/_SupportedFrameworksBadges.cshtml`\r\n- `src/NuGetGallery/Views/Shared/_ListPackage.cshtml`\r\n- `tests/NuGetGallery.Core.Facts/Frameworks/PackageFrameworkCompatibilityFactoryFacts.cs`\r\n\r\nThe remaining files were changed either as a result of refactoring, or to add the feature flight for this change.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/1e9a3102-07f9-4a86-adf1-1cc86a62dcfe)\r\n\r\nAfter this change,\r\n\r\nSearch page (only asset frameworks):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3d67338c-88cd-48da-8a7e-6b1e8c96fdb2)\r\n\r\nSearch page (including computed frameworks):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3b182be0-e3b3-4b07-b7d2-ad0662a52283)\r\n\r\nWith deprecation/vulnerability indicators:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/b31d84cd-1991-458e-9451-954372939fa0)\r\n\r\nProfiles page:\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/3aa1c319-c5f3-48cd-9e2a-d4ec44d42e69)\r\n\r\nPackage Details page and the Frameworks tab (**Unchanged**):\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/cd40560e-aafe-4903-bccf-0ea5f6ba9d35)\r\n"},{"Id":"34658621877","Type":"PullRequestEvent","CreatedAt":"2024-01-08T18:29:59","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9767","RelatedDescription":"Merged pull request \"Abstract typosquatting\" (#9767) at NuGet/NuGetGallery","RelatedBody":"Tracking issue: https://github.com/NuGet/Engineering/issues/4815\r\nSee at tracking issue for related PRs.\r\n"},{"Id":"34627104387","Type":"IssuesEvent","CreatedAt":"2024-01-07T08:50:19","Actor":"WithLithum","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9773","RelatedDescription":"Opened issue \"[Feature]: Allow images from Codeberg.org\" (#9773) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nAllow `readme.md` to reference images from `Codeberg.org`, specifically, `https://codeberg.org/*/*/raw/*/*/**.*` where `*` means a single directory while `**` means any directory or multiple directories. For example, the link to the one of the official logos of Codeberg in the official icon repository is `https://codeberg.org/Codeberg/Design/raw/branch/main/logo/icon/png/codeberg-logo_icon_blue-64x64.png`.\n\n### Additional Context and Details\n\n`Codeberg.org` is a FOSS-only code hosting platformed based on Forgejo, which is a soft fork of Gitea."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34692065053","Type":"IssuesEvent","CreatedAt":"2024-01-09T19:18:16","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13140","RelatedDescription":"Closed issue \"Cancelling static graph-based restore does not end the restore process\" (#13140) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nStatic graph-based restore launches an external process and waits for it to return:\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/StaticGraphRestoreTaskBase.cs#L184\n\nHowever, the code passes a cancellation token which is fired when the user cancels a build via CTRL+C.  The `catch` code is there to return `true` so that cancelled builds don't \"fail\" but it does not kill the process.\n\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/StaticGraphRestoreTaskBase.cs#L211-L217\n\nThe `try...catch` which handles cancellation should be moved to surround just the `Semaphore.Wait()` since that's the only call that would throw an `OperationCanceledException`.  The proceeding code would then kill the process and return `true` in the case where the user canceled the build.\n\n### Verbose Logs\n\n_No response_"},{"Id":"34692053017","Type":"IssuesEvent","CreatedAt":"2024-01-09T19:17:46","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11834","RelatedDescription":"Closed issue \"[DCR]: Central Package Management - Respect .props file as a way to opt-in to the feature.\" (#11834) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nOther/NA\r\n\r\n### Current Behavior\r\n\r\nTo opt-in to central package management, one must explicitly enable a MSBuild property today. This brings quite a bit of confusion to users given the original spec mentions that if a file exists, all projects will be opted-in to the feature.\r\n\r\nhttps://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions#opt-in-central-package-version-management\r\n\r\n### Desired Behavior\r\n\r\nIf a .props file exists or is imported appropriately, projects should be automatically opted-in to central package management unless there is an explicit MSBuild property disabling the use of the feature.\r\n\r\n### Additional Context\r\n\r\nThis is currently a papercut that brings confusion to everyday users. We have documented this for now, but would like to make this more intuitive in the future.\r\n\r\n### Breaking Change\r\nThis would be considered a breaking change in the scenario where a user has a `Directory.Packages.props` for some reason and is not setting the `ManagePackageVersionsCentrally` property.  CPM would now be on and they would need to set `ManagePackageVersionsCentrally` to `false` explicitly if they don't want to use CPM.\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>\r\n</PropertyGroup>\r\n```"},{"Id":"34691408016","Type":"IssuesEvent","CreatedAt":"2024-01-09T18:52:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12978","RelatedDescription":"Closed issue \"Add `--format`, `--verbosity` , `configfile` options to `dotnet package search`\" (#12978) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\ndotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nTracking issue for adding a `--format`, `--verbosity` , `configfile` option to `dotnet package search`\r\n\r\n### Additional Context and Details\r\n\r\nMain feature: https://github.com/NuGet/Home/issues/6060"},{"Id":"34691404494","Type":"IssuesEvent","CreatedAt":"2024-01-09T18:51:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5138","RelatedDescription":"Closed issue \"exact match and version search for nuget.exe list command\" (#5138) at NuGet/Home","RelatedBody":"(See https://nuget.codeplex.com/workitem/2130 for a related discussion)\r\n\r\nI'd like to be able to find a specific package (exact match on package ID) using the nuget.exe command line client. I'd also like to be able to find a specific version of the package (to check if that version exists in the feed).\r\n\r\nSomething like:\r\n\r\n    # list the most recent version of MyPackage, matching by exact package ID\r\n    nuget.exe list MyPackage -ExactMatch\r\n\r\n    # list all versions of MyPackage, matching by exact package ID\r\n    nuget.exe list MyPackage -ExactMatch -AllVersions\r\n\r\n    # list the provided version of MyPackage, matching by exact package ID\r\n    nuget.exe list MyPackage -ExactMatch -Version 1.2.3.4\r\n\r\nSo in short, the -ExactMatch option would cause the search term to be an exact match on the package ID. The -Version option (which probably only makes sense with -ExactMatch) would cause only the specified version to be listed (if it exists).\r\n\r\nI would use this in scripts (outside of Visual Studio) instead of having to rely on hacks (e.g. trying to install a specific version of the package and checking if it succeeds or not)."},{"Id":"34691090414","Type":"PullRequestEvent","CreatedAt":"2024-01-09T18:38:45","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13133","RelatedDescription":"Merged pull request \"Add `problems` value to `dotnet package search` JSON output\" (#13133) at NuGet/Home","RelatedBody":"Add `problems` section to the JSON output. This section will be used to store and report errors."},{"Id":"34690344143","Type":"IssuesEvent","CreatedAt":"2024-01-09T18:09:03","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6060","RelatedDescription":"Closed issue \"Support for dotnet search command (equivalent to nuget.exe list, later search)\" (#6060) at NuGet/Home","RelatedBody":"_From @Kemyke on October 19, 2017 13:29_\n\n## Steps to reproduce\r\nThere is no substituting functionality for 'nuget.exe list' feature. That would be great if it would be possible to use the dotnet CLI for automation on every platform. Currently the mono should be installed on Ubutnu to run nuget.exe. Is there a plan to add all the missing functionality to the dotnet CLI?\r\n\r\n## Expected  behavior\r\ndotnet nuget list <Filter expression>\r\n\r\n## Actual behavior\r\nThere is no funcionality in the dotnet CLI to list the available packages.\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7869_"},{"Id":"34689545396","Type":"IssuesEvent","CreatedAt":"2024-01-09T17:38:42","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13143","RelatedDescription":"Opened issue \"Theme: Trustworthy and Secure (.NET 9 / 20224)\" (#13143) at NuGet/Home","RelatedBody":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code, but what open-source code you are using, and how much.\r\n\r\nOne of our ongoing themes of .NET is to secure the software supply chain. To achieve a secure supply chain with NuGet, we are focusing on three major areas such as knowing, preventing, and fixing known security vulnerabilities, support SBOMs, and making tooling more secure by default. \r\n\r\nIn .NET 9 we have a few areas that will help us make progress on that goal.\r\n\r\n## Know, Prevent, and Fix Known Security Vulnerabilities 🔒\r\nTo combat known vulnerabilities and active supply chain attacks, developers need to know that the package written by unknown individuals they are downloading from the internet can be secure and trusted enough to run on their trusted devices where they keep their most important data.\r\n\r\n- [ ] https://github.com/NuGet/Home/issues/8087\r\n- [ ] https://github.com/NuGet/Home/issues/10865\r\n- [ ] https://github.com/NuGet/NuGetGallery/issues/7297\r\n- [ ] https://github.com/NuGet/NuGetGallery/issues/8592\r\n- [ ] https://github.com/NuGet/NuGetGallery/issues/9728\r\n\r\n## Support SBOMs for NuGet packages 📋\r\n\r\n- [ ] https://github.com/NuGet/Home/issues/12497\r\n\r\n## Secure by Default ✅\r\n\r\n- [ ] https://github.com/NuGet/Home/issues/12504\r\n- [ ] https://github.com/NuGet/Home/issues/4387\r\n- [ ] https://github.com/NuGet/Home/issues/12070\r\n\r\n> **IMPORTANT**\r\n> This theme is not a commitment; it will evolve as we continue to learn throughout the release. Some things that are not currently planned for NuGet may get pulled in. Some things currently planned may even be pushed out.\r\n\r\nPlease 👍 or 👎 this issue to help us with the direction of this theme & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly."},{"Id":"34681385982","Type":"IssuesEvent","CreatedAt":"2024-01-09T13:06:04","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13142","RelatedDescription":"Opened issue \"[Feature] Provide the ability to pack a compliant SBOM\" (#13142) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nToday tools exist that allow you to generate a compliant sbom based on drop path which are used for all sorts of scenarios. For the efforts outlined in #12497 we will need to support the ability to pack a SPDX compliant SBOM and additionally think of other formats as well such as CycloneDX.\r\n\r\nBasically, the premise would be that you can pack any SBOM file in a common format such as `json/xml` and have respective NuGet APIs to retrieve these files for use by other tools.\r\n\r\n- https://github.com/microsoft/sbom-tool/tree/main/samples\r\n- https://github.com/CycloneDX/bom-examples/tree/master/SBOM\n\n### Additional Context and Details\n\n_No response_"},{"Id":"34680718089","Type":"IssuesEvent","CreatedAt":"2024-01-09T12:38:20","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13141","RelatedDescription":"Opened issue \"[Feature] Warn for package operations that install/update a package with known vulnerability/deprecation metadata\" (#13141) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI, dotnet.exe\n\n### The Elevator Pitch\n\nAs part of the \"Prevent\" side of the Know, Prevent, Fix framework. Our next task is to ensure that package operations are blocked or warned whenever a user does a potential package operation such as installing or updating to a susceptible package version that includes known vulnerability/deprecation metadata.\r\n\r\nThis experience can re-use existing confirmation dialogs in Visual Studio and on the command line, provide a y/n confirmation prompt in CLI experiences for the user to continue.\r\n\r\nA dialog may say something similar to:\r\n\r\n```\r\nYou are attempting to install a package that has been flagged as deprecated or contains known security vulnerabilities. Installing this package may pose a risk to your project's security and stability.\r\n\r\nPackage Name: [Package_Name]\r\nVersion: [Version_Number]\r\nVulnerability/Deprecation Details: [Brief description of the vulnerability or reason for deprecation, if available]\r\n\r\nIt is recommended to either update to a newer, secure version of this package or choose an alternative package. \r\n\r\nDo you want to continue with the installation/update?\r\n```\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"34669334125","Type":"IssuesEvent","CreatedAt":"2024-01-09T04:50:31","Actor":"Nefcanto","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13118","RelatedDescription":"Closed issue \"NuGet not respecting local cache\" (#13118) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nNuGet does not honor the locale cache. We have restored a project with many packages in a docker image to cache images so that we can run an app without an internet connection, but we get this error:\r\n\r\n```\r\nApiContainer | MSBuild version 17.8.3+195e7f5a3 for .NET\r\nApiContainer |   Determining projects to restore...\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable (api.nuget.org:443) [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable [/Project/AdminApi/Api.csproj]\r\nApiContainer | \r\nApiContainer | Build FAILED.\r\nApiContainer | \r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable (api.nuget.org:443) [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable [/Project/AdminApi/Api.csproj]\r\n\r\n```\n\n### Desired Behavior\n\nWhen packages are cached once, NuGet should use them if the internet connection is not available. Preferably it should use them and not connect to the internet at all, even if it's available. Because packages are already there on the disk.\n\n### Additional Context\n\nThis is our `Dockerfile`:\r\n\r\n```\r\n# https://mcr.microsoft.com/v2/vscode/devcontainers/dotnet/tags/list\r\n# https://mcr.microsoft.com/v2/devcontainers/dotnet/tags/list\r\n# https://github.com/devcontainers/images/blob/main/src/dotnet/.devcontainer/Dockerfile\r\n# https://hub.docker.com/_/microsoft-dotnet-sdk\r\nARG VARIANT=\"8.0-bookworm-slim\"\r\nFROM mcr.microsoft.com/vscode/devcontainers/dotnet:${VARIANT}\r\n\r\nENV PATH=\"${PATH}:/HolismHolding/Commands/ApiContainer:/HolismHolding/Commands\"\r\n\r\nENV Nuget=/root/.local/share/NuGet/http-cache/\r\n\r\nCOPY . /HolismApi/Infra\r\n\r\nRUN mkdir /Temp \\\r\n    && cd /Temp \\\r\n    && dotnet new console \\\r\n    && echo '<Project Sdk=\"Microsoft.NET.Sdk.Web\"><Import Project=\"/HolismApi/Infra/DotNet.targets\" /></Project>' > /Temp/Temp.csproj \\\r\n    && echo 'System.Console.WriteLine(\"hello\");' > /Temp/Program.cs \\\r\n    && dotnet restore \\\r\n    && dotnet build \\\r\n    && cd / \\\r\n    && rm -rf /Temp\r\n\r\nRUN apt update -qq \\\r\n    && mkdir -p /Temp/ImageResizingAndCompression \\\r\n    && chmod 777 --preserve-root /Temp/ImageResizingAndCompression \\\r\n    && mkdir -p /Temp/VideoConversion \\\r\n    && chmod 777 --preserve-root /Temp/VideoConversion \\\r\n    && apt install bc -qq -y \\\r\n    && apt install procps -qq -y \\\r\n    && apt install file -qq -y \\\r\n    && apt install gettext-base -qq -y \\\r\n    && apt install apt-utils -qq -y \\\r\n    && apt install libgdiplus -qq -y \\\r\n    && apt install inotify-tools -qq -y \\\r\n    && apt install libc6-dev -qq -y \\\r\n    && apt install webp -qq -y \\\r\n    && apt install telnet -qq -y \\\r\n    && apt install dnsutils -qq -y \\\r\n    && apt install imagemagick -qq -y \\\r\n    && apt install ffmpeg -qq -y \\\r\n    && cd /usr/local/bin \\\r\n    && curl https://getmic.ro | bash\r\n```\r\n\r\nAs you can see we create a `Temp.csproj` that has a `Import`. This is what it imports:\r\n\r\n```\r\n<Project>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <OutputPath>.\\bin</OutputPath>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\r\n    <Nullable>disable</Nullable>\r\n    <ImplicitUsings>disable</ImplicitUsings>\r\n    <Deterministic>true</Deterministic>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"/HolismApi/Infra/Nuget.targets\" />\r\n\r\n  <ItemGroup>\r\n    <None Include=\"./Settings.json\" Condition=\"Exists('./Settings.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./SettingsOverride.json\" Condition=\"Exists('./SettingsOverride.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./LocalSecrets.json\" Condition=\"Exists('./LocalSecrets.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./ConnectionStrings.json\" Condition=\"Exists('./ConnectionStrings.json')\" >\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nAnd this is our `Nuget.targets`:\r\n\r\n```\r\n<Project>\r\n\r\n  <ItemGroup>\r\n\r\n    <PackageReference Include=\"AngleSharp\" Version=\"1.0.7\" />\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.19.1\" />\r\n    <PackageReference Include=\"Bogus\" Version=\"35.2.0\" />\r\n    <PackageReference Include=\"ClosedXML\" Version=\"0.102.1\" />\r\n    <PackageReference Include=\"Hashids.net\" Version=\"1.7.0\" />\r\n    <PackageReference Include=\"Humanizer.Core\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.ar\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.fa\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.ru\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Protocols.OpenIdConnect\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Tokens\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"morelinq\" Version=\"4.1.0\" />\r\n    <PackageReference Include=\"MySqlConnector\" Version=\"2.3.3\" />\r\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql.NetTopologySuite\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"SocketIOClient\" Version=\"3.1.1\" />\r\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"System.Linq.Dynamic.Core\" Version=\"1.3.7\" />\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"8.0.0\" />\r\n    <!-- <PackageReference Include=\"AngouriMath\" Version=\"1.3.0\" /> -->\r\n\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nAnd then we do `dotnet restore` and `dotnet build` to make sure that our dependencies are cached once and our project can be built.\r\n\r\nThen we use this image in an environment without internet access. When we upgraded to dotnet 8, it broke."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-10T03:30:20.4936167Z","RunDurationInMilliseconds":1143}