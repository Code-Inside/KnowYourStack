{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"36028942940","Type":"PullRequestEvent","CreatedAt":"2024-02-26T22:52:55","Actor":"sbanni","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9829","RelatedDescription":"Merged pull request \"Suppress devskim warnings\" (#9829) at NuGet/NuGetGallery","RelatedBody":"Suppress devskim warnings.\r\n\r\nRan the devskim tool locally:\r\n`devskim analyze -I .\\src -O devskim.sarif -f sarif -g *.json,*.cs,*.config,*.xml,*.txt,*.sql,*.csproj`\r\n\r\nThen run suppress command:\r\n`devskim suppress -I .\\src -O devskim.sarif --all`\r\n\r\nThis is a cherry pick from a change already in main."},{"Id":"36026043102","Type":"PullRequestEvent","CreatedAt":"2024-02-26T20:59:00","Actor":"sbanni","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9829","RelatedDescription":"Opened pull request \"Suppress devskim warnings\" (#9829) at NuGet/NuGetGallery","RelatedBody":"Suppress devskim warnings.\r\n\r\nRan the devskim tool locally:\r\n`devskim analyze -I .\\src -O devskim.sarif -f sarif -g *.json,*.cs,*.config,*.xml,*.txt,*.sql,*.csproj`\r\n\r\nThen run suppress command:\r\n`devskim suppress -I .\\src -O devskim.sarif --all`\r\n\r\nThis is a cherry pick from a change already in main."},{"Id":"36024328662","Type":"PullRequestEvent","CreatedAt":"2024-02-26T19:55:25","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9822","RelatedDescription":"Merged pull request \"[Package Details] Eagerly load supported frameworks and deprecations.\" (#9822) at NuGet/NuGetGallery","RelatedBody":"As the package details page loads the metadata of all package versions: https://github.com/NuGet/NuGetGallery/blob/e043791f59cc939c09df7802ae552dde5500039d/src/NuGetGallery/Helpers/ViewModelExtensions/DisplayPackageViewModelFactory.cs#L79-L87\r\nit is better [eagerly loading](https://learn.microsoft.com/en-us/ef/ef6/querying/related-data) supported frameworks and deprecations of all versions together, rather than loading each version one by one.\r\n\r\nAdd another API rather than change the shape of existing ones, to avoid breaking other dependencies on [`IPackageService`](https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery.Services/PackageManagement/IPackageService.cs)."},{"Id":"35999252833","Type":"IssuesEvent","CreatedAt":"2024-02-26T07:42:00","Actor":"iecarl","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9828","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Cannot show Azure storage container blob image in package readme\" (#9828) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nAzure portal should be considered as a safe image source for package readme. Currently, the domain of the Azure storage container is in form of <azure storage name>.blob.core.windows.net. \r\n\r\nPlease consider *.blob.core.windows.net as a safe image source in order to show the images in Azure in package readme.\n\n### Repro Steps\n\n1. Visit NuGet.org project site at https://www.nuget.org/packages/PortML.Documents/\r\n2. Scroll to Wharf section as below\r\n![image](https://github.com/NuGet/NuGetGallery/assets/49668320/f0e19d70-34b1-4005-88be-9a0b0d625955)\r\n3. The image in Wharf section cannot be show. The image location should be as below: \r\nhttps://o2desstorage.blob.core.windows.net/public/portml/portml_wharf.png\n\n### Expected Behavior\n\nThe images stored in  *.blob.core.windows.net can be shown in package readme.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35976275083","Type":"IssuesEvent","CreatedAt":"2024-02-24T22:06:39","Actor":"mwisnicki","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9827","RelatedDescription":"Opened issue \"[Feature]: Search by type\" (#9827) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI know a class name or namespace and need to find a package that contains it.\n\n### The Elevator Pitch\n\nIn Java land, [Maven Central](https://central.sonatype.com/) allows searching packages by class names and I think this would be very useful feature in NuGet Gallery.\r\n\r\nThis should be available on the web and via API.\r\n\r\nAPI could be used by IDEs to automatically fix missing imports like they do in Java.\n\n### Additional Context and Details\n\nAdditionally index could be offered for download (with incremental/differential updates) so it can be used offline.\r\nSimilar functionality in Maven: https://maven.apache.org/repository/central-index.html "},{"Id":"35964889630","Type":"PullRequestEvent","CreatedAt":"2024-02-24T02:59:39","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9826","RelatedDescription":"Opened pull request \"Fix Framework Filter Mode tooltip colors\" (#9826) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9818\r\n\r\nThe bootstrap popover on the Framework Filter Mode tooltip had different colors within it:\r\n<img src=\"https://github.com/NuGet/NuGetGallery/assets/82980589/a6ec1bb3-331e-4644-8323-da8e97d8d074\" width=\"600px\"></img>\r\n\r\nI've now fixed the color, and removed the extra strip at the bottom of the popover:\r\n<img src=\"https://github.com/NuGet/NuGetGallery/assets/82980589/57c3217c-324f-473f-8ba6-d35bfccee60b\" width=\"600px\"></img>"},{"Id":"35963552048","Type":"PullRequestEvent","CreatedAt":"2024-02-24T01:02:13","Actor":"sbanni","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9825","RelatedDescription":"Merged pull request \"Suppress devskim warnings\" (#9825) at NuGet/NuGetGallery","RelatedBody":"Suppress devskim warnings.\r\n\r\nRan the devskim tool locally:\r\n`devskim analyze -I .\\src -O devskim.sarif -f sarif -g *.json,*.cs,*.config,*.xml,*.txt,*.sql,*.csproj`\r\n\r\nThen run suppress command:\r\n`devskim suppress -I .\\src -O devskim.sarif --all`"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"36029057994","Type":"IssuesEvent","CreatedAt":"2024-02-26T22:58:29","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13266","RelatedDescription":"Opened issue \"[FEATURE] Support deprecation warnings at restore time\" (#13266) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nTL;DR - Support deprecated metadata similar to what we did with security vulnerability auditing in .NET 8 timeframe.\r\n\r\nhttps://github.com/NuGet/Home/blob/dev/accepted/2022/vulnerabilities-in-restore.md#surfacing-deprecation-information\n\n### Additional Context and Details\n\n_No response_"},{"Id":"36027778974","Type":"IssuesEvent","CreatedAt":"2024-02-26T22:03:26","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13265","RelatedDescription":"Opened issue \"Deprecate issue label Icebox in favor of Priority:3\" (#13265) at NuGet/Home","RelatedBody":"We triage issues and require a Priority label based on the following:\n\n* `Priority:0` - Zero day issues, issues that should be fixed immediately.\n* `Priority:1` - Issues we need to fix within the current release and treated with high priority\n* `Priority:2` - Issues that will be worked on in the current or next sprint\n* `Priority:3` - Issues considered low priority that are not actively being worked on but are left open to collect upvotes from the community.  Any issue with enough upvotes is labeled as `Triage:NeedsDiscussion` so that it can be re-evaluated\n\nWhenever we triage issues and place a `Priority:3` label, we also set the `Pipeline:Icebox` label which adds some overhead.  I propose instead that we add descriptions to the priority labels and we deprecate the `Pipeline:Icebox` label.  Going forward, any issue with `Priority:3` would be treated as we have always treated an issue with `Pipeline:Icebox`."},{"Id":"36027005106","Type":"IssuesEvent","CreatedAt":"2024-02-26T21:32:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13255","RelatedDescription":"Closed issue \"Adopt Spectre.Console for NuGet commands that output a table\" (#13255) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\ndotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nThe following commands render tables.\r\n``` powershell\r\n>> dotnet tool search\r\n>> dotnet package search\r\n```\r\nBy reworking their rendering process with Spectre.Console, these commands can produce more dynamic and aesthetically appealing tables. This change is particularly beneficial as the existing commands face difficulties in maintaining table structure when the console in which they are embedded is resized or when there is limited space.\r\n\r\n[Spectre.Console](https://spectreconsole.net/) is available in source build https://github.com/dotnet/source-build-externals/tree/main/src\r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"36026747530","Type":"IssuesEvent","CreatedAt":"2024-02-26T21:23:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13262","RelatedDescription":"Closed issue \"Home\" (#13262) at NuGet/Home","RelatedBody":""},{"Id":"36022141996","Type":"IssuesEvent","CreatedAt":"2024-02-26T18:55:20","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13112","RelatedDescription":"Closed issue \"[Signing] Package signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store\" (#13112) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.9.0.67\r\n\r\n### Worked before?\r\n\r\nIt worked in nuget client Dev\\6.8.0.101 since we used the \"CreateTestCertificate.ps1\" file to create certificate but we use \"MakeTestCert.csproj\" this time.\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack .csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate:\r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net8.0 -UseLocalMachineStore`\r\n4. Where _CertificateFilePath_ is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n`.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net8.0 -- add -c <CertificateFilePath> -UseLocalMachineStore`\r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package, where _Fingerprint_ is the Fingerprint (SHA-1) from step 3:\r\n`NuGet.exe sign <PackageFilePath> -CertificateStoreLocation LocalMachine -CertificateStoreName Root -CertificateFingerprint <Fingerprint>`\r\n6. Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Expected:**\r\nPackage signing is successful and no error or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Actual:**\r\nPackage signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/c0eb8abf-7089-4941-9ebc-91ea7cfb0a80)\r\n\r\n**Note:**   \r\nThe repro rate is 100%. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"36020516602","Type":"IssuesEvent","CreatedAt":"2024-02-26T17:49:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13253","RelatedDescription":"Closed issue \"Warn when vulnerabilities are detected during packages.config restore in CLI scenarios.\" (#13253) at NuGet/Home","RelatedBody":"Child issue of https://github.com/NuGet/Home/issues/12307"},{"Id":"36019906276","Type":"IssuesEvent","CreatedAt":"2024-02-26T17:30:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13250","RelatedDescription":"Closed issue \"Add nullable annotations to NuGet.Configuration\" (#13250) at NuGet/Home","RelatedBody":"[NuGet.Configuration](https://www.nuget.org/packages/NuGet.Configuration) is a package that is part of the [NuGet Client SDK](https://learn.microsoft.com/en-us/nuget/reference/nuget-client-sdk). We are adding null annotations, so projects using [nullable reference types](https://learn.microsoft.com/dotnet/csharp/nullable-references) will benefit from compiler null checking, leading to improved software reliability (fewer NullReferenceExceptions).\r\n\r\nGenerally when annotating nulls we try to avoid making any breaking API or ABI changes. However, the following changes have been made in order to allow the compiler to provide everyone with the most useful nullable warnings.\r\n\r\nProjects that use this package and enable nullable checks might find that upgrading to a version of the package that now has nullable annotations will generate warnings that previously did not generate warnings. This is a natural consequence of annotating the assembly where it previously lacked annotations.\r\n\r\nIn addition, the following breaking changes were implemented:\r\n \r\n## Changes to `SettingsBase` and `SettingsElement`\r\n\r\nTo make the compiler's null checking more accurate, some properties were changed, and some abstract class constructors changed. This should only affect classes that extend the abstract classes. NuGet.Configuration does not provide extensibility to allow custom configuration sections via `Settings.Load*`. Therefore, while these are technically breaking API changes, it's not expected to affect common usage of NuGet.Configuration."},{"Id":"36000957051","Type":"IssuesEvent","CreatedAt":"2024-02-26T08:41:24","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/10577","RelatedDescription":"Reopened issue \"Update-Package -reinstall adds second <Private>True</Private>\" (#10577) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\n\r\nExecuting `Update-Package -reinstall -id System.Net.Http` adds a second `<Private>True</Private>` to its dependencies in the .csproj file:\r\n![image](https://user-images.githubusercontent.com/10476293/108333531-54d0b680-71d1-11eb-985d-383c1f1424b7.png)\r\n\r\n\r\nNuGet product used (NuGet.exe | Visual Studio | MSBuild.exe | dotnet.exe):\r\nVisual Studio Package Manager Console\r\n\r\nProduct version: \r\nVisual Studio 16.8.4\r\nNuGet Package Manager 5.8.1\r\n\r\nWorked before? If so, with which NuGet version: \r\nNot as far as I know.\r\n\r\n## Repro steps and/or sample project\r\n\r\nWorking in net462 project\r\nInstall System.Net.Http via Package Manager\r\nExecute `Update-Package -reinstall -id System.Net.Http` from the VS Package Manager Console\r\nCheck the .csproj file\r\n\r\nTbh I haven't tried with other packages.\r\n\r\n### Verbose Logs\r\n\r\n<!-- Please include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...) -->\r\n\r\nAs far as I can see, the Update-Package command doesn't provide a \r\ntrigger for more detailed logs, and this command only outputs logs like\r\n\r\nRetrieving package...\r\nAdded package... to package.config\r\nSuccessfully installed... to {project}"},{"Id":"36000759660","Type":"IssuesEvent","CreatedAt":"2024-02-26T08:34:45","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13264","RelatedDescription":"Opened issue \"dotnet package search doesn't detect invalid arguments\" (#13264) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n8.0.300 preview\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nmost other commands, like `dotnet list package --invalid` will show me an error message saying that the argument is invalid. However, if I do `dotnet package search --invalid`, it searches with query string \"--invalid\". NuGet doesn't allow package IDs to have a double `--`, without a \"word character\" in between, and package IDs can't start or end with a `-` either. Therefore, I don't think there's any good reason to use any argument starting with `--` as a search term. It should instead be passed to the command line parser, and return an error about the command syntax if it doesn't match a known argument.\r\n\r\nEven though `-d` is a valid substring in a package ID, personally I'd argue that we should treat all strings starting with a `-` as an attempt at a command argument, not a search term. After all, it's impossible to search for \"-h\", since attempting to do so will return help instead.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35997962612","Type":"IssuesEvent","CreatedAt":"2024-02-26T06:47:56","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13259","RelatedDescription":"Closed issue \"NullReferenceException when updating package with different casing than project file\" (#13259) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI, Visual Studio Package Manager Console\r\n\r\n### Product Version\r\n\r\n6.9\r\n\r\n### Worked before?\r\n\r\n6.8\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nHave a project with a package reference that uses a different case than what the package's own metadata claims. For example `<PackageReference Include=\"nuget.versioning\" Version=\"6.6.0\" />`.  Then either try to upgrade the package in PM UI, or try to upgrade the package in PMC using a different case, for example `Update-Package NUGET.VERSIONING -Version 6.7.0`.\r\n\r\n### Extra Context\r\n\r\nSee https://developercommunity.visualstudio.com/t/Update-nuget-package-causes-NullReferenc/10584808\r\n"},{"Id":"35997405948","Type":"IssuesEvent","CreatedAt":"2024-02-26T06:21:40","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13112","RelatedDescription":"Reopened issue \"[Signing] Package signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store\" (#13112) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.9.0.67\r\n\r\n### Worked before?\r\n\r\nIt worked in nuget client Dev\\6.8.0.101 since we used the \"CreateTestCertificate.ps1\" file to create certificate but we use \"MakeTestCert.csproj\" this time.\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack .csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate:\r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0`\r\n4. Where _CertificateFilePath_ is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n`.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>`\r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package, where _Fingerprint_ is the Fingerprint (SHA-1) from step 3:\r\n`NuGet.exe sign <PackageFilePath> -CertificateStoreLocation LocalMachine -CertificateStoreName Root -CertificateFingerprint <Fingerprint>`\r\n6. Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Expected:**\r\nPackage signing is successful and no error or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Actual:**\r\nPackage signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/c0eb8abf-7089-4941-9ebc-91ea7cfb0a80)\r\n\r\n**Note:**   \r\nThe repro rate is 100%. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"35995077658","Type":"IssuesEvent","CreatedAt":"2024-02-26T04:10:37","Actor":"bradwilson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13263","RelatedDescription":"Opened issue \"developmentDependency change is ignored when ugprading package\" (#13263) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\n.NET SDK 8.0.200, VS 2022 17.9.1\n\n### Worked before?\n\nUnknown\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI have a .nuspec file with `<developmentDependency>true</developmentDependency>`. When users install the resulting NuGet package, they get this (this is expected behavior):\r\n\r\n```xml\r\n<PackageReference Include=\"SomePackage\" Version=\"1.0.0\">\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n</PackageReference>\r\n```\r\n\r\nIf I remove `<developmentDependency>` from future versions of the package, and then _upgrade_ the package, the system inappropriately keeps the `PrivateAsserts`/`IncludeAssets` child elements:\r\n\r\n```xml\r\n<PackageReference Include=\"SomePackage\" Version=\"2.0.0\">\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n</PackageReference>\r\n```\r\n\r\nI have verified this behavior with both the Visual Studio Package Manager UI, as well as `dotnet add package SomePackage`, which will perform the upgrade (incorrectly).\r\n\r\nIf I instead uninstall and then install the latest version of `SomePackage`, I get the expected output:\r\n\r\n```xml\r\n<PackageReference Include=\"SomePackage\" Version=\"2.0.0\" />\r\n```\n\n### Verbose Logs\n\n```shell\nThere is no verbosity switch for `dotnet add package`, though I suspect it would not have have provided any helpful information, since it thinks it did its job successfully.\n```\n"},{"Id":"35963636303","Type":"IssuesEvent","CreatedAt":"2024-02-24T01:08:35","Actor":"Charlesgmr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13262","RelatedDescription":"Opened issue \"Home\" (#13262) at NuGet/Home","RelatedBody":""},{"Id":"35961753892","Type":"IssuesEvent","CreatedAt":"2024-02-23T22:55:00","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13145","RelatedDescription":"Closed issue \"Address comments on `dotnet package search` in a follow up PR\" (#13145) at NuGet/Home","RelatedBody":"\r\n\r\nAddress comments on the following PR: https://github.com/NuGet/NuGet.Client/pull/5525\r\n\r\n"},{"Id":"35954894560","Type":"IssuesEvent","CreatedAt":"2024-02-23T17:57:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13261","RelatedDescription":"Opened issue \"Should NuGetAudit respect NoCache\" (#13261) at NuGet/Home","RelatedBody":"See: https://github.com/NuGet/NuGet.Client/pull/5639#discussion_r1500970353. \r\n\r\nCurrently nuget audit creates a new cache context to avoid redownloading, but that technically violates nocache. \r\n\r\nNoCache itself is primarily designed for getting new packages. "},{"Id":"35954528423","Type":"IssuesEvent","CreatedAt":"2024-02-23T17:43:29","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13166","RelatedDescription":"Closed issue \"Search results in json format from dotnet package search should not include fields for which no values are provided\" (#13166) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-alpha.1.24062.11\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n.\\dotnet.exe package search <search_term> --format json\r\nNote: this repros with or without --exact-match\r\n\r\nExpected:\r\nThe feedback is that fields that do not have values available in the package source, such as owners or total downloads, should not be included in the json output.\r\n\r\nActual:\r\nFields that do not have values available in the package source, such as owners or total downloads, are provided in the json output with the value null.\r\n\r\nFeedback provided here: https://github.com/NuGet/Home/issues/13158#issuecomment-1894317620\n\n### Verbose Logs\n\n_No response_"},{"Id":"35950658466","Type":"IssuesEvent","CreatedAt":"2024-02-23T15:33:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13259","RelatedDescription":"Opened issue \"NullReferenceException when updating package with different casing than project file\" (#13259) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n6.9\n\n### Worked before?\n\n6.8\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nHave a project with a package reference that uses a different case than what the package's own metadata claims. For example `<PackageReference Include=\"nuget.versioning\" Version=\"6.6.0\" />`.  Then either try to upgrade the package in PM UI, or try to upgrade the package in PMC using a different case, for example `Update-Package NUGET.VERSIONING -Version 6.7.0`.\n\n### Verbose Logs\n\n```shell\nSee https://developercommunity.visualstudio.com/t/Update-nuget-package-causes-NullReferenc/10584808\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-02-27T03:30:18.2204956Z","RunDurationInMilliseconds":1039}