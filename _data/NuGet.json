{"Data":{"Blog":{"FeedItems":[{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14662854238","Type":"IssuesEvent","CreatedAt":"2020-12-29T08:20:10","Actor":"h1213159982","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8365","RelatedDescription":"Opened issue \"Private nuget server cannot upload icon\" (#8365) at NuGet/NuGetGallery","RelatedBody":"我安装Nuget.Server包创建的私有nuget服务器，但是上传的包无法显示图标，nuget.org上可以正常显示\r\n\r\nI install \"Nuget.Server\" Package create private nuget server,But the uploaded package cannot display the icon,\"nuget.org\" it can be displayed normally\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14707599366","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:54:23","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10404","RelatedDescription":"Closed issue \"Make readonly files by default in NuGet packages\" (#10404) at NuGet/Home","RelatedBody":"Hey,\r\n\r\nRelated closed issue #1729\r\n\r\nIn the project Scriban, I'm using a mode where I ship with my package also the sources of the project that can be used internally in the consuming projects (these are not contentFiles but custom source files added by the package). See [embedding source](https://github.com/scriban/scriban#source-embedding) in Scriban.\r\n\r\nIt allows me to release a NuGet package with binaries and sources, and the user can choose which version to use.\r\n\r\nOne big issue with NuGet today is that files extracted on the disk are not readonly. That means that if a user, by mistake, is starting to change files on the disk, it will change files machine wide (or from where the NuGet package cache is used)."},{"Id":"14707379085","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:30:52","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10382","RelatedDescription":"Closed issue \"Error when build with automatic packing using cmd\" (#10382) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 5.0.200-preview.20601.7\r\n\r\nVS version (if appropriate): VS2019 16.8.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 19042.685\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. dotnet build csproj throwing error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\5.0.200-preview.20601.7\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error : The given key 'tfm_raw' was not present in the dictionary. [C:\\sarif-pattern-matcher\\Src\\Plugins\\BannedApi\\BannedApi.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n````\r\n\r\nIf I manually build using VS, it works fine.\r\n\r\nAttached you can find a binlog\r\n\r\n[msbuild.zip](https://github.com/NuGet/Home/files/5698378/msbuild.zip)\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"14707360085","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:28:48","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10381","RelatedDescription":"Closed issue \"How do I define an internal assembly in a NuGet package?\" (#10381) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#14906**\r\n- Please respond to @lg2de.\r\n\r\n---\r\n\r\n_From @lg2de on Wednesday, December 9, 2020 5:12:25 PM_\r\n\r\nI want to define a NuGet package that contains two assemblies, one that is directly referenced by the consumer of my package and another one that is only needed at runtime and its APIs should not be visible to the consumer.\r\n\r\nI've created a github repository to demonstrate the constellation in detail:\r\nhttps://github.com/lg2de/NuGetDependencyDemo\r\n\r\nThe assembly `BaseLibrary` is directly referenced by the assembly `DependentLibrary`.\r\n`BaseLibrary` is an external assembly not available as NuGet package.\r\nFrom `DependentLibrary` my NuGet package is created.\r\n\r\nWhen creating project just referencing the NuGet package, the assembly `BaseLibrary` is missing in the build output. (In the mentioned repository you can find this constellation [here][1].)\r\nOf course, in this case the application raises an `FileNotFoundException` for `BaseLibrary`.\r\n\r\nSo I've added is to my NuGet package [using targets file directive][2].\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <None Include=\"$(MSBuildThisFileDirectory)BaseLibrary.dll\" Visible=\"false\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe assembly now available in the output folder, but I still get the same `FileNotFoundException`.\r\nThis seems to be new behavior in dotnetcore: Assemblies are not implicitly loaded.\r\nThe assembly is missing in `ConsoleWithNugetReference.deps.json`.\r\n\r\nTo solve this now have to [load manually before it is first used][3].\r\n\r\n```c#\r\nvar location = Path.GetDirectoryName(typeof(Program).Assembly.Location);\r\nAssemblyLoadContext.Default.LoadFromAssemblyPath(Path.Combine(location!, \"BaseLibrary.dll\"));\r\n```\r\n\r\nAll this is very complicated and tedious!\r\n\r\nSo, how can I define a NuGet package that contains two assemblies, one that is directly referenced by the consumer of my package and another one that is only needed at runtime and its APIs should not be visible to the consumer?\r\n\r\n\r\n  [1]: https://github.com/lg2de/NuGetDependencyDemo/tree/11962aa812a566efbb5782876692ebb1df574fa9\r\n  [2]: https://github.com/lg2de/NuGetDependencyDemo/commit/0d67ebaf3648d06322844f03a99609dd642506b7\r\n  [3]: https://github.com/lg2de/NuGetDependencyDemo/commit/e2dbc8c0265217164f4022347f1c7e65125e4c7a"},{"Id":"14707196754","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:11:31","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10323","RelatedDescription":"Closed issue \"How to programming set package management format\" (#10323) at NuGet/Home","RelatedBody":"NuGet product used: NuGet.VisualStudio\r\n\r\nversion: 5.8\r\n\r\nOS version: win10\r\n\r\nHi I encounter some problem about using NuGet.VisualStudio to develop Visix programe.\r\n\r\nWhen I use IVsPackageInstaller.InstallPackage(null, project, moq, null, false).\r\n\r\nI always get format \"0\" (not reference format) in installing package.\r\n\r\nI realize when source fill with null, Installing process will use user's configured sources, I am sure my configured source management format which select format 1.\r\n\r\nDose any lose step, when i use InstallPackage of IVsPackageInstaller.\r\n\r\nI found this commit [#2698](https://github.com/NuGet/NuGet.Client/pull/2698/commits/f089dc92596f8130b3f4fd71ea111bc8849a9fa8)\r\nbut it still not resolve my problem."},{"Id":"14707166730","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:08:15","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10321","RelatedDescription":"Closed issue \"Could not establish trust relationship for the SSL/TLS secure channel\" (#10321) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI am unable to install Microsoft.EntityFrameworkCore.SqlServer -Version 5.0.0 package. The following error is displayed on the console:\r\n_PM> Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 5.0.0\r\nRestoring packages for C:\\Users\\osunday\\source\\repos\\ContosoUniversity\\ContosoUniversity\\ContosoUniversity.csproj...\r\nInstall-Package : Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n  An error occurred while sending the request.\r\n  The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\r\n  The remote certificate is invalid according to the validation procedure.\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 5.0. ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nTime Elapsed: 00:00:09.3305969\r\n\r\nHowever, I manage to install version 2.2.0 but was not able to scaffold because the system threw \"There was an error running the selected code generator: Unable to load the service index for source https://api.nuget.org/v3/index.json\"\r\n \r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Package Manager Console\r\n\r\nNuGet version (x.x.x.xxx): 5.8.0\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 2019 v16.8.2\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1609\r\n\r\nWorked before? If so, with which NuGet version: Yes, 5.8.0\r\n"},{"Id":"14707159891","Type":"IssuesEvent","CreatedAt":"2021-01-04T21:07:30","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10402","RelatedDescription":"Closed issue \"dotnet add package returns local source not found\" (#10402) at NuGet/Home","RelatedBody":"When I do dotnet nuget list source, it shows the following sources:\r\n* nuget.org\r\n* mysource\r\n\r\nHowever, when I run `dotnet add package <packageID> -s mysource`, it returns local source `mysource` doesn't exist"},{"Id":"14706687775","Type":"IssuesEvent","CreatedAt":"2021-01-04T20:17:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9810","RelatedDescription":"Closed issue \"SourceRoots not set correctly from NuGetPackageFolders\" (#9810) at NuGet/Home","RelatedBody":"The generated props file for the project (`git-test1\\obj\\git-test1.csproj.nuget.g.props`) contains:\r\n\r\n```xml\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\<user-name>\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder</NuGetPackageFolders>\r\n  </PropertyGroup>\r\n...\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <SourceRoot Include=\"$([MSBuild]::EnsureTrailingSlash($(NuGetPackageFolders)))\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis adds a **single** item to SourceRoot with ItemSpec = `C:\\Users\\Tomas\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`. Instead, we need 2 items: `C:\\Users\\<user-name>\\.nuget\\packages\\` and `C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`.\r\n\r\nPossible fix:\r\n```xml\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n     <_NuGetPackageFolders Include=\"$(NuGetPackageFolders)\" NormalizedPath=\"$([MSBuild]::EnsureTrailingSlash(%(Identity)))\" />\r\n    <SourceRoot Include=\"@(_NuGetPackageFolders->'%(NormalizedPath)')\" />\r\n  </ItemGroup>\r\n```"},{"Id":"14706356791","Type":"IssuesEvent","CreatedAt":"2021-01-04T19:42:34","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10213","RelatedDescription":"Closed issue \"Validate Search branch before merging into Dev\" (#10213) at NuGet/Home","RelatedBody":""},{"Id":"14705478563","Type":"IssuesEvent","CreatedAt":"2021-01-04T18:11:50","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10424","RelatedDescription":"Opened issue \"Unhandled exceptions in Restore should generate assets file to capture error messages\" (#10424) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used VS 16.8\r\n\r\nWhen an unhandled exception occurs in Restore, for SDK style projects, we have no way of reporting that error in the Error List since there's no assets file. This leads to other arbitrary (and wrong) messages being shown, such as an unknown TFM. \r\n\r\nThe scenario I propose we handle for now is a non-existent package source (FatalProtocolException).\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a `config` file pointing to a non-existent package source\r\n2. Open a new SDK style project (without an existing assets file) (I used net5.0-windows)\r\n3. Build, and some errors will occur.\r\n`NETSDK1005    Assets file <proj>\\obj\\project.assets.json' doesn't have a target for 'net5.0-windows'. Ensure that restore has run and that you have included 'net5.0-windows' in the TargetFrameworks for your project.  `\r\n\r\nor perhaps\r\n\r\n`NETSDK1004\tAssets file '<proj>\\obj\\project.assets.json' not found. Run a NuGet package restore to generate this file.\t\r\n<proj>\tC:\\Program Files\\dotnet\\sdk\\5.0.200-preview.20614.14\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t195`\r\n\r\n## Other suggested things\r\nRelated: https://github.com/NuGet/Home/issues/7012\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"14698386282","Type":"IssuesEvent","CreatedAt":"2021-01-04T06:19:37","Actor":"neeraj9","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10423","RelatedDescription":"Opened issue \"Restoring results in obscure error: Invalid framework identifier ''\" (#10423) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nI am trying to build one of the project for Linux operating system and it fails with the .NET SDK 5.0. My main concern is about the obscure error message displayed which does not give any indication of the project file (csproj) or the target framework which is the source of issue here.\r\n\r\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.101\r\n Commit:    d05174dc5a\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  20.04\r\n OS Platform: Linux\r\n RID:         ubuntu.20.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/5.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.1\r\n  Commit:  b02e13abab\r\n\r\n.NET SDKs installed:\r\n  5.0.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.1 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nIt is probably this https://github.com/NuGet/NuGet.Client/blob/release-5.8.x/src/NuGet.Core/NuGet.Frameworks/NuGetFramework.cs#L260 which is the source of issue. It doesn't give the current project file being processed or what was the string present as part of the target framework. It is a source of concern since it becomes much harder to debug such issues for big projects.\r\n\r\n> Did not work ever for my project.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nRestoration of the project via \"dotnet restore\" fails with obscure message.\r\n\r\n```\r\n     2>/usr/share/dotnet/sdk/5.0.101/NuGet.targets(131,5): error : Invalid framework identifier ''. [/home/neeraj/someproj/build.proj]\r\n         NuGet.Frameworks.FrameworkException: Invalid framework identifier ''.\r\n            at NuGet.Frameworks.NuGetFramework.GetShortFolderName(IFrameworkNameProvider mappings)\r\n            at NuGet.Frameworks.NuGetFramework.GetShortFolderName()\r\n            at NuGet.Commands.MSBuildRestoreUtility.<>c__DisplayClass6_0.<GetPackageSpec>b__0(TargetFrameworkInformation tfi)\r\n            at NuGet.Shared.Extensions.ForEach[T](IEnumerable`1 enumeration, Action`1 action)\r\n            at NuGet.Commands.MSBuildRestoreUtility.GetPackageSpec(IEnumerable`1 items)\r\n            at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\r\n            at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\r\n            at NuGet.Commands.MSBuildRestoreUtility.GetDependencySpec(IEnumerable`1 items)\r\n            at NuGet.Build.Tasks.RestoreTask.ExecuteAsync(ILogger log)\r\n       Done executing task \"RestoreTask\" -- FAILED.\r\n```\r\n\r\n### Sample Project\r\n\r\n> Its a proprietary project, so cannot provide the code here.\r\n\r\n"},{"Id":"14692312384","Type":"IssuesEvent","CreatedAt":"2021-01-03T01:13:04","Actor":"txwizard","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10422","RelatedDescription":"Opened issue \"Null Reference Exception Thrown When Attempting Package Update in Existing Project\" (#10422) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuGet Package Manager in Visual Studio 2019 Community\r\nNuGet version (x.x.x.xxx):\r\n5.8.0.6930\r\ndotnet.exe --version (if appropriate):\r\nNot Applicable\r\nVS version (if appropriate):\r\nMicrosoft Visual Studio Community 2019, Version16.8.3\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nMicrosoft Windows Professional [Version 10.0.19042.685]\r\nWorked before? If so, with which NuGet version:\r\nYes, many times, with NuGet Version: 4.9.4.5839\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Select Manage NuGet Packages from the main Project menu (off the ribbon) or the Project context menu in the Solution Explorer.\r\n\r\n2. Click the Updates tab, which shows 8 packages that are in need of an update.\r\n3. Click Select All.\r\n4. Click Update.\r\n5. Observe exception report displayed in both Errors and Output windows. Below is from the Output Window.\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<>c.<ResolveActionsForUpdateAsync>b__9_0(PackageIdentity package)\r\n   at System.Linq.Enumerable.WhereListIterator`1.MoveNext()\r\n   at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<ResolveActionsForUpdateAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<>c__DisplayClass11_0.<<PerformActionImplAsync>b__0>d.MoveNext()\r\nTime Elapsed: 00:00:00.0148382\r\n========== Finished ==========\r\n\r\n\r\n...\r\n\r\n## Other suggested things\r\nI verified that neither packages.config, nor the packages directory, nor anything within it, is marked as read only.  Though packages.config was, reversing that error had no effect on the outcome.\r\n\r\nFWIW, I successfully executed a NuGet push from a command prompt window yesterday afternoon to update a dependent library that got missed when I updated everything (9 packages) in my WizardWrx .NET API library on New Year's Eve. The oversight came to my attention when I installed most of those libraries (6 of the 9) into a new project that I started yesterday. Both the update and the install (pull) ran without issue using nuget.exe 5.8.0.6930, which runs from directory C:\\bin, which is in my PATH list.\r\n\r\nAll projects are \"legacy\" packages, since I have yet to see the benefit of converting to the newer, supposedly improved package format.\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\nI would if I could, but, alas, the NuGet Package Manager doesn't appear to have such an option.\r\n\r\n### Sample Project\r\n[FixCSV_20210102_185208.zip](https://github.com/NuGet/Home/files/5761060/FixCSV_20210102_185208.zip)\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\nIt's even small; there is one class (Program.cs), and it's a character-mode program."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1334226716139655171","CreatedAt":"2020-12-02T20:03:32+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nHave you recently experienced issues with your NuGet connectors? You may have been impacted… https://t.co/98KJJGhYEW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":30,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2021-01-05T05:30:39.2393349Z","RunDurationInMilliseconds":1715}