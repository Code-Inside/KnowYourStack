{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Introduction\nIn November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!  \nYour feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"40680029539","Type":"PullRequestEvent","CreatedAt":"2024-08-02T01:23:17","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10106","RelatedDescription":"Opened pull request \"Move to latest ServerCommon version\" (#10106) at NuGet/NuGetGallery","RelatedBody":"This bring Azure.Data.Tables and Azure.Storage.Blobs into several new places. NuGet.Services.Storage has a new constructor affecting a lot of DI setup.\r\n\r\nThe following jobs were impacted, and need to be assessed for managed identity support. They should be closer, since they have the new storage SDK, at least in part.\r\n\r\n- Gallery:\r\n  - GitHubVulnerabilities2Db\r\n  - GitHubVulnerabilities2V3\r\n- Jobs:\r\n  - Gallery.CredentialExpiration\r\n  - Stats.PostProcessReports\r\n  - StatusAggregator\r\n  - Validation.PackageSigning.ProcessSignature\r\n  - Validation.PackageSigning.ValidateCertificate"},{"Id":"40679654769","Type":"PullRequestEvent","CreatedAt":"2024-08-02T00:58:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10104","RelatedDescription":"Merged pull request \"Fix flaky test CanRetryOnConflict\" (#10104) at NuGet/NuGetGallery","RelatedBody":"This test is flaky. It fails with:\r\n\r\n```\r\n  Failed NuGet.Services.AzureSearch.BlobContainerBuilderFacts+CreateAsync.CanRetryOnConflict [22 ms]\r\n  Error Message:\r\n   Assert.InRange() Failure: Value not in range\r\nRange:  (00:00:00.0100000 - 10675199.02:48:05.4775807)\r\nActual: 00:00:00.0098249\r\n```"},{"Id":"40679239629","Type":"PullRequestEvent","CreatedAt":"2024-08-02T00:29:04","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10105","RelatedDescription":"Opened pull request \"Change font weight of package list page links\" (#10105) at NuGet/NuGetGallery","RelatedBody":"\r\n* Change links font weight to solve color contrast with surrounding text issue.\r\n\r\nBug URL https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2088567\r\n![image](https://github.com/user-attachments/assets/ef3fb0e3-4d6f-4fee-ae55-18e4c265fcb3)\r\n"},{"Id":"40678678701","Type":"PullRequestEvent","CreatedAt":"2024-08-01T23:51:31","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10104","RelatedDescription":"Opened pull request \"Fix flaky test CanRetryOnConflict\" (#10104) at NuGet/NuGetGallery","RelatedBody":"This test is flaky. It fails with:\r\n\r\n```\r\n  Failed NuGet.Services.AzureSearch.BlobContainerBuilderFacts+CreateAsync.CanRetryOnConflict [22 ms]\r\n  Error Message:\r\n   Assert.InRange() Failure: Value not in range\r\nRange:  (00:00:00.0100000 - 10675199.02:48:05.4775807)\r\nActual: 00:00:00.0098249\r\n```"},{"Id":"40677695010","Type":"PullRequestEvent","CreatedAt":"2024-08-01T22:47:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10101","RelatedDescription":"Merged pull request \"Fetch and copy HTTP headers if they are being updated\" (#10101) at NuGet/NuGetGallery","RelatedBody":"I will also copy this implementation to ServerCommon. Great catch by @dannyjdev!\r\n\r\nWithout this, we loose any additional HTTP headers existing on the blob, not overridden on the `BlobHttpHeaders` instance. `SetHttpHeadersAsync` replaces ALL headers that can possible be set by it, not just the ones you explicitly assign.\r\n\r\nAlso, unrelated, remove a BuildConfiguration parameter from the CI YAML. Perhaps that is what is preventing the automatic CI build from working. (it's a guess, it's something I added as a nicety but it's not required at this time)"},{"Id":"40677600324","Type":"PullRequestEvent","CreatedAt":"2024-08-01T22:41:59","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10103","RelatedDescription":"Opened pull request \"Remove Focus on Package Page Tables\" (#10103) at NuGet/NuGetGallery","RelatedBody":"Links and buttons inside package page tables receive double focus, need to remove the focus on table cell to make links and buttons receive single focus\r\n\r\n* remove tabindex from all table cell from package page\r\n\r\n![image](https://github.com/user-attachments/assets/ad637ee1-b9c2-4fa3-9e3e-171cdd748cbc)\r\n\r\n\r\nBug URL: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2175594"},{"Id":"40677247493","Type":"IssuesEvent","CreatedAt":"2024-08-01T22:22:10","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10065","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Dark mode README table issue\" (#10065) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Describe the bug\r\n\r\nWhen viewing a NuGet package using dark mode, every second table row in the README is unreadable because the background and text are the same color.\r\n\r\n### Repro Steps\r\n\r\n1. Use dark mode\r\n2. Go to https://www.nuget.org/packages/RMN.Blazor.DragDrop\r\n3. Find the table in the README\r\n\r\n### Expected Behavior\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/156656650/72b9213b-bebc-4b1a-9fef-fadab5a6be6c)\r\n\r\n### Screenshots\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/156656650/fa5f9390-3d01-4c57-85ca-d5ff31f400fd)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"40676829424","Type":"PullRequestEvent","CreatedAt":"2024-08-01T22:00:18","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10102","RelatedDescription":"Closed pull request \"Remove Focus on Packages Table \" (#10102) at NuGet/NuGetGallery","RelatedBody":"Links and buttons inside package page tables receive double focus, need to remove the focus on table cell to make links and buttons receive single focus\r\n\r\n* remove tabindex from all table cell from package page\r\n* \r\n![image](https://github.com/user-attachments/assets/ad637ee1-b9c2-4fa3-9e3e-171cdd748cbc)\r\n\r\n\r\nBug URL: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2175594"},{"Id":"40676760142","Type":"PullRequestEvent","CreatedAt":"2024-08-01T21:56:31","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10102","RelatedDescription":"Opened pull request \"Remove Focus on Packages Table \" (#10102) at NuGet/NuGetGallery","RelatedBody":"Links and buttons inside package page tables receive double focus, need to remove the focus on table cell to make links and buttons receive single focus\r\n\r\n* remove tabindex from all table cell from package page\r\n\r\nBug URL: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2175594"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"40677338311","Type":"IssuesEvent","CreatedAt":"2024-08-01T22:26:38","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11129","RelatedDescription":"Closed issue \"[Bug]: The package version dropdown in the VS PMUI package details pane doesn't show which versions are deprecated in the Browse tab, but does in the other tabs\" (#11129) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nVisual Studio 17.0 preview 3\r\n\r\n### Worked before?\r\n\r\nI think so, but not sure which version. Bug exists in 16.11 preview 3.\r\n\r\n### Impact\r\n\r\n_No response_\r\n\r\n### Repro Steps & Context\r\n\r\n**Repro**\r\n\r\n1. Got to the VS PMUI Browse tab\r\n2. Search for WindowsAzure.Storage (all versions are deprecated)\r\n3. Select WindowsAzure.Storage to open the package detail pane\r\n4. Click on version dropdown menu\r\n5. Notice that none of the version numbers show \"(Deprecated)\" next to them\r\n\r\n![image](https://user-images.githubusercontent.com/15097183/128244692-51fbed36-3b0b-474b-b4f1-216913d5b5dc.png)\r\n\r\n**Expected behavior**\r\n\r\nIn the Browse tab, the version dropdown menu should show which versions are deprecated. This currently works in the Installed and Updates tabs as shown:\r\n\r\n![image](https://user-images.githubusercontent.com/15097183/128244802-72bf5be8-ade6-44a9-92a0-24647d267f49.png)\r\n\r\nThis should work in both the project and solution level PMUI windows."},{"Id":"40670815880","Type":"IssuesEvent","CreatedAt":"2024-08-01T18:00:47","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13641","RelatedDescription":"Closed issue \"Error NU1301 instead of \"TLS validation failed\" displays when running ‘dotnet restore’ before TLS certificate validation is disabled \" (#13641) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\ndotnet SDK 8.0.400-preview.0.24324.5\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps: \r\n1.\tCreate a C# Console App (.NET 8.0) project.\r\n2.\tIn the solution folder, create a file named nuget.config with the following content:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n <packageSources>\r\n    <clear />\r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\"/>\r\n  </packageSources>\r\n</configuration>\r\n```\r\n3.\tOpen the .csproj file for your project and insert the following package reference within an ItemGroup:\r\n```\r\n<ItemGroup>\r\n  <PackageReference Include=\"abcdefghijkl\" Version=\"1.0.0\" />\r\n</ItemGroup>\r\n```\r\n4.\tOpen a command prompt and navigate to the solution directory.\r\n5.\tOpen a second command prompt window, download the [Entropy/filebackedserver](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FNuGet%2FEntropy%2Ftree%2Fmain%2Ffilebackedserver&data=05%7C02%7Cv-luzh%40microsoft.com%7Cc95c4e3963084ce6346308dca77d170b%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638569402943632816%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=l8ku%2FzCWGFZgfRTAu71pFzPkthK0HSiw9zJpFXno%2F1w%3D&reserved=0) and go to the ‘filebackedserver’ solution directory and build the server by running:\r\n`dotnet build .\\filebackedserver\\filebackedserver.csproj`\r\n6.\tStart the local server by executing:\r\n`dotnet run --project .\\filebackedserver\\filebackedserver.csproj`\r\n7.\tSwitch back to the first terminal where your original project is located and run:\r\n`dotnet restore`\r\n8. Modify the nuget.config file to disable TLS certificate validation as follows and run `dotnet restore` again.\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\" disableTLSCertificateValidation=\"true\"/>\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\n#### Expected Result:\r\nError \"TLS validation failed\" should be displayed in the first command prompt in step7.\r\n#### Actual Result:\r\nError NU1301 displays in the first command prompt as the screenshot below in step7.\r\n![image](https://github.com/user-attachments/assets/07d54f07-cbd5-4d0b-9fdf-e3727f0d6a12)\r\n\r\n#### Notes:     \r\n1.\tThe repro rate is 100%. \r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"40653940019","Type":"IssuesEvent","CreatedAt":"2024-08-01T09:27:48","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13668","RelatedDescription":"Opened issue \"[Bug Bash] The project name in the right panel of solution-level PM UI show inconsistently between SDK-based project and non-SDK project after installing “PackageReference” packages \" (#13668) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.12.0.44\n\n### Worked before?\n\nIt is not a regression since it reproes on both D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 and D17.10\\34902.84 with implicit NuGet Client 6.10.0.97.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:       \r\n\r\nSteps:  \r\n\r\n1. Create a solution with a C# Class Library (.NET Core) and a C# Class Library (.NET Framework) project in VS.”. \r\n\r\n2. Right-click the solution in the Solution Explorer and select the menu “Mange NuGet Packages for Solution”. \r\n\r\n3. Go to “Browse” tab and select a package (e.g. “Newtonsoft.Json”) \r\n\r\n4. Observe the project name on the right panel. \r\n\r\n5. Install the package “Newtonsoft.Json” with “PackageReference” format. \r\n\r\n6. Observe the project name on the right panel. \r\n\r\n \r\n\r\n#### Expected: \r\n\r\nThe project name should show consistently between the two projects. \r\n\r\n \r\n\r\n#### Actual:        \r\n\r\nThe project name should show inconsistently between the two projects as the record below: \r\n![picture](https://github.com/user-attachments/assets/4d3832d4-f576-4ecd-b314-549f50b73f98)\r\n#### Notes:    \r\n\r\n1. The repro rate is 100%. \r\n\r\n2. It doesn’t repro when installing package with package.config in step 5, and they're all named “ProjectName” as below: \r\n![image](https://github.com/user-attachments/assets/26e09d49-6f73-4f66-a57c-256ddcadc221)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40653607307","Type":"IssuesEvent","CreatedAt":"2024-08-01T09:18:09","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13667","RelatedDescription":"Opened issue \"[Pack] The building still happened when running the command “dotnet pack” with option “--no-build” in .NET SDK 9.0\" (#13667) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet SDK 9.0.100-preview.6.24328.19\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro on .NET SDK 8.0, but it can repro on .NET SDK 9.0. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Open VS and create a C# Class Library (.NET 9.0) project named package1. \r\n\r\n2. Build solution and make sure compilation succeeds.  \r\n\r\n3. Open “Developer Command Prompt”, cd to Package1 project path and execute below command:\r\n   ` dotnet pack package1.csproj --no-build `\r\n\r\n#### Expected:    \r\n\r\nThe package was created without building & restoring info in Developer Command Prompt. (as the docs [dotnet pack](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-pack) said)  \r\n\r\n#### Actual: \r\n\r\nThe building still happened as below:\r\n![image](https://github.com/user-attachments/assets/829c83b4-b284-4d1d-9d08-95aab47aeccb)\r\n#### Note:     \r\nThe repro rate is 100%. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"40652862652","Type":"IssuesEvent","CreatedAt":"2024-08-01T08:57:06","Actor":"dotnet-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13588","RelatedDescription":"Closed issue \"Nuget restore with --packages does not work as expected. The deprecated folder C:\\Program Files\\dotnet\\sdk\\NuGetFallBackFolder is still used silently.\" (#13588) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n6.0.420 [C:\\Program Files\\dotnet\\sdk]\n\n### Worked before?\n\nNever\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI wanted to use the dotnet restore --package \"packages\" <MY solution> --force to restore all packages of my solution into the \"packages\" folder. No matter what I did I got different results on different computers.\r\n\r\nEvent after clearing the nuget cache with dotnet nuget locals all --clear i did not get the same number of restored packages. \r\n\r\nI found out that the previous directory \"C:\\Program Files\\dotnet\\sdk\\NuGetFallBackFolder\" which was used prior to .NET 3.0 Core was still considered as cache. If the nuget package was already present in the C:\\Program Files\\dotnet\\sdk\\NuGetFallBackFolder the nuget package was not saved to the packages folder.\r\n\r\nI would expect, using dotnet restore --force would take care of really considering all packages and store them, not only those which are in the official dotnet nuget cache lists.\r\n\r\nI also would think that if something got removed and deprecated the C:\\Program Files\\dotnet\\sdk\\NuGetFallBackFolder is not of concern anyhow and should be ignored.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40645079435","Type":"IssuesEvent","CreatedAt":"2024-08-01T03:31:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13612","RelatedDescription":"Closed issue \"Use of Obsolete X509Certificate2 ctor\" (#13612) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nnuget-client in dotnet VMR latest build\r\n\r\n### Repro Steps & Context\r\n\r\nThe source-build VMR build is failing in stage 2 with the following error:\r\n\r\n`\r\n/vmr/src/nuget-client/src/NuGet.Core/NuGet.Configuration/Settings/Items/FileClientCertItem.cs(170,66): error SYSLIB0057: 'X509Certificate2.X509Certificate2(string)' is obsolete: 'Loading certificate data through the constructor or Import is obsolete. Use X509CertificateLoader instead to load certificates.' (https://aka.ms/dotnet-warnings/SYSLIB0057) [/vmr/src/nuget-client/src/NuGet.Core/NuGet.Configuration/NuGet.Configuration.csproj]\r\n`\r\n\r\nThis error is caused by https://github.com/dotnet/runtime/pull/104165\r\nThis issue is also described in https://github.com/dotnet/source-build/issues/4495."},{"Id":"40637765605","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:28:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13666","RelatedDescription":"Opened issue \"Transitive vulnerabilities should bubble up warning icons to the dependencies node in VS solution explorer\" (#13666) at NuGet/Home","RelatedBody":"From internal discussion on how to enable this:\r\n\r\n> The only outstanding work I'm aware of here is showing warnings/errors on top-level dependencies. This data needs to come from the design-time build targets, via `DiagnosticLevel` metadata. Could the NuGet team please see whether they can add this data during DTBs?\r\n\r\n> ResolvedPackageReference returned from target ResolvePackageDependenciesDesignTime\r\n> ResolvedProjectReference returned from target ResolveProjectReferencesDesignTime2"},{"Id":"40637579438","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:20:36","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13665","RelatedDescription":"Opened issue \"[Feature] Automatically remediate known vulnerabilities in dependencies by upgrading them.\" (#13665) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### The Elevator Pitch\n\nThe CLI and VS tooling should be able to automatically remediate known vulnerabilities in dependencies by upgrading them. This issue tracks the PR design of https://github.com/NuGet/Home/pull/11549 which would provide this functionality through a new `dotnet audit` and `dotnet audit fix` command.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40637316398","Type":"IssuesEvent","CreatedAt":"2024-07-31T20:10:25","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13664","RelatedDescription":"Opened issue \"[Feature] Use static analysis to understand whether a vulnerable code path is actually reachable\" (#13664) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\ngovulncheck enables developers to find vulnerabilities in their codebase but only surfaces vulnerabilities that actually affect you, based on which functions in your code are transitively calling the vulnerable functions.\r\n\r\nhttps://go.dev/security/vuln\r\n\r\nHere is an interesting perspective about it from the govulncheck creator: https://abyssdomain.expert/@filippo/112626531259021350\n\n### Additional Context and Details\n\n_No response_"},{"Id":"40634772108","Type":"IssuesEvent","CreatedAt":"2024-07-31T18:32:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13487","RelatedDescription":"Closed issue \"There is no doc for NU1702\" (#13487) at NuGet/Home","RelatedBody":"There is for `NU1701` and there is for `NU1703`.\r\n\r\nBut not for `NU1702` which reads as following:\r\n\r\n```\r\nWarning\r\nNU1702\r\nProjectReference 'MyProject.csproj' was resolved using '.NETFramework,Version=v4.6.2' instead of the project target framework '.NETCoreApp,Version=v3.1'. This project may not be fully compatible with your project.\t\r\n```\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 377ae860-386f-149f-c5e0-410d3aa89dbc\r\n* Version Independent ID: 2b145147-fd3f-d1aa-2694-071a31542d9a\r\n* Content: [NuGet Warning NU1701](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1701)\r\n* Content Source: [docs/reference/errors-and-warnings/NU1701.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/main/docs/reference/errors-and-warnings/NU1701.md)\r\n* Product: **nuget**\r\n* GitHub Login: @zhili1208\r\n* Microsoft Alias: **lzhi**"},{"Id":"40633981848","Type":"IssuesEvent","CreatedAt":"2024-07-31T18:04:23","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13060","RelatedDescription":"Closed issue \"PM UI transitive dependencies should display all transitive dependencies, not just ones brought in through packages directly installed in a project\" (#13060) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nThere's many facets to this: \r\n\r\nExample 1: \r\n\r\n\r\nStart with a project Library, referencing Newtonsoft.Json version 12.0.3, which is vulnerable. \r\nReference that project from an application. \r\nGo to the application project, see you have no packages listed (despite having transitive packages)\r\n\r\nThis is incorrect, since Newtonsoft.Json is a transitive package to Application through library. \r\nYes, library the project directly installing it, but in the end it is available for coding in Application in the default behavior for packages. \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"12.0.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n[Example1.zip](https://github.com/NuGet/Home/files/13519378/Example1.zip)\r\n\r\n\r\nExample 2: \r\n\r\nBuilding on top of example 1, say you install NuGet.Packaging version 5.11.5. \r\nNote that this references version 9.0.1, while the project references version 12.0.3. \r\n\r\nNote that the transitive package itself is shown, despite the fact that it is the project itself that brings in the transitive package. \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/c2d9f29f-6995-49b1-88fa-4543fe74554e)\r\n\r\n[Example2.zip](https://github.com/NuGet/Home/files/13519455/Example2.zip)\r\n\r\nExample 3: \r\n\r\nSay you have the following application project: \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Library\\Library.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nAnd the following library project; \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\t<NoWarn>NU1605</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"newtonsoft.json\" Version=\"6.0.4\" />  \r\n  </ItemGroup>\r\n\t\r\n  <ItemGroup>\r\n\t<PackageReference Include=\"NuGet.Packaging\" Version=\"5.11.5\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIf you restore these projects in Visual Studio, you'd get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/612c7d72-a693-48c0-b1e2-50147a408a7f)\r\n\r\nYet, if you open the PM UI, you get: \r\n\r\n![image](https://github.com/NuGet/Home/assets/2878341/ddc62799-4633-4520-a41c-c459f3922186)\r\n\r\nIt inconsistent with what restore shows\r\n\r\nFor all these examples, there is an inconsistency. \r\n\r\n- dotnet list package --include-transitive shows all transitive packages\r\n- Solution Explorer shows all transitive packages (on demand, you need to expand them).\r\n- Inconsistent with restore\r\n\n\n### Desired Behavior\n\nShow all transitive packages, regardless of how they were installed.\r\n\r\nThe current behavior leads to inconsistency among Package Manager UI, Solution Explorer, dotnet list package and restore itself.\r\nThe behavior should be aligned.\n\n### Additional Context\n\n_No response_"},{"Id":"40632732922","Type":"IssuesEvent","CreatedAt":"2024-07-31T17:18:26","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13663","RelatedDescription":"Opened issue \"VS restore won't respect project prefix in the lock file\" (#13663) at NuGet/Home","RelatedBody":"Internal ticket: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2172224\r\n\r\nThis is a weird bug, when you are using lock files and have a `ProjectA` referencing `ProjectB` **and add a prefix in the `Directory.Build.props`** with a `PackageReference` to Nugetizer, the lock file is going to produce different outputs depending on where restore was made.\r\n\r\nVS will output something like this:\r\n\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"referencedproject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhile doing a `dotnet restore` it will result in:\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"net8.0\": {\r\n      \"A.Prefix.ReferencedProject\": {\r\n        \"type\": \"Project\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExample Directory.Build.props:\r\n\r\n```xaml\r\n<Project>\r\n  <PropertyGroup>\r\n    <LangVersion>latest</LangVersion>\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n\r\n    <AssemblyPreffix Condition=\"$(AssemblyPreffix) == ''\">A.Prefix</AssemblyPreffix>\r\n    <AssemblyName Condition=\"$(AssemblyName) == ''\">$(MSBuildProjectName)</AssemblyName>\r\n    <AssemblyName Condition=\"!$(AssemblyName.StartsWith(AssemblyPreffix))\">$(AssemblyPreffix).$(AssemblyName)</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"!$(MSBuildProjectName.Contains('ReferencedProject'))\">\r\n    <ProjectReference Include=\"..\\ReferencedProject\\ReferencedProject.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nExample ReferencedProject.csproj:\r\n\r\n```xaml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGetizer\" Version=\"*\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```"},{"Id":"40616163861","Type":"IssuesEvent","CreatedAt":"2024-07-31T09:03:22","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13662","RelatedDescription":"Opened issue \"Fail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx\" (#13662) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet SDK 9.0.100-rc.1.24380.5\n\n### Worked before?\n\nIt’s not a regression since this is a new feature.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\t[Patch dotnet  SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) (patch 9.0.1xx with Nupkgs from Dev latest). \r\n2.\tOpen a command prompt (called prompt1), go to the PatchedSDK folder and create a .NET SDK project with command `dotnet new console  -n NetCoreConsole `\r\n3.\tIn the solution folder, create a file named nuget.config with the following content: \r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n<configuration> \r\n  <packageSources> \r\n    <clear /> \r\n    <add key=\"mySource\" value=\"https://127.0.0.1:44444/v3/index.json\"/> \r\n  </packageSources> \r\n</configuration>\r\n```\r\n4.\tOpen the .csproj file for your project and insert the following package reference within an ItemGroup: \r\n```\r\n<ItemGroup> \r\n  <PackageReference Include=\"abcdefghijkl\" Version=\"1.0.0\" /> \r\n</ItemGroup> \r\n```\r\n5.\tOpen a second command prompt (called prompt2), go to the PatchedSDK folder and build the server by running:  \r\n`dotnet build   …Entropy\\filebackedserver\\filebackedserver.csproj `\r\n6.\tStart the local server by executing: \r\n`dotnet run --project  ….Entropy\\filebackedserver\\filebackedserver.csproj `\r\n\r\n#### Expected Result:\r\nSucceed to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n\r\n#### Actual Result:\r\nFail to run the ‘filebackedserver’ project by running command ‘dotnet run --project’ with patched .NET SDK 9.0.1xx.\r\n![image](https://github.com/user-attachments/assets/b231ecdb-9fa9-4fbc-80b4-13488cb285f5)\r\n#### Note:\r\n1.The repro rate: 100%.\r\n2.It should be fixed since NuGet Dev latest matches .NET SDK 9.0 now and the failure would block the following step of the test case 'TLSCertificateValidation'.\n\n### Verbose Logs\n\n_No response_"},{"Id":"40594577036","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:16:26","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13498","RelatedDescription":"Closed issue \"Add documentation for `allowInsecureConnections` option\" (#13498) at NuGet/Home","RelatedBody":"Add documentation for `allowInsecureConnections` option in the following commands\r\n- `nuget add`\r\n- `nuget update`"},{"Id":"40594541380","Type":"IssuesEvent","CreatedAt":"2024-07-30T16:15:16","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13502","RelatedDescription":"Closed issue \"Add documentation for NU1302 \" (#13502) at NuGet/Home","RelatedBody":"Add documentation for NU1302 "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-08-02T03:30:18.3746589Z","RunDurationInMilliseconds":1039}