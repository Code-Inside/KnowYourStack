{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33808750114","Type":"IssuesEvent","CreatedAt":"2023-12-02T00:38:08","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13063","RelatedDescription":"Opened issue \"PM UI Scrolling no longer loads additional packages.\" (#13063) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.8.34309.116\n\n### Worked before?\n\n17.7.7\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Open the PM UI. \r\n2. Scroll down to the of the list. \n\n### Verbose Logs\n\n_No response_"},{"Id":"33807243986","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:57:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9824","RelatedDescription":"Closed issue \"Port static graph restore to NuGet.exe\" (#9824) at NuGet/Home","RelatedBody":"Along that, consider where moving nuget.exe to servergc is a good idea. \r\nThis *could* become separate tasks, but I'll leave that to implementer :) "},{"Id":"33807200533","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:54:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8458","RelatedDescription":"Closed issue \"Improve the NU1605 warning message\" (#8458) at NuGet/Home","RelatedBody":"A WIP PR already in https://github.com/NuGet/NuGet.Client/pull/2348\r\n\r\nOther customer reports; https://developercommunity.visualstudio.com/content/problem/653804/nu1605-detected-package-downgrade-microsoftapplica.html"},{"Id":"33807162356","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:52:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10204","RelatedDescription":"Closed issue \"Allocation Spike/ GC Pause: NuGet.Client.ManagedCodeConventions.TargetFrameworkName_NearestCompareTest\" (#10204) at NuGet/Home","RelatedBody":"Identified as an allocation problem in [AzDO](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1064825)"},{"Id":"33806823383","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:32:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5212","RelatedDescription":"Closed issue \"NuGet incorrectly classifies UWP as .NET Standard 1.3 instead of .NET Standard 1.4\" (#5212) at NuGet/Home","RelatedBody":"I'm hoping that this is the right place to raise this issue, and apologize and beg direction if it isn't.\r\n\r\nIn [the official \"release article\" for .NET Standard](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/), Microsoft includes a char wherein the compatibility of each .NET platform is charted against its implemented version of .NET Standard:\r\n\r\n<img src=\"https://wpcf.neosmart.net/20170508165849/NET-Standard-support.png\" />\r\n\r\nAccording to that chart, UWP is a valid .NET Standard 1.4 target. However, the NuGet package manager module shipping in Visual Studio 2017 incorrectly considers UWP 10.0 to be a .NET Standard *1.3* target, which means it refuses to install any packages built against .NET Standard 1.4 (though they *can* be manually referenced/installed without changing a thing in the project settings, so it is a NuGet/PM issue and not a VS2017 issue).\r\n\r\nFor example, our project [Unicode.net](https://github.com/neosmart/unicode.net) has been published on NuGet as [version 0.1](https://www.nuget.org/packages/Unicode.net/0.1.0), built against .NET Standard 1.4 (amongst others), and [as version 0.1.1](https://www.nuget.org/packages/Unicode.net/0.1.1), built against .NET Standard 1.3, (amongst others).\r\n\r\nAttempting to install version 0.1 (.NET Standard 1.4) in a modified VS2017 project (that's another bug, see #5213) targeting UWP10, results in the following:\r\n\r\n    PM> Install-package Unicode.net -version 0.1.0\r\n      GET https://api.nuget.org/v3/registration1-gz/unicode.net/index.json\r\n      OK https://api.nuget.org/v3/registration1-gz/unicode.net/index.json 46ms\r\n    Restoring packages for C:\\Users\\Mahmoud\\git\\AsyncLock\\AsyncLock\\AsyncLock.csproj...\r\n    Install-package : Package Unicode.net 0.1.0 is not compatible with netstandard1.3 (.NETStandard,Version=v1.3). Package Unicode.net 0.1.0 supports:\r\n      - net20 (.NETFramework,Version=v2.0)\r\n      - net30 (.NETFramework,Version=v3.0)\r\n      - net35 (.NETFramework,Version=v3.5)\r\n      - net40 (.NETFramework,Version=v4.0)\r\n      - net45 (.NETFramework,Version=v4.5)\r\n      - netstandard1.4 (.NETStandard,Version=v1.4)\r\n    At line:1 char:1\r\n    + Install-package Unicode.net -version 0.1.0\r\n    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n        + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n     \r\n\r\nBut version 0.1.1 (.NET Standard 1.3) installs just fine:\r\n    PM> Install-Package Unicode.net -version 0.1.1\r\n      GET https://api.nuget.org/v3/registration1-gz/unicode.net/index.json\r\n      OK https://api.nuget.org/v3/registration1-gz/unicode.net/index.json 37ms\r\n    Restoring packages for C:\\Users\\Mahmoud\\git\\AsyncLock\\AsyncLock\\AsyncLock.csproj...\r\n    Installing NuGet package Unicode.net 0.1.1.\r\n    Committing restore...\r\n    Writing lock file to disk. Path: C:\\Users\\Mahmoud\\git\\AsyncLock\\AsyncLock\\obj\\project.assets.json\r\n    Restore completed in 105.93 ms for C:\\Users\\Mahmoud\\git\\AsyncLock\\AsyncLock\\AsyncLock.csproj.\r\n    Successfully installed 'Unicode.net 0.1.1' to AsyncLock\r\n    Restoring packages for C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\project.json...\r\n    Committing restore...\r\n    Lock file has not changed. Skipping lock file write. Path: C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\project.lock.json\r\n    Restore completed in 1.48 sec for C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\WinMessageUwp.csproj.\r\n    Executing nuget actions took 1.85 sec\r\n    Time Elapsed: 00:00:02.0272786\r\n\r\nAs far as I can tell, this is a bug and NuGet/PM needs to be updated to treat UWP10.0 targets as valid .NET Standard 1.4 targets."},{"Id":"33806799036","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:31:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5213","RelatedDescription":"Closed issue \"NuGet/PM parsing \"UAP10\" or \"UAP10.0\" as \"10.0.0.0\", complaining it is less than \"10.0.1024.0\" which is the actual minimum\" (#5213) at NuGet/Home","RelatedBody":"Once again, I'm hoping that this is the right place to raise this issue, and apologize and beg direction if it isn't.\r\n\r\nVisual Studio 2017 projects (and previous versions, for what its worth) targeting UWP are created including the following in the `.csproj`:\r\n\r\n    <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>\r\n    <TargetPlatformVersion Condition=\" '$(TargetPlatformVersion)' == '' \">10.0.15063.0</TargetPlatformVersion>\r\n    <TargetPlatformMinVersion>10.0.1024.0</TargetPlatformMinVersion>\r\n\r\nThere is no `TargetPlatformMinVersion` below `10.0.1024.0` because that's the RTM release of Windows 10.\r\n\r\nAttempting to install a NuGet package via the Package Manager for such a project results in the following error:\r\n\r\n\tInstall-Package : Project WebAllowedObjects is not compatible with uap10.0 (UAP,Version=v10.0). Project WebAllowedObjects supports: uap10.0.1024 (UAP,Version=v10.0.1024)\r\n\tAt line:1 char:1\r\n\t+ Install-Package Unicode.net\r\n\t+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n\t    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n\t \r\n\tInstall-Package : One or more projects are incompatible with UAP,Version=v10.0.\r\n\tAt line:1 char:1\r\n\t+ Install-Package Unicode.net\r\n\t+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n\t    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n\t \r\n\r\nIt seems that NuGet/PM is doing a direct comparison between the latter part of \"UAP10\" and the `TargetPlatformMinVersion`, and erroring out because the interpreted version `10.0.0.0` derived from \"UAP10.0\" is less than the `TargetPlatformMinVersion` of `10.0.1024.0`.\r\n\r\nManually editing the `csproj` file and changing  `TargetPlatformMinVersion`  to the following:\r\n\r\n    <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>\r\n    <TargetPlatformVersion Condition=\" '$(TargetPlatformVersion)' == '' \">10.0.15063.0</TargetPlatformVersion>\r\n    <TargetPlatformMinVersion>10.0.0.0</TargetPlatformMinVersion>\r\n\r\nCauses the Package Manager installation to succeed:\r\n\r\n\tPM> Install-Package Unicode.net\r\n\t  GET https://api.nuget.org/v3/registration1-gz/unicode.net/index.json\r\n\t  OK https://api.nuget.org/v3/registration1-gz/unicode.net/index.json 16ms\r\n\tRestoring packages for C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\project.json...\r\n\tCommitting restore...\r\n\tWriting lock file to disk. Path: C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\project.lock.json\r\n\tRestore completed in 1.48 sec for C:\\Users\\Mahmoud\\git\\WinMessage\\WinMessageUwp\\WinMessageUwp.csproj.\r\n\tSuccessfully installed 'Unicode.net 0.1.1' to WinMessageUwp\r\n\tExecuting nuget actions took 1.03 sec\r\n\tTime Elapsed: 00:00:02.9321985\r\n\tPM> \r\n\r\nI'm not sure *why* NuGet is trying to do a version comparison at all, let alone between build/revision fields of the expanded version string. UAP10 is an alias for UAP10.0, which should just be mapped to its supported .NET Standard version (1.4, per #5212), and that should be used to determine whether or not a package is supported.\r\n\r\nIf NuGet/PM is determined to use version comparison, the partial version number \"10.0\" derived from the \"UAP10.0\" alias for \"UAP10\" (which, in turn, is an alias for \"UWP\") should be interpreted as \"10.0.\\*.\\*\" and **not** as a hard \"10.0.0.0\" which would fall under the project's `TargetPlatformMinVersion` value."},{"Id":"33806321855","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:08:03","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13061","RelatedDescription":"Closed issue \"`LockFileTargetLibrary` doesn't expose `msbuildProject` when `type` is `project`\" (#13061) at NuGet/Home","RelatedBody":"When my project.assets.json contains this project as a library:\r\n\r\n```\r\n    \"MSBuild.StructuredLogger/1.0.0\": {\r\n      \"type\": \"project\",\r\n      \"path\": \"../StructuredLogger/StructuredLogger.csproj\",\r\n      \"msbuildProject\": \"../StructuredLogger/StructuredLogger.csproj\"\r\n    },\r\n```\r\n\r\nand I get the `LockFileTargetLibrary` object for it via the API, I don't see a way to get at the `path` or `msbuildProject` via the API.\r\n\r\nDo I need to read the raw Json to obtain it?"},{"Id":"33806285165","Type":"IssuesEvent","CreatedAt":"2023-12-01T22:06:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13040","RelatedDescription":"Closed issue \"[Bug Bash] An error “Type universe cannot resolve assembly: System.Runtime” occurs when uninstalling the top-level package “Microsoft.NETCore.UniversalWindowsPlatform” whose transitive package should not be uninstalled\" (#13040) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.9.0.45\n\n### Worked before?\n\nIt also reproes on 17.6 (D17.6\\34302.98) & 16.11 (D16.11\\34301.259)\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1.\tCreate a C# UWP project in VS and open the PM UI of the project.\r\n2.\tRight-click the project in Solution Explorer and select “Manage NuGet Packages…” menu item to open PM UI.\r\n3.\tGo to “Installed” tab and uninstall the top-level package: “Microsoft.NETCore.UniversalWindowsPlatform” whose transitive package should not be uninstalled.\r\n4.\tBuild the project.\r\n\r\n#### Expected:\r\nIn step3 NuGet should remind user that the top-level package should not be uninstalled since its transitive package: “NETStandard.Library” (which depends on package “System.Runtime”) should not be uninstalled. [At least warn people the uninstallation would bring error and how to resolve it].\r\n\r\n#### Actual:\r\nNo warning is provided in step3 and there is an error “Type universe cannot resolve assembly: System.Runtime” in the Error List window after step4 as below. And the error message doesn’t tell people how to resolve it.\r\n![image](https://github.com/NuGet/Home/assets/20632625/3973cdef-679a-4f5e-b765-fb807392b173)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33805860477","Type":"IssuesEvent","CreatedAt":"2023-12-01T21:46:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13048","RelatedDescription":"Reopened issue \"[Bug]: Building test project with only one framework causes NU1701 warning on different one\" (#13048) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#9432**\r\n- Please respond to @msmolka.\r\n\r\n---\r\n\r\n_From @msmolka on Friday, November 17, 2023 7:19:59 AM_\r\n\r\n### Issue Description\n\nI have simple test project: See attached file\r\nit is multi target with one eol .dotnet version 5\r\n\r\n```xml\r\n<TargetFrameworks>net8.0;net462;net5.0</TargetFrameworks>\r\n```\r\n\r\nI've added package:\r\n\r\n```xml\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.Extensions.TimeProvider.Testing\" Version=\"8.0.0\" />\r\n    </ItemGroup>\r\n```\r\n\r\nnow building project reports warning on ALL 3 target versions. If I remove .net5 - all is correct\r\nif I add it reports warning\r\n\r\neven running simple command with forcing build only for .net 8 produces nu1701 warning.\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\r\n\r\n\r\n[TestMultiTarget.zip](https://github.com/dotnet/msbuild/files/13388533/TestMultiTarget.zip)\r\n\n\n### Steps to Reproduce\n\nRun attached repo with framework 8\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\n\n### Expected Behavior\n\nWarning only appears when building target framework 5 not any other supported ones.\n\n### Actual Behavior\n\nWarning is produced even for supported frameworks:\r\n\r\n```\r\nwarning NU1701: Package 'Microsoft.Extensions.TimeProvider.Testing 8.0.0' was restored using '.NETF \r\nramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project tar \r\nget framework 'net5.0'. This package may not be fully compatible with your project. [TargetFramework=net8.0]\r\n\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-02T03:30:20.4942887Z","RunDurationInMilliseconds":1123}