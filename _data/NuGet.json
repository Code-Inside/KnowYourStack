{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12674942013","Type":"IssuesEvent","CreatedAt":"2020-06-18T23:59:16","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8062","RelatedDescription":"Opened issue \"Investigate blob storage retries in Catalog2Registration\" (#8062) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nCatalog2Registration should have retries on Blob Storage. This exception was logged:\r\n\r\n```\r\n\"Job Failed to Run\": \"Microsoft.WindowsAzure.Storage.StorageException: The client could not finish the operation within specified timeout. ---> System.TimeoutException: The client could not finish the operation within specified timeout.\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.WindowsAzure.Storage.Core.Executor.Executor.EndExecuteAsync[T](IAsyncResult result) in c:\\Program Files (x86)\\Jenkins\\workspace\\release_dotnet_master\\Lib\\ClassLibraryCommon\\Core\\Executor\\Executor.cs:line 51\r\n   at Microsoft.WindowsAzure.Storage.Core.Util.AsyncExtensions.<>c__DisplayClass7.<CreateCallbackVoid>b__5(IAsyncResult ar) in c:\\Program Files (x86)\\Jenkins\\workspace\\release_dotnet_master\\Lib\\ClassLibraryCommon\\Core\\Util\\AsyncExtensions.cs:line 121\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.AzureStorage.<OnLoadAsync>d__19.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\AzureStorage.cs:line 356\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.Storage.<LoadAsync>d__17.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\Storage.cs:line 107\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.Persistence.Storage.<LoadStringAsync>d__19.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\Persistence\\Storage.cs:line 152\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Services.Metadata.Catalog.DurableCursor.<LoadAsync>d__5.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\Catalog\\DurableCursor.cs:line 34\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Catalog2Registration.Catalog2RegistrationCommand.<ExecuteAsync>d__9.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Catalog2RegistrationCommand.cs:line 88\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Catalog2Registration.Catalog2RegistrationCommand.<ExecuteAsync>d__8.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Catalog2RegistrationCommand.cs:line 49\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.Job.<Run>d__1.MoveNext() in C:\\A\\vs2017mb-00000R-1\\_work\\3\\s\\src\\NuGet.Jobs.Catalog2Registration\\Job.cs:line 23\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Jobs.JobRunner.<JobLoop>d__14.MoveNext() in E:\\A\\_work\\3286\\s\\src\\NuGet.Jobs.Common\\JobRunner.cs:line 265\r\nRequest Information\r\nRequestID:\r\nRequestDate:\r\nStatusMessage:\r\nErrorCode:\r\n\"\r\n```\r\n\r\n### To Reproduce\r\n\r\nSee if you can put a delegating handler in the request pipeline.\r\nAdd a host name mapping for the Azure Blob Storage to 192.168.255.255. \r\n\r\n### Expected behavior\r\n\r\nThere should be retries. It's not clear that there are retries implemented in the code. Let's verify retries occur for exceptions like these."},{"Id":"12674894546","Type":"PullRequestEvent","CreatedAt":"2020-06-18T23:49:34","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8061","RelatedDescription":"Merged pull request \"Update `websocket-extensions` dependency\" (#8061) at NuGet/NuGetGallery","RelatedBody":"Bump `websocket-extensions` to the latest version. This is pulled in transitively by the `grunt-contrib-watch` development dependency. I verified this change by ensuring `grunt` still ran fine.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/network/alert/src/Bootstrap/package-lock.json/websocket-extensions/open\r\nAddresses https://github.com/nuget/engineering/issues/3231"},{"Id":"12674367436","Type":"IssuesEvent","CreatedAt":"2020-06-18T22:16:25","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/3622","RelatedDescription":"Closed issue \"[Statistics] Reduce DB size by removing unused data - edge server IP\" (#3622) at NuGet/NuGetGallery","RelatedBody":"### Impact on database\r\n\r\nA database size reduction could be achieved totalling **46,284.26 MB** (or 45.2 GB)!\r\n\r\nRemoving these indices will also improve performance of insert/delete operations against the `[dbo].[Fact_Download]` and `[dbo].[Fact_Dist_Download]` tables.\r\n\r\nIn addition, we generate less churn on the data by avoiding clean-up operations.\r\n\r\nThe following database objects would become obsolete:\r\n\r\n* Table `[dbo].[Fact_IpAddress]` (size = 3.22 MB)\r\n* Table column `[dbo].[Fact_Download].[Fact_EdgeServer_IpAddress_Id]` (size = 2,585.75 MB)\r\n* Table column `[dbo].[Fact_Dist_Download].[Fact_EdgeServer_IpAddress_Id]` (size = 23.63 MB)\r\n* Stored Procedure `[dbo].[CleanupFactIpAddress]`\r\n* Stored Procedure `[dbo].[EnsureIpAddressFactsExist]`\r\n* SQL Type `[dbo].[IpAddressFactTableType]`\r\n* Non-clustered index `[dbo].[Fact_Download].[Fact_Download_NCI_EdgeServer_IpAddress]` (size = 43,278.21 MB)\r\n* Non-clustered index `[dbo].[Fact_Dist_Download].[Fact_Dist_Download_NCI_EdgeServer_IpAddress]` (size = 392.80 MB)\r\n* Non-clustered index `[dbo].[Fact_IpAddress].[IX_Fact_IpAddress_UniqueIndex]` (size = 672 KB)\r\n\r\n### Impact on jobs\r\n\r\nThe `Stats.ImportAzureCdnStatistics` job would no longer need to deal with edgeserver IP-address data.\r\n\r\nWe could:\r\n\r\n* avoid the need to check whether an EdgeServer IP-address already exists, and if not, create it during import;\r\n* avoid the need to retain already imported EdgeServer IP-addresses into in-memory cache;\r\n* reduce complexity of import by no more linking EdgeServer IP-address identifiers to the download facts."},{"Id":"12674331055","Type":"IssuesEvent","CreatedAt":"2020-06-18T22:10:53","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8045","RelatedDescription":"Closed issue \"Unable to change email address due to old Nuget/new MSA unification glitch\" (#8045) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nMy account email address is at grantb.net, but my Login account is at connamara.com (email usernames withheld from this bot-readable text). When I view my Account Settings (see screenshot), I see both these email addresses on the same page: \"@grantb.net\" is under \"Email Address\", and \"@connamara.com\" is under Login Account.\r\n\r\nI tried to change my email address to \"@connamara.com\", but I get \"this address is already in use\". Yeah, I know it is, BY ME, ON THIS ACCOUNT.\r\n\r\nI think this all stems from when Nuget used to be an independent site. I think I registered it originally with \"@grantb.net\", and then when it was absorbed by the MSA system, my account was merged with a \"@connamara.com\" MSA account. Is there some other \"ghost\" account with the same email? Can this be resolved somehow so I can remove my personal (@grantb.net) email from this account and ONLY use my work (@connamara.com) address?\r\n\r\n### To Reproduce\r\n1. Login as me (with @grantb.net address)\r\n2. Try to change email address to my @connamara.com address\r\n3. Witness nonsensical failure\r\n\r\n### Expected behavior\r\nMy login address will be changed to my @connamara.com address\r\n\r\n### Screenshots\r\nAttached.\r\n\r\n<img width=\"1285\" alt=\"Screen Shot 2020-06-13 at 22 31 17\" src=\"https://user-images.githubusercontent.com/237288/84584089-0ce9cc00-adc6-11ea-8504-2f54427f3e36.png\">\r\n\r\n![Screen Shot 2020-06-13 at 22 34 07](https://user-images.githubusercontent.com/237288/84584156-94373f80-adc6-11ea-800f-649d08fee9a5.png)\r\n\r\n\r\n### Additional Information\r\nI submitted this as a support request on May 4 (can't remember what form I used to do this, but I did get an email confirmation from support@nuget.org).  No response.\r\n\r\nIf there is a more appropriate place for this report, please let me know."},{"Id":"12673638921","Type":"PullRequestEvent","CreatedAt":"2020-06-18T20:39:58","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8061","RelatedDescription":"Opened pull request \"Update `websocket-extensions` dependency\" (#8061) at NuGet/NuGetGallery","RelatedBody":"Bump `websocket-extensions` to the latest version. This is pulled in transitively by the `grunt-contrib-watch` development dependency. I verified this change by ensuring `grunt` still ran fine.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/network/alert/src/Bootstrap/package-lock.json/websocket-extensions/open\r\nAddresses https://github.com/nuget/engineering/issues/3231"},{"Id":"12673537727","Type":"PullRequestEvent","CreatedAt":"2020-06-18T20:28:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8060","RelatedDescription":"Opened pull request \"Don't track the package push failure if the client has disconnected\" (#8060) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/8022\r\n\r\nI was unable to reproduce the issue with many wild attempts (local devbox, app service directly, APIM, custom HTTP client implementation, raising firewall in the middle of request, killing connection via external tools, etc) but from reading online this seems like the recommended implementation. See https://stackoverflow.com/questions/4772597 for some recommendations. We can't use the cancellation token approach because the API that is throwing does not accept a token. It's this line that throws:\r\nhttps://github.com/NuGet/NuGetGallery/blob/84ea5890b77e79b1f218521f2c031f8ee6c311f5/src/NuGetGallery/Controllers/ApiController.cs#L984"},{"Id":"12672614581","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:41:25","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8059","RelatedDescription":"Opened issue \"Add advanced search UI to Gallery\" (#8059) at NuGet/NuGetGallery","RelatedBody":"Create the designed UI in the Gallery side for advanced search"},{"Id":"12672595301","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:39:17","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8058","RelatedDescription":"Opened issue \"Add package type filtering\" (#8058) at NuGet/NuGetGallery","RelatedBody":"Add support for package type filtering to the search service v2 endpoint"},{"Id":"12672574438","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:36:54","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8057","RelatedDescription":"Opened issue \"Add downloads sorting to the Search service\" (#8057) at NuGet/NuGetGallery","RelatedBody":"Add total download count sorting to the search service endpoint"},{"Id":"12672555774","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:34:45","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8056","RelatedDescription":"Opened issue \"Rebuild Azure Search Index\" (#8056) at NuGet/NuGetGallery","RelatedBody":"Rebuild the index to be able to enable future advanced search features."},{"Id":"12672534839","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:32:22","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8055","RelatedDescription":"Opened issue \"Make TotalDownloadCount sortable in Search Service\" (#8055) at NuGet/NuGetGallery","RelatedBody":"Make the field sortable to be able to rebuild the search index to support future changes "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12676294636","Type":"IssuesEvent","CreatedAt":"2020-06-19T04:41:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5722","RelatedDescription":"Closed issue \"Auto Restore and Solution Restore should fail immediately when consent is not granted.\" (#5722) at NuGet/Home","RelatedBody":"OnBuild restore fail immediately when consent is not granted.\r\n\r\nBut Auto Restore and Solution Restore still start a restore job and fail in the restore job.\r\n\r\nThe reason we do that is we need to raise the missing package bar for packages.config.\r\n\r\nOpen question is do we still need to raise missing package bar when restore is disabled.\r\n\r\nOnbuild restore doesn't do that in current design.\r\n\r\n"},{"Id":"12674397581","Type":"PullRequestEvent","CreatedAt":"2020-06-18T22:21:05","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/9699","RelatedDescription":"Opened pull request \"Add prerelease option\" (#9699) at NuGet/Home","RelatedBody":"Design for new prerelease option in dotnet.exe add "},{"Id":"12672725001","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:53:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9698","RelatedDescription":"Opened issue \"NU1603 can be too noisy in a diamond dependency case, when the min requested version is not available and is not the `best version`\" (#9698) at NuGet/Home","RelatedBody":"From @jasonmalinowski \r\n\r\nPackage â€˜A.Extrasâ€™ at Version 1.1\r\n               This depends on A.Core >= 1.1 \r\nPackage â€˜Bâ€™ at Version 2.0\r\n               This depends on A.Core >= 1.0.1\r\n\r\nA.Core 1.0.1 canâ€™t be found in any feed weâ€™re referencing, so we get a NU1603. If we didnâ€™t have a reference to A.Extras Iâ€™d understand that; but since weâ€™re also referencing A.Extras thatâ€™s going to demand a higher version of A.Core anyways, it seems whether 1.0.1 exists or not is moot â€“ a higher version will be picked regardless.\r\n\r\nfrom @nkolev92 \r\n\r\nI postulated that once when reading related code in that area. \r\nIâ€™m not sure if it was added on purpose. \r\nIt does feel kind of noisy though. While missing lower boundaries are bad, warning in this scenario is too aggressive.\r\n\r\nfrom @anangaur \r\n\r\nAgree. This should not have been a warning to begin with. This is general dependency resolution."},{"Id":"12672425700","Type":"IssuesEvent","CreatedAt":"2020-06-18T18:20:04","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9645","RelatedDescription":"Closed issue \"Missing file global.json entry in NuGet.sln file\" (#9645) at NuGet/Home","RelatedBody":"global.json file shown on attached image doesn't exist on `src\\NuGet.Core\\global.json` path.\nMaybe be better to remove this entry from solution file.\n![image.png](https://images.zenhubusercontent.com/5eb1d84a3cd56675c3efe510/497cfa30-99f7-4451-aee7-611a2573d480)"},{"Id":"12667161769","Type":"IssuesEvent","CreatedAt":"2020-06-18T10:12:05","Actor":"AlexPykavy","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9697","RelatedDescription":"Opened issue \"ExcludeVersion switch breaks installating\" (#9697) at NuGet/Home","RelatedBody":"Hello,\r\n\r\nWe use NuGet packages to store our internal tools. During the installation of them, we have encountered the following issue: \"if you are installing packages from their own NuGet sources one by one via `nuget.exe install` command with `-ExcludeVersion` switch passed, it doesn't work\"\r\n\r\nI have implemented a simple PowerShell script which reproduces the issue:\r\n```\r\nParam(\r\n\t$packagesNames = @(\"A\", \"B\")\r\n)\r\n\r\n\r\nfunction Reset-Directory($Path) {\r\n\tif (Test-Path -Path $Path) {\r\n\t\tRemove-Item -Path \"$path\" -Recurse -Force\r\n\t}\r\n\r\n\tNew-Item -Path \"$path\" -ItemType Directory\r\n}\r\n\r\n$pathToNugetExe = Join-Path $PSScriptRoot \"nuget.exe\"\r\n\r\n# Download nuget.exe\r\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12\r\n\r\n$nugetUrl = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\r\nInvoke-WebRequest -Method Get -Uri $nugetUrl -OutFile $pathToNugetExe\r\n\r\n# Pack & Push packages\r\n$pathToSandbox = \"$PSScriptRoot\\Sandbox\"\r\nReset-Directory -Path \"$pathToSandbox\"\r\nPush-Location \"$pathToSandbox\"\r\n\r\n$nuspecTemplate = @\"\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<package>\r\n\t<metadata>\r\n\t\t<id>{0}</id>\r\n\t\t<version>1.0.0</version>\r\n\t\t<title>Title</title>\r\n\t\t<authors>Authors</authors>\r\n\t\t<owners>Owners</owners>\r\n\t\t<description>Description</description>\r\n\t\t<releaseNotes>1.0 release</releaseNotes>\r\n\t\t<copyright>Copyright 2020</copyright>\r\n\t\t<tags>nuget</tags>\r\n\t\t<summary>Summary</summary>\r\n\t</metadata>\r\n\t<files>\r\n\t\t<file src=\"{1}\" />\r\n\t</files>\r\n</package>\r\n\"@\r\n\r\n$packagesNames | Foreach-Object {\r\n\t# Create .nuspec and its content\r\n\t\"$_\" | Out-File \"$_.txt\"\r\n\t$nuspecTemplate -f \"$_\", \"$_.txt\" | Out-File \"$_.nuspec\"\r\n\r\n\t# Pack a package\r\n\t& $pathToNugetExe pack \"$_.nuspec\"\r\n\r\n\t# Create source directory\r\n\t$pathToSource = \"$PSScriptRoot\\$_\"\r\n\tReset-Directory -Path \"$pathToSource\"\r\n\r\n\t# Push a package\r\n\t& $pathToNugetExe push \"$_.1.0.0.nupkg\" -Source \"$pathToSource\"\r\n}\r\n\r\nPop-Location\r\n\r\n\r\n# Install packages\r\n$pathToPackages = \"$PSScriptRoot\\packages\"\r\nReset-Directory -Path \"$pathToPackages\"\r\n\r\n$packagesNames | Foreach-Object {\r\n\t$pathToSource = \"$PSScriptRoot\\$_\"\r\n\r\n\t# Push a package\r\n\t& $pathToNugetExe install \"$_\" -Version \"1.0.0\" -Source \"$pathToSource\" -OutputDirectory \"$pathToPackages\" -ExcludeVersion\r\n}\r\n```\r\n\r\nHere is an error:\r\n![image](https://user-images.githubusercontent.com/32162928/85008182-483d1f80-b165-11ea-8515-7d51f6de80fb.png)\r\n\r\nIf you will remove the `-ExcludeVersion` switch from the script it will work.\r\n\r\nCan you please help with identifying is it expected behavior or not?\r\n\r\nThanks in advance."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-19T05:30:42.4210999Z","RunDurationInMilliseconds":1743}