{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"30276479772","Type":"PullRequestEvent","CreatedAt":"2023-07-07T20:11:54","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9532","RelatedDescription":"Opened pull request \"Password reset redirects to password login page.\" (#9532) at NuGet/NuGetGallery","RelatedBody":"# Changes\r\n* Updated link to password login page.\r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9467"},{"Id":"30127329296","Type":"PullRequestEvent","CreatedAt":"2023-06-30T21:05:57","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9509","RelatedDescription":"Merged pull request \"Add revoke button to API keys page\" (#9509) at NuGet/NuGetGallery","RelatedBody":"* Revoke button added for api keys.\r\n* Existing revocation mechanism used.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9426\r\n\r\nedit by @joelverhagen -- added screenshot\r\n![image](https://github.com/NuGet/NuGetGallery/assets/94054/7f310b08-f091-4dba-908e-9d614a4bea86)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/102933/12e07f2f-60fa-480c-81af-0257d5537b59)\r\n"},{"Id":"30102981188","Type":"IssuesEvent","CreatedAt":"2023-06-29T21:12:57","Actor":"SoftCircuits","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9531","RelatedDescription":"Opened issue \"[NuGet.org Bug]: More Download Count Issues?\" (#9531) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nMy SoftCircuits.Wordify package has been climbing quickly in download counts relative to my other packages. But it seemed to suddenly stopped climbing.\r\n\r\nAs I review the package information, it says the package averages 11 downloads per day. But the download count shown on nuget.org has increased about 10 over the past month.\r\n\r\nI understand that people just may have suddenly just lost interest in my package. But then why does it say I'm averaging 11 downloads per day? Clearly something is off here. And I know there has been issues with the download counts in the past.\r\n\r\nIs there anyway to get this checked?\n\n### Repro Steps\n\nView the average downloads per day vs how fast the total download count grows.\n\n### Expected Behavior\n\nI expected the total download count to grow roughly by the average daily download count each day.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"30098815051","Type":"IssuesEvent","CreatedAt":"2023-06-29T17:23:51","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9518","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Table in README markdown looks ugly due to word wrap that breaks words\" (#9518) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\n1. Table in README markdown looks ugly if some column contains a long text due to word wrap that breaks words in other columns even inside the inline code block. Compare rendered tables: Nuget https://www.nuget.org/packages/GlobRegex vs Github https://github.com/dscheg/GlobRegex\r\nGithub markdown looks good even on narrow screens. CSS to fix issue:\r\n```css\r\n.readme-common .table {\r\n  overflow: auto;\r\n  display: block;\r\n  word-break: normal;\r\n}\r\n```\r\n\r\n2. It might be better to have a horizontal scroll and turn off word wrap inside multiline code blocks, because it seems such code is hard to read, given that there are no line numbers and display of hyphens: it is not always clear whether the EOL is in the code itself or word wraping has been applied. The same example links above. CSS to fix issue: `pre code { white-space: pre; }` instead of `pre code { white-space: pre-wrap; }`\r\n\n\n### Repro Steps\n\nCreate readme for the package with:\r\n1. Table with 3 columns with a long text inside the middle column\r\n2. Multiple long lines inside multiline code block\n\n### Expected Behavior\n\n1. Table looks good even with long text in some column\r\n2. Multiline code blocks are easy to read even with long lines\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/1962268/513789fc-7d62-452b-9a10-e2e6607af536)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"30045861526","Type":"PullRequestEvent","CreatedAt":"2023-06-27T19:01:45","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9530","RelatedDescription":"Merged pull request \"FI main to dev\" (#9530) at NuGet/NuGetGallery","RelatedBody":"Bringing back binding redirect fix."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"30355204433","Type":"IssuesEvent","CreatedAt":"2023-07-11T22:44:15","Actor":"lifengl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12739","RelatedDescription":"Opened issue \"NuGetAbstraction.GetSdkResult could take out two thread pool threads in one call\" (#12739) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.6\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nThe function is written in a way that it could take out two thread pool threads in one single call. Here is the problematic piece:\r\n\r\n![image](https://github.com/NuGet/Home/assets/11638466/1a81bfbb-68e8-487a-903f-0b06db6fab8f)\r\n\r\nThis call to use Task.Result is generally forbidden inside VS, as it can easily cause deadlocks on UI thread. (The generally pattern is calling JTF.Run and await the task inside it.\r\n\r\nWhen the function is called on the thread pool. This pattern can lead poor performance as:\r\n1, Task.Run would queue the work in the current thread pool queue\r\n2, when the code runs into Task.Result, it blocks the current thread, so it will stop processing any other pending work.\r\n3, generally, the other thread pool thread takes work in the priority order of its own queue, then the global queue, and when both empty, it looks for each other's private queue. \r\n\r\nSo, the code pattern would lead the thread to be blocked, until the condition of another thread pool thread happens to have no other work to do to start the Restore task. This can lead a much longer delay, when many other works are queued in the thread pool.\r\n\r\nas the comment in the code, the Task.Run is a workaround to address the problem when this function is called on the UI thread, so we should remove this workaround when the function is not called on the UI thread, especially on the thread pool.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"30352345706","Type":"IssuesEvent","CreatedAt":"2023-07-11T20:02:09","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12738","RelatedDescription":"Opened issue \"Add #nullable enable to ProjectView.xaml.cs\" (#12738) at NuGet/Home","RelatedBody":"This is a follow up to https://github.com/NuGet/NuGet.Client/pull/5291, I decided to not do it in the same file to avoid a regression."},{"Id":"30352053609","Type":"IssuesEvent","CreatedAt":"2023-07-11T19:47:43","Actor":"lifengl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12737","RelatedDescription":"Opened issue \"Lock contention thread pool issues caused by LoadSettings not passing settingsLoadingContext to LoadSettingsForSpecificConfigs\" (#12737) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.6\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nThread pool exhaustion issue eventType=threadpool&failureHash=8c6a84c3-cc30-9e23-84e0-7b34342ef23c (PRISM)\r\n\r\nI believe the source of this problem is that LoadSettings function shown below hasn't passed settingsLoadingContext to LoadSettingsForSpecificConfigs. This leads the machine level settings file is not cached during project evaluation, so each time it is read again, and when we have multiple evaluations on the same time in the thread pool, it leads bad contention to wait on this to be read and blocks multiple threads at the same time.\r\n\r\nIt seems important to cache the machine level cache as it is commonly used.\r\n\r\n![image](https://github.com/NuGet/Home/assets/11638466/576122fd-cd0e-4578-af40-cc4234efa461)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"30349306189","Type":"IssuesEvent","CreatedAt":"2023-07-11T17:40:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12719","RelatedDescription":"Closed issue \"WalkTreeRejectNodesOfRejectedNodes constantly triggering resizes of its tracker collection\" (#12719) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1826391"},{"Id":"30348094075","Type":"IssuesEvent","CreatedAt":"2023-07-11T16:48:36","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12092","RelatedDescription":"Closed issue \"[Bug]: [Bug Bash] The hovered-on menu item background color should be grey in VS Dark theme\" (#12092) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.4.0.85\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n## Repro steps:  \r\n1. Launch VS and create a solution [e.g. C# Console App (.NET Framework 4.8.1)].\r\n2. Go to Tools | Options… | Environment | General to change the Color Theme to Dark, click “OK”.\r\n3. Open the PM UI, go to “Browse” tab, select a package in the package list, and click the arrow-down button of “Version” and “Package source” drop-down box.\r\n4. Check the background color when hovering on the menu item.\r\n\r\n## Expected:\r\nThe background color when hovering on the menu item should be grey in VS Dark theme.\r\n## Actual: \r\nThe search-box hovered-on menu has a grey background color, but “Version” and “Package source” hovered-on menu does not as below screenshot.\r\n![image](https://user-images.githubusercontent.com/71433406/190374283-8c9833f0-78bf-44ab-a5da-3a0549502da2.png)\r\n\r\n## Notes:\r\n1. It only occurs in Dark theme.\r\n2. The issue starts from Dev\\6.4.0.58.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30341474590","Type":"IssuesEvent","CreatedAt":"2023-07-11T13:01:02","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12593","RelatedDescription":"Closed issue \"nuget pack is ignoring dependencies when using PackageReference instead of packages.config - and cannot use MSBuild /t:pack\" (#12593) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n.NET 7.0\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nSimilar to issue 5979 except the proposed solution of running MSBuild /t:pack is not an option since the assembly is obfuscated after compilation, and then a nuget package is created.  MSBuild /t:pack attempts to do this as part of building which prevents the intermediate step of obfuscation.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30336833766","Type":"IssuesEvent","CreatedAt":"2023-07-11T10:05:56","Actor":"HoytRen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12736","RelatedDescription":"Opened issue \"Could not load file or assembly 'System.Runtime, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\" (#12736) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.6.1.2\n\n### Worked before?\n\nI don't know.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI create a new .net project and build the .exe and .dll.\r\n\r\nthen I try nuget.exe spec -a .\\bin\\Debug\\net7.0\\MyApp.dll\r\n\r\nIt sends out the error. I don't understand how could I don't have the assembly since I build the dll and obviously be able to run MyApp.exe.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30332693922","Type":"IssuesEvent","CreatedAt":"2023-07-11T07:35:31","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12730","RelatedDescription":"Closed issue \"NuGetAuditMode all warns about package versions that were upgraded (rejected)\" (#12730) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\n6.7\n\n### Worked before?\n\nno, new feature\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nConsider the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <NuGetAudit>true</NuGetAudit>\r\n    <NuGetAuditMode>all</NuGetAuditMode>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Packaging\" Version=\"5.11.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.JsonPatch\" Version=\"5.0.1\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis results in two warnings about two different versions of Newtonsoft.Json:\r\n\r\n> D:\\src\\test\\vulnBug\\vulnBug.csproj : warning NU1902: Package 'Newtonsoft.Json' 9.0.1 has a known moderate severity vulnerability, https://github.com/advisories/GHSA-5crp-9r3c-p9vr\r\n> D:\\src\\test\\vulnBug\\vulnBug.csproj : warning NU1902: Package 'Newtonsoft.Json' 12.0.2 has a known moderate severity vulnerability, https://github.com/advisories/GHSA-5crp-9r3c-p9vr\r\n\r\nThe package `NuGet.Packaging` has a dependency on `Newtonsoft.Json` 9.0.1, whereas `Microsoft.AspNetCore.JsonPatch` has a dependency on version `12.0.2`. If you upgrade either package to a newer version, that has a dependency on a no longer vulnerable version of `Newtonsoft.Json`, NU1902 will still since there's a part of the restore graph that rejected the lower version of Newtonsoft.Json.\n\n### Verbose Logs\n\n_No response_"},{"Id":"30331773131","Type":"IssuesEvent","CreatedAt":"2023-07-11T06:57:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12680","RelatedDescription":"Closed issue \"NuGet.Client allocates many instances of comparers\" (#12680) at NuGet/Home","RelatedBody":"Comparers are almost always immutable and well suited to reuse. A lot of code in NuGet.Client constructs a new instance when needed, then lets the GC clean it up.\r\n\r\nAdding static `Instance` members to comparers would allow them to be reused with minimal code churn.\r\n\r\nThere are some instances where comparers come from a set of values, depending upon the value of an enum (like `VersionComparison`). There can be a singleton for each, and a method to look this up efficiently at runtime when the required behaviour can vary with state.\r\n\r\nWhere possible, public constructors should be marked obsolete to discourage their futher use. Where possible, they should be made private."},{"Id":"30331608196","Type":"PullRequestEvent","CreatedAt":"2023-07-11T06:49:50","Actor":"Greybird","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12735","RelatedDescription":"Opened pull request \"Add Support excluding projects from transitive dependencies\" (#12735) at NuGet/Home","RelatedBody":"Hello,\r\n\r\nThis proposal introduces a new flag to exclude projects from the `list package` command\r\n\r\n[Rendered Proposal](https://github.com/NuGet/Home/blob/95e01febb1e5e0273780916478b591945cebc3af/proposed/2023/project-exclusion-for-transitive-dependencies.md)\r\n\r\n"},{"Id":"30321558974","Type":"IssuesEvent","CreatedAt":"2023-07-10T19:39:45","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12703","RelatedDescription":"Closed issue \"Change nuspec generation when a package project is referencing another package project\" (#12703) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, dotnet.exe\n\n### Current Behavior\n\nI have PackageA dotnet project and PackageB dotnet project in one solution. PackageB is referencing PackageA (as a project).\r\n\r\nWhen I do run `dotnet pack` what happens now is that the project reference is converted to a package reference in nuspec file like that:\r\n\r\n    <dependency id=\"PackageA\" version=\"<PackageBVersion>\" exclude=\"Build,Analyzers\" />\n\n### Desired Behavior\n\nIt feels much more natural if the behaviour is changed to:\r\n\r\n    <dependency id=\"PackageA\" version=\"<PackageAVersion>\" exclude=\"Build,Analyzers\" />\r\n\r\nsince PackageB version does really have no direct connection to PackageA.\n\n### Additional Context\n\nIf this is planned, it would be at least useful to have a possibility to affect the resulting Package A version number somehow. I have tried adding both Package reference (to specify the version) and the project reference, but that does not work so well. I get errors during restore if I use package.lock.json"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"},{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-07-12T03:30:22.6091487Z","RunDurationInMilliseconds":1117}