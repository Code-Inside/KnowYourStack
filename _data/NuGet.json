{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32997496390","Type":"PullRequestEvent","CreatedAt":"2023-10-31T23:11:42","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9722","RelatedDescription":"Merged pull request \"[FI]Merging hotfixes in main to dev\" (#9722) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"32997365309","Type":"IssuesEvent","CreatedAt":"2023-10-31T23:02:25","Actor":"DeafMan1983","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9723","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Why does it happen with my nuget package DeafMan1983.Interop.SDL2\" (#9723) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI found that it happens since incompatible issue\r\n![image](https://github.com/NuGet/NuGetGallery/assets/57066679/cd39d0e0-1121-4278-8518-e29981eec9d4)\r\n\n\n### Repro Steps\n\n1. https://www.nuget.org/packages/DeafMan1983.Interop.SDL2/1.2.1#readme-body-tab\r\n2. trying to install package into dotnet project and it happens and throws error\r\n3. Can't try to fix????\n\n### Expected Behavior\n\nCause error and incompatible I have current net7.0 and 8.0\r\n\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/57066679/5cd6e366-96d9-4040-a7e8-b1653e2ff604)\r\nIt happens - If I upload correct package DeafMan1983.Interop.SDL2.1.2.1.nupkg to nuget.org\r\n\r\nWhy does it happen? I never made wrong???\n\n### Additional Context and logs\n\n_No response_"},{"Id":"32994736219","Type":"PullRequestEvent","CreatedAt":"2023-10-31T20:36:53","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9722","RelatedDescription":"Opened pull request \"[FI]Merging hotfixes in main to dev\" (#9722) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"32994660631","Type":"PullRequestEvent","CreatedAt":"2023-10-31T20:33:26","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9721","RelatedDescription":"Merged pull request \"[Hotfix][GithubVulnerabilites2Db]Register config as base class with AutoFAC\" (#9721) at NuGet/NuGetGallery","RelatedBody":"Previously, the config was not properly registered with AutoFAC as its base class, failing dependency injection at runtime.\r\nThis change properly registers the config as both config classes so DI doesn't fail."},{"Id":"32994100728","Type":"PullRequestEvent","CreatedAt":"2023-10-31T20:08:32","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9712","RelatedDescription":"Merged pull request \"[Vulnerabilites]Add IVulnerabilityWriter\" (#9712) at NuGet/NuGetGallery","RelatedBody":"Update the Github Vulnerability interaction library to support IVulnerabilityWriters for writing vulnerabilities.\r\nThis is in preparation for use by the new v3 vulnerability resource updater.\r\n\r\nSpec for Vulnerabilities in V3: https://github.com/NuGet/Engineering/pull/4940"},{"Id":"32994066454","Type":"PullRequestEvent","CreatedAt":"2023-10-31T20:07:04","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9721","RelatedDescription":"Opened pull request \"[Hotfix][GithubVulnerabilites2Db]Register config as base class with AutoFAC\" (#9721) at NuGet/NuGetGallery","RelatedBody":"Previously, the config was not properly registered with AutoFAC as its base class, failing dependency injection at runtime.\r\nThis change properly registers the config as both config classes so DI doesn't fail."},{"Id":"32986636764","Type":"IssuesEvent","CreatedAt":"2023-10-31T15:32:42","Actor":"FarhanaJabbarOptimizely","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9720","RelatedDescription":"Opened issue \"[NuGet.org Bug]: \" (#9720) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI am using VS 2022 Enterprise using the following nuget feed url in package manager \r\n\r\nWhen i try to open Package manager UI and select nuget.org source to browse packages get the following error\r\n\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json\r\n\r\nIt was all working fine for so many months but now it is not working at all.\r\nI have turned off all firewall settings.  just to be sure its not the problem\r\nAlso TLS 1.2 and 1.3 enabled in IE settings. \r\nThis is really frustrating. If you could please help ASAP that would be great\n\n### Repro Steps\n\nVS 2022 Enterprise edition\r\nWindows 11\r\n.NET 6 \r\n\r\nadded NuGet.config with the following settings \r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>\r\n        <packageSources>\r\n\t\t\t<clear />\r\n            <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n            <add key=\"OptimizelyFeed\" value=\"https://nuget.optimizely.com/feed/packages.svc/\" />\r\n        </packageSources>\r\n    </configuration>\r\n\r\nOpen C# webproject \r\nOpen Package manager UI from VS \r\nselect neuget source\r\nwill see this error in the output \n\n### Expected Behavior\n\nI should be able see packages available publicly i.e. NewtonSoft etc. \n\n### Screenshots\n\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/144935980/fc249563-d323-4cd9-8dfd-3f3e9edb0372)\r\n\r\n\n\n### Additional Context and logs\n\nTime Elapsed: 00:00:00.3658246\r\n========== Finished ==========\r\n\r\n\r\n[nuget.org] Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n  An error occurred while sending the request.\r\n  The remote name could not be resolved: 'api.nuget.org'\r\n"},{"Id":"32965185789","Type":"IssuesEvent","CreatedAt":"2023-10-30T23:36:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9670","RelatedDescription":"Closed issue \"[NuGet.org Bug]: License files still exist when the package is hidden\" (#9670) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nWhen the package is hidden, the License file is still available to the public. This issue should be fixed.\r\nAs the spammers are making use of this issue to promote their spam links via nuget package.\r\nThere are lots of spammed License files in nuget. such as (https://www.nuget.org/packages/FREE-CASH-APP-MONEY-GENERATOR-CODES-UPDATED-2023/2.1.0/License)\r\nYou will find more by using google search.\r\n\n\n### Repro Steps\n\nYou will find more spammed license files using this search in google\r\nsite:nuget.org free\n\n### Expected Behavior\n\nWhen the spam package is hidden or deleted, the License file should be deleted or hidden too.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"32965185587","Type":"PullRequestEvent","CreatedAt":"2023-10-30T23:36:12","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9719","RelatedDescription":"Merged pull request \"[Hotfix] Don't index the license page and hide content when locked\" (#9719) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/9670.\r\n\r\nThe diff is best viewed when [hiding whitespace](https://github.com/NuGet/NuGetGallery/pull/9719/files?diff=unified&w=1).\r\n\r\nSummary of changes:\r\n- Add `no-index` to all license pages. I think this is the right approach. We index the \"parent\" page (per ID - version). \r\n  - We already don't index the Report abuse page, which is the other child page not requiring sign in\r\n- Hide license content when the package is locked\r\n- Hide other warnings/info messages on the package details\r\n- Unrelated: default generated assembly version to 4.4.5 to make matching release builds easier (strong name is unsolved)\r\n- Unrelated: fix minor devskim warnings \r\n- Unrelated: two super helpful warnings back to editorconfig\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/94054/7fb15cc3-6764-463e-811a-ed44abfb5c9a)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32995459929","Type":"IssuesEvent","CreatedAt":"2023-10-31T21:10:57","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12981","RelatedDescription":"Opened issue \"NuGet should not retry HTTP requests on 401 unauthorized or 403 access denied responses from private feeds\" (#12981) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nIn the NuGet Client repository, when NuGet attempts to fetch a service index for a feed and the server responds with a 401 unauthorized message or 403 access denied message, the current implementation unnecessarily retries the request. Specifically, if enhanced retry is enabled (which seems to be the default setting), the request is retried [5 times](https://github.com/NuGet/NuGet.Client/blob/b10ba996eeb40da639273848408d2628e01076f4/src/NuGet.Core/NuGet.Protocol/EnhancedHttpRetryHelper.cs#L29). Otherwise, it's retried 2 times, as seen [here](https://github.com/NuGet/NuGet.Client/blob/b10ba996eeb40da639273848408d2628e01076f4/src/NuGet.Core/NuGet.Protocol/Providers/ServiceIndexResourceV3Provider.cs#L131).\n\n### Desired Behavior\n\nThe [HttpSourceAuthenticationHandler](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpSourceAuthenticationHandler.cs) already has its own retry logic in case of incorrect credentials. Therefore, retrying an additional 5 times won't change the feed's response and only adds unnecessary load to private feed servers. I propose that we eliminate retries when a private feed response returns a 401 unauthorized or 403 access denied error.\n\n### Additional Context\n\n_No response_"},{"Id":"32991769438","Type":"IssuesEvent","CreatedAt":"2023-10-31T18:28:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12980","RelatedDescription":"Opened issue \"Allow recursive restore through non-PackageReference projects\" (#12980) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nPackageReference as a project type works best when all projects are PackageReference based. \r\n\r\nMixing PackageReference and packages.config is possible, but requires manual work. More details at https://github.com/dotnet/announcements/issues/31. \r\n\r\nWhen restoring a PackageReference project, msbuild and dotnet will restore that project and transitive PackageReference projects as well. \r\n\r\nExample: \r\n\r\nA (PackageReference) -> B (PackageReference) -> C (PackageReference)\r\n\r\nFor packages.config projects, that's not the case. \r\npackages.config project  restore support in msbuild was added in 16.5 (5.5) of Visual Studio & MSBuild. https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#restoring-packagereference-and-packagesconfig-projects-with-msbuild\r\n\r\nThe ask here is when a non-PackageReference project is restore that the graph is walked similarly as it is for PackageReference projects. \r\n\r\nExample: \r\n\r\nA (packages.config or none, example vcxproj) -> B (PackageReference)\r\nA (packages.config or none, example vcxproj) -> C (packages.config project)\r\n \n\n### Additional Context and Details\n\nThis is an internal ask by VSEng, where they'd like to be able to call msbuild /t:restore on a vcxproj project and get all of them to restore.\r\n\r\nIn their words: \r\n\r\n> allow VCXPROJ to act like dirs.proj and work as a \"passthrough project\" IE the project itself does not have any packagreferences but its dependents do.\r\n\r\n"},{"Id":"32962298746","Type":"IssuesEvent","CreatedAt":"2023-10-30T20:55:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12938","RelatedDescription":"Closed issue \"Ability to pull a NuGet package and all of its dependencies into a single directory using the command-line\" (#12938) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nNuget does a great job of pulling down packages and all their dependencies.  But the form it brings them down leaves actually putting them together into a usable directory as an out-of-scope problem.  If you're working on C# source-code, this is fine.  But if you're trying to handle an .exe that lives in a nuget package, or if you're trying to access a nuget package in Powershell or CSX script, you can't actually load it because its dependencies are outside of the module search path.  These are the cases when I *want* to use `nuget.exe` - if I just wanted the raw packages folders, I'd use normal `csproj` stuff where the compiler would handle putting together my bin folder for me.  If I'm using `nuget.exe`, I'm already trying to get stuff from nuget so I can *hack* with it.\r\n\r\nSo, a proposal, call it \"nuget deploy\".  As in \r\n\r\n```ps\r\nnuget deploy mypackagename -OutputDirectory ./packages -DeployDirectory ./bin -Framework netcore\r\n\r\nAdd-Type -path './bin/myPackageName.dll'\r\n[MyPackageClass]::StaticHelloWorld()\r\n```\r\n\r\nThis is a pretty straightforward use of Nuget.exe, and yet the amount of code it requires is very very non-trivial.  See the Tolstoy at https://stackoverflow.com/questions/39257572/loading-assemblies-from-nuget-packages\r\n\r\n### Additional Context and Details\r\n\r\nDetailed example.\r\n\r\nCurrently, if I do this:\r\n\r\n```ps\r\nnuget install Microsoft.Data.Tools.Msbuild -o ./packages\r\n```\r\n\r\nI get MsBuild and all its dependencies in `./packages`.  Which is great!  But if I try to use the copy of `SqlPackage.exe` that lives in there, I get the following:\r\n\r\n```\r\n> .\\packages\\Microsoft.Data.Tools.Msbuild.16.0.62004.28040\\lib\\net46\\SqlPackage.exe\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Data.Tools.Utilities, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n   at Microsoft.Data.Tools.Schema.CommandLineTool.Program.Main(String[] args)\r\n```\r\n\r\nwhich is sad.  I have the file, I have the dependencies, it's just I have to put them together myself.\r\n\r\n```\r\nmkdir bin -Force\r\ncp packages/*/lib/net46/* bin -Force\r\n\r\n```\r\n\r\nand then try it:\r\n\r\n```\r\n> .\\bin\\SqlPackage.exe | select-object -First 3 # we don't want the whole help doc\r\nSqlPackage: Command-line tool for creating and deploying SQL Server databases and DACPAC packages.\r\nCopyright (c) 2016 Microsoft Corporation.  All rights reserved.\r\n\r\n```\r\n\r\nSo it works if you're willing to deploy the files out of the packages folder yourself.  Nuget being able to help with this would be fantastic.\r\n\r\ndotnet.exe offers a similar service in `dotnet tool install` but it only allows things that are flagged as *tools*, and is very netcore oriented and so doesn't really work well with old framework things like nuget.exe does.\r\n\r\n```\r\n> dotnet tool install Microsoft.Data.Tools.Msbuild --tool-path ./bin\r\n\r\nC:\\Users\\zaratem\\AppData\\Local\\Temp\\fc86e76c-4d47-498e-8a10-e120aaaa7ea3\\restore.csproj : error NU1212: Invalid project-package combination for Microsoft.Data.Tools.Msbuild 16.0.62004.28040. DotnetToolReference project style\r\n can only contain references of the DotnetTool type\r\nThe tool package could not be restored.\r\nTool 'microsoft.data.tools.msbuild' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n\r\nFor more reasons, including package naming enforcement, visit https://aka.ms/failure-installing-tool\r\n```\r\n\r\nbut for anything else, `dotnet tool install` does what we'd expect - it dumps the files I want to play with in the `bin` folder with all their dependencies where it needs them for when it's loaded into memory."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-01T03:30:21.8832742Z","RunDurationInMilliseconds":1215}