{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"24237550720","Type":"PullRequestEvent","CreatedAt":"2022-09-27T01:46:56","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9255","RelatedDescription":"Opened pull request \"Add ASE regions to allowed regions\" (#9255) at NuGet/NuGetGallery","RelatedBody":"Adds ASE regions to allowed configuration list."},{"Id":"24234314359","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:19:35","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9244","RelatedDescription":"Closed issue \"[NuGet.org Bug]: can't download \"OrchardCore.Rules\" Package in China\" (#9244) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nHi,\r\n\r\nI tried to create Orchard CMS project,\r\nAdding ”OrchardCore.Application.Cms.Targets“  package, error \"not found\".\r\n![image](https://user-images.githubusercontent.com/3164300/191384840-fb7a6169-b5d7-4acb-b5d2-eaa55aa78183.png)\r\n\r\nUsing Fiddler to view the request,\r\n\r\n\"GET, https://api.nuget.org/v3-flatcontainer/orchardcore.rules/index.json” return is 404.\r\n\r\nUsing Fiddler's AutoResponder, send the correct response\r\n\r\nAnd then you see the request\r\n“GET https://api.nuget.org/v3-flatcontainer/orchardcore.rules/1.4.0/orchardcore.rules.1.4.0.nupkg” return  404.\r\n\r\n![image](https://user-images.githubusercontent.com/3164300/191384854-694004c1-1c70-44ea-a94c-786e9836123e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3164300/191384862-86244abc-f4a2-47b1-849b-0b4f6bae9598.png)\r\n\r\n\r\nhttps://github.com/OrchardCMS/OrchardCore/discussions/12455\n\n### Repro Steps\n\n1. dotnet new web \r\n2.  dotnet add package OrchardCore.Application.Cms.Targets\n\n### Expected Behavior\n\nSuccessfully adding \"OrchardCore.Application.Cms.Targets“ and compile successfully\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24233953961","Type":"PullRequestEvent","CreatedAt":"2022-09-26T20:58:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9254","RelatedDescription":"Opened pull request \"Update to ServerCommon 2.106.0 to resolve CG alerts\" (#9254) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"24178926437","Type":"PullRequestEvent","CreatedAt":"2022-09-23T06:52:51","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9253","RelatedDescription":"Merged pull request \"Add one-time message for claim id, adjust logic on temp id search\" (#9253) at NuGet/NuGetGallery","RelatedBody":"Let's fix that Claim Key message.\r\n\r\nAlso, there's a case in the search logic I wanted to filter out--if a customer uploads a package foo,  without this change it could still be viewed using https://www.nuget.org/packages/foo. This will prevent that case, as if a package has a TemporaryId, it will not be found by its actual ID."},{"Id":"24178716261","Type":"PullRequestEvent","CreatedAt":"2022-09-23T06:37:42","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9253","RelatedDescription":"Opened pull request \"Add one-time message for claim id, adjust logic on temp id search\" (#9253) at NuGet/NuGetGallery","RelatedBody":"Let's fix that Claim Key message.\r\n\r\nAlso, there's a case in the search logic I wanted to filter out--if a customer uploads a package foo,  without this change it could still be viewed using https://www.nuget.org/packages/foo. This will prevent that case, as if a package has a TemporaryId, it will not be found by its actual ID."},{"Id":"24178123489","Type":"PullRequestEvent","CreatedAt":"2022-09-23T05:46:53","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9251","RelatedDescription":"Merged pull request \"Alter landing displaypackage URL to use a temporary ID for anon uploads\" (#9251) at NuGet/NuGetGallery","RelatedBody":"- changes the post-publish URL to use the temporary ID\r\n- changes package lookup to use temporary ID first\r\n- displays temporary ID on Display Package page, while leaving persistent metadata (actual ID, version) in page titles and publish message\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/191873924-49218f24-4045-4cfc-94db-52206da465ce.png)\r\n\r\n\r\n"},{"Id":"24175869843","Type":"IssuesEvent","CreatedAt":"2022-09-23T01:35:55","Actor":"christianliebel","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9252","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Add caniuse images via bitsofco.de to trusted image domains\" (#9252) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWe are offering Blazor wrapper packages for different web APIs. There is a great service called caniuse.com that shows the availability of a particular API on different platforms. Ire Aderinokun offers a service that shows the caniuse.com status data and MDN compat data in a (static) image, e.g.:\r\n\r\nhttps://caniuse.bitsofco.de/image/async-clipboard.png → https://res.cloudinary.com/ireaderinokun/image/upload/v1663850793397/caniuse-embed/all/async-clipboard.png\r\n\r\n![](https://caniuse.bitsofco.de/image/async-clipboard.png)\r\n\r\nThus, I'd like to suggest adding either `caniuse.bitsofco.de` or the resolved version `res.cloudinary.com/ireaderinokun/*/caniuse-embed/all/*.png` to the allowlist.\n\n### Repro Steps\n\nStatus image is currently not shown:\r\n\r\n- https://www.nuget.org/packages/Thinktecture.Blazor.AsyncClipboard\r\n- https://www.nuget.org/packages/Thinktecture.Blazor.WebShare\n\n### Expected Behavior\n\nStatus image is shown.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"24175386647","Type":"PullRequestEvent","CreatedAt":"2022-09-23T00:39:46","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9251","RelatedDescription":"Opened pull request \"Alter landing displaypackage URL to use a temporary ID for anon uploads\" (#9251) at NuGet/NuGetGallery","RelatedBody":"- changes the post-publish URL to use the temporary ID\r\n- changes package lookup to use temporary ID first\r\n- displays temporary ID on Display Package page, while leaving persistent metadata (actual ID, version) in page titles and publish message\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/191873924-49218f24-4045-4cfc-94db-52206da465ce.png)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"24236703152","Type":"IssuesEvent","CreatedAt":"2022-09-27T00:25:56","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11923","RelatedDescription":"Closed issue \"[Bug]: Visual Studio Installed Packages page is slow to load\" (#11923) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nVisual Studio 2022\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nThe Installed packages page in the Visual Studio Package Management UI can be slow to load.\r\n\r\nPart of the reason for this slowness is `HttpClientHandler`'s `MaxConnectionsPerServer` setting, which by default is 2.\r\n\r\nIncreasing this value results in a much faster load time. In the attached video, setting `MaxConnectionsPerServer` to 20 reduces the time taken from ~42 seconds to ~14 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201348-58856ed2-804b-4a0f-8180-ef0abffe3bb5.mp4\r\n\r\nThis can be further improved by changing `PackageMetadataResourceV3.GetMetadataAsync` to make its API requests concurrently. In the attached video, the time taken is further reduced to ~5 seconds.\r\n\r\nhttps://user-images.githubusercontent.com/6613722/176201934-63a15ea5-00dc-4c0c-bd4e-27b8383cd86f.mp4\r\n\r\nThe diff for these changes can be found here: https://github.com/mjolka/NuGet.Client/commit/6da131780ccf74c1d4de9306804c295f5462e57b\r\n\r\nThis is the project file I used to test with:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"AWSSDK.Core\" Version=\"3.7.12.3\" />\r\n    <PackageReference Include=\"AWSSDK.S3\" Version=\"3.7.9.19\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager\" Version=\"3.7.2.59\" />\r\n    <PackageReference Include=\"AWSSDK.SecretsManager.Caching\" Version=\"1.0.4\" />\r\n    <PackageReference Include=\"MassTransit\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"MassTransit.RabbitMQ\" Version=\"8.0.3\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.6\" />\r\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.5\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.2.3\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n````\r\n\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"24236387817","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:57:31","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12116","RelatedDescription":"Opened issue \"[Bug]: Address CA2213 warnings\" (#12116) at NuGet/Home","RelatedBody":"Address new CA2213 warnings which were suppressed in  "},{"Id":"24236126704","Type":"IssuesEvent","CreatedAt":"2022-09-26T23:33:33","Actor":"jonreis","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12115","RelatedDescription":"Opened issue \"[Bug]: dotnet list package --vulnerable --include-transitive does not report all vulnerable packages\" (#12115) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet v6.0.401\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nMySql.Data v8.0.24 uses 2 transitive packages with security vulnerabilities:\r\n\r\n1) BouncyCastle v1.85 has security vulnerability [CVE-2020-15522](https://github.com/advisories/GHSA-6xx3-rg99-gc3p) yet when I run the nuget vulnerability check, it is not reported.\r\n2) Google.Protobuf [CVE-2021-22570](https://github.com/advisories/GHSA-77rm-9x9h-xj3g)\r\n\r\nTransitive Package for Google.Protobuf is reported, but not BouncyCastle\r\n\r\nTo Reproduce:\r\n1. Create a project that includes MySql.Data v8.0.24\r\n2. Run: dotnet list package --vulnerable --include-transitive\r\n\r\nOutput from tool\r\n[net48]:\r\nTransitive Package Resolved Severity Advisory URL\r\nGoogle.Protobuf 3.14.0 High https://github.com/advisories/GHSA-77rm-9x9h-xj3g\r\n\r\nOther details:\r\nAdvisory: https://github.com/advisories/GHSA-6xx3-rg99-gc3p\r\nBouncyCastle release notes: https://www.bouncycastle.org/csharp/\r\nNIST: https://nvd.nist.gov/vuln/detail/cve-2020-15522\n\n### Verbose Logs\n\n_No response_"},{"Id":"24235657867","Type":"PullRequestEvent","CreatedAt":"2022-09-26T22:53:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/12088","RelatedDescription":"Merged pull request \"Design for erroring when NuGet.exe pack is used for an SDK based project\" (#12088) at NuGet/Home","RelatedBody":"Design for https://github.com/NuGet/Home/issues/7778. [Rendered](https://github.com/NuGet/Home/blob/dev-nkolev92-nugetExeWarnWhenSDKpack/proposed/2022/NuGetExeWarnWhenSDKProjectsGetPacked.md)\r\n\r\n\r\nCompleting that issue will allow us to close https://github.com/NuGet/Home/issues/4491 as well. \r\n\r\nThe proposal is implemented in https://github.com/nuget/nuget.client/tree/dev-nkolev92-warnNuGetExePacksSDKProject. "},{"Id":"24234758185","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:47:46","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12114","RelatedDescription":"Opened issue \"Run NuGet end to end and Apex tests on VS main branch\" (#12114) at NuGet/Home","RelatedBody":"This bug is to revert https://github.com/NuGet/NuGet.Client/pull/4821 once https://developercommunity.visualstudio.com/t/VS-2022-174-preview-versions-throws-a/10157815 issue resolved.\r\n\r\nRelated - https://github.com/NuGet/Home/issues/12104"},{"Id":"24233998053","Type":"IssuesEvent","CreatedAt":"2022-09-26T21:00:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10375","RelatedDescription":"Closed issue \"Proposal: option to hide dependency APIs if consumers don't reference them too\" (#10375) at NuGet/Home","RelatedBody":"## Overview\r\n\r\nThere are cases where library authors need to add a dependency on NuGet packages, but without having consumers of their library (and not the dependency as well) to automatically have access to those APIs **unless explicitly referenced**.\r\n\r\nThe main idea is: some dependency should only be viewed as **implementation details** for a library.\r\nThis is due to a number of reasons:\r\n\r\n1. These APIs might not conceptually make sense to be exposed together with a library. As an example, I'm working on [ComputeSharp](https://github.com/Sergio0694/ComputeSharp), which is a high-level, easy to use library to do GPU processing in C#. This library has a dependency on [TerraFX.Interop.Windows](https://github.com/terrafx/terrafx.interop.windows), which provides extremely low-level bindings for Windows APIs. I don't want consumers of my library to also have TerraFX APIs pop up in their IntelliSense. These APIs are just an implementation detail for me, and conceptually they have nothing to do with what ComputeSharp aims to be - a high-level and accessible library.\r\n2. Having these APIs being exposed caused a potentially breaking dependency for consumers. Consider the case for ComputeSharp as before. If one day I wanted to change my backend for whatever reasons, and some consumers were using APIs from TerraFX as well, updating ComputeSharp would be a breaking change, even if I'd only be changing an internal implementation detail, and nothing on my public API surface.\r\n\r\nPoint 1. is the one I care about in particular. That's the same reason why me and many other library authors take special care in trimming the public API surface as much as possible to keep it clean - having every single indirect API being automatically visible to consumers completely undermines this, especially when these APIs are very different from the design of the library itself.\r\n\r\n## Proposed solution\r\n\r\nThis proposal is to add a new property that can be added to `PackageReference` items (eg. `PubliclyVisible`, defaulting to `true` for backwards compatibility) that when set to `false` would cause the following behavior:\r\n\r\n- APIs from these dependencies would not be visible for consumers. As in, trying to use them would fail to build.\r\n- Consumers would need to manually add a dependency to that package in their own project to see/use them.\r\n- These dependencies would still be visible when installing the NuGet package, as is today.\r\n\r\nTo add more details (quoting from @tannergooding):\r\n\r\n> What is wanted is that PackageB depends on PackageA so that the latter is included in the overall version matching, it ends up in the exe output folder, etc.\r\n> However, PackageA should not be passed through to csc and therefore users shouldn't be able to use types from it without directly referencing it themselves.\r\n> Likewise, consumers of B shouldn't need to set any private assets to make this work as intended.\r\n\r\n## Alternative solutions (not viable)\r\n\r\n- Ask maintainers of these dependencies to provide source-only packages as well. This is clearly not viable in the majority of cases, and would be bad for code size anyway since consumers would end up with duplicated code across different assemblies.\r\n- Keep a local fork of needed packages and use them as private assets. This is not viable either as it would require a lot of work for library authors to keep forks in sync, not to mention this would have the same exact issue with duplicated code.\r\n\r\n"},{"Id":"24233956578","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:58:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8010","RelatedDescription":"Closed issue \"line continuation in package manager console\" (#8010) at NuGet/Home","RelatedBody":"<p>With Core, Scaffold-DbContext lines are long. Ability to split over more than one line would be useful.</p><p>This is already available in most shells (bash, powershell etc)</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/480145/line-continuation-in-package-manager-console.html\nVSTS ticketId: 812475_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 3/7/2019, 00:19 AM (40 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>"},{"Id":"24233843331","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:51:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7852","RelatedDescription":"Closed issue \"[Proposal] Side-by-side packages.config and Package Reference\" (#7852) at NuGet/Home","RelatedBody":"### Description\r\nSince Package Reference still doesn’t support install/uninstall scripts, drop-in content or configuration (which packages.config does), I suggest the creation of a **Hybrid Mode** where **both** types of packages could be included.\r\n\r\n### Proposal\r\nOffer a hybrid mode allowing users to individually select for each NuGet package which package reference system to use. Additionally auto-detect when a project CAN be Package Referenced without conflicts and do so by default. This would allow \"partial migration\" from packages.config, retaining the original system as-is for NuGet packages incompatible with Package References.\r\n\r\n### Motivation\r\nThe lack of features in Package References, the bread and butter of many NuGet packages which rely heavily on app.config or native assemblies, makes it not viable as a replacement at the moment. However, with this proposal we could mitigate the issue and pave the way for it's wider (incremental) adoption."},{"Id":"24233807147","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:49:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7133","RelatedDescription":"Closed issue \"Add NuGet.exe to the Developer Command Prompt\" (#7133) at NuGet/Home","RelatedBody":"Please make NuGet.exe available from the Visual Studio Developer Command Prompt. It's a commonly needed tool and the expectation is that `msbuild`, `dotnet` and `nuget` just work from the command prompt."},{"Id":"24233714159","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:43:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6563","RelatedDescription":"Closed issue \"NuGet is restoring wrong version if referenced indirectly from lib\" (#6563) at NuGet/Home","RelatedBody":"Original issue by @pshrosbree https://github.com/fsprojects/Paket/issues/2976\r\n\r\nThe attached projects shows an inconsisteny when referencing packages indirectly. Just run `dotnet build` in the `app` folder and see it fail with `NU1608`:\r\n\r\n![image](https://user-images.githubusercontent.com/57396/36203754-ed41debe-1188-11e8-987f-14d8a3d3c055.png)\r\n\r\nThe problem is the following. In the `lib` project we explicitly select Microsoft.Data.Services.Client` version 5.8.3 for `net461`, but this is just ignored during the build an NuGet decides to just use `5.8.2` instead. This introduces a version conflict. Note: NuGet is overriding my manual settings!\r\n\r\n[version.zip](https://github.com/NuGet/Home/files/1723898/version.zip)\r\n\r\n## WORKAROUNDS\r\n\r\nWhile this behaviour leads to very weird errors, there are 2 workarounds:\r\n\r\na) go to `lib` folder and use `<TargetFrameworks>netstandard2.0;net461</TargetFrameworks>`\r\nb) go to `app` folder and add explicit `<PackageReference Include=\"Microsoft.Data.Services.Client\" Version=\"5.8.3\" />`\r\n\r\n\r\n"},{"Id":"24233640383","Type":"IssuesEvent","CreatedAt":"2022-09-26T20:39:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6284","RelatedDescription":"Closed issue \"Make it easier to remove packages that are unused by projects.\" (#6284) at NuGet/Home","RelatedBody":"Package A1 references dependencies D1, D2, and D3. \r\n\r\nWhen A1 is installed, D1, D2, and D3 are also installed. \r\n\r\n- When A1 is removed, the D packages remain. \r\n- If upgrading to A1 v2.0 and it no longer requires D3, D3 remains referenced in the project\r\n\r\nThis leads to a bunch of orphaned dependency packages cluttering up the project, that require special tooling (R# - remove unused references) to determine if they are necessary still. \r\n\r\nIs there a way to define removal of dependencies in the nuspec?  ~~The option is no longer in the VS UI.~~ Glad to see that regression got fixed finally."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"23723590840","Type":"IssuesEvent","CreatedAt":"2022-08-30T17:25:48","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Opened issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":126,"FavoriteCount":32,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":48,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2022-09-27T03:30:26.1373325Z","RunDurationInMilliseconds":1500}