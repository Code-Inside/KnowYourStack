{"Data":{"Blog":{"FeedItems":[{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14750522674","Type":"PullRequestEvent","CreatedAt":"2021-01-08T02:24:15","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8370","RelatedDescription":"Opened pull request \"FI of master into dev\" (#8370) at NuGet/NuGetGallery","RelatedBody":"Update dev branch to latest master changes. This brings the hotfix from https://github.com/NuGet/NuGetGallery/pull/8369 to the dev branch so that I can revert it with a proper fix :)"},{"Id":"14750491665","Type":"PullRequestEvent","CreatedAt":"2021-01-08T02:19:00","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8369","RelatedDescription":"Merged pull request \"[HOTFIX] Fix functional tests by reducing number of pushed duplicate packages\" (#8369) at NuGet/NuGetGallery","RelatedBody":"Functional tests on PROD are currently failing repeatedly:\r\n\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77508&view=results\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77522&view=results\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77526&view=results\r\n\r\nThe duplicate package push functional test pushes 160 packages in parallel. This is causing SQL timeouts. To unblock functional tests, we will temporarily reduce the number of duplicated packages we push to just 16. As part of https://github.com/NuGet/NuGetGallery/issues/8368, we will improve the SQL query used to push packages and revert this change.\r\n\r\nPart of https://github.com/NuGet/NuGetGallery/issues/8368"},{"Id":"14750325009","Type":"PullRequestEvent","CreatedAt":"2021-01-08T01:50:57","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8369","RelatedDescription":"Opened pull request \"[HOTFIX] Reduce number of pushed duplicate packages\" (#8369) at NuGet/NuGetGallery","RelatedBody":"Functional tests on PROD are currently failing repeatedly:\r\n\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77508&view=results\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77522&view=results\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77526&view=results\r\n\r\nThe duplicate package push functional test pushes 160 packages in parallel. This is causing SQL timeouts. To unblock functional tests, we will temporarily reduce the number of duplicated packages we push to just 16. As part of https://github.com/NuGet/NuGetGallery/issues/8368, we will improve the SQL query used to push packages and revert this change.\r\n\r\nPart of https://github.com/NuGet/NuGetGallery/issues/8368"},{"Id":"14749581642","Type":"PullRequestEvent","CreatedAt":"2021-01-07T23:50:18","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8364","RelatedDescription":"Merged pull request \"Add fuget.org links to packages\" (#8364) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/NuGetGallery/issues/7850\r\n\r\nPackages will now have an additional link per specs outlined here: https://github.com/NuGet/NuGetGallery/pull/7832, linking to the package's fuget.org view.\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/102949684-8e0fe180-4514-11eb-89b3-8f69bbfd4cf2.png)"},{"Id":"14749016656","Type":"IssuesEvent","CreatedAt":"2021-01-07T22:43:10","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8368","RelatedDescription":"Opened issue \"Functional tests fail due to SQL timeouts\" (#8368) at NuGet/NuGetGallery","RelatedBody":"The PROD Gallery functional tests have failed repeatedly:\r\n\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77508&view=results\r\n* https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=77522&view=results\r\n\r\nThis is caused by SQL timeouts.\r\n\r\n<details>\r\n<summary>Example exception</summary>\r\nhttps://www.nuget.org/Admin/Errors.axd/detail?id=27508282\r\n\r\nSystem.ComponentModel.Win32Exception\r\nThe wait operation timed out\r\n\r\nCall stack:\r\n```\r\nSystem.Data.Entity.Core.EntityCommandExecutionException: An error occurred while executing the command definition. See the inner exception for details. ---> System.Data.SqlClient.SqlException: Execution Timeout Expired.  The timeout period elapsed prior to completion of the operation or the server is not responding. ---> System.ComponentModel.Win32Exception: The wait operation timed out\r\n   --- End of inner exception stack trace ---\r\n   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)\r\n   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)\r\n   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\r\n   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\r\n   at System.Data.SqlClient.SqlDataReader.get_MetaData()\r\n   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)\r\n   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)\r\n   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)\r\n   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)\r\n   at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext)\r\n   at System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)\r\n   --- End of inner exception stack trace ---\r\n   at System.Data.Entity.Core.EntityClient.Internal.EntityCommandDefinition.ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior)\r\n   at System.Data.Entity.Core.Objects.Internal.ObjectQueryExecutionPlan.Execute[TResultType](ObjectContext context, ObjectParameterCollection parameterValues)\r\n   at System.Data.Entity.Core.Objects.ObjectContext.ExecuteInTransaction[T](Func`1 func, IDbExecutionStrategy executionStrategy, Boolean startLocalTransaction, Boolean releaseConnectionOnSuccess)\r\n   at System.Data.Entity.Core.Objects.ObjectQuery`1.<>c__DisplayClass41_0.<GetResults>b__0()\r\n   at System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute[TResult](Func`1 operation)\r\n   at System.Data.Entity.Core.Objects.ObjectQuery`1.GetResults(Nullable`1 forMergeOption)\r\n   at System.Data.Entity.Core.Objects.ObjectQuery`1.<System.Collections.Generic.IEnumerable<T>.GetEnumerator>b__31_0()\r\n   at System.Data.Entity.Internal.LazyEnumerator`1.MoveNext()\r\n   at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source)\r\n   at NuGetGallery.ApiController.<CreatePackageInternal>d__120.MoveNext() in C:\\A\\1\\208\\s\\src\\Gallery\\submodules\\Gallery\\src\\NuGetGallery\\Controllers\\ApiController.cs:line 838\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Web.Mvc.Async.TaskAsyncActionDescriptor.EndExecute(IAsyncResult asyncResult)\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeAsynchronousActionMethod>b__36(IAsyncResult asyncResult)\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.<InvokeActionMethodFilterAsynchronouslyRecursive>b__3d()\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.<>c__DisplayClass46.<InvokeActionMethodFilterAsynchronouslyRecursive>b__3f()\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass21.<>c__DisplayClass2b.<BeginInvokeAction>b__1c()\r\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass21.<BeginInvokeAction>b__1e(IAsyncResult asyncResult)\r\n```\r\n</details>\r\n\r\nFrom the call stack, my suspicion is this query is timing out: \r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/e53e62343775db2bb65bc8b14d6488d870a576c5/src/NuGetGallery/Controllers/ApiController.cs#L660\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/4bd46fcf6f366b5343f21c4cef1abdfe67d06c27/src/NuGetGallery.Core/Services/CorePackageService.cs#L316-L323"},{"Id":"14748347850","Type":"IssuesEvent","CreatedAt":"2021-01-07T21:28:46","Actor":"deathracr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8367","RelatedDescription":"Closed issue \" Publish-Module to internally hosted server returns 404\" (#8367) at NuGet/NuGetGallery","RelatedBody":"I have setup a NuGet server to host custom PowerShell modules in our office.  I used this page to guide me: https://docs.microsoft.com/en-us/nuget/hosting-packages/nuget-server\r\n\r\nWhen I run:\r\n  `Publish-Module -Name MyModule -NuGetApiKey MyAPIKey -Repository pwsh`\r\n\r\nI get the following error.\r\n\r\n> Publish-PSArtifactUtility : Failed to publish module 'MyModule': 'Failed to process request. 'Not Found'.\r\n>The remote server returned an error: (404) Not Found..\r\n>'.\r\n>At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\1.1.1.0\\PSModule.psm1:1244 char:17\r\n>+                 Publish-PSArtifactUtility -PSModuleInfo $moduleInfo `\r\n>+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n>    + CategoryInfo          : InvalidOperation: (:) [Write-Error], WriteErrorException\r\n>    + FullyQualifiedErrorId : FailedToPublishTheModule,Publish-PSArtifactUtility\r\n\r\nUsing Fiddler, I can see there are 3 HTTP calls that are made when I execute **Publish-Module**:\r\n\r\n- GET - 200 - http://pwsh.mydomain.net/NuGet/nuget/FindPackagesById()?id='MyModule'&$skip=0&$top=40'&$skip=0&$top=40\r\n- GET - 200 - http://pwsh.mydomain.net/NuGet/nuget/Packages\r\n- PUT - 404 - http://pwsh.mydomain.net/NuGet/nuget/Packages/\r\n\r\nI have left the `appSettings/packagesPath` value blank, but I have also tried to use the absolute path.  Both return the same result, 404.\r\n\r\nThe size of the module is 74.0 KB.\r\n\r\nMy web.config includes:\r\n`<handlers>\r\n      <remove name=\"WebDAV\" />\r\n</handlers>`\r\nand\r\n    `<modules runAllManagedModulesForAllRequests=\"true\">\r\n      <remove name=\"WebDAVModule\" />\r\n    </modules>`\r\nas well as \r\n      `<requestFiltering>\r\n        <requestLimits maxAllowedContentLength=\"31457280\" />\r\n      </requestFiltering>`\r\nIt also is programmed to accept all verbs (not that I'm getting 405):\r\n`<add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />`\r\n\r\nI have registered the NuGet PS Repository using the following code:\r\n`$params = @{`\r\n`name = \"pwsh\"`\r\n`SourceLocation = \"http://pwsh.mydomain.net/NuGet/nuget\"`\r\n`PublishLocation = \"http://pwsh.mydomain.net/NuGet/nuget/Packages\"`\r\n`InstallationPolicy = 'Trusted'`\r\n`}`\r\nand\r\n`Register-PSRepository @params`\r\n\r\nPlease help!!\r\n"},{"Id":"14748149004","Type":"IssuesEvent","CreatedAt":"2021-01-07T21:06:40","Actor":"deathracr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8367","RelatedDescription":"Opened issue \" Publish-Module to internally hosted server returns 404\" (#8367) at NuGet/NuGetGallery","RelatedBody":"I have setup a NuGet server to host custom PowerShell modules in our office.  I used this page to guide me: https://docs.microsoft.com/en-us/nuget/hosting-packages/nuget-server\r\n\r\nWhen I run:\r\n  `Publish-Module -Name MyModule -NuGetApiKey MyAPIKey -Repository pwsh`\r\n\r\nI get the following error.\r\n\r\n> Publish-PSArtifactUtility : Failed to publish module 'MyModule': 'Failed to process request. 'Not Found'.\r\n>The remote server returned an error: (404) Not Found..\r\n>'.\r\n>At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\1.1.1.0\\PSModule.psm1:1244 char:17\r\n>+                 Publish-PSArtifactUtility -PSModuleInfo $moduleInfo `\r\n>+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n>    + CategoryInfo          : InvalidOperation: (:) [Write-Error], WriteErrorException\r\n>    + FullyQualifiedErrorId : FailedToPublishTheModule,Publish-PSArtifactUtility\r\n\r\nUsing Fiddler, I can see there are 3 HTTP calls that are made when I execute **Publish-Module**:\r\n\r\n- GET - 200 - http://pwsh.mydomain.net/NuGet/nuget/FindPackagesById()?id='MyModule'&$skip=0&$top=40'&$skip=0&$top=40\r\n- GET - 200 - http://pwsh.mydomain.net/NuGet/nuget/Packages\r\n- PUT - 404 - http://pwsh.mydomain.net/NuGet/nuget/Packages/\r\n\r\nI have left the `appSettings/packagesPath` value blank, but I have also tried to use the absolute path.  Both return the same result, 404.\r\n\r\nThe size of the module is 74.0 KB.\r\n\r\nMy web.config includes:\r\n`<handlers>\r\n      <remove name=\"WebDAV\" />\r\n</handlers>`\r\nand\r\n    `<modules runAllManagedModulesForAllRequests=\"true\">\r\n      <remove name=\"WebDAVModule\" />\r\n    </modules>`\r\nas well as \r\n      `<requestFiltering>\r\n        <requestLimits maxAllowedContentLength=\"31457280\" />\r\n      </requestFiltering>`\r\nIt also is programmed to accept all verbs (not that I'm getting 405):\r\n`<add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />`\r\n\r\nI have registered the NuGet PS Repository using the following code:\r\n`$params = @{`\r\n`name = \"pwsh\"`\r\n`SourceLocation = \"http://pwsh.mydomain.net/NuGet/nuget\"`\r\n`PublishLocation = \"http://pwsh.mydomain.net/NuGet/nuget/Packages\"`\r\n`InstallationPolicy = 'Trusted'`\r\n`}`\r\nand\r\n`Register-PSRepository @params`\r\n\r\nPlease help!!\r\n"},{"Id":"14742446686","Type":"IssuesEvent","CreatedAt":"2021-01-07T12:18:37","Actor":"omatrot","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8366","RelatedDescription":"Opened issue \"Nuget Server does not look for packages in the configured pakagesPath\" (#8366) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI've configured a network folder with the packagesPath (web.config/appSetings)\r\n\r\n`<add key=\"packagesPath\" value=\"\\\\rtenetwork.net\\rte\\RTE Technologies\\R%26D\\NuGet\\AppCenterFeed\" />\r\n`\r\nWhen I launch the site and try to view my packages, I face the following error:\r\n\r\nHTTP Error 404.0 - Not Found\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n  - Follow the procedure [here](https://docs.microsoft.com/fr-fr/nuget/hosting-packages/nuget-server).\r\n  - Set up  network folder in the packagesPath appSettings.\r\n  - Run the site and try to browse your packages.\r\n\r\n### Expected behavior\r\nI should be able to see my packages.\r\n\r\n### Screenshots\r\n\r\n![Capture](https://user-images.githubusercontent.com/4366356/103891779-bab62280-50ea-11eb-8879-b90527c76249.PNG)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14750044638","Type":"IssuesEvent","CreatedAt":"2021-01-08T01:03:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10257","RelatedDescription":"Closed issue \"packages.config package.lock.json uses an incorrect target framework\" (#10257) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.8.0.6930\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 v20H2\r\n\r\nWorked before? If so, with which NuGet version: Yes, in version 5.5.1.6542\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create an empty console application targetting .NET Framework 4.7.2\r\n2. Install a nuget package (like Newtonsoft.Json)\r\n3. Enable package restore using lock file in csproj\r\n\r\n```\r\n<PropertyGroup>\r\n  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n</PropertyGroup>\r\n```\r\n\r\n4. Get the nuget.exe client for both versions listed above (5.5.1.6542 and 5.8.0.6930). Run `nuget restore` in the solution. The packages.lock.json files generated will be different.\r\n\r\nFor 5.5.1.6542, I get this:\r\n``` json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \".NETFramework,Version=v4.7.2\": {\r\n      \"Newtonsoft.Json\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[12.0.3, 12.0.3]\",\r\n        \"resolved\": \"12.0.3\",\r\n        \"contentHash\": \"6mgjfnRB4jKMlzHSl+VD+oUc1IebOZabkbyWj2RiTgWwYPPuaK1H97G1sHqGwPlS5npiF5Q0OrxN1wni2n5QWg==\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFor 5.8.0.6930, I get this:\r\n\r\n``` json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"Any,Version=v0.0\": {\r\n      \"Newtonsoft.Json\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[12.0.3, 12.0.3]\",\r\n        \"resolved\": \"12.0.3\",\r\n        \"contentHash\": \"6mgjfnRB4jKMlzHSl+VD+oUc1IebOZabkbyWj2RiTgWwYPPuaK1H97G1sHqGwPlS5npiF5Q0OrxN1wni2n5QWg==\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAs a consequence, restoring an existing project using locked mode in 5.8.0.6930 is resulting in failures, which broke our Azure Devops pipelines. "},{"Id":"14750042758","Type":"IssuesEvent","CreatedAt":"2021-01-08T01:03:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/10257","RelatedDescription":"Reopened issue \"packages.config package.lock.json uses an incorrect target framework\" (#10257) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.8.0.6930\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 v20H2\r\n\r\nWorked before? If so, with which NuGet version: Yes, in version 5.5.1.6542\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create an empty console application targetting .NET Framework 4.7.2\r\n2. Install a nuget package (like Newtonsoft.Json)\r\n3. Enable package restore using lock file in csproj\r\n\r\n```\r\n<PropertyGroup>\r\n  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n</PropertyGroup>\r\n```\r\n\r\n4. Get the nuget.exe client for both versions listed above (5.5.1.6542 and 5.8.0.6930). Run `nuget restore` in the solution. The packages.lock.json files generated will be different.\r\n\r\nFor 5.5.1.6542, I get this:\r\n``` json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \".NETFramework,Version=v4.7.2\": {\r\n      \"Newtonsoft.Json\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[12.0.3, 12.0.3]\",\r\n        \"resolved\": \"12.0.3\",\r\n        \"contentHash\": \"6mgjfnRB4jKMlzHSl+VD+oUc1IebOZabkbyWj2RiTgWwYPPuaK1H97G1sHqGwPlS5npiF5Q0OrxN1wni2n5QWg==\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFor 5.8.0.6930, I get this:\r\n\r\n``` json\r\n{\r\n  \"version\": 1,\r\n  \"dependencies\": {\r\n    \"Any,Version=v0.0\": {\r\n      \"Newtonsoft.Json\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[12.0.3, 12.0.3]\",\r\n        \"resolved\": \"12.0.3\",\r\n        \"contentHash\": \"6mgjfnRB4jKMlzHSl+VD+oUc1IebOZabkbyWj2RiTgWwYPPuaK1H97G1sHqGwPlS5npiF5Q0OrxN1wni2n5QWg==\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAs a consequence, restoring an existing project using locked mode in 5.8.0.6930 is resulting in failures, which broke our Azure Devops pipelines. "},{"Id":"14749749374","Type":"IssuesEvent","CreatedAt":"2021-01-08T00:14:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10305","RelatedDescription":"Closed issue \"package add does not use credential provider when authentication is required\" (#10305) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): `Nuget.exe` and `dotnet.exe`\r\n\r\nNuGet version (x.x.x.xxx): `5.8.0.6930`\r\n- Although it is present starting on `5.8.0.6753` and newer.\r\n\r\ndotnet.exe --version (if appropriate): `5.0.100`\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): `win10-x64 10.0.19042`\r\n\r\nWorked before? If so, with which NuGet version: `5.3.0.6251`\r\n- Most probably also working on `5.8.0.6725`\r\n- When running out of `XPlat` the fix in https://github.com/NuGet/NuGet.Client/pull/3335 is needed.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n\"Pre-requisites:\"\r\n1. Make sure a package source requiring authentication is added to your `NuGet.Config` and the corresponding credential provider setup. For example, when using an Azure Artifacts feed requiring authentication, make sure to also have the Azure Artifacts Credential Provider setup.\r\n2. Do not authenticate yet!\r\n\r\nUsing `dotnet`:\r\n1. Run `dotnet new classlib -n testproj -o .` to have a sample empty project.\r\n2. Run `dotnet add package [package_from_source_requiring_authentication] --interactive`\r\n3. Notice how the command will fail. It will not use the credential provider.\r\n\r\nUsing `nuget`. Issue is present in the `NuGet.CommandLine.XPlat` application.\r\n1. Run `dotnet new classlib -n testproj -o .` to have a sample empty project.\r\n2. Run `dotnet [path_to_xplat]/NuGet.CommandLine.XPlat.dll package add --package [package_from_source_requiring_authentication] -p ./testproj.csproj -d ./obj/testproj.csproj.nuget.dgspec.json --interactive`\r\n3. Notice how the command will fail. It will not use the credential provider.\r\n\r\n## Other suggested things\r\n\r\n### More information (from digging around)\r\n- Seems to have been introduced in https://github.com/NuGet/NuGet.Client/pull/3480\r\n- Issue seems to be related to the changes done in `AddPackageReferenceCommandRunner.cs` where the package source is being accessed to obtain a NugetVersion before the credential provider is setup.\r\n- Maybe there should be a test case in `AddPackageCommandUtilityTests.cs` to cover situations where credentials are not present in `NuGet.config`?\r\n- Add `DefaultCredentialServiceUtility.SetupDefaultCredentialService(packageReferenceArgs.Logger, !packageReferenceArgs.Interactive);` before this line https://github.com/NuGet/NuGet.Client/blob/release-5.8.0-assemblyVersion-6930/src/NuGet.Core/NuGet.CommandLine.XPlat/Commands/PackageReferenceCommands/AddPackageReferenceCommandRunner.cs#L106 to see it work \"well\".\r\n- **Question:** Would it be worth it reporting this issue in dotnet repo as well, linking to this report?\r\n\r\n### Verbose Logs\r\n\r\n#### Log from `dotnet` command (I could not find a way of specifying verbosity)\r\n\r\n```\r\n  Determining projects to restore...\r\n  Writing [redacted]\r\ninfo : Adding PackageReference for package '[package_from_source_requiring_authentication]' into project 'C:\\[redacted]\\testproj.csproj'.\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/[package_from_source_requiring_authentication]/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/[package_from_source_requiring_authentication]/index.json 716ms\r\nerror: Unable to load the service index for source [package_source_requiring_authentication]/nuget/v3/index.json.\r\nerror:   Response status code does not indicate success: 401 (Unauthorized).\r\n```\r\n\r\n#### Log from `nuget` (XPlat).\r\n\r\n**5.8.0.6930 does not seem to have the `--verbosity` flag.** (bug?) The following is when running out of Visual Studio so I could set it to `Debug`.\r\n\r\n```\r\ntrace: NuGet Command Line Version: 5.8.0.0\r\ninfo : Adding PackageReference for package '[package_from_source_requiring_authentication]' into project 'C:/[redacted]/testproj.csproj'.\r\ndebug: Reading project Dependency Graph\r\ndebug: Project Dependency Graph Read\r\ninfo :   GET https://api.nuget.org/v3/registration5-gz-semver2/[package_from_source_requiring_authentication]/index.json\r\ninfo :   NotFound https://api.nuget.org/v3/registration5-gz-semver2/[package_from_source_requiring_authentication]/index.json 162ms\r\nerror: Unable to load the service index for source [package_source_requiring_authentication]/nuget/v3/index.json.\r\nerror:   Response status code does not indicate success: 401 (Unauthorized).\r\ntrace: System.AggregateException: One or more errors occurred. (Unable to load the service index for source [package_source_requiring_authentication]/nuget/v3/index.json.) ---> NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source [package_source_requiring_authentication]/nuget/v3/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\r\ntrace:    at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\ntrace:    at NuGet.Protocol.HttpSource.<>c__DisplayClass14_0`1.<<GetAsync>b__0>d.MoveNext() in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\HttpSource\\HttpSource.cs:line 154\r\ntrace: --- End of stack trace from previous location where exception was thrown ---\r\ntrace:    at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Common\\ConcurrencyUtilities.cs:line 96\r\ntrace:    at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Common\\ConcurrencyUtilities.cs:line 111\r\ntrace:    at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\HttpSource\\HttpSource.cs:line 78\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 133\r\ntrace:    --- End of inner exception stack trace ---\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 170\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 72\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 157\r\ntrace:    at NuGet.Protocol.PackageMetadataResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\PackageMetadataResourceV3Provider.cs:line 23\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 157\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T]() in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 140\r\ntrace:    at NuGet.CommandLine.XPlat.Utility.AddPackageCommandUtility.GetLatestVersionFromSourceAsync(PackageSource source, ILogger logger, String packageId, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Utility\\AddPackageCommandUtility.cs:line 70\r\ntrace:    at NuGet.CommandLine.XPlat.Utility.AddPackageCommandUtility.GetLatestVersionFromSourcesAsync(IList`1 sources, ILogger logger, String packageId, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Utility\\AddPackageCommandUtility.cs:line 45\r\ntrace:    at NuGet.CommandLine.XPlat.AddPackageReferenceCommandRunner.GetLatestVersionAsync(PackageSpec originalPackageSpec, String packageId, ILogger logger, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\AddPackageReferenceCommandRunner.cs:line 239\r\ntrace:    at NuGet.CommandLine.XPlat.AddPackageReferenceCommandRunner.ExecuteCommand(PackageReferenceArgs packageReferenceArgs, MSBuildAPIUtility msBuild) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\AddPackageReferenceCommandRunner.cs:line 108\r\ntrace:    --- End of inner exception stack trace ---\r\ntrace:    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\ntrace:    at Microsoft.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)\r\ntrace:    at NuGet.CommandLine.XPlat.Program.MainInternal(String[] args, CommandOutputLogger log) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Program.cs:line 97\r\ntrace: ---> (Inner Exception #0) NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source [package_source_requiring_authentication]/nuget/v3/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\r\ntrace:    at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\ntrace:    at NuGet.Protocol.HttpSource.<>c__DisplayClass14_0`1.<<GetAsync>b__0>d.MoveNext() in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\HttpSource\\HttpSource.cs:line 154\r\ntrace: --- End of stack trace from previous location where exception was thrown ---\r\ntrace:    at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Common\\ConcurrencyUtilities.cs:line 96\r\ntrace:    at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Common\\ConcurrencyUtilities.cs:line 111\r\ntrace:    at NuGet.Protocol.HttpSource.GetAsync[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\HttpSource\\HttpSource.cs:line 78\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 133\r\ntrace:    --- End of inner exception stack trace ---\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 170\r\ntrace:    at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\ServiceIndexResourceV3Provider.cs:line 72\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 157\r\ntrace:    at NuGet.Protocol.PackageMetadataResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\Providers\\PackageMetadataResourceV3Provider.cs:line 23\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 157\r\ntrace:    at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T]() in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.Protocol\\SourceRepository.cs:line 140\r\ntrace:    at NuGet.CommandLine.XPlat.Utility.AddPackageCommandUtility.GetLatestVersionFromSourceAsync(PackageSource source, ILogger logger, String packageId, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Utility\\AddPackageCommandUtility.cs:line 70\r\ntrace:    at NuGet.CommandLine.XPlat.Utility.AddPackageCommandUtility.GetLatestVersionFromSourcesAsync(IList`1 sources, ILogger logger, String packageId, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Utility\\AddPackageCommandUtility.cs:line 45\r\ntrace:    at NuGet.CommandLine.XPlat.AddPackageReferenceCommandRunner.GetLatestVersionAsync(PackageSpec originalPackageSpec, String packageId, ILogger logger, Boolean prerelease) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\AddPackageReferenceCommandRunner.cs:line 239\r\ntrace:    at NuGet.CommandLine.XPlat.AddPackageReferenceCommandRunner.ExecuteCommand(PackageReferenceArgs packageReferenceArgs, MSBuildAPIUtility msBuild) in C:\\Git\\third-party\\NuGet.Client\\src\\NuGet.Core\\NuGet.CommandLine.XPlat\\Commands\\PackageReferenceCommands\\AddPackageReferenceCommandRunner.cs:line 108<---\r\n```"},{"Id":"14749145630","Type":"IssuesEvent","CreatedAt":"2021-01-07T22:58:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9402","RelatedDescription":"Closed issue \"The up to date status bar message is not great in VS\" (#9402) at NuGet/Home","RelatedBody":"Say you have 15 projects in your solution, and 5 are up to date, the last message in restore would be:\r\n\r\n\"5 of 15 projects are up-to-date for restore\"\r\n\r\nThis is rather confusing: RE: \"5 of 15 projects are up-to-date for restore\"\r\n\r\nRegressed in https://github.com/NuGet/NuGet.Client/pull/3111\r\n\r\ncc @zkat @aortiz-msft "},{"Id":"14749134948","Type":"IssuesEvent","CreatedAt":"2021-01-07T22:57:17","Actor":"sbanni","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10436","RelatedDescription":"Opened issue \"CreateVersionsAsync does unnecessary NuGetVersion Compares\" (#10436) at NuGet/Home","RelatedBody":"From looking at ETW logs [CreateVersionsAsync ](https://github.com/NuGet/NuGet.Client/blob/7d67db0ba50d43531717063d08daae2b0aea96fd/src/NuGet.Clients/NuGet.PackageManagement.UI/Models/PackageDetailControlModel.cs#L100) spends a lot of time comparing NuGetVersions (1.4s) for packages with a lot of versions (test10k).\r\n\r\nWe should avoid this work if possible and we should be wary of Linq queries."},{"Id":"14748044097","Type":"IssuesEvent","CreatedAt":"2021-01-07T20:55:09","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10409","RelatedDescription":"Closed issue \"Embedded icons showed incorrectly as default nuget packge icon instead of the ones set in nuspec/csproj file\" (#10409) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.9.0.6996\r\nVS Version: Main\\30822.27\r\nOS: Windows-10-Enterprise-19h2\r\n## Detailed repro steps so we can see the same problem\r\n1.Create a Class Library (.NET Framework 4.8) in VS and build the solution. \r\n2.In the Developer Command Prompt for VS, create a nuspec file by executing command “nuget spec” \r\n3.Make an image file (size limited to 1 MB with PNG format and 128x128 resolution) and locate in the package. \r\n4.Add following to nuspec file (both the two kinds of backlash \\ and / should be test in the line <icon>images\\icon.png</icon>) \r\n```\r\n<package> \r\n  <metadata> \r\n    ... \r\n    <icon>images\\icon.png</icon> \r\n    ... \r\n  </metadata> \r\n  <files> \r\n    ... \r\n    <file src=\"[icon path]\\icon.png\" target=\"images\\\" /> \r\n    ... \r\n  </files> \r\n</package> \r\n```\r\n5. Pack the package to local path by executing command “nuget pack”. \r\n6. Create a C# Console App (.NET Framework 4.8) in VS and open the PM UI of the project. \r\n7. Add the package source as a local feed in Settings->NuGet Package Manager->Package Sources. \r\n8. Select the new added local feed in the Package source dropdown box in the PM UI and install the package.\r\n## Expected\r\nThe embedded icon show correctly on both “Browse”/”Installed”/”Updates”/”Consolidate” tab.\r\n## Actual\r\nEmbedded icons showed incorrectly as default nuget packge icon instead of the ones set in nuspec/csproj file as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/102983584-42c2f680-4547-11eb-9276-2f2a1bab2820.png)\r\n## Notes\r\n1.It repro for all valid embedded icons.\r\n2.It start to repro on dev branch after merging NuGet Client dev-feature-OE.PMUI\\5.9.0.13982 into Dev. \r\n\r\n"},{"Id":"14748018324","Type":"IssuesEvent","CreatedAt":"2021-01-07T20:52:18","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10080","RelatedDescription":"Closed issue \"Remote LicenseMetadata for VS.Oe\" (#10080) at NuGet/Home","RelatedBody":"Need to remote the LicenseMetadata over in the PackageSearchMetadata and be able to stream the license file from embedded packages located on the server.\r\n"},{"Id":"14747962021","Type":"IssuesEvent","CreatedAt":"2021-01-07T20:45:58","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10435","RelatedDescription":"Opened issue \"Remove dead code (TabItemButtonAutomationPeer)\" (#10435) at NuGet/Home","RelatedBody":"I don't believe this is doing anything...\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.PackageManagement.UI/Automation/TabItemButtonAutomationPeer.cs"},{"Id":"14747596043","Type":"IssuesEvent","CreatedAt":"2021-01-07T20:06:35","Actor":"Ncage1974","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10434","RelatedDescription":"Opened issue \"Determine what downloading a specific version of a nuget package\" (#10434) at NuGet/Home","RelatedBody":"Hi Guys, hopefully its ok to ask this question here. Don't know what else to do since I asked on stackoverflow and all I got was crickets. We are using Whitesource to scan for vulnerable dependencies. Here is one of the vulnerable packages Whitesource reported:\r\n![image](https://user-images.githubusercontent.com/1213549/103939045-c4428900-50f0-11eb-89e3-98552cc9ed3b.png)\r\n\r\n\r\nAs you can see in the image if the issue in the NuGet package cache folder (actually all the issues it found were in the NuGet package cache foler):\r\n/root/.nuget/packages/system.net.http/4.3.3/system.net.http.4.3.3.nupkg\r\n\r\nWe are not directly referencing `systme.net.http` so it must be a sub dependency of something. I have verified the issue on my machine. I can delete my nuget cache folder and and soon as I do a `dotnet restore`:\r\n![image](https://user-images.githubusercontent.com/1213549/103938869-880f2880-50f0-11eb-8058-dd4cb343ff9b.png)\r\n\r\nSo the issue is how to determine what higher level dependency is causing that causing that dependency to be downloaded  so I can upgrade that package to fix the issue? This is the only thing I could think of to try so far which apparently doesn't work:\r\n![image](https://user-images.githubusercontent.com/1213549/103939379-4df25680-50f1-11eb-9689-2166fc9fbe43.png)\r\n\r\nMost of the packages are listed as `4.3.0` which is never downloaded. Any help would be MUCH appreciated.\r\n"},{"Id":"14747125891","Type":"IssuesEvent","CreatedAt":"2021-01-07T19:18:53","Actor":"birgithi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10433","RelatedDescription":"Opened issue \"NuGet package recommender should work when more than one source is selected in package manager\" (#10433) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe NuGet package recommender should make recommendations as long as nuget.org is included as one of the package sources. This was implemented before, but PR #3797 reverted this change and now requires that nuget.org is the only source.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Right-click a project in VS and select Manage NuGet Packages to open Package Manager\r\n2. In the browse tab, make sure there are more than one package source listed in the sources drop-down, and that one of them is nuget.org.\r\n3. Select 'All' as sources. \r\n4. Result: no package recommendations, Expected: You should get recommendations.\r\n\r\n\r\n"},{"Id":"14746568790","Type":"IssuesEvent","CreatedAt":"2021-01-07T18:22:10","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10410","RelatedDescription":"Closed issue \"Must use PackageReference\" (#10410) at NuGet/Home","RelatedBody":"packages\\Microsoft.Windows.SDK.Contracts.10.0.17763.1000\\build\\Microsoft.Windows.SDK.Contracts.targets(4,5): error : Must use PackageReference\r\n\r\nwhen i install Microsoft.Identity.Client library using Nuget Manager I got \"Must use PackageReference\" error in .Net MVC Project."},{"Id":"14746559811","Type":"IssuesEvent","CreatedAt":"2021-01-07T18:21:15","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10405","RelatedDescription":"Closed issue \"Optionally validate PackageDescription and throw if not set\" (#10405) at NuGet/Home","RelatedBody":"`PackageDescription` is always set to a default value if both `Description` and `PackageDescription` are empty: https://github.com/NuGet/NuGet.Client/blob/5e1970e323f9f55794c6a77562c5535c12d5c2a4/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L35.\r\n\r\nIt's not uncommon to require a project to set a PackageDescription and throw if none is set. Instead of every consumer adding an InitialTarget for the validation, NuGet should validate the property before the `PackTask` is invoked. Because this would be a breaking change, the validation could be an opt-in via an msbuild property, i.e. `<ValidatePackageDescription />`."},{"Id":"14746557021","Type":"IssuesEvent","CreatedAt":"2021-01-07T18:20:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10202","RelatedDescription":"Closed issue \"Grid columns for selecting project skipped with Tab but not with Shift-Tab\" (#10202) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): PMUI\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):  16.4\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nThis is a problem for both NVDA and Narrator.\r\n\r\nRight-panel -> Description field is not accessible by tabbing, and therefore isn't readable by any screen-reader.\r\n\r\nPackages list, it only reads the Package Name, and does not read the Description. I'm not sure that we would want it to by default. But right now, there's no way to read a description at all.\r\n\r\n\r\n"},{"Id":"14745940720","Type":"IssuesEvent","CreatedAt":"2021-01-07T17:22:00","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10425","RelatedDescription":"Closed issue \"NVDA/Narrator is not reading \"License\" label for \"Apache-2.0\" link\" (#10425) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1240645\r\nCheck out Accessibility Insights! - Identify accessibility bugs before check-in and make bug fixing faster and easier\r\nEnvironment Details:​\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.8 Preview 6.0\r\nOS Details:\r\nWindows 10 Enterprise\r\n\r\nVersion : 20H2\r\n\r\nBuild: 19042.572\r\n\r\nRe-pro Steps:​\r\nStart Narrator/NVDA andOpen Visual Studio Enterprise 2019 Preview (Version 16.8.0 Preview 6.0)\r\nCreate a new \"Grpc\" project\r\nTab till “Solution Explorer” and open \"Context Menu\".\r\nNavigate to \"Manage Nuget Packages for Solution\" and press enter on it.\r\nNavigate to \"Update\"  tab using arrow key.\r\nSearch for \"gRPC\" packages.\r\nTab to \"Apache - 2.0\" link present in description section and verify NVDA/Narrator is reading the corresponding label \"License\".\r\nActual Result:​\r\nNVDA/Narrator is not reading \"License\" label for \"Apache-2.0\" link\r\n\r\nExpected Result:​\r\nNVDA/Narrator should read information that \"Apache - 2.0\" link is related to License.\r\n\r\nUser Impact:​\r\nScreen Reader will not get the completing information about controls if screen reader is not reading the labels.\r\n\r\nMAS Reference:​\r\nMAS 1.3.1 -- Info and Relationships\r\n"},{"Id":"14743864557","Type":"IssuesEvent","CreatedAt":"2021-01-07T14:31:27","Actor":"BamButz","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10432","RelatedDescription":"Opened issue \"Floating versions using CPVM\" (#10432) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWe use CPVM to manage our dependencies. Unfortunately, the last update presented us with a big problem. With the introduction of NU1011, it is no longer possible for us to run a resolution strategy that selects the highest possible version. This is especially relevant for our in-house dependencies, as we distribute regular patches and this can no longer be done automatically.\r\n\r\n## Suggested things\r\n\r\nOur suggestion is to implement a switch that deactivates the validation of NU1011. We understood the problem that led to the implementation of NU1011, but can rule out the problem for us.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1334226716139655171","CreatedAt":"2020-12-02T20:03:32+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nHave you recently experienced issues with your NuGet connectors? You may have been impacted… https://t.co/98KJJGhYEW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":30,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2021-01-08T05:30:37.9687402Z","RunDurationInMilliseconds":1611}