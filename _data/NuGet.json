{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"19293302105","Type":"IssuesEvent","CreatedAt":"2021-12-12T06:22:42","Actor":"WhiteBlackGoose","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8907","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Never remembers my account\" (#8907) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe problematic device - Ipad on 14.4 IpadOS. On my Windows laptop it works fine.\r\n\r\n1. I fill in my MSFT Account\r\n2. It then sends me a verification email\r\n3. I confirm and check \"Never ask again on this device\"\r\n4. I check \"Never log out on this device\" (or something, it's unfortunately localised)\r\n\r\nNow, within less than a day it completely forgets my account.\n\n### Repro Steps\n\nSee Describe the bug\n\n### Expected Behavior\n\nExpected - it won't log out me at all.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"19292894401","Type":"PullRequestEvent","CreatedAt":"2021-12-12T04:22:12","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8906","RelatedDescription":"Opened pull request \"Gallery API request count tracking by endpoint as metric\" (#8906) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/4133 (without user agent consideration).\r\n\r\nAdded support for client-side metric pre-aggregation as I see no reason to have each individual request tracked as an instance of a metric: AI metrics are not subject for sampling, and we are getting millions of API requests per hour. Non-preaggregated metric would waste resources.\r\n\r\nThere seems to be two options for submitting sample for pre-aggregation:\r\n1. By calling [`Metric.TrackValue`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metric.trackvalue?view=azure-dotnet) that has no overload that accepts any kind of list of dimension values.\r\n2. By obtaining a [`MetricSeries`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metrics.metricseries?view=azure-dotnet) object by calling [`Metric.TryGetDataSeries`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metric.trygetdataseries?view=azure-dotnet) (which does have an overload accepting an *array* of dimension values) and then call its `TrackValue` method.\r\n\r\nNone of those accepts a dictionary of dimensions names and dimension values (I'd guess, order matters in this case and dictionary enumeration does not produce stable sequence of keys). I chose to go with the first approach to provide dictionary-like interface (and eliminate the possibility of mismatching dimension names with values) to add dimensions and not to waste time/memory converting the list of values to an array. Because of that, I had to write that ugly switch of `TrackValue` calls.\r\n\r\nWith pre-aggregation, AI SDK sends pre-aggregated metrics once per minute (default aggregation interval).\r\n\r\nAdded telemetry calls to all public methods of `ODataV1FeedController` and `ODataV2FeedController`."},{"Id":"19230451238","Type":"IssuesEvent","CreatedAt":"2021-12-08T02:29:31","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7441","RelatedDescription":"Closed issue \"Dispose DI container every job loop of JsonConfigurationJob\" (#7441) at NuGet/NuGetGallery","RelatedBody":"Today, every time `JsonConfigurationJob.Init` is called, a new DI container is created replacing the reference to the previous one in `_serviceProvider`:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/1b6f4a0bf6605fb676cccca6a839cabdb5c17f2a/src/NuGet.Jobs.Common/JsonConfigurationJob.cs#L66\r\n\r\nThis is a pit to fall in because DI containers can contain `IDisposable` instances (in particular singletons) and if we never dispose the previous container then the `IDisposable` instances inside of it will never be disposed, leading to leaks.\r\n\r\nIn short, a DI container is considered to \"own\" instances and `IDisposable` instances handed out by the DI container are typically the container's job to dispose -- especially singletons.\r\n\r\nThe `AutofacServiceProvider` container from Autofac.Extensions.DependencyInjection 4.2.0 does not implement `IDisposable` but the Autofac `IContainer` inside of it does. We should:\r\n\r\n1. [x] Update to Autofac.Extensions.DependencyInjection version 4.3.0 or later\r\n    - See https://autofac.readthedocs.io/en/latest/integration/aspnetcore.html#id3. We need this to make `AutofacServiceProvider` disposable\r\n1. [x] Dispose the previous instance, if non-null. It will be non-null after the first job loop.\r\n\r\nAfter this is done we can safely put `IDisposable` things in the DI container.\r\n"},{"Id":"19230439464","Type":"IssuesEvent","CreatedAt":"2021-12-08T02:28:09","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8905","RelatedDescription":"Opened issue \"[Feature]: Put each job iteration into its own DI scope for JsonConfigurationJob descendants.\" (#8905) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nFollow up on https://github.com/NuGet/NuGetGallery/issues/7441.\n\n### The Elevator Pitch\n\nCurrently, DI container used in jobs that are based on `JsonConfigurationJob` is [disposed](https://github.com/NuGet/NuGet.Jobs/blob/af2c64924403c12ae45e5edb6012c23f052cea0e/src/NuGet.Jobs.Common/JsonConfigurationJob.cs#L83) on every job iteration. This may lead to an expensive object recreation on each iteration.\r\n\r\nInstead, we can consider introducing a scope for each job iteration which would allow jobs to specify which objects are to be recreated on each iteration and which ones to transcend them.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"19227048407","Type":"PullRequestEvent","CreatedAt":"2021-12-07T20:56:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8904","RelatedDescription":"Merged pull request \"Change to official NuGet.exe for tests (4.5.0 private build -> 4.5.3)\" (#8904) at NuGet/NuGetGallery","RelatedBody":"Before we moved to app services, we did not have a HTTPS-compatible domain name for staging slot on gallery. Now we do :). We can move away from a private build of nuget.exe which allowed for specific certificates to be trusted even for domain name mismatch.\r\n\r\nI tried moving to 5.11.0 but this caused some test failures which need not be investigated or fixed at this time.\r\n\r\nThe private build of nuget.exe that is being replaced here is only test signed which means that a strong name bypass must be installed on the test agent. This is not ideal for centrally managed test agents.\r\n\r\nWith this change, we can run Gallery functional tests on managed agents that have the proper dependencies installed (namely VS 2015)."},{"Id":"19226804649","Type":"PullRequestEvent","CreatedAt":"2021-12-07T20:36:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8904","RelatedDescription":"Opened pull request \"Change to official NuGet.exe for tests (4.5.0 private build -> 4.5.3)\" (#8904) at NuGet/NuGetGallery","RelatedBody":"Before we moved to app services, we did not have a HTTPS-compatible domain name for staging slot on gallery. Now we do :). We can move away from a private build of nuget.exe which allowed for specific certificates to be trusted even for domain name mismatch.\r\n\r\nI tried moving to 5.11.0 but this caused some test failures which need not be investigated or fixed at this time.\r\n\r\nThe private build of nuget.exe that is being replaced here is only test signed which means that a strong name bypass must be installed on the test agent. This is not ideal for centrally managed test agents.\r\n\r\nWith this change, we can run Gallery functional tests on managed agents that have the proper dependencies installed (namely VS 2015)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"19292345841","Type":"IssuesEvent","CreatedAt":"2021-12-12T01:42:28","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11451","RelatedDescription":"Opened issue \"[Bug]: Avoid explicitly casting the result of GetService/GetServiceAsync, use the extension methods instead\" (#11451) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nVS\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nAddress https://github.com/NuGet/NuGet.Client/pull/4324/files#r737866598\n\n### Verbose Logs\n\n_No response_"},{"Id":"19287325191","Type":"IssuesEvent","CreatedAt":"2021-12-11T06:38:57","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11450","RelatedDescription":"Opened issue \"[DCR]: NuGet SDK resolver should cache global.json itself\" (#11450) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently the NuGet SDK resolver relies on the MSBuild SDK resolver APIs to save state.  However, the state is not guaranteed to be thread-safe and so currently the NuGet SDK resolver is parsing global.json many times by Visual Studio.  This is because the state is only set after a resolver completes and the cache key is a build submission.  Visual Studio issues several design time builds will load global.json over and over.\r\n\r\n\n\n### Desired Behavior\n\nThe NuGet SDK resolver should have its own file cache that only loads a file once unless it has changed.\n\n### Additional Context\n\n_No response_"},{"Id":"19285238262","Type":"IssuesEvent","CreatedAt":"2021-12-10T23:16:56","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11449","RelatedDescription":"Opened issue \"Machine readable json output for dotnet list package\" (#11449) at NuGet/Home","RelatedBody":"Sub issue of https://github.com/NuGet/Home/issues/7752, `json` output only.\n\nMany organizations are required by regulation to audit packages that they're using in a repository.\n\nCurrently there's no easy way to produce a Software Bill of Material (SBOM) output which can be consumed by another auditing system or kept for records.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1410695861508526080","CreatedAt":"2021-07-01T20:24:37+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠ \nHave you recently experienced issues interacting with https://t.co/KVB7werYQh's Search API?… https://t.co/3eM1gicePx","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2021-12-13T05:30:30.3061383Z","RunDurationInMilliseconds":1565}