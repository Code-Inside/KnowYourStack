{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"31706858677","Type":"PullRequestEvent","CreatedAt":"2023-09-08T22:37:11","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9656","RelatedDescription":"Opened pull request \"Fix url frameworks tab\" (#9656) at NuGet/NuGetGallery","RelatedBody":"These buttons can now be opened in a new tab:\r\n\r\n<img width=\"616\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/58230697/ca2ded9e-3f4b-416e-8821-95829556dad1\">\r\n\r\nTesting: Enter any package on nuget page. Right-click on a button, click \"open in new tab\". It should open a new tab with the button contents displayed.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9283\r\n\r\nAfter discussing the issue of other buttons with Advay (Package Manager, PackageReference...), we reached the conclusion that these don't need to be opened in a new tab and hence abandoned further work on them. I have removed the changes I made that caused them to be broken."},{"Id":"31704175590","Type":"IssuesEvent","CreatedAt":"2023-09-08T19:41:32","Actor":"acdha","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9655","RelatedDescription":"Opened issue \"[Feature]: consider enabling TLS 1.3 for api.nuget.org\" (#9655) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n[The CDN used by api.nuget.org support TLS 1.2 but not 1.3](https://www.ssllabs.com/ssltest/analyze.html?d=api.nuget.org&s=13.107.246.71). In most cases this doesn't matter because TLS 1.2 hasn't been deprecated yet but I encountered a problem on a network which uses Palo Alto firewalls to do SSL inspection. The Palo Alto implementation has a long-running lack of support for RFC 5746 (I found references going back at least 3 years) which causes session negotiation with newer versions of OpenSSL to fail with a hard error (`error:0A000152:SSL routines::unsafe legacy renegotiation disabled`) when a server supports TLS 1.2 but not 1.3.\r\n\r\n\n\n### The Elevator Pitch\n\nIt's possible to configure OpenSSL to ignore this warning but I prefer not to train people to weaken security and since it's likely that TLS 1.3 adoption will become advisable at some point in the future, wanted to suggest that enabling it now could simplify life for a certain subset of users. The [Alpine Linux](https://gitlab.alpinelinux.org/alpine/infra/infra/-/issues/10799) team made the same change a few months ago.\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"31701610408","Type":"PullRequestEvent","CreatedAt":"2023-09-08T17:24:58","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9654","RelatedDescription":"Opened pull request \"Transition from Microsoft.Azure.KeyVault to Azure.Security.KeyVault\" (#9654) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/4704\r\n\r\nTransition from Microsoft.Azure.KeyVault to Azure.Security.KeyVault package dependency. Former one is deprecated.\r\nI manually tested this change in [Gallery dev environment](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1478870)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"31710594981","Type":"IssuesEvent","CreatedAt":"2023-09-09T08:03:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12855","RelatedDescription":"Closed issue \"NuGetAudit: read vulnerability files with System.Text.Json\" (#12855) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nThe initial implementation of NuGetAudit was done quickly, to meet shipping dates. This meant using Newtonsoft.Json to read the vulnerability files, since we don't yet use System.Text.Json anywhere in NuGet.Protocol.\n\n### Desired Behavior\n\nHere's the results of a quick benchmark I put together:\r\n\r\n|        Method |              Runtime |       Mean |    Error |   StdDev |     Gen0 |    Gen1 |  Allocated |\r\n|-------------- |--------------------- |-----------:|---------:|---------:|---------:|--------:|-----------:|\r\n|  NJ  |             .NET 8.0 | 1,819.6 us |  5.19 us |  4.86 us |  68.3594 | 37.1094 |  707.38 KB |\r\n| STJ|             .NET 8.0 |   954.7 us | 18.84 us | 23.82 us |  15.6250 |  4.8828 |  168.33 KB |\r\n|  NJ | .NET Framework 4.7.2 | 3,653.8 us | 19.91 us | 16.62 us | 183.5938 | 66.4063 | 1146.55 KB |\r\n| STJ | .NET Framework 4.7.2 | 2,126.5 us |  8.92 us |  7.91 us |  66.4063 | 19.5313 |  419.91 KB |\r\n\r\nRestore is optimized to read the file once per restore, no matter how many projects in the solution. So, a once-off 1ms saving isn't going to be noticeable to anyone. However, perhaps in a real restore, when other work is happening on other threads, reducing GC pauses will have a more significant impact.\r\n\n\n### Additional Context\n\nThings to check:\r\n\r\n* Does MSBuild already ship System.Text.Json.dll, or do we have to include it in our VSIX for MSBuild CLI scenarios?\r\n* Risk of VS perf test regression if nothing else loads System.Text.Json.dll in a measured scenario. It's not feasible to port ALL Newtonsoft.Json usage to System.Text.Json in one PR, so from NuGet's perspective it will be an additional assembly loaded. However, there is a very good chance that some VS platform component, like settings, accounts, etc, already uses System.Text.Json, so the assembly will probably be loaded already.\r\n* Any other compliance work?"},{"Id":"31710418448","Type":"IssuesEvent","CreatedAt":"2023-09-09T07:32:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12875","RelatedDescription":"Closed issue \"NuGetAudit should not warn when no vulnerability data is available\" (#12875) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nWith the initial previews of NuGetAudit, when none of the package sources have vulnerability data, and the project explicitly enables NuGetAudit (as opposed to enabled by default), then NuGet raises the NU1905 warning.\n\n### Desired Behavior\n\nDon't warn.  It's confusing that audit runs, and warns about packages whether the feature is explicitly enabled, or left for default, but the \"no vulnerability\" warning is \n\n### Additional Context\n\nEarlier draft of the PR https://github.com/NuGet/NuGet.Client/pull/5398 proposed a separate property to enable/disable the warning, but there was no support, and multiple oppositions."},{"Id":"31697432597","Type":"IssuesEvent","CreatedAt":"2023-09-08T14:26:46","Actor":"mungojam","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12876","RelatedDescription":"Opened issue \"List explicitly what the 'reserved prefix' is for packages\" (#12876) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nIf we try to validate the suitability of certain nuget packages through the 'prefix reserved' flag, there doesn't appear to be a way to check which prefix has actually been reserved.\r\n\r\nFor example:\r\n\r\nhttps://www.nuget.org/packages/dotnet-ef\r\n\r\nIs the prefix `dotnet-`? If so we could trust all `dotnet-`, but if it's just `dotnet-ef`, then we can't.\r\n\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"31692380400","Type":"IssuesEvent","CreatedAt":"2023-09-08T11:05:41","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12875","RelatedDescription":"Opened issue \"NuGetAudit should not warn when no vulnerability data is available\" (#12875) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nWith the initial previews of NuGetAudit, when none of the package sources have vulnerability data, and the project explicitly enables NuGetAudit (as opposed to enabled by default), then NuGet raises the NU1905 warning.\n\n### Desired Behavior\n\nDon't warn.  It's confusing that audit runs, and warns about packages whether the feature is explicitly enabled, or left for default, but the \"no vulnerability\" warning is \n\n### Additional Context\n\nEarlier draft of the PR https://github.com/NuGet/NuGet.Client/pull/5398 proposed a separate property to enable/disable the warning, but there was no support, and multiple oppositions."},{"Id":"31683951979","Type":"PullRequestEvent","CreatedAt":"2023-09-08T04:00:38","Actor":"mkArtakMSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/12874","RelatedDescription":"Opened pull request \"Proposal for package grouping to enable release staging and release deprecation\" (#12874) at NuGet/Home","RelatedBody":"This proposal introduces a concept for logical grouping of packages published to NuGet. This will allow one to easily identify all the packages released as part of a single product version release as well as request bulk-processing for a set of packages which belong to the same release. For example, all packages published as part of .NET 8 Preview 5 release will be staged together and then also can be deprecated together by a single call to NuGet APIs."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"},{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-09-10T03:30:22.7947651Z","RunDurationInMilliseconds":985}