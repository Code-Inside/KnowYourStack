{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12608749125","Type":"IssuesEvent","CreatedAt":"2020-06-11T23:20:49","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7906","RelatedDescription":"Closed issue \"[Package Renames] A/B test popularity transfers\" (#7906) at NuGet/NuGetGallery","RelatedBody":"* [x] Delete existing `012` search resources?? Check with Joel\r\n* [x] Create new `012` resources. Enable popularity transfers for this deployment (see https://github.com/NuGet/NuGetGallery/issues/7977)\r\n* [x] Add popularity transfers to PROD\r\n* [x] Verify search results\r\n* [x] Create service index for Visual Studio testing\r\n* [x] Split traffic at 50% (started 5/2/6/2020 @ 2:15pm PST)  \r\n* [x] Send instructions to internal partner team on how to test the A/B test instance.\r\n* [x] Wait a week, then evaluate search relevancy changes \r\n* ⚠ Set traffic to 0% (6/8/2020 @ 3:32pm PST)\r\n\r\n```\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-08T21:20:00Z');\r\n```\r\n\r\nQuery to compare clicks on Azure.Storage.Blobs:\r\n\r\n```\r\n// Clicks on first page %\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-02T21:20:00Z');\r\ncustomMetrics\r\n| where timestamp > minTimestamp \r\n| where timestamp < maxTimestamp\r\n| where name == \"BrowserSearchSelection\"\r\n| extend isPreviewSearch = customDimensions.IsPreviewSearch == \"True\"\r\n| extend PackageId = tostring(customDimensions.PackageId)\r\n| where\r\n  PackageId == \"WindowsAzure.Storage\" or\r\n  PackageId startswith \"Microsoft.Azure.Storage\" or\r\n  PackageId startswith \"Azure.Storage.\"\r\n| where PackageId !in (\"Microsoft.Azure.Storage.DataMovement\", \"Microsoft.Azure.Storage.CPP.v140\")\r\n//| where PackageId startswith \"Microsoft.Azure.KeyVault\" or PackageId startswith \"Azure.Security.KeyVault\"\r\n| summarize count() by isPreviewSearch, PackageId\r\n| where isPreviewSearch == true\r\n| render piechart \r\n```"},{"Id":"12608599471","Type":"IssuesEvent","CreatedAt":"2020-06-11T22:54:16","Actor":"lostmsu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8042","RelatedDescription":"Opened issue \"Increase package size limit/and or support LZMA2\" (#8042) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nI am trying to package TensorFlow binaries, but the uncompressed size of a single 2.x GPU binary is 1.3GB. ZIP+Deflate-compressed is ~400MB. XZ+LZMA2-compressed is ~100MB, but NuGet does not support LZMA2 compression, meaning unpacking needs installation scripts, which are no longer supported.\r\n\r\n### Describe the solution you'd like\r\nOverall, I think supporting LZMA2 or even just ZIP+LZMA would be the best scenario, but the client team already closed that issue for whatever reason https://github.com/NuGet/Home/issues/890 . So as an alternative for my scenario it would be sufficient to up the limit to 500MB, or better 750MB to be future-proof.\r\n\r\n### Additional context\r\nN/A"},{"Id":"12608584624","Type":"PullRequestEvent","CreatedAt":"2020-06-11T22:51:38","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8040","RelatedDescription":"Closed pull request \"API key generation without defaulting to the current owner selection #8034\" (#8040) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323\r\n\r\n\r\n\r\n"},{"Id":"12605813499","Type":"PullRequestEvent","CreatedAt":"2020-06-11T17:08:17","Actor":"donald-j","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8041","RelatedDescription":"Opened pull request \"Make the header colorblind-friendly.\" (#8041) at NuGet/NuGetGallery","RelatedBody":"The issue was introduced in #8023 and affected the UX for colorblind users."},{"Id":"12605016356","Type":"PullRequestEvent","CreatedAt":"2020-06-11T15:49:29","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8040","RelatedDescription":"Opened pull request \"API key generation without defaulting to the current owner selection #8034\" (#8040) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323"},{"Id":"12598739638","Type":"PullRequestEvent","CreatedAt":"2020-06-11T03:49:35","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8039","RelatedDescription":"Opened pull request \"Make statistical significant figures formatting culture-sensitive\" (#8039) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8032\r\n\r\nAdds culture-awareness to string operations creating short numbers for Y-axis on graphs. Added culture cases to unit tests. Examples:\r\n\r\nfr-FR:\r\n![image](https://user-images.githubusercontent.com/14225979/84342945-33531000-abea-11ea-94c0-410558360bbe.png)\r\n\r\nen-US:\r\n![image](https://user-images.githubusercontent.com/14225979/84342961-3ea63b80-abea-11ea-80f8-9d4e900f3c5e.png)"},{"Id":"12596937452","Type":"PullRequestEvent","CreatedAt":"2020-06-10T22:22:30","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8029","RelatedDescription":"Merged pull request \"Added index for package dependencies table\" (#8029) at NuGet/NuGetGallery","RelatedBody":"- Implemented an up and down for creating indexes and removing indexes in the package dependencies table\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3220"},{"Id":"12596581970","Type":"IssuesEvent","CreatedAt":"2020-06-10T21:32:37","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8038","RelatedDescription":"Opened issue \"[Dependents] Add configurable cache time\" (#8038) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12610375475","Type":"IssuesEvent","CreatedAt":"2020-06-12T04:46:31","Actor":"archanasoni","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9575","RelatedDescription":"Closed issue \"Issue with custom target file when package is referenced in multilevel hierarchy\" (#9575) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nWe have native dlls to get bundled with nuget package targeting .NET Core 3.1. \r\nWe are able to successfully package native dlls with our nuget package.\r\nOur requirement is when package gets installed these native dll should get copied into Application bin directory..\r\nTo achieve this we have custom target file something like:\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <NativeLibs Include=\"$(MSBuildThisFileDirectory)**\\*.dll\" />\r\n    <None Include=\"@(NativeLibs)\">\r\n      <Link>%(RecursiveDir)%(FileName)%(Extension)</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n\r\nThis works fine when Proj B installs our package, but now suppose Project B is library and another Project C installs it then it will be something like Project C=>Project B=> Project A\r\nHere Project A contains custom target file along with native dlls . These native dll must get copied in bin directory of Project C..\r\n\r\nHow can we achieve it ?\r\n\r\nAlso is there a way through which via assembly name we can get the Nuget Package info and installed location ? Please note this assembly will reside in Application bin directory... \r\n\r\nRegards,\r\nArchana\r\n "},{"Id":"12609708614","Type":"IssuesEvent","CreatedAt":"2020-06-12T02:31:14","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9095","RelatedDescription":"Closed issue \"Having a (transitive) PackageReference and a ProjectReference to the same assembly leads to an error\" (#9095) at NuGet/Home","RelatedBody":"(Moved from https://github.com/dotnet/project-system/issues/4663 and opened on behalf of @felixhirt)\r\n\r\nI have the following situation (everything with the new .csproj project system):\r\n\"Application\" has \r\n   ProjectReference to \"LibA\"\r\n   ProjectReference to \"LibB\"\r\nand \"LibA\" has\r\n   PackageReference to \"LibB\"\r\n\r\nThis causes a build error in VisualStudio (2019, RC4) because all the PackageReferences are not found. A manual \"dotnet restore\" shows that \"An item with the same key has already been added. Key: (LibB, X.X.X)\"\r\n\r\nThe error only happens if both versions are the same. If i increment the version of LibB e.g. in the ProjectReference, it works fine (and uses the newer version)\r\n\r\nSearching did not yield much for me, i only found [4421](https://github.com/dotnet/project-system/issues/4421) which seems to be similar, but doesnt have much follow up (and no build error, thats why i opened a new issue)\r\n\r\nIf need be, i can try to create a simple reproduction solution"},{"Id":"12608626509","Type":"IssuesEvent","CreatedAt":"2020-06-11T22:59:01","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9674","RelatedDescription":"Opened issue \"Renable MsbuildRestore_StaticGraphEvaluation_CleanupAssetsForUnsupportedProjectsAsync after app.config stuff is figured out\" (#9674) at NuGet/Home","RelatedBody":"In order to fix https://github.com/NuGet/Home/issues/9665 we had to do https://github.com/NuGet/NuGet.Client/pull/3441 but that breaks a test.\r\n\r\nOnce the app.config stuff is figured out, we can generate the binding redirects on the fly and re-enable the test."},{"Id":"12608344284","Type":"IssuesEvent","CreatedAt":"2020-06-11T22:12:29","Actor":"thomaslevesque","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9673","RelatedDescription":"Opened issue \"configure.ps1 & build.ps1 error when using Powershell Core\" (#9673) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nUsing PowerShell Core, when I run configure.ps1 and build.ps1 in order to build NuGet.Client, an error occurs:\r\n\r\n```\r\nException calling \"CompareTo\" with \"1\" argument(s): \"Cannot process argument because the value of argument \"version\" is not valid. Change the value of the \"version\" argument and run the operation again.\"\r\nAt D:\\git\\NuGet.Client\\build\\common.ps1:21 char:5\r\n+ if ($PSVersionTable.PSVersion.CompareTo($Version) -lt 0) {\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\r\n+ FullyQualifiedErrorId : PSArgumentException\r\n```\r\n\r\nThe error doesn't prevent the rest of the script from executing.\r\nWhen using Windows Powershell, it works without error\r\n\r\nPowershell version: 6.2.3\r\n\r\nNuGet product used: NuGet.Client build scripts\r\n\r\nNuGet version: N/A (commit fc9dd52fcdf3c9a299a96de39b641b7c91779b5e)\r\n\r\ndotnet.exe --version: 5.0.100-preview.4.20258.7\r\n\r\nVS version: VS2019 (16.6.0)\r\n\r\nOS version: Windows 10 1903 (Build 18362.900)\r\n\r\nWorked before? No idea... probably not\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Clone the Nuget.Client repo\r\n\r\n2. Run configure.ps1. Note the error when the script starts\r\n\r\n3. Same with build.ps1\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nN/A\r\n\r\n### Sample Project\r\n\r\nN/A\r\n"},{"Id":"12608182246","Type":"IssuesEvent","CreatedAt":"2020-06-11T21:49:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9672","RelatedDescription":"Opened issue \"NuGet.exe restore with a PackageReference with exclude=build only does not interpret it correctly. \" (#9672) at NuGet/Home","RelatedBody":"Take an example project like: \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"nuget.common\" Version=\"5.6.0\" ExcludeAssets=\"build\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nNuGet.exe would restore with Include=\"all\"\r\nMSbuild.exe would restore with excludeassets build. \r\n\r\nThe problem is that the the flags don't round trip. See relevant code: \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/fc9dd52fcdf3c9a299a96de39b641b7c91779b5e/src/NuGet.Core/NuGet.LibraryModel/LibraryIncludeFlagUtils.cs#L26-L69\r\n\r\n`compile, runtime, contentFiles, native, analyzers, buildtransitive` ends up being parsed to all."},{"Id":"12606922632","Type":"IssuesEvent","CreatedAt":"2020-06-11T19:12:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1820","RelatedDescription":"Closed issue \"NuGet.config settings UI to represent hierarchy of config files -- Design Discussion\" (#1820) at NuGet/Home","RelatedBody":"https://github.com/NuGet/Home/wiki/Ideas-about-NuGet-Hierarchical-Setting\n"},{"Id":"12606358651","Type":"IssuesEvent","CreatedAt":"2020-06-11T18:07:45","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9671","RelatedDescription":"Opened issue \"Apply VSSDKTestFix to more UI Test Classes\" (#9671) at NuGet/Home","RelatedBody":"I added the VSSDKTestFix documented here https://aka.ms/vssdktestfx in https://github.com/NuGet/NuGet.Client/pull/3436\r\n\r\nWe should apply this fix to more classes, so that using certain JTF methods don't eventually cause us problems."},{"Id":"12606318893","Type":"IssuesEvent","CreatedAt":"2020-06-11T18:03:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9187","RelatedDescription":"Closed issue \"migrating to nuget v3 \" (#9187) at NuGet/Home","RelatedBody":"I have been using Nuget.core latest version in my .net project  to Connect to the package repository I have sitting in in Azure Artifacts.\r\n\r\nsomething changed in the passed few days and the authentication using my pat failed. (i checked it, its not that).\r\nI saw that azure decided to switch their connection to feeds using nuget v3. and there is no manual doing it other then with 1) .net core cli.  2) visual studio package manager. 3) nuget.exe.\r\n\r\ndoes that mean i can't use c# code using a (nuget client package) to connect to a my feed anymore?\r\n\r\n\r\n"},{"Id":"12606258481","Type":"IssuesEvent","CreatedAt":"2020-06-11T17:56:52","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9118","RelatedDescription":"Closed issue \"nuget config <configkey> does not return default values\" (#9118) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe):\r\n\r\nNuGet version (5.1.0.6013):\r\n\r\nOS version (Windows 10 Enterprise 1809 17763.914)\r\n\r\nRepro steps\r\n\r\n1. Verify that the computer level nuget.config file %AppData%/Roaming/Nuget does not contain **repositoryPath** configuration data.\r\n2. If using a user level configuration file, verify that it does not contain **repositoryPath** configuration data.\r\n3. Open command line at root of C:\\ drive, (or any location that does not have a nuget.config file in any of the paths up to the root.)\r\n4. Execute: nuget config repositoryPath\r\n5. Notice that the command returns Key 'repositoryPath' not found.\r\n\r\nThe above can also be replicated with **globalPackagesFolder** or any other config section key that has a default value if undefined in a configuration file.\r\n\r\nI would expect the command to return the default value (perhaps with some standard way of notating that it is the default value as opposed to derived from a configuration file.)\r\n\r\n...\r\n\r\n\r\n"},{"Id":"12606255338","Type":"IssuesEvent","CreatedAt":"2020-06-11T17:56:30","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9670","RelatedDescription":"Opened issue \"Configs and defaults\" (#9670) at NuGet/Home","RelatedBody":"See also: https://github.com/NuGet/Home/issues/9118\r\n\r\nWe need to examine how we handle configs and defaults."},{"Id":"12606184808","Type":"IssuesEvent","CreatedAt":"2020-06-11T17:48:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9116","RelatedDescription":"Closed issue \"NuGet unnecessarily selects prerelease dependences when installing a prerelease package\" (#9116) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.4.0.6315\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 1909 (18363.592)\r\n\r\nIf I restore a prerelease package with dependency resolution highest, prerelease versions of transitive dependencies are installed even when there isn't an explicit reference to a prerelease version.\r\n\r\nObviously, prerelease packages should be *allowed* to reference other prerelease packages. But I don't think NuGet should select prerelease dependencies that aren't explicitly required unless I pass `-Prerelease` in.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Extract [repro.zip](https://github.com/NuGet/Home/files/4133895/repro.zip)\r\n\r\n2. Run repro.ps1\r\n\r\nExpected: Version 3.2.0 of package C to be installed\r\nActual: Version 3.3.0-beta of package C is installed"},{"Id":"12606162905","Type":"IssuesEvent","CreatedAt":"2020-06-11T17:46:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9115","RelatedDescription":"Closed issue \"Better tools / options to manage packages across multiple solutions\" (#9115) at NuGet/Home","RelatedBody":"This is basically feedback / feature request so I omitted some of the bug-report-style elements of the template.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuGet.exe Version: 5.4.0.6315\r\nVisual Studio UI 16.3.4\r\n\r\nOS version:\r\nWin10 1909 10.0.18363 (18363.592)\r\n\r\n## Our situation\r\n\r\nWe build an application that includes some .NET components, some of which rely on some NuGet packages. We've also started to make some of our own NuGet packages to share amongst different codebases and partition our code.\r\n\r\nThis application's code is spread across many solutions, but when the app is built and run, a lot of it ends up in the same process - this has implications like everyone needs to use the same version of .NET assemblies / nuget packages.\r\n\r\nWhen someone working on one part wants to update one of the nuget packages to a higher version, they currently face some problems. It's all too easy for someone to forget to update one thing, and updating everything is a chore. The Consolidate tab in the VS UI is very useful within a single solution, but we have many solutions.\r\n\r\n## Proposal\r\n\r\nWe'd like a tool which could tell us when this situation has occurred (potentially failing the build) and help us apply consistent versions. \r\n\r\nThe way I imagine this working is a command line tool which takes a collection of projects or package configs (or lock files, maybe) and emits an XML or JSON file with package names and versions. We can tweak an XML or JSON file and run the tool to apply a consistent version."},{"Id":"12606142384","Type":"IssuesEvent","CreatedAt":"2020-06-11T17:44:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9141","RelatedDescription":"Closed issue \"$ENV_VARIABLE doesn't work in my mac\" (#9141) at NuGet/Home","RelatedBody":"this comment\n\n&lt;!--\n            Used to specify the default location to expand packages.\n            See: nuget.exe help install\n            See: nuget.exe help update\n\n            In this example, %PACKAGEHOME% is an environment variable. On Mac/Linux,\n            use $PACKAGE_HOME/External as the value.\n        --&gt;\n\nsuggests that in mac I need to use `$` for environment variables but It doesn't work, it works with %ENV_VARIABLE%\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 0ea1390e-db36-6759-3095-ebab9d546fdb\n* Version Independent ID: ca88d8c6-0515-a267-aac3-a508c54157ab\n* Content: [nuget.config File Reference](https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file)\n* Content Source: [docs/reference/nuget-config-file.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/reference/nuget-config-file.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-12T05:30:41.1611158Z","RunDurationInMilliseconds":2049}