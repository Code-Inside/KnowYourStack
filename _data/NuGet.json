{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"28961166450","Type":"IssuesEvent","CreatedAt":"2023-05-10T02:41:46","Actor":"AsakaJX","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9497","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Can't install package, but .net version is right.\" (#9497) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI want to install PowerShell package by Microsoft in VSCode, but I'm getting this weird error: \r\n`error: NU1202: Package PowerShell 7.3.4 is not compatible with net7.0 (.NETCoreApp,Version=v7.0). Package PowerShell 7.3.4 supports: net7.0 (.NETCoreApp,Version=v7.0) / any\r\nerror: NU1212: Invalid project-package combination for PowerShell 7.3.4. DotnetToolReference project style can only contain references of the DotnetTool type \r\nerror: Package 'PowerShell' is incompatible with 'all' frameworks in project 'd:/Projects/Eva/Source/Eva.csproj'.`\n\n### Repro Steps\n\nSteps to reproduce:\r\n1. Open Nuget Gallery\r\n2. Search for PowerShell package.\r\n3. Try to install package\n\n### Expected Behavior\n\nPackage should install fine lol\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"28956780329","Type":"IssuesEvent","CreatedAt":"2023-05-09T21:02:38","Actor":"mkArtakMSFT","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9496","RelatedDescription":"Closed issue \"[Feature]: Simplify package lookup UI\" (#9496) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nFor many packages the NuGet UI has become very loaded and hard to read, given the number of packages on the list. It would be great to simplify it and I think it's possible.\r\n\r\nFor context, this is my second suggestion regarding making this UI simpler: https://github.com/NuGet/NuGetGallery/issues/9494\n\n### The Elevator Pitch\n\nThanks for filing this, @JonDouglas.\r\nHere are some more thoughts about this.\r\nI think the goal of this page (for a given package) is to help the user to make a choice regarding which version of the package to take dependency on. As a framework and/or library author, I think it would make sense to (by default) show only the list of supported most recent packages from each major version and then provide options to see detailed list for all the minor versions too.\r\nThis can simplify the UI dramatically and result in shrinking the below view for [this package](https://www.nuget.org/packages/NuGet.Packaging) to the following table:\r\n<img width=\"418\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/34246760/80076ff4-441b-4793-9f3b-415d6c4c2524\">\r\n\r\n| Version | Downloads | Last Updated |\r\n| --- | --- | --- |\r\n| 6.5.0 | 139,893 | 3 months ago |\r\n| 5.11.3 | 214,167 | 7 months ago |\r\n| 4.9.6 | 1,485 | 7 months ago |\r\n| 3.5.0 | 477,579 | 12/14/2016 |\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28956459460","Type":"IssuesEvent","CreatedAt":"2023-05-09T20:45:29","Actor":"mkArtakMSFT","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9496","RelatedDescription":"Opened issue \"[Feature]: \" (#9496) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nFor many packages the NuGet UI has become very loaded and hard to read, given the number of packages on the list. It would be great to simplify it and I think it's possible.\r\n\r\nFor context, this is my second suggestion regarding making this UI simpler: https://github.com/NuGet/NuGetGallery/issues/9494\n\n### The Elevator Pitch\n\nThanks for filing this, @JonDouglas.\r\nHere are some more thoughts about this.\r\nI think the goal of this page (for a given package) is to help the user to make a choice regarding which version of the package to take dependency on. As a framework and/or library author, I think it would make sense to (by default) show only the list of supported most recent packages from each major version and then provide options to see detailed list for all the minor versions too.\r\nThis can simplify the UI dramatically and result in shrinking the below view for [this package](https://www.nuget.org/packages/NuGet.Packaging) to the following table:\r\n<img width=\"418\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/34246760/80076ff4-441b-4793-9f3b-415d6c4c2524\">\r\n\r\n| Version | Downloads | Last Updated |\r\n| --- | --- | --- |\r\n| 6.5.0 | 139,893 | 3 months ago |\r\n| 5.11.3 | 214,167 | 7 months ago |\r\n| 4.9.6 | 1,485 | 7 months ago |\r\n| 3.5.0 | 477,579 | 12/14/2016 |\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28934316812","Type":"PullRequestEvent","CreatedAt":"2023-05-09T04:02:16","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9495","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.05.08]RI of dev into main\" (#9495) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"28897419608","Type":"IssuesEvent","CreatedAt":"2023-05-07T06:23:25","Actor":"phnx47","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9330","RelatedDescription":"Closed issue \"Nuget Readme: whitelist avatars.githubusercontent.com\" (#9330) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\r\n\r\nPlease can we whitelist the domain `avatars.githubusercontent.com` for Nuget.org package readme’s.\r\n\r\n### The Elevator Pitch\r\n\r\nI have section Supporters with user avatars, I prefer use pictures from `avatars.githubusercontent.com`.\r\n\r\n### Additional Context and Details\r\n\r\nExample: https://github.com/prom-client-net/prom-client#supporters"},{"Id":"28879511196","Type":"PullRequestEvent","CreatedAt":"2023-05-05T16:21:28","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9493","RelatedDescription":"Merged pull request \"Removed EF dependency from NuGet.Services.Entities project\" (#9493) at NuGet/NuGetGallery","RelatedBody":"Removed EF-specific data annotations from NuGet.Services.Entities and replaced them with fluent API equivalents in `EntitiesContext` (which lives in a different assembly).\r\n\r\nThis should allow us to reuse entity models in EF core when we decide to switch.\r\n\r\nChecked that the change has no effect on migrations: running `Add-Migration` produces empty migration."},{"Id":"28861619251","Type":"IssuesEvent","CreatedAt":"2023-05-04T22:56:06","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9494","RelatedDescription":"Opened issue \"[Feature]: Provide filters for deprecated/vulnerable on package version list.\" (#9494) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nFor some packages, there is an extensive package version history that expands an entire screen. Many older packages may be considered deprecated or vulnerable in some fashion which can take up majority of the space of what is a \"usable\" package in various situations.\r\n\r\nThe pitch would be to add deprecated/vulnerable filters on the package `versions` tab to make this easier to manage viewing.\r\n\r\nHere's an example of a package that has usable versions for different versions of the .NET Framework / Core that could benefit from such filtering:\r\n\r\nhttps://www.nuget.org/packages/Microsoft.AspNetCore.DataProtection.StackExchangeRedis\r\n\r\n<img width=\"1863\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1288848/236347162-f7bce332-45cc-4d23-8a02-440d9260213a.png\">\r\n\r\nOther filters that could be helpful here are: Date, SemVer, preview, downloads, etc\r\n\r\n**Credit:** Artak Mkrtchyan for the excellent suggestion\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"28953373799","Type":"IssuesEvent","CreatedAt":"2023-05-09T18:18:26","Actor":"orirabi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12579","RelatedDescription":"Opened issue \"Enable to set version of transitive dependency without adding it explicitly\" (#12579) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nSay we have the following dependencies:\r\n\r\nA requires B (v 1.0)\r\nB requires C (v 4.0)\r\n\r\nSay that there has been a vulnerability detected on C 4.0 and it is patched in 4.1 - how can I set that without upgrading my B version (either because there is no new version out, or for any other reason).\r\n\r\nToday, as far as I know, this requires us to add C as a direct dependency and specify the version to 4.1, but this has some downsides (for example, if at any time B will stop requiring C this will cause us to add a useless dependency).\r\n\r\nGradle has a feature explicitly for that: https://docs.gradle.org/current/userguide/dependency_constraints.html\r\n\r\nQuestion on StackOverflow for this: https://stackoverflow.com/q/73526370/2924784\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28952292508","Type":"IssuesEvent","CreatedAt":"2023-05-09T17:30:21","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12577","RelatedDescription":"Closed issue \"\"This project cannot be packaged because packaging has been disabled\" nag when IsPackable is false\" (#12577) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nMSBuild version 17.4.1+9a89d02ff for .NET\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen running `dotnet pack -c Release` with my project, [Elefess](https://github.com/QuantumToasted/Elefess), the following warning is emitted:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.102\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(203,6): warning :\r\nThis project cannot be packaged because packaging has been disabled. Add <IsPackable>true</IsPackable> to the project f\r\nile to enable producing a package from this project. [D:\\Code\\Elefess\\Elefess.TestHost.AspNetCore\\Elefess.TestHost.AspN\r\netCore.csproj]\r\n```\r\nI am unsure why this is the case - not only have I explicitly specified `<IsPackable>false</IsPackable>` in the .csproj, the project it depends on is just an xUnit project, which also has `<IsPackable>false</IsPackable>`, and does not give this warning.\n\n### Verbose Logs\n\n```shell\nRan with `dotnet pack -c Release --verbosity diag`:\r\n\r\n(Apologies for the third-party link - the output is past GitHub's 25MB limit, and I wasn't sure of a reputable long-lasting source to just dump that amount of text)\r\nhttps://cdn.discordapp.com/attachments/416139786961813514/1105263621023469638/output.txt\n```\n"},{"Id":"28949952242","Type":"IssuesEvent","CreatedAt":"2023-05-09T15:52:01","Actor":"JanKrivanek","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12578","RelatedDescription":"Opened issue \"NuGet package contentFiles don't get copied when downgrading package on incremental build\" (#12578) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nThis can be reproduced in Visual Studio 2022 version 17.2, using NuGet 6.2\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nCopying from the issue in MSBuild repo:\r\n\r\n\r\n> ### Issue Description\r\n> When using incremental builds, the NuGet contentFiles out of a NuGet package may not be copied when downgrading to an older version of the package. NuGet marks the files as PreserveNewest, which in this scenario is causing problems, as the \"newer\" files that we don't one during our downgrade, is preserved over the file we do want, the older version.\r\n> \r\n> ### Steps to Reproduce\r\n> Using a simple C# project, reference a NuGet package that contains contentFiles that have copyToOutput=true set.\r\n> In our case the NuGet package has a .dll in lib\\net472 and a contentFile in contentFiles\\any\\net472 (lets call it hash.txt, containing the hash of the dll, so it needs to remain in sync)\r\n> \r\n> 1. Reference version 1.0 of the NuGet package and build the project\r\n>   Notice the output contains version 1.0 of the .dll and the content file\r\n> 2. Update the NuGet reference to version 2.0 of the NuGet package and build the project\r\n>   Notice the output contains version 2.0 of the .dll and the content file\r\n> 3. Revert back to version 1.0 of the NuGet package and build the project and build the project\r\n>   Notice the output contains version 1.0 of the .dll and version 2.0 of the content file\r\n> \r\n> We have narrowed the issue down to the generated nuget.g.props file, which correctly mentions the \"hash.txt\" file with its metadata, of which the important one is\r\n> ``` \r\n> <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n> ```\r\n> MSBuild is not copying the file, because the file in the output is already newer and also does not consider this file during the IncrementalClean, as this target does not seem to do a timestamp check, only check for Orphans.\r\n> \r\n> For simplicity, lets say our nuspec files look like below, the work fine in general.\r\n> \r\n> ```\r\n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n> <package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\r\n>   <metadata>\r\n>     <id>PackageName</id>\r\n>     <version>2.0.0</version>\r\n>     <contentFiles>\r\n>       <!-- Include Assets as Content -->\r\n>       <files include=\"**\\*.*\" buildAction=\"None\" copyToOutput=\"true\" />\r\n>     </contentFiles>\r\n>     <dependencies>\r\n>       <group targetFramework=\".NETFramework4.7.2\" />\r\n>     </dependencies>\r\n>   </metadata>\r\n>   <files>\r\n>     <file src=\"bin\\Release\\AssemblyName.dll\" target=\"lib\\net472\" />\r\n>     <file src=\"bin\\Release\\Hash.txt\" target=\"contentFiles\\any\\net472\" />\r\n>   </files>\r\n> </package>\r\n> ```\r\n> ### Expected Behavior\r\n> We would expect MSBuild to understand the contentFiles need to be replaced with the previous version\r\n> \r\n> ### Actual Behavior\r\n> MSBuild ignores the copy step as the target file is newer\r\n> \r\n> ### Analysis\r\n> We believe this problem goes back to the generated nuget.g.props file, when setting copyToOutput=\"true\" in the nuspec file, NuGet always flags the files with \"PreserveNewest\", while we believe it should treat it the same as the libraries, these are correctly copied when downgrading a package version.\r\n> Giving the package builder an option to say the copy step should use \"Always\" it would help, but this would add unnecessary build time as well. While only None, PreserveNewest and Always are available in MSBuild, an option to specify \"copy if different\" would be best, skip if the file is the same, otherwise copy. Which is basically what \"Always\" is supposed to do, only always does an overwrite even if the file is the same, which depending on the amount of files comes with a price and IO load.\r\n> \r\n> ### Versions & Configurations\r\n> This can be reproduced in Visual Studio 2022 version 17.2, using NuGet 6.2\r\n> \r\n> ### Workarround\r\n> We managed to find a \"hack\" to influence the behaviour in 2 ways, both using Always instead of PreserveNewest, which for our 1200 csproj files, add some additional build time.\r\n> \r\n> 1. Update all our NuGet packages .props files to set a different value for the CopyToOutputDirectory\r\n> ```\r\n> <ItemGroup> \r\n>   <None Update=\"@(None)\">\r\n>     <CopyToOutputDirectory Condition=\"%(CopyToOutputDirectory) == 'PreserveNewest'\">Always</CopyToOutputDirectory>\r\n>   </None>\r\n> </ItemGroup>\r\n> ```\r\n> 2. Update all None includes from our NuGet packages to always copy to the output direct.\r\n> Put this in the Directory.Build.Targets\r\n> ```\r\n> <ItemGroup> \r\n>   <None Update=\"@(None)\">\r\n>     <CopyToOutputDirectory Condition=\"%(CopyToOutputDirectory) == 'PreserveNewest' AND $([System.String]::new('%(NuGetPackageId)').Contains('CompanyPrefix.'))\">Always</CopyToOutputDirectory>\r\n>   </None>\r\n> </ItemGroup>\r\n> ```\n\n### Verbose Logs\n\n_No response_"},{"Id":"28940069515","Type":"IssuesEvent","CreatedAt":"2023-05-09T09:10:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/12544","RelatedDescription":"Reopened issue \"Pack: Get ProjectReference package id at pack time, not restore time\" (#12544) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n7.0.203\n\n### Worked before?\n\nno\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nGiven a package which declares a package ID prefix for all consumers of it.\r\nE.g. useful to encapsulate a reserved prefix on nuget.org to lots of repositories.\r\n\r\nThis is done by setting the ```PackageId``` property in the _build\\\\[package id].props_ file of the package.\r\n\r\nOn the consumer side this package is referenced in the _Directory.Build.props_ on solution level to have it enabled to all projects.\r\nThe generated NuGet packages now have the declared prefix BUT: dependencies in the package are missing the prefix - only the project name is there.\r\n\r\nSample to illustrate / reproduce: https://github.com/Sam13/dotnet-sdk-common-nuget-prefix-issue\r\n- ```dotnet build DefineGlobalNuGetPrefix/DefineGlobalNuGetPrefix.sln``` -> You get _local-nuget-test-feed/MyPrefix.DefineGlobalNuGetPrefix.1.0.0.nupkg_\r\n- ```dotnet build ConsumeGlobalNuGetPrefix/ConsumeGlobalNuGetPrefix.sln``` -> You get _local-nuget-test-feed/MyPrefix.TestContract.1.0.0.nupkg_ and _local-nuget-test-feed/MyPrefix.TestImplementation.1.0.0.nupkg_\r\n- The dependencies of _MyPrefix.TestImplementation.1.0.0.nupkg_ point to _TestContract_ **but should be _MyPrefix.TestContract_**\r\n![image](https://user-images.githubusercontent.com/2196081/233299198-82cb44b6-52b2-4410-8a17-5ba4aad76d38.png)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"28931733553","Type":"IssuesEvent","CreatedAt":"2023-05-09T00:20:27","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12544","RelatedDescription":"Closed issue \"Pack: Incorrect dependency id from project reference when package id declared in another package\" (#12544) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n7.0.203\n\n### Worked before?\n\nno\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nGiven a package which declares a package ID prefix for all consumers of it.\r\nE.g. useful to encapsulate a reserved prefix on nuget.org to lots of repositories.\r\n\r\nThis is done by setting the ```PackageId``` property in the _build\\\\[package id].props_ file of the package.\r\n\r\nOn the consumer side this package is referenced in the _Directory.Build.props_ on solution level to have it enabled to all projects.\r\nThe generated NuGet packages now have the declared prefix BUT: dependencies in the package are missing the prefix - only the project name is there.\r\n\r\nSample to illustrate / reproduce: https://github.com/Sam13/dotnet-sdk-common-nuget-prefix-issue\r\n- ```dotnet build DefineGlobalNuGetPrefix/DefineGlobalNuGetPrefix.sln``` -> You get _local-nuget-test-feed/MyPrefix.DefineGlobalNuGetPrefix.1.0.0.nupkg_\r\n- ```dotnet build ConsumeGlobalNuGetPrefix/ConsumeGlobalNuGetPrefix.sln``` -> You get _local-nuget-test-feed/MyPrefix.TestContract.1.0.0.nupkg_ and _local-nuget-test-feed/MyPrefix.TestImplementation.1.0.0.nupkg_\r\n- The dependencies of _MyPrefix.TestImplementation.1.0.0.nupkg_ point to _TestContract_ **but should be _MyPrefix.TestContract_**\r\n![image](https://user-images.githubusercontent.com/2196081/233299198-82cb44b6-52b2-4410-8a17-5ba4aad76d38.png)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"28930586788","Type":"IssuesEvent","CreatedAt":"2023-05-08T22:44:03","Actor":"QuantumToasted","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12577","RelatedDescription":"Opened issue \"\"This project cannot be packaged because packaging has been disabled\" nag when IsPackable is false\" (#12577) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nMSBuild version 17.4.1+9a89d02ff for .NET\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen running `dotnet pack -c Release` with my project, [Elefess](https://github.com/QuantumToasted/Elefess), the following warning is emitted:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.102\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(203,6): warning :\r\nThis project cannot be packaged because packaging has been disabled. Add <IsPackable>true</IsPackable> to the project f\r\nile to enable producing a package from this project. [D:\\Code\\Elefess\\Elefess.TestHost.AspNetCore\\Elefess.TestHost.AspN\r\netCore.csproj]\r\n```\r\nI am unsure why this is the case - not only have I explicitly specified `<IsPackable>false</IsPackable>` in the .csproj, the project it depends on is just an xUnit project, which also has `<IsPackable>false</IsPackable>`, and does not give this warning.\n\n### Verbose Logs\n\n```shell\nRan with `dotnet pack -c Release --verbosity diag`:\r\n\r\n(Apologies for the third-party link - the output is past GitHub's 25MB limit, and I wasn't sure of a reputable long-lasting source to just dump that amount of text)\r\nhttps://cdn.discordapp.com/attachments/416139786961813514/1105263621023469638/output.txt\n```\n"},{"Id":"28926939010","Type":"IssuesEvent","CreatedAt":"2023-05-08T19:21:09","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12541","RelatedDescription":"Closed issue \"`FatalProtocolException` retrieving package content using c# client libraries\" (#12541) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet client c# SDK\r\n\r\n### Product Version\r\n\r\nClient libraries: 6.5.0, net-6.0\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nEnvironment:\r\nDebian Linux\r\nnet6 runtime\r\nProcess running in k8 pod\r\n\r\nOverview: The application's responsibility is to retrieve packages from nuget and perform various indexing of artifacts, etc. This is a very isolated incident, and subsequent runs by the application were successful.\r\n\r\nUsage of the client lib:\r\n\r\n```cs\r\nawait using var memoryStream = new MemoryStream();\r\n\r\nvar resource = await request\r\n    .Repository\r\n    .GetResourceAsync<FindPackageByIdResource>(cancellationToken)\r\n    .ConfigureAwait(false);\r\n\r\nvar result = await resource.CopyNupkgToStreamAsync(\r\n        request.PackageId.Id,\r\n        new NuGetVersion(request.PackageId.Version.ToString()),\r\n        memoryStream,\r\n        new NullSourceCacheContext(),\r\n        _loggingAdapter,\r\n        cancellationToken)\r\n    .ConfigureAwait(false);\r\n```\r\n\r\nThe package being retrieved was `System.Runtime.Serialization.Primitives`.\r\n\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\nTop level error:\r\n\r\nFailed to retrieve information about 'System.Runtime.Serialization.Primitives' from remote source 'https://api.nuget.org/v3-flatcontainer/system.runtime.serialization.primitives/index.json'. Path cannot be the empty string or all whitespace. (Parameter 'path') \r\n```\r\n\r\nTraces:\r\n```\r\nNuGet.Protocol.Core.Types.FatalProtocolException:\r\n   at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource+<FindPackagesByIdAsync>d__17.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource+<EnsurePackagesAsync>d__16.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource+<CopyNupkgToStreamAsync>d__13.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\nInner exception System.ArgumentException handled at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource+<FindPackagesByIdAsync>d__17.MoveNext:\r\n   at System.IO.Directory.CreateDirectory (System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)\r\n   at NuGet.Protocol.HttpCacheUtility+<CreateCacheFileAsync>d__2.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Protocol.HttpSource+<>c__DisplayClass15_0`1+<<GetAsync>b__0>d.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Common.ConcurrencyUtilities+<ExecuteWithFileLockedAsync>d__5`1.MoveNext (NuGet.Common, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Common.ConcurrencyUtilities+<ExecuteWithFileLockedAsync>d__5`1.MoveNext (NuGet.Common, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31b\r\n   ...\r\n   at NuGet.Protocol.HttpSource+<GetAsync>d__15`1.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n   ...\r\n   at NuGet.Protocol.HttpFileSystemBasedFindPackageByIdResource+<FindPackagesByIdAsync>d__17.MoveNext (NuGet.Protocol, Version=6.5.0.154, Culture=neutral, PublicKeyToken=31bf3856ad364e35)\r\n```\r\n\r\nLooks like a cache directory was being made but a bad/empty path was specified? I suspect the issue is symptomatic of a failure on the http feed side.\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"},{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27423335680","Type":"IssuesEvent","CreatedAt":"2023-03-01T18:16:58","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Opened issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27174265829","Type":"IssuesEvent","CreatedAt":"2023-02-17T22:51:59","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/60","RelatedDescription":"Closed issue \"NuGet.org migration towards a new multi-CDN infrastructure\" (#60) at NuGet/Announcements","RelatedBody":"In the coming weeks, nuget.org will be migrating towards a new multi-CDN infrastructure that will improve the experience of our users. This change allows our team flexibility to switch to a back-up provider in the case that one CDN is down, which will broaden coverage for our users.\r\n\r\nSome changes are coming for older TLS cipher suites, which may result in connectivity issues. From our data we believe this will affect only a small percentage of requests. We will be monitoring all feedback channels during the migration to assess impact and adjust our roll-out timeline as needed.\r\n\r\nBelow, we provide resources to determine whether you will be affected by this change. This utilizes the [.NET CLI](https://dotnet.microsoft.com/) to install a package from our pre-production (INT) environment which tests connectivity:\r\n\r\n\r\n```\r\nmkdir cdn-test\r\ncd cdn-test\r\ndotnet new classlib\r\ndotnet add package BaseTestPackage.NetStandard --source https://apiint.nugettest.org/v3/index.json\r\n```\r\n\r\nIf you are experiencing connectivity issues while connecting to nuget.org or restoring packages from https://api.nuget.org/v3/index.json, such as:\r\n\r\n\"The SSL connection could not be established\"\r\n\r\nPlease ensure that TLS 1.2 and any of the following cipher suites have been enabled on your machine:\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\r\n\r\nIf you have any questions, do reach out to us at support@nuget.org or by commenting on the discussion issue: NuGet/Home#11058"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1631370937248481281","CreatedAt":"2023-03-02T19:08:35+00:00","UserScreenname":"nuget","Text":"Your package's README is your chance to showcase your hard work and make a great first impression. Here are some ti… https://t.co/SU8480LbkL","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1630609651275382793","CreatedAt":"2023-02-28T16:43:30+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.5 📦\n\n🧰 Visual Studio Support for Central Package Management\n🔁 Use server-provided Retry-After… https://t.co/FsMPajDT1u","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":26,"FavoriteCount":8,"RawContent":null},{"Id":"1625612488216649729","CreatedAt":"2023-02-14T21:46:34+00:00","UserScreenname":"nuget","Text":"📦 Search by Target Framework on https://t.co/F9kiKfvqkS 📦\n\n🔭 Improved package compatibility discovery\n📊 New sorts a… https://t.co/Xojm66sLar","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":35,"FavoriteCount":22,"RawContent":null},{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":128,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":46,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2023-05-10T03:30:23.3743434Z","RunDurationInMilliseconds":1280}