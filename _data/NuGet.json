{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"35964889630","Type":"PullRequestEvent","CreatedAt":"2024-02-24T02:59:39","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9826","RelatedDescription":"Opened pull request \"Fix Framework Filter Mode tooltip colors\" (#9826) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9818\r\n\r\nThe bootstrap popover on the Framework Filter Mode tooltip had different colors within it:\r\n<img src=\"https://github.com/NuGet/NuGetGallery/assets/82980589/a6ec1bb3-331e-4644-8323-da8e97d8d074\" width=\"600px\"></img>\r\n\r\nI've now fixed the color, and removed the extra strip at the bottom of the popover:\r\n<img src=\"https://github.com/NuGet/NuGetGallery/assets/82980589/57c3217c-324f-473f-8ba6-d35bfccee60b\" width=\"600px\"></img>"},{"Id":"35963552048","Type":"PullRequestEvent","CreatedAt":"2024-02-24T01:02:13","Actor":"sbanni","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9825","RelatedDescription":"Merged pull request \"Suppress devskim warnings\" (#9825) at NuGet/NuGetGallery","RelatedBody":"Suppress devskim warnings.\r\n\r\nRan the devskim tool locally:\r\n`devskim analyze -I .\\src -O devskim.sarif -f sarif -g *.json,*.cs,*.config,*.xml,*.txt,*.sql,*.csproj`\r\n\r\nThen run suppress command:\r\n`devskim suppress -I .\\src -O devskim.sarif --all`"},{"Id":"35963477697","Type":"PullRequestEvent","CreatedAt":"2024-02-24T00:56:42","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9824","RelatedDescription":"Merged pull request \"Fix assembly bindings to resolve runtime errors\" (#9824) at NuGet/NuGetGallery","RelatedBody":"Similar to https://github.com/NuGet/NuGetGallery/pull/9597\r\n\r\nWe made recent package upgrades to Gallery, and started seeing runtime issues because of conflicting assembly versions. We have assembly bindings in the Web.config file, and these need to be deleted and regenerated when we see these binding conflicts ([Gallery runtime issues due to missing or conflicting assembly bindings](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FNugetServer%2FNugetServerTeamNote&wd=target%28On-call.one%7CFFA95A40-BC9F-4CE4-A7D2-3ED62759712D%2FGallery%20runtime%20issues%20due%20to%20missing%20or%20conflicting%20assembly%20bindings%7C39633840-461E-427B-9305-9A483D4679D4%2F%29)).\r\n\r\nMost of the changes here are just whitespace changes, outside of 5-6 package version changes.\r\n\r\nGallery deployments are working now: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1513101"},{"Id":"35963312849","Type":"PullRequestEvent","CreatedAt":"2024-02-24T00:43:46","Actor":"sbanni","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9825","RelatedDescription":"Opened pull request \"Suppress devskim warnings\" (#9825) at NuGet/NuGetGallery","RelatedBody":"Suppress devskim warnings.\r\n\r\nRan the devskim tool locally:\r\n`devskim analyze -I .\\src -O devskim.sarif -f sarif -g *.json,*.cs,*.config,*.xml,*.txt,*.sql,*.csproj`\r\n\r\nThen run suppress command:\r\n`devskim suppress -I .\\src -O devskim.sarif --all`"},{"Id":"35962361999","Type":"PullRequestEvent","CreatedAt":"2024-02-23T23:32:10","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9824","RelatedDescription":"Opened pull request \"fix bindings\" (#9824) at NuGet/NuGetGallery","RelatedBody":"Similar to https://github.com/NuGet/NuGetGallery/pull/9597\r\n\r\nWe made recent package upgrades to Gallery, and started seeing runtime issues because of conflicting assembly versions. We have assembly bindings in the Web.config file, and these need to be deleted and regenerated when we see these binding conflicts ([Gallery runtime issues due to missing or conflicting assembly bindings](https://microsoft.sharepoint.com/teams/NuGet/_layouts/OneNote.aspx?id=%2Fteams%2FNuGet%2FTeam%2FNugetServer%2FNugetServerTeamNote&wd=target%28On-call.one%7CFFA95A40-BC9F-4CE4-A7D2-3ED62759712D%2FGallery%20runtime%20issues%20due%20to%20missing%20or%20conflicting%20assembly%20bindings%7C39633840-461E-427B-9305-9A483D4679D4%2F%29)).\r\n\r\nMost of the changes here are just whitespace changes, outside of 5-6 package version changes."},{"Id":"35931255259","Type":"IssuesEvent","CreatedAt":"2024-02-23T01:59:18","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9795","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Target framework badges have trailing whitespace \" (#9795) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe search page's target framework badges have trailing whitespace. Hovering over a target framework badge shows an underline.\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/737941/b8b1a2ab-19f8-46a4-8484-46da354b8790)\r\n\n\n### Repro Steps\n\n1. Acquire tissues\r\n2. Navigate to https://www.nuget.org/packages\r\n3. Move the mouse to hover over a target framework badge\r\n4. Witness horrifying underline\r\n5. Use tissues to wipe tears\n\n### Expected Behavior\n\nHovering over a target framework badge should not show a trailing underline\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"35963636303","Type":"IssuesEvent","CreatedAt":"2024-02-24T01:08:35","Actor":"Charlesgmr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13262","RelatedDescription":"Opened issue \"Home\" (#13262) at NuGet/Home","RelatedBody":""},{"Id":"35961753892","Type":"IssuesEvent","CreatedAt":"2024-02-23T22:55:00","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13145","RelatedDescription":"Closed issue \"Address comments on `dotnet package search` in a follow up PR\" (#13145) at NuGet/Home","RelatedBody":"\r\n\r\nAddress comments on the following PR: https://github.com/NuGet/NuGet.Client/pull/5525\r\n\r\n"},{"Id":"35954894560","Type":"IssuesEvent","CreatedAt":"2024-02-23T17:57:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13261","RelatedDescription":"Opened issue \"Should NuGetAudit respect NoCache\" (#13261) at NuGet/Home","RelatedBody":"See: https://github.com/NuGet/NuGet.Client/pull/5639#discussion_r1500970353. \r\n\r\nCurrently nuget audit creates a new cache context to avoid redownloading, but that technically violates nocache. \r\n\r\nNoCache itself is primarily designed for getting new packages. "},{"Id":"35954528423","Type":"IssuesEvent","CreatedAt":"2024-02-23T17:43:29","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13166","RelatedDescription":"Closed issue \"Search results in json format from dotnet package search should not include fields for which no values are provided\" (#13166) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-alpha.1.24062.11\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n.\\dotnet.exe package search <search_term> --format json\r\nNote: this repros with or without --exact-match\r\n\r\nExpected:\r\nThe feedback is that fields that do not have values available in the package source, such as owners or total downloads, should not be included in the json output.\r\n\r\nActual:\r\nFields that do not have values available in the package source, such as owners or total downloads, are provided in the json output with the value null.\r\n\r\nFeedback provided here: https://github.com/NuGet/Home/issues/13158#issuecomment-1894317620\n\n### Verbose Logs\n\n_No response_"},{"Id":"35950658466","Type":"IssuesEvent","CreatedAt":"2024-02-23T15:33:37","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13259","RelatedDescription":"Opened issue \"NullReferenceException when updating package with different casing than project file\" (#13259) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n6.9\n\n### Worked before?\n\n6.8\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nHave a project with a package reference that uses a different case than what the package's own metadata claims. For example `<PackageReference Include=\"nuget.versioning\" Version=\"6.6.0\" />`.  Then either try to upgrade the package in PM UI, or try to upgrade the package in PMC using a different case, for example `Update-Package NUGET.VERSIONING -Version 6.7.0`.\n\n### Verbose Logs\n\n```shell\nSee https://developercommunity.visualstudio.com/t/Update-nuget-package-causes-NullReferenc/10584808\n```\n"},{"Id":"35940813766","Type":"IssuesEvent","CreatedAt":"2024-02-23T10:15:54","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13258","RelatedDescription":"Opened issue \"[Bug Bash] There is a redundant empty column in the right panel of solution-level PM UI when resizing the splitter to the left side\" (#13258) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.10.0.42\n\n### Worked before?\n\nIt’s not a regression since it repro on d16.11\\34601.136.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps: \r\n1.\tCreate a solution with several projects – for example: 1 C# Console App (.NET 8.0) project, 1 C# Class Library (.NET 8.0) and 1 C# Console App (.NET Framework 4.8.1) in VS. \r\n2.\tRight-click the solution node in Solution Explorer window and click “Manage NuGet Packages for Solution…”. \r\n3.\tInstall a package into every project and go to “Installed” tab.\r\n4.\tDrag the splitter in the middle of the solution-level PM UI to the left side.\r\n\r\n#### Expected Result: \r\nThere should be no redundant empty column in the right panel of solution-level PM UI when resizing the splitter to the left side.\r\n\r\n#### Actual Result:\r\nThere is a redundant empty column in the right panel of solution-level PM UI when resizing the splitter to the left side as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/f13fbd11-1ce2-4757-b471-d26a0457045d)\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It also reproes on “Browse”/”Updates”/”Consolidate” tab of solution-level PM UI.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"35940745056","Type":"IssuesEvent","CreatedAt":"2024-02-23T10:13:38","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13257","RelatedDescription":"Opened issue \"[Bug Bash] There is a duplicated “version” column in the right panel of solution-level PM UI for SDK based projects\" (#13257) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.10.0.42\n\n### Worked before?\n\nIt’s not a regression since it repro on d16.11\\34601.136.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps: \r\n1.\tCreate a solution with multiple project types – 1 C# Console App (.NET 8.0) project, 1 C# Class Library (.NET 8.0) and 1 C# Console App (.NET Framework 4.8.1) in VS. \r\n2.\tRight-click the solution node in Solution Explorer window and click “Manage NuGet Packages for Solution…”. \r\n3.\tInstall a package into every project and go to “Installed” tab.\r\n\r\n#### Expected Result: \r\nThere should be no need to show a duplicated “version” column in the right panel of solution-level PM UI for SDK based projects.\r\n\r\n#### Actual Result:\r\nThere is a duplicated “version” column (dup to “Installed” version) in the right panel of solution-level PM UI for SDK based projects as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/33bedb2e-0d78-4ade-ab7f-994846821fc8)\r\n#### Notes:\r\n1.Repro rate: 100%.\r\n2.It also reproes on “Browse”/”Updates”/”Consolidate” tab of solution-level PM UI.\r\n3.It should be fixed since we don’t have this behavior for Non-SDK style project (take the project “NetFwConsole” above for example).\n\n### Verbose Logs\n\n_No response_"},{"Id":"35939691901","Type":"IssuesEvent","CreatedAt":"2024-02-23T09:38:56","Actor":"voroninp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13256","RelatedDescription":"Opened issue \"Update to latest available version and keep the range.\" (#13256) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI, dotnet.exe\n\n### The Elevator Pitch\n\nWhen authoring NuGet packages I prefer to use version ranges: `[x.y.z, x+1)`.\r\nHowever, every time I update packages with UI the range gets replaced with just version: `[x.y.z, x+1) -> x2.y2.z2`\r\nI'd like to keep the semantics, when updating I'd be able to explicitly tell Nuget to specify the range : `[x.y.z, x+1) -> [x2.y2.z2, x2+1)`.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"35931545041","Type":"IssuesEvent","CreatedAt":"2024-02-23T02:18:46","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13222","RelatedDescription":"Closed issue \"CreateWalkAsync should not be recursive\" (#13222) at NuGet/Home","RelatedBody":"The current implementation of `CreateWalkAsync` has recursive asynchronous calls which can cause a large amount of allocations of async state machine objects.\r\n\r\n![AsyncStateMachineAllocs](https://github.com/NuGet/Home/assets/60519722/7720a1e2-2d2e-4e56-9990-bf59d53fcc0b)\r\n\r\nThe type `<CreateGraphNodeAsync>d__3` is the async state machine object that I'm referring to, and in this trace there are ~1.8GB worth of allocations from this object. This accounts for 11.4% of all allocations during the restore.\r\n\r\nBy switching the implementation to an iterative approach, we can avoid allocating a state machine for each recursive call."},{"Id":"35927551467","Type":"IssuesEvent","CreatedAt":"2024-02-22T22:23:13","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13162","RelatedDescription":"Closed issue \"dotnet package search --verbosity detailed output table too wide\" (#13162) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nthe search command outputs a table that is as wide as its content\n\n### Desired Behavior\n\ntable format should wrap instead of create a table that's the width of the result. \n\n### Additional Context\n\n_No response_"},{"Id":"35927517013","Type":"IssuesEvent","CreatedAt":"2024-02-22T22:21:55","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13255","RelatedDescription":"Opened issue \"Adopt Spectre.Console for NuGet commands that output a table\" (#13255) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nThe following commands render tables.\r\n``` powershell\r\n>> dotnet tool search\r\n>> dotnet package search\r\n```\r\nBy reworking their rendering process with Spectre.Console, these commands can produce more dynamic and aesthetically appealing tables. This change is particularly beneficial as the existing commands face difficulties in maintaining table structure when the console in which they are embedded is resized or when there is limited space.\r\n\r\nSpectre.Console is available in source build https://github.com/dotnet/source-build-externals/tree/main/src\n\n### Additional Context and Details\n\n_No response_"},{"Id":"35924638996","Type":"IssuesEvent","CreatedAt":"2024-02-22T20:25:13","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13159","RelatedDescription":"Closed issue \"[Dotnet Package Search] When the local source path in quotes ends with a backslash, warning is shown instead of \"No results found\"\" (#13159) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-alpha.1.24062.11\n\n### Worked before?\n\nIt’s not a regression issue since it is a new feature.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:  \r\n1.Patch the latest .NET SDK version ([9.0.100-alpha.1.24062.11](https://github.com/dotnet/installer?tab=readme-ov-file#use-dotnet---help-to-see-available-commands-or-visit-httpsakamsdotnet-cli)) with NuGet Client [Pipelines - Run 6.9.0.86 artifacts (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8897544&view=artifacts&pathAsName=false&type=publishedArtifacts). \r\n   1.1 Download the [Entropy](https://github.com/NuGet/Entropy.git) to the desktop of test machine.\r\n   1.2 Download and extract the NuGet Client build “[6.9.0.86](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8897544&view=artifacts&pathAsName=false&type=publishedArtifacts)->nupkgs - NonRTM” (named to “nupkgs”) to the desktop of test machine.\r\n   1.3 Update the $SDKChannel = \"LTS\" and $SDKVersion = \"9.0.100-alpha.1.24062.11\" in the “patchOnWindows.ps1” file of the downloaded “Entropy\\SDKPatchTool”.\r\n   1.4 Modify the $patchSDKFolder = \"C:\\Users\\[UserName]\\Desktop\\PatchedSDK\" and $nupkgsPath = \"C:\\Users\\v-luzh\\Desktop\\nupkgs\" (the path of downloaded nupkgs in step 1.2) in the “patchOnWindows.ps1” file of the downloaded “Entropy\\SDKPatchTool”.\r\n2. After patching finished, go to the patchedSDK folder and execute the command` .\\dotnet package search CSharp --format table --source \"C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\" `in powershell.\r\n\r\n#### Expected Results:  \r\nThe result should be “No results found.” (as the result of similar command` .\\dotnet package search CSharp --exact-match --format table --source \"C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\"` below).\r\n![image](https://github.com/NuGet/Home/assets/20632625/a4c3f6a5-8ac1-4fa2-81db-8ae84efde114)\r\n\r\n#### Actual Results:\r\nThe result is “warn: the path for the selected source could not be resolved” instead as below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/9aad1580-c25a-42bd-ba05-c0415d2f6c21)\r\n\r\n#### Note:\r\nRepro rate: 100%\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"35916931952","Type":"IssuesEvent","CreatedAt":"2024-02-22T16:08:27","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13232","RelatedDescription":"Closed issue \"`dotnet list package` command options should support shorter names. For example, -f for --framework. Have to specify the long name every time.\" (#13232) at NuGet/Home","RelatedBody":"\r\n\r\nTracking https://github.com/dotnet/sdk/issues/37385\r\n\r\n"},{"Id":"35912294454","Type":"IssuesEvent","CreatedAt":"2024-02-22T14:06:18","Actor":"tbm-miitors","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13254","RelatedDescription":"Opened issue \"Items with Pack=True are not included in package when cross-targeting with GeneratePackageOnBuild=True\" (#13254) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\ndotnet SDK 8.0.200, MSBuild version 17.9.5+33de0b227, VS2022 17.9.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWhen using `<GeneratePackageOnBuild>True</GeneratePackageOnBuild>`, project items such as the package icon or readme file with `<Pack>True</Pack>` are not discovered/included when generating the NuGet package for projects with cross-targeting enabled. This causes the build to fail when these files are specified in e.g. `<PackageIcon>` or `<PackageReadmeFile>`.\r\n\r\nTo reproduce, perform the following steps in Visual Studio:\r\n1. Create new, empty class library project.\r\n2. Add an image to the project to use as package icon.\r\n3. In the project properties, enable \"Produce a package file during build operations.\" and select the image as the package icon.\r\n4. Build the project and verify that a NuGet package is generated as expected.\r\n5. Now, change the `<TargetFramework>` property to `<TargetFrameworks>` to enable cross-targeting. It does not matter if one or multiple target frameworks are specified.\r\n6. Build again.\r\n7. Build fails with `C:\\Program Files\\dotnet\\sdk\\8.0.200\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5046: The icon file 'icon.png' does not exist in the package.`\r\n\r\nExample project file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n    <PackageIcon>icon.png</PackageIcon>\r\n    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Update=\"icon.png\">\r\n      <Pack>True</Pack>\r\n      <PackagePath>\\</PackagePath>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n[Verbose Log](https://github.com/NuGet/Home/files/14374845/dotnet.diag.log.txt)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"35891708585","Type":"IssuesEvent","CreatedAt":"2024-02-22T00:23:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13253","RelatedDescription":"Opened issue \"Warn when vulnerabilities are detected during packages.config restore in CLI scenarios.\" (#13253) at NuGet/Home","RelatedBody":""},{"Id":"35890066197","Type":"IssuesEvent","CreatedAt":"2024-02-21T22:52:33","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13158","RelatedDescription":"Closed issue \"[Dotnet Package Search] The search result of the package should be “version” instead of “latestVersion” when executing command “dotnet package search <Package Name> --exact-match --format json”\" (#13158) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n.NET SDK 9.0.100-alpha.1.24062.11\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression issue since it is a new feature.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:  \r\n1.Patch the latest .NET SDK version ([9.0.100-alpha.1.24062.11](https://github.com/dotnet/installer?tab=readme-ov-file#use-dotnet---help-to-see-available-commands-or-visit-httpsakamsdotnet-cli)) with NuGet Client [Pipelines - Run 6.9.0.86 artifacts (visualstudio.com)](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8897544&view=artifacts&pathAsName=false&type=publishedArtifacts). \r\n   1.1 Download the [Entropy](https://github.com/NuGet/Entropy.git) to the desktop of test machine.\r\n   1.2 Download and extract the NuGet Client build “[6.9.0.86](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8897544&view=artifacts&pathAsName=false&type=publishedArtifacts)->nupkgs - NonRTM” (named to “nupkgs”) to the desktop of test machine.\r\n   1.3 Update the $SDKChannel = \"LTS\" and $SDKVersion = \"9.0.100-alpha.1.24062.11\" in the “patchOnWindows.ps1” file of the downloaded “Entropy\\SDKPatchTool”.\r\n   1.4 Modify the $patchSDKFolder = \"C:\\Users\\[UserName]\\Desktop\\PatchedSDK\" and $nupkgsPath = \"C:\\Users\\v-luzh\\Desktop\\nupkgs\" (the path of downloaded nupkgs in step 1.2) in the “patchOnWindows.ps1” file of the downloaded “Entropy\\SDKPatchTool”.\r\n2. After patching finished, go to the patchedSDK folder and execute the command `.\\dotnet package search NUnit --exact-match --format json` in powershell.\r\n\r\n#### Expected Results:  \r\nThe search result of the package should be “version” instead of “latestVersion” since one package only has one latest version. Like the result of the searching the same package with “--format table” by default as below.\r\n![image](https://github.com/NuGet/Home/assets/20632625/dd4211bb-ffc6-4b55-9111-8caaf9d1086b)\r\n\r\n#### Actual Results:\r\nThe search result of the package shows a lot of “latestVersion” which does not make sense as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/913aea90-1fdc-4063-88b7-cc8d48b36cf9)\r\n\r\n#### Note:\r\nRepro rate: 100%"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-02-24T03:30:18.4863301Z","RunDurationInMilliseconds":1002}