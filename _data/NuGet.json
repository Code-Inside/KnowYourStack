{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42529210692","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:41:13","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10200","RelatedDescription":"Merged pull request \"Fix assembly bindings\" (#10200) at NuGet/NuGetGallery","RelatedBody":"Fix runtime assembly binding conflicts"},{"Id":"42528900931","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:20:18","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10199","RelatedDescription":"Merged pull request \"Use user-provided data correctly\" (#10199) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5661\r\n\r\nSolution copied from: https://github.com/jquery/jquery-ui/commit/afe20b79a64266e64011f34b26a30b3d1c62fd47#diff-9fe9167f897d640e82537adc5391958ffe6284b413a08152cd31d061e97a644aL243"},{"Id":"42528881006","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:18:57","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10201","RelatedDescription":"Opened pull request \"CodeQL suppressions + suppression fixes\" (#10201) at NuGet/NuGetGallery","RelatedBody":"Following guidance provided in: https://aka.ms/codeql#guidance-on-suppressions"},{"Id":"42528871349","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:18:19","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10200","RelatedDescription":"Opened pull request \"Fix assembly bindings\" (#10200) at NuGet/NuGetGallery","RelatedBody":"Fix runtime assembly binding conflicts"},{"Id":"42528703895","Type":"PullRequestEvent","CreatedAt":"2024-10-04T00:08:11","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10197","RelatedDescription":"Merged pull request \"Use MSI for storage access in GitHubVulnerabilities2Db\" (#10197) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5568"},{"Id":"42528124024","Type":"PullRequestEvent","CreatedAt":"2024-10-03T23:28:57","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10199","RelatedDescription":"Opened pull request \"Use user-provided data correctly\" (#10199) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5661\r\n\r\nSolution copied from: https://github.com/jquery/jquery-ui/commit/afe20b79a64266e64011f34b26a30b3d1c62fd47#diff-9fe9167f897d640e82537adc5391958ffe6284b413a08152cd31d061e97a644aL243"},{"Id":"42525303220","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:05:56","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10198","RelatedDescription":"Opened issue \"[Feature]: Remove the allowlist for allowed domains in READMEs\" (#10198) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nThe allowlist concept is too much debt and work for the benefit we get out of it. We cannot continue to follow an allowlist for this functionality and should allow people to use it freely as a trusting community and when people violate our terms, we take swift action with regards to TOS.\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42525836784","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:29:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12825","RelatedDescription":"Closed issue \"Refactor `PackageSourceMapping` class to be Mockable\" (#12825) at NuGet/Home","RelatedBody":"The current implementation of `NuGet.Configuration/PackageSourceMapping` is not Mockable as defined here: https://github.com/moq/moq/wiki/FAQ#moq---non-overridable-members-may-not-be-used-in-setup--verification-expressions\r\n\r\nThere may be several changes needed to do so (source & tests).\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Configuration/PackageSourceMapping/PackageSourceMapping.cs\r\n\r\nFor example\r\nFeedback in https://github.com/NuGet/NuGet.Client/pull/5355/files would require tests verifying # times the `PackageSourceMapping` object is referenced (eg, [UIActionEngineTests](https://github.com/NuGet/NuGet.Client/blob/dev/test/NuGet.Clients.Tests/NuGet.PackageManagement.UI.Test/Actions/UIActionEngineTests.cs#L414)) to now look at counts for particular method invocations (ie, GetConfiguredPackageSources). This isn't possible without making the class mockable."},{"Id":"42525621542","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:19:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8705","RelatedDescription":"Closed issue \"nuget update with mono\" (#8705) at NuGet/Home","RelatedBody":"@nelfer commented on [Wed Jun 12 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1472)\n\nHi,\nI noticed the note about `nuget update` doesn't work under `mono` . Is there any updates on this? or any work around? I have a linux machine where I was doing a script to mass update projects (over 100) and saw that it didn't work.\n\nThe projects are .Net 4.7 by the way.\n\nThanks!\n\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 9ffc1aea-bed4-f33a-69e8-b0a339443d94\n* Version Independent ID: ed0d51ba-df92-4e87-211b-2e0f6bc5da0c\n* Content: [NuGet CLI update command](https://docs.microsoft.com/en-us/nuget/tools/cli-ref-update)\n* Content Source: [docs/tools/cli-ref-update.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/tools/cli-ref-update.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**\n\n---\n\n@stale[bot] commented on [Tue Oct 15 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1472#issuecomment-542449546)\n\nThis issue has been automatically marked as stale and closed because it has not had recent activity. Thank you for your contributions.\n\n\n"},{"Id":"42525608544","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:18:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9155","RelatedDescription":"Closed issue \"Design API Spec for opening the PMUI Window + specific Tabs & pre-selected Packages\" (#9155) at NuGet/Home","RelatedBody":"Define the specification for a new API that would allow the Package Management UI window to be opened to a specific tab. \r\n\r\nThe Updates tab should also be capable of being opened with a set of Packages pre-selected. Automatically focusing on a particular element (likely the Update button) should be considered from an Accessibility perspective, as well as from a  general UX perspective.\r\n\r\nThe current use-case is only for the Updates tab. Whether the API should support all 4 tabs would be an open question.\r\n\r\nProject System will need the capability of invoking this API for this Epic.\r\n"},{"Id":"42525570653","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:17:03","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10270","RelatedDescription":"Closed issue \"Prototype a Filtering mechanism & prepare for User Study\" (#10270) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for filtering packages in various PM UI views. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback.\r\n\r\n- https://github.com/NuGet/Home/issues/5393\r\n\r\n-  https://twitter.com/realDotNetDave/status/1130543286022656001\r\n\r\n> @VisualStudio it would be really useful if in the @nuget package manager we could filter on author. For example, just packages by Microsoft. Would make it much easier to find packages that I want."},{"Id":"42525553336","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:16:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10272","RelatedDescription":"Closed issue \"VS UI Functionality Bugs\" (#10272) at NuGet/Home","RelatedBody":"Epic tracking bug fixes to PM UI related to existing functionality."},{"Id":"42525544431","Type":"IssuesEvent","CreatedAt":"2024-10-03T21:15:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10274","RelatedDescription":"Closed issue \"Prototype UI Enhancements & prepare for User Study\" (#10274) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for enhancements to various PM UI functions. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback.\r\n\r\nSome ideas:\r\n- Scope any remaining work for Version Range support https://github.com/nuget/home/issues/6566\r\n\r\n- Adding metadata https://github.com/NuGet/Home/issues/7957 & https://github.com/NuGet/Home/issues/8007\r\n\r\n- Bonus would be to investigate GitHub commit integration: https://github.com/NuGet/Home/issues/8585"},{"Id":"42522942701","Type":"IssuesEvent","CreatedAt":"2024-10-03T19:36:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10256","RelatedDescription":"Closed issue \"[Performance]: Improve Commit Async for CPVM enabled projects\" (#10256) at NuGet/Home","RelatedBody":"# NuGet CPVM DgSpec and NuGet.exe\r\n\r\n## Summary\r\nNuGet restore under CPVM showed a degradation in performance up to 65.9% (data obtained using CloudBuild branch).\r\nAfter a set of performance improvements the regression decreased to 28.8.\r\nData as in the below table\r\n\r\n| Run Id | Is CPVM  | Seconds  |  Percent Degradation |\r\n|----------|-------------|-------------|------|\r\n| 5.8.0.6864 | Yes | 73.404 | **65.9** |\r\n| 5.8.0.6864  | No | 44.225 |   |\r\n| 5.9.0.6886  | Yes | 55.950 | **28.8**  |\r\n| 5.9.0.6886  | No | 43.429  |    |\r\n\r\nThe current document contains a proposal for how NuGet CPVM performance could be improved more. \r\nThe document explains the problem and outline a set of proposals.\r\n\r\n## Problem\r\nWhen NuGet performs a full restore operation there are mainly two steps executed:\r\n1. Restore\r\n    - In this step the noop is evaluated, the dependency graph is created and analyzed, the lock file and conditions are evaluated, the assets and lock file is created in memory.\r\n2. Commit\r\n    - In the commit phase all the data is committed to disk (project.assets.json etc.)\r\n\r\nFrom the two operations the Commit Async shows currently the most negative impact in CPVM / Not CPVM.  \r\nBelow are two snapshots with the CommitAsync and ProjectRestore information events(corresponding with the above two operations)\r\n\r\n**CommitAsync**\r\n\r\n![image](https://user-images.githubusercontent.com/16580006/95640408-81b9d380-0a51-11eb-9f22-e7b27943a1a1.png)\r\n\r\n\r\n**ProjectRestoreInformation**\r\n\r\n![image](https://user-images.githubusercontent.com/16580006/95640531-073d8380-0a52-11eb-80ae-b217187d5117.png)\r\n\r\n\r\nThe reason for having the CommitAsync double as time is because the information is larger in case of CPVM. When CPVM is enabled the central version information is persisted to disk in project.assets.json and in the dgspec files. \r\nA sample of this data is [here](\\\\ddfiles\\Team\\Public\\cmanu\\CPVM\\Docs\\Performance\\Data_CommitAsync).\r\n\r\nThere are two reasons for serializing the data to the disk:\r\n1. One of the NuGet principles is as the serialized dgspec data can be deserialized and be input for Restore.  \r\n2. The current NuGet.exe implementation is based on the above principle.\r\n    The main steps executed when a Restore is performed by NuGet.exe are:\r\n    1. MsBuild is invoked with one of the NuGet tasks (WriteRestoreGraphTask) to write the dgspec.\r\n    2. The DGSpec is deserialized, NuGet specific commands are added to the restore operation and the restore is started. \r\n\r\n\r\n## Proposals\r\n\r\nAll the proposals, except the default(not do anything) will mean to avoid serialization of the CPVM information in the assets and dgspec files.\r\n\r\n### 1. Support CPVM- NuGet.exe by two writers\r\n\r\nTo support this it will need to be two dgspec writers one the writes the temp information for NuGet.exe and one that writes the regular assets and dgspec information on restore commit async step.\r\n\r\n#### Pros\r\n1. Performance improvements for MsBuild, VS restore and Nuget.exe. \r\n\r\n#### Cons\r\n1. The principle mentioned above will not hold anymore.\r\n2. Two writers will mean larger public surface (probably 2-3 more public APIs)\r\n\r\n\r\n#### Risk: Low\r\n\r\n### 2. Support CPVM- NuGet.exe by redesigning NuGet.exe - MsBuild integration.\r\nAs mentioned above nuget.exe first calls MsBuild to generate the dgspec and after that the restore task is executed. \r\nThe proposed solution is to find a way to just invoke MsBuild to execute restore. \r\nOne if the challenges here is the fact that nuget.exe takes more arguments than the MsBuild currently supports. \r\n\r\n#### Pros\r\n1. Performance improvements for MsBuild, NuGet.exe and VS restore CPVM scenarios. \r\n2. Probably perf improvements for Nuget.exe\r\n\r\n#### Cons\r\n1. The principle mentioned above will not hold anymore.\r\n2. NuGet.exe probably will need to drop some functionality\r\n\r\n#### Risk: High\r\n\r\n### 3. Do not support NuGet.exe\r\n\r\nTo support this it will need only to not write the CPVM information. However with this approach NuGet.exe will not support CPVM. \r\n\r\n#### Pros\r\n1. Performance improvements for MsBuild and VS restore CPVM scenarios. \r\n\r\n#### Cons\r\n1. The principle mentioned above will not hold anymore.\r\n2. NuGet.exe will not work for CPVM\r\n\r\n#### Risk: Low\r\n\r\n### 4. Default - Do not do anything \r\n \r\n\r\n#### Pros\r\n1. No work. \r\n\r\n#### Cons\r\n1. More perf degradation for the restore CPVM scenarios. \r\n\r\n#### Risk: None\r\n\r\n## Prototype Stats\r\n\r\nBelow is data executing the CloudBuuild branch on a NuGet private drop with `Proposal 1`. \r\nThere are two sets of data one for a run before the proposal and for a run after the proposal. \r\n\r\n`Commit Async`\r\n\r\n![image](https://user-images.githubusercontent.com/16580006/95786104-d2b50c00-0c8b-11eb-9a9c-6ed415808188.png)\r\n\r\n`Restore Task`\r\n\r\nThis is the overall restore (restore and commit) for the parallel tasks executing the restore.\r\n\r\n![image](https://user-images.githubusercontent.com/16580006/95786345-2e7f9500-0c8c-11eb-94a3-33f872f2f102.png)\r\n"},{"Id":"42521606625","Type":"IssuesEvent","CreatedAt":"2024-10-03T18:48:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9154","RelatedDescription":"Closed issue \"Design API Spec for providing Available Updates for a given Project\" (#9154) at NuGet/Home","RelatedBody":"Define the specification for a new API that would provide the number of currently available updates for NuGet packages  in a given project within a Solution.\r\n\r\nPerformance would be critical, as the primary use-case will be a call from Project System to display the # of available updates in the nodes of Solution Explorer.\r\n\r\nProject System will need the capability of invoking this API for this Epic.\r\n"},{"Id":"42521421391","Type":"IssuesEvent","CreatedAt":"2024-10-03T18:42:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10219","RelatedDescription":"Closed issue \"VS UI Error Handling\" (#10219) at NuGet/Home","RelatedBody":"Epic tracking refactoring in various areas where NuGet doesn't handle errors, and results in commonly confusing scenarios (eg, VS closing, cryptic error messages, user unaware of an error, excessive telemetry)."},{"Id":"42521418455","Type":"IssuesEvent","CreatedAt":"2024-10-03T18:42:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10220","RelatedDescription":"Closed issue \"VS UI Package Sources\" (#10220) at NuGet/Home","RelatedBody":"Epic tracking Package Source management within VS."},{"Id":"42521415091","Type":"IssuesEvent","CreatedAt":"2024-10-03T18:42:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10221","RelatedDescription":"Closed issue \"VS SDK Improvements\" (#10221) at NuGet/Home","RelatedBody":"Epic tracking improvements to SDK and APIs for VS in general, or the PMUI specifically.\r\nBoth internal and external customers are in scope."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-10-04T03:30:21.232691Z","RunDurationInMilliseconds":823}