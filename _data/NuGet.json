{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"23446211062","Type":"PullRequestEvent","CreatedAt":"2022-08-15T19:55:55","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9189","RelatedDescription":"Merged pull request \"[2022-08-12] RI of dev to main for NuGetGallery\" (#9189) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"23414980926","Type":"PullRequestEvent","CreatedAt":"2022-08-12T22:47:29","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9190","RelatedDescription":"Opened pull request \"[A11y] Read warning when tabbing to Paket CLI tab\" (#9190) at NuGet/NuGetGallery","RelatedBody":"Added `role = alert` to the warning below the Paket CLI command so that the screen reader will read the warning out to the user without having to tab to the warning element itself. \r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9172"},{"Id":"23414260624","Type":"IssuesEvent","CreatedAt":"2022-08-12T21:30:48","Actor":"camigthompson","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9170","RelatedDescription":"Closed issue \"[A11y]API Keys button is rendered using the wrong HTML Element type.\" (#9170) at NuGet/NuGetGallery","RelatedBody":"Original: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1554272\r\n\r\nRepro Steps:\r\n - Hit https://www.nuget.org and press Enter key.\r\n - Navigate to \"Sign in\" control and hit enter.\r\n - Navigate to \"Sign in with Microsoft\" control and hit enter.\r\n - Select “API Keys” from the Profile Dropdown and hit enter.\r\n - Navigate to \"Create\" button and hit enter.\r\n - Enter Values in \"Key Name\" and \"Glob Pattern\" field and hit enter on Create button.\r\n - Navigate to \"Manage\" control and hit enter.\r\n - Verify that whether the API keys are defined as button or heading.\r\n\r\nActual Result:\r\nFor 'API keys' button, it was defined as a H1 heading instead of button.\r\n\r\nExpected result:\r\nFor API keys, it should be defined as button only.\r\n\r\nUser Impact:\r\nUsers might be able to get confused that the button is defined as heading.\r\n\r\nNotes:\r\nUpdating this to a button and restyling to match should be sufficient."},{"Id":"23413025077","Type":"PullRequestEvent","CreatedAt":"2022-08-12T19:51:01","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9189","RelatedDescription":"Opened pull request \"[2022-08-12] RI of dev to main for NuGetGallery\" (#9189) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"23413008960","Type":"PullRequestEvent","CreatedAt":"2022-08-12T19:49:49","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9184","RelatedDescription":"Merged pull request \"[ReleasePrep][2022.08.03] FI of main into dev for NuGetGallery\" (#9184) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"23450061873","Type":"IssuesEvent","CreatedAt":"2022-08-16T01:07:02","Actor":"birgithi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12026","RelatedDescription":"Opened issue \"[Bug]: Remove check for nugetrecommendpkgs flight in 17.2\" (#12026) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.2\n\n### Worked before?\n\nWill stop working after VS 17.4 release\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe will stop using the nugetrecommendpkgs flight starting after VS 17.4 release, so we also need to remove the check for the nugetrecommendpkgs flight in previous LTS versions.\n\n### Verbose Logs\n\n_No response_"},{"Id":"23450050670","Type":"IssuesEvent","CreatedAt":"2022-08-16T01:05:51","Actor":"birgithi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12025","RelatedDescription":"Opened issue \"[Bug]: Remove check for nugetrecommendpkgs flight in 17.0\" (#12025) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n17.0\n\n### Worked before?\n\nWill stop working after VS 17.4 release\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe will stop using the nugetrecommendpkgs flight starting after VS 17.4 release, so we also need to remove the check for the nugetrecommendpkgs flight in previous LTS versions.\n\n### Verbose Logs\n\n_No response_"},{"Id":"23450035712","Type":"IssuesEvent","CreatedAt":"2022-08-16T01:04:17","Actor":"birgithi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12024","RelatedDescription":"Opened issue \"[Bug]: Remove check for nugetrecommendpkgs flight in 16.11\" (#12024) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n16.11\n\n### Worked before?\n\nWill stop working after VS 17.4 release\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe will stop using the nugetrecommendpkgs flight starting after VS 17.4 release, so we also need to remove the check for the nugetrecommendpkgs flight in previous LTS versions.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"23449566125","Type":"IssuesEvent","CreatedAt":"2022-08-16T00:13:54","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5555","RelatedDescription":"Closed issue \"`UserSettingsDirectory` resolves incorrectly for dotnet on Mac\" (#5555) at NuGet/Home","RelatedBody":"## Environment\r\n\r\n`dotnet 2.0.0-preview3-006689`\r\nOS X (and presumably Linux)\r\n\r\n## The Problem\r\n\r\nWhen using NuGet functionality in .NET Core on Mac (and presumably Linux), `NuGetFolderPath.UserSettingsDirectory` incorrectly resolves to `~/.nuget`, causing a different default `NuGet.config` to be used than Visual Studio for Mac or any non-Core user of `Nuget.Client`.\r\n\r\n## Impact\r\n\r\nOn Windows, users expect to be able to modify their NuGet configuration via their IDE. They can add myget URLs, internal feeds, etc, all in Visual Studio, and those feeds will be available to `dotnet`. On Mac, users follow that same expectation and then cannot figure out why `dotnet` is not using the feeds they just configured.\r\n\r\nI sincerely hope it's possible to fix this in time for .NET Core 2.0 final.\r\n\r\n## Explanation\r\n\r\n`NuGetFolderPath.UserSettingsDirectory` is [documented](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior) to resolve to `%APPDATA%\\NuGet`. On Mac and Linux, using Mono, `SpecialFolder.ApplicationData` has always followed the [freedesktop.org XDG Base Directory Spec](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html), and mapped to the value of `XDG_CONFIG_HOME` (or `~/.config` by default).\r\n\r\nSo, anyone using `NuGet.Client` on Mac or Linux would have `NuGetFolderPath.UserSettingsDirectory` map to `~/.config/NuGet` by default. This is depended on by Visual Studio for Mac, among other products.\r\n\r\nIn fact, `Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData` returns `~/.config` in .NET Core 2.0, just like Mono.\r\n\r\nHowever, in `NuGetEnvironment`, which had to support earlier versions of .NET Core that lacked the `Environment.SpecialFolder` APIs, there is a [custom implementation](https://github.com/NuGet/NuGet.Client/blob/4.3.0.4273/src/NuGet.Core/NuGet.Common/PathUtil/NuGetEnvironment.cs#L81) to resolve locations like `ApplicationData`.\r\n\r\nFor some reason, [`ApplicationData` is made to resolve to `~/.nuget`](https://github.com/NuGet/NuGet.Client/blob/4.3.0.4273/src/NuGet.Core/NuGet.Common/PathUtil/NuGetEnvironment.cs#L129), even though `LocalApplicationData` is correctly following the XDG spec.\r\n\r\nI have to assume this behavior was kept to avoid breaking compatibility with earlier .NET Core releases. But I think that break is necessary to provide consistency with Visual Studio for Mac and other tools.\r\n\r\nOther reasons to fix this:\r\n\r\n* Consistency with [the documentation](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior).\r\n* Consistency with Windows, which has dropped use of  `~/.nuget`.\r\n* Littering a Linux user's home directory with random dot directories is bad practice. Users should be able to switch their entire desktop's configuration by simply changing the value of `XDG_CONFIG_HOME`.\r\n\r\nThis bug was originally filed at https://github.com/dotnet/sdk/issues/1398, but I was asked to move the discussion here."},{"Id":"23449562884","Type":"IssuesEvent","CreatedAt":"2022-08-16T00:13:32","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4413","RelatedDescription":"Closed issue \"[MacOS, Linux] NuGet writes the NuGet.Config in ~/.config folder, but dotnet restore reads from ~/.nuget\" (#4413) at NuGet/Home","RelatedBody":"When using NuGet to add a private feed, `NuGet Sources Add` writes in `~/.config/NuGet/NuGet.Config` file. But when using `dotnet restore` the `~/.nuget/NuGet/NuGet.Config` file is used to read the `packageSources` and `packageSourceCredentials`. \r\n\r\nThis issue forces users to manually copy and paste all necessary information instead of having that generated automatically by the NuGet CLI. \r\n\r\nDotNetCore repo issue: https://github.com/dotnet/core/issues/453"},{"Id":"23448809699","Type":"IssuesEvent","CreatedAt":"2022-08-15T23:00:13","Actor":"JosephNguyenDev","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12023","RelatedDescription":"Opened issue \"[Bug]: After Migration from package.config to PackageReference implementation, Build works, but Rebuild fails\" (#12023) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, NuGet.exe\n\n### Product Version\n\n.NET Framework 4.6.2\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI was on a project using .NET Framework 4.6.2 and was still using package.config. I used the migration tool to migrate the project to us ProjectReference instead. The project build correctly, but when I attempt to rebuild, the rebuild fails and my none of my nuget packages aren recognized.\n\n### Verbose Logs\n\n_No response_"},{"Id":"23448709475","Type":"IssuesEvent","CreatedAt":"2022-08-15T22:50:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9747","RelatedDescription":"Closed issue \"Listing transitive packages does not work with Xamarin projects\" (#9747) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\ndotnet.exe --version: **3.1.301**\r\n\r\n## Detailed repro steps so we can see the same problem\r\nRun: `dotnet list package --include-transitive` on any Xamarin.Android or Xamarin.iOS project. You will get the error:\r\n\r\n> error: The imported project \"C:\\Program Files\\dotnet\\sdk\\3.1.301\\Xamarin\\Android\\Xamarin.Android.CSharp.targets\" was not found. Confirm that the expression in the Import declaration \"C:\\Program Files\\dotnet\\sdk\\3.1.301\\Xamarin\\Android\\Xamarin.Android.CSharp.targets\" is correct, and that the file exists on disk.  C:\\git\\MvvmCross\\Projects\\Playground\\Playground.Droid\\Playground.Droid.csproj\r\n\r\nSimilarly, with Xamarin.iOS projects, where it is looking for Xamarin.Apple.CSharp.targets.\r\n\r\nThe targets for Xamarin.iOS and Xamarin.Android live in: `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin` not in the dotnet sdk folder.\r\n\r\nAlso posted here: https://github.com/dotnet/core/issues/4218\r\n"},{"Id":"23448681582","Type":"IssuesEvent","CreatedAt":"2022-08-15T22:47:41","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12012","RelatedDescription":"Closed issue \"Dotnet list package restore automatically if there is missing asset file\" (#12012) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\nn/a\r\n\r\n### Worked before?\r\n\r\nn/a\r\n\r\n### Impact\r\n\r\n_No response_\r\n\r\n### Repro Steps & Context\r\n\r\nFeedback follow up for https://github.com/NuGet/Home/pull/11983. \r\nIf `asset file missing` then instead of just error out better do restore on the spot could be better customer experience. `dotnet build` already does same thing.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"23448601112","Type":"IssuesEvent","CreatedAt":"2022-08-15T22:40:04","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12003","RelatedDescription":"Closed issue \"[Bug]: [Pack] The error “NU5017: Cannot create a package that has no dependencies nor content” occurs when the nuspec file located in other folder than the package’s path\" (#12003) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\nDev\\6.4.0.33\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n#### Details about Problem\r\nVS Version: Main\\32803.137\r\nNuGet Version: Dev\\6.4.0.33\r\nOS Version: Windows-11-Enterprise-21H2 ENU\r\n\r\n#### Detailed repro steps\r\n1. Create a C# Class Library (.NET 7.0) in VS and create a nuspec file by running `“nuget spec” `under the package’s path. \r\n2. Update the info in the nuspec file and run `“dotnet pack -p:NuspecFile=\"C:\\Users\\v-luzh\\Source\\Repos\\Package001\\Package001\\Package.nuspec\" -p:NuspecBasePath=C:\\Users\\v-luzh\\Source\\Repos\\Package001\\Package001”`. \r\n3. Update the version info in the nuspec file and copy it to another folder (C:\\Users\\v-luzh\\Source\\Repos\\SpecFile).\r\n4. Run `“dotnet pack -p:NuspecFile=\"C:\\Users\\v-luzh\\Source\\Repos\\SpecFile\\Package.nuspec\" -p:NuspecBasePath=C:\\Users\\v-luzh\\Source\\Repos\\SpecFile”`.\r\n\r\n#### Expected\r\nThe package can be packed successfully (like the result of step2). \r\n\r\n#### Actual\r\nThe error “NU5017: Cannot create a package that has no dependencies nor content” occurs as below.\r\n![image](https://user-images.githubusercontent.com/20632625/182815733-9d32e686-617c-429c-850a-8b9c1191642e.png)\r\n\r\n#### Note:\r\n1.It seems not a regression since it reproes on NuGet Client 5.11.2.2.\r\n2.It reproes when the NuspecBasePath >=6 layers, doesn't repro when the NuspecBasePath <5 layers."},{"Id":"23448408668","Type":"IssuesEvent","CreatedAt":"2022-08-15T22:23:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12018","RelatedDescription":"Closed issue \"[Bug]: A typo in NuGet.Client LockFileFormat.cs\" (#12018) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nNuGet.Client repo dev branch\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nIt's a typo in source code. I just found it when reading the code. `ServicableProperty` missing a letter `e`\n\n### Verbose Logs\n\n_No response_"},{"Id":"23446531846","Type":"IssuesEvent","CreatedAt":"2022-08-15T20:15:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/11090","RelatedDescription":"Reopened issue \"Reduce UI thread switching when determining solution folder and if solution is open\" (#11090) at NuGet/Home","RelatedBody":"NuGet's Visual Studio extension has a class named `VsSolutionManager`, which provides some APIs to the rest of our code. Two of these APIs, `SolutionDirectory` and `IsSolutionOpenAsync` switch to the UI thread.\r\n\r\nIn at least one of the code paths, `IsSolutionOpenAsync` is called from a background thread, therefore switches to the UI thread, and returns it's value. This causes the caller to schedule its continuation on the background thread, but it then immediately calls another API that switches to the UI thread again.  This adds latency to the customer experience. While switching to the UI thread in the caller will remove the bouncing between threads, code running on the UI thread prevents other code from using the UI thread until our code finishes running. Therefore removing the need for the UI thread is preferable.\r\n\r\nSolutionDirectory can be obtained once, and cached, eliminating the need to switch to the UI thread every time the directory is needed.\r\n\r\nThis class already listens to solution events, so IsSolutionOpenAsync can cache the last known state change."},{"Id":"23444428170","Type":"IssuesEvent","CreatedAt":"2022-08-15T18:06:15","Actor":"jaredpar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12022","RelatedDescription":"Opened issue \"Regression, .400 msbuild reports error on duplicate PackageVersions\" (#12022) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\n6.0.400\n\n### Worked before?\n\nyes\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nAfter upgrading to 6.0.400 version of SDK, dotnet restore fails on all our project. We had (benign) duplicate entries. This worked fine on 6.0.302, but now on 6.0.400 this results in build failures.\r\n\r\n### Steps to Reproduce\r\n\r\nhttps://github.com/erinlah-ms/bug-repros/tree/main/repro-packageversiondup\r\n\r\n1. install just 6.0.302 sdk\r\n2. clone folder linked above\r\n3. cd original\r\n4. dotnet restore. Note no errors\r\n5. install 6.0.400 sdk (don't uninstall .302)\r\n6. dotnet restore. \r\n7. cd workaround\r\n8. dotnet restore\r\n9. open visual studio 17.3.0 (latest VS 2022 Enterprise)\r\n10. build/restore the workaround.csproj from visual studio\r\n\r\n\r\n### Expected Behavior\r\n\r\nError at step 6, building original.csproj, no errors at step 8 or 10 building workaround.csproj\r\n\r\n### Actual Behavior\r\n\r\nStep 10 fails to restore/build in visual studio, despite workaround.\r\n\r\n### Analysis\r\n\r\nIt appears that release .400 introduced a new warning for duplicate PackageVersion entries. This broke our repo.\r\n\r\nNormally we would just workaround the issue until such time as we could fix it. However, Visual Studio does not permit the user to downgrade to an older release of msbuild. Building the 'workaround.csproj' folder under visual studio still fails.\r\n\r\nVisual Studio lacks an option to honor the msbuild/sdk version selected in the repo. It partially ignores global.json by using the version/build of msbuild that is shipped in box in visual studio, including using the targets/tasks defined in that version of msbuild.\r\n\r\n### Versions & Configurations\r\n\r\nDotnetsdk 6.0.302 / dotnet msbuild 17.2.0+41abc5629\r\ndotnetsdk 6.0.400 / dotnet msbuild  17.3.0+92e077650\r\nVisual Studio 2022 Enterprise 17.3.0\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"22334696634","Type":"IssuesEvent","CreatedAt":"2022-06-14T17:23:29","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2022-30184 | .NET Information Disclosure Vulnerability\" (#62) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2022-30184 | .NET Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0 and .NET Core 3.1, NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0) where a nuget.org credential could be leaked.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/nuget/home/issues. (TBD)\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.0.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.11.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.9.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.7.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 4.9.4 version or earlier.\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET 6.0 application running on .NET 6.0.5 or earlier.\r\n- Any .NET 3.1 application running on .NET Core 3.1.25 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet.exe, NuGet package, or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version 4.9.5, 5.7.2, 5.9.2, 5.11.2, 6.0.2, 6.2.1). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nIf you're using NuGet.exe 6.2.0 or lower, you should download and install 6.2.1 from https://dist.nuget.org/win-x86-commandline/v6.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 6.0.1 or lower, you should download and install 6.0.2 from https://dist.nuget.org/win-x86-commandline/v6.0.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.11.1 or lower, you should download and install 5.11.2 from https://dist.nuget.org/win-x86-commandline/v5.11.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.9.1 or lower, you should download and install 5.9.2 from https://dist.nuget.org/win-x86-commandline/v5.9.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.7.1 or lower, you should download and install 5.7.2 from https://dist.nuget.org/win-x86-commandline/v5.7.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.2.0 or lower, you should download and install 5.2.1 from https://dist.nuget.org/win-x86-commandline/v5.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 4.9.4 or lower, you should download and install 4.9.5 from https://dist.nuget.org/win-x86-commandline/v4.9.5/nuget.exe.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nIf you're using .NET Core 6.0, you should download and install Runtime 6.0.6 or SDK 6.0.106 (for Visual Studio 2022 v17.0) or SDK 6.0.301 (for Visual Studio 2022 v17.2) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nIf you're using .NET Core 3.1, you should download and install Runtime 3.1.26 or SDK 3.1.420 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET 5 or .NET 6.0, please email details to [secure@microsoft.com](secure@microsoft.com). Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at [https://github.com/NuGet/NuGet.Client](https://github.com/NuGet/NuGet.Client). The [Announcements repo](https://github.com/NuGet/Announcements/issues) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2022-30184](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30184)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 14, 2022): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2022-06-14_\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":52,"FavoriteCount":14,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":49,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null},{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null},{"Id":"1514312671931346950","CreatedAt":"2022-04-13T18:40:50+00:00","UserScreenname":"nuget","Text":"📦Introducing Central Package Management📦\n\n📥 Manage dependencies in a central location.\n📌 Transitive package version… https://t.co/koNbWTt5m2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":247,"FavoriteCount":75,"RawContent":null},{"Id":"1511771370253864962","CreatedAt":"2022-04-06T18:22:36+00:00","UserScreenname":"nuget","Text":"Hi friends,\n\nTwo fun proposals this week!\n\nPack ProjectReferences - https://t.co/Mvu8bTaq5D 📦\n\nIssue Triage Policy… https://t.co/dTbIa9McB2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2022-08-16T03:30:24.8045754Z","RunDurationInMilliseconds":1393}