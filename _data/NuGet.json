{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44841393717","Type":"PullRequestEvent","CreatedAt":"2024-12-16T19:59:51","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10309","RelatedDescription":"Merged pull request \"Update EntityFramework package for vulnerability alert \" (#10309) at NuGet/NuGetGallery","RelatedBody":"EntityFramework 6.4.4 is deprecated with vulnerable, update to latest stable. \r\n\r\nNote: There is change:  New SQL Server / Azure SQL Database provider (contributed by the community) - [Microsoft.EntityFramework.SqlServer](https://www.nuget.org/packages/Microsoft.EntityFramework.SqlServer/). This new provider uses the modern SQL Server client [Microsoft.Data.SqlClient](https://www.nuget.org/packages/Microsoft.Data.SqlClient). For more information about configuration of this provider, see [Microsoft.EntityFramework.SqlServer Guide](https://learn.microsoft.com/en-us/ef/ef6/what-is-new/microsoft-ef6-sqlserver).\r\n\r\nIt provides new provider configuration, no changes on default one. We should be good\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5732"},{"Id":"44809599112","Type":"IssuesEvent","CreatedAt":"2024-12-16T02:13:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Github repository dependenc list should not include package's own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Describe the bug\r\n\r\nI found a few times that a nuget package lists its own repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\r\n\r\n### Repro Steps\r\n\r\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\r\n\r\n### Expected Behavior\r\n\r\nIt should not list its own Github repo as a dependent repo.\r\n\r\n### Screenshots\r\n\r\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"44807074974","Type":"IssuesEvent","CreatedAt":"2024-12-15T22:54:46","Actor":"tonyqus","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10310","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Github repository dependency list should not include its own repo\" (#10310) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nI found a few times that a nuget package lists it's self repo as the dependent Github repo. Since I saw it again today, I'd like to open an issue for this.\n\n### Repro Steps\n\nNuget Url: https://www.nuget.org/packages/FileSignatures\r\nGithub Repo URL: https://github.com/neilharvey/FileSignatures/\n\n### Expected Behavior\n\nIt should not list its own Github repo as a dependent repo.\n\n### Screenshots\n\n![image](https://github.com/user-attachments/assets/ba36071a-a55a-45db-b719-5489b9b0d4c1)\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44965043092","Type":"IssuesEvent","CreatedAt":"2024-12-20T00:12:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7344","RelatedDescription":"Closed issue \"Support \"Supplied by Platform\" scenario in restore\" (#7344) at NuGet/Home","RelatedBody":"With .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) to deliver reference assemblies for the framework.  These targeting packs will not be represented as NuGet packages in the package graph in the way that Microsoft.NETCore.App, Microsoft.AspNetCore.App, and NETStandard.Library currently are.\r\n\r\nWhen a .NET Core 3 project depends on a package that has a dependency on one of these older \"platform\" packages, we want that platform package and its dependencies to be ignored in the NuGet graph, as those APIs are supplied by the platform via other mechanisms (targeting packs at build time and runtime packs for self-contained deployments).\r\n\r\nWe've thought of two possible ways to exclude the platform packages and dependencies from the graph.  This issue is for one of them.  The other one is #7343 \r\n\r\nTo exclude these packages, we could pass an additional list of packages to the restore operation that should be ignored in the graph walk.  We might call these \"Supplied by Platform\" packages.  When walking the graph, if the restore operation encountered a dependency on any of these package (with a version less than or equal to the version marked as supplied by the platform), then it would ignore that dependency (and would not walk its dependencies further).\r\n\r\nSpec: https://github.com/NuGet/Home/blob/dev/accepted/2024/prune-package-reference.md\r\n\r\nProject-System changes: https://github.com/dotnet/project-system/pull/9610"},{"Id":"44964162006","Type":"IssuesEvent","CreatedAt":"2024-12-19T23:17:30","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14011","RelatedDescription":"Opened issue \"Can't update or install packages when two or more vulnerable packages with TreatWarningsAsErrors\" (#14011) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nTrying to update one package will fail the install because of the second package with a vulnerability. This makes it impossible to use VS to update vulnerable packages as long as warnings are treated as errors\n\n### Desired Behavior\n\nIgnore non-critical errors (like vulnerable package) when updating or installing packages in VS\n\n### Additional Context\n\n_No response_"},{"Id":"44959246083","Type":"IssuesEvent","CreatedAt":"2024-12-19T19:42:46","Actor":"embetten","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14010","RelatedDescription":"Opened issue \"Enable CanShowDialog for .NET core Authentication Plugins\" (#14010) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently, NuGet does [not enable canShowDialog for .NET core authentication plugins](https://github.com/NuGet/Home/wiki/NuGet-cross-plat-authentication-plugin#how-do-dotnetexemsbuildexe-work-with-the-plugin). In these scenarios, `canShowDialog` is hard-coded to false in the [defaultCredentialService](https://github.com/NuGet/NuGet.Client/blob/9dd33574b0cf5110692ee8e9401a39857fb5523a/src/NuGet.Core/NuGet.Credentials/DefaultCredentialServiceUtility.cs#L64). As a result, users with a .NET core NuGet authentication plugin backed by MSAL will be forced down [device code flow](https://learn.microsoft.com/en-us/entra/identity-platform/msal-authentication-flows#device-code) instead of [interactive authentication flow](https://learn.microsoft.com/en-us/entra/msal/dotnet/acquiring-tokens/using-web-browsers) even if a pop up or browser auth is available and preferred. \n\n### Desired Behavior\n\nTo help users avoid device code flow where possible, this behavior should be changed to allow the `canShowDialog` parameter to be passed by the user to .NET Core plugins. Additionally, the relevant [dotnet cli NuGet commands](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore?tabs=netcore2x) and other .NET core integration points should be updated to pass the `canShowDialog` argument. This change will give users the flexibility to choose their preferred authentication method, enhancing both usability and security.\n\n### Additional Context\n\nAdditional context to consider:\r\n- MSAL is the standard authentication library. For users that do not have WAM/WIA broker authentication available, device code flow is the only authentication method available without a pop-up dialog.\r\n-  Device code flow is a negative user experience compared to other MSAL authentication methods and a [higher-risk authentication flow](https://learn.microsoft.com/en-us/entra/identity/conditional-access/concept-authentication-flows#device-code-flow). Device code flow cannot be bound to a device, which prevents Entra tenant admins from adding conditional access policies that check for specific devices. These integration points should be updated to enable our security-conscious users to easily avoid device code flow where possible.\r\n- With mono no longer being supported, more users are being pushed to the .NET core plugins. Without this proposed behavior change, more users will be pushed to device code flow. Users migrating from the .NET framework experience to the .NET core behavior will no longer have `canShowDialog` option thereby degrading their experience.\r\n- The [artifacts-credprovider](https://github.com/microsoft/artifacts-credprovider) is considering long term plans to return Entra tokens instead of ADO PAT tokens. In doing so, the login frequency would be reduced to the lifetime of the Entra tokens. Without this proposed behavior change, users would be prompted via device code flow every 24-hour period. We would like users to have an easier way to specify device code flow alternatives to make this migration a more viable user experience.\r\n- By popular demand, [artifacts-credprovider](https://github.com/microsoft/artifacts-credprovider) has implemented a workaround to allow users to override this behavior by setting an environment variable `NUGET_CREDENTIALPROVIDER_FORCE_CANSHOWDIALOG_TO` ([see here in the readme](https://github.com/microsoft/artifacts-credprovider?tab=readme-ov-file#help)). However, we suspect this environment variable is not widely known, and setting environment variables instead of passing command line arguments is a disjointed experience for CLI users."},{"Id":"44917701043","Type":"IssuesEvent","CreatedAt":"2024-12-18T17:42:35","Actor":"tremblaysimon","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14008","RelatedDescription":"Opened issue \"--protocolVersion argument description isn't accurate about the default value\" (#14008) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 9.0.0\n\n### Worked before?\n\ndocumentation issue\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe description of the `--protocolVersion` argument isn't accurate when we do the command `dotnet nuget add source --help`. Currently it's \r\n\r\n>The NuGet server protocol version to be used. Currently supported versions are 2 and 3. See https://learn.microsoft.com/nuget/api/overview for information about the version 3 protocol. Defaults to 2 if not specified.\r\n\r\n\r\nBut if we refer to https://learn.microsoft.com/en-us/nuget/reference/nuget-config-file official documentation, we can read this: \r\n\r\n>The NuGet server protocol version to be used. The current version is \"3\". Defaults to version \"2\" when not pointing to a package source URL ending in .json (e.g. https://api.nuget.org/v3/index.json). Supported in [NuGet 3.0+](https://learn.microsoft.com/en-us/nuget/release-notes/nuget-3.0.0). See [NuGet Server API](https://learn.microsoft.com/en-us/nuget/api/overview) for more information about the version 3 protocol.\r\n\r\nThe misleading here reside in the default value. When we are reading the description of nuget command line help, it says that it defaults to value 2 if there is nothing. But in the end it's not true if the source URL ending in .json according to the official documentation.\r\n\r\nI think the description in help command should be more accurate about the default value. \r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44916599185","Type":"IssuesEvent","CreatedAt":"2024-12-18T17:07:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14007","RelatedDescription":"Opened issue \"Cleanup ServiceProviderExtensions, remove GetFreeThreadedServiceAsync\" (#14007) at NuGet/Home","RelatedBody":"See details: https://github.com/NuGet/NuGet.Client/pull/6190#discussion_r1889544023\r\n\r\n\r\nSince 17.11, the extra extension method is unnecessary."},{"Id":"44910838404","Type":"IssuesEvent","CreatedAt":"2024-12-18T14:33:10","Actor":"BartNSTCL","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14006","RelatedDescription":"Opened issue \"Microsoft.TeamFoundationServer.Client 19.246.0-preview\" (#14006) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n19.246.0-preview\n\n### Worked before?\n\n19.225.1\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen I try to upgrade from 19.225.1 to 19.246.0-preview, there is an error. It looks like the new version is trying to downgrade System.Security.Cryptography.ProtectedData to 6.0.0. Currently, I have version 9.0.0 installed.\n\n### Verbose Logs\n\n```shell\nWarning As Error: Detected package downgrade: System.Security.Cryptography.ProtectedData from 8.0.0 to 6.0.0. Reference the package directly from the project to select a different version.\r\nNstclInterfaces.Models -> Microsoft.EntityFrameworkCore.SqlServer 9.0.0 -> Microsoft.Data.SqlClient 5.2.1 -> System.Configuration.ConfigurationManager 8.0.0 -> System.Security.Cryptography.ProtectedData (>= 8.0.0)\r\nNstclInterfaces.Models -> Microsoft.TeamFoundationServer.Client 19.246.0-preview -> Microsoft.VisualStudio.Services.Client 19.246.0-preview -> System.Security.Cryptography.ProtectedData (>= 6.0.0)\n```\n"},{"Id":"44902107302","Type":"IssuesEvent","CreatedAt":"2024-12-18T10:25:01","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14005","RelatedDescription":"Opened issue \"[Bug Bash] Inconsistent package owners show on the right of the package ID between “Browse” tab and “Installed” tab\" (#14005) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.99\n\n### Worked before?\n\nIt is not a regression since it also reproes on D17.12\\33523.42 with implicit NuGet Client 6.12.1.1. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\n1. The repro rate is 100%.  \r\n\r\n2. This issue does not repro when no “Owner(s)” in “Package Details” section of detail pane in “Browse” tab. \r\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET 9.0) project in VS. \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.  \r\n\r\n3. Select the package source: \"nuget.org\" near the gear button.  \r\n\r\n4. Go to the “Browse\" tab, install package “Microsoft.Extensions.Logging” into the Project. \r\n\r\n5. Observe the package owners on the right of package ID. \r\n\r\n6. Go to the “Installed” tab and observe the package owners on the right of package ID. \r\n\r\n \r\n\r\n#### Expected:    \r\n\r\nThe package owners should be consistent for the same package between “Browse” tab and “Installed” tab. \r\n\r\n \r\n\r\n#### Actual:    \r\n\r\nInconsistent package owners show on the right of the package ID between “Browse” tab and “Installed” tab as below screenshots:  \r\n![image](https://github.com/user-attachments/assets/1862c6e6-c4ce-49cc-8b1c-b3e5cbfb7f48)\r\n![image](https://github.com/user-attachments/assets/a43139f8-3e93-4e24-a5ab-293cae75dec1)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44900888752","Type":"IssuesEvent","CreatedAt":"2024-12-18T09:51:10","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13857","RelatedDescription":"Closed issue \"System.Text.Json 8.0.4 has security vulnerability\" (#13857) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nlatest\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nNuGet.Client references System.Text.Json 8.0.4: \r\n https://github.com/NuGet/NuGet.Client/blob/fd6880078a435aa63fb1290e9bc58fb8dea6a4fd/Directory.Packages.props#L8\r\n\r\nThis version has a security vulnerability:  https://github.com/advisories/GHSA-8g4q-xg66-9fp4\n\n### Verbose Logs\n\n_No response_"},{"Id":"44899992507","Type":"IssuesEvent","CreatedAt":"2024-12-18T09:26:11","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/14004","RelatedDescription":"Opened issue \"[Bug Bash] The vulnerable info shows inconsistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”\" (#14004) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.99\n\n### Worked before?\n\nIt is not regression since it reproes on VS 17.12.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.99\r\nVS Version: Main\\35617.63\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\n1.\tThe repro rate is 100%.  \r\n2.\tIt is not regression since it reproes on VS 17.12.\r\n#### Repro Steps:    \r\n1.\tCreate a “C# Console App (.NET Framework 4.8.1)” project.    \r\n2.\tRight-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open the PM UI.   \r\n3.\tSelect the package sources “nuget.org” from “Package source” dropdown box and search for the package “Microsoft.Data.Services.Client”. \r\n4.\tSelect.”5.8.0” in the “Version” dropdown list and click “Install” button.\r\n5.\tGo to “Installed” tab and observe the package info in both “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”.\r\n\r\n#### Expected Result:\r\nThe vulnerable info shows consistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData”.\r\n#### Actual Result:\r\nThe vulnerable info shows inconsistently between “Package Details” & “Version” dropdown list for the transitive package “Microsoft.Data.OData” as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/c78e89da-614f-467a-824d-9c3679850eab)\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-20T03:30:24.9239527Z","RunDurationInMilliseconds":1061}