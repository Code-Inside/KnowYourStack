{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33529077843","Type":"IssuesEvent","CreatedAt":"2023-11-21T23:16:52","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9736","RelatedDescription":"Opened issue \"NuGet.org suggests Alpine Linux customers migrate to Alpine Linux 3.18.0 or newer version\" (#9736) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nN/A\n\n### Repro Steps\n\nN/A\n\n### Expected Behavior\n\nN/A\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"33465058106","Type":"IssuesEvent","CreatedAt":"2023-11-19T23:14:56","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9735","RelatedDescription":"Opened issue \"[Feature]: Show Framework References under Dependencies in NuGet.org\" (#9735) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nToday, NuGet.org does not show Framework References, only dependencies in a package.\r\n\r\nWe should show framework references so people can see everything included in a package.\r\n\r\nNuGet Package Explorer does this already for prior art:\r\n\r\n![image](https://github.com/NuGet/Home/assets/1288848/ee49eac5-ebaa-4528-8138-856e918281e8)\r\n\r\n/cc @damianedwards\r\n\r\nReference: https://github.com/NuGet/Home/issues/13025\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33439853159","Type":"PullRequestEvent","CreatedAt":"2023-11-17T19:13:13","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9710","RelatedDescription":"Merged pull request \"Fixing popularity transfer download count bug, surfacing additional validation info\" (#9710) at NuGet/NuGetGallery","RelatedBody":"1. The Popularity Transfer Admin Panel has a bug where it shows version-specific download counts for packages, rather than the package registration's download count, which is what we want (we transfer popularity from one package registration to another). I had to refactor some code to get that data correctly. This now works:\r\n(DEV packages: https://dev.nugettest.org/packages/Newtonsoft.Json/)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/cfb0981a-0010-420b-95e6-4a25811e3eef)\r\n\r\n\r\n2. I also added some more validation info to the Admin Panel page, which should save us from having to go look in the SQL DB manually every time every time: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/2650b9a4-7113-429b-8f71-1dcf02f1f2a6)\r\n"},{"Id":"33438585783","Type":"PullRequestEvent","CreatedAt":"2023-11-17T18:13:18","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9733","RelatedDescription":"Merged pull request \"Refactored FrameworkCompatibilityService for use in NuGet.Jobs\" (#9733) at NuGet/NuGetGallery","RelatedBody":"We want to reuse the `FrameworkCompatibilityService` in the NuGet.Jobs repo to get packages' computed frameworks in the Search index-builder jobs. To make this code easier to reuse, I made it a static class. I also updated all its existing references and tests.\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/4979"},{"Id":"33432077602","Type":"IssuesEvent","CreatedAt":"2023-11-17T14:07:01","Actor":"IrinaPykhova","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9734","RelatedDescription":"Opened issue \"[NuGet.org Bug]: net8.0-windows does not show as a computed compatible framework for a net6.0-windows and net7.0-windows packages\" (#9734) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWe are developing .Net controls for different platforms. This month we tested all our controls for compatibility with .Net 8. .Net 6 packages are fully compatible and can work under .Net 8, but Nuget.org doesn't show net8.0-windows in the list of computed frameworks for all the packages which target net6.0-windows.\r\nThe same happens with other platforms like Android or iOS: https://github.com/NuGet/NuGetGallery/issues/9711\r\n\r\nNuget.org only shows net8.0 for all platforms if original target is net6.0 without platform specifier. But it is not possible to use for WinForms or WPF packages.\n\n### Repro Steps\n\nOpen this link: https://www.nuget.org/packages/C1.WPF.Core/7.0.20233.662#supportedframeworks-body-tab\n\n### Expected Behavior\n\nnet8.0-windows should present in the list of additional computed target frameworks\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/19591075/e4005849-0a3b-4939-bfe6-bb08848be3fd)\r\n\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33555657635","Type":"IssuesEvent","CreatedAt":"2023-11-22T19:10:02","Actor":"siegfriedpammer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13038","RelatedDescription":"Opened issue \"FrameworkReducer.GetNearest() reports an error for net60 and net472 ever since version 5.6.0 preview 2\" (#13038) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n5.6.0-preview.2.6489 and later\n\n### Worked before?\n\n5.6.0-preview.1.6483 and earlier\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI am using the `FrameworkReducer.GetNearest(NuGetFramework framework, IEnumerable<NuGetFramework> possibleFrameworks)` to check whether there is framework compatible with a chosen target in a list of possible frameworks.\r\n\r\nScenario: Main Project uses .NET 6.0; Library uses .NET 4.7.2 and the main project references the library.\r\n\r\nThe `FrameworkReducer` instance is created using it's default ctor and uses built-in mappings, no custom overrides.\r\n\r\nSo for the library `FrameworkReducer.GetNearest` is called as follows:\r\n(using strings and collection-literals pseudo-syntax for brevity)\r\n`var chosen = reducer.GetNearest(\"net6.0\", [ \"net472\" ]);`\r\n\r\nThe expected output would be chosen == \"net472\", but the result is null; i.e., an error.\r\n\r\nNote that, Visual Studio, MSBuild, NuGet and the .NET Runtime are **completely fine with compiling, executing and debugging a net60 program that references a net472 library**.\r\n\r\nProblem can also be reproduced here:\r\nhttps://nugettools.azurewebsites.net/5.6.0-preview.1.6483/get-nearest-framework?project=net60&package=net472 (works as expected)\r\nhttps://nugettools.azurewebsites.net/5.6.0-preview.2.6489/get-nearest-framework?project=net60&package=net472 (no longer works)\r\n\r\nHere is the list of changes between these two versions:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/compare/5.6.0.6483...5.6.0.6489 and from the commit message it seems that this commit broke the algorithm: https://github.com/NuGet/NuGet.Client/commit/162e23520da60ead3868b48b097731b1e405a5e4, however, I am unable to verify or pin-point the cause further, as the commit changes a lot of things all over the place.\r\n\r\nIs this a bug or is this expected? Is FrameworkReducer the correct API to solve my problem? Is there some other API I can use to answer the question: \"Can framework X be referenced/used by framework Y?\"\r\n\r\nThank you for your help!\n\n### Verbose Logs\n\n_No response_"},{"Id":"33545356094","Type":"IssuesEvent","CreatedAt":"2023-11-22T13:00:31","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12958","RelatedDescription":"Closed issue \"Polly 7.4.2 Invalid Signature when dotnet restore run via MSBuild\" (#12958) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nMSBuild.exe\r\n\r\n### Product Version\r\n\r\nmsbuild -version 17.2.0+41abc5629\r\n\r\n### Worked before?\r\n\r\nYes. Polly 7.2.3.1\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\nI updated the package Polly 7.2.3.1 to version 7.2.4.\r\n\r\nI then tried to run this change through an MS build pipeline which includes a dotnet restore step. This is now failing the dotnet restore error \"The package signature is invalid or cannot be verified on this platform.\"\r\n\r\nPer [this documentation](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3003), it said to report the issue here.\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\nerror NU3003: Package 'Polly 7.2.4' from source: The package signature is invalid or cannot be verified on this platform.\r\n```\r\n"},{"Id":"33524669557","Type":"PullRequestEvent","CreatedAt":"2023-11-21T19:34:08","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13029","RelatedDescription":"Merged pull request \"Move existing Proposals to Accepted folder\" (#13029) at NuGet/Home","RelatedBody":"Update the meta/README to explain the change that we don't store proposals in a folder, but instead store them in a PR.\r\nMoving all existing proposals to the corresponding `accepted` folder."},{"Id":"33523434137","Type":"IssuesEvent","CreatedAt":"2023-11-21T18:40:02","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13018","RelatedDescription":"Closed issue \"NuGet.Client repo needs to support net9.0 TFM\" (#13018) at NuGet/Home","RelatedBody":"The [NuGet.Client repo](https://github.com/NuGet/NuGet.Client/) currently targets `net8.0`. For .NET source build, we're updating to use the .NET 9 SDK which requires that NuGet target `net9.0`.\r\n\r\nThese are the affected sources that need to be updated:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/39ea8e8081541fb1eb4702a5546e12f81fcad34d/build/common.project.props#L15\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/39ea8e8081541fb1eb4702a5546e12f81fcad34d/build/common.targets#L9\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/39ea8e8081541fb1eb4702a5546e12f81fcad34d/src/NuGet.Core/NuGet.Configuration/NuGet.Configuration.csproj#L29\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/39ea8e8081541fb1eb4702a5546e12f81fcad34d/src/NuGet.Core/NuGet.PackageManagement/NuGet.PackageManagement.csproj#L35"},{"Id":"33523271097","Type":"IssuesEvent","CreatedAt":"2023-11-21T18:33:15","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13032","RelatedDescription":"Closed issue \"Upgrade System.Commandline version\" (#13032) at NuGet/Home","RelatedBody":"Upgrade the package version to match to the one being used in the sdk."},{"Id":"33523258787","Type":"IssuesEvent","CreatedAt":"2023-11-21T18:32:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13015","RelatedDescription":"Closed issue \"error MSB4018: System.ArgumentException: Invalid framework version '4.7.2/win'\" (#13015) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.8.0.131\n\n### Worked before?\n\n6.7\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nAfter build pipeline had updated nuget.exe to 6.8, the build fails reproducible with:\r\n\r\n`...Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.ArgumentException: Invalid framework version '4.7.2/win'`\r\n\r\nThe projects target frameworks did not change: `<TargetFrameworks>net472;netstandard2.0</TargetFrameworks>`\r\n\r\nAfter pinning nuget to 6.7, build succeeded again.\r\n\r\nThe build output can be observed here: https://dev.azure.com/tom-englert/Open%20Source/_build?definitionId=35\r\n\r\nThe sources of the project can be found here:  https://github.com/dotnet/ResXResourceManager\r\n\r\nA similar issue has been reported here: https://github.com/dotnet/sdk/issues/16666\r\n\r\n\n\n### Verbose Logs\n\n```shell\n\"D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj\" (default target) (3:8) ->\r\n(ResolvePackageAssets target) -> \r\n  C:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.ArgumentException: Invalid framework version '4.7.2/win'. [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at NuGet.Frameworks.NuGetFramework.ParseFrameworkNameParts(IFrameworkNameProvider mappings, String[] parts, String& framework, Version& version, String& profile) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at NuGet.Frameworks.NuGetFramework.ParseFrameworkName(String frameworkName, IFrameworkNameProvider mappings) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at NuGet.Frameworks.NuGetFramework.Parse(String folderName, IFrameworkNameProvider mappings) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<>c__DisplayClass59_0.<WritePackageDependenciesDesignTime>b__6(String tg) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<>c__DisplayClass59_0.<WritePackageDependenciesDesignTime>b__4(IAssetsLogMessage log) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.WhereListIterator`1.MoveNext() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<WritePackageDependenciesDesignTime>g__GetPackageDiagnosticLevel|59_2(LockFileLibrary package) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WritePackageDependenciesDesignTime() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroup(Action writeItems) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroups() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.Write() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteToCacheFile() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [D:\\a\\1\\s\\src\\ResXManager.Infrastructure\\ResXManager.Infrastructure.csproj::TargetFramework=netstandard2.0]\n```\n"},{"Id":"33522881834","Type":"IssuesEvent","CreatedAt":"2023-11-21T18:17:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4681","RelatedDescription":"Closed issue \"PM UI multi targeting experience is incomplete\" (#4681) at NuGet/Home","RelatedBody":"If you have a package reference in multiple conditional item groups, then PM UI does not update all occurrences of the package.\r\n\r\nRepro Steps- \r\n1. Start with - \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard1.0;netstandard1.3;net45;uap10.0;portable-win81+wpa81;win8;wpa81;wp8</TargetFrameworks>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n2. Install NUnit v3.4.0 - \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard1.0;netstandard1.3;net45;uap10.0;portable-win81+wpa81;win8;wpa81;wp8</TargetFrameworks>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'win8'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'wp8'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'uap10.0'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'wpa81'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'portable-win81+wpa81'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n3. Update NUnit to v3.6.0 through the PM UI - \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard1.0;netstandard1.3;net45;uap10.0;portable-win81+wpa81;win8;wpa81;wp8</TargetFrameworks>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'win8'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'wp8'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'uap10.0'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'wpa81'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'portable-win81+wpa81'\">\r\n    <PackageReference Include=\"NUnit\">\r\n      <Version>3.4.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NUnit\" Version=\"3.6.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter the third step, we add an unconditional reference to NUnit v3.6.0 without removing existing conditional package references. This leads to a customer bug - vsfeedback/812089\r\n\r\nRelated: https://github.com/NuGet/Home/issues/5521"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-23T03:30:20.0463407Z","RunDurationInMilliseconds":1155}