{"Data":{"Blog":{"FeedItems":[{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null},{"Title":"Happy 10th Birthday, NuGet!","PublishedOn":"2021-01-14T01:29:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet 1.0 was released on January 13th, 2011 – 10 years and 4 major version releases ago. Since then, NuGet.org has grown to host a large and vibrant package ecosystem with over 230 thousand unique...","Href":"https://devblogs.microsoft.com/nuget/happy-10th-birthday-nuget/","RawContent":null},{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"15800465345","Type":"PullRequestEvent","CreatedAt":"2021-04-02T23:54:35","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8485","RelatedDescription":"Opened pull request \"Preparing ErrorLog for secret refresh.\" (#8485) at NuGet/NuGetGallery","RelatedBody":"Using connection string factory in `AzureEntityList`  instead of explicit connection string. Allows singleton to refresh connection string."},{"Id":"15799783431","Type":"IssuesEvent","CreatedAt":"2021-04-02T21:43:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8480","RelatedDescription":"Closed issue \"NuGet.org outage work-arounds\" (#8480) at NuGet/NuGetGallery","RelatedBody":"Here is where the team will post and discuss work-arounds for the current NuGet.org outage. "},{"Id":"15799764850","Type":"PullRequestEvent","CreatedAt":"2021-04-02T21:40:02","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8484","RelatedDescription":"Opened pull request \"Report services are not using Blob storage SDK classes anymore.\" (#8484) at NuGet/NuGetGallery","RelatedBody":"Report services were using Storage SDK classes directly instead of our wrappers around them.  To centralize blob storage access code this change makes them use `ICloudBlobClient`.\r\n\r\nDuplicated code that switches between the primary and alternate source for stats was removed from individual services and moved into DI container. A registration of `ICloudBlobClient` keyed as `BindingKeys.FeatureFlaggedStatisticsKey` resolves to a blob client that points to the proper storage account. Services are supposed to request `Func<ICloudBlobClient>` from the DI container that will provide proper client on each individual call.\r\n\r\nA `SimpleCloudBlobExtensions` class was introduced to close the gap between `CloudBlockBlobReference` class provided by the storage SDK and `CloudBlobWrapper` in our code (specifically, our wrapper lacks equivalent of `DownloadTextAsync`). \r\n\r\nAdditionally, report services did a `.ExistAsync()` checks before accessing the blob contents, causing unnecessary network round trip. More helpers were added to `SimpleCloudBlobExtensions` to handle missing blobs gracefully on content retrieval instead, saving one HTTP request on each report content access.\r\n\r\nLastly, `CloudDownloadCountService` was made async to accommodate for async-only `ISimpleCloudBlob`."},{"Id":"15797897118","Type":"IssuesEvent","CreatedAt":"2021-04-02T17:36:44","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8483","RelatedDescription":"Opened issue \"ValidateCertificate job dead-letters when validation ID is not found\" (#8483) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nWhen enqueueing to ValidateCertificate, there is a two step process:\r\n\r\n1. Enqueue to Service Bus with a validation ID and certificate key (SQL key)\r\n2. Save the validation record to SQL.\r\n\r\nIf step 2 fails, ValidateCertificate eventually dead-letters the message from step 1. This is not ideal since it's possible that step 2 will never occur for this validation ID, especially in the case of the RevalidateCertificate job since a new validation ID is created each loop iteration.\r\n\r\nIt's possible to reduce the likelihood of this by doing a batch enqueue in RevalidateCertificate so that transient Service Bus errors halfway through the loop don't trigger this problem:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/376ac06e6e07d4ee8d1e28f6b2346e3891487496/src/Validation.PackageSigning.RevalidateCertificate/CertificateRevalidator.cs#L151-L168\r\n\r\nBut in my mind we should be resilient and gracefully messages that will (likely) never succeed, i.e. have no corresponding DB record for an extended period.\r\n\r\n### Expected behavior\r\nIf a message has no corresponding validation record, it should eventually be dropped like the orchestrator:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/376ac06e6e07d4ee8d1e28f6b2346e3891487496/src/NuGet.Services.Validation.Orchestrator/BaseValidationMessageHandler.cs#L213-L230\r\n\r\nThis behavior should not occur immediately but after some reasonable delay. Due to the ordering of \"enqueue first, DB second\" in the happy path case it's possible that the message is processed before the validation record is persisted.\r\n"},{"Id":"15797138190","Type":"IssuesEvent","CreatedAt":"2021-04-02T16:08:59","Actor":"Uzivatel919","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8482","RelatedDescription":"Opened issue \"NuGet.Server should come along with symbol serving support\" (#8482) at NuGet/NuGetGallery","RelatedBody":"### Situation\r\n> Since NuGet.Server does not come with a symbol server, makes sense to …\r\n\r\n[NuGet.Server](https://www.nuget.org/packages/NuGet.Server/) lightweight NuGet server cannot serve as a symbol server. 👎🏻\r\n\r\n### Request\r\n\r\nInclude a symbol server in the NuGet.Server. 👍🏻\r\n\r\n"},{"Id":"15790139291","Type":"IssuesEvent","CreatedAt":"2021-04-02T00:37:26","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8376","RelatedDescription":"Closed issue \"[Stats] Ingest Microsoft CDN logs alongside Verizon CDN logs\" (#8376) at NuGet/NuGetGallery","RelatedBody":"Make gallery changes to allow multiple specified locations for downloads statistics."},{"Id":"15789291166","Type":"IssuesEvent","CreatedAt":"2021-04-01T22:25:44","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8481","RelatedDescription":"Opened issue \"Improved the #r directive instructions\" (#8481) at NuGet/NuGetGallery","RelatedBody":"This issue is to track pull request: https://github.com/NuGet/NuGetGallery/pull/8405\r\n \r\nThis is a follow up to #8375\r\n\r\nSince #r is not exclusive to F#, it is a bit inaccurate to use the current header for the instructions - it would make sense to use a more generic name for it.\r\nTherefore I propose to rename F# Interactive to .NET Interactive as it then correctly captures both C# and F#.\r\n\r\n"},{"Id":"15789092125","Type":"IssuesEvent","CreatedAt":"2021-04-01T21:59:58","Actor":"jcjiang","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8480","RelatedDescription":"Opened issue \"NuGet.org outage work-arounds\" (#8480) at NuGet/NuGetGallery","RelatedBody":"Here is where the team will post and discuss work-arounds for the current NuGet.org outage. "},{"Id":"15789056873","Type":"IssuesEvent","CreatedAt":"2021-04-01T21:55:27","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8479","RelatedDescription":"Opened issue \"Clarify that the the statistics page only shows recent downloads\" (#8479) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n\r\nIt's not clear that the table in the package downloads page shows downloads for the last 6 weeks:\r\n\r\n![image](https://user-images.githubusercontent.com/737941/113358201-3266a880-92fa-11eb-90e2-2e23a73235fd.png)\r\n\r\nWe should update the table's heading to `Downloads (last 6 weeks)`\r\n\r\nReported by: https://twitter.com/Tyrrrz/status/1377717292176445455?s=20\r\n"},{"Id":"15789055771","Type":"IssuesEvent","CreatedAt":"2021-04-01T21:55:19","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8475","RelatedDescription":"Closed issue \"Microsoft.Kepler is not available on nuget.org\" (#8475) at NuGet/NuGetGallery","RelatedBody":"Unable to find Microsoft.Kepler package in nuget.org . But at the same time, I'm able to download this package from Visual Studio and other problem that I have noticed is KeplerClient.dll is coming as unsigned dll. \r\n\r\n![image](https://user-images.githubusercontent.com/48666994/113125851-a6d71400-9234-11eb-966b-a05daee95970.png)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"15800921877","Type":"IssuesEvent","CreatedAt":"2021-04-03T01:59:13","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10722","RelatedDescription":"Opened issue \"Unit Test is system Timezone dependent: `NuGet.CommandLine.Test.NuGetRestoreCommandTest.RestoreCommand_PreservesPackageFilesTimestamps`\" (#10722) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | Visual Studio | MSBuild.exe | dotnet.exe): N/A\r\n\r\nProduct version: N/A\r\n\r\nWorked before? If so, with which NuGet version: \r\n\r\nA test failed for me, and a quick look seems to indicate the Actual timestamp is pertinent to my timezone.\r\nTests should be passing regardless of the system's timezone.\r\n\r\n## Repro steps and/or sample project\r\n\r\n<!-- Please add as much details as possible to help us to reproduce your problem. -->\r\n```\r\n<test name=\"NuGet.CommandLine.Test.NuGetRestoreCommandTest.RestoreCommand_PreservesPackageFilesTimestamps\" type=\"NuGet.CommandLine.Test.NuGetRestoreCommandTest\" method=\"RestoreCommand_PreservesPackageFilesTimestamps\" time=\"0.6542857\" result=\"Fail\">\r\n        <failure exception-type=\"Xunit.Sdk.EqualException\">\r\n          <message><![CDATA[Assert.Equal() Failure\\r\\nExpected: 1985-11-20T12:00:00.0000000\\r\\nActual:   1985-11-20T07:00:00.0000000-05:00]]></message>\r\n          <stack-trace><![CDATA[   at NuGet.CommandLine.Test.NuGetRestoreCommandTest.<RestoreCommand_PreservesPackageFilesTimestamps>d__37.MoveNext() in C:\\NuGet.Client\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\NuGetRestoreCommandTest.cs:line 1906\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)]]></stack-trace>\r\n        </failure>\r\n</test>\r\n```\r\n### Verbose Logs\r\n\r\n<!-- Please include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...) -->\r\n"},{"Id":"15800248579","Type":"IssuesEvent","CreatedAt":"2021-04-02T23:05:42","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10721","RelatedDescription":"Opened issue \"[Mac] VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync is flaky\" (#10721) at NuGet/Home","RelatedBody":"`VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync` test if flaky on Mac. Failed in [1](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4618922&view=ms.vss-test-web.build-test-results-tab&runId=20358558&resultId=110154&paneView=debug), [2](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4616569&view=ms.vss-test-web.build-test-results-tab&runId=20334944&resultId=110151) builds. This test passes majority 9/10 times but it will be good if we can identify the failure reason.\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n\r\nStack trace\r\n   at NuGet.Packaging.FuncTest.PackageSignatureVerifierTests.SignatureTrustAndValidityVerificationProviderTests.VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync() in /Users/runner/work/1/s/test/NuGet.Core.FuncTests/NuGet.Packaging.FuncTest/SigningTests/PackageSignatureVerifierTests.cs:line 239\r\n--- End of stack trace from previous location ---\r\n```"},{"Id":"15799674031","Type":"IssuesEvent","CreatedAt":"2021-04-02T21:26:07","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10720","RelatedDescription":"Opened issue \"Documentation:  improve/add documentation on signed package verification\" (#10720) at NuGet/Home","RelatedBody":"We should expand documentation to cover signed package verification in more detail (e.g.:  client policies, trust evaluations, trusted root authorities, etc.)"},{"Id":"15798637481","Type":"IssuesEvent","CreatedAt":"2021-04-02T19:07:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10707","RelatedDescription":"Closed issue \"Visual Studio Manage Package for Solutions shows error while browsing packages from an internal JFrog NuGet Artifactory\" (#10707) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: Visual Studio\r\n\r\nProduct version: Community 2019\r\n\r\nWorked before?: No\r\n\r\n## Repro steps and/or sample project\r\n\r\nIn a fresh install of Visual Studio Community 2019, I need to setup as Repository an internal JFrog Artifactory server, Commercial license 7.7.8 rev 70708900.\r\n\r\nAfter opening a brand new Project in Visual Studio, I click on Tools > NuGet Package Manager > Manage Package for Solutions, and in the opened window, select the Gear icon to edit Repositories settings.\r\n\r\nIn that new window, I select Package Sources > \"+\" button to add a new source.\r\n\r\nEnter the information in required fields:\r\n\r\nName: Arfitactory\r\nSource: https://<my_artifactory_URL>/artifactory/api/nuget/<nuget_virtual_repo_name>/index.json\r\n\r\nAnd finally, click on \"Update\" button and close the settings window pushing on the \"Ok\" button.\r\n\r\nAfter this configuration, if I try to browse Artifactory Nuget content, I end up with the following error:\r\n\r\n[Artifactory] Unable to load the service index for source https://<my_artifactory_URL>/artifactory/api/nuget/<nuget_virtual_repo_name>/index.json. \r\n  An error occurred while sending the request.\r\n  The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\r\n  The remote certificate is invalid according to the validation procedure.\r\n\r\n"},{"Id":"15797527168","Type":"IssuesEvent","CreatedAt":"2021-04-02T16:53:46","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10719","RelatedDescription":"Opened issue \"CpsPackageReferenceProjectTests.TestPackageManager_PreviewProjectsUninstallPackageAsync_AllProjects_UninstallExistingPackage_Success test is flaky\" (#10719) at NuGet/Home","RelatedBody":"`TestPackageManager_PreviewProjectsUninstallPackageAsync_AllProjects_UninstallExistingPackage_Success` is flaky. It failed on few [1](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4615033&view=ms.vss-test-web.build-test-results-tab&runId=20317228&resultId=115623&paneView=debug), [2](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4596916&view=ms.vss-test-web.build-test-results-tab&runId=20129492&resultId=115718), [3](https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4598257&view=ms.vss-test-web.build-test-results-tab&runId=20169506&resultId=115547) builds but passed on re-run.\r\n\r\nI reproduced it only once while debugging the test in VS and here is the call stack. \r\n\r\nThe `predicate` used in the following line of code is throwing that exception because `string` is null. I tried 3 or 4 times but reproduced this exception only once.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/606dcb613eefc5d28cc2af29176f76105f588ff8/test/NuGet.Clients.Tests/NuGet.PackageManagement.VisualStudio.Test/CpsPackageReferenceProjectTests.cs#L2442\r\n\r\n```\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (32-bit Desktop .NET 4.0.30319.42000)\r\n[xUnit.net 00:00:02.00]   Starting:    NuGet.PackageManagement.VisualStudio.Test\r\n[xUnit.net 00:04:29.74]     NuGet.PackageManagement.VisualStudio.Test.CpsPackageReferenceProjectTests.TestPackageManager_PreviewProjectsUninstallPackageAsync_AllProjects_UninstallExistingPackage_Success [FAIL]\r\n[xUnit.net 00:04:29.74]       System.NullReferenceException : Object reference not set to an instance of an object.\r\n[xUnit.net 00:04:29.74]       Stack Trace:\r\n[xUnit.net 00:04:29.74]         C:\\repos\\NuGet.Client\\test\\NuGet.Clients.Tests\\NuGet.PackageManagement.VisualStudio.Test\\CpsPackageReferenceProjectTests.cs(2442,0): at NuGet.PackageManagement.VisualStudio.Test.CpsPackageReferenceProjectTests.<>c.<TestPackageManager_PreviewProjectsUninstallPackageAsync_AllProjects_UninstallExistingPackage_Success>b__22_2(String l)\r\n[xUnit.net 00:04:29.74]            at System.Linq.Enumerable.WhereListIterator`1.MoveNext()\r\n[xUnit.net 00:04:29.74]            at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n[xUnit.net 00:04:29.74]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n[xUnit.net 00:04:29.74]         C:\\repos\\NuGet.Client\\test\\NuGet.Clients.Tests\\NuGet.PackageManagement.VisualStudio.Test\\CpsPackageReferenceProjectTests.cs(2442,0): at NuGet.PackageManagement.VisualStudio.Test.CpsPackageReferenceProjectTests.<TestPackageManager_PreviewProjectsUninstallPackageAsync_AllProjects_UninstallExistingPackage_Success>d__22.MoveNext()\r\n[xUnit.net 00:04:29.74]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:04:29.74]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:04:29.74]         --- End of stack trace from previous location where exception was thrown ---\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n[xUnit.net 00:04:29.74]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[xUnit.net 00:04:29.76]   Finished:    NuGet.PackageManagement.VisualStudio.Test\r\n========== Test run finished: 1 Tests (0 Passed, 1 Failed, 0 Skipped) run in 4.9 min =========\r\n```\r\n\r\nIt looks like this test was added recently in https://github.com/NuGet/NuGet.Client/pull/3703.\r\n\r\n@erdembayar any idea what could have caused this issue?\r\n"},{"Id":"15789771046","Type":"IssuesEvent","CreatedAt":"2021-04-01T23:36:26","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10718","RelatedDescription":"Opened issue \"Implement maccatalyst warning when \"falling back\" to xamarin.ios for net6.0+ projects\" (#10718) at NuGet/Home","RelatedBody":"As part of net6.0's [new precedence rules](https://github.com/dotnet/designs/blob/main/accepted/2021/net6.0-tfms/net6.0-tfms.md#compatibility-rules) (see #10717), we're adding a warning so that when xamarin.ios is picked for net6.0+ projects, we raise a warning informing customers of what we did.\r\n\r\nAs part of this task, we need to come up with a good warning message, and a new warning code, and run it by PM to make sure it's the right thing."},{"Id":"15789749329","Type":"IssuesEvent","CreatedAt":"2021-04-01T23:32:50","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10717","RelatedDescription":"Opened issue \"Implement new precedence for xamarin TFMs when using net6.0+\" (#10717) at NuGet/Home","RelatedBody":"As part of net6.0, we're implementing [new compatibility rules for xamarin TFMs](https://github.com/dotnet/designs/blob/main/accepted/2021/net6.0-tfms/net6.0-tfms.md#compatibility-rules). This is a tracking issue for implementing the precedence part of it."},{"Id":"15789350477","Type":"IssuesEvent","CreatedAt":"2021-04-01T22:33:37","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10392","RelatedDescription":"Closed issue \"Move CLI exception messages to String Resource files\" (#10392) at NuGet/Home","RelatedBody":"There are some hard-coded strings in Exception messages for the CLI.\r\nAfter some PR discussion, it seems we should create localized strings for these: https://github.com/NuGet/NuGet.Client/pull/3799#discussion_r544749207\r\n\r\nExample:\r\n\r\n> '{0}' is not a valid version string.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.VisualStudio/LegacyTypes/SemanticVersion.cs#L146\r\n\r\nI believe this one comes up for folks quite a lot, but there's probably quite a few more than this one.\r\n/cc @dominoFire "},{"Id":"15788713190","Type":"IssuesEvent","CreatedAt":"2021-04-01T21:15:20","Actor":"abeehler","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10716","RelatedDescription":"Opened issue \"DirectoryNotFoundException in PackTask PathResolver\" (#10716) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\n\r\nProduct version: 5.0.201\r\n\r\n## Repro steps and/or sample project\r\n\r\nI'm relatively new to nuget package creation.  I'm attempting to pack a .NET Standard project with 3rd party .NET Framework dll dependencies.\r\ncsproj:\r\n`<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>\r\n    <PackageTags>Laserfiche SEA ESI \"Texas A&amp;M\"</PackageTags>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <version>1.0.1.5</version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.1.5</FileVersion>\r\n    <Company>Texas A&amp;M System Offices</Company>\r\n    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>\r\n    <!--<IncludeSymbols>true</IncludeSymbols>-->\r\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <NuspecFile>SEALaserfiche.nuspec</NuspecFile>\r\n  </PropertyGroup>`\r\n\r\nSEALaserfiche.nuspec:\r\n`<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>SEALaserfiche</id>\r\n    <version>1.0.1.5</version>\r\n    <authors>Andrew Beehler</authors>\r\n    <description>Test</description>\r\n    <copyright>Test</copyright>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.2\" />\r\n      <group targetFramework=\".NETStandard2.0\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"bin\\$config$\\netstandard2.0\\*.dll\" target=\"lib\\netstandard2.0\\\" />\r\n    <file src=\"bin\\$config$\\net472\\*.dll\" target=\"lib\\net472\\\" />\r\n  </files>\r\n</package>`\r\n\r\nI attempt to run the following command:\r\n`dotnet pack -p:config=debug`\r\n\r\n...and get this error: \"C:\\Program Files\\dotnet\\sdk\\5.0.201\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(221,5): error : Could not find a part of the path 'C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\netstandard2.0'.\"\r\n\r\nnot sure why it's not looking in \"\\bin\\debug\\netstandard2.0\"\r\n\r\n### Verbose Logs\r\n\r\nHere's the section of the output we're probably interested in.  shows the stack trace.  tried going through nuget code on github.  have not yet been able to determine where the \"\\bin\\netstandard2.0\" is coming from; why it doesn't have \"\\debug\\\" in the path.\r\n\r\nUsing \"PackTask\" task from assembly \"C:\\Program Files\\dotnet\\sdk\\5.0.201\\Sdks\\NuGet.Build.Tasks.Pack\\build\r\nCrossTargeting\\..\\CoreCLR\\NuGet.Build.Tasks.Pack.dll\".\r\n                   Task \"PackTask\" (TaskId:100)\r\n                     Task Parameter:\r\n                         TargetPathsToSymbols=\r\n                             C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\Debug\\net472\\SEALaserfich\r\ne.pdb\r\n                                     FinalOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\D\r\nebug\\net472\\SEALaserfiche.pdb\r\n                                     MSBuildSourceProjectFile=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfi\r\nche\\SEALaserfiche.csproj\r\n                                     MSBuildSourceTargetName=_GetDebugSymbolsWithTfm\r\n                                     OriginalItemSpec=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEAL\r\naserfiche.csproj\r\n                                     TargetFramework=net472\r\n                                     TargetPath=SEALaserfiche.pdb\r\n                             C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\Debug\\netstandard2.0\\SEAL\r\naserfiche.pdb\r\n                                     FinalOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\D\r\nebug\\netstandard2.0\\SEALaserfiche.pdb\r\n                                     MSBuildSourceProjectFile=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfi\r\nche\\SEALaserfiche.csproj\r\n                                     MSBuildSourceTargetName=_GetDebugSymbolsWithTfm\r\n                                     OriginalItemSpec=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEAL\r\naserfiche.csproj\r\n                                     TargetFramework=netstandard2.0\r\n                                     TargetPath=SEALaserfiche.pdb (TaskId:100)\r\n                     Task Parameter:AssemblyName=SEALaserfiche (TaskId:100)\r\n                     Task Parameter:Tags=Laserfiche SEA ESI \"Texas A&M\" (TaskId:100)\r\n                     Task Parameter:RequireLicenseAcceptance=False (TaskId:100)\r\n                     Task Parameter:RestoreOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\\r\n (TaskId:100)\r\n                     Task Parameter:Authors=SEALaserfiche (TaskId:100)\r\n                     Task Parameter:TreatWarningsAsErrors=false (TaskId:100)\r\n                     Task Parameter:PackageId=SEALaserfiche (TaskId:100)\r\n                     Task Parameter:\r\n                         AllowedOutputExtensionsInPackageBuildOutputFolder=\r\n                             .dll\r\n                             .exe\r\n                             .winmd\r\n                             .json\r\n                             .pri\r\n                             .xml (TaskId:100)\r\n                     Task Parameter:AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder=.pdb (TaskId:100)\r\n                     Task Parameter:SymbolPackageFormat=snupkg (TaskId:100)\r\n                     Task Parameter:ContinuePackingAfterGeneratingNuspec=True (TaskId:100)\r\n                     Task Parameter:WarningsAsErrors=;NU1605 (TaskId:100)\r\n                     Task Parameter:IncludeBuildOutput=True (TaskId:100)\r\n                     Task Parameter:PackageVersion=1.0.1.5 (TaskId:100)\r\n                     Task Parameter:PackageOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\\r\nDebug\\ (TaskId:100)\r\n                     Task Parameter:\r\n                         TargetFrameworks=\r\n                             net472\r\n                             netstandard2.0 (TaskId:100)\r\n                     Task Parameter:Description=Package Description (TaskId:100)\r\n                     Task Parameter:NoWarn=1701;1702 (TaskId:100)\r\n                     Task Parameter:NuspecFile=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEALaserfic\r\nhe.nuspec (TaskId:100)\r\n                     Task Parameter:BuildOutputFolders=lib (TaskId:100)\r\n                     Task Parameter:\r\n                         BuildOutputInPackage=\r\n                             C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\Debug\\net472\\SEALaserfich\r\ne.dll\r\n                                     FinalOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\D\r\nebug\\net472\\SEALaserfiche.dll\r\n                                     IsKeyOutput=true\r\n                                     MSBuildSourceProjectFile=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfi\r\nche\\SEALaserfiche.csproj\r\n                                     MSBuildSourceTargetName=_GetBuildOutputFilesWithTfm\r\n                                     OriginalItemSpec=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\\r\nDebug\\net472\\SEALaserfiche.dll\r\n                                     TargetFramework=net472\r\n                                     TargetPath=SEALaserfiche.dll\r\n                             C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\Debug\\netstandard2.0\\SEAL\r\naserfiche.dll\r\n                                     FinalOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\D\r\nebug\\netstandard2.0\\SEALaserfiche.dll\r\n                                     IsKeyOutput=true\r\n                                     MSBuildSourceProjectFile=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfi\r\nche\\SEALaserfiche.csproj\r\n                                     MSBuildSourceTargetName=_GetBuildOutputFilesWithTfm\r\n                                     OriginalItemSpec=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\\r\nDebug\\netstandard2.0\\SEALaserfiche.dll\r\n                                     TargetFramework=netstandard2.0\r\n                                     TargetPath=SEALaserfiche.dll (TaskId:100)\r\n                     Task Parameter:Deterministic=True (TaskId:100)\r\n                     Task Parameter:\r\n                         ContentTargetFolders=\r\n                             content\r\n                             contentFiles (TaskId:100)\r\n                     Task Parameter:NuspecOutputPath=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\obj\\D\r\nebug\\ (TaskId:100)\r\n                     Task Parameter:PackItem=C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEALaserfiche\r\n.csproj (TaskId:100)\r\n13:34:49.357  1:15>C:\\Program Files\\dotnet\\sdk\\5.0.201\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack\r\n.targets(221,5): error : Could not find a part of the path 'C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfich\r\ne\\bin\\netstandard2.0'. [C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEALaserfiche.csproj]\r\n                     System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\esi\\CommonClasses\\SEALaserfi\r\nche\\SEALaserfiche_DEV\\SEALaserfiche\\bin\\netstandard2.0'.\r\n                        at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotF\r\nound)\r\n                        at System.IO.Enumeration.FileSystemEnumerator`1.Init()\r\n                        at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, Boolean isNormalized, Enumera\r\ntionOptions options)\r\n                        at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, Enum\r\nerationOptions options, Boolean isNormalized)\r\n                        at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, E\r\nnumerationOptions options)\r\n                        at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchT\r\narget, EnumerationOptions options)\r\n                        at System.IO.Directory.GetFiles(String path, String searchPattern, SearchOption searchOption)\r\n                        at NuGet.Common.PathResolver.PerformWildcardSearch(String basePath, String searchPath, Boolean includ\r\neEmptyDirectories, String& normalizedBasePath)\r\n                        at NuGet.Packaging.PackageBuilder.ResolveSearchPattern(String basePath, String searchPath, String tar\r\ngetPath, Boolean includeEmptyDirectories)\r\n                        at NuGet.Packaging.PackageBuilder.AddFiles(String basePath, String source, String destination, String\r\n exclude)\r\n                        at NuGet.Packaging.PackageBuilder.PopulateFiles(String basePath, IEnumerable`1 files)\r\n                        at NuGet.Packaging.PackageBuilder.ReadManifest(Stream stream, String basePath, Func`2 propertyProvide\r\nr)\r\n                        at NuGet.Packaging.PackageBuilder..ctor(String path, String basePath, Func`2 propertyProvider, Boolea\r\nn includeEmptyDirectories, Boolean deterministic)\r\n                        at NuGet.Commands.PackCommandRunner.CreatePackageBuilderFromNuspec(String path)\r\n                        at NuGet.Commands.PackCommandRunner.BuildFromNuspec(String path)\r\n                        at NuGet.Commands.PackCommandRunner.BuildPackage(String path)\r\n                        at NuGet.Commands.PackCommandRunner.RunPackageBuild()\r\n                        at NuGet.Build.Tasks.Pack.PackTaskLogic.BuildPackage(PackCommandRunner runner)\r\n                        at NuGet.Build.Tasks.Pack.PackTask.Execute() (TaskId:100)\r\n                   Done executing task \"PackTask\" -- FAILED. (TaskId:100)\r\n13:34:49.366  1:15>Done building target \"GenerateNuspec\" in project \"SEALaserfiche.csproj\" -- FAILED.: (TargetId:160)\r\n13:34:49.367  1:15>Done Building Project \"C:\\esi\\CommonClasses\\SEALaserfiche\\SEALaserfiche_DEV\\SEALaserfiche\\SEALaserfiche.cs\r\nproj\" (pack target(s)) -- FAILED."},{"Id":"15788330298","Type":"IssuesEvent","CreatedAt":"2021-04-01T20:37:25","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10139","RelatedDescription":"Closed issue \"NuGet.Client build.sh is broken\" (#10139) at NuGet/Home","RelatedBody":"`./build.sh` fails when trying to install .NET Core 1.1:\r\n```\r\n$ ./build.sh \r\nInstalling dotnet CLI\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\n100 34939  100 34939    0     0  85425      0 --:--:-- --:--:-- --:--:--  541k\r\ndotnet_install: Warning: Unable to locate zlib. Probable prerequisite missing; install zlib.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-linux-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-linux-x64.tar.gz\r\ndotnet_install: Error: Could not find/download: `.NET Core SDK` with version = 1.1.11\r\ndotnet_install: Error: Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n```"},{"Id":"15788330297","Type":"IssuesEvent","CreatedAt":"2021-04-01T20:37:25","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9973","RelatedDescription":"Closed issue \"Local Build fails when Build encounters an RSP (response) file\" (#9973) at NuGet/Home","RelatedBody":"## Details about the Problem\r\n\r\nRepository: [NuGet.Client](/NuGet/NuGet.Client)\r\n\r\nWhen building locally, the common.ps1 script will fail when it encounters a response file like `Directory.Buil.rsp` within or above the repo folder. The reason is that the script gets the .NET SDK version through MSBuild text output but when the response file is detected, MSBuild spews out a header text for the response file and that messes up with the logic for getting the .NET SDK version.\r\n\r\n## Detailed repro steps\r\n\r\n1. Go to your local NuGet.Client repo\r\n\r\n2. Clean your local repo with `git clean -Xdf`\r\n\r\n3. Add a `Directory.Buil.rsp` file within or above the repo folder\r\n\r\n4. Run configure.ps1 and see that'll fail.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n```console\r\nPS E:\\Projects\\Microsoft.NET\\nuget-client> .\\configure.ps1\r\n[16:20:08 +0]   Configuring NuGet.Client build environment\r\n[16:20:08 +0]   [BEGIN] Configuring git repo\r\n[16:20:08 +0]   [DONE +00:00:00] Configuring git repo\r\n[16:20:08 +0]   [BEGIN] Installing .NET CLI\r\n[16:20:09 +1]   Downloading .NET CLI\r\n[16:20:09 +0]   The version of SDK should be installed is : command\r\n[16:20:09 +0]   Probing folder : E:\\Projects\\Microsoft.NET\\nuget-client\\cli\\sdk\\command\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/command/dotnet-sdk-command-win-x64.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/command/dotnet-sdk-command-win-x64.zip\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/command/dotnet-dev-win-x64.command.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/command/dotnet-dev-win-x64.command.zip\r\nError-Log : [16:20:16 +7]       [FAILED +00:00:08] Installing .NET CLI\r\nAt E:\\Projects\\Microsoft.NET\\nuget-client\\build\\common.ps1:122 char:17\r\n+ ...             Error-Log \"[FAILED +$(Format-ElapsedTime $sw.Elapsed)] $B ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException\r\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Error-Log\r\n\r\nCould not find/download: \".NET Core SDK\" with version = command\r\nRefer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\nAt E:\\Projects\\Microsoft.NET\\nuget-client\\cli\\dotnet-install.ps1:660 char:5\r\n+     throw \"Could not find/download: `\"$assetName`\" with version = $Sp ...\r\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : OperationStopped: (Could not find/...ET Core support:String) [], RuntimeException\r\n    + FullyQualifiedErrorId : Could not find/download: \".NET Core SDK\" with version = command\r\nRefer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\n```\r\n"},{"Id":"15788129799","Type":"IssuesEvent","CreatedAt":"2021-04-01T20:18:17","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5016","RelatedDescription":"Closed issue \"NuGet.exe pack performance problem with `..` relative path\" (#5016) at NuGet/Home","RelatedBody":"## Description\r\nI'm NuGet packing our JavaScript application for Octopus Deploy to deploy to a test server. All content in the *unbundled* app creates a 40 MB NuGet package including ~8000 files. This was never a problem, as with 3.5.0 packing the app was quite quick. After upgrading to Visual Studio 2017 and NuGet 4.1.0, our build server started failing on the packaging step since it timeouts after 5 minutes. While trying to reproduce this, I found out that the timeout occurs only when using a `..` relative path for including files.\r\n\r\n## Example\r\nPacking the same `.nuspec` file from the command line produces these results:\r\n### NuGet.exe 3.5.0 vs NuGet.exe 4.1.0\r\n```\r\nPS {~\\D\\e\\n\\script> .\\repro.ps1\r\n\r\nWednesday 12. April 2017 12.44.58\r\nAttempting to build package from 'nuget-performance-test.nuspec'.\r\nSuccessfully created package\r\n'C:\\Users\\Jussi\\Documents\\edit-temp\\nuget_perf_repro\\script\\NuGet.Performance.Test.3.5.0.nupkg'.\r\nWednesay 12. April  2017 12.45.00\r\nAttempting to build package from 'nuget-performance-test.nuspec'.\r\nSuccessfully created package\r\n'C:\\Users\\Jussi\\Documents\\edit-temp\\nuget_perf_repro\\script\\NuGet.Performance.Test.4.1.0.nupkg'.\r\nWednesay 12. April  2017 12.45.34\r\n```\r\n## Example results\r\n**With 3.5.0**, packing the app took **~2 seconds.**\r\n**With 4.1.0**, packing the app took **~34 seconds.**\r\n\r\n## On an actual project\r\nWith our actual application, the difference looks like this on the build server:\r\n**With 3.5.0**, packing the app took **~20 seconds.**\r\n**With 4.1.0**, packing the app took **~9 minutes.**\r\n\r\n## Details about Problem\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuGet.Exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n4.1.0.2450\r\n\r\nOS version:\r\nWindows 10 Version 1607 (OS Build 14393.953)\r\nWindows Server 2016 Datacenter Version 1607 (OS Build 14393.969)\r\n\r\nWorked before? If so, with which NuGet version:\r\n3.5.0.1938\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. Create a new SPA application, using e.g. [Aurelia](https://aurelia.io), that depends on a huge amount of NPM packages that need to be deployed with the application.\r\n2. Create a `.nuspec` file, including all files from for the *unbundled* SPA application using a path starting with `..`. This should include a large amount of small JS files.\r\n3. Pack with NuGet 3.5.0 and 4.1.0 and compare time spent packing.\r\n\r\n## Other suggested things\r\n- Small number of files to pack hides the issue.\r\n- The issue doesn't happen when the include path doesn't start with `..`. That is:\r\n`<file src=\"..\\app\\wwwroot\\**\\*.*\" target=\"\" />` will show the error but with \r\n`<file src=\"wwwroot\\**\\*.*\" target=\"\" />`, I was unable to reproduce the problem.\r\n\r\n## Workaround\r\nCopy the files in a folder below the `.nuspec` file and include from there.\r\n\r\n### Verbose Logs\r\nThere's nothing special in the verbose logs, packing succeeds but just takes a lot of time on 4.1.0.\r\n\r\n### Sample Project\r\nThere's a Powershell script (`repro.ps1`)in this package to demonstrate the issue:\r\nhttps://1drv.ms/u/s!ArvtSAxE-8DWitlqmMKfjzzFB94_Gw\r\n\r\n\r\n"},{"Id":"15787411304","Type":"IssuesEvent","CreatedAt":"2021-04-01T19:11:07","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10715","RelatedDescription":"Opened issue \"[Speculative bug] Ensure all code paths work with a download count exceeding int.MaxValue\" (#10715) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: all\r\nProduct version: latest\r\n\r\n## Repro steps and/or sample project\r\n\r\nSee https://github.com/NuGet/NuGetGallery/issues/8476. In short, sooner or later Newtonsoft.Json will exceed `int.MaxValue` (2,147,483,647) as may cause problems.\r\n\r\nEnd-to-end, we (NuGet team) need to ensure that a download count exceeding `int.MaxValue` does not break the client. The aforementioned link tracks the server-side investigation/fixes.\r\n\r\nI have confirmed the following with Fiddler on client side.\r\n\r\n- PM UI Browse tab, V3 nuget.org\r\n  - ✔️ Works up to 1000 trillion (so we have plenty of runway 😄)\r\n  - ![image](https://user-images.githubusercontent.com/94054/113341530-1eaf4800-92e2-11eb-9793-1d53f5372c23.png)\r\n  - ❌ Crashes VS after 1000 trillion\r\n- PM UI Browse tab, V2 nuget.org\r\n  - Same as V3.\r\n- nuget.exe search, V3 nuget.org\r\n  - ✔️ Works up to `long.MaxValue`\r\n  - ![image](https://user-images.githubusercontent.com/94054/113340825-3afeb500-92e1-11eb-9b47-05fe3e04ff94.png)\r\n  - ❌ Fails over to USSC (???) after `long.MaxValue`\r\n- nuget.exe search V2 nuget.org\r\n  - ✔️ Works up to `long.MaxValue`\r\n  - ![image](https://user-images.githubusercontent.com/94054/113340947-684b6300-92e1-11eb-9cbb-5a7457d521de.png)\r\n  - ✔️ Shows N/A after `long.MaxValue` (I think this is a good behavior)\r\n  - ![image](https://user-images.githubusercontent.com/94054/113342087-e3614900-92e2-11eb-83c5-41acdee6a8ca.png)\r\n\r\nFrom this analysis it seems that client is fine for the `int.MaxValue`. However I may be missing places and I think it would be prudent to do a pass over all of the places to make sure at least `int.MaxValue + 1` doesn't crash NuGet since this is a real situation on the horizon.\r\n\r\nI don't know all of the places download count is used on the client.\r\n"},{"Id":"15787218206","Type":"IssuesEvent","CreatedAt":"2021-04-01T18:53:29","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10663","RelatedDescription":"Closed issue \"textfile.nuspec failing to build the project after upgrading to Visual Studio 2019 16.9.1 from Version 16.8.7\" (#10663) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/textfilenuspec-failing-to-build-the-pro/1368425)._\n\n---\n[regression] [worked-in:16.8.0]\nI have a .NET standard project which is having textfile.nuspec. When i was building the project it is failing with error. \nAfter updagrading to latest Visual studio 2019 16.9.1. It was working without any issues on 16.8.X\n \nTask Parameter:RestoreOutputPath=C:\\temp\\Formatters\\MyProject\\obj\\\n1>    C:\\Program Files\\dotnet\\sdk\\5.0.201\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error : Object reference not set to an instance of an object.\n1>    System.NullReferenceException: Object reference not set to an instance of an object.\n1>       at NuGet.Packaging.PackageBuilder.<>c.b__173_1(NuGetFramework groupFramework)\n1>       at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\n1>       at System.Collections.Generic.HashSet`1.UnionWith(IEnumerable`1 other)\n1>       at System.Collections.Generic.HashSet`1..ctor(IEnumerable`1 collection, IEqualityComparer`1 comparer)\n1>       at NuGet.Packaging.PackageBuilder.ValidateReferenceAssemblies(IEnumerable`1 files, IEnumerable`1 packageAssemblyReferences)\n1>       at NuGet.Packaging.PackageBuilder.Save(Stream stream)\n1>       at NuGet.Commands.PackCommandRunner.BuildPackage(PackageBuilder builder, String outputPath, Boolean symbolsPackage)\n1>       at NuGet.Commands.PackCommandRunner.BuildFromNuspec(String path)\n1>       at NuGet.Commands.PackCommandRunner.BuildPackage(String path)\n1>       at NuGet.Commands.PackCommandRunner.RunPackageBuild()\n1>       at NuGet.Build.Tasks.Pack.PackTaskLogic.BuildPackage(PackCommandRunner runner)\n1>       at NuGet.Build.Tasks.Pack.PackTask.Execute()\n1>  Done executing task \"PackTask\" -- FAILED.\n1>Done building target \"GenerateNuspec\" in project \"MyProject.csproj\" -- FAILED.\n1>\n\nThanks and Regards,.\nSom\n\n---\n### Original Comments\n\n#### Feedback Bot on 3/14/2021, 07:24 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"15787218001","Type":"IssuesEvent","CreatedAt":"2021-04-01T18:53:28","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10685","RelatedDescription":"Closed issue \"nuget 5.9 pack crashes\" (#10685) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe):\r\n\r\nProduct version: 5.9.0\r\n\r\nWorked before? If so, with which NuGet version: 5.8.1\r\n\r\n## Repro steps and/or sample project\r\n\r\nHere is the error caused in 5.9.0:\r\n\r\nhttps://github.com/cryptlex/lexactivator-dotnet/runs/2181577286?check_suite_focus=true \r\n\r\nin Pack Nuget Package step.\r\n\r\nand it worked till 5.8.1\r\n\r\nhttps://github.com/cryptlex/lexactivator-dotnet/runs/1976606695?check_suite_focus=true \r\n\r\n### Verbose Logs\r\n```\r\nnuget pack src\\Cryptlex.LexActivator\\Cryptlex.LexActivator.nuspec -NonInteractive -OutputDirectory nupkg -Properties Configuration=Release -Verbosity Detailed\r\nNuGet Version: 5.9.0.7134\r\nAttempting to build package from 'Cryptlex.LexActivator.nuspec'.\r\nObject reference not set to an instance of an object.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at NuGet.Packaging.PackageBuilder.<>c.<ValidateReferenceAssemblies>b__173_1(NuGet.Frameworks1204688.NuGetFramework groupFramework)\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Collections.Generic.HashSet`1.UnionWith(IEnumerable`1 other)\r\n   at System.Collections.Generic.HashSet`1..ctor(IEnumerable`1 collection, IEqualityComparer`1 comparer)\r\n   at NuGet.Packaging.PackageBuilder.ValidateReferenceAssemblies(IEnumerable`1 files, IEnumerable`1 packageAssemblyReferences)\r\n   at NuGet.Packaging.PackageBuilder.Save(Stream stream)\r\n   at NuGet.Commands.PackCommandRunner.BuildPackage(PackageBuilder builder, String outputPath, Boolean symbolsPackage)\r\n   at NuGet.Commands.PackCommandRunner.BuildFromNuspec(String path)\r\n   at NuGet.CommandLine.PackCommand.ExecuteCommand()\r\n   at NuGet.CommandLine.Command.ExecuteCommandAsync()\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\nError: Process completed with exit code 1.\r\n```"},{"Id":"15787189880","Type":"IssuesEvent","CreatedAt":"2021-04-01T18:50:58","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10713","RelatedDescription":"Closed issue \"Make default validation disabled on Linux, but enabled by default on Windows\" (#10713) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | dotnet.exe):\r\n\r\nProduct version: \r\n\r\nWorked before? If so, with which NuGet version: \r\n\r\n## Repro steps and/or sample project\r\n\r\nAnticipating Mozilla going to drop Symantic certificate CA from their trusted database we need to release pre-empt mitigation. \r\nMore details please check https://github.com/NuGet/Announcements/issues/56.\r\n\r\n### Verbose Logs\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"15789095683","Type":"IssuesEvent","CreatedAt":"2021-04-01T22:00:20","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/57","RelatedDescription":"Opened issue \"NuGet.org temporarily down due to Azure services outage\" (#57) at NuGet/Announcements","RelatedBody":"NuGet.org is being affected by an outage due to issues affecting the Azure Portal and Azure services, but the team is on it. We appreciate your patience and we will keep you updated as soon as we get more information.\r\n\r\nIn the meantime, check https://status2.azure.com/ for Azure updates and find work-arounds in this thread https://github.com/NuGet/NuGetGallery/issues/8480."},{"Id":"15770729318","Type":"IssuesEvent","CreatedAt":"2021-03-31T19:45:05","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/56","RelatedDescription":"Opened issue \"Notice: NuGet Restore Failures on Linux distributions using NSS or Mozilla root CA list\" (#56) at NuGet/Announcements","RelatedBody":"## Context\r\n\r\nUsers of .NET 5.0+ will receive error messages when running `dotnet restore` on Linux distros that use [nss](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/) or `ca-certificates` packages maintained by Mozilla's root CA list. The root cause is due to the certificate used for signed NuGet packages recently expiring and as a result the validation for packages uses a timestamp provider chain that has a root certificate that has been [removed by Network Security Services (NSS)](https://bugzilla.mozilla.org/show_bug.cgi?id=1686854) which is a popular alternative to [OpenSSL](https://github.com/openssl/openssl).\r\n\r\n- [NuGet Microsoft Author Signing Certificate Update](https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/) - Expires January 27th, 2021\r\n- [NuGet.org Repository Signing Certificate Update](https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/) - Expires April 14th, 2021\r\n\r\nFor more information, please read the [Distrust of Symantec TLS Certificates](https://blog.mozilla.org/security/2018/03/12/distrust-symantec-tls-certificates/) on the Mozilla Security Blog, [Mozilla Root Store Policy](https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/policy/) on Mozilla.org, and [Symantec Issues](https://wiki.mozilla.org/CA:Symantec_Issues) on the Mozilla Wiki Page.\r\n\r\n## Affected Environments\r\n\r\n.NET 5.0+ SDK on Linux distros that use [nss 3.63+](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.63_release_notes). \r\n\r\nAt this time, we are not sure of every distro that may be affected. If you're aware of an affected distro, please let us know!\r\n\r\nBelow is a table that includes .NET support for Linux distros:\r\n\r\n### Linux\r\n\r\nOS                                    | Version               | Affected          |\r\n--------------------------------------|-----------------------|-------------------|\r\n[Alpine Linux][Alpine]                | N/A                 | ❓ |\r\n[CentOS][CentOS]                      | N/A                    | ❓ |\r\n[Debian][Debian]                      | N/A                    | ❓ |\r\n[Fedora][Fedora]                      | N/A                   | ❓ |\r\n[Linux Mint][Linux-Mint]              | N/A                   | ❓ |\r\n[openSUSE][OpenSUSE]                  | N/A                   | ❓ |\r\n[Red Hat Enterprise Linux][RHEL]      | N/A                    | ❓ |\r\n[SUSE Enterprise Linux (SLES)][SLES]  | N/A               | ❓ |\r\n[Ubuntu][Ubuntu]                      | N/A   | ❓ |\r\n\r\n[Alpine]: https://alpinelinux.org/\r\n[CentOS]: https://www.centos.org/\r\n[Debian]: https://www.debian.org/\r\n[Fedora]: https://getfedora.org/\r\n[Linux-Mint]: https://linuxmint.com/\r\n[OpenSUSE]: https://opensuse.org/\r\n[RHEL]: https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux\r\n[SLES]: https://www.suse.com/products/server/\r\n[Ubuntu]: https://ubuntu.com/\r\n\r\nAdditionally, here is a table of other Linux variants that may be affected but are not officially supported by .NET.\r\n\r\nOS                                    | Version               | Affected       |\r\n--------------------------------------|-----------------------|-------------------|\r\n[Arch Linux](https://archlinux.org/)                          | 20210328+                 | ✅[Issue](https://github.com/NuGet/Home/issues/10695)             |\r\n[Artix Linux](https://artixlinux.org/)                         | 20201128+                    | ✅[Issue](https://github.com/NuGet/Home/issues/10684)             |\r\n\r\n### Other Linux distros\r\n\r\n- At the time of writing, we believe other distributions will not be affected until a distribution is updated to include [nss 3.63+](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.63_release_notes).\r\n\r\n## Mitigation\r\n\r\n### .NET Core 3.1\r\n\r\n.NET 5 introduces a signing verification mechanism that promotes warnings to throw an error at `dotnet restore` time. To work around this, you can temporarily target against .NET Core 3.1.\r\n\r\n### Modify CA Certificate Store\r\n\r\nDepending on your Linux distro, you can modify your CA certificate store by taking on an earlier version of your `ca-certificates` package.\r\n\r\nFor reference, the affected version is [nss 3.63+](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.63_release_notes). `nss` includes a hard-coded list of trusted CA certificates and therefore can be modified to include and trust the `Verisign Universal Root Certificate Authority` again.\r\n\r\nMany Linux distros can leverage `dpkg-reconfigure` to check for the entry and enable trust for it. As a manual workaround, you may need to remove a `leading !` from the certificate line & update your CA certificates package.\r\n\r\n**Note:** Doing this is considered a bad security practice & should only be done if you understand the security implications of doing so.\r\n\r\n## Solution\r\n\r\nDue to existing issues with the .NET 5 signing verification feature & fallback of timestamp verification, we have decided to revoke this feature for Unix-based systems within .NET 5 SDK. Therefore your experience of using `dotnet restore` will remain largely the same as it was in .NET Core 3.1. Stay tuned for an updated .NET SDK version that will include this change.\r\n\r\n### Stay updated\r\n\r\n- We are continuing to investigate this issue and will let you know more as we find out.\r\n- We will also continue posting updates on [NuGet Status](https://status.nuget.org/) and [@NuGet on Twitter](https://twitter.com/nuget)."},{"Id":"15596835672","Type":"IssuesEvent","CreatedAt":"2021-03-18T16:16:18","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/55","RelatedDescription":"Opened issue \"Package Namespaces Proposal\" (#55) at NuGet/Announcements","RelatedBody":"Introduction of a feature concept called Package Namespaces which allows a developer to include or exclude package IDs by specifying package namespaces on their package source(s).\r\n\r\n🎉📦Please provide your comments, concerns, and feedback within this PR. 📦🎉\r\n\r\nhttps://github.com/NuGet/Home/pull/10660"},{"Id":"15469893086","Type":"IssuesEvent","CreatedAt":"2021-03-09T18:14:19","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/54","RelatedDescription":"Opened issue \"Custom V2 OData queries will be deprecated March 9th, 2021 \" (#54) at NuGet/Announcements","RelatedBody":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run of the deprecation to ensure that there are no surprises for users (#40). \r\n\r\nWe will begin blocking endpoints used by 3rd party clients in March 9, 2021, as detailed in [the blogpost here](https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/).\r\n\r\nPlease let us know about your questions or concerns on [this discussion post.](https://github.com/NuGet/NuGetGallery/issues/7423)"},{"Id":"15322501248","Type":"IssuesEvent","CreatedAt":"2021-02-25T20:01:29","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"15038151714","Type":"PullRequestEvent","CreatedAt":"2021-02-02T17:07:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Announcements/pull/52","RelatedDescription":"Merged pull request \"Add templates\" (#52) at NuGet/Announcements","RelatedBody":"Adds issue & pr templates."},{"Id":"15035390299","Type":"PullRequestEvent","CreatedAt":"2021-02-02T14:05:33","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/pull/52","RelatedDescription":"Opened pull request \"Add templates\" (#52) at NuGet/Announcements","RelatedBody":"Adds issue & pr templates."},{"Id":"15022864314","Type":"IssuesEvent","CreatedAt":"2021-02-01T17:28:44","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/50","RelatedDescription":"Closed issue \"nuget restore failing on ubuntu 20.04 NU3037\" (#50) at NuGet/Announcements","RelatedBody":"error NU3028: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\nerror NU3037: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n\r\ndigital ocean droplet\r\n   Static hostname: docker-ubuntu-s-1vcpu-1gb-nyc1-01\r\n         Icon name: computer-vm\r\n           Chassis: vm\r\n        Machine ID: f2e66c689e42d45004bbde355fa93999\r\n           Boot ID: 89ad10aa73104cb59022bb6129cbf062\r\n    Virtualization: kvm\r\n  Operating System: Ubuntu 20.04.1 LTS\r\n            Kernel: Linux 5.4.0-58-generic\r\n      Architecture: x86-64\r\n"},{"Id":"15018569152","Type":"IssuesEvent","CreatedAt":"2021-02-01T12:24:44","Actor":"hmaiga","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/51","RelatedDescription":"Closed issue \"Still have NuGet Restore Issues on Debian 10\" (#51) at NuGet/Announcements","RelatedBody":"The isssue seems to be marked as resolved #49 but i'm still facing the same issue on Debian 10.\r\n```\r\n  Determining projects to restore...\r\n/builds/company/modules/myproject/myproject.Tests/myproject.Tests.csproj : error NU3028: Package 'Microsoft.IdentityModel.Logging 5.6.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\n/builds/company/modules/myproject/myproject/myproject.csproj : error NU3028: Package 'System.Security.Principal.Windows 4.5.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain \r\n.......\r\n```\r\n\r\nOS Version:\r\nPRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"10\"\r\nVERSION=\"10 (buster)\"\r\nVERSION_CODENAME=buster\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n\r\nDid i miss something 🤔 ?"},{"Id":"15018262203","Type":"IssuesEvent","CreatedAt":"2021-02-01T11:59:07","Actor":"hmaiga","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/51","RelatedDescription":"Opened issue \"Still have NuGet Restore Issues on Debian 10\" (#51) at NuGet/Announcements","RelatedBody":"The isssue seems to be marked as resolved #49 but i'm still facing the same issue on Debian 10.\r\n```\r\n  Determining projects to restore...\r\n/builds/campany/modules/myproject/myproject.Tests/myproject.Tests.csproj : error NU3028: Package 'Microsoft.IdentityModel.Logging 5.6.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\n/builds/campany/modules/myproject/myproject/myproject.csproj : error NU3028: Package 'System.Security.Principal.Windows 4.5.0' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain \r\n.......\r\n```\r\n\r\nOS Version:\r\nPRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"10\"\r\nVERSION=\"10 (buster)\"\r\nVERSION_CODENAME=buster\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n\r\nDid i miss something 🤔 ?"},{"Id":"15011306391","Type":"IssuesEvent","CreatedAt":"2021-01-31T21:13:04","Actor":"TomCJones","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/50","RelatedDescription":"Opened issue \"nuget restore failing on ubuntu 20.04 NU3037\" (#50) at NuGet/Announcements","RelatedBody":"error NU3028: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature's timestamp found a chain building issue: UntrustedRoot: self signed certificate in certificate chain\r\nerror NU3037: Package 'Microsoft.VisualStudio.Azure.Containers.Tools.Targets 1.10.9' from source 'https://api.nuget.org/v3/index.json': The author primary signature validity period has expired.\r\n\r\ndigital ocean droplet\r\n   Static hostname: docker-ubuntu-s-1vcpu-1gb-nyc1-01\r\n         Icon name: computer-vm\r\n           Chassis: vm\r\n        Machine ID: f2e66c689e42d45004bbde355fa93999\r\n           Boot ID: 89ad10aa73104cb59022bb6129cbf062\r\n    Virtualization: kvm\r\n  Operating System: Ubuntu 20.04.1 LTS\r\n            Kernel: Linux 5.4.0-58-generic\r\n      Architecture: x86-64\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1377764630769008640","CreatedAt":"2021-04-01T23:27:40+00:00","UserScreenname":"nuget","Text":"Our monitoring and tests indicate that the incident related to DNS has been mitigated. We are waiting for more info… https://t.co/Oz3vtCPt0K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":4,"RawContent":null},{"Id":"1377743615422685191","CreatedAt":"2021-04-01T22:04:09+00:00","UserScreenname":"nuget","Text":"Check our announcement here for additional resources as well as a Github thread for us to share work-arounds.… https://t.co/j0UWauYtq3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1377737823994802182","CreatedAt":"2021-04-01T21:41:09+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi is being affected by this outage, but the team is on it. We appreciate your patience and we… https://t.co/ESWjKBbpYg","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"1375170161041412096","CreatedAt":"2021-03-25T19:38:10+00:00","UserScreenname":"nuget","Text":"👏Contributor appreciation time👏\n\nShout out to @augustoproiete  and the @cakebuildnet  team for their contribution t… https://t.co/MUtCpOiLWS","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":65,"FavoriteCount":23,"RawContent":null},{"Id":"1371544002097520651","CreatedAt":"2021-03-15T19:29:06+00:00","UserScreenname":"nuget","Text":"🚨 Reminder 🚨\n\nIf you verify that packages are repo signed by https://t.co/F9kiKfvqkS see our blog for next steps to… https://t.co/rFT0bMoTVy","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":2,"RawContent":null},{"Id":"1371543473610981380","CreatedAt":"2021-03-15T19:27:00+00:00","UserScreenname":"nuget","Text":"🙌New proposal just dropped🙌\n\nWe've been working hard to find ways to help you secure your software supply chain 💪… https://t.co/mZX3kOZIxB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1369353172129439744","CreatedAt":"2021-03-09T18:23:32+00:00","UserScreenname":"nuget","Text":"Custom V2 OData queries are now disabled - starting TODAY, March 9! Supported V2 endpoints are unaffected. Check he… https://t.co/rZMonHQq3w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":4,"RawContent":null},{"Id":"1367169420729208836","CreatedAt":"2021-03-03T17:46:05+00:00","UserScreenname":"nuget","Text":"🙌 New post just dropped 🙌\n\nWe're upping our security game by enabling you to find package vulnerabilities on… https://t.co/RPeN1KzPG9","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":86,"FavoriteCount":37,"RawContent":null},{"Id":"1366458126141120525","CreatedAt":"2021-03-01T18:39:39+00:00","UserScreenname":"nuget","Text":"🙌 New post just dropped 🙌\n\nLate last year we launched a https://t.co/F9kiKfvqkS survey to ask customers about their… https://t.co/mgpdDNj3is","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2021-04-03T05:30:30.5610252Z","RunDurationInMilliseconds":1398}