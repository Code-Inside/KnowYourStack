{"Data":{"Blog":{"FeedItems":[{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13226465984","Type":"PullRequestEvent","CreatedAt":"2020-08-17T23:59:11","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8161","RelatedDescription":"Opened pull request \"Add hijack=false parameter to OData get specific package\" (#8161) at NuGet/NuGetGallery","RelatedBody":"This will facilitate functional tests and end-to-end tests that require querying for package availability in DB instead of availability in V3 (search hijack). See the functional tests containing `hijack=true` for context. There is also one such case in the end-to-end tests. In short, there are many integration tests today that depend on checking for a package's availability prior to V3 indexing.\r\n\r\nEssentially the difference when the new parameter is specified as `hijack=false`, you can see a package even before it has made its way the search service but _after_ validation is complete. This was previously achieved in various monitoring and testing places in our code via opaque hacks like adding an `$orderby` that can't be hijacked or adding `1 eq 1` to a `$filter`. \r\n\r\nGiven the excellent performance of an ID+version lookup, it is acceptable to allow this non-hijacked query from a performance perspective. By the way, the package details page does this SQL query and much more.\r\n\r\nAn alternative approach could have been to carefully scrutinize each place that uses `hijack=false` and convince ourselves that moving from a non-hijacked to a hijacked query is acceptable from both a test coverage and flakiness perspective. My feeling is that this is not worth the risk. Also, in general we would be giving up from a testing/monitoring perspective on observing the state before a package is fully indexed in search but after it is validated.\r\n\r\nI think that this PR (simple test hook) is better than the alternative. I think it is reasonable to have a programmatic way of fetching the DB state of a package and this is the simplest approach given our current various codebases. This will be undocumented on our public API surface area and not intended for external consumption, much like the internal `/search/query` endpoint on the search service.\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/2902."},{"Id":"13225905259","Type":"IssuesEvent","CreatedAt":"2020-08-17T22:17:54","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8145","RelatedDescription":"Closed issue \"[2020-08-07] Deployment\" (#8145) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\nChanges:\r\n* Add functional tests on Gallery for Advanced Search (#8115) \r\n* Use protected configuration provider instead of reflection (WITHOUT DI) (#8132)\r\n* Add command to compare PackageVulnerabilities to GitHub API (#7706) \r\n* Unbreak GitHubVulnerabilities2Db dependency injection (#8139) \r\n* Fix for: Malicious OData requests trigger exception monitoring (#8141) \r\n* Update range's vulnerability before entity update to fix index uniqueness error (#8140)\r\n\r\nProgress:\r\n* [x] Merge RI: https://github.com/NuGet/NuGetGallery/pull/8147\r\n* [x] Build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3958957&view=results\r\n* [x] Release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=772272\r\n* [ ] DEV\r\n* [x] INT\r\n* [x] PROD\r\n\r\n# GitHubVulnerabilities2Db\r\n\r\nChanges:\r\n* Unbreak GitHubVulnerabilities2Db dependency injection (https://github.com/NuGet/NuGetGallery/issues/8139)\r\n* Fix PackageVulnerability indexing uniqueness error (https://github.com/NuGet/NuGetGallery/pull/8140)\r\n\r\nProgress:\r\n* [x] Merge RI: https://github.com/NuGet/NuGetGallery/pull/8147\r\n* [x] Build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3958944&view=results\r\n* [x] Release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=772284\r\n* [x] DEV\r\n* [x] INT\r\n* [x] PROD"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13227555661","Type":"IssuesEvent","CreatedAt":"2020-08-18T03:32:30","Actor":"jazzdelightsme","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9921","RelatedDescription":"Opened issue \"Pack tells me it will exclude folder starting with dot, but does not\" (#9921) at NuGet/Home","RelatedBody":"## Version info\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): **NuGet.exe**\r\n\r\nNuGet version (x.x.x.xxx): **5.6.0.6591**\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): **Win10 Version 2004 (OS Build20195.1000)**\r\n\r\nWorked before? If so, with which NuGet version: **don't know**\r\n\r\n## Description\r\n\r\n\"Nuget pack\" is including my \".git\" directory, even though it says it will exclude files and folders that start with a dot ('.'). Additionally, I have not been able to craft an exclude directive that will successfully exclude my .git directory.\r\n\r\n### details\r\n\r\nI keep my project in source control using git, so I have a .git directory and .gitignore file in the root of my project.\r\n\r\nMy project is very simple... just a PowerShell script module. So my \"content\" starts at the root directory.\r\n\r\nSample file layout:\r\n\r\n```\r\nPS E:\\temp\\nugetProblem2> dir -Recurse\r\n\r\n    Directory: E:\\temp\\nugetProblem2\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----           8/17/2020  8:10 PM                .git\r\n-a---           8/17/2020  8:13 PM              4 .gitignore\r\n-a---           8/17/2020  8:18 PM            309 nugetProblem.nuspec\r\n-a---           8/17/2020  8:09 PM             52 ReadMe.txt\r\n\r\n    Directory: E:\\temp\\nugetProblem2\\.git\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---           8/17/2020  8:10 PM              4 shouldNotBePacked.txt\r\n\r\nPS E:\\temp\\nugetProblem2>\r\n```\r\nWhen I run \"nuget pack\", it very clearly tells me:\r\n\r\n```\r\nWARNING: NU5119: File 'E:\\temp\\nugetProblem2\\.gitignore' was not added to the package. Files and folders starting with '.' or ending with '.nupkg' are excluded by default.\r\n```\r\n\r\nAnd in fact it *does* exclude the \".gitignore\" file. But it does **NOT** exclude the \".git\" directory.\r\n\r\nOn top of that, I have not been able to come up with an \"exclude\" directive, either on the command line or in the .nuspec file, to exclude the \".git\" directory.\r\n\r\n### Repro steps, with sample project\r\n\r\nAttached is a sample/dummy project that will reproduce the problem:\r\n[nugetProblem.zip](https://github.com/NuGet/Home/files/5087988/nugetProblem.zip)\r\n\r\n**Repro steps:**\r\n1. Extract the sample project.\r\n2. In the root of the sample project directory, run \"nuget pack\".\r\n3. Observe the warning message about how \"Files and folders starting with '.'\" will not be packed.\r\n4. Rename the resulting .nupkg to .zip and open it up.\r\n\r\n**Expected result:**\r\nThe .git folder should not be in the package.\r\n\r\n**Actual result:**\r\nThe .git folder is in the package.\r\n\r\n"},{"Id":"13225510465","Type":"IssuesEvent","CreatedAt":"2020-08-17T21:21:06","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9920","RelatedDescription":"Opened issue \"Create a dashboard for monitoring RPS tests\" (#9920) at NuGet/Home","RelatedBody":"It would be great if we have a dashboard to monitor RPS tests over time."},{"Id":"13225369684","Type":"IssuesEvent","CreatedAt":"2020-08-17T21:02:47","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9692","RelatedDescription":"Closed issue \"Check Security Tenet status\" (#9692) at NuGet/Home","RelatedBody":"Investigate the AzDO tasks assigned to me that ask us to check some Security points in our codebase."},{"Id":"13225208509","Type":"IssuesEvent","CreatedAt":"2020-08-17T20:42:35","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8953","RelatedDescription":"Closed issue \"CachingSourceProvider should be able to work with custom set of resource providers\" (#8953) at NuGet/Home","RelatedBody":"Currently, it has only a single ctor with predefined set of resource providers:\r\n```cs\r\npublic CachingSourceProvider(IPackageSourceProvider packageSourceProvider)\r\n{\r\n    _packageSourceProvider = packageSourceProvider;\r\n\r\n    _resourceProviders.AddRange(Repository.Provider.GetCoreV3());\r\n\r\n    _repositories = _packageSourceProvider.LoadPackageSources()\r\n        .Where(s => s.IsEnabled)\r\n        .Select(CreateRepository)\r\n        .ToList();\r\n}\r\n```"},{"Id":"13224907327","Type":"IssuesEvent","CreatedAt":"2020-08-17T20:05:26","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9919","RelatedDescription":"Opened issue \"PM UI:  resolve internal contracts assembly loading concerns\" (#9919) at NuGet/Home","RelatedBody":"See https://github.com/NuGet/NuGet.Client/pull/3485#discussion_r468528172"},{"Id":"13224892839","Type":"IssuesEvent","CreatedAt":"2020-08-17T20:03:38","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9918","RelatedDescription":"Opened issue \"PM UI:  resolve remotability issues with ISolutionManager\" (#9918) at NuGet/Home","RelatedBody":"Many things (e.g.:  `UIActionEngine`, `NuGetUI`) in NuGet.PackageManagement.UI rely on `IVsSolutionManager`.  However, `ISolutionManager` isn't \"remoting friendly.\""},{"Id":"13224625200","Type":"IssuesEvent","CreatedAt":"2020-08-17T19:30:41","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9912","RelatedDescription":"Closed issue \"Final Presentation, Final Connect & all other final week things\" (#9912) at NuGet/Home","RelatedBody":"This covers all of the various tasks that I'll have to do as part of the last week of my internship, including merging/passing my work onto others."},{"Id":"13224622509","Type":"IssuesEvent","CreatedAt":"2020-08-17T19:30:20","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9917","RelatedDescription":"Opened issue \"Automatic formatting with `dotnet format`\" (#9917) at NuGet/Home","RelatedBody":"We should start enforcing code style through `dotnet format`. This will help us spend less time asking folks for miscellaneous style changes during code review, and catch it when we happen to miss something. Once the PR lands, it means in the future we'll stop having random formatting changes along with code PRs, hopefully.\r\n\r\nAs part of this task, we should also automate style verification on CI"},{"Id":"13223715089","Type":"IssuesEvent","CreatedAt":"2020-08-17T17:44:40","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9551","RelatedDescription":"Closed issue \"PMUI Update Tab in VS.Oe\" (#9551) at NuGet/Home","RelatedBody":""},{"Id":"13222872667","Type":"IssuesEvent","CreatedAt":"2020-08-17T16:14:04","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9701","RelatedDescription":"Closed issue \"Test:  PM UI Apex tests are flaky (UninstallPackageFromUI and so on)\" (#9701) at NuGet/Home","RelatedBody":"The following  5 PM UI Apex tests are flaky recently:\r\n```\r\nSearchPackageFromUI\r\nInstallPackageFromUI\r\nInstallPackageToProjectsFromUI\r\nUninstallPackageFromUI\r\nUpdatePackageFromUI\r\n```\r\n\r\nUninstallPackageFromUI\r\nError message:\r\n`System.TimeoutException : Timed out after 00:00:10 waiting for C:\\school\\ApexSolutions\\TestCase2478\\TestProject\\packages.config did not exist within 00:00:10.`\r\nStack trace\r\n```\r\n   at Omni.Common.Waiter.ThrowIfExpired(String waitCondition)\r\n   at Omni.Common.WaitFor.IsTrue(Func`1 predicate, TimeSpan timeout, Nullable`1 interval, String conditionDescription)\r\n   at NuGet.Tests.Apex.NuGetUITestCase.WaitForFileExists(FileInfo file) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NuGetUITestCase.cs:line 161\r\n   at NuGet.Tests.Apex.NuGetUITestCase.UninstallPackageFromUI() in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NuGetUITestCase.cs:line 113\r\n```\r\n\r\nInstallPackageToProjectsFromUI \r\n```\r\n NuGet.Tests.Apex.NuGetUITestCase.InstallPackageToProjectsFromUI [FAIL]\r\n        Expected True because newtonsoft.json/9.0.1 should be installed in TestProject, but found False.\r\n        Stack Trace:\r\n             at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)\r\n             at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)\r\n             at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)\r\n             at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)\r\n             at FluentAssertions.Primitives.BooleanAssertions.BeTrue(String because, Object[] becauseArgs)\r\n          E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Utility\\CommonUtility.cs(240,0): at NuGet.Tests.Apex.CommonUtility.AssertPackageInPackagesConfig(VisualStudioHost visualStudio, ProjectTestExtension project, String packageName, String packageVersion, ILogger logger)\r\n          E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NuGetUITestCase.cs(93,0): at NuGet.Tests.Apex.NuGetUITestCase.InstallPackageToProjectsFromUI()\r\n        Output:\r\n          [test] info: Checking project newtonsoft.json\r\n          [test] info: Exists: False\r\n          [test] info: Package Manager Output Window Pane contents:  Added package 'Newtonsoft.Json.9.0.1' to folder 'C:\\school\\ApexSolutions\\TestCase4302\\packages'\r\n          Added package 'Newtonsoft.Json.9.0.1' to 'packages.config'\r\n          Executing script file 'C:\\school\\ApexSolutions\\TestCase4302\\packages\\Newtonsoft.Json.9.0.1\\tools\\install.ps1'...\r\n          Successfully installed 'Newtonsoft.Json 9.0.1' to NuProject\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2020-08-18T05:30:40.0544583Z","RunDurationInMilliseconds":2307}