{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"19987469924","Type":"PullRequestEvent","CreatedAt":"2022-01-30T21:46:58","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8967","RelatedDescription":"Merged pull request \"Redo .NET banner\" (#8967) at NuGet/NuGetGallery","RelatedBody":"The banner is broken on INT as the image wasn't included in the release artifacts. See:\r\n\r\n* https://int.nugettest.org/\r\n* https://int.nugettest.org/Content/gallery/img/dotnet-20-banner.svg\r\n\r\nAlso the previous implementation used a padding hack to force a container to have a minimal height. This solution did not work well on very wide screens as it caused the background image to be noticeably clipped. This new solution looks much better on very wide screens and removes the padding hack.\r\n\r\nI will test this on DEV before merging:\r\n\r\n* [x] Accessibility Insights FastPass\r\n* [x] Verified on DEV\r\n    * Build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=5689834&view=results\r\n    * Release: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1253840\r\n\r\nHere's what it looks like:\r\n\r\n![my-lifes-work](https://user-images.githubusercontent.com/737941/151682696-1b1953f8-605d-476a-91ba-7fdcf6b4e246.gif)\r\n\r\nFollow up to https://github.com/NuGet/NuGetGallery/pull/8966\r\nPart of: https://github.com/NuGet/Engineering/issues/4226"},{"Id":"19975955411","Type":"PullRequestEvent","CreatedAt":"2022-01-29T04:23:58","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8967","RelatedDescription":"Opened pull request \"Add missing image for .NET banner\" (#8967) at NuGet/NuGetGallery","RelatedBody":"The banner is broken on INT as the image wasn't included in the release artifacts. See:\r\n\r\n* https://int.nugettest.org/\r\n* https://int.nugettest.org/Content/gallery/img/dotnet-20-banner.svg\r\n\r\nI will test this on DEV before merging:\r\n\r\n* Build:\r\n* Release:\r\n\r\nFollow up to https://github.com/NuGet/NuGetGallery/pull/8966\r\nPart of: https://github.com/NuGet/Engineering/issues/4226"},{"Id":"19975600470","Type":"PullRequestEvent","CreatedAt":"2022-01-29T03:01:56","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8966","RelatedDescription":"Merged pull request \"Add .NET celebration banner\" (#8966) at NuGet/NuGetGallery","RelatedBody":"Add .NET celebration banner. Here it is in all its formidable glory:\r\n\r\n![my-lifes-work](https://user-images.githubusercontent.com/737941/151642859-c6222f5a-e304-4f4b-ab16-29d08460ae66.gif)\r\n\r\nTracked by: https://github.com/NuGet/Engineering/issues/4226"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"19988935759","Type":"IssuesEvent","CreatedAt":"2022-01-31T02:05:45","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11538","RelatedDescription":"Opened issue \"[Bug]: NuGet.exe depends on Microsoft.Build.Framework.dll 4.0.0.0 from the GAC\" (#11538) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.0.0.280\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nNuget.exe references Microsoft.Build.Framework.dll and Microsoft.Build.Utilities.v4.0.dll which are both loaded from the GAC:\r\n\r\n```\r\nC:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.Build.Framework\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\Microsoft.Build.Framework.dll\r\nC:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.Build.Utilities.v4.0\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\Microsoft.Build.Utilities.v4.0.dll\r\n```\r\n\r\nIf you unGAC all MSBuild dlls on the machine, nuget.exe stops working:\r\n\r\n```\r\nCould not load file or assembly 'Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\nSystem.AggregateException: One or more errors occurred. ---> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n   --- End of inner exception stack trace ---\r\n   at NuGet.CommandLine.Program.Initialize(IFileSystem fileSystem, IConsole console)\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n```\r\n\r\nI love that nuget.exe is almost truly standalone, but those two old MSBuild dependencies ruin it. Sometimes we ask customers to  UnGAC MSBuild .dlls, but after that various tools stop breaking. \r\n\r\nI think it would be nice if nuget.exe was truly standalone.\n\n### Verbose Logs\n\n_No response_"},{"Id":"19983073329","Type":"IssuesEvent","CreatedAt":"2022-01-30T07:49:36","Actor":"v-crchang","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11537","RelatedDescription":"Opened issue \"[Bug]: Versions Dropdown default selection should be LatestStable on Updates tabs \" (#11537) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.2.0.29\n\n### Worked before?\n\nDev\\6.2.0.28\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n1. Create a C# Console App (.NET Core) project.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Install a package (e.g. “Newtonsoft.Json”), not the latest one (e.g. “11.0.1”).\r\n4. Click the “Updates” Tab.\r\n\r\n## Expected:\r\nThe Latest Stable version should show in the \"Version\" dropdown box as below screenshot.\r\n![image](https://user-images.githubusercontent.com/71433406/151691090-06362ca4-a956-468d-849c-56fecea85188.png)\r\n\r\n## Actual:\r\nThe version shows in the \"Version\" dropdown box as below screenshot.\r\n![image](https://user-images.githubusercontent.com/71433406/151691096-d816ab5f-d075-4a9b-8972-aa7daf820e30.png)\r\n\r\n## Notes:\r\n1. The issue also reproes on C# Console App (.NET Framework) project with the Packages.Config format.\r\n2. The issue doesn't repro on NuGet Client Dev\\6.2.0.28.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"19982509518","Type":"IssuesEvent","CreatedAt":"2022-01-30T05:20:09","Actor":"atrauzzi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11536","RelatedDescription":"Opened issue \"[Bug]: \" (#11536) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n6.0.100\n\n### Worked before?\n\nNot as best I know.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI'm in the process of configuring builds for an open source project which can be found here: https://github.com/atrauzzi/protoculture-dotnet-postgres\r\n\r\nPart of how this project works is that it **embeds** various versions of postgres as static dependencies.  Those dependencies are to be included in the package and copied to the build output folder of any consuming projects.\r\n\r\nIf you look at [my `.csproj` file](https://github.com/atrauzzi/protoculture-dotnet-postgres/blob/main/Protoculture.Postgres.Embedded/Protoculture.Postgres.Embedded.csproj#L27-L34), you can see that I'm telling it to recursively grab a directory and eventually include it in the nuget package.\r\n\r\nYou can see in [the build](https://github.com/atrauzzi/protoculture-dotnet-postgres/runs/4994959039), packaging seems to succeed, but when I go to upload to the GitHub package repository as a test, I get the error:\r\n\r\n```\r\nwarn : nupkg malformed - failed to extract metadata from upload. Are you sure this is a nupkg file?\r\n```\r\n\r\nNot helpful, but I tried out some nuget validators and I end up getting the following:\r\n\r\n```\r\nCould not load file or assembly '/tmp/Protoculture.Postgres.Embedded.0.1.1-pre/contentFiles/postgres/windows/x86_64/lib/_int.dll'. The module was expected to contain an assembly manifest.\r\n```\r\n\r\nI definitely am copying `dll` files to that path in the package, but they are dependencies of the applications I'm embedding.  They do not in any way participate directly with my own application code.\r\n\r\nAs best as I can tell -- and the documentation for this kind of stuff is really spotty -- I can't seem to find a way to tell nuget/nupkg to not try to do anything with those files.  Thus it's preventing the package from working anywhere.\n\n### Verbose Logs\n\n_No response_"},{"Id":"19974897150","Type":"IssuesEvent","CreatedAt":"2022-01-29T00:48:40","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9829","RelatedDescription":"Closed issue \"Allow to user to input custom (floating) versions through the PM UI\" (#9829) at NuGet/Home","RelatedBody":"Change version input to a Combo Box displaying available version depending on the user input. This will allow users to select a floating version to install."},{"Id":"19973426837","Type":"IssuesEvent","CreatedAt":"2022-01-28T22:02:14","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11461","RelatedDescription":"Closed issue \"[Bug]: The “version” drop-down box shows the installed version instead of latest version in Browse tab before refreshing\" (#11461) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.1.0.83\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about Problem\r\nVS Version: Main\\32016.83\r\nNuGet Version: Dev\\6.1.0.83\r\nOS Version: Windows-11-Enterprise-21H2\r\n#### Repro steps\r\n1. Create a C# Console App (.NET 6.0) project.\r\n2. Open the PM UI for the project and go to Browse tab.\r\n3. Install a package – not the latest version (e.g. Newtonsoft.Json) from Browse tab.\r\n4. Observe the “version” drop-down box on the right panel after installing.\r\n#### Expected\r\nThe “version” drop-down box should show the latest version of this package in Browse tab.\r\n#### Actual\r\nThe “version” drop-down box shows the installed version instead of latest version in Browse tab as below.\r\n![image](https://user-images.githubusercontent.com/20632625/146527400-7a9c373f-fb08-4bb7-b630-e21b42e669e4.png)\r\n#### Notes\r\n1. The “version” drop-down box will show the latest version of this package correctly after refreshing/reopening the PM UI/switching the tab back as below.\r\n![image](https://user-images.githubusercontent.com/20632625/146528463-57ffa97d-63b0-438d-ba8c-cad6e2e05dc6.png)\r\n2. It is not a regression issue since it reproes on D16.10 31025.218.\n\n### Verbose Logs\n\n_No response_"},{"Id":"19969044228","Type":"IssuesEvent","CreatedAt":"2022-01-28T16:46:27","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11535","RelatedDescription":"Opened issue \"[DCR]: NuGet causes many ArgumentExceptions to be thrown & caught in VS\" (#11535) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\n`src/NuGet.Clients/NuGet.PackageManagement.VisualStudio/ProjectServices/VsProjectBuildProperties.cs` tries to get MSBuild properties from `IVsBuildPropertyStorage`, and if it's unable to get the property (even if the API returns a code saying the property does not exist), NuGet then tries `DTE.Project.Properties.Item(string)`. However, DTE throws an `InvalidArgumentException` when the property does not exist in the project.\r\n\r\nWhile the exception is caught, it has two problems:\r\n\r\n1. There's a minor perf problem. Not only are we pointlessly requesting a property we already know doesn't exist, but throwing and catching exceptions has non-trivial overhead, which is why many .NET APIs have `Try*` methods.\r\n2. VS extension authors (which includes the NuGet team and everyone in Microsoft writing components that ship in VS) have these first chance exceptions appear in Visual Studio's debugging diagnostics view when debugging VS. This has even affected me personally, when trying to debug some bug fix or new feature, and it's difficult to figure out which exceptions are relevant to my scenario, and which exceptions are just noise.\r\n\r\nSeveral times internal partners, including the VS perf team, have opened bugs on NuGet for throwing these exceptions, despite the fact that DTE is actually throwing them, due to technicalities of how COM interop work.\n\n### Desired Behavior\n\nNuGet should only use `DTE.Project.Properties` when the project system doesn't support `IVsBuildPropertyStorage`.\n\n### Additional Context\n\nThis change has medium risk, as it makes the assumption that project systems that implement `IVsbuildPropertyStorage` have done so correctly, and that using `DTE.Project.Properties.Item(string)` will also not find the property. It's out of the NuGet team's control whether or project systems implement themselves correctly, and since NuGet has been doing this fallback behaviour \"forever\", if NuGet changes and this exposes a project system bug, it will appear as a NuGet regression."},{"Id":"19968995963","Type":"IssuesEvent","CreatedAt":"2022-01-28T16:44:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11502","RelatedDescription":"Closed issue \"Move NuGet test projects from netcoreapp2.1 to netcoreap3.1\" (#11502) at NuGet/Home","RelatedBody":"netcoreapp2.1 is deprecated, so we can move to netcoreapp3.1 \r\n"},{"Id":"19968916108","Type":"PullRequestEvent","CreatedAt":"2022-01-28T16:39:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/11460","RelatedDescription":"Merged pull request \"AssetTargetFallback is respected with dependency resolution\" (#11460) at NuGet/Home","RelatedBody":"[Rendered](https://github.com/NuGet/Home/blob/dev-nkolev92-atfdepsDesign/proposed/2021/AssetTargetFallback-DependenciesResolution.md) - Remember to refresh as GH won't prompt you for updates.\r\n\r\n\r\nDesign for https://github.com/NuGet/Home/issues/5957\r\n\r\nPR in NuGet.Client - https://github.com/NuGet/NuGet.Client/pull/4372"},{"Id":"19968720228","Type":"IssuesEvent","CreatedAt":"2022-01-28T16:28:15","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11534","RelatedDescription":"Opened issue \"[Bug]: Disabling package source in VS throws null reference exception\" (#11534) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n17.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n```text\r\ndotnet new nugetconfig\r\ndotnet nuget add source https://whatever\r\ndotnet new sln\r\nstart *.sln\r\n```\r\n\r\nThen go into VS options, NuGet Package Manger, Package Sources.\r\n\r\nUncheck the checkbox for the whatever source, and click ok.\r\n\r\n\r\nThe problem is here: https://github.com/NuGet/NuGet.Client/blob/0ca13dff1ebdd33c2f20a66aa059628200a16af9/src/NuGet.Core/NuGet.Configuration/PackageSource/PackageSourceProvider.cs#L448\r\n\r\nPackageSourceProvider's constructor takes in an `ISettings`, which VSSettings implements. However, the line tries to cast to a `NuGet.Configuration.Settings` class, which VSSettings does not extend.  The cast is done using the `as` keyword, not a \"direct\" typecast, preventing a more useful typecast exception from being reported.\r\n\r\nHowever, the more serious design bug is allowing the class constructor to take in anything that implements the interface `ISettings`, but then expecting the class to be a specific implementation `Settings`.\n\n### Verbose Logs\n\n_No response_"},{"Id":"19967753285","Type":"IssuesEvent","CreatedAt":"2022-01-28T15:34:00","Actor":"qlikTERror","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11533","RelatedDescription":"Opened issue \"[Bug]: push fail when Credential Provider fail even if ApiKey is passed on command line\" (#11533) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n6.0.0.280\n\n### Worked before?\n\nBefore credential providers\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWe are trying to push a package to GitHub packages. We verified that our Source and ApiKey works correctly. As Source we use **https://nuget.pkg.github.com/<owner>/index.json** where **<owner>** is replaced with our correct owner. As ApiKey we use a PAT that has been verified to work.\r\n\r\nIf we run the command in a clean situation we obtain an 401 (Unauthorized).\r\n\r\nWe added a nuget,config in the current directory, adding to it as package source the previous url and as username and password for that source some random values that are totally invalid.\r\n\r\nIf we run the command it works and with verbosity detailed we see the Credential Provider never kicks in. If we use a wrong ApiKey it stops to be able to push, as expected.\r\n\r\nAt this point, if we change the current directory and move to another path or if we delete the nuget.config that we just created the push command keeps working with the correct ApiKey and fails if a wrong one is used.\r\n\r\nIf we also delete the v3-cache folder that host the http-cache of nuget.exe we are returning to the situation were the command stops to be able to push and we have again the logs attached to this issue.\r\n\r\nIt seems that adding a pair of credentials, even wrong, for the source allows us to correctly use the ApiKey parameter. Otherwise Credential Providers kicks in (before trying the ApiKey parameter) and if they fails the ApiKey is never tried.\r\n\r\n \n\n### Verbose Logs\n\n```shell\nNuGet Version: 6.0.0.280\r\nMSBuild auto-detection: using msbuild version '16.11.2.50704' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nUsing C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\Plugins\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe as a credential provider plugin.\r\n    [CredentialProvider.162340]Running in plug-in mode\r\n    [CredentialProvider.162340]Command-line v0.1.23+3902a1eadc037829d4a161d287d8579f1fb2168e: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\Plugins\\CredentialProvider.Microsoft\\CredentialProvider.Microsoft.exe\" -Plugin\r\n    [CredentialProvider.162340]Handling 'Request' 'Initialize'. Time elapsed in ms: 4 - Payload: {\"ClientVersion\":\"6.0.0\",\"Culture\":\"en-US\",\"RequestTimeout\":\"00:00:05\"}\r\n    [CredentialProvider.162340]Sending response: 'Request' 'Initialize'. Time elapsed in ms: 5\r\n    [CredentialProvider.162340]Time elapsed in milliseconds after sending response 'Request' 'Initialize': 6\r\n    [CredentialProvider.162340]Handling 'Request' 'GetOperationClaims'. Time elapsed in ms: 0 - Payload: {}\r\n    [CredentialProvider.162340]Sending response: 'Request' 'GetOperationClaims'. Time elapsed in ms: 8\r\n    [CredentialProvider.162340]Time elapsed in milliseconds after sending response 'Request' 'GetOperationClaims': 23\r\n    [CredentialProvider.162340]Handling 'Request' 'SetLogLevel'. Time elapsed in ms: 2 - Payload: {\"LogLevel\":\"Debug\"}\r\n    [CredentialProvider]Sending response: 'Request' 'SetLogLevel'. Time elapsed in ms: 3\r\n    [CredentialProvider]Time elapsed in milliseconds after sending response 'Request' 'SetLogLevel': 7\r\n    [CredentialProvider]Handling 'Request' 'GetAuthenticationCredentials'. Time elapsed in ms: 2 - Payload: {\"Uri\":\"https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\",\"IsRetry\":false,\"IsNonInteractive\":true,\"CanShowDialog\":true}\r\n    [CredentialProvider]Creating a progress reporter with interval: 00:00:02\r\n    [CredentialProvider]Handling auth request, Uri: https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json, IsRetry: False, IsNonInteractive: True, CanShowDialog: True\r\n    [CredentialProvider]URI: https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\r\n    [CredentialProvider]VstsBuildTaskServiceEndpointCredentialProvider - This credential provider must be run under the Team Build tasks for NuGet with external endpoint credentials. Appropriate environment variable needs to be set.\r\n    [CredentialProvider]Skipping NuGetCredentialProvider.CredentialProviders.VstsBuildTaskServiceEndpoint.VstsBuildTaskServiceEndpointCredentialProvider, cannot provide credentials for https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\r\n    [CredentialProvider]VstsBuildTaskCredentialProvider - This credential provider must be run under the Team Build tasks for NuGet. Appropriate environment variables must be set.\r\n    [CredentialProvider]Skipping NuGetCredentialProvider.CredentialProviders.VstsBuildTask.VstsBuildTaskCredentialProvider, cannot provide credentials for https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\r\n    [CredentialProvider]GET https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\r\nWARNING: The plugin credential provider could not acquire credentials. Authentication may require manual action. Consider re-running the command with --interactive for `dotnet`, /p:NuGetInteractive=\"true\" for MSBuild or removing the -NonInteractive switch for `NuGet`\r\n    [CredentialProvider]VstsCredentialProvider - https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json is not an Azure Artifacts feed.\r\n    [CredentialProvider]Skipping NuGetCredentialProvider.CredentialProviders.Vsts.VstsCredentialProvider, cannot provide credentials for https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json\r\n    [CredentialProvider]Unable to acquire credentials.\r\n    [CredentialProvider]Sending response: 'Request' 'GetAuthenticationCredentials'. Time elapsed in ms: 415\r\n    [CredentialProvider]Time elapsed in milliseconds after sending response 'Request' 'GetAuthenticationCredentials': 418\r\nUnable to load the service index for source https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json.\r\n  Response status code does not indicate success: 401 (Unauthorized).\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://nuget.pkg.github.com/XXXXXXXXX-trial/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\r\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n   at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__4`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__4`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.HttpSource.<GetAsync>d__15`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.Protocol.ServiceIndexResourceV3Provider.<GetServiceIndexResourceV3>d__11.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at NuGet.Protocol.ServiceIndexResourceV3Provider.<GetServiceIndexResourceV3>d__11.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.ServiceIndexResourceV3Provider.<TryCreate>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.PackageUpdateResourceV3Provider.<TryCreate>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__15`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.CommandRunnerUtility.<GetPackageUpdateResource>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.PushRunner.<Run>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.PushCommand.<ExecuteCommandAsync>d__36.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":7,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2022-01-31T03:30:26.5346226Z","RunDurationInMilliseconds":1434}