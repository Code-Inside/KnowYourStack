{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14148529151","Type":"PullRequestEvent","CreatedAt":"2020-11-10T22:44:24","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8310","RelatedDescription":"Merged pull request \"[A11y] break word for a certificate thumbprint\" (#8310) at NuGet/NuGetGallery","RelatedBody":"I decide to move to a quicker solution, and just break word for a certificate thumbprint:\r\n![image](https://user-images.githubusercontent.com/41028779/98195394-82217f00-1ed6-11eb-82e7-2da215d50d1f.png)\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/41028779/98195484-bb59ef00-1ed6-11eb-8175-5197aac8f4d5.png)\r\n\r\n@ryuyu "},{"Id":"14146204220","Type":"IssuesEvent","CreatedAt":"2020-11-10T18:51:37","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4730","RelatedDescription":"Closed issue \"Documentation.md should be populated from package during push\" (#4730) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"14135684202","Type":"IssuesEvent","CreatedAt":"2020-11-10T02:19:57","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8318","RelatedDescription":"Opened issue \"Layout page change has broken status razor build\" (#8318) at NuGet/NuGetGallery","RelatedBody":"This change: \r\nhttps://github.com/NuGet/NuGetGallery/pull/8256/files\r\nSpecifically this line:\r\nhttps://github.com/NuGet/NuGetGallery/blob/master/src/NuGetGallery/Views/Shared/Gallery/Layout.cshtml#L35\r\n...will now block updating the NuGetGallery submodule in https://github.com/NuGet/NuGet.Services.Status. If you build the repo with an updated submodule, it will complete, but the default page has a dependency on layout.cshtml which causes the razor compile to fail at this line (looks like ViewBag is unknown)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14150300529","Type":"IssuesEvent","CreatedAt":"2020-11-11T03:05:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5639","RelatedDescription":"Closed issue \"bin and obj folders keep coming back\" (#5639) at NuGet/Home","RelatedBody":"_From @Petermarcu on July 24, 2017 18:10_\n\n## Steps to reproduce\r\n`dotnet build`\r\nHave your project open in VS.\r\nOpen the folder for your project in explorer. \r\ndelete the bin and obj folder. \r\n\r\n## Expected  behavior\r\nThe folder are gone\r\n\r\n## Actual behavior\r\nThey come back. The bin folder is empty and the obj folder has assembly info and .cache files.\r\nDelete again and they are gone.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0-preview3-006770)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview3-006770\r\n Commit SHA-1 hash:  78e7163819\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview3-006770\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview3-25514-02\r\n  Build    : 1b047a04057cec973cfb890fd21f7a639cfcd118\r\n```\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7241_"},{"Id":"14149633253","Type":"IssuesEvent","CreatedAt":"2020-11-11T01:20:46","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10254","RelatedDescription":"Opened issue \"E2E test GetPackageUpdatesAfterSwitchToSourceThatDoesNotContainInstalledPackageId is flaky\" (#10254) at NuGet/Home","RelatedBody":"End to end Test GetPackageUpdatesAfterSwitchToSourceThatDoesNotContainInstalledPackageId failed constantly.\r\n\r\nThe test assumes there is no Antlr package on source https://pkgs.dev.azure.com/dnceng/public/_packaging/nuget-build/nuget/v3/index.json.\r\nBut there is one since last Sunday:\r\nhttps://dev.azure.com/dnceng/public/_packaging?_a=package&feed=nuget-build&package=Antlr&version=3.1.3.42154&protocolType=NuGet&view=versions\r\nSo it starts to fail constantly."},{"Id":"14149449067","Type":"IssuesEvent","CreatedAt":"2020-11-11T00:53:04","Actor":"tmm360","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10253","RelatedDescription":"Opened issue \"Warning NU5118 packaging RCL with static contents and multi-target frameworks netcoreapp3.1;net5.0\" (#10253) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nTrying to package a Razor Class Library that contains static contents, and that multi-targets the frameworks `netcoreapp3.1` and `net5.0`, I receive several NU5118 warnings. I'm using `dotnet pack` command from stable .NET 5 SDK. Building works without warnings, packaging no.\r\n\r\ndotnet.exe --version: 5.0.100\r\nVS version: 16.8.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new RCL project with this minimal project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp3.1;net5.0</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n2. Add a `wwwroot` directory with a sample static file inside\r\n\r\n3. Try to pack it with `dotnet pack`, or VS UI.\r\n\r\n### Logs\r\n\r\n```\r\n1>------ Build started: Project: RazorClassLibrary1, Configuration: Debug Any CPU ------\r\n1>RazorClassLibrary1 -> C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\bin\\Debug\\net5.0\\RazorClassLibrary1.dll\r\n1>RazorClassLibrary1 -> C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\bin\\Debug\\netcoreapp3.1\\RazorClassLibrary1.dll\r\n1>C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(207,5): warning NU5118: File 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\wwwroot\\background.png' is not added because the package already contains file 'staticwebassets\\background.png'\r\n1>C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(207,5): warning NU5118: File 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\obj\\Debug\\netcoreapp3.1\\staticwebassets\\msbuild.RazorClassLibrary1.Microsoft.AspNetCore.StaticWebAssets.props' is not added because the package already contains file 'build\\Microsoft.AspNetCore.StaticWebAssets.props'\r\n1>C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(207,5): warning NU5118: File 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\obj\\Debug\\netcoreapp3.1\\staticwebassets\\msbuild.build.RazorClassLibrary1.props' is not added because the package already contains file 'build\\RazorClassLibrary1.props'\r\n1>C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(207,5): warning NU5118: File 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\obj\\Debug\\netcoreapp3.1\\staticwebassets\\msbuild.buildMultiTargeting.RazorClassLibrary1.props' is not added because the package already contains file 'buildMultiTargeting\\RazorClassLibrary1.props'\r\n1>C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(207,5): warning NU5118: File 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\obj\\Debug\\netcoreapp3.1\\staticwebassets\\msbuild.buildTransitive.RazorClassLibrary1.props' is not added because the package already contains file 'buildTransitive\\RazorClassLibrary1.props'\r\n1>Successfully created package 'C:\\Users\\mirko\\Desktop\\wow\\WebApplication1\\RazorClassLibrary1\\bin\\Debug\\RazorClassLibrary1.1.0.0.nupkg'.\r\n1>Done building project \"RazorClassLibrary1.csproj\".\r\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n### Sample Project\r\n\r\n[RazorClassLibrary1.zip](https://github.com/NuGet/Home/files/5520980/RazorClassLibrary1.zip)\r\n"},{"Id":"14149373266","Type":"IssuesEvent","CreatedAt":"2020-11-11T00:41:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10211","RelatedDescription":"Closed issue \"Add metadata to restore tests, make them go through the no-op codepath\" (#10211) at NuGet/Home","RelatedBody":"While I investigating https://github.com/NuGet/Home/issues/10068, I hit an known problem of the no-op codepath not being exercised in a good amount of unit test. \r\n\r\nThe reason is that the packagespec is not created with the same amount of details prod package spec would be.\r\nIn prod scenarios, all restores go through the restorerunner which calls https://github.com/NuGet/NuGet.Client/blob/c3219e49852add8371db25680a300cce5551ef00/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/SpecValidationUtility.cs#L28 to validate that things like the `RestoreMedata` are not null or empty.\r\n\r\nNow this is not a major problem for no-op, I have not discovered any regressions because of this, but it *does* not reflect what the actual restore code run is."},{"Id":"14149360194","Type":"IssuesEvent","CreatedAt":"2020-11-11T00:39:27","Actor":"sbanni","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10252","RelatedDescription":"Opened issue \"UnitTest failures in VS.Oe feature branch for search functionality\" (#10252) at NuGet/Home","RelatedBody":"Run these 2 at the same time and the first fails consistently:\r\n \r\nNuGet.PackageManagement.VisualStudio.Test.NuGetPackageSearchServiceTests.GetPackageVersionsAsync_WhenPackageVersionsExist_ReturnsPackageVersions\r\nNuGet.PackageManagement.VisualStudio.Test.NuGetPackageSearchServiceTests.GetAllPackagesAsync_WithValidArguments_ReturnsMatchingPackages"},{"Id":"14148685059","Type":"IssuesEvent","CreatedAt":"2020-11-10T23:03:17","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6134","RelatedDescription":"Closed issue \"Package Manager shows \"ghost\" update notifications\" (#6134) at NuGet/Home","RelatedBody":"Repro steps:\r\na) Clone the repo from https://aka.ms/eshopuwp/src\r\nb) Open this solution, change configuration to x86 and do a full rebuild.\r\nc) Open the package manager UI\r\n\r\nObserved: Both the Browse and Installed tabs show artifacts for updates available, as in the attached screenshot.\r\nExpected: They should not.\r\n\r\n![nugettabs](https://user-images.githubusercontent.com/5762284/32340183-1f129204-bfb7-11e7-96e4-2bbe8757b3a2.JPG)\r\n\r\n"},{"Id":"14148661833","Type":"IssuesEvent","CreatedAt":"2020-11-10T23:00:31","Actor":"marcpopMSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10251","RelatedDescription":"Opened issue \"dotnet restore taking up to 12GB in docker container\" (#10251) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#14389**\r\n- Please respond to @adam8797.\r\n\r\n---\r\n\r\n_From @adam8797 on Friday, October 30, 2020 2:21:38 PM_\r\n\r\nHello all,\r\n\r\nI've been working to try to determine why my `dotnet restore` is taking so long in my build system (GitLab CI)\r\n\r\nThis project is using .net 5 rc2 currently.\r\n\r\nI'm restoring three projects, and on developer machines it only ever takes around 30 seconds or so. In the build system it takes about 10 minutes. \r\n\r\nThe exact restore command is `dotnet restore -v n --packages .nuget /clp:PerformanceSummary --disable-parallel`\r\n\r\nHere is the target performance summary of the latest build:\r\n\r\n```\r\nTarget Performance Summary:\r\n        0 ms  ValidateProjects                           1 calls\r\n        0 ms  _GetRestorePackagesPathOverride            1 calls\r\n        0 ms  ValidateToolsVersions                      1 calls\r\n        0 ms  CollectCentralPackageVersions              3 calls\r\n        0 ms  _GenerateRestoreGraphProjectEntry          3 calls\r\n        0 ms  _GetRestoreSettingsCurrentProject          3 calls\r\n        0 ms  CollectFrameworkReferences                 3 calls\r\n        0 ms  _GenerateRestoreProjectPathItemsCurrentProject   3 calls\r\n        0 ms  _GenerateRestoreDependencies               3 calls\r\n        0 ms  _GenerateProjectRestoreGraph               3 calls\r\n        0 ms  _GenerateProjectRestoreGraphCurrentProject   3 calls\r\n        0 ms  CollectPackageReferences                   3 calls\r\n        0 ms  CollectPackageDownloads                    3 calls\r\n        0 ms  _CheckForObsoleteDotNetCliToolReferences   3 calls\r\n        0 ms  _CheckForUnsupportedCppNETCoreVersion      3 calls\r\n        0 ms  _GetProjectJsonPath                        3 calls\r\n        0 ms  _CheckForUnsupportedNETCoreVersion         3 calls\r\n        1 ms  _GetRestoreSettingsPerFramework            3 calls\r\n        1 ms  _CheckForLanguageAndFeatureCombinationSupport   3 calls\r\n        2 ms  _GenerateRestoreSpecs                      3 calls\r\n        2 ms  _GenerateRestoreProjectPathItems           3 calls\r\n        2 ms  _GenerateRestoreProjectSpec                3 calls\r\n        3 ms  _GenerateDotnetCliToolReferenceSpecs       3 calls\r\n        5 ms  _GetRestoreTargetFrameworksOutput          3 calls\r\n        7 ms  _IsProjectRestoreSupported                 3 calls\r\n        9 ms  _LoadRestoreGraphEntryPoints               1 calls\r\n        9 ms  _GenerateProjectRestoreGraphPerFramework   3 calls\r\n       10 ms  ValidateSolutionConfiguration              1 calls\r\n       11 ms  CheckForImplicitPackageReferenceOverrides   3 calls\r\n       13 ms  UpdateAspNetToFrameworkReference           3 calls\r\n       15 ms  ApplyImplicitVersions                      3 calls\r\n       16 ms  _GetRestoreProjectStyle                    3 calls\r\n       26 ms  _GenerateRestoreProjectPathWalk            3 calls\r\n       31 ms  _GenerateRestoreProjectPathItemsPerFramework   3 calls\r\n       32 ms  _GetRestoreSettingsOverrides               3 calls\r\n       45 ms  _GetAllRestoreProjectPathItems             1 calls\r\n       65 ms  _GetRestoreSettings                        3 calls\r\n      162 ms  _GenerateRestoreGraph                      1 calls\r\n      256 ms  ProcessFrameworkReferences                 3 calls\r\n      720 ms  _FilterRestoreGraphProjectInputItems       1 calls\r\n    556229 ms  Restore                                    1 calls\r\nTask Performance Summary:\r\n        1 ms  NuGetMessageTask                           1 calls\r\n        1 ms  WarnForInvalidProjectsTask                 1 calls\r\n        1 ms  GetRestorePackageDownloadsTask             3 calls\r\n        1 ms  GetRestoreFrameworkReferencesTask          3 calls\r\n        2 ms  GetRestoreProjectReferencesTask            3 calls\r\n        2 ms  GetRestoreDotnetCliToolsTask               3 calls\r\n        2 ms  GetRestorePackageReferencesTask            3 calls\r\n        2 ms  RemoveDuplicates                           9 calls\r\n        3 ms  Message                                    8 calls\r\n        4 ms  GetProjectTargetFrameworksTask             3 calls\r\n        5 ms  GetRestoreSolutionProjectsTask             1 calls\r\n        6 ms  ConvertToAbsolutePath                      6 calls\r\n        6 ms  CheckIfPackageReferenceShouldBeFrameworkReference   6 calls\r\n        7 ms  CheckForDuplicateFrameworkReferences       3 calls\r\n        8 ms  GetRestoreProjectStyleTask                 3 calls\r\n        8 ms  ApplyImplicitVersions                      3 calls\r\n        9 ms  CheckForImplicitPackageReferenceOverrides   3 calls\r\n       40 ms  ResolveAppHosts                            3 calls\r\n       64 ms  GetRestoreSettingsTask                     3 calls\r\n      207 ms  ProcessFrameworkReferences                 3 calls\r\n      950 ms  MSBuild                                   11 calls\r\n    556228 ms  RestoreTask                                1 calls\r\n```\r\n\r\nEven weirder, is if I manage to get into the build node and run `top` I see that dotnet is using 12GB of memory! Output from top:\r\n```\r\ntop - 14:20:54 up 9 days, 22:07,  0 users,  load average: 3.13, 3.58, 3.50\r\nTasks:  11 total,   1 running,  10 sleeping,   0 stopped,   0 zombie\r\n%Cpu(s):  5.1 us,  0.4 sy,  0.0 ni, 94.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\r\nMiB Mem : 58.5/128309.8 [|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                                         ]\r\nMiB Swap:  0.0/0.0      [                                                                                                    ]\r\n\r\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                                                                                                                                                   \r\n   33 root      20   0   11.9g   0.2g   0.1g S   2.7   0.2   0:18.10 dotnet\r\n   69 root      20   0    8.2g   0.1g   0.0g S   0.0   0.1   0:00.75 dotnet\r\n   55 root      20   0    8.2g   0.1g   0.0g S   0.0   0.1   0:00.74 dotnet\r\n   14 root      20   0    8.1g   0.1g   0.0g S   0.0   0.1   0:00.61 dotnet\r\n  124 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.00 bash\r\n  315 root      20   0    0.0g   0.0g   0.0g R   0.0   0.0   0:00.07 top\r\n    6 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.00 bash\r\n    1 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.02 bash\r\n   12 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.00 bash\r\n  117 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.00 sh\r\n  123 root      20   0    0.0g   0.0g   0.0g S   0.0   0.0   0:00.00 sh\r\n```\r\n\r\nThis seems like an insane amount of memory to be using? How can I reduce this? What more can I provide to help troubleshoot this?\r\n\r\n"},{"Id":"14147872101","Type":"IssuesEvent","CreatedAt":"2020-11-10T21:32:23","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10246","RelatedDescription":"Closed issue \"NuGet.Packaging 5.8.0 is not published on nuget.org\" (#10246) at NuGet/Home","RelatedBody":"It seems there was a publishing issue because all NuGet.* **5.8.0** packages (e.g. [NuGet.Common](https://www.nuget.org/packages/NuGet.Common/), [NuGet.Protocol](https://www.nuget.org/packages/NuGet.Protocol/), etc.) have been published 15 hours ago on nuget.org except for [NuGet.Packaging](https://www.nuget.org/packages/NuGet.Packaging/) whose latest published version is **5.8.0-preview.3.6823**."},{"Id":"14146786040","Type":"IssuesEvent","CreatedAt":"2020-11-10T19:45:52","Actor":"Drake53","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10247","RelatedDescription":"Closed issue \"PackageReference no longer works after uploading to NuGet\" (#10247) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen I create a new package, I always add it to a local folder package source first.\r\nTo upload it to NuGet I normally upload it through the website, but since recently I have doing it using dotnet.exe nuget push:\r\n```csharp\r\nProcess.Start(\"dotnet\", $\"nuget push \\\"{package}\\\" --api-key {ApiKey} --source {sourceString}\");\r\n```\r\n\r\nI recently found out that for some reason, when my package is restored from my local folder package source, everything works correctly, but when it's restored from NuGet, visual studio/intellisense is unable to find the package's namespace and classes.\r\n\r\nThe .nupkg uploaded to NuGet is different from the original, because a file '.signature.p7s' is added. Everything else (when looking at the compressed/uncompressed sizes of the files in the .nupkg) appears to be the same.\r\n\r\nI tested this with v0.1.0, v1.0.0, v1.1.0, and v1.1.1.\r\nOnly v0.1.0 does not have this problem (although it does also have the .signature file).\r\nI think for v1.0.0 I still used the website to upload the package, so I don't think it's somehow caused by using dotnet.exe instead.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new project with 'PackageReference Include=\"War3Net.IO.Mpq\" Version=\"1.1.1\"'\r\n\r\n2. After the package is restored, 'using War3Net.IO.Mpq' gives error CS0246: type or namespace could not be found.\r\n\r\n3. Delete the packages cache and restore the package (see attached file) from a local folder instead of from NuGet.\r\n\r\n4. After the package is restored, the namespace is found and no longer gives an error.\r\n\r\n\r\n\r\nFrom what I can tell, the signature somehow causes this issue, since that's the only difference between my local .nupkg file and the one uploaded on NuGet, but at the same time this signature file appears to exist in every version on NuGet, but not every version has this issue.\r\n\r\nDoes anyone know why this is happening and how this can be fixed? Thank you.\r\n\r\nhttps://www.nuget.org/packages/War3Net.IO.Mpq\r\n\r\n[War3Net.IO.Mpq.1.1.1.zip](https://github.com/NuGet/Home/files/5517411/War3Net.IO.Mpq.1.1.1.zip)\r\n\r\n"},{"Id":"14146421997","Type":"IssuesEvent","CreatedAt":"2020-11-10T19:11:46","Actor":"madelson","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10250","RelatedDescription":"Opened issue \"Provide a means of specifying that a package is incompatible with another package\" (#10250) at NuGet/Home","RelatedBody":"It would be helpful to be able to specify in the package metadata that a particular package is incompatible with another package or with a range of versions of another package. \r\n\r\nHere is the use-case we have:\r\n* We have a widely-used internal package \"Monolith\" which has many dependencies. We want to break up this package into smaller, more granular packages with minimal impact on existing consumers.\r\n* To achieve this, we created a number of smaller packages \"MicroPackage1\", \"MicroPackage2\", .. \"MicroPackageN\" containing the various types that used to live in Monolith. We also added type forwards to Monolith.dll so that other packages that reference Monolith still work when installed in an app using the latest Monolith.\r\n\r\nWhere this breaks down is if an app using an _old_ version of Monolith installs a package which takes MicroPackage1 as a dependency. The problem is that the latest Monolith depends on MicroPackage1, but there is no way for MicroPackage1 to communicate that it is not compatible with older versions of Monolith.\r\n\r\nWe've seen this need come up in other cases as well, basically whenever we need to perform some kind of migration to a new package structure.\r\n\r\nIt would be nice to be able to express these incompatibilities in the nuspec such that consumers would find out about them upon trying to install the package.\r\n\r\nDetails (probably not relevant for this feature request):\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): GeneratePackageOnBuild target (with .nuspec file).\r\n\r\nNuGet version (5.7.0):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10\r\n\r\n"},{"Id":"14145095160","Type":"IssuesEvent","CreatedAt":"2020-11-10T17:16:16","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10249","RelatedDescription":"Opened issue \"When packing the nupkg had an error, the exit code is still 0 because of symbols packages\" (#10249) at NuGet/Home","RelatedBody":"Found this issue when checking https://github.com/NuGet/Client.Engineering/issues/547\r\n\r\nThe exitcode is 0 when IncludeSymbols=true, even if the pack on the nupkg failed.\r\n1. If we run command:\r\n`msbuild /t:pack .\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj -p:IncludeSymbols=true`\r\n\r\nThe output is:\r\n```\r\nC:\\repos\\NuGet.Client\\packages\\nuget.build.tasks.pack\\5.7.0\\build\\NuGet.Build.Tasks.Pack.targets(198,5): error NU5104: A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency \"Microsoft.VisualStudio.RpcContracts [16.5.33-alpha, )\" or update the version fie\r\nld in the nuspec. [C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj]\r\n\r\n  Attempting to build symbols package for 'NuGet.VisualStudio.Contracts.csproj'.\r\n  Successfully created package 'C:\\repos\\NuGet.Client\\artifacts\\NuGet.VisualStudio.Contracts\\16.0\\bin\\Debug\\NuGet.VisualStudio.Contracts.5.9.0.symbols.nupkg'.\r\nDone Building Project \"C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj\" (pack target(s)).\r\n\r\n\r\nBuild succeeded.\r\n\r\n\"C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj\" (pack target) (1) ->\r\n(GenerateNuspec target) ->\r\n  C:\\repos\\NuGet.Client\\packages\\nuget.build.tasks.pack\\5.7.0\\build\\NuGet.Build.Tasks.Pack.targets(198,5): error NU5104: A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency \"Microsoft.VisualStudio.RpcContracts [16.5.33-alpha, )\" or update the version f\r\nield in the nuspec. [C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\nThe exitcode is 0.\r\n\r\n2.If we run command:\r\n`msbuild /t:pack .\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj`\r\nThe output is:\r\n```\r\nC:\\repos\\NuGet.Client\\packages\\nuget.build.tasks.pack\\5.7.0\\build\\NuGet.Build.Tasks.Pack.targets(198,5): error NU5104: A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency \"Microsoft.VisualStudio.RpcContracts [16.5.33-alpha, )\" or update the version fie\r\nld in the nuspec. [C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj]\r\nDone Building Project \"C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj\" (pack target(s)) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj\" (pack target) (1) ->\r\n(GenerateNuspec target) ->\r\n  C:\\repos\\NuGet.Client\\packages\\nuget.build.tasks.pack\\5.7.0\\build\\NuGet.Build.Tasks.Pack.targets(198,5): error NU5104: A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency \"Microsoft.VisualStudio.RpcContracts [16.5.33-alpha, )\" or update the version f\r\nield in the nuspec. [C:\\repos\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Contracts\\NuGet.VisualStudio.Contracts.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\nThe exitcode is 1.\r\n"},{"Id":"14143328216","Type":"IssuesEvent","CreatedAt":"2020-11-10T15:08:53","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10248","RelatedDescription":"Opened issue \"Create guidelines on changing brokered services\" (#10248) at NuGet/Home","RelatedBody":"Update the [NuGet SDK docs](https://github.com/NuGet/NuGet.Client/blob/dev/docs/nuget-sdk.md), or create new docs so:\r\n\r\n1. People (both in the NuGet Client team and other contributors) creating pull requests have a guide for how they can \"correctly\" modify either of our 2 Contracts assemblies\r\n2. NuGet Client team members reviewing pull requests know what they should look for and can provide meaningful feedback\r\n\r\nI know VS's brokered service APIs and recommendations are moving fast, but the NuGet Client team has already had people outside the team contribute changes that needed changes to our RPC contracts, and those of us not working on the VS.OE implementation need guidance on how we can review these changes effectively.\r\n\r\nIn particular, I'd like guidance on when it's acceptable to modify an existing service version, and when it's necessary to create a new service version. When we create a new service version, how do we implement graceful fallback or functionality degradation. If we're creating a brand new service, what should we do regarding new clients connecting to old servers that don't implement the service. Guidance on when to use long lived proxies, and when to use short lived proxies. Guidance on events/callbacks."},{"Id":"14142054422","Type":"IssuesEvent","CreatedAt":"2020-11-10T13:34:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10245","RelatedDescription":"Closed issue \"The cake script is failed with NuGet.Protocol 5.8.0\" (#10245) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe):\r\n\r\nNuGet - latest version\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nAfter the release of the latest version of `NuGet.Protocol` our cake scripts began to crash with the following error:\r\n\r\n```\r\nError: NuGet.Resolver.NuGetResolverConstraintException: Unable to resolve dependency 'NuGet.Packaging'. Source(s) used: '/Users/runner/work/1/s/tools/Addins', '/Users/runner/.nuget/packages/', 'nuget.org'.\r\n  at NuGet.Resolver.PackageResolver.Resolve (NuGet.Resolver.PackageResolverContext context, System.Threading.CancellationToken token) [0x00544] in <0238e4cd771a452c873dc6fe9e575776>:0 \r\n  at Cake.NuGet.Install.NuGetPackageInstaller.Install (Cake.Core.Packaging.PackageReference package, Cake.Core.Packaging.PackageType type, Cake.Core.IO.DirectoryPath path) [0x00194] in <51706cc3401f4abd8da7efce44e907ce>:0 \r\n  at Cake.Core.Scripting.ScriptProcessor.InstallAddins (System.Collections.Generic.IReadOnlyCollection`1[T] addins, Cake.Core.IO.DirectoryPath installPath) [0x00095] in <352990cac81e4748b475ea51792a9c60>:0 \r\n  at Cake.Core.Scripting.ScriptRunner.Run (Cake.Core.Scripting.IScriptHost host, Cake.Core.IO.FilePath scriptPath, System.Collections.Generic.IDictionary`2[TKey,TValue] arguments) [0x00144] in <352990cac81e4748b475ea51792a9c60>:0 \r\n  at Cake.Commands.BuildCommand.Execute (Cake.CakeOptions options) [0x0003f] in <f7ab677035254e96ac028557e3c3278e>:0 \r\n  at Cake.CakeApplication.Run (Cake.CakeOptions options) [0x00015] in <f7ab677035254e96ac028557e3c3278e>:0 \r\n  at Cake.Program.Main () [0x000d1] in <f7ab677035254e96ac028557e3c3278e>:0 \r\n```\r\n\r\nWe used this dependency as follows:\r\n`#addin nuget:?package=NuGet.Protocol&loaddependencies=true`\r\n\r\nTo avoid this we had to explicitly specify the previous version of  `NuGet.Protocol`:\r\n`#addin nuget:?package=NuGet.Protocol&version=5.7.0&loaddependencies=true`\r\n\r\n### Sample Project\r\n\r\nhttps://github.com/microsoft/appcenter-sdk-unity/pull/477"},{"Id":"14141718799","Type":"IssuesEvent","CreatedAt":"2020-11-10T13:07:00","Actor":"Drake53","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10247","RelatedDescription":"Opened issue \"PackageReference no longer works after uploading to NuGet\" (#10247) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWhen I create a new package, I always add it to a local folder package source first.\r\nTo upload it to NuGet I normally upload it through the website, but since recently I have doing it using dotnet.exe nuget push:\r\n```csharp\r\nProcess.Start(\"dotnet\", $\"nuget push \\\"{package}\\\" --api-key {ApiKey} --source {sourceString}\");\r\n```\r\n\r\nI recently found out that for some reason, when my package is restored from my local folder package source, everything works correctly, but when it's restored from NuGet, visual studio/intellisense is unable to find the package's namespace and classes.\r\n\r\nThe .nupkg uploaded to NuGet is different from the original, because a file '.signature.p7s' is added. Everything else (when looking at the compressed/uncompressed sizes of the files in the .nupkg) appears to be the same.\r\n\r\nI tested this with v0.1.0, v1.0.0, v1.1.0, and v1.1.1.\r\nOnly v0.1.0 does not have this problem (although it does also have the .signature file).\r\nI think for v1.0.0 I still used the website to upload the package, so I don't think it's somehow caused by using dotnet.exe instead.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new project with <PackageReference Include=\"War3Net.IO.Mpq\" Version=\"1.1.1\" />\r\n\r\n2. After the package is restored, 'using War3Net.IO.Mpq' gives error CS0246: type or namespace could not be found.\r\n\r\n3. Delete the packages cache and restore the package (see attached file) from a local folder instead of from NuGet.\r\n\r\n4. After the package is restored, the namespace is found and no longer gives an error.\r\n\r\n\r\n\r\nFrom what I can tell, the signature somehow causes this issue, since that's the only difference between my local .nupkg file and the one uploaded on NuGet, but at the same time this signature file appears to exist in every version on NuGet, but not every version has this issue.\r\n\r\nDoes anyone know why this is happening and how this can be fixed? Thank you.\r\n\r\n[War3Net.IO.Mpq.1.1.1.zip](https://github.com/NuGet/Home/files/5517411/War3Net.IO.Mpq.1.1.1.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-11-11T05:30:38.8397541Z","RunDurationInMilliseconds":1832}