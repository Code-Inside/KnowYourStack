{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"41888530658","Type":"PullRequestEvent","CreatedAt":"2024-09-12T23:51:11","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10179","RelatedDescription":"Merged pull request \"Set `SendCertificateChain` option in KeyVaultReader to enable SN+I authentication\" (#10179) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Set the ClientCertificateCredentialOptions with SendCertificateChain when the KeyVaultConfiguration is configured with SendCertificateChain\r\n"},{"Id":"41844996340","Type":"PullRequestEvent","CreatedAt":"2024-09-11T20:27:37","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10180","RelatedDescription":"Merged pull request \"Additional config changes to support AccountDeleter migration\" (#10180) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5586 alongside https://github.com/NuGet/NuGetGallery/pull/10165.\r\n\r\nThis completes the migration for `AccountDeleter`--there was a null ref issue with configs in `AccountDeleter`'s `Job`'s base classes `ValidationJobBase` (which configures validation storage access) and `JsonConfigurationJob` (which configures feature flag storage access). Neither storage accounts are used by `AccountDeleter` and recent changes to `CloudBlobClientWrapper` had removed a tolerance for nulls in the connection strings. An experimental change to `CloudBlobWrapperClient` sought to address this but wasn't successful, but left a BOM removal in code which is an acceptable push. FYI @agr.\r\n\r\nThe `app.config` change is necessary for a break introduced in our deployment pipeline. I will discuss it in the context of an internal PR on this."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"41887775866","Type":"IssuesEvent","CreatedAt":"2024-09-12T22:59:29","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13785","RelatedDescription":"Opened issue \"Consider supporting NoWarn on `PackageVersion` items\" (#13785) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nIt might be easier to suppress a warning on a PackageVersion rather than all PackageReferences when a repo is using CPM.  If this is possible (merely join and append the values) I think it would allow for a better user experience.\n\n### Additional Context and Details\n\nHere's the change which provoked this suggestion: https://github.com/gitextensions/gitextensions/pull/11911"},{"Id":"41886937530","Type":"IssuesEvent","CreatedAt":"2024-09-12T22:10:35","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13445","RelatedDescription":"Closed issue \"allocation: nuget.protocol.dll!NuGet.Protocol.HttpCacheUtility+<CreateCacheFileAsync>d__.MoveNext|nuget.protocol.dll!NuGet.Protocol.PackageDependencyGroupConverter.ReadJson\" (#13445) at NuGet/Home","RelatedBody":"Internal issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1864821\r\nCode in: \r\n\r\nSome ideas: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Converters/PackageDependencyGroupConverter.cs\r\n\r\n* Avoid using LoadJson, iterate by token.\r\n* Intern the dependency groups /deduplicate\r\n* Ensure GetShortFolderName is not computed continously. The framework parsing tends to be cached, but another ideas to cache that as well."},{"Id":"41850291119","Type":"IssuesEvent","CreatedAt":"2024-09-12T00:57:49","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13784","RelatedDescription":"Opened issue \"NuGetAuditSuppress is not transitive across project references\" (#13784) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, NuGet.exe\n\n### Product Version\n\n9.0.0-preview.7.24405.7\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nAdd `NuGetAuditSuppress` to a project.  Reference that project from another project.\r\n\r\nThe reference flows transitively, but the suppression does not.\r\n\r\nYou could workaround it by applying the NuGetAuditSuppress item globally, but that might not be what you want, since it would apply to all references instead of just the one.\r\n\r\nI understand this might be by-design but it makes managing the reference more difficult.  Ideally the suppression could flow with the reference just like the package reference itself flows.\r\n\r\nI'm not certain about what the experience should be when packed, but I could see a scenario for allowing a suppression to be honored by package consumers as well - with an override.\n\n### Verbose Logs\n\n_No response_"},{"Id":"41839192876","Type":"IssuesEvent","CreatedAt":"2024-09-11T17:07:40","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13783","RelatedDescription":"Opened issue \"NuGet Audit only evaluates the frameworks actually targeted by libraries, but compatible frameworks may have issues\" (#13783) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nConsider a package that only targets `netstandard2.0`.  When building and restoring that package, nuget audit will only evaluate the dependencies for `netstandard2.0`, however the package's dependencies might reference additional packages with vulnerabilities on compatible target frameworks.\r\n\r\nThis creates a \"blind spot\" for a library package author.  There's no signal that their package might raise audit warnings when consumed by users.\r\n\r\nOne way to handle this would be to tell NuGet to add restore passes for every distinct compatible target framework mentioned in the dependencies references.\r\n\r\nSo if the closure of package references for the `netstandard2.0` package also referenced `net47;net6.0;net8.0` then NuGet could tell the user this - or even automatically restore for those for the purpose of audit (but exclude from packing).\r\n\r\nI know this is a significant ask, and there is a workaround in that the library author could create a test project targeting every compatible framework, but I did want to raise this as it came up when I was working through enabling audit on a few repos.  I saw that the source a flagged dependency for a test was often a product library that wasn't flagged because it targeted older frameworks.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"41838866091","Type":"IssuesEvent","CreatedAt":"2024-09-11T16:56:43","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13782","RelatedDescription":"Opened issue \"Project argument should be optional to `nuget why`\" (#13782) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nWhen running `nuget why` I always need to specify a project file.  Other `dotnet` commands like `build`, `restore`, `clean`, `publish` do not require this.\n\n### Desired Behavior\n\nUse the same heuristic for locating a project or solution file when running `nuget why` and one is not specified.\n\n### Additional Context\n\n_No response_"},{"Id":"41838339136","Type":"IssuesEvent","CreatedAt":"2024-09-11T16:39:26","Actor":"ericstj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13781","RelatedDescription":"Opened issue \"Distinguish between package and project references in `nuget why`\" (#13781) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nWhen running `nuget why` on a project to find references to a dependency I see coloration for the target dependency, but not for projects vs packages.\n\n### Desired Behavior\n\nIt would help to see a visual distinction between projects and packages as that would indicate which are in the control of the author vs external.\n\n### Additional Context\n\n_No response_"},{"Id":"41835825590","Type":"IssuesEvent","CreatedAt":"2024-09-11T15:24:39","Actor":"jaredpar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13780","RelatedDescription":"Opened issue \"The addition of audit sources does not change audit results\" (#13780) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100-preview.7.24407.12\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen the `auditSources` is changed in a NuGet.config this does not invalidate previous restores. That means even when you explicitly add nuget.org and re-run `dotnet restore` it does not actually do a restore thus the new audit source is not considered and the build produces false negatives. he only way I've found to force it to re-restore is to delete the obj directories so that restore has to run.\r\n\r\nTo reproduce:\r\n\r\n```cmd\r\n> dotnet new console\r\n> cp ../NuGet.config . (see below) \r\n> dotnet add package Microsoft.Build.Tasks.Core\r\n> dotnet build\r\n```\r\n\r\nNow edit the NuGet.config to add the following audit sources\r\n\r\n```xml\r\n  <auditSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </auditSources>\r\n```\r\n\r\nAt this point restores should be firing for a CVE against [System.Formats.Asn1](https://github.com/advisories/GHSA-447r-wph3-92pm) but if you run restore nothing is reported. \r\n\r\n```cmd\r\n> dotnet restore\r\nRestore complete (0.2s)\r\n\r\nBuild succeeded in 0.5s\r\n```\r\n\r\nTo get the NU1903 to trigger you have to explicitly delete the obj directory\r\n\r\n```cmd\r\n> rm -re -fo obj\r\n> dotnet restore\r\nRestore succeeded with 1 warning(s) in 0.4s\r\n    C:\\Users\\jaredpar\\temp\\console\\console.csproj : warning NU1903: Package 'System.Formats.Asn1' 8.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\n```\r\n\r\nThis is the initial NuGet.config to use:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-eng\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\r\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\r\n    <add key=\"dotnet8\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\" />\r\n    <add key=\"dotnet9\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\" />\r\n    <add key=\"dotnet9-transport\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9-transport/nuget/v3/index.json\" />\r\n    <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" />\r\n    <add key=\"dotnet-libraries\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-libraries/nuget/v3/index.json\" />\r\n    <add key=\"dotnet-libraries-transport\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-libraries-transport/nuget/v3/index.json\" />\r\n  </packageSources>\r\n  <disabledPackageSources>\r\n    <clear />\r\n  </disabledPackageSources>\r\n</configuration>\r\n\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"41835368110","Type":"IssuesEvent","CreatedAt":"2024-09-11T15:14:11","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13779","RelatedDescription":"Opened issue \"[Feature] Allow developers to opt-in for SemVer-compatible dependency resolution\" (#13779) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet SDK\r\n\r\n### The Elevator Pitch\r\n\r\nNuGet is one of the few modern package managers that does not allow developers to automatically resolve dependencies based on Semantic Versioning (SemVer) compatibility. Many other package managers, such as npm and cargo, automatically install the latest available version within a SemVer-compatible range for both top-level and transitive dependencies.\r\n\r\nI propose that NuGet offer developers an option to opt-in to a SemVer-compatible resolution. This would allow:\r\n\r\n- Automatic installation of the latest versions of dependencies that are compatible with a defined SemVer range.\r\n- Consistent behavior with other package managers that already follow this approach.\r\n- More predictable updates, ensuring smoother integration of transitive dependencies as well.\r\n\r\nBenefits:\r\n\r\n- Reduces the burden on developers to manually update packages while ensuring compatibility.\r\n- Addresses many of the common challenges related to dependency resolution in NuGet, improving developer experience.\r\n\r\nIn addition, new shorthand syntax such as `^X.Y.Z` would help with consistency of other paradigms.\r\n\r\nRelated to: https://github.com/NuGet/Home/issues/5553 (But starting a new issue as there are over a hundred comments and this is a clearer definition of what to do)\r\n\r\nExpectation:\r\n\r\nI can opt-in via some property like `<NuGetResolutionMode>` or `<EnableSemVerResolution>`\r\n\r\nI can use caret syntax ^ for SemVer compatible updates i.e. \r\n\r\n`<PackageReference Include=\"Newtonsoft.Json\" Version=\"^12.0.0\" />`\r\n\r\nI can use tilde syntax for minor version locking i.e.\r\n\r\n`<PackageReference Include=\"Newtonsoft.Json\" Version=\"~12.0.0\" />`\r\n\r\nI can use the existing range syntax for explicit range >=, <= i.e.\r\n\r\n`<PackageReference Include=\"Newtonsoft.Json\" Version=\"[12.0.0, 13.0.0)\" />`\r\n\r\nBehavior Expectation:\r\n\r\nTop-level and transitive dependencies should be updated within the allowed SemVer compatible ranges automatically.\r\n\r\nAny direct or transitive dependency within the defined SemVer range should be installed or updated to the latest compatible version when running `restore` or other nuget installation operations.\r\n\r\nIf users prefer to use the old behavior for compatibility reasons / exact versioning, they can do so by keeping the mode or disabling the property.\r\n\r\nPlease 👍 or 👎 this comment to help us with the direction of this feature & leave as much feedback/questions/concerns as you'd like on this issue itself and we will get back to you shortly.\r\n\r\nThank You 🎉"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-13T03:30:23.6920158Z","RunDurationInMilliseconds":819}