{"Data":{"Blog":{"FeedItems":[{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"28130083778","Type":"PullRequestEvent","CreatedAt":"2023-03-31T21:44:48","Actor":"theot12","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9445","RelatedDescription":"Merged pull request \"Fix accessibility issue - role required when aria-expanded attribute is used\" (#9445) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9415\r\n\r\nAdd a role to the `div` elements with the `aria-expanded` attribute. The role `form` is likely the best option in these scenarios."},{"Id":"28102588739","Type":"PullRequestEvent","CreatedAt":"2023-03-30T20:46:40","Actor":"theot12","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9446","RelatedDescription":"Opened pull request \"Fix accessibility issue - add missing header tag\" (#9446) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9417\r\n\r\n\"Select Scopes\" and \"Select Packages\" headings on the API Keys page were missing header tags. Added `h4` tag to both. "},{"Id":"28101129183","Type":"PullRequestEvent","CreatedAt":"2023-03-30T19:35:54","Actor":"theot12","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9445","RelatedDescription":"Opened pull request \"Fix accessibility issue - role required when aria-expanded attribute is used\" (#9445) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9415\r\n\r\nAdd a role to the `div` elements with the `aria-expanded` attribute. The role `form` is likely the best option in these scenarios."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"28131749517","Type":"IssuesEvent","CreatedAt":"2023-04-01T00:35:49","Actor":"dainizzz","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8420","RelatedDescription":"Closed issue \"Suggestion:  NuGet config -list command to list configuration file locations\" (#8420) at NuGet/Home","RelatedBody":"Similar to how [`locals -list` command](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-locals#options) lists local paths, it would be handy if a `config -list` command listed [NuGet configuration file locations](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#config-file-locations-and-uses)."},{"Id":"28119060394","Type":"IssuesEvent","CreatedAt":"2023-03-31T13:00:56","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12447","RelatedDescription":"Closed issue \"After migrating from package.config to package reference, properties are not shown on right click of referred nuget package.\" (#12447) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nOther/NA\r\n\r\n### Product Version\r\n\r\nVisual studio 2019\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nRight click on a projects package.config file and you get an option to migrate from package.config to package reference, click it.\r\n\r\n![image](https://user-images.githubusercontent.com/41225827/220343263-8ea14d93-b6ec-4a6b-8ece-05fd4f7a6918.png)\r\n\r\nOnce migration is done, go to any rereferred nuget package in References and try to see its properties, you will find everything as black i.e. no properties shown.\r\n\r\n![image](https://user-images.githubusercontent.com/41225827/220343668-21e29bee-fadd-4c88-8d29-323aeeb80f8d.png)\r\n\r\nI am not able to see any properties that I was able to see when package.config way of rereferring nuget package was used.\r\nCan somebody help me out on this?\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"28105695916","Type":"IssuesEvent","CreatedAt":"2023-03-31T00:17:33","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12428","RelatedDescription":"Closed issue \"[Bug Bash] The transitive packages will not disappear in the “Installed” tab after uninstalling the top-level package\" (#12428) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nDev\\6.6.0.19\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1. Create a C# Console App (.NET Core 7.0) project in VS.\r\n2. Right-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’.\r\n3. Click “Browse” tab, search a package (e.g. “Microsoft.EntityFrameworkCore”) that has dependencies and click the “Install” button (↓) on the right.\r\n4. Click “OK” button in the “Preview Changes” dialog and click “I Accept” button in the “License Acceptance” dialog.\r\n5. Click “Installed” tab and observe the package list.\r\n6. Uninstall the top-level package (e.g. “Microsoft.EntityFrameworkCore”) and observe the package list in “Installed” tab.\r\n\r\n#### Expected:\r\nThe transitive packages would disappear in the “Installed” tab.\r\n\r\n#### Actual:\r\nThe transitive packages will not disappear in the “Installed” tab as below.\r\n![image](https://user-images.githubusercontent.com/20632625/218050492-74e607bb-ba31-4472-a479-1384ade7c6ba.png)\r\n\r\n#### Notes:\r\nIt doesn't repro on Dev\\6.5.0.107, repro on Dev\\6.5.0.127."},{"Id":"28105695859","Type":"IssuesEvent","CreatedAt":"2023-03-31T00:17:33","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12360","RelatedDescription":"Closed issue \"The count of the transitive packages never changes in the “Installed” tab after installing transitive packages \" (#12360) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nNuGet Client Dev\\6.5.0.140\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps:\r\n1. Create a .NET Core Console App project via VS.  \r\n2. Right-click the project in Solution Explorer and select ‘Manage NuGet Packages…’ menu item to open PM UI.  \r\n3. Click “Browse” tab, search a package (e.g. “Microsoft.EntityFrameworkCore”) that has dependencies, select a package version (e.g. 6.0.4) in the \"Version\" drop-down list in the right panel and click the “Install” button on the right.  \r\n4. Click “OK” button in the “Preview Changes” dialog and click “I Accept” button in the “License Acceptance” dialog.\r\n5. Switch to the “Installed” tab, and Install a transitive package “Microsoft.Extensions.Logging” in the package list.\r\n\r\n#### Expected:\r\nThe count of the transitive packages should show correctly (it should be 12 for this example).\r\n\r\n#### Actual:\r\nThe count of the transitive packages never changes in the “Installed” tab (it showed 13 for this example) as below screenshot.\r\n![image](https://user-images.githubusercontent.com/40230425/212027396-429aece4-6814-4720-88ed-286ec8df147d.png)\r\n#### Notes:\r\n1. The count never changes no matter how many transitive packages are installed.\r\n2. It started from Dev\\6.5.0.129.\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"28105695756","Type":"IssuesEvent","CreatedAt":"2023-03-31T00:17:32","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12333","RelatedDescription":"Closed issue \"The feature “Transitive Package” doesn’t work in the “Installed” tab until reopening the .NET SDK style project  \" (#12333) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.5.0.135\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n##### Repro Steps:  \r\n\r\n1. Set the NUGET_TRANSITIVE_DEPENDENCIES_IN_PMUI environment variable to 1. \r\n\r\n2. Create a .NET Core Console App project via VS.  \r\n3. Right-click the project in Solution Explorer and select ‘Manage NuGet Packages…’ menu item to open PM UI.  \r\n 4. Click “Browse” tab, search a package (e.g. “Microsoft.EntityFrameworkCore”) that has dependencies, select a package version “6.0.4” in the \"Version\" drop-down list in the right panel and click the “Install” button on the right.  \r\n 5. Click “OK” button in the “Preview Changes” dialog and click “I Accept” button in the “License Acceptance” dialog.  \r\n 6. Click “Installed” tab. \r\n\r\n##### Expected:  \r\n\r\nThe feature “Transitive Package” works in the “Installed” tab. “Transitive packages” label is expanded by default and all the transitive packages showed in the “Transitive packages” list (under the “Top-level packages” list). \r\n\r\n##### Actual:  \r\n\r\nThe feature “Transitive Package” doesn’t work in the “Installed” tab until reopening the .NET SDK style project as below. \r\n![MicrosoftTeams-image](https://user-images.githubusercontent.com/84695155/209311969-03dce789-008c-415d-a22b-6c2a14559400.png)\r\n\r\n\r\n##### Note: \r\n\r\n1. The feature “Transitive Package” will work in the “Installed” tab after reopening the .NET SDK style project and PM UI. \r\n2. Started to repro from Dev\\6.5.0.117.\n\n### Verbose Logs\n\n_No response_"},{"Id":"28100149696","Type":"IssuesEvent","CreatedAt":"2023-03-30T18:48:22","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12511","RelatedDescription":"Closed issue \"Así \" (#12511) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nBueno \n\n### Additional Context and Details\n\nJajaja "},{"Id":"28090831791","Type":"IssuesEvent","CreatedAt":"2023-03-30T12:58:14","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11600","RelatedDescription":"Closed issue \"[DCR]: Unnecessary 401 Unauthorized api calls made during package restore\" (#11600) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nWe host an authenticated nuget feed for our organization using Artifactory. We noticed in the logs an excessive amount of 401 Unauthorized responses originating from `dotnet restore` throughout the org. It appears that every api call is being made twice, first without authentication, then again with authentication. This doubles the number of api calls make during a package restore. \n\n### Desired Behavior\n\nI'd like to force nuget to always send credentials to our feed, there is no need to make the api calls twice. This slows down the restore process, places additional load on the supporting infrastructure and makes monitoring more difficult. \n\n### Additional Context\n\nOther package management tools will always send credentials if configured to do so, they do not 401 first. "},{"Id":"28090788908","Type":"IssuesEvent","CreatedAt":"2023-03-30T12:56:48","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12517","RelatedDescription":"Opened issue \"EPIC: Reduce HTTP 401 responses from servers\" (#12517) at NuGet/Home","RelatedBody":"## Description\r\n\r\nFrom https://github.com/NuGet/Home/issues/11600, the way NuGet currently works is that every URL requested will first make an unauthenticated request, the server responds with an HTTP 401, then NuGet will  retry the same URL, this time with credentials.\r\n\r\n```text\r\nGET /artifactory/api/nuget/v3/nuget HTTP/1.1 401 \r\nGET /artifactory/api/nuget/v3/nuget HTTP/1.1 200\r\nGET /artifactory/api/nuget/v3/nuget/registration-semver2/awssdk.core/index.json HTTP/1.1 401\r\nGET /artifactory/api/nuget/v3/nuget/registration-semver2/awssdk.core/index.json HTTP/1.1 200\r\nGET /artifactory/api/nuget/v3/nuget/registration-semver2/Download/awssdk.core/3.3.25.1 HTTP/1.1 401\r\nGET /artifactory/api/nuget/v3/nuget/registration-semver2/Download/awssdk.core/3.3.25.1 HTTP/1.1 200\r\n```\r\n\r\n## Issues\r\n\r\n* https://github.com/NuGet/Home/issues/12514\r\n* https://github.com/NuGet/Home/issues/12516\r\n* https://github.com/NuGet/Home/issues/12451\r\n\r\n"},{"Id":"28090643550","Type":"IssuesEvent","CreatedAt":"2023-03-30T12:51:43","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12516","RelatedDescription":"Opened issue \"NuGet should make a HTTP request to \"base\" URLs, even when http cache is fresh\" (#12516) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nhttps://github.com/NuGet/Home/issues/12514 has a limitation, due to HttpClientHandler's design, that creds are only cached if NuGet actually makes at least one HTTP request to a \"base\" URL. In case that the service index is sufficiently fresh in NuGet's http cache, NuGet currently will not send an HTTP request for this URL, and therefore all package specific URLs with not be pre-authed.\n\n### Desired Behavior\n\n## Design ideas\r\n\r\nThere are two designs that I can think of quickly:\r\n\r\n1. Always request the service index at least once\r\n2. Make a request to service index entry \"base\" URLs\r\n\r\n### Always request the service index at least once\r\n\r\nHave NuGet skip the http cache the first time the service index is needed.\r\n\r\nThis will work for servers whose service index entiries are all subdirectories of the URL the service index is at. However, this won't work for Azure Artifacts'current implementation where some parts of the URL are changed into GUIDs. I don't know if there are any other server implementations where some resources are at completely different endpoints, similar to how nuget.org have static files on api.nuget.org, and have different servers for search and push.\r\n\r\n### Make a request to service index entry \"base\" URLs\r\n\r\nSay a feed's service index is https://nuget.test/v3/index.json, and it lists https://nuget.test/v3/flat/ as the URL for the `PackageBaseAddress` resource. NuGet today doesn't make a request directly to https://nuget.test/v3/flat/, but this idea's proposal is that we start requesting this URL.  This way, we can work withing HttpClientHandler's PreAuth design, and get the cred cache populated.\r\n\r\nNuGet will have to ignore all errors when making this HTTP request, as this URL will likely return \"not found\" or other kind of \"user error\" responses, since this is currently not a URL that is used, or expected. As long as the server responds with 401 on an unauthenticated request to this URL, it will allow the client to populate the pre-auth cred cache, so it doesn't matter if they later return an error. If the server doesn't respond with 401 to unauthenticated requests, then it's a server perf issue, as NuGet will continue to make unauthenticated requests to package-specific URLs, as it does today.\r\n\r\nThis means that in a typical restore, there will be one more URL requested than is currently requested today. However, that one new URL request will prevent all the flat container unauthenticated HTTP requests, and therefore drastically reduce the total number of HTTP requests when many packages are restored. The worst case is a single package restore, where the package version doesn't exist on the server, this will result in one more HTTP request than currently is made. A single package restore where the package does exist, or two package restore where neither packages exist on the server, the number of requests will be the same as current NuGet. All other scenarios this proposal will reduce the number of total HTTP requests received by the server.\r\n\r\nHowever, I've started a discussion with the System.Net team to help them understand our requirements, as a client app. It may be possible in some future version of .NET to pre-populate a URL prefix with some credential information, so that the additional URL request that this is proposing is no longer required.\r\n\r\n## Recommendation\r\n\r\nThe first option is certainly simpler to explain, simpler to document, simpler to implement (from a client point of view), but it imposes additional restrictions on server implementers, as they will no longer have the flexibility to put different endpoints at different URLs (without using reverse proxying, so it's hidden from NuGet client).\r\n\r\nThe second option provides more flexibility, but as described, but adds more complexity into the client, and requires servers to support at least two more endpoints than are currently required today (PackageBaseAddress and RegistrationBaseUrl, when no package ids or index.json are appended).\r\n\r\n## Implementation considerations\r\n\r\nThis will work with no problem for credentials saved in nuget.config, which are always used no matter how long the process runs for. However, for credential provider supplied auth tokens, which probably have a \"short\" validity duration, once the token expires, it would be necessary to re-auth to the base URL, otherwise the HttpClientHandler's cred cache will have the wrong value. The implementation will need to invalidate any memory that it previously pre-authed some URL(s), so that the base URL(s) get pre-authed again, so that HttpClient has the correct credentials cached.\r\n\r\nI believe that technically only the RegistrationBaseUrl, PackageBaseAddress, and push (PackagePublish) URLs need to be pinged to warm the pre-auth cache. Due to how search query URLs are generated, HttpClient's PreAuthenticate will work without modification (at worst the first search will 401, but all future searches will use the cached cred).\n\n### Additional Context\n\n_No response_"},{"Id":"28089414437","Type":"IssuesEvent","CreatedAt":"2023-03-30T12:06:05","Actor":"JanKrivanek","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12515","RelatedDescription":"Opened issue \"Add ability to preempt nuget search with local folder ('NuGetPrefetchFolder')\" (#12515) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nIdea brainstormed by @zivkan\r\n\r\nFor manuall or automated ways of testing multi-project changes, that are tight together via PackageReference (e.g. project A, references project B as nuget, while developer needs to perform orchestrated change to both) the existing functionality of `NuGetFallbackFolder` might be tweaked and reused for easy testing of validity of the nuget package without the need to 'hacking' nuget cache.\r\n * a nuget of B would be build\r\n * added to relative `NuGetPrefetchFolder` (that one would not get synced to global cache - same as `NuGetFallbackFolder`)\r\n * restore would check the `NuGetPrefetchFolder` first and get package from there if available\r\n * other unrelated project would get the B from global cache (skiping the `NuGetPrefetchFolder`)\r\n\r\nIf functionality of `NuGetFallbackFolder` would be reused, then possibly a CLI support for equivalent of `nuget add` would need to be added - in order to be able to unzip and push a local nuget to local folder in v3 layout.\r\n\r\nOther question is the location of `NuGetPrefetchFolder` - is it fixed or configurable via packages.config? It needs to be per 'build-bundle', not global to the machine - as we want to avoid 'poisoning' of nugets for unrelated builds\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"28088076851","Type":"IssuesEvent","CreatedAt":"2023-03-30T11:10:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12514","RelatedDescription":"Opened issue \"NuGet should use HttpClientHandler.PreAuthentication to reduce HTTP 401's\" (#12514) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe, NuGet SDK\n\n### Current Behavior\n\nRelated to https://github.com/NuGet/Home/issues/11600, NuGet is currently making an unauthenticated HTTP request to every URL. For private feeds, the server then responds with HTTP 401, and then NuGet (technically HttpClientHandler does it automatically, so it's completely hidden from NuGet) resends with credentials.\r\n\r\nThis means that at least 50% of all HTTP requests NuGet sends to a server results in HTTP 401 responses.\r\n\r\nNote that PreAuthenticate has a limitation/design choice where a \"base\" URL needs to be authenticated first, and then any URL that matches the rough equivilent of `url.StartsWith(baseUrl.SubString(0, baseUrl.IndexOfLast(\"/\"))` will re-use those creds.\r\n\r\nTherefore, enabling PreAuthenticate without any other changes means that it will only work when:\r\n1. NuGet does not use a cached service index\r\n2. The server makes all resources (listed in the service index) start with the same URL that the service index itself is in.\r\n\r\nIn particular, this means that Azure Artifacts' current implementation where customers write a URL with \"friendly\"/alias names in their nuget.config, but then the service index changes parts of the URL to canonical GUIDs, will not meet HttpClientHandler's PreAuthenticate design.\r\n\r\nHowever, other server implementations already meet the second requirement above, so PreAuthenticate, without any other changes to NuGet, will immediately benefit those servers (when NuGet doesn't use a cached service index, which has a different tracking issue).\n\n### Desired Behavior\n\nDramatically reduce the number of HTTP 401's the server has to send back to the client.\n\n### Additional Context\n\n_No response_"},{"Id":"28087673808","Type":"IssuesEvent","CreatedAt":"2023-03-30T10:54:32","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/12451","RelatedDescription":"Reopened issue \"Allow configuring sources as authentication required or preferred\" (#12451) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, Visual Studio Package Management UI, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nToday, the NuGet tooling relies on a 401 challenge to understand whether a source needs auth. \r\nThis adds a roundtrip for a few of the urls hit the client. \r\n\r\nIt would be nice, if NuGet would just try to acquire credentials for certain feeds as marked by the user. \r\n\r\nThis would mean no wasted requests and allow for the source to cleanly know the difference between an authenticated and unauthenticated user from the onset and maybe build some experiences of off that.\n\n### Additional Context and Details\n\nThe behavior today, only as needed works great when a feed is either fully public, no 401 challenges, or fully private, 401 challenge on every url, but it's not really smooth for sources that may for example be only partially public. \r\n\r\nWhen I'm calling the source public/private, I'm only referring to the restore side. Push tends to require authn even on feeds that are public for restore."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"27557007112","Type":"IssuesEvent","CreatedAt":"2023-03-07T18:44:23","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Closed issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27423335680","Type":"IssuesEvent","CreatedAt":"2023-03-01T18:16:58","Actor":"dnfadmin","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/68","RelatedDescription":"Opened issue \"Moving to the new .NET Foundation CLA service\" (#68) at NuGet/Announcements","RelatedBody":"Hello everyone\r\nThe .NET Foundation is transitioning to a new CLA service and I'm posting here to let you know it's happening. Some background info:\r\n\r\nThe new CLA service is based off of https://github.com/microsoft/ContributorLicenseAgreement, except it uses the dotnet-policy-service app\r\n\r\n- Current contributors do not need to sign the CLA again\r\n- The CLA agreement itself is not changing\r\n- As part of the install/configuration process, the following work items will be completed\r\n\r\n1. Create a .github repo if it doesn't exist already\r\n2. Install the dotnet-policy-service app\r\n3. Create PRs for the platformcontext.xml and cla.yml files\r\n4. Disable the existing CLA webhook\r\n5. Push the PRs to enable the new CLA service\r\n\r\nThat's all there is to it. I'll update this issue once the work is complete\r\n\r\nThanks\r\nChris\r\n.NET Foundation Operations team"},{"Id":"27174265829","Type":"IssuesEvent","CreatedAt":"2023-02-17T22:51:59","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/60","RelatedDescription":"Closed issue \"NuGet.org migration towards a new multi-CDN infrastructure\" (#60) at NuGet/Announcements","RelatedBody":"In the coming weeks, nuget.org will be migrating towards a new multi-CDN infrastructure that will improve the experience of our users. This change allows our team flexibility to switch to a back-up provider in the case that one CDN is down, which will broaden coverage for our users.\r\n\r\nSome changes are coming for older TLS cipher suites, which may result in connectivity issues. From our data we believe this will affect only a small percentage of requests. We will be monitoring all feedback channels during the migration to assess impact and adjust our roll-out timeline as needed.\r\n\r\nBelow, we provide resources to determine whether you will be affected by this change. This utilizes the [.NET CLI](https://dotnet.microsoft.com/) to install a package from our pre-production (INT) environment which tests connectivity:\r\n\r\n\r\n```\r\nmkdir cdn-test\r\ncd cdn-test\r\ndotnet new classlib\r\ndotnet add package BaseTestPackage.NetStandard --source https://apiint.nugettest.org/v3/index.json\r\n```\r\n\r\nIf you are experiencing connectivity issues while connecting to nuget.org or restoring packages from https://api.nuget.org/v3/index.json, such as:\r\n\r\n\"The SSL connection could not be established\"\r\n\r\nPlease ensure that TLS 1.2 and any of the following cipher suites have been enabled on your machine:\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\r\n\r\nIf you have any questions, do reach out to us at support@nuget.org or by commenting on the discussion issue: NuGet/Home#11058"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1631370937248481281","CreatedAt":"2023-03-02T19:08:35+00:00","UserScreenname":"nuget","Text":"Your package's README is your chance to showcase your hard work and make a great first impression. Here are some ti… https://t.co/SU8480LbkL","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":24,"FavoriteCount":12,"RawContent":null},{"Id":"1630609651275382793","CreatedAt":"2023-02-28T16:43:30+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.5 📦\n\n🧰 Visual Studio Support for Central Package Management\n🔁 Use server-provided Retry-After… https://t.co/FsMPajDT1u","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":26,"FavoriteCount":8,"RawContent":null},{"Id":"1625612488216649729","CreatedAt":"2023-02-14T21:46:34+00:00","UserScreenname":"nuget","Text":"📦 Search by Target Framework on https://t.co/F9kiKfvqkS 📦\n\n🔭 Improved package compatibility discovery\n📊 New sorts a… https://t.co/Xojm66sLar","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":35,"FavoriteCount":22,"RawContent":null},{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":128,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":47,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2023-04-02T03:30:22.9178203Z","RunDurationInMilliseconds":1199}