{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12482133297","Type":"PullRequestEvent","CreatedAt":"2020-05-30T01:30:47","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8011","RelatedDescription":"Merged pull request \"Add AB Testing to reverse dependencies feat (without view) \" (#8011) at NuGet/NuGetGallery","RelatedBody":"\r\n* Implemented AB testing though the information from the DB does not display on results page yet\r\n\r\nProgress on: NuGet/Engineering#3143"},{"Id":"12481079918","Type":"PullRequestEvent","CreatedAt":"2020-05-29T21:36:50","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8016","RelatedDescription":"Opened pull request \"[ReleasePrep][2020-05-29] RI dev to master\" (#8016) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12481036413","Type":"PullRequestEvent","CreatedAt":"2020-05-29T21:30:09","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8015","RelatedDescription":"Merged pull request \"Fix for statistics not refreshing\" (#8015) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/3201."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12491729110","Type":"IssuesEvent","CreatedAt":"2020-06-01T05:10:34","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9632","RelatedDescription":"Opened issue \"Tracker public API changes better\" (#9632) at NuGet/Home","RelatedBody":"The Roslyn team have a public API analyzer. See: https://github.com/dotnet/roslyn-analyzers/blob/master/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md\r\n\r\nFor NuGet projects that are packed, we should track public API changes, to minimise breaking existing APIs, and be more intentional about adding new APIs.\r\n\r\nIn short, the way it works is the analyzer expects two files. `PublicAPI.Shipped.txt` and `PublicAPI.Unshipped.txt`. These files list all the public APIs in a project, and when the analyzer runs, it generates its own list of all public APIs in the project and compares to the union of all the APIs listed in the two text files. If there are any differences (public API in code not listed in files, or API listed in file not found in the code), it generates a warning, which we elevate to an error. \r\n\r\nThe analyzer does not support having APIs listed in the file that only appear in some TargetFrameworks and not others, so instead a seperate set of files are used for each TFM. This means the files are mostly duplicates of each other, with only small differences where the public API surface is different. It also means when there are changes to the public API surface, for example a new API that is added to all project TFMs, multiple `PublicApi.*.txt` files needs to be modified.\r\n\r\nHow we use the `Shipped` verses `Unshipped` files is to our discression. The analyzer has a fix which will add new APIs to the `Unshipped` file. It appears the intention is to manually move the contents of the file to the `Shipped` file when the assembly ships, so it's easier to track new APIs that have been added, but not yet shipped, in case the API should be changed before customers start using it.\r\n\r\nTherefore, I propose that we use this feature with the following workflow:\r\n\r\n* All projects that set `PackProject` to `true` use the analyzer\r\n  * `NuGet.CommandLine` will be excempt, as one of its distribution methods is as a nupkg, but it is not intended to be a library.\r\n  * Currently, some of our test utility projects are packed as nupkgs. I don't know the reason, but I do not believe we should support backwards compatibility for these projects\r\n* When a new API is added, use the code fix to add the new API to the appropriate `PublicAPI.Unshipped.txt` file(s).\r\n* When doing a code revew, a very strong justification is needed to remove any public APIs that need to be removed from `PublicAPI.Shipped.txt`.\r\n* When doing a code review, when a `PublicAPI.Unshipped.txt` file is in the diff, question why the public API is needed.\r\n* When NuGet's packages are released with release branding (not previews), part of the publishing steps that HotSeat need to do is to merge all contents of `PublicAPI.Unshipped.txt` files with their `PublicAPI.Shipped.txt` counterparts, to signal that all new APIs (since the previous GA release) have now been shipped and there is a higher bar to change them now."},{"Id":"12490775364","Type":"IssuesEvent","CreatedAt":"2020-06-01T01:36:09","Actor":"jkotas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9631","RelatedDescription":"Opened issue \"Source distribution of native libraries via NuGet\" (#9631) at NuGet/Home","RelatedBody":"It is not unusual for NuGet packages to contain native libraries. Today, the NuGet package author is responsible for providing native libraries for all platforms that the NuGet package can run on. If the consumer of the library wishes to use the library on a platform that is not on this list, there is no simple standard way for how to recompile the native library for the new platform. Most users just give up.\r\n\r\nOther ecosystems solve this problem by having both source and binary distributions of native libraries. For example, the Python ecosystem has wheels (binary distribution) and sdist (source distribution) that is used as fallback when the appropriate binary distribution is not available. More details in https://packaging.python.org/tutorials/installing-packages/#source-distributions-vs-wheels.\r\n\r\nThis issue is start of the discussion to add source distribution option for NuGet packages.\r\n\r\nRelated: https://github.com/NuGet/Home/issues/5862, https://github.com/dotnet/runtime/issues/37213\r\n\r\ncc @AaronRobinsonMSFT "},{"Id":"12486129082","Type":"PullRequestEvent","CreatedAt":"2020-05-30T23:51:58","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/9630","RelatedDescription":"Opened pull request \"Add design for dotnet list package --verbosity\" (#9630) at NuGet/Home","RelatedBody":"Related to https://github.com/NuGet/Home/issues/9600."},{"Id":"12485900383","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:19:14","Actor":"aw129","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9629","RelatedDescription":"Opened issue \"packages.lock.json generated with inconsistent line endings\" (#9629) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet\r\n\r\nNuGet version (x.x.x.xxx): 5.5.0.4\r\n\r\ndotnet.exe --version (if appropriate): 3.1.202\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10, mac OS\r\n\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Execute `dotnet restore` on mac, `packages.lock.json` is generated with LF line endings\r\n\r\n2. Change single package version.\r\n\r\n3. Execute `dotnet restore` on Windows, `packages.lock.json` is updated with CRLF line endings\r\n\r\nWhen the file is created on one OS and committed to source control and then updated on the other OS every line is changed."},{"Id":"12482410607","Type":"IssuesEvent","CreatedAt":"2020-05-30T03:08:59","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8570","RelatedDescription":"Closed issue \"Retarget task in dotnet/sdk to net5.0 when ready to insert nuget bits targeting net5.0\" (#8570) at NuGet/Home","RelatedBody":"[updated based on teams call with @heng-liu , @zkat , @nkolev92 , @zivkan , @rrelyea ]\r\n\r\nWhen it's ready to insert nuget bits targeting net5.0, \r\n(nuget current - net472, netstandard2.0, netstandard2.1)\r\n(nuget change to - net472, netstandard2.0, net5.0)\r\n\r\nRemember to go to the dotnet/SDK repository , change sdk/src/Tasks/Microsoft.NET.Build.Tasks/Microsoft.NET.Build.Tasks.csproj to ensure that they are using net5.0 version of us.\r\n\r\nSo that SDK will use the NuGet.Packaging targeting net5.0.\r\n\r\nalso:\r\nrestore -> needs net5.0 (because it needs validation to work)\r\npack -> doesn't need to verify, therefore could live with just netstandard2.0\r\ndotnet add package -> xplat.dll - needs 5.0, so it pulls in the right restore bits."},{"Id":"12480979136","Type":"IssuesEvent","CreatedAt":"2020-05-29T21:21:30","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9555","RelatedDescription":"Closed issue \"ComputeSignature is silent by default in .NET Core, which disables PIN prompts\" (#9555) at NuGet/Home","RelatedBody":"The current overload of ComputeSignature changed meaning between .NET Framework and .NET Core. In .NET Core, the context is silent by default, which won't enable PIN prompts for smart cards/usb tokens that require it. false must be passed in to enable that if applicable.\r\n\r\nWill block code signing from working from most USB thumb drives if not set.\r\n"},{"Id":"12480969422","Type":"IssuesEvent","CreatedAt":"2020-05-29T21:20:04","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9628","RelatedDescription":"Opened issue \"Check code relies on HResult value\" (#9628) at NuGet/Home","RelatedBody":"We have the following code relies on HResult. \r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/Signing/Authoring/X509SignatureProvider.cs#L141\r\n\r\nAs per https://github.com/dotnet/runtime/issues/36786#issuecomment-632193883,  the HResult values of most of dotnet/runtime exceptions is not guaranteed by them.\r\n\r\nWe need to check if it's guaranteed, or else we may have to change the code.\r\n\r\n\r\n"},{"Id":"12479300673","Type":"IssuesEvent","CreatedAt":"2020-05-29T18:00:52","Actor":"hirschmann","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9627","RelatedDescription":"Opened issue \"Is it possible to copy contentFiles to executable project's output only?\" (#9627) at NuGet/Home","RelatedBody":"Let's assume I have the following project structure:\r\n\r\n```\r\nExecutableProject\r\nâ”‚\r\nâ””â”€â”€ Project A\r\n    â”‚\r\n    â””â”€â”€ Project B\r\n        â”‚\r\n        â””â”€â”€ ContentFilesNugetPackage\r\n```\r\n\r\nThe NuGet package contains some assets which are required by Library B at runtime.\r\nThe nuspec file for the package looks like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\r\n    <metadata>\r\n        <id>test.package</id>\r\n        <version>1.0.0</version>\r\n        <description>Test content</description>\r\n        <authors>demo</authors>\r\n\t\t\r\n        <contentFiles>\r\n            <files include=\"**/*\" buildAction=\"content\" copyToOutput=\"true\" flatten=\"false\" />\r\n        </contentFiles>\r\n    </metadata>\r\n</package>\r\n```\r\n\r\nThis setup actually works. The assets will be copied to the executable project's output path on build.\r\n\r\n### the problem\r\n\r\nThe assets will not only be copied to the ExecutableProject's output path, but also to the output paths of Project A and Project B.\r\nThis is a problem in case there are a lot of nuget packages, there are a lot of asset files and the project dependency graph is deep, because it  increases the build time.\r\n\r\nIs it possible to build the nuget package in a way so that the contentFiles are copied to executable project's output only?\r\nI'm thinking of a behavior like runtime files, but I want to be able to include any file (not just assemblies) and keep the folder hierarchy.\r\n\r\nI have tried different combinations of buildAction, copyToOutput and PrivateAssets (in Project B) but I couldn't get it to work.\r\nEither the assets are copied to all related project's output paths, or the assets aren't copied at all.\r\n\r\nIs the scenario I describe supported by NuGet?\r\n\r\n### demo project\r\n\r\nI have built a small projects which demonstrates the problem:\r\n[nuget-issue-demo.zip](https://github.com/NuGet/Home/files/4703451/nuget-issue-demo.zip)\r\n\r\n### tools versions\r\n\r\nnuget.exe: 5.6.0.6591\r\ndotnet.exe: 3.1.201\r\nVisual Studio: 16.5.4"},{"Id":"12478982994","Type":"IssuesEvent","CreatedAt":"2020-05-29T17:23:14","Actor":"mirkomuggli","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9626","RelatedDescription":"Opened issue \"PMUI Tab can't be closed\" (#9626) at NuGet/Home","RelatedBody":"## Exception in OnClose handler of PMUI ToolWindow when using Codespaces\n\nThere's a NullRef exception in the OnClose handler of the PMUI ToolWindow. This is happening because, for reasons I don't understand, the Window is disposed immediately.\nThe NullRef in OnClose is caused by the Context being null when we try to Save the document state.\n"},{"Id":"12473093268","Type":"IssuesEvent","CreatedAt":"2020-05-29T07:05:24","Actor":"eosgortor","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9625","RelatedDescription":"Opened issue \"Exception when adding package with CopyToOutput\" (#9625) at NuGet/Home","RelatedBody":"## Details about Problem\r\nIm using VisualStudio 2019 (16.5.4) on Windows 7 to create a nuget package. I'm adding a content file. The ItemGroup in the csproj (.NetStandard 2.1) looks like this:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <Content Include=\"content.txt\">\r\n      <PackageCopyToOutput>PreserveNewest</PackageCopyToOutput>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\nThe Nuget package is created successfully. The exported nuspec looks like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    ...\r\n    <contentFiles>\r\n      <files include=\"any/netstandard2.1/content.txt\" buildAction=\"Content\" copyToOutput=\"PreserveNewest\" />\r\n    </contentFiles>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"contentFiles\\any\\netstandard2.1\\content.txt\" target=\"contentFiles\\any\\netstandard2.1\\content.txt\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\nWhen adding this project to an empty .Net Core 3.1 console application, an exception is thrown. See below.\r\n\r\nAdding the package works, when removing the following tag from the csproj file:\r\n```xml\r\n<PackageCopyToOutput>PreserveNewest</PackageCopyToOutput>\r\n```\r\nCan I workaround this problem?\r\n\r\nBest regards\r\n\r\n### Exception\r\n```\r\nSystem.FormatException: Index (zero based) must be greater than or equal to zero and less than the size of the argument list.\r\n   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at NuGet.Packaging.NuspecReader.AttributeAsNullableBool(XElement element, String attributeName)\r\n   at NuGet.Packaging.NuspecReader.<GetContentFiles>d__36.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at NuGet.Commands.ContentFileUtils.GetContentFileGroup(NuGetFramework framework, NuspecReader nuspec, List`1 contentFileGroups)\r\n   at NuGet.Commands.LockFileUtils.AddContentFiles(RestoreTargetGraph targetGraph, LockFileTargetLibrary lockFileLib, NuGetFramework framework, ContentItemCollection contentItems, NuspecReader nuspec)\r\n   at NuGet.Commands.LockFileUtils.AddAssets(LockFileLibrary library, LocalPackageInfo package, RestoreTargetGraph targetGraph, LibraryIncludeFlags dependencyType, LockFileTargetLibrary lockFileLib, NuGetFramework framework, String runtimeIdentifier, ContentItemCollection contentItems, NuspecReader nuspec, IReadOnlyList`1 orderedCriteria)\r\n   at NuGet.Commands.LockFileUtils.CreateLockFileTargetLibrary(LockFileLibrary library, LocalPackageInfo package, RestoreTargetGraph targetGraph, LibraryIncludeFlags dependencyType, NuGetFramework targetFrameworkOverride, IEnumerable`1 dependencies, LockFileBuilderCache cache)\r\n   at NuGet.Commands.LockFileBuilder.CreateLockFile(LockFile previousLockFile, PackageSpec project, IEnumerable`1 targetGraphs, IReadOnlyList`1 localRepositories, RemoteWalkContext context)\r\n   at NuGet.Commands.RestoreCommand.BuildAssetsFile(LockFile existingLockFile, PackageSpec project, IEnumerable`1 graphs, IReadOnlyList`1 localRepositories, RemoteWalkContext contextForProject)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__32.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunWithoutCommit>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.DependencyGraphRestoreUtility.<PreviewRestoreAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewBuildIntegratedProjectActionsAsync>d__77.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewInstallPackageAsync>d__68.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<GetActionsAsync>d__20.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<>c__DisplayClass12_0.<<PerformActionImplAsync>b__0>d.MoveNext()\r\n```\r\n"},{"Id":"12472056936","Type":"IssuesEvent","CreatedAt":"2020-05-29T04:06:29","Actor":"efunkenbusch","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9624","RelatedDescription":"Opened issue \"Suggestion: Add nuget.client packages to Winget repo\" (#9624) at NuGet/Home","RelatedBody":"Since Winget is new and all that gooey goodness, you should add the Nuget.client packages so they can be easily installed."},{"Id":"12471859910","Type":"IssuesEvent","CreatedAt":"2020-05-29T03:25:09","Actor":"efunkenbusch","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9623","RelatedDescription":"Opened issue \"NU1004 when restoring a solution that has mixed Legacy and netstandard2 projects from cmd line with LockedMode\" (#9623) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n\r\nNuGet product used: nuget.client\r\n\r\nNuGet version Several, but exists in prod 5.4, 5.5, 5.5.1 and 5.6 as well as 5.7 preview 1\r\n\r\nVS version: 2019 16.7 Preview 1\r\n\r\nOS version: Windows 10 19635.1\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new dotnet core library (default is fine)\r\n2. Add anew .net 4.7.2 library (with packages.config)\r\n3. Add some legacy framework librarys to th e.net 4.7.2 library (i chose Google.Apis)\r\n4. Add a project reference from .net core library to legacy framework library (no actual code reference needed)\r\n5. install nuget.exe (i used chocolatey, installed prod 5.6.0)\r\n6. open a command prompt, navigate to your solution foldeer\r\n7. type \"nuget.exe restore <your project>.sln -UseLockFile\" (succeeds)\r\n8. type \"nuget.exe restore <your project>.sln -LockedMode (fails, with NU1004\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n`\r\nC:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1>nuget restore ClassLibrary1.sln -LockedMode -verbosity detailed\r\nNuGet Version: 5.4.0.6315\r\nMSBuild auto-detection: using msbuild version '16.7.0.22806' from 'C:\\PROGRA~2\\MICROS~1\\2019\\Preview\\MSBuild\\Current\\Bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nMSBuild P2P timeout [ms]: 120000\r\nC:\\PROGRA~2\\MICROS~1\\2019\\Preview\\MSBuild\\Current\\Bin\\msbuild.exe \"C:\\Users\\ErikFunkenbusch\\AppData\\Local\\Temp\\NuGetScratch\\aegggkrs.jgg.nugetinputs.targets\" /t:GenerateRestoreGraphFile /nologo /nr:false /v:q /p:NuGetRestoreTargets=\"C:\\Users\\ErikFunkenbusch\\AppData\\Local\\Temp\\NuGetScratch\\pirmklvn.dnv.nugetrestore.targets\" /p:RestoreUseCustomAfterTargets=\"True\" /p:RestoreTaskAssemblyFile=\"C:\\ProgramData\\chocolatey\\lib\\NuGet.CommandLine\\tools\\nuget.exe\" /p:RestoreSolutionDirectory=\"C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\\\\" /p:SolutionDir=\"C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\\\\" /p:SolutionName=\"ClassLibrary1\" /p:RestoreLockedMode=\"True\"\r\n\r\nAll packages listed in packages.config are already installed.\r\nRunning restore with 16 concurrent jobs.\r\nReading project file C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj.\r\nThe restore inputs for 'ClassLibrary1' have changed. Continuing restore.\r\nPersisting no-op dg to C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\obj\\ClassLibrary1.csproj.nuget.dgspec.json\r\nNU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\nCommitting restore...\r\nAssets file has not changed. Skipping assets file writing. Path: C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\obj\\project.assets.json\r\nWriting cache file to disk. Path: C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\obj\\ClassLibrary1.csproj.nuget.cache\r\nWriting packages lock file at disk. Path: C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\packages.lock.json\r\nRestore failed in 83.46 ms for C:\\Users\\ErikFunkenbusch\\source\\repos\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj.\r\n\r\nNuGet Config files used:\r\n    C:\\Users\\ErikFunkenbusch\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n    C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n    C:\\Program Files (x86)\\NuGet\\Config\\Xamarin.Offline.config\r\n\r\n`\r\n\r\nFeeds used:\r\n    C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n    https://api.nuget.org/v3/index.json\r\n\r\n### Sample Project\r\n\r\n[ClassLibrary1.zip](https://github.com/NuGet/Home/files/4699515/ClassLibrary1.zip)\r\n\r\n\r\n"},{"Id":"12471830462","Type":"IssuesEvent","CreatedAt":"2020-05-29T03:19:20","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9580","RelatedDescription":"Closed issue \"Populate Solution Explorer package/project transitive dependencies from assets file\" (#9580) at NuGet/Home","RelatedBody":"[Copied from https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1107557]\r\nFor .NET Project System projects (eg. SDK style projects) where the Dependencies node exists, transitive dependencies of package and project references will no longer be populated using data from design time builds. Instead, this data will be lazily acquired from the assets file directly.\r\n\r\nThis code was originally going to exist in the Project System repo, but it requires logic from NuGet which is not consumable within VS due to problems with binding redirects.\r\n"},{"Id":"12471428645","Type":"IssuesEvent","CreatedAt":"2020-05-29T01:59:36","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9622","RelatedDescription":"Opened issue \"Dependencies tree Apex tests\" (#9622) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392\r\n\r\nInvestigate incorporating Dependencies tree Apex tests for Solution Explorer.\r\n\r\nThe .NET Project System has some tests that may help here.\r\n\r\nhttps://github.com/dotnet/project-system/blob/e3944ffa90462ea031e4754303ff554fe8f794f9/tests/Microsoft.VisualStudio.ProjectSystem.IntegrationTests/DependencyNodeIntegrationTests.cs"},{"Id":"12471415401","Type":"IssuesEvent","CreatedAt":"2020-05-29T01:56:52","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9621","RelatedDescription":"Opened issue \"Dependencies tree unit tests\" (#9621) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3392\r\n\r\nTracking adding more tests to the code in NuGet.Client for populating transitive dependencies in Solution Explorer."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-01T05:30:43.1338038Z","RunDurationInMilliseconds":2326}