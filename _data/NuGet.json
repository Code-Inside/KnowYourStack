{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12536676562","Type":"PullRequestEvent","CreatedAt":"2020-06-05T00:52:53","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8024","RelatedDescription":"Merged pull request \"[Hotfix] Update banner message\" (#8024) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12536496517","Type":"PullRequestEvent","CreatedAt":"2020-06-05T00:16:06","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8024","RelatedDescription":"Opened pull request \"[Hotfix] Update banner message\" (#8024) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12525077869","Type":"PullRequestEvent","CreatedAt":"2020-06-04T01:32:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8023","RelatedDescription":"Merged pull request \"[Hotfix] Black Lives Matter\" (#8023) at NuGet/NuGetGallery","RelatedBody":"Full width:\r\n\r\n![image](https://user-images.githubusercontent.com/94054/83702238-f4590500-a5c0-11ea-9b1d-c3cdecbe91a1.png)\r\n\r\nSmall window:\r\n\r\n![image](https://user-images.githubusercontent.com/94054/83702289-24080d00-a5c1-11ea-9abc-36a7b7b42eb2.png)\r\n"},{"Id":"12524792457","Type":"PullRequestEvent","CreatedAt":"2020-06-04T00:38:07","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8023","RelatedDescription":"Opened pull request \"Black Lives Matter\" (#8023) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/94054/83702238-f4590500-a5c0-11ea-9b1d-c3cdecbe91a1.png)\r\n"},{"Id":"12519977385","Type":"IssuesEvent","CreatedAt":"2020-06-03T15:11:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8022","RelatedDescription":"Opened issue \"Detect disconnected client when package upload fails and return 4XX\" (#8022) at NuGet/NuGetGallery","RelatedBody":"### Bug description\r\n\r\nWhen the client disconnects during package push (perhaps Ctrl + C on nuget.exe) we get an exception and return 500. Even though the client has disconnected, this gets recorded as a 500, affecting SLO/success metrics.\r\n\r\n### Reproduction steps\r\n\r\n1. Run latest gallery locally.\r\n1. Push a very large package to your local gallery.\r\n1. While gallery is reading the upload, terminate the upload on the client side.\r\n\r\n### Expected behavior\r\n\r\nA 400-level status code should be recorded since the client caused the error.\r\n\r\n### Actual behavior\r\n\r\nA `PackagePushFailure` metric is recorded and HTTP 500 is returned.\r\n\r\nFor recent instances in PROD (500 such requests in past 7 days) look for problem ID: `System.Runtime.InteropServices.COMException at NuGetGallery.ApiController.ReadPackageFromRequest`.\r\n\r\nThis 500 shows up in our failure reporting even though it was not a failure witnessed by the user and is not caused by our app or our dependencies.\r\n\r\n### Additional context\r\n\r\nIt seems like we can detect this case with `Response.IsClientConnected`.\r\nhttps://stackoverflow.com/a/12386676"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12535383878","Type":"IssuesEvent","CreatedAt":"2020-06-04T21:15:49","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9647","RelatedDescription":"Closed issue \"Pushing packages with --skip-duplicate still updates snupkg\" (#9647) at NuGet/Home","RelatedBody":"When uploading packages with `--skip-duplicate` duplicate `nupkg` packages are skipped, but symbol packages are uploaded again. \r\n\r\nYou can take a look at this script from GitHub Actions which causes this behavior.\r\n\r\nhttps://github.com/PiranhaCMS/piranha.core/blob/master/.github/workflows/publish_to_nuget.yml\r\n\r\nBest regards"},{"Id":"12534624749","Type":"IssuesEvent","CreatedAt":"2020-06-04T19:47:25","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9536","RelatedDescription":"Closed issue \"ValidateTimestampResponse doesn't work correctly if nonce got normalized\" (#9536) at NuGet/Home","RelatedBody":"ValidateTimestampResponse doesn't work correctly if the generated nonce is different after normaliztion.\r\nThis will bring in flaky test, and also product issue: when requesting for timestamping, it may fail for nonces did not match.\r\n\r\nTest TimestampSignatureAsync_TimestampingCountersignature_SucceedsAsync failed for:\r\nError message:\r\n`NuGet.Packaging.Signing.TimestampException : The timestamp response is invalid. Nonces did not match.`\r\n\r\nStack trace\r\n```\r\n at NuGet.Packaging.Signing.Rfc3161TimestampProvider.ValidateTimestampResponse(Byte[] nonce, Byte[] messageHash, IRfc3161TimestampToken timestampToken) in /Users/runner/runners/2.166.4/work/1/s/src/NuGet.Core/NuGet.Packaging/Signing/Timestamp/Rfc3161TimestampProvider.cs:line 211\r\n   at NuGet.Packaging.Signing.Rfc3161TimestampProvider.GetTimestampAsync(TimestampRequest request, ILogger logger, CancellationToken token) in /Users/runner/runners/2.166.4/work/1/s/src/NuGet.Core/NuGet.Packaging/Signing/Timestamp/Rfc3161TimestampProvider.cs:line 126\r\n   at NuGet.Packaging.Signing.Rfc3161TimestampProvider.TimestampSignatureAsync(PrimarySignature primarySignature, TimestampRequest request, ILogger logger, CancellationToken token) in /Users/runner/runners/2.166.4/work/1/s/src/NuGet.Core/NuGet.Packaging/Signing/Timestamp/Rfc3161TimestampProvider.cs:line 69\r\n   at NuGet.Packaging.FuncTest.TimestampProviderTests.TimestampSignatureAsync_TimestampingCountersignature_SucceedsAsync() in /Users/runner/runners/2.166.4/work/1/s/test/NuGet.Core.FuncTests/NuGet.Packaging.FuncTest/SigningTests/TimestampProviderTests.cs:line 474\r\n--- End of stack trace from previous location ---\r\n```\r\n"},{"Id":"12532735122","Type":"IssuesEvent","CreatedAt":"2020-06-04T16:24:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9106","RelatedDescription":"Closed issue \"Pack library with analyzer\" (#9106) at NuGet/Home","RelatedBody":"If we have:\r\n\r\n```\r\nLib.csproj\r\nLib.Analyzers.csproj\r\n```\r\n\r\nAnd we want to pack so that `Lib.nupkg` has a package dependency on `Lib.Analyzers.nupkg`\r\n\r\nAn example of the desired result is: [Microsoft.CodeAnalysis.Common](https://www.nuget.org/packages/Microsoft.CodeAnalysis.Common/) that has a dependency on [Microsoft.CodeAnalysis.Analyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.Analyzers/)\r\n\r\nFor anyone familiar with paket it is done like this using paket:\r\n\r\n```\r\ndependencies\r\n  Lib.Analyzers\r\n```\r\n\r\nIn `paket.template`\r\n\r\nIs there support for this scenario and if so where is it documented?"},{"Id":"12532286797","Type":"IssuesEvent","CreatedAt":"2020-06-04T15:43:45","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9287","RelatedDescription":"Closed issue \"Adding tests for xplat verification in Dotnet.Integration.Test\" (#9287) at NuGet/Home","RelatedBody":"When we ship xplat verification, we will insert the verification bits into dotnet. Then the dotnet restore will have the verification process. \r\n\r\nFor now, we only have 1 test in Dotnet.Integration.Test.DotnetRestoreTests `DotnetRestore_WithAuthorSignedPackage_Succeeds`, which is making sure even if there is no xplat verification, the dotnet restore will work correctly with signed packages. \r\n\r\nSo the coverage is not enough. \r\n\r\nWe need to add tests for xplat verification in Dotnet.Integration.Test.\r\nThe following scenarios may needs to be considered:\r\n1.unsigned package with \"signatureValidationMode=require\"\r\n2.most representative type of  signed package on NuGet.org  with \"signatureValidationMode=require\"\r\n\r\nFor now, the Dotnet.Integration.Test.DotnetRestoreTests  only runs on windows. We may need to discuss with the team, to consider to run it on Linux or Mac.\r\n"},{"Id":"12532278832","Type":"IssuesEvent","CreatedAt":"2020-06-04T15:43:01","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9495","RelatedDescription":"Closed issue \"Enable test GetCertificateChain_WithUntrustedRoot_Throws on Mac and fix it \" (#9495) at NuGet/Home","RelatedBody":"The test `GetCertificateChain_WithUntrustedRoot_Throws` is enabled on Mac in https://github.com/NuGet/NuGet.Client/pull/3275\r\nBut the assertion didn't check for MacOS. So we should change the assertion to check the results on Mac and fix it. "},{"Id":"12532156175","Type":"IssuesEvent","CreatedAt":"2020-06-04T15:32:00","Actor":"Sumoren","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9648","RelatedDescription":"Opened issue \"Package with runtime native dll in \"win\" folder not copied to output\" (#9648) at NuGet/Home","RelatedBody":"I have a package with the structure\r\n```\r\nlib\r\n|- net45\r\n|  |- some managed dlls\r\nruntimes\r\n|- win\r\n   |- native\r\n      |- some natives dlls\r\n```\r\nWhen I consume this nuget from a c# .NetFramework project that target `AnyCPU` it copy the natives dlls to the output as expected. But if the c# project target `x64` then they are not copied.\r\n\r\nFrom my understanding of the documentation here: https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#rid-graph\r\n>When NuGet restores packages, it tries to find an exact match for the specified runtime. If an exact match is not found, NuGet walks back the graph until it finds the closest compatible system according to the RID graph.\r\n\r\nSo it should fallback to `win` RID since it doesn't find any `win-x64` folder.\r\n\r\nWhy are the natives not copied when the project target `x64`?\r\nI understand that generic `win` native dll is weird concept since the dll must target `x86` or `x64` not both. Is it why RID fallback graph is not apply in that case?"},{"Id":"12530185590","Type":"IssuesEvent","CreatedAt":"2020-06-04T12:40:25","Actor":"tidyui","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9647","RelatedDescription":"Opened issue \"Pushing packages with --skip-duplicate still updates snupkg\" (#9647) at NuGet/Home","RelatedBody":"When uploading packages with `--skip-duplicate` duplicate `nupkg` packages are skipped, but symbol packages are uploaded again. \r\n\r\nYou can take a look at this script from GitHub Actions which causes this behavior.\r\n\r\nhttps://github.com/PiranhaCMS/piranha.core/blob/master/.github/workflows/publish_to_nuget.yml\r\n\r\nBest regards"},{"Id":"12528057754","Type":"IssuesEvent","CreatedAt":"2020-06-04T08:57:35","Actor":"oDn","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9646","RelatedDescription":"Opened issue \"nuget pack doesn't ignore .git folder\" (#9646) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used : NuGet.exe\r\n\r\nNuGet version : 5.5.1\r\n\r\nOS version : Windows Server 2016 (14393.3686) and Windows 10 1709 (16299.904)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Clone a git repository containing files directly at the root\r\n\r\n2. Use `nuget pack`\r\n\r\n3. Notice that the _.git_ directory is included in the produced package\r\n\r\n## Other details\r\n\r\nThe output of nuget.exe specifically mentions that folders starting with a dot will be ignored, so the .gitattributes file is properly ignored but the _.git_ directory is systematically included in the nupkg file.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-05T05:30:39.2809184Z","RunDurationInMilliseconds":1507}