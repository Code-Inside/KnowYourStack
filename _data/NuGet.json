{"Data":{"Blog":{"FeedItems":[{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"42345141912","Type":"PullRequestEvent","CreatedAt":"2024-09-27T18:44:58","Actor":"clairernovotny","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10192","RelatedDescription":"Opened pull request \"Support blob hierarchy operations with a custom delimiter\" (#10192) at NuGet/NuGetGallery","RelatedBody":"#### PR Summary\nIntroduces a `delimiter` parameter to the `AzureStorage` class and its methods for blob hierarchy operations.\n- `AzureStorage.cs`: Added `_delimiter` field, updated constructor, `List`, and `ListAsync` methods to use `delimiter`.\n- `AzureStorageFactory.cs`: Added `_delimiter` field, updated constructor, and `Create` method to pass `delimiter`.\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/5645"},{"Id":"42272419022","Type":"PullRequestEvent","CreatedAt":"2024-09-25T20:12:10","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10184","RelatedDescription":"Merged pull request \"Secret injected IConfigurationSection and IConfiguration wrappers.\" (#10184) at NuGet/NuGetGallery","RelatedBody":"Secret injected wrappers for `IConfigurationSection` and `IConfiguration` to provide the ability to inject secrets when we are not constructing the whole configuration stack from scratch (Azure Functions, for example).\r\nPulled out from internal project with minimal changes."},{"Id":"42236760760","Type":"PullRequestEvent","CreatedAt":"2024-09-24T23:29:37","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10190","RelatedDescription":"Merged pull request \"Targeting netstandard 2.1 for more projects\" (#10190) at NuGet/NuGetGallery","RelatedBody":"Internal projects targeting .net depend on those packages and produce build warnings because of unsupported targets. Nothing really prevents those from targeting netstandard 2.1 (not netstandard2.0 because of [EF](https://www.nuget.org/packages/EntityFramework#supportedframeworks-body-tab)).\r\n\r\nHad to apply a fix to Validation DB's `EntitiesConfiguration` similar to what we have for Gallery DB:\r\nhttps://github.com/NuGet/NuGetGallery/blob/febd3fb35bbf25b4a4d40f56859693e0bbf5d6f0/src/NuGetGallery.Core/Entities/EntitiesConfiguration.cs#L7-L43\r\n\r\nFunctionally, there are no changes for projects consuming those that target net472 and projects targeting .net can actually now use those."},{"Id":"42228404047","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:48:33","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10181","RelatedDescription":"Closed issue \"[Feature]: WebHooks \" (#10181) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### The Elevator Pitch\n\nI need to know when a package was uploaded, when it was published, if its validation gets delayed etc. automatically and without registering emails for some automation purposes. For that I'd need webhooks set up, either by placing a URL in the account settings to which a REST message (JSON) will be sent, with the package name, version, and status.\r\n\r\nI understand I can do so by polling, but it's inefficient for both sides.\n\n### Additional Context and Details\n\nExample JSON:\r\n\r\n```\r\n{\r\n    \"package\": {\r\n        \"name\": \"MyNuget\",\r\n        \"version\": \"1.0.0\",\r\n        \"status\": \"published\",\r\n        \"time\": \"2024-09-11T13:23:15.000Z\"\r\n     }\r\n}\r\n```"},{"Id":"42228306668","Type":"IssuesEvent","CreatedAt":"2024-09-24T17:45:16","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10182","RelatedDescription":"Closed issue \"Referencing packed images in readmes\" (#10182) at NuGet/NuGetGallery","RelatedBody":"while packed package icon and readme is readable by nuget, I am wondering why not images as well.\r\n\r\nUse cases: referencing images in readmes\r\n\r\nIf I can understand properly, referencing packed image doesn't seem to be from a trusted source/domain."},{"Id":"42197484212","Type":"PullRequestEvent","CreatedAt":"2024-09-24T00:28:42","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10188","RelatedDescription":"Merged pull request \"NuGet Job, don't rethrow exceptions if blob is not found\" (#10188) at NuGet/NuGetGallery","RelatedBody":"Fixes: https://github.com/NuGet/Engineering/issues/5628\r\nContext is [here on teams](https://teams.microsoft.com/l/message/19:d10cd9192de2492986fba3baeea3093c@thread.skype/1726693433772?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=ad34ac55-6785-4e7c-82c3-7ba405d30c3c&parentMessageId=1726693433772&teamName=NuGet&channelName=Server&createdTime=1726693433772).\r\nDeployment: [1550336](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=1550336)\r\n\r\nPreviously there was many exceptions for NuGet.Jobs `Catalog2Icon`, after deployment it's no more.\r\n**Before:** ![image](https://github.com/user-attachments/assets/06871a7a-0c43-44af-a174-cda2d77a28d0)\r\n\r\n**After:** \r\n![image](https://github.com/user-attachments/assets/0ba7527b-2d74-4860-9910-3b112a8cca96)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"42361564852","Type":"IssuesEvent","CreatedAt":"2024-09-28T20:13:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13813","RelatedDescription":"Closed issue \"Transitive analyzers/source generators flow through by default?!\" (#13813) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.100\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nIt's mentioned in the official documentation that the default value of `PrivateAssets` for a `<PackageReference>` is `contentfiles;analyzers;build` — see [this](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets:~:text=contentfiles%3Banalyzers%3Bbuild); which, as far as I understand, is supposed to mean that if:\r\n\r\n1. Project `A` references package `B`\r\n2. Package `B` references package `C` containing analyzers/source generators\r\nThen the analyzers/source generators from `C` would not flow through to `A`.\r\n\r\nThis, however, doesn't seem to be the case, which I find perplexing. Here's a minimal reproduction: https://github.com/aradalvand/nuget-transitive-analyzer-test\r\n\r\nSteps to reproduce:\r\n1. `git clone https://github.com/aradalvand/nuget-transitive-analyzer-test`\r\n2. `dotnet build`\r\n\r\nHere is the `ThePackage`'s `.nuspec` contents:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>ThePackage</id>\r\n    <version>1.0.0</version>\r\n    <authors>ThePackage</authors>\r\n    <description>Package Description</description>\r\n    <repository type=\"git\" />\r\n    <dependencies>\r\n      <group targetFramework=\"net8.0\">\r\n        <dependency id=\"Riok.Mapperly\" version=\"3.6.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\nNotice `exclude=\"Build,Analyzers\"`.\r\n\r\nHowever, when you run `dotnet build` on the repro linked above, to build the `ConsumingThePackage` project, you'll see that Mapperly's source generators (which was referenced in `ThePackage`) are actually run in `ConsumingThePackage`. This is precisely against what `exclude=\"Build,Analyzers\"` suggests.\r\n\r\nWhat am I missing?! This is extremely surprising, given what the docs say.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42361563696","Type":"IssuesEvent","CreatedAt":"2024-09-28T20:13:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13813","RelatedDescription":"Closed issue \"Transitive analyzers/source generators flow through by default?!\" (#13813) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.100\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nIt's mentioned in the official documentation that the default value of `PrivateAssets` for a `<PackageReference>` is `contentfiles;analyzers;build` — see [this](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets:~:text=contentfiles%3Banalyzers%3Bbuild); which, as far as I understand, is supposed to mean that if:\r\n\r\n1. Project `A` references package `B`\r\n2. Package `B` references package `C` containing analyzers/source generators\r\nThen the analyzers/source generators from `C` would not flow through to `A`.\r\n\r\nThis, however, doesn't seem to be the case, which I find perplexing. Here's a minimal reproduction: https://github.com/aradalvand/nuget-transitive-analyzer-test\r\n\r\nSteps to reproduce:\r\n1. `git clone https://github.com/aradalvand/nuget-transitive-analyzer-test`\r\n2. `dotnet build`\r\n\r\nHere is the `ThePackage`'s `.nuspec` contents:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>ThePackage</id>\r\n    <version>1.0.0</version>\r\n    <authors>ThePackage</authors>\r\n    <description>Package Description</description>\r\n    <repository type=\"git\" />\r\n    <dependencies>\r\n      <group targetFramework=\"net8.0\">\r\n        <dependency id=\"Riok.Mapperly\" version=\"3.6.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\nNotice `exclude=\"Build,Analyzers\"`.\r\n\r\nHowever, when you run `dotnet build` on the repro linked above, to build the `ConsumingThePackage` project, you'll see that Mapperly's source generators (which was referenced in `ThePackage`) are actually run in `ConsumingThePackage`. This is precisely against what `exclude=\"Build,Analyzers\"` suggests.\r\n\r\nWhat am I missing?! This is extremely surprising, given what the docs say.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"42358011333","Type":"IssuesEvent","CreatedAt":"2024-09-28T13:46:30","Actor":"aetos382","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13824","RelatedDescription":"Opened issue \"Enable self-updates when installed by WinGet\" (#13824) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nExecutable files installed using the `winget install Microsoft.NuGet` command will not be updated correctly using the `nuget update -self` command.\n\n### Additional Context and Details\n\nThe actual executable files installed using the `winget install Microsoft.NuGet` command are placed under the `%LOCALAPPDATA%/Microsoft/WinGet/Packages` folder. A symbolic link is placed in the `%LOCALAPPDATA%/Microsoft/WinGet/Links` folder, which is included in the `PATH` environment variable.\r\nIf you update using the `nuget update -self` command in this environment, the symbolic links contained in the `Links` folder will be replaced with the latest file entities, but the files in the `Packages` folder will not be updated, so winget will not recognize this update correctly."},{"Id":"42350824285","Type":"IssuesEvent","CreatedAt":"2024-09-27T23:51:59","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13823","RelatedDescription":"Opened issue \"Signing:  key not disposed\" (#13823) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nlatest\n\n### Worked before?\n\nno\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nIn [`NuGet.Packaging.Signing.CertificateUtility.IsCertificatePublicKeyValid(...)`](https://github.com/NuGet/NuGet.Client/blob/b43ffa23bd5e6d0261a9d951c0e70483126f9c55/src/NuGet.Core/NuGet.Packaging/Signing/Utility/CertificateUtility.cs#L156-L166) an `System.Security.Cryptography.RSA` object is created but not disposed.\n\n### Verbose Logs\n\n_No response_"},{"Id":"42350515110","Type":"IssuesEvent","CreatedAt":"2024-09-27T23:23:24","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13380","RelatedDescription":"Closed issue \"Clash between development and production config files\" (#13380) at NuGet/Home","RelatedBody":"Originally posted on StackOverflow, and in discussions page here on repo, without success. I can't believe I'm the only one with this issue. How is this typically done? Can someone please point me to an example or official docs that deal with this?\r\n\r\n\r\n### Discussed in https://github.com/NuGet/Home/discussions/12824\r\n\r\nOriginally posted by **lonix1** August 18, 2023\r\nOriginally posted on [StackOverflow](https://stackoverflow.com/q/76928790/9971404) without success. Any help would be appreciated.\r\n\r\n---\r\n\r\nMy .net project is built locally by me during development, and remotely by my ci/cd server.\r\n\r\nThe project has **project-level config** in `myproject/nuget.config`. It is used by my ci/cd server, which provides some environment variables:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n    <add key=\"custom\" value=\"https://example.com/api/nuget/index.json\" />\r\n  </packageSources>\r\n\r\n  <packageSourceCredentials>\r\n    <custom>\r\n      <!-- env vars provided by pipeline -->\r\n      <add key=\"Username\" value=\"%USERNAME%\" />\r\n      <add key=\"ClearTextPassword\" value=\"%API_KEY%\" />\r\n    </custom>\r\n  </packageSourceCredentials>\r\n\r\n  <packageSourceMapping>\r\n    <!-- get other packages from nuget server -->\r\n    <packageSource key=\"nuget.org\">\r\n      <package pattern=\"*\" />\r\n    </packageSource>\r\n    <!-- get own packages from private server -->\r\n    <packageSource key=\"custom\">\r\n      <package pattern=\"MyOrg.*\" />\r\n    </packageSource>\r\n  </packageSourceMapping>\r\n\r\n</configuration>\r\n```\r\n\r\nMy local machine has **user-level config** in `~/.nuget/Nuget/Nuget.Config`, which is the same, except for different credentials:\r\n```xml\r\n  <packageSourceCredentials>\r\n    <custom>\r\n      <add key=\"Username\" value=\"my_username\" />\r\n      <add key=\"ClearTextPassword\" value=\"my_personal_api_key\" />\r\n    </custom>\r\n  </packageSourceCredentials>\r\n```\r\n\r\nThat works in the ci/cd server, i.e. in production.\r\n\r\nBut locally (i.e. in development), I get 401/Unauthorized errors when running `dotnet restore` (etc.) - because *the project-level config (which requires extra env vars) overwrites the user-level config*. (I have many other repos with the same issue, so I don't want to export env vars or add stuff to my .bashrc: it's messy, I don't want to do that.)\r\n\r\nThis seems to be the opposite to how it's typically done, where there is some \"default\" checked into source control, and it can be customised during development (with overriding config files) and production (with config files or env vars).\r\n\r\nHow do I do this?"},{"Id":"42350266080","Type":"IssuesEvent","CreatedAt":"2024-09-27T23:03:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13729","RelatedDescription":"Closed issue \".NET SDK 8.0.401: random \"multiple attempts to download the nupkg have failed\"\" (#13729) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nSDK Version: 8.0.401\n\n### Worked before?\n\n8.0.304\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nOur CI randomly fails during the `dotnet restore` phase, with errors like the following: \r\n\r\n> /usr/share/dotnet/sdk/8.0.401/NuGet.targets(174,5): error : The feed 'nuget.org [https://api.nuget.org/v3/index.json]' lists package 'Grpc.Tools.2.65.0' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again.\r\n\r\nOther random examples:\r\n\r\n> /usr/share/dotnet/sdk/8.0.401/NuGet.targets(174,5): error : The feed 'nuget.org [https://api.nuget.org/v3/index.json]' lists package 'Grpc.AspNetCore.Server.Reflection.2.65.0' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again.\r\n\r\n> /usr/share/dotnet/sdk/8.0.401/NuGet.targets(174,5): error : The feed 'nuget.org [https://api.nuget.org/v3/index.json]' lists package 'Dapper.2.1.35' but multiple attempts to download the nupkg have failed. The feed is either invalid or required packages were removed while the current operation was in progress. Verify the package exists on the feed and try again.\r\n\r\nEach time, the package that's not found is a different one, so it seems totally random.\r\n\r\nOf course, all these packages exists:\r\n* [Grpc.Tools.2.65.0](https://www.nuget.org/packages/Grpc.Tools/2.65.0)\r\n* [Grpc.AspNetCore.Server.Reflection.2.65.0](https://www.nuget.org/packages/Grpc.AspNetCore.Server.Reflection/2.65.0)\r\n* [Dapper.2.1.35](https://www.nuget.org/packages/Dapper/2.1.35)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42350246870","Type":"IssuesEvent","CreatedAt":"2024-09-27T23:01:32","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13746","RelatedDescription":"Closed issue \"Version conflict with Nuget.Frameworks.dll in .Net SDK 8.0.401\" (#13746) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\n.NET SDK 8.0.401\n\n### Worked before?\n\n.NET SDK 8.0.304\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWe are using MSBuild in our project. There is a version conflict with newest .Net 8 SDK (8.0.401) which comes with Visual Studio because of Nuget.Framworks.dll. We are using Nuget.Frameworks.dll from the nuget.org with version 6.11.0.119, SDK uses 6.11.0.122 which is not available on nuget.org.\r\nThe version conflict happened, after updating Visual Studio from 17.10.x to 17.11.x (with SDK update from 8.0.3xx to 8.0.4xx). Search for new version on Nuget.org not succesfull. SDK version not available on nuget.org. Manual project reference to nuget.frameworks assembly of SDK no solution for us.\n\n### Verbose Logs\n\n```shell\nSystem.IO.FileLoadException: Could not load file or assembly 'NuGet.Frameworks, Version=6.11.0.122, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Could not find or load a specific file. (0x80131621)\r\nFile name: 'NuGet.Frameworks, Version=6.11.0.122, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n ---> System.IO.FileLoadException: Could not load file or assembly 'NuGet.Frameworks, Version=6.11.0.122, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at Microsoft.Build.Shared.MSBuildLoadContext.Load(AssemblyName assemblyName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingLoad(AssemblyName assemblyName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\r\n   at Microsoft.NET.Build.Tasks.ProcessFrameworkReferences.<>c.<AddPacksForFrameworkReferences>b__217_0(ITaskItem item)\n```\n"},{"Id":"42349285233","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:56:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12997","RelatedDescription":"Closed issue \"Bad data in `nupkg.metadata` should include package id or path in error message\" (#12997) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen performing a restore, the Global Packages Folder (GPF) is commonly used to find packages and read their included `nupkg.metadata` file. When doing so, if that file is empty or contains invalid metadata, this will cause restore to fail.\r\n\r\nThe output from restore does not indicate which package it found with invalid metadata. \r\nA message states: `Found invalid data while decoding.`\r\nEnabling `SHOW_STACK_TRACE` shows the origination is from reading `nupkg.metadata`, but not which file caused it.\r\nDetailed/Diagnostic verbosity does not help either.\r\n\r\n![image](https://github.com/NuGet/Home/assets/49205731/14c5c2e9-cd16-4b60-9c43-46b70a872aa6)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"42349280820","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:56:19","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13822","RelatedDescription":"Opened issue \"[Document] Third-Party Scanner Guidance\" (#13822) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nProvide industry guidance for .NET / NuGet regarding what files to scan and what to look for. This will help in ensuring that third-party scanners are scanning appropriately and not flagging false positives.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349273353","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:55:53","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13821","RelatedDescription":"Opened issue \"[Feature] Restructure MSBuild Packages\" (#13821) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nMSBuild.exe, NuGet SDK\n\n### The Elevator Pitch\n\nRestructure MSBuild packages to separate reference and implementation assemblies. This will help in managing dependencies more effectively and improve the build process.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349267896","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:55:32","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13820","RelatedDescription":"Opened issue \"[Feature] Implement Package Knock-out and Replacement Features\" (#13820) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nImplement features for package knock-out (supplied by platform) and package replacement (ref packages). This will help in managing dependencies more effectively and ensure that only the necessary packages are included in the build.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349256279","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:54:52","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13819","RelatedDescription":"Opened issue \"Enhance .NET Pack to Create Ref and Implementation Directories\" (#13819) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nConsider changes to .NET pack to create ref and implementation directories by default. This will facilitate the separation of compile-time and runtime assets, making it easier to manage dependencies and improve security.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349251476","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:54:33","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13818","RelatedDescription":"Opened issue \"[Feature] Ref Assemblies and Implementation Packages\" (#13818) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nInvestigate the feasibility of NuGet supporting packages that only include reference assemblies and exclude runtime and native assets. This will help prevent vulnerable assemblies from being written to disk and improve security.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349245067","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:54:09","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13817","RelatedDescription":"Opened issue \"NuGet Audit and Plugin SDK\" (#13817) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nCreate a Plugin SDK for different hosts like MSBuild, Roslyn, and Visual Studio extensions to address the issue of transitive dependencies and vulnerabilities. This SDK should help manage the API surface area without taking on the responsibility for servicing the implementations of that surface area.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"42349230952","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:53:14","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13816","RelatedDescription":"Opened issue \"[Epic] Enhancing the NuGet Ecosystem for Security\" (#13816) at NuGet/Home","RelatedBody":"This issue tracks various issues for enhancing the NuGet ecosystem for security."},{"Id":"42349171797","Type":"IssuesEvent","CreatedAt":"2024-09-27T21:49:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13775","RelatedDescription":"Closed issue \"Do not force .NET SDK 8.0.400 to increase minimum version number\" (#13775) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n8.0.400\r\n\r\n### Worked before?\r\n\r\n8.0.300\r\n\r\n### Impact\r\n\r\nNone\r\n\r\n### Repro Steps & Context\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs#targeting-and-support-rules\r\n\r\n.NET documents 8.0.400 as having a minimum VS version of 17.8. However, because NuGet compiles against a higher version of MSBuild, it doesn't work. (note, [there's a pull request to update the docs](https://github.com/dotnet/docs/pull/42393), which might change it given NuGet broke earlier VS)\r\n\r\nNuGet that ships in the 8.0.400 SDK needs to respect the .NET SDK's minimum VS version number.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"41298441972","Type":"IssuesEvent","CreatedAt":"2024-08-23T22:18:02","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Closed issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."},{"Id":"41149312432","Type":"IssuesEvent","CreatedAt":"2024-08-19T18:48:41","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/73","RelatedDescription":"Opened issue \"Scream Test Impacting Alpine Linux Customers on 08/20/2024\" (#73) at NuGet/Announcements","RelatedBody":"On **August 20, 2024**, NuGet.org will conduct a **scream test** that may affect **Alpine Linux** customers. The test is scheduled to begin at **EDT 01:00 PM** and is expected to last between **24 to 72 hours**. We will adjust the test duration based on customer feedback.\r\n\r\nDuring the scream test, **Alpine Linux** customers may encounter **DNS failures** from the [V3 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) due to this [issue](https://github.com/NuGet/NuGetGallery/issues/9736). To mitigate, we recommend that Alpine Linux customers migrate to **Alpine Linux 3.18.0** or a newer version. These newer versions support **TCP fallback** in the DNS resolver.\r\n\r\nTo ensure uninterrupted service during the test, please use the [V2 API](https://learn.microsoft.com/nuget/nuget-org/overview-nuget-org#api-endpoint-for-nugetorg) instead.\r\n\r\nIf you have any **feedback**, **concerns**, or **questions**, feel free to reach out to us at support@nuget.org or by commenting on the discussion issue: [NuGet/Home#12985](https://github.com/NuGet/Home/discussions/12985)."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-09-30T03:30:23.0513165Z","RunDurationInMilliseconds":869}