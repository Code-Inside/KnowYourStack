{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"35224619781","Type":"IssuesEvent","CreatedAt":"2024-01-30T02:00:57","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9790","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Search filters panel blinks when we click 'Apply'\" (#9790) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe checkboxes for the framework generations and TFMs blink when the search page is loaded with filter parameters. \r\n\r\nThe likely cause for it how we initialize checobox states on the page. JavaScript code reads the search page URL and uses it to set the state of the checkboxes on the page. This happens after page load, which is why we see the blinking.\n\n### Repro Steps\n\n1. Select a framework generation or TFM filter checkbox, say `.NET`\r\n2. Click on `Apply`\r\n3. The `.NET` checkbox will blink after the page loads\n\n### Expected Behavior\n\nThe checkbox states should be set in the `.cshtml` itself so that we don't need to run any JavaScript.\r\n\r\nWe can modify the `FrameworkFilterGroup` objects in the view model to have a checkbox state enum with `Checked/Unchecked/Indeterminate` values.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\nSee https://github.com/NuGet/NuGetGallery/pull/9782#issuecomment-1907354318"},{"Id":"35177150237","Type":"IssuesEvent","CreatedAt":"2024-01-28T05:10:49","Actor":"toras9000","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9789","RelatedDescription":"Opened issue \"[NuGet.org Bug]: The primary search feed for api.nuget.org may be staying.\" (#9789) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe primary SearchQueryService and secondary SearchQueryService presented in the following feeds return different numbers of downloads.\r\nThe primary SearchQueryService appears to be lagging behind.\r\nhttps://api.nuget.org/v3/index.json\r\n\r\nI do not know if this is the planned behavior.\r\n\n\n### Repro Steps\n\nI compared the following two results (usnc and ussc)\r\n\r\n- Primary SearchQueryService\r\n    - https://azuresearch-usnc.nuget.org/query?q=packageid:System.Data.SQLite.Core\r\n- Secondary SearchQueryService\r\n    - https://azuresearch-ussc.nuget.org/query?q=packageid:System.Data.SQLite.Core\r\n\r\nThe following web page display is close to the secondary\r\n\r\n- Web page\r\n    - https://www.nuget.org/packages/System.Data.SQLite.Core\r\n\n\n### Expected Behavior\n\nIf this is the response for the intended reason, then this is not a particular problem.\r\nI created this issue because I had a question about the fact that the primary appears to return old results.\r\n\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35168776420","Type":"IssuesEvent","CreatedAt":"2024-01-27T11:43:52","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9784","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Number of downloads changes among web and mobile.\" (#9784) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nOn last view, I realized number of downloads don't change on web view and I was suspecting if there is a problem through data. Then I checked, new versions of packages' download count and check mobile view to see same result. Interestingly, mobile view show correct number of downloads while web view doesn't.\n\n### Repro Steps\n\n1. Open URL on web view. https://www.nuget.org/profiles/Okullu\r\n2. Open URL on mobile view. https://www.nuget.org/profiles/Okullu\n\n### Expected Behavior\n\nSame number of downloads on both usage of same web site.\n\n### Screenshots\n\nMobile view:\r\n![photo_2024-01-23_17-36-22](https://github.com/NuGet/NuGetGallery/assets/4971757/cd22f130-df9e-410c-b74a-ad176073bbd1)\r\n\r\nWeb view: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/f30d0759-dee5-4b32-ac6e-f86a48ee1a07)\r\n\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35128052414","Type":"PullRequestEvent","CreatedAt":"2024-01-25T18:31:55","Actor":"dependabot[bot]","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9781","RelatedDescription":"Closed pull request \"Bump System.Data.SqlClient from 4.8.5 to 4.8.6 in /src/NuGet.Services.Entities\" (#9781) at NuGet/NuGetGallery","RelatedBody":"Bumps [System.Data.SqlClient](https://github.com/dotnet/corefx) from 4.8.5 to 4.8.6.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/dotnet/corefx/releases\">System.Data.SqlClient's releases</a>.</em></p>\n<blockquote>\n<h2>.NET Core 2.1.0 RC1</h2>\n<ul>\n<li><a href=\"https://github.com/dotnet/core/blob/master/release-notes/2.1/Preview/2.1.0-rc1.md\">Release Notes</a></li>\n<li><a href=\"https://github.com/dotnet/core/blob/master/release-notes/2.1/Preview/2.1.0-rc1-known-issues.md\">Known Issues</a></li>\n<li><a href=\"https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.1.0-rc1-download.md\">Download and Install</a></li>\n</ul>\n<h2>Repos</h2>\n<ul>\n<li><a href=\"https://github.com/dotnet/coreclr/releases/tag/v2.1-rc1\">CoreCLR</a></li>\n<li><a href=\"https://github.com/dotnet/corefx/releases/tag/v2.1-rc1\">CoreFX</a></li>\n<li><a href=\"https://github.com/dotnet/core-setup/releases/tag/v2.1-rc1\">Core-Setup</a></li>\n<li><a href=\"https://github.com/dotnet/cli/releases/tag/v2.1.300-rc1-008673\">CLI</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/dotnet/corefx/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=System.Data.SqlClient&package-manager=nuget&previous-version=4.8.5&new-version=4.8.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/NuGet/NuGetGallery/network/alerts).\n\n</details>"},{"Id":"35128034899","Type":"PullRequestEvent","CreatedAt":"2024-01-25T18:31:11","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9788","RelatedDescription":"Merged pull request \"[Release 1/25/2024] Gallery dev to main\" (#9788) at NuGet/NuGetGallery","RelatedBody":"Deployment for System.data.SqlClient security vulnerability"},{"Id":"35128026785","Type":"IssuesEvent","CreatedAt":"2024-01-25T18:30:51","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9777","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Unable to upload package\" (#9777) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nHi, i'm trying to upload package using \"Upload\" button at https://www.nuget.org/packages/upload, but i'm receiving \"The package ID 'PackageName' is not available.\".\r\nI checked package name and is \"supposed\" to be not registered previously but is not letting me register anyways. Is a modification/version for an existing library registered previously on NuGet, but prefix is not registered (it hasn't have blue check)\r\n\r\nCan you help me to check if is registered or not?\r\n\r\nMy library name was: \"EasyNetQ.Legacy.NetStandard\"\r\n\r\nand former/based library is \"EasyNetQ\" (https://www.nuget.org/packages/EasyNetQ/8.0.0-beta95)\n\n### Repro Steps\n\nTry to upload new package called \"EasyNetQ.Legacy.NetStandard\"\n\n### Expected Behavior\n\nI expect nuget to let me upload my new package because is supposed to be \"free\".\n\n### Screenshots\n\n![Capture](https://github.com/NuGet/NuGetGallery/assets/16104257/fd5176ba-2f08-4c3a-b19c-f09a3915712b)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"35127940858","Type":"PullRequestEvent","CreatedAt":"2024-01-25T18:27:23","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9788","RelatedDescription":"Opened pull request \"[Release 1/25/2024] Gallery dev to main\" (#9788) at NuGet/NuGetGallery","RelatedBody":"Deployment for System.data.SqlClient security vulnerability"},{"Id":"35101376166","Type":"PullRequestEvent","CreatedAt":"2024-01-25T00:00:23","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9787","RelatedDescription":"Merged pull request \"update job.common with security fix\" (#9787) at NuGet/NuGetGallery","RelatedBody":"Update the job.commons since we updated sql.client fix in nuget.jobs, here is related PR: https://github.com/NuGet/NuGet.Jobs/pull/1172\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5199"},{"Id":"35100857559","Type":"PullRequestEvent","CreatedAt":"2024-01-24T23:25:34","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9787","RelatedDescription":"Opened pull request \"update job.common with security fix\" (#9787) at NuGet/NuGetGallery","RelatedBody":"Update the job.commons since we updated sql.client fix in nuget.jobs, here is related PR: https://github.com/NuGet/NuGet.Jobs/pull/1172\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/5199"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"35258390036","Type":"PullRequestEvent","CreatedAt":"2024-01-30T23:06:31","Actor":"albarry4","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13208","RelatedDescription":"Opened pull request \"NuGet in VS Code/C# Dev Kit MVP Proposal\" (#13208) at NuGet/Home","RelatedBody":"This proposal introduces a Visual Studio Code NuGet package management experience including command palette flows and integration with C# Dev Kit. It covers the initial experiences for adding, removing, and updating a NuGet package. This document covers the minimum viable product (MVP) for a NuGet command palette experience, and leaves room for growth and expansion on these initial concepts, both in enhancing these 3 features, or in the addition of more NuGet command palette features.\r\n\r\nWe are actively looking for feedback on this proposal and working to improve the experience along the way. Any suggestions or comments are welcome and appreciated!\r\n\r\nLink to Rendered Spec here"},{"Id":"35253970887","Type":"IssuesEvent","CreatedAt":"2024-01-30T19:57:47","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13207","RelatedDescription":"Closed issue \"StringBuilder.Append(int) causes unnecessary allocations\" (#13207) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nOn hot paths, our code should avoid `StringBuilder.Append(int)` since it allocates a string to append first.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35253953469","Type":"IssuesEvent","CreatedAt":"2024-01-30T19:57:05","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13207","RelatedDescription":"Opened issue \"StringBuilder.Append(int) causes unnecessary allocations\" (#13207) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nOn hot paths, our code should avoid `StringBuilder.Append(int)` since it allocates a string to append first.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35253902385","Type":"IssuesEvent","CreatedAt":"2024-01-30T19:55:05","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13186","RelatedDescription":"Closed issue \"Owner package metadata is an array in JSON but a string in Protocol types\" (#13186) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nOther/NA\n\n### Current Behavior\n\nOwner metadata is provided as an array, but Protocol immediately converts this to a comma-delmited string upon parsing the data.\n\n### Desired Behavior\n\nPreserve the array of owners so that the enumeration can be used by NuGet Client.\n\n### Additional Context\n\n_No response_"},{"Id":"35225622782","Type":"IssuesEvent","CreatedAt":"2024-01-30T03:03:51","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13206","RelatedDescription":"Opened issue \"Caching task results can cause all continuations to occur on the same thread\" (#13206) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe, dotnet.exe\n\n### Product Version\n\nAll\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nDuring a restore, NuGet's code has several places where it caches a task for reuse by graph walks.  Some large restores which normally take 30 minutes are taking up to 3 hours.  Analysis of the memory dump shows thousands of tasks waiting to be scheduled and only one task running at a time.\n\nOne such code path is here: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.DependencyResolver.Core/ResolverUtility.cs#L238\n\nThe issue is around how we're using a `Dictionary<TKey, Task<TValue>` or `ConcurrentDictionary<TKey, Task<TValue>>`.\n\nConsider the following code:\n\n```C#\nConcurrentDictionary<string, Task> taskCache = new ConcurrentDictionary<string, Task>(StringComparer.OrdinalIgnoreCase);\n\nfor (int i = 0; i < Iterations; i++)\n{\n    int num = i;\n    Task.Run(() => WorkerTask(num, taskCache));\n}\n\nConsole.ReadLine();\n\nvoid CachedTask()\n{\n    LogCacheTaskStart();\n    Thread.Sleep(DelayInMilliseconds);\n    LogCacheTaskStop();\n}\n\nasync Task WorkerTask(int iteration, ConcurrentDictionary<string, Task> taskCache)\n{\n    await Task.Delay(Random.Next(100, 400));\n    LogWorkerTaskStart(iteration);\n    if (!taskCache.TryGetValue(\"1\", out Task task))\n    {\n        task = taskCache.GetOrAdd(\"1\", Task.Run(CachedTask));\n    }\n    await task;\n    LogWorkerTaskWorking(iteration);\n    Thread.Sleep(DelayInMilliseconds);\n    LogWorkerTaskStop(iteration);\n}\n```\n\nThis will spawn N threads which all are waiting for a Task in the cache to complete.  All worker threads receive the same Task and all of them resume on the same thread, causing execution to all happen on the same CPU core.\n\nOutput:\n```\nWorker task 2 started, waiting on cached task (Thread 13)...\nStarting caching task (Thread 14)...\nWorker task 8 started, waiting on cached task (Thread 5)...\nWorker task 7 started, waiting on cached task (Thread 7)...\nWorker task 4 started, waiting on cached task (Thread 4)...\nWorker task 5 started, waiting on cached task (Thread 8)...\nWorker task 6 started, waiting on cached task (Thread 12)...\nWorker task 9 started, waiting on cached task (Thread 6)...\nWorker task 0 started, waiting on cached task (Thread 9)...\nWorker task 1 started, waiting on cached task (Thread 3)...\nWorker task 3 started, waiting on cached task (Thread 11)...\nCached task complete (Thread 14).\nCached task complete, worker task 2 doing work (Thread 14)...\nWorker task 2 complete (Thread 14)\nCached task complete, worker task 8 doing work (Thread 14)...\nWorker task 8 complete (Thread 14)\nCached task complete, worker task 7 doing work (Thread 14)...\nWorker task 7 complete (Thread 14)\nCached task complete, worker task 4 doing work (Thread 14)...\nWorker task 4 complete (Thread 14)\nCached task complete, worker task 5 doing work (Thread 14)...\nWorker task 5 complete (Thread 14)\nCached task complete, worker task 6 doing work (Thread 14)...\nWorker task 6 complete (Thread 14)\nCached task complete, worker task 9 doing work (Thread 14)...\nWorker task 9 complete (Thread 14)\nCached task complete, worker task 0 doing work (Thread 14)...\nWorker task 0 complete (Thread 14)\nCached task complete, worker task 1 doing work (Thread 14)...\nWorker task 1 complete (Thread 14)\nCached task complete, worker task 3 doing work (Thread 14)...\nWorker task 3 complete (Thread 14)\n```\n\nYou can clearly see that each worker task is resuming on the same thread at the cached task completed on and the worker threads all execute serially.\n\nThe problem seems to be how the continuations happen on the same thread.  The solution is to use a `TaskCompletionSource<TValue>` instead.\n\n```c#\nDictionary<string, Task> taskCache = new Dictionary<string, Task>(StringComparer.OrdinalIgnoreCase);\n\nfor (int i = 0; i < Iterations; i++)\n{\n    int num = i;\n    Task.Run(() => WorkerTask(num, taskCache));\n}\n\nConsole.ReadLine();\n\nreturn Task.CompletedTask;\n\nasync Task CachedTaskAsync()\n{\n    LogCacheTaskStart();\n    await Task.Delay(DelayInMilliseconds);\n    LogCacheTaskStop();\n}\n\nasync Task WorkerTask(int iteration, Dictionary<string, Task> taskCache)\n{\n    LogWorkerTaskStart(iteration);\n\n    if (!taskCache.TryGetValue(\"1\", out Task task))\n    {\n        lock (taskCache)\n        {\n            if (!taskCache.TryGetValue(\"1\", out task))\n            {\n                TaskCompletionSource<int> taskCompletionSource = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);\n\n                CachedTaskAsync().ContinueWith((task) =>\n                {\n                    if (task.IsCanceled)\n                    {\n                        taskCompletionSource.SetCanceled();\n                    }\n                    else if (task.IsFaulted)\n                    {\n                        taskCompletionSource.SetException(task.Exception);\n                    }\n                    else\n                    {\n                        taskCompletionSource.SetResult(0);\n                    }\n                });\n\n                task = taskCache[\"1\"] = taskCompletionSource.Task;\n            }\n        }\n    }\n    await task;\n    LogWorkerTaskWorking(iteration);\n    Thread.Sleep(DelayInMilliseconds);\n    LogWorkerTaskStop(iteration);\n}\n```\n\nThat code uses `ContinueWith()` and a `TaskCompletionSource` which specifies that continuations should happen asynchronously and has the following output:\n```\nWorker task 7 started, waiting on cached task (Thread 4)...\nWorker task 0 started, waiting on cached task (Thread 3)...\nWorker task 2 started, waiting on cached task (Thread 5)...\nWorker task 6 started, waiting on cached task (Thread 12)...\nWorker task 3 started, waiting on cached task (Thread 7)...\nWorker task 8 started, waiting on cached task (Thread 11)...\nWorker task 4 started, waiting on cached task (Thread 10)...\nWorker task 5 started, waiting on cached task (Thread 8)...\nWorker task 9 started, waiting on cached task (Thread 14)...\nWorker task 1 started, waiting on cached task (Thread 6)...\nStarting caching task (Thread 4)...\nCached task complete (Thread 13).\nCached task complete, worker task 0 doing work (Thread 12)...\nCached task complete, worker task 4 doing work (Thread 10)...\nCached task complete, worker task 7 doing work (Thread 13)...\nCached task complete, worker task 2 doing work (Thread 11)...\nCached task complete, worker task 3 doing work (Thread 9)...\nCached task complete, worker task 6 doing work (Thread 7)...\nCached task complete, worker task 5 doing work (Thread 3)...\nCached task complete, worker task 8 doing work (Thread 4)...\nCached task complete, worker task 9 doing work (Thread 5)...\nCached task complete, worker task 1 doing work (Thread 8)...\nWorker task 5 complete (Thread 3)\nWorker task 4 complete (Thread 10)\nWorker task 1 complete (Thread 8)\nWorker task 9 complete (Thread 5)\nWorker task 6 complete (Thread 7)\nWorker task 3 complete (Thread 9)\nWorker task 2 complete (Thread 11)\nWorker task 7 complete (Thread 13)\nWorker task 8 complete (Thread 4)\nWorker task 0 complete (Thread 12)\n```\n\nNow all worker tasks resume on a different thread and continue to execute in parallel.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35209953522","Type":"IssuesEvent","CreatedAt":"2024-01-29T15:57:10","Actor":"tcartwright","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13199","RelatedDescription":"Closed issue \"Exception when debugging Nuget.CommandLine\" (#13199) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nMicrosoft Visual Studio Professional 2022 Version 17.8.5+34511.84\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI pulled the latest dev branch from https://github.com/nuget/nuget.client, and have been trying to debug the Nuget.CommandLine with a restore. However, each time I run I get this exception:\r\n\r\n> error MSB4062: The \"NuGet.Build.Tasks.WarnForInvalidProjectsTask\" task could not be loaded from the assembly C:\\src\\NuGet.Client\\artifacts\\NuGet.CommandLine\\bin\\Debug\\net472\\NuGet.Build.Tasks.dll. Could not load file or assembly 'NuGet.Build.Tasks, Version=6.10.0.32767, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nI have tried several things to try to be able to run, but nothing has worked.\n\n### Verbose Logs\n\n_No response_"},{"Id":"35192507282","Type":"IssuesEvent","CreatedAt":"2024-01-29T06:20:20","Actor":"DotNetNext","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13204","RelatedDescription":"Opened issue \"Not published on    .net core wwwroot\" (#13204) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### The Elevator Pitch\n\nThe NUGET bag I packed\r\nhttps://www.nuget.org/packages/Rezero\r\n\r\n![image](https://github.com/NuGet/Home/assets/12455385/38f8e99b-334c-4636-8115-a8089768ef7c)\r\n\r\nI don't know if it's my usage\r\nBut it just didn't work out\n\n### Additional Context and Details\n\n_No response_"},{"Id":"35165077035","Type":"IssuesEvent","CreatedAt":"2024-01-27T03:48:41","Actor":"benluelo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13202","RelatedDescription":"Opened issue \".netrc support\" (#13202) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, dotnet.exe\n\n### The Elevator Pitch\n\nCurrently, the only way to authenticate with a source requiring plain password credentials is by putting the raw credentials in the nuget.config, which is obviously an issue if these files are stored in source control. It would be convenient if nuget/dotnet would read the .netrc to fetch credentials.\r\n\r\nThe private source I'm using is GitLab.\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-31T03:30:17.7761441Z","RunDurationInMilliseconds":968}