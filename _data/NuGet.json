{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13078776090","Type":"IssuesEvent","CreatedAt":"2020-08-01T00:40:26","Actor":"xsavron","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8137","RelatedDescription":"Opened issue \"Problem\" (#8137) at NuGet/NuGetGallery","RelatedBody":"Hello! I ran into a problem  nuget spec doesn't detected .csproj .\r\n\r\nthat's my .csproj file\r\n\r\n`<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <PackageId>Test_Nuget</PackageId>\r\n    <Version>1.0.0.1</Version>\r\n    <Authors>name</Authors>\r\n    <Company>company</Company>\r\n    <IsWebBootstrapper>false</IsWebBootstrapper>\r\n    <PublishUrl>publish\\</PublishUrl>\r\n    <Install>true</Install>\r\n    <InstallFrom>Disk</InstallFrom>\r\n    <UpdateEnabled>false</UpdateEnabled>\r\n    <UpdateMode>Foreground</UpdateMode>\r\n    <UpdateInterval>7</UpdateInterval>\r\n    <UpdateIntervalUnits>Days</UpdateIntervalUnits>\r\n    <UpdatePeriodically>false</UpdatePeriodically>\r\n    <UpdateRequired>false</UpdateRequired>\r\n    <MapFileExtensions>true</MapFileExtensions>\r\n    <ApplicationRevision>0</ApplicationRevision>\r\n    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>\r\n    <UseApplicationTrust>false</UseApplicationTrust>\r\n    <BootstrapperEnabled>true</BootstrapperEnabled>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <StartupObject>\r\n    </StartupObject>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProjectGuid>{D93AC967-6EFD-4C44-9959-1701ABE13D17}</ProjectGuid>\r\n    <OutputType>Exe</OutputType>\r\n    <RootNamespace>ConsoleApp4</RootNamespace>\r\n    <AssemblyName>ConsoleApp4</AssemblyName>\r\n    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>\r\n    <FileAlignment>512</FileAlignment>\r\n    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>\r\n    <Deterministic>true</Deterministic>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.cs\" />\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"App.config\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <BootstrapperPackage Include=\".NETFramework,Version=v4.6\">\r\n      <Visible>False</Visible>\r\n      <ProductName>Microsoft .NET Framework 4.6 %28x86 and x64%29</ProductName>\r\n      <Install>true</Install>\r\n    </BootstrapperPackage>\r\n    <BootstrapperPackage Include=\"Microsoft.Net.Framework.3.5.SP1\">\r\n      <Visible>False</Visible>\r\n      <ProductName>.NET Framework 3.5 SP1</ProductName>\r\n      <Install>false</Install>\r\n    </BootstrapperPackage>\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>`\r\n\r\nafter spec i have create .nupkg but it's empty\r\n\r\n`<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package >\r\n  <metadata>\r\n    <id>$id$</id>\r\n    <version>$version$</version>\r\n    <title>$title$</title>\r\n    <authors>$author$</authors>\r\n    <owners>$author$</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <projectUrl>http://project_url_here_or_delete_this_line/</projectUrl>\r\n    <iconUrl>http://icon_url_here_or_delete_this_line/</iconUrl>\r\n    <description>$description$</description>\r\n    <releaseNotes>Summary of changes made in this release of the package.</releaseNotes>\r\n    <copyright>Copyright 2020</copyright>\r\n    <tags>Tag1 Tag2</tags>\r\n  </metadata>\r\n</package>`\r\n\r\nwhat am I doing wrong or what might be the problem?"},{"Id":"13078227977","Type":"IssuesEvent","CreatedAt":"2020-07-31T22:54:36","Actor":"chgill-MSFT","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8136","RelatedDescription":"Opened issue \"Breadcrumb link to package details from Report Abuse page doesn't for packages with additional build metadata in version string\" (#8136) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\n**Applies to packages with additional metadata in their version string.**\r\n\r\nAfter clicking on \"Report\" link on package details page, breadcrumb to get back to the package details page doesn't work if the package version string has additional build metadata. This is likely because the additional build metadata is appended to the URL when it shouldn't be.\r\n\r\nExample of version string with additional build metadata:\r\n![image](https://user-images.githubusercontent.com/15097183/89084748-dcde9400-d345-11ea-9f24-fb3e1dad28e2.png)\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Go to https://www.nuget.org/packages/NuGet.Packaging/5.6.0/ReportAbuse\r\n2. Click breadcrumb back to the package details page in the top left corner\r\n![image](https://user-images.githubusercontent.com/15097183/89083260-4f9b3f80-d345-11ea-8a96-95bb030f8667.png)\r\n\r\n3. Get Error 404\r\n4. See that it works if you remove the additional build metadata from the URL\r\n\r\nURL with metadata (wrong): https://www.nuget.org/packages/NuGet.Packaging/5.6.0%2b636570e68732c1f718ede9ca07802d7b1cc69aa0\r\n\r\nCorrect URL: https://www.nuget.org/packages/NuGet.Packaging/5.6.0\r\n\r\n### Expected behavior\r\nBreadcrumb link back to package details page should work.\r\n\r\n### GIF of bug repro with NuGet.Packaging\r\n![Link back from Report page doesn't work with package versions with build metadata](https://user-images.githubusercontent.com/15097183/89083178-fe8b4b80-d344-11ea-9390-c97dedb8883a.gif)\r\n\r\n### Additional context\r\nAdditional examples for repro:\r\n- https://www.nuget.org/packages/Lib.Build/5.0.0-preview.2.1%2b5cb4e1e\r\n- https://www.nuget.org/packages/ConfigHandler/1.2.1%2b42c1ae0"},{"Id":"13076271729","Type":"IssuesEvent","CreatedAt":"2020-07-31T18:39:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8078","RelatedDescription":"Closed issue \"[Dependents] Investigate query performance issue\" (#8078) at NuGet/NuGetGallery","RelatedBody":"We shipped the package dependents feature to PROD but noticed high query times. After some conversations with the SQL Server team this is related to the query plan that is being selected via parameter sniffing.\r\n\r\nWe got into a situation in PROD where there are at least two wildly different query plans that are appropriate for their respective parameter values. For example, the query plan of sniffed from Newtonsoft.Json looks totally different from BaseTestPackage. The performance when the query plans get mixed up is unacceptable. For example, using a BaseTestPackage parameter value for the Newtonsoft.Json query plan results in a query that takes longer than 30 seconds.\r\n\r\nSome options:\r\n\r\n1. Use `OPTION ( OPTIMIZE FOR UNKNOWN )` - this will cause very depended upon packages like Newtonsoft.Json to take 1-3 seconds per query. Maybe this okay with caching.\r\n1. Use `OPTION ( RECOMPILE )` and allow every parameter value and query execution to evaluate its own query plan.\r\n1. Investigate other options with the SQL Server team (perhaps there are new options coming out or we are missing something)\r\n\r\nMy vote is to try option 2 in PROD and verify DB and App Service resource utilization is nominal.\r\n\r\nThere are extensions to Entity Framework that allow you to put `OPTION ( ... )` in then generated SQL:\r\nhttps://stackoverflow.com/a/40387038\r\nhttps://stackoverflow.com/a/10918838\r\n\r\nQuery plans:  [query-plans.zip](https://github.com/NuGet/NuGetGallery/files/4854625/query-plans.zip)\r\n\r\n## Top 5 query\r\n\r\n**Optimal for small packages:**\r\n![image](https://user-images.githubusercontent.com/94054/86181226-79f9a300-bae2-11ea-97c0-3f90caace6b6.png)\r\n\r\n**Optimal for Newtonsoft.Json:**\r\n![image](https://user-images.githubusercontent.com/94054/86181273-909ffa00-bae2-11ea-95aa-0cfdcd4541a6.png)\r\n\r\n## Total count query\r\n\r\n**Optimal for small packages:**\r\n![image](https://user-images.githubusercontent.com/94054/86181343-b0372280-bae2-11ea-9d8c-c370446af731.png)\r\n\r\n**Optimal for Newtonsoft.Json:**\r\n![image](https://user-images.githubusercontent.com/94054/86181363-b9c08a80-bae2-11ea-9e36-cd70f3596c70.png)\r\n\r\n"},{"Id":"13076037733","Type":"IssuesEvent","CreatedAt":"2020-07-31T18:12:49","Actor":"vsfeedback","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8135","RelatedDescription":"Opened issue \"Marketplace data improvement for publishers\" (#8135) at NuGet/NuGetGallery","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/566663/marketplace-data-improvement-for-publishers.html)._\n\n---\n<p>Hello </p> <p>Is it possible to get historical data displayed for publishers - from the time the extension was published. Currently it is limited to past 180 days window, which is very limiting. Can you expand that to as much as possible. </p><p></p><p>I am primarily interested in two improvements</p><p>  \n</p><p>1. Extending the current report window (180 days). Idealy this window would be 1 year +... if not, since the very first day extension was introduced on the marketplace.</p> <p>  \n</p><p>2. Ability to filter by geography - per country and continent... when this info is known. I am OK with having a pool of people who are also 'unknown' if geo info is not available. </p><p>Thanks</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 5/14/2019, 01:52 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>\n#### Mads Kristensen [MSFT] on 6/10/2019, 11:20 AM: \n\n<p>Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input</p>\n\n#### Stefan Stefanov on 7/2/2019, 10:50 AM: \n\n<p>I also believe this would be very beneficial, as the current date is not enough to make any conclusions.</p>\n\n#### Gabriel Torok on 12/2/2019, 06:10 AM: \n\n<p>Likewise, this would be helpful for us as well.</p>\n\n#### Katie DeSantis on 12/2/2019, 06:32 AM: \n\n<p>We too would benefit from this information</p>\n\n#### Dan Wright on 12/2/2019, 08:44 AM: \n\n<p>This would be really beneficial for us too. </p><p>Thanks. </p>\n\n#### andre rolle on 12/2/2019, 03:35 PM: \n\n<p>Yes we definitely need this information to help improve our capabilities in improving how we create and published our application in visual studios marketplace.</p>\n\n#### andre rolle on 12/2/2019, 03:49 PM: \n\n<p>The management of Microsoft would change there mind in extending the 90 days to at least 1 year if possible. We as developers and others who interact with creating and publishing an application or software to visual studios marketplace. Really need this information to improve everything we do to make our app 100% functional an smooth going.</p>\n"},{"Id":"13075999021","Type":"PullRequestEvent","CreatedAt":"2020-07-31T18:08:23","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8132","RelatedDescription":"Merged pull request \"Use protected configuration provider instead of reflection (WITHOUT DI)\" (#8132) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/8121\r\nRelated to https://github.com/NuGet/Engineering/issues/3206\r\n\r\nOverall, this takes a similar approach as before (https://github.com/NuGet/NuGetGallery/pull/8098) but avoids using the ambient dependency injection container. Previously, we saw in 2 of the 10 nodes get into a bad state some time after deployment. This bad state described a disposed DI container. My theory is that the following occurred:\r\n\r\n1. Instance starts up\r\n1. First request that needs machine key hits the fresh instance.\r\n1. Request is cancelled, terminated or some other action leading to the request scope to be disposed.\r\n1. Machine key configuration provider is still invoked\r\n1. `DependencyResolver.Current` throws because it sees the DI scope for the request is disposed.\r\n1. This bad state is cached and all future requests for the machine key APIs fail.\r\n\r\nI was unable to fully reproduce the problem but I was able to reproduce the cached failure (last step). I have our DEV perf environment running with the bad build for the past 3 days, constantly hitting the log-in page (which needs the machine key). No errors yet. I will keep it running for the next week or so in hopes of finding a repro.\r\n\r\nI am resolving this issue by completely avoiding the stack that threw the error. That is, I am not using DI at all. I also added some tracing to help future debugging."},{"Id":"13075955153","Type":"IssuesEvent","CreatedAt":"2020-07-31T18:03:24","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8066","RelatedDescription":"Closed issue \"Add documentation for advanced search\" (#8066) at NuGet/NuGetGallery","RelatedBody":"Add the documentation about the new sorting and filtering features on https://docs.microsoft.com/en-us/nuget/consume-packages/finding-and-choosing-packages"},{"Id":"13075570458","Type":"IssuesEvent","CreatedAt":"2020-07-31T17:19:48","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8074","RelatedDescription":"Closed issue \"[Advanced search] Update .NET Core tool documentation\" (#8074) at NuGet/NuGetGallery","RelatedBody":"Current documentation says ([link](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools#find-a-tool)):\r\n\r\n> Currently, .NET Core doesn't have a tool search feature. Here are some ways to find tools:\r\n> \r\n> * See the list of tools in the natemcmaster/dotnet-tools GitHub repository.\r\n> * Use ToolGet to search for .NET tools.\r\n> * See the source code for the tools created by the ASP.NET Core team in the Tools directory of the dotnet/aspnetcore GitHub repository.\r\n> * Learn about diagnostic tools at .NET Core dotnet diagnostic tools.\r\n> * Search the NuGet website. However, the NuGet site doesn't yet have a feature that lets you search only for tool packages.\r\n\r\nWe should update this once we release the advanced search feature."},{"Id":"13075036094","Type":"PullRequestEvent","CreatedAt":"2020-07-31T16:23:15","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8134","RelatedDescription":"Opened pull request \"Add note on functional tests' requirements\" (#8134) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13071038530","Type":"IssuesEvent","CreatedAt":"2020-07-31T09:31:22","Actor":"Kingofjoy","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8133","RelatedDescription":"Opened issue \"Windows Authentication does not work with NuGet.Server\" (#8133) at NuGet/NuGetGallery","RelatedBody":"I have attempted to host my packages through my private intranet NuGet.Server for my firends. Yet, it worked well.\r\nBut, when i added a layer of security Windows Authentication, it stopped working!\r\n\r\n` <authentication mode=\"Windows\"/>\r\n    <authorization>\r\n      <deny users=\"?\"/>\r\n    </authorization>`\r\n\r\nWhile i searched first with visual studio it asked for credentials, but then it does not show any results. In console it found below.\r\n\r\n[MyNuget] The V2 feed at 'http://localhost/MyNuget/nuget/Search()?$filter=IsLatestVersion&searchTerm=''&targetFramework='net471'&includePrerelease=false&$skip=0&$top=26&semVerLevel=2.0.0' returned an unexpected status code '401 Unauthorized'.\r\n\r\nthen i opened browser to check it said similar\r\n\r\nError message 401.2.: Unauthorized: Logon failed due to server configuration.\r\n\r\n\r\n- Config file is untouched, i just just added these authentication lines\r\n- .Net Framework 4.6 and 4.7.1 both didnt work\r\n- I am running VS, Browser both inside domain\r\n- IIS Express also failed\r\n\r\nPlease help to make this work...\r\n\r\n[Web.config.txt](https://github.com/NuGet/NuGetGallery/files/5006235/Web.config.txt)\r\n"},{"Id":"13066735454","Type":"PullRequestEvent","CreatedAt":"2020-07-30T22:24:00","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8115","RelatedDescription":"Merged pull request \"Add functional tests on Gallery for Advanced Search\" (#8115) at NuGet/NuGetGallery","RelatedBody":"This PR adds some basic functional tests on the Gallery for Advanced Search. Stuff being tested:\r\n\r\n- package type filter (dependency, template and a random type \"ARandomType\")\r\n- total downloads sorting\r\n- last updated sorting\r\n\r\nEdit:\r\n- Functional tests on [DEV](https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=72898)\r\n- Functional tests on [PROD](https://nuget.visualstudio.com/NuGetBuild/_build/results?buildId=72897)"},{"Id":"13066548738","Type":"PullRequestEvent","CreatedAt":"2020-07-30T21:56:58","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8132","RelatedDescription":"Opened pull request \"Use protected configuration provider instead of reflection (WITHOUT DI)\" (#8132) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/8121\r\nRelated to https://github.com/NuGet/Engineering/issues/3206\r\n\r\nOverall, this takes a similar approach as before (https://github.com/NuGet/NuGetGallery/pull/8098) but avoids using the ambient dependency injection container. Previously, we saw in 2 of the 10 nodes get into a bad state some time after deployment. This bad state described a disposed DI container. My theory is that the following occurred:\r\n\r\n1. Instance starts up\r\n1. First request that needs machine key hits the fresh instance.\r\n1. Request is cancelled, terminated or some other action leading to the request scope to be disposed.\r\n1. Machine key configuration provider is still invoked\r\n1. `DependencyResolver.Current` throws because it sees the DI scope for the request is disposed.\r\n1. This bad state is cached and all future requests for the machine key APIs fail.\r\n\r\nI was unable to fully reproduce the problem but I was able to reproduce the cached failure (last step). I have our DEV perf environment running with the bad build for the past 3 days, constantly hitting the log-in page (which needs the machine key). No errors yet. I will keep it running for the next week or so in hopes of finding a repro.\r\n\r\nI am resolving this issue by completely avoiding the stack that threw the error. That is, I am not using DI at all. I also added some tracing to help future debugging."},{"Id":"13065657437","Type":"IssuesEvent","CreatedAt":"2020-07-30T20:11:51","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8059","RelatedDescription":"Closed issue \"Add advanced search UI to Gallery\" (#8059) at NuGet/NuGetGallery","RelatedBody":"Create the designed UI in the Gallery side for advanced search"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13085724328","Type":"IssuesEvent","CreatedAt":"2020-08-02T03:02:57","Actor":"tanaka-takayoshi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4393","RelatedDescription":"Closed issue \"``dotnet nuget push *.nupkg`` doesn't push more than one file\" (#4393) at NuGet/Home","RelatedBody":"see also https://github.com/dotnet/cli/issues/5436\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet (on Linux)\r\n\r\nNuGet version (x.x.x.xxx): seems RC4 (I have no idea to confirm it)\r\n\r\ndotnet.exe --version (if appropriate): 1.0.0-rc4-004598\r\n\r\nVS version (if appropriate):NA\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):RHEL 7.3\r\n\r\nWorked before? If so, with which NuGet version:No. \r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install dotnet SDK daily build package\r\n2. locate 2 different nupkg files\r\n3. set up NuGet Server and API key as you can push nupkg to NuGet Server\r\n4. run ``dotnet nuget push *.nupkg``\r\n5. Only one nupkg file is uploaded.\r\n\r\n## Other suggested things\r\n\r\nI expect I can push all the nupkg files.\r\nhttps://docs.microsoft.com/en-us/dotnet/articles/core/preview3/tools/dotnet-nuget-push\r\n\r\n```\r\n$  /opt/dotnet/dotnet --info\r\n.NET Command Line Tools (1.0.0-rc4-004598)\r\n\r\nProduct Information:\r\n Version:            1.0.0-rc4-004598\r\n Commit SHA-1 hash:  1dfee9ead8\r\n\r\nRuntime Environment:\r\n OS Name:     rhel\r\n OS Version:  7.3\r\n OS Platform: Linux\r\n RID:         rhel.7.2-x64\r\n Base Path:   /opt/dotnet/sdk/1.0.0-rc4-004598\r\n```\r\n\r\n\r\n### Verbose Logs\r\n\r\n```\r\n$ ls\r\nlibuv.1.9.1.nupkg  Microsoft.AspNetCore.WebUtilities.1.0.0.nupkg\r\n$  /opt/dotnet/dotnet nuget -v Verbose push *  -k <NuGetKey> -s <NuGetServer>\r\ntrace: NuGet Command Line Version: 4.0.0.0\r\ninfo : Pushing libuv.1.9.1.nupkg to '<NuGetServer>'...\r\ninfo :   PUT <NuGetServer>\r\ninfo :   Created <NuGetServer> 3215ms\r\ninfo : Your package was pushed.\r\n```\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\nNo need sample project.\r\n"},{"Id":"13078551449","Type":"IssuesEvent","CreatedAt":"2020-07-31T23:54:53","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/8814","RelatedDescription":"Reopened issue \" [Test Failure] Package icon becomes a default icon after installing ‘Newtonsoft.Json’ with latest versoin\" (#8814) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: Dev\\5.5.0.6293\r\nVS Version: VS Master\\29512.44\r\nOS Version: Windows-10-Enterprise-19H1-04-05-2019\r\n\r\n## Installation step:\r\n\r\n[https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3236483&view=results](url)\r\n \r\n## Repro steps: \r\n\r\n1. Create a C# Console App (.Net Core) project.\r\n2. Open ‘Manage NuGet Packages’.\r\n3. Install package ‘Newtonsoft.Json’ with latest version 12.0.3.\r\n4. Go to the ‘Installed’ tab and observe the icon of package ‘Newtonsoft.Json’.\r\n\r\n## Expected:\r\nThe package icon under ‘Installed’ tab should be same as ‘Browse’ tab.\r\n\r\n## Actual:\r\nThe package icon becomes default icon under ‘Installed’ tab as below screenshot.\r\n![bug1113](https://user-images.githubusercontent.com/20632775/68749905-f31eb580-0639-11ea-9457-3c27aa7650e7.png)\r\n\r\n## Notes: \r\n1. The issue not repro after installing package ‘Newtonsoft.Json’ with an older version.\r\n2. The issue repro on D16.4\\29512.137 with implicit NuGet Client Release-5.4.x\\5.4.0.6292.\r\n"},{"Id":"13075640113","Type":"IssuesEvent","CreatedAt":"2020-07-31T17:27:32","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9862","RelatedDescription":"Closed issue \"Add license header to editorconfig\" (#9862) at NuGet/Home","RelatedBody":"The Visual Studio code editor supports a codefix/light bulb to add file headers from a template defined in the `.editorconfig` file. https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-file-header?view=vs-2019\r\n"},{"Id":"13067347510","Type":"IssuesEvent","CreatedAt":"2020-07-31T00:10:18","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9866","RelatedDescription":"Opened issue \"Bad UX to get to NuGet from the \"Manage NuGet Packages\" screen\" (#9866) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/1126396/bad-ux-to-get-to-nuget-from-the-manage-nuget-packa.html)._\n\n---\nRight-click a csproj project, select \"Manage NuGet Packages...\", the familiar screen appears for managing packages.\n\nLet's say you want to visit a package's page on NuGet for some additional information so you start quickly visually scanning your screen for any nuget links. The one that you'll spot first is **the Report Abuse link**, that you can then use to further navigate back to the package's page. In my case the situation is extra bad because the ReportAbuse part is wrapped to the next line.\n\n---\n### Original Comments\n\n#### Feedback Bot on 7/27/2020, 07:20 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Leftyx on 7/28/2020, 01:13 AM: \n\n<p>eh eh. I always do that.</p><p>The \"Report abuse\" is the most clicked url on the web, especially cause most packages don't have the link to the nuget packages, just the report abuse page.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"13067009392","Type":"IssuesEvent","CreatedAt":"2020-07-30T23:08:24","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9865","RelatedDescription":"Opened issue \"Set of nuget.config files considered for solution restore varies based on nuget.exe vs. dotnet\" (#9865) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: nuget.exe, dotnet restore\r\nNuGet version: 5.6.0\r\ndotnet.exe --version: 5.0.100-preview.6.20318.15\r\nOS version: Windows 10\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `git clone https://github.com/NuGet/NuGetGallery.git`\r\n2. `cd NuGetGallery`\r\n3. `dotnet restore NuGetGallery.sln --verbosity normal`\r\n4. `nuget.exe restore NuGetGallery.sln`\r\n\r\nIn the \"NuGet Config files used:\" area in the output of each command, I would expect the same nuget.config files listed. However, .NET CLI picks up on any additional one that nuget.exe does not.\r\n\r\nThe reason this is significant is that it can lead to different feeds being used if the set of package sources in the additionally included nuget.config is different than the nuget.exe set of configs, leading to varied restore behavior (e.g. floating).\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n**dotnet restore**\r\n\r\n<pre>\r\n         NuGet Config files used:\r\n             <b>C:\\z\\s\\GitHub\\NuGet\\NuGetGallery\\tests\\NuGet.Config</b>\r\n             C:\\z\\s\\GitHub\\NuGet\\NuGetGallery\\NuGet.Config\r\n             C:\\Users\\jver\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n             C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n</pre>\r\n\r\n**nuget.exe restore**\r\n\r\n```\r\nNuGet Config files used:\r\n    C:\\z\\s\\GitHub\\NuGet\\NuGetGallery\\NuGet.Config\r\n    C:\\Users\\jver\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n    C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n```\r\n"},{"Id":"13066140319","Type":"IssuesEvent","CreatedAt":"2020-07-30T21:04:32","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9613","RelatedDescription":"Closed issue \"RepositoryMetadata Equals does not account for branch and commit properties\" (#9613) at NuGet/Home","RelatedBody":"Related: https://github.com/dotnet/wpf/issues/3050#event-3379286042\r\n\r\nhttps://github.com/NuGet/NuGet.Client/commit/0e4d1b598f350b3dc675018d539114d1328189ef\r\n\r\ncc @clairernovotny"},{"Id":"13064142857","Type":"IssuesEvent","CreatedAt":"2020-07-30T17:36:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9864","RelatedDescription":"Opened issue \"Duplicate PackageReference includes are handled inconsistently by all restores, leading to unnecessary full restores\" (#9864) at NuGet/Home","RelatedBody":"Take a project such as the following: \r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NuGet.Protocol\" Version=\"5.5.0\" />\r\n    <PackageReference Include=\"NuGet.Protocol\" Version=\"5.6.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nNote the duplicate PackageReference declaration. Digging further reveals that different project types and different tools handle it differently. \r\n\r\nSee the below table for details\r\n\r\n| Restore Flavor | PackageReference declaration | \r\n| - | - |\r\n| Commandline restore (all) | First |\r\n| Static graph restore (all) | First | \r\n| VS - SDK based projects | Last |\r\n| VS - Legacy PR projects | First |\r\n\r\nThis leads to issues as the ones described in https://github.com/dotnet/arcade/issues/5550 (see below repro). \r\n\r\nI think logically from an msbuild perspective, we'd expect that the last value is the one that's resolved. This needs investigated and ideally consolidated. \r\nNote that consolidating VS - LEgacy PR projects might be impossible, due to the fact that it's largely in maintenance mode.\r\n\r\nSee repro below.\r\n\r\ncc folks that might have some thoughts around: \r\n\r\n@jeffkl @davkean @dsplaisted @zivkan \r\n\r\n[DuplicateIds.zip](https://github.com/NuGet/Home/files/5002828/DuplicateIds.zip)\r\n"},{"Id":"13063716926","Type":"IssuesEvent","CreatedAt":"2020-07-30T16:56:50","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9863","RelatedDescription":"Opened issue \"Allow `net5.0-platform` projects to be loaded and restored in VS\" (#9863) at NuGet/Home","RelatedBody":"NominateProjectAsync API needs to load `TargetFrameworkIdentifier`, `TargetFrameworkVersion`, `TargetFrameworkProfile`, `TargetPlatformIdentifier` and `TargetPlatformVersion` from the property bag, rather than the `TargetFrameworkMoniker` string (which is missing the platform properties, and won't get it)."},{"Id":"13062858170","Type":"IssuesEvent","CreatedAt":"2020-07-30T15:43:31","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9862","RelatedDescription":"Opened issue \"Add license header to editorconfig\" (#9862) at NuGet/Home","RelatedBody":"The Visual Studio code editor supports a codefix/light bulb to add file headers from a template defined in the `.editorconfig` file. https://docs.microsoft.com/en-us/visualstudio/ide/reference/add-file-header?view=vs-2019\r\n"},{"Id":"13052232759","Type":"IssuesEvent","CreatedAt":"2020-07-29T18:30:51","Actor":"tyb-dev","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9861","RelatedDescription":"Opened issue \"Dependency Resolution Inconsistency\" (#9861) at NuGet/Home","RelatedBody":"Expected: NuGet uses a nearest-wins approach to resolve conflicting dependencies. NuGet does not try to find a dependency that meets all constraints in the graph. That means, the dependency that is closer to the application in the dependency graph wins.\r\nActual: In the case below, this rule is violated. \r\n\r\n## Details about Problem\r\n\r\nVS version (if appropriate):\r\n2019\r\n\r\nOS version:\r\nWindows 10, 2004\r\n\r\nWorked before? If so, with which NuGet version:\r\nNo\r\n\r\ndotnet version:\r\n3.1\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nLet's assume we have 2 packages, C, and D. D comes in two versions and C takes a dependency on D. \r\nD 1.0.0\r\nC 1.0.0 -> D 2.0.0\r\n\r\nLet us construct an app that results in a classic package downgrade, by referencing both C an D:\r\n- App\r\n  - C 1.0.0\r\n    - D 1.0.0\r\n  - D 1.0.0\r\n\r\n```\r\nDetected package downgrade D from 2.0.0 to 1.0.0\r\n  App -> C 1.0.0 -> D (>= 2.0.0)\r\n  App -> D (>= 1.0.0)\r\n```\r\n\r\nLet us introduce two new dependencies, which we put in front of C and D:\r\nA 1.0.0 -> C 1.0.0\r\nB 1.0.0 -> D 1.0.0\r\n\r\nWe can now construct a new App that is identical to the first app, except the dependencies C and D are shifted down by one level. All we did is add a new first layer. The nearest wins rule should still hold, but we get the following instead:\r\n\r\n- App\r\n  - A 1.0.0\r\n    - C 1.0.0\r\n      - D 2.0.0 (! this version is farther away but wins)\r\n  - B 1.0.0\r\n    - D 2.0.0 (! package upgrade from 1.0.0 to 2.0.0, although it is closer to App)\r\n\r\nThere is no package downgrade error. Instead, D is promoted to 2.0.0. \r\n\r\nScreenshot:\r\n![image](https://user-images.githubusercontent.com/57002348/88838125-615fd400-d1d9-11ea-9e8f-53d2232a9c66.png)\r\n\r\nDocumentation:\r\nhttps://docs.microsoft.com/en-us/nuget/concepts/dependency-resolution\r\n"},{"Id":"13051371494","Type":"IssuesEvent","CreatedAt":"2020-07-29T16:58:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9849","RelatedDescription":"Closed issue \"NuGetFramework copy constructor does not create an equivalent frameworks\" (#9849) at NuGet/Home","RelatedBody":"This leads to ATF getting created with the wrong base framework and to an incorrect framework being used forrestore.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/e09cdc8a877737addb01eeb90d5ea2bd9433ac52/src/NuGet.Core/NuGet.Frameworks/AssetTargetFallbackFramework.cs#L52\r\n\r\nRepros anytime you use ATF + framework with a platform. "},{"Id":"13046964699","Type":"IssuesEvent","CreatedAt":"2020-07-29T09:52:27","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9860","RelatedDescription":"Opened issue \"[Test Failure] VS gave a wrong constraint warning when there are no package constraint in the packages.config file after updating packages \" (#9860) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.8.0.6753\r\nVS Version: Master\\30328.112\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1.\tOpen VS, click “Create a new project” button and search template “ASP.NET Web Site (Razor v3)” in the filter.\r\n2.\tCreate the project, open the PM UI of the project and go to the “Updates” tab.\r\n3.\tCheck “select all packages” and click “Update” button.\r\n4.\tBuild the project.\r\n## Expected\r\nThere is no warning.\r\n## Actual\r\nThere is a wrong constraint warning since there are no package constraint in the packages.config file as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/88785603-feb00d80-d1c3-11ea-8100-f983c7f91f5b.png)\r\n## Note\r\n1.\tIt didn’t repro on D16.7\\30323.103 with Implicit NuGet Client Release-5.7.x\\5.7.0.6726.\r\n\r\n"},{"Id":"13045628291","Type":"IssuesEvent","CreatedAt":"2020-07-29T07:37:41","Actor":"DhanvannthVP","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9859","RelatedDescription":"Opened issue \"Nuget pack issue\" (#9859) at NuGet/Home","RelatedBody":"\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.5\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nWhen i tried to use nuget pack -ConfigFile \"Nuget.config\" ABC.sln -Prop Configuration=Release -Symbols \r\nIt s including src folder inside nupkg file. I dont need to exclude the src folder. Is there anything i need to do with Nuget.config file. Kindly advise\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-08-02T05:30:41.6295344Z","RunDurationInMilliseconds":2113}