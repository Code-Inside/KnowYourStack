{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12831471903","Type":"PullRequestEvent","CreatedAt":"2020-07-07T05:27:40","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8088","RelatedDescription":"Opened pull request \"Replace permalink workaround with GitHub advisory permalink field\" (#8088) at NuGet/NuGetGallery","RelatedBody":"Field is now available in GitHub GraphQL API, so using it now and removing extension method.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2890"},{"Id":"12829394636","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:48:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8070","RelatedDescription":"Closed issue \"Address feedback from customers for the UX\" (#8070) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12829266516","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:26:33","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8087","RelatedDescription":"Opened issue \"Reflow all packages that have vulnerabilities\" (#8087) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12829252145","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:24:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8032","RelatedDescription":"Closed issue \"Stats figure trimming doesn't respect locale\" (#8032) at NuGet/NuGetGallery","RelatedBody":"On statistics page, this change (https://github.com/NuGet/NuGetGallery/pull/7990) has unit tests which fail in non-decimal-point locales. So does the actual trimming logic for the number. \r\nExamples:\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3797637&view=results\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3794657&view=results\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3790561&view=results"},{"Id":"12829132662","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:05:09","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8086","RelatedDescription":"Opened issue \"[Catalog2Monitoring] Improve cursor logging\" (#8086) at NuGet/NuGetGallery","RelatedBody":"See https://github.com/NuGet/NuGet.Services.Metadata/pull/799"},{"Id":"12826654781","Type":"IssuesEvent","CreatedAt":"2020-07-06T16:57:19","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8085","RelatedDescription":"Opened issue \"[Advanced search] Update search KPIs\" (#8085) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12819297032","Type":"IssuesEvent","CreatedAt":"2020-07-06T01:33:22","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8084","RelatedDescription":"Opened issue \"Update docs to reflect vulnerabilities in catalog json\" (#8084) at NuGet/NuGetGallery","RelatedBody":"Re this change: https://github.com/NuGet/NuGet.Services.Metadata/pull/790\r\nDocs need to be updated per this comment from @joelverhagen: \r\n\r\nI think the catalog docs should be updated in light of this.\r\nhttps://docs.microsoft.com/en-us/nuget/api/catalog-resource\r\n\r\nIt's a separate PR to https://github.com/nuget/docs.microsoft.com-nuget/. @ryuyu recently did this for package types and can help you out."},{"Id":"12802670201","Type":"IssuesEvent","CreatedAt":"2020-07-02T22:01:22","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8083","RelatedDescription":"Opened issue \"[Search] Investigate how to use recent downloads from statistics pipeline\" (#8083) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12802665092","Type":"IssuesEvent","CreatedAt":"2020-07-02T22:00:32","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8082","RelatedDescription":"Opened issue \"[Search] Ramp up on NDCG\" (#8082) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12802596597","Type":"IssuesEvent","CreatedAt":"2020-07-02T21:48:45","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7987","RelatedDescription":"Closed issue \"GitHubIndexer is failing to find rate limit reset header (X-RateLimit-Reset)\" (#7987) at NuGet/NuGetGallery","RelatedBody":"## Describe the bug\r\n\r\nGitHubIndexer in DEV is failing with this error:\r\n```\r\nSystem.IO.InvalidDataException: X-RateLimit-Reset is required to compute the throttling time.\r\n```\r\n\r\n### To Reproduce\r\n\r\nRun the GitHubIndexer job.\r\n\r\n### Expected behavior\r\n\r\nWe should see the `X-Ratelimit-Reset` headers as the same as `X-RateLimit-Reset`.\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/94054/81586075-e28d9480-9369-11ea-9902-d847c89b80b7.png)\r\n\r\n\r\n### Additional context\r\n\r\nPer HTTP spec, we should treat HTTP headers as case-insensitive."},{"Id":"12802573558","Type":"IssuesEvent","CreatedAt":"2020-07-02T21:44:57","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8055","RelatedDescription":"Closed issue \"Make TotalDownloadCount sortable in Search Service\" (#8055) at NuGet/NuGetGallery","RelatedBody":"Make the field sortable to be able to rebuild the search index to support future changes "},{"Id":"12802078870","Type":"IssuesEvent","CreatedAt":"2020-07-02T20:32:22","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8054","RelatedDescription":"Closed issue \"[2020-06-26] Deployment\" (#8054) at NuGet/NuGetGallery","RelatedBody":"### GitHub Indexer Job ### \r\nFix to make the GitHub Indexer Job handle http headers in a case-insensitive way.\r\n\r\nChanges:\r\n- GitHub API response in the SearchWrapper now handles headers in a case-insensitive way #7987 \r\n\r\nProgress:\r\n- [x] Merge RI: https://github.com/NuGet/NuGet.Jobs/pull/899\r\n- [x] DEV\r\n- [x] INT\r\n- [x] PROD"},{"Id":"12801576173","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:25:58","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8005","RelatedDescription":"Closed issue \"Document search jobs \" (#8005) at NuGet/NuGetGallery","RelatedBody":"`db2auxiliarysearch`, `auxiliary2azuresearch`, `catalog2azuresearch`"},{"Id":"12801393928","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:02:53","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7911","RelatedDescription":"Closed issue \"[Package Renames] Reduce popularity transfer propagation times\" (#7911) at NuGet/NuGetGallery","RelatedBody":"Popularity transfers depend on the following things to propagate to search:\r\n\r\n* auxiliary2azuresearch job - This recalculates the packages' popularity scores and saves the popularity transfers to an auxiliary file. This runs once every 30 minutes.\r\n* Search auxiliary files reload - This reloads the popularity transfers information, which is what the Gallery uses to detect whether a popularity transfer has propagated to search. This runs once every hour.\r\n\r\nAs a result, it may take up to 1.5 hours for popularity transfers to fully take effect. We increase the job and reload cadences to speed up popularity transfers.\r\n\r\nThis issue must be done before we can add the end-to-end tests: https://github.com/NuGet/NuGetGallery/issues/7904"},{"Id":"12801392839","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:02:45","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7910","RelatedDescription":"Closed issue \"[Package Renames] Add message for pending popularity transfers on \"Manage Package\" page\" (#7910) at NuGet/NuGetGallery","RelatedBody":"Popularity transfer may take over an hour to propagate to search. The customers should see an alert on the \"Manage Package\" page that the popularity transfers are pending.\r\n\r\nDepends on:\r\n* [NuGetGallery#7908](https://github.com/NuGet/NuGetGallery/issues/7908) - Add Package Renames form to \"Manage Package\" page\r\n* [NuGetGallery#7903](https://github.com/nuget/nugetgallery/issues/7903) - Expose popularity transfers in search\r\n\r\nThe work to \"speed up\" popularity transfers is tracked by: https://github.com/NuGet/NuGetGallery/issues/7911"},{"Id":"12801391980","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:02:38","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7909","RelatedDescription":"Closed issue \"[Package Renames] Add Gallery API for end-to-end testing\" (#7909) at NuGet/NuGetGallery","RelatedBody":"The end-to-end tests should be able to use the Gallery API to rename a package."},{"Id":"12801391074","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:02:32","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7908","RelatedDescription":"Closed issue \"[Package Renames] Add Package Renames form to \"Manage Package\" page\" (#7908) at NuGet/NuGetGallery","RelatedBody":"The \"Manage Package\" page should have a new form to rename packages:\r\n\r\n![image](https://user-images.githubusercontent.com/737941/79151662-b0474200-7d7f-11ea-96c6-f97362afbbcf.png)\r\n\r\nThe following pieces are tracked in separate issues:\r\n* The message for pending popularity transfers. Tracked by: https://github.com/nuget/nugetgallery/issues/7910\r\n* Add the \"Learn more\" documentation link. Tracked by: https://github.com/NuGet/NuGetGallery/issues/7943"},{"Id":"12801390183","Type":"IssuesEvent","CreatedAt":"2020-07-02T19:02:26","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7904","RelatedDescription":"Closed issue \"[Package Renames] Add end-to-end test\" (#7904) at NuGet/NuGetGallery","RelatedBody":"Test that the package rename feature works as expected:\r\n\r\n1. Upload a package\r\n1. Rename it using the Gallery API\r\n1. Check that search API lists its renames\r\n\r\nThis depends on:\r\n* [NuGetGallery#7909](https://github.com/nuget/nugetgallery/issues/7909) - Add Gallery API for end-to-end testing\r\n* [NuGetGallery#7903](https://github.com/nuget/nugetgallery/issues/7903) - Expose popularity transfers in search\r\n* [NuGetGallery#7911](https://github.com/nuget/nugetgallery/issues/7911) - Reduce popularity transfer propagation times\r\n    * This is necessary as it takes up to 1.5 hours to propagate popularity transfers"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12830818050","Type":"IssuesEvent","CreatedAt":"2020-07-07T03:20:52","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/9591","RelatedDescription":"Reopened issue \"OutputConsoleLogger should not call affinitized methods in MEF constructors\" (#9591) at NuGet/Home","RelatedBody":"We should avoid affinitized methods in MEF https://github.com/NuGet/NuGet.Client/blob/85211a7bbf93939d713f52522d897fece2bec9d9/src/NuGet.Clients/NuGet.VisualStudio.Common/OutputConsoleLogger.cs#L61-L71\r\n\r\nSee: https://github.com/NuGet/NuGet.Client/pull/2540\r\n\r\nThe problem here is that we attach listeners in the initialization. \r\n\r\nFrom: https://github.com/NuGet/Home/issues/9663\r\n\r\nOutputConsoleLogger is accessing main thread during construction, which is not a good pattern. As it is MEF-composed object, we cannot convert to \"private-ctor-public-async-factory\" model, so we should lazily initialize OutputConsole outside the constructor.\r\n\r\ncc @srdjanjovcic "},{"Id":"12830805927","Type":"IssuesEvent","CreatedAt":"2020-07-07T03:18:36","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9591","RelatedDescription":"Closed issue \"OutputConsoleLogger should not call affinitized methods in MEF constructors\" (#9591) at NuGet/Home","RelatedBody":"We should avoid affinitized methods in MEF https://github.com/NuGet/NuGet.Client/blob/85211a7bbf93939d713f52522d897fece2bec9d9/src/NuGet.Clients/NuGet.VisualStudio.Common/OutputConsoleLogger.cs#L61-L71\r\n\r\nSee: https://github.com/NuGet/NuGet.Client/pull/2540\r\n\r\nThe problem here is that we attach listeners in the initialization. \r\n\r\nFrom: https://github.com/NuGet/Home/issues/9663\r\n\r\nOutputConsoleLogger is accessing main thread during construction, which is not a good pattern. As it is MEF-composed object, we cannot convert to \"private-ctor-public-async-factory\" model, so we should lazily initialize OutputConsole outside the constructor.\r\n\r\ncc @srdjanjovcic "},{"Id":"12830795792","Type":"IssuesEvent","CreatedAt":"2020-07-07T03:16:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9741","RelatedDescription":"Closed issue \"Invalid package in non-active TFM can cause packages subtree to be empty\" (#9741) at NuGet/Home","RelatedBody":"(Copied from https://github.com/dotnet/project-system/issues/6311)\r\n\r\n**Visual Studio Version**: Version 16.7.0 Preview 4.0 [30228.12.master]\r\n\r\nWorks in 16.6.2.\r\n\r\n- Have a multi-target project.\r\n- Add a reference conditionally to the non-active (i.e. non-first) TFM\r\n- Use an invalid version number for that reference\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFrameworks>net48;net5</TargetFrameworks>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net5' \">\r\n        <PackageReference Include=\"Newtonsoft.JSON\" Version=\"100.100.100\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nResult is that the \"Packages\" node shows a chevron to expand, yet no children are presented, which should never happen:\r\n\r\n![image](https://user-images.githubusercontent.com/350947/85969366-c5408280-ba0a-11ea-8e5e-f1466dbe45a3.png)\r\n\r\nWhen expanding the \"Packages\" node, this exception is raised:\r\n\r\n> Could not find project item with item type 'PackageReference' and include value 'Newtonsoft.JSON'.\r\n\r\n<details>\r\n<summary>Stack trace</summary>\r\n\r\n```\r\n>\tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(System.Exception innerException, string unformattedMessage, object[] args) Line 181\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(string message, object arg0, object arg1) Line 121\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectInstanceItemProperties.Item.get() Line 114\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectInstanceItemProperties.GetEvaluatedPropertyValueAsync(string propertyName) Line 153\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageProperty.GetEvaluatedValueAtEndAsync() Line 242\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageProperty.GetValueAsync() Line 200\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.GetValueAsStringAsync()\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageStringProperty.GetValueAsync()\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProperty.get_Value.AnonymousMethod__19_0() Line 108\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.ExecuteSynchronously.AnonymousMethod__0() Line 501\tC#\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob<object>(System.Func<System.Threading.Tasks.Task> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTask job)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod, bool synchronouslyBlocking, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<object>(System.Func<System.Threading.Tasks.Task<object>> asyncMethod)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.ProjectMultiThreadedService.ExecuteSynchronously<object>(System.Func<System.Threading.Tasks.Task<object>> asyncAction) Line 133\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProject.ExecuteSynchronously<object>(System.Func<System.Threading.Tasks.Task<object>> asyncAction) Line 492\tC#\r\n \tMicrosoft.VisualStudio.ProjectSystem.VS.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Package.Automation.OAProperty.Value.get() Line 106\tC#\r\n \tNuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.SolutionExplorer.PackageReferenceAttachedCollectionSourceProvider.TryGetIdentity(EnvDTE.Properties properties, out (string Name, string Version) identity)\tUnknown\r\n \tNuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.SolutionExplorer.AssetsFileTopLevelDependenciesCollectionSourceProvider<(string, string), NuGet.VisualStudio.SolutionExplorer.PackageReferenceItem>.TryCreateCollectionSource(Microsoft.VisualStudio.Shell.IVsHierarchyItem hierarchyItem, string flagsString, string target, Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.IRelationProvider relationProvider, out Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.AggregateRelationCollectionSource containsCollectionSource)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Managed.VS.dll!Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.AttachedCollections.DependenciesAttachedCollectionSourceProviderBase.Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider.CreateCollectionSource(object item, string relationName) Line 50\tC#\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource.AnonymousMethod__0(System.Lazy<Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable> provider)\tUnknown\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereSelectListIterator<System.Lazy<Microsoft.VisualStudio.Shell.IAttachedCollectionSourceProvider, Microsoft.VisualStudio.Utilities.IOrderable>, Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.MoveNext()\tUnknown\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereEnumerableIterator<Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.MoveNext()\tUnknown\r\n \tmscorlib.dll!System.Collections.Generic.List<Microsoft.VisualStudio.Shell.IAttachedCollectionSource>.List(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Shell.IAttachedCollectionSource> collection)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AggregateAttachedCollectionSource.AggregateAttachedCollectionSource(object sourceItem, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Shell.IAttachedCollectionSource> sources)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.AggregateItemsSource(object item, string relationshipName)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.TreeNavigation.HierarchyProvider.dll!Microsoft.VisualStudio.PlatformUI.AttachedCollectionService.GetOrCreateCollectionSource(object item, string relationshipName)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.ConvertItemToCollectionSource(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ConvertItemToCollectionSource(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.AdaptItem(object item)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.CollectionAdapter<object, object>.Initialize(System.Collections.IEnumerable source)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionAdapter.ItemCollectionAdapter(System.Collections.IEnumerable source, Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView treeView)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionConverter.Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.TransferValue(object newValue, bool isASubPropertyChange)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.Activate(object item)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.AttachToContext(System.Windows.Data.BindingExpression.AttachAttempt attempt)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.AttachOverride(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.OnAttach(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.RealizeChildNodesCore()\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ExpandInternal()\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.OnIsExpandedChanged(System.Windows.DependencyObject o, System.Windows.DependencyPropertyChangedEventArgs e)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex, System.Windows.DependencyProperty dp, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tPresentationFramework.dll!MS.Internal.Data.PropertyPathWorker.SetValue(object item, object value)\tUnknown\r\n \tPresentationFramework.dll!MS.Internal.Data.ClrBindingWorker.UpdateValue(object value)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateSource(object value)\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.UpdateValue()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateOverride()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Update()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.ProcessDirty()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Dirty()\tUnknown\r\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.SetValue(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp, object value)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, bool coerceWithCurrentValue, System.Windows.OperationType operationType, bool isInternal)\tUnknown\r\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value)\tUnknown\r\n \tMicrosoft.VisualStudio.Shell.15.0.dll!Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs e)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.OnMouseDownThunk(object sender, System.Windows.Input.MouseButtonEventArgs e)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate genericHandler, object genericTarget)\tUnknown\r\n \tPresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target)\tUnknown\r\n \tPresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs)\tUnknown\r\n \tPresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source, System.Windows.RoutedEventArgs args, bool reRaised)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject sender, System.Windows.RoutedEventArgs args)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseTrustedEvent(System.Windows.RoutedEventArgs args)\tUnknown\r\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs args, bool trusted)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputManager.ProcessStagingArea()\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs input)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Input.InputProviderSite.ReportInput(System.Windows.Input.InputReport inputReport)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.ReportInput(System.IntPtr hwnd, System.Windows.Input.InputMode mode, int timestamp, System.Windows.Input.RawMouseActions actions, int x, int y, int wheel)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndMouseInputProvider.FilterMessage(System.IntPtr hwnd, MS.Internal.Interop.WindowMessage msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tPresentationCore.dll!System.Windows.Interop.HwndSource.InputFilterMessage(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndWrapper.WndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndSubclass.DispatcherCallbackOperation(object o)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate callback, object args, int numArgs)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.ExceptionWrapper.TryCatchWhen(object source, System.Delegate callback, object args, int numArgs, System.Delegate catchHandler)\tUnknown\r\n \tWindowsBase.dll!System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority priority, System.TimeSpan timeout, System.Delegate method, object args, int numArgs)\tUnknown\r\n \tWindowsBase.dll!MS.Win32.HwndSubclass.SubclassWndProc(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam)\tUnknown\r\n```\r\n\r\n</details>\r\n\r\nThe exception is being thrown when `NuGet.VisualStudio.SolutionExplorer.PackageReferenceAttachedCollectionSourceProvider` attempts to inspect the `Version` property of the `IVsHierarchyItem`'s browse object.\r\n\r\nThis results in the item not being displayed in the tree.\r\n\r\nThe problem here is that the DTE view of the project only includes the active TFM. Nodes for non-primary TFMs currently may not be present in the project instance.\r\n\r\nWe can make handle the exception gracefully which will allow the child to appear, however it will still not function correctly. For example, the diagnostic child item will not be displayed.\r\n"},{"Id":"12830334807","Type":"IssuesEvent","CreatedAt":"2020-07-07T01:50:24","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/9675","RelatedDescription":"Reopened issue \"Consolidate tab should use the same caches as the installed/update tab\" (#9675) at NuGet/Home","RelatedBody":""},{"Id":"12829649578","Type":"IssuesEvent","CreatedAt":"2020-07-06T23:35:57","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9757","RelatedDescription":"Opened issue \"Reduce NuGetVersion/VersionRange memory leak caused with PM UI\" (#9757) at NuGet/Home","RelatedBody":"Reproduce: \r\n1. Open solution in \"Experimental  Instance\".\r\n2. Open PM UI go to \"Browse\", \"Updates\", \"Consolidate\" tabs then close it. Next close whole project.\r\n3.  As you can see 2 attached images there are 3228 pcs of `NuGetVersion` and 1748 pcs of `VersionRange` items are stayes even though PM UI is closed. \r\n![image](https://user-images.githubusercontent.com/8766776/86664932-06eda200-bfa4-11ea-82e5-7ffcc543f64c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/8766776/86665171-3f8d7b80-bfa4-11ea-9a05-538b4ef4e9be.png)\r\n\r\n4.  Repeat from 1 to 2. As you can see below `NuGetVersion` number increased from 3228 to 4260 and `VersionRange` number increased from 1748 to 3491.\r\n\r\n![image](https://user-images.githubusercontent.com/8766776/86667205-41583e80-bfa6-11ea-969c-704452d438b7.png)\r\n![image](https://user-images.githubusercontent.com/8766776/86667277-546b0e80-bfa6-11ea-8b53-de63f6e43b24.png)\r\n\r\n\r\n"},{"Id":"12829423248","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:54:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9756","RelatedDescription":"Opened issue \"With multi targeted projects, NuGet should read the target framework related information from the inner build. \" (#9756) at NuGet/Home","RelatedBody":"Currently in command line scenarios NuGet reads the target framework information in the outer build. \r\nThat is incorrect because the the contract is that we should depend on on TargetFrameworkIdentifier and the like properties. \r\nWe do that here: https://github.com/NuGet/NuGet.Client/blob/bd482514a87a0085f8eb8603842ee1cb3ca5f277/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L500-L526\r\n\r\nThis task is a blocker for https://github.com/NuGet/Home/issues/5154. \r\n\r\nAn incomplete list of things that need done are:\r\n\r\n* In command line scenarios, read the framework in the inner build (this should allow us to read OS Version for example). \r\n* In VS scenarios, modify the VSSOlutionREstoreService to read the information from the properties back instead of the TargetFrameworks value. \r\n* Reflect all of the changes in the assets file (not sure if we'll need any). "},{"Id":"12829347912","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:40:41","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9755","RelatedDescription":"Opened issue \"Creating a prototype for the Readme project\" (#9755) at NuGet/Home","RelatedBody":"Ref: https://github.com/NuGet/Home/wiki/Packaging-READMEs-within-the-nupkg\r\nRef: #9754 \r\n\r\nCreate a basic prototype that includes a Readme while packing."},{"Id":"12829339271","Type":"PullRequestEvent","CreatedAt":"2020-07-06T22:39:08","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/9699","RelatedDescription":"Merged pull request \"Add prerelease option to dotnet.exe add package command\" (#9699) at NuGet/Home","RelatedBody":"Design for new prerelease option in dotnet.exe add "},{"Id":"12829320436","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:35:45","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9754","RelatedDescription":"Opened issue \"Implementation document for Readme project\" (#9754) at NuGet/Home","RelatedBody":"Ref: https://github.com/NuGet/Home/wiki/Packaging-READMEs-within-the-nupkg\r\n\r\nWrite up an implementation proposal for how this project will be implemented, and the tasks that will need to be undertaken."},{"Id":"12829305243","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:33:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9753","RelatedDescription":"Opened issue \"Design for displaying floating versions in the NuGet package Manager UI (project and solution level)\" (#9753) at NuGet/Home","RelatedBody":"@nkolev92 commented on [Mon Jul 06 2020](https://github.com/NuGet/Client.Engineering/issues/399)\n\nDesign for https://github.com/NuGet/Home/issues/3788\n\n"},{"Id":"12829301753","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:32:39","Actor":"advay26","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9752","RelatedDescription":"Opened issue \"Advay's summer internship project 2020\" (#9752) at NuGet/Home","RelatedBody":"This is a tracking issue for all the tasks that @advay26 will take on as part of his internship summer project."},{"Id":"12829158366","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:09:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9748","RelatedDescription":"Closed issue \"VS extensibility APIs required to unblock net5 TFMs with platform identifiers\" (#9748) at NuGet/Home","RelatedBody":"Investigate existing VS extensibility APIs related to framework parsing, framework names, etc, to understand how other (official) VS components use NuGet and how they'll be impacted for net5.0 TFMs with a platform identifier.\n\nOnce this is understood, design and implement new APIs to unblock usage of TFMs with TPI's in VS."},{"Id":"12828686441","Type":"IssuesEvent","CreatedAt":"2020-07-06T21:03:33","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/9091","RelatedDescription":"Reopened issue \"Code redundancy in NuGet client code XmlUtility.cs\" (#9091) at NuGet/Home","RelatedBody":"While working on a ADO task observed that `XmlUtility` class is coded in 4 different places in NuGet client code. Good to remove code redundancy as part of engineering improvements work. \r\n\r\n$\\NuGet.Client\\src\\NuGet.Core\\NuGet.PackageManagement\\Utility\\XmlUtility.cs\r\n$\\NuGet.Client\\src\\NuGet.Clients\\NuGet.VisualStudio.Implementation\\Utility\\XmlUtility.cs\r\n$\\NuGet.Client\\src\\NuGet.Core\\NuGet.Configuration\\Utility\\XmlUtility.cs\r\n$\\NuGet.Client\\src\\NuGet.Core\\NuGet.Packaging\\PackageCreation\\Utility\\XmlUtility.cs\r\n\r\n/cc @aortiz-msft "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-07T05:30:41.6348678Z","RunDurationInMilliseconds":1945}