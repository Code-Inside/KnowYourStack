{"Data":{"Blog":{"FeedItems":[{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13978582026","Type":"PullRequestEvent","CreatedAt":"2020-10-26T22:12:06","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8294","RelatedDescription":"Merged pull request \"Certificate update in docs\" (#8294) at NuGet/NuGetGallery","RelatedBody":"Following the blog post https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n\r\nUpdating the cert thumbprints in the documented verify command to include new cert."},{"Id":"13978089376","Type":"PullRequestEvent","CreatedAt":"2020-10-26T21:17:13","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8295","RelatedDescription":"Opened pull request \"[A11y] Improve color contrast of focus outline on Firefox\" (#8295) at NuGet/NuGetGallery","RelatedBody":"Improve the color contrast of Firefox's outline for focused items. This effectively reverts https://github.com/NuGet/NuGetGallery/commit/c245f2caeedc052be830a791879f2d4c8e0cc943 as Firefox now properly outlines elements.\r\n\r\n# Screenshots\r\n\r\n⚠ TODO\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/8185"},{"Id":"13960750920","Type":"PullRequestEvent","CreatedAt":"2020-10-24T22:47:39","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8276","RelatedDescription":"Closed pull request \"[Cookies] Comment for local debugging\" (#8276) at NuGet/NuGetGallery","RelatedBody":"Add a comment for local debugging"},{"Id":"13955580092","Type":"PullRequestEvent","CreatedAt":"2020-10-23T22:07:23","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8294","RelatedDescription":"Opened pull request \"Certificate update in docs\" (#8294) at NuGet/NuGetGallery","RelatedBody":"Following the blog post https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n\r\nUpdating the cert thumbprints in the documented verify command to include new cert."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13980368884","Type":"IssuesEvent","CreatedAt":"2020-10-27T02:36:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10183","RelatedDescription":"Closed issue \"ManagePackageVersionsCentrally default behavior is opposite the spec\" (#10183) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nAfter creating a Directory.Packages.props file, projects were not opted-in to ManagePackageVersionsCentrally by default.  The [spec](https://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions) currently reads:\r\n>If a Directory.Packages.props file exists, all projects in that directory tree are automatically opted in to central package version management. \r\n\r\nAdding <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally> to the project file addresses the issue, so this is low-priority (there's a perfectly viable workaround).\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): \r\nVS/dotnet/msbuild\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n5.0.100-rc.2.20479.15\r\n\r\nVS version (if appropriate):\r\n16.9 Preview 2\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nWin10 20H2\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. dotnet new a project (or create in VS)\r\n2. Add a PackageReference to anything\r\n3. Create a Directory.Packages.props file, add a PackageVersion to it; remove the version from the PackageReference\r\n4. Build/restore\r\n\r\n### Expected:\r\nProject should build using the PackageVersion specified in Directory.Packages.props (ManagePackageVersionsCentrally should default to true if Directory.Packages.props exists)\r\n\r\n### Actual:\r\nPackageVersion is not used, and PackageReference has no lower bound specified so it uses the oldest package available.\r\n\r\n>d:\\temp\\nuget\\nuget.csproj : warning NU1604: Project dependency newtonsoft.json does not contain an inclusive lower b\r\nound. Include a lower bound in the dependency version to ensure consistent restore results.\r\n  d:\\temp\\nuget\\nuget.csproj : warning NU1701: Package 'Newtonsoft.Json 3.5.8' was restored using '.NETFramework,Versio\r\nn=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version\r\n=v4.7.2, .NETFramework,Version=v4.8' instead of the project target framework 'net5.0'. This package may not be fully co\r\nmpatible with your project.\r\n\r\n## Other suggested things\r\n\r\n### Sample Project\r\n\r\n[Example.zip](https://github.com/NuGet/Home/files/5431751/Example.zip)\r\n"},{"Id":"13979889367","Type":"IssuesEvent","CreatedAt":"2020-10-27T01:20:11","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10190","RelatedDescription":"Opened issue \"Don't run E2E tests when VSIX install fails\" (#10190) at NuGet/Home","RelatedBody":"A recent improvement to the CI yaml had the unfortunate consequence of running E2E tests, even when the VSIX install fails."},{"Id":"13979692264","Type":"IssuesEvent","CreatedAt":"2020-10-27T00:48:40","Actor":"SimonCropp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10189","RelatedDescription":"Opened issue \"Should nuget DoubleWaitForExit?\" (#10189) at NuGet/Home","RelatedBody":"So this issue https://github.com/dotnet/runtime/issues/27128 results in \"Intermittent: Empty Process stdout\" when using WaitForExit in combination with data received events. Looking through the nuget client codebase it would seem this is a likely occurrence. Also given nugets requirement to target msbuild classic (net472) it is unlikle to be (in the short term) resolved by a future fix in the framework. So with this in mind should should nuget be using the workaround proposed in that issue? ie\r\n\r\n    static bool DoubleWaitForExit(this Process process)\r\n    {\r\n        var result = process.WaitForExit(500);\r\n        if (result)\r\n        {\r\n            process.WaitForExit();\r\n        }\r\n\r\n        return result;\r\n    }"},{"Id":"13977838500","Type":"IssuesEvent","CreatedAt":"2020-10-26T20:52:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10127","RelatedDescription":"Closed issue \"Improve multitargeted project support for managing NuGet packages\" (#10127) at NuGet/Home","RelatedBody":"As Xamarin joins .NET 6, one of the efforts we are focusing on is a single project experience which leans heavily on multitargeting support in SDK style projects.  One of the scenarios we have been looking at is the NuGet package management experience for these projects.  There is opportunity to improve the experience, especially with the visual package manager in the IDE's.\r\n\r\nToday in the Xamarin ecosystem, there are many NuGet packages (including those maintained by Xamarin) in the ecosystem which only contain assets for a single, specific target framework (ie: Xamarin.AndroidX.AppCompat only contains assets for `monoandroid90`, others may contain only `xamarin.ios`, etc).\r\n\r\nWhen a user tries to install a NuGet package into a multitargeted project which does not contain assets for every target framework the project is targeting, they are met with an error like this:\r\n\r\n```\r\nNU1202\tPackage Xamarin.AndroidX.AppCompat 1.2.0.4 is not compatible with netcoreapp3.1 (.NETCoreApp,Version=v3.1). Package Xamarin.AndroidX.AppCompat 1.2.0.4 supports: monoandroid90 (MonoAndroid,Version=v9.0)\tClassLibrary1\r\n```\r\n\r\nToday, there are a number of workarounds, all of which I'm aware of require some manual intervention and abandoning the graphical package management experience.  One workaround is to use MSBuild conditions:\r\n\r\n```xml\r\n<ItemGroup Condition=\"$(TargetFramework)' == 'MonoAndroid10.0'\">\r\n    <PackageReference Include=\"Xamarin.AndroidX.AppCompat\" Version=\"1.2.0.2\" />\r\n</ItemGroup>\r\n```\r\n\r\nIt's worth mentioning that non-Xamarin multitargeted projects would also benefit from improvements in this scenario.  How can the NuGet package management experience be improved to better support multitargeted projects going forward? "},{"Id":"13977712691","Type":"IssuesEvent","CreatedAt":"2020-10-26T20:40:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10121","RelatedDescription":"Closed issue \"Address mutations in cacheContext\" (#10121) at NuGet/Home","RelatedBody":"Maybe it's not urgent now, but  just in case I creating this issue:\nCurrently we have many `cacheContext`s which used for caching some previous values and calculations.\nBut they're using mutable normal dictionary which makes very hard for adding parallelization into our code as I experienced in [PR#3605](https://github.com/NuGet/NuGet.Client/pull/3605) and [PR#3646](https://github.com/NuGet/NuGet.Client/pull/3646).\nSolution would be change them to `concurrent` type dictionaries or add sync lock. But caveat is `concurrent` types are slower than normal ones because it checks for sync locks. So one hand we're making things little bit faster due to parallelization but other hand making some things slower for other uses, there're 2 sides of coin, hard to evaluate right away.\nWe can't make it immutable types because most cache are intended for mutation. \nAnother issue is almost all `cacheContext`s are part of public API. Not sure how to handle it without breaking. One possible solution is create new ones and deprecate old ones.\n"},{"Id":"13977329171","Type":"IssuesEvent","CreatedAt":"2020-10-26T20:03:30","Actor":"AArnott","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10188","RelatedDescription":"Opened issue \"PackageReference to embeddable interop package *references* the assembly instead of *linking* it\" (#10188) at NuGet/Home","RelatedBody":"Per [Embed Interop Types with PackageReference](https://github.com/NuGet/Home/wiki/Embed-Interop-Types-with-PackageReference) and #2365, the recommended pattern for packages that carry embeddable interop assemblies is to construct the package in *both* `lib\\` and `embed\\` folders. \r\n\r\n## Details about Problem\r\n\r\ndotnet.exe --version (if appropriate): 5.0.100-rc.2.20479.15\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n Given a NuGet package that contains an interop assembly under both lib and embed folders, add a `PackageReference` to it from a .NET SDK style project.\r\n\r\n**EXPECT**\r\n\r\nI expect the C# compiler to be invoked with the interop assembly specified with a `/link:interop.dll` switch.\r\n\r\n**ACTUAL**\r\n\r\nThe C# compiler is invoked with `/reference:interop.dll`.\r\nThis is the same behavior as if the package didn't use the `embed` pattern at all.\r\n\r\nI *do* observe that the project.assets.json file *does* recognize the embed folder:\r\n\r\n```json\r\n      \"EnvDTE90/16.9.30626.11111-pre\": {\r\n        \"type\": \"package\",\r\n        \"dependencies\": {\r\n          \"EnvDTE80\": \"16.9.30626.11111-pre\"\r\n        },\r\n        \"compile\": {\r\n          \"lib/net45/EnvDTE90.dll\": {}\r\n        },\r\n        \"runtime\": {\r\n          \"lib/net45/EnvDTE90.dll\": {}\r\n        },\r\n        \"embed\": {\r\n          \"embed/net45/EnvDTE90.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nBut msbuild still references the dll instead of linking in.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nSee [msbuild.binlog](https://microsoft-my.sharepoint.com/:u:/p/andarno/ER77iIDLTVFFs-cF9SvW_58BFWss5OChzbiTQVCWLumjGQ?e=U0WWlw).\r\n\r\n### Sample Project\r\n\r\n[sdktest.zip](https://github.com/NuGet/Home/files/5441225/sdktest.zip)\r\n\r\n\r\n"},{"Id":"13977116517","Type":"IssuesEvent","CreatedAt":"2020-10-26T19:43:29","Actor":"AArnott","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10187","RelatedDescription":"Opened issue \"NU5100 misfires when packing embeddable interop assemblies\" (#10187) at NuGet/Home","RelatedBody":"Per [Embed Interop Types with PackageReference](https://github.com/NuGet/Home/wiki/Embed-Interop-Types-with-PackageReference) and #2365, the recommended pattern for packages that carry embeddable interop assemblies is to construct the package in *both* `lib\\` and `embed\\` folders. \r\n\r\nBut doing this produces build warnings:\r\n\r\n> D:\\VS\\src\\Tools\\dotnet\\sdk\\3.1.200\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5100: The assembly 'embed\\net45\\EnvDTE90.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced. [D:\\VS\\src\\vscommon\\WrapperPackages\\EnvDTE90\\EnvDTE90.csproj]\r\nD:\\VS\\src\\Tools\\dotnet\\sdk\\3.1.200\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5100: The assembly 'embed\\netstandard2.0\\EnvDTE90.dll' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced. [D:\\VS\\src\\vscommon\\WrapperPackages\\EnvDTE90\\EnvDTE90.csproj]\r\n\r\nFirst off, this warning is just wrong because the files it complains about *do* also appear under `lib`.\r\n\r\nSecondly, if they *weren't* in the lib folder, they would still be added as a link item to the project if `PackageReference` was in use. Per the spec, including it under `lib` is only necessary for the packages.config crowd. So perhaps when the file in question appears under `embed` the wording of the warning (when it _does_ appear) should specify that unless the file also appears under `lib`, it won't work for packages.config projects rather than suggesting it will be broken for *all* projects."},{"Id":"13976790647","Type":"IssuesEvent","CreatedAt":"2020-10-26T19:13:06","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10174","RelatedDescription":"Closed issue \"Adding two trusted-signer of the same domain fails for one index\" (#10174) at NuGet/Home","RelatedBody":"dotnet version: 3.1\r\nnuget version: 5.7.0.6726\r\n\r\nWe have a custom NuGet feed hosted on Nexus SonaType. It's set up that we have one feed for our own repositories and one \"feed\" which acts as a proxy to NuGet. Now, we want to use this feed in Docker as well to automatically run tests, build the image etc.\r\n\r\nSince we have our own certificate and our services are behind a proxy, I am doing this in the `Dockerfile`\r\n\r\n```\r\nARG proxy\r\n\r\nRUN dotnet nuget add source \"https://sonatype-nexus.ourdomain.com/repository/releases/\" --name \"Digital Repository\" --username \"digital\" --password $NUGET_USER_PASSWORD --store-password-in-clear-text\r\nRUN dotnet nuget add source \"https://sonatype-nexus.ourdomain.com/repository/nuget.org-proxy/\" --name \"NuGet Proxy\"\r\n\r\nRUN mono /usr/local/bin/nuget.exe config -set http_proxy=\"${proxy}\"\r\n\r\nRUN mono /usr/local/bin/nuget.exe trusted-signers add -Name \"Digital Repository\" -ServiceIndex \"https://sonatype-nexus.ourdomain.com/repository/releases/index.json\"\r\nRUN mono /usr/local/bin/nuget.exe trusted-signers add -Name \"NuGet Proxy\" -ServiceIndex \"https://sonatype-nexus.ourdomain.com/repository/nuget.org-proxy/index.json\"\r\n```\r\n\r\nAdding both services as a sourc works without problem, however, as soon as I want to add the trusted signer, I get the error \r\n\r\n`Invalid certificate information from the service index 'https://sonatype-nexus.ourdomain.com/repository/releases/index.json'.`\r\n\r\nHowever, when I uncomment this and there's only the one for the `nuget.org-proxy` it works without ANY problems. It's just that the one is failing.\r\n\r\nBut they are on the same domain. How can the one fail with a certificate error, but the other does not? \r\n\r\n\r\n**Update**\r\n\r\nWhat is double weird is that a `wget` to both `index.json` works without problems. It's really only nuget having problems with the certificate :/"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-10-27T05:30:39.3173993Z","RunDurationInMilliseconds":1568}