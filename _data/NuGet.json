{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34187358717","Type":"IssuesEvent","CreatedAt":"2023-12-15T01:39:25","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9753","RelatedDescription":"Closed issue \"[Deployment] 2023.12.13\" (#9753) at NuGet/NuGetGallery","RelatedBody":"# Gallery\r\n\r\n## Changes\r\n\r\n* https://github.com/NuGet/NuGetGallery/pull/9733\r\n* https://github.com/NuGet/NuGetGallery/pull/9710\r\n* https://github.com/NuGet/NuGetGallery/pull/9747\r\n\r\n## Progress\r\n* [ ] Merge PRs: \r\n    - [ ] FI of main into dev: _skipped_\r\n    - [ ] RI of dev into main: \r\n* [ ] Build - \r\n* [ ] Release - \r\n* [ ] DEV DB Migration - _skipped_\r\n* [ ] DEV\r\n* [ ] INT DB Migration - _skipped_\r\n* [ ] INT\r\n* [ ] PROD DB Migration - _skipped_\r\n* [ ] PROD"},{"Id":"34187321974","Type":"PullRequestEvent","CreatedAt":"2023-12-15T01:36:36","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9760","RelatedDescription":"Merged pull request \"Add net8.0-browser to supported platforms\" (#9760) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9761\r\n\r\n.NET 8 added a new platform-specific TFM with `net8.0-browser`, so we need to include it in our supported platforms.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nAfter the changes,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"},{"Id":"34187209568","Type":"IssuesEvent","CreatedAt":"2023-12-15T01:27:44","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9761","RelatedDescription":"Opened issue \"Add net8.0-browser support\" (#9761) at NuGet/NuGetGallery","RelatedBody":"**Problem**\r\n\r\n.NET 8 introduced a new platform-specific TFM with `net8.0-browser`. We need to add it to our supported frameworks so that it shows up in the TFM badges.\r\n\r\nCurrently,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nExpected,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"},{"Id":"34187154064","Type":"PullRequestEvent","CreatedAt":"2023-12-15T01:23:15","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9760","RelatedDescription":"Opened pull request \"Add net8.0-browser to supported platforms\" (#9760) at NuGet/NuGetGallery","RelatedBody":".NET 8 added a new platform-specific TFM with `net8.0-browser`, so we need to include it in our supported platforms.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/5149f20f-282f-4994-a76b-87a41bc75d3e)\r\n\r\nAfter the changes,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/74742f66-bf76-4ca6-977e-40655025b248)\r\n"},{"Id":"34185863281","Type":"IssuesEvent","CreatedAt":"2023-12-14T23:45:59","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9205","RelatedDescription":"Reopened issue \"[Feature]: Support renaming users and organizations on NuGet.org\" (#9205) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\r\n\r\nWe've received several support requests on NuGet.org over the years to change a user account or organization username. This is not currently supported with either a tool available to users or to site admins.\r\n\r\nThe workaround is:\r\n\r\n1. Create a new account with the desired username.\r\n2. Add the new account as an owner on packages the old account owns.\r\n3. Accept ownership in the new account and remove the old account from ownership.\r\n4. Optionally, delete the old account.\r\n\r\nThis is workable in most cases but has some problems:\r\n\r\n- It's very painful if the number of accounts is high.\r\n- Other entities like ID prefix reservations or organization memberships are not transferred\r\n- API keys are reset\r\n- You need a second MSA or AAD account for the transition process\r\n\r\n\r\n### The Elevator Pitch\r\n\r\nWe should provide a tool that allows either users or site admins to perform this operation easily.\r\n\r\nThere are issues to consider with this feature:\r\n\r\n- Username changes break client trust policies that use username (https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages#trust-package-owners)\r\n- The old username should be blocked from usage to prevent impersonation attacks\r\n- Could this be used by spammers or other malicious actors to avoid detection?\r\n- Should we allow as many renames as you want? Or should there be some throttling? If we block old usernames this tool could be used to easily eat up a lot of usernames.\r\n\r\n### Additional Context and Details\r\n\r\nThere is another related request of changing username casing: https://github.com/NuGet/NuGetGallery/issues/5013. This could perhaps be solved at the same time.\r\n\r\nPast requests for a username change on our issue tracker are here:\r\n- https://github.com/NuGet/NuGetGallery/issues/4673\r\n- https://github.com/NuGet/NuGetGallery/issues/1838\r\n- https://github.com/NuGet/NuGetGallery/issues/319"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34186084245","Type":"IssuesEvent","CreatedAt":"2023-12-15T00:03:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13034","RelatedDescription":"Closed issue \"Conditional updating when *all*  packages are conditioned is broken\" (#13034) at NuGet/Home","RelatedBody":"Take an example: \r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net472;net8.0</TargetFrameworks>  \r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net472'\">\r\n\t    <PackageReference Include=\"Newtonsoft.Json\">\r\n\t\t    <Version>13.0.1</Version>\r\n\t    </PackageReference>\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'$(TargetFramework)' == 'net8.0'\">\r\n\t    <PackageReference Include=\"Newtonsoft.Json\">\r\n\t\t    <Version>13.0.2</Version>\r\n\t    </PackageReference>\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\nUpdating in VS will only update the first one, since NuGet doesn't really know that the packages itself have been set without a condition. \r\n\r\nNote that, while scenario like the above are detectable, scenarios where the same version is used on the reference are likely not possible today.  FWIW, the 2nd iteration (same version, 2 items) is a lot less likely, so just fixing the consolidation change is probably more than enough."},{"Id":"34186084120","Type":"IssuesEvent","CreatedAt":"2023-12-15T00:03:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11914","RelatedDescription":"Closed issue \"[Bug]: PM UI cannot uninstall packages in multitargeting projects\" (#11914) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 2022 Enterprise, Version 17.2.5\n\n### Worked before?\n\nNo, this does not work in VS2019\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nCreate a new console project.\r\n\r\nEdit the project file to look like the following:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFrameworks>net5.0;net472</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup Condition=\"$(TargetFramework) == 'net6.0'\">\r\n\t\t<PackageReference Include=\"Text2Xml.Lib\" Version=\"1.1.4\" />\r\n\t\t<PackageReference Include=\"Newtonsoft.json\" Version=\"13.0.1\" />\r\n\t\t<PackageReference Include=\"Polly.Extensions.Http\" Version=\"3.0.0\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup Condition=\"$(TargetFramework) == 'net472'\">\r\n\t\t<PackageReference Include=\"Newtonsoft.json\" Version=\"12.0.1\" />\r\n\t\t<PackageReference Include=\"Polly.Extensions.Http\" Version=\"2.0.1\" />\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nRight click on the project in Solution Explorer and select 'Manage NuGet Packages'\r\n\r\nUninstall package in 'Polly.Extensions.Http'.\r\n\r\n\r\n### Expected\r\n \r\nPolly.extensions.http package is uninstalled\r\n\r\n### Actual\r\n\r\nPackage is not uninstalled. See screenshot below.\r\n\r\n![image](https://user-images.githubusercontent.com/1192347/175352616-a158531e-3495-40ff-ba7f-57f8eb7f15e5.png)\r\n\r\n\n\n### Verbose Logs\n\n```shell\nRestoring packages for C:\\Users\\feaguila.REDMOND\\source\\repos\\ConsoleAppMultitargeting2022\\ConsoleAppMultitargeting2022\\ConsoleAppMultitargeting2022.csproj...\r\nSystem.ArgumentException: Package with id \"Polly.Extensions.Http\" does not exist.\r\n   at Microsoft.VisualStudio.ProjectSystem.References.PackageReferencesService.<>c__DisplayClass3_0.<<RemoveAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Threading.JoinableTask.<JoinAsync>d__76.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectLockService.<ExecuteWithinLockAsync>d__129.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.VisualStudio.ProjectSystem.ProjectLockService.<ExecuteWithinLockAsync>d__129.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.CpsPackageReferenceProject.<UninstallPackageAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteBuildIntegratedProjectActionsAsync>d__87.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__84.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__83.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at NuGet.PackageManagement.NuGetPackageManager.<ExecuteNuGetProjectActionsAsync>d__82.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.NuGetProjectManagerService.<>c__DisplayClass18_0.<<ExecuteActionsAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.VisualStudio.NuGetProjectManagerService.<CatchAndRethrowExceptionAsync>d__29.MoveNext()\r\nTime Elapsed: 00:00:00.1476767\r\n========== Finished ==========\n```\n"},{"Id":"34180760042","Type":"IssuesEvent","CreatedAt":"2023-12-14T19:20:58","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12974","RelatedDescription":"Closed issue \"Vulnerabilities filter shows incorrectly on “Brower” tab when the default tab was “Browse” instead of “Installed” for the previous opening of solution PM UI  \" (#12974) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.22\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:       \r\n\r\n1. Create a C# Class Library (.NET Core 8.0) project.   \r\n2. Right-click the solution in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu.   \r\n3. Click the \"Browse\" tab and close the solution-level PM UI.  \r\n4. Right-click the solution in Solution Explorer and select \"Manage NuGet Packages for Solution…\" menu to open the solution-level PM UI again.   \r\n\r\n#### Expected:        \r\n\r\nVulnerabilities filter should not show on “Brower” tab. \r\n\r\n#### Actual:        \r\n\r\nVulnerabilities filter shows incorrectly on “Brower” tab as below: \r\n![Unbenannt](https://github.com/NuGet/Home/assets/84695155/3d5fa777-a9cd-4cf3-a076-8ee4895ee35d)\r\n\r\n#### Note:    \r\n\r\n1.The repro rate is 100%.  \r\n2.This is not a regression since it is a new feature— Vulnerabilities filter.  \n\n### Verbose Logs\n\n_No response_"},{"Id":"34180738277","Type":"IssuesEvent","CreatedAt":"2023-12-14T19:20:01","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13090","RelatedDescription":"Opened issue \"Fix responsiveness of Filter and Checkboxes in top panel PM UI\" (#13090) at NuGet/Home","RelatedBody":"With the addition of a new checkbox to the top panel in PM UI there is not enough space in the top panel for low resolution displays. We should define the size behavior of each element.\r\n\r\nDiscussion with gifs about the behavior https://github.com/NuGet/NuGet.Client/pull/5520#discussion_r1411271977"},{"Id":"34178872822","Type":"IssuesEvent","CreatedAt":"2023-12-14T17:59:48","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13089","RelatedDescription":"Opened issue \".NET SDK & NuGet.Commandline.Xplat integration should be compile/not runtime\" (#13089) at NuGet/Home","RelatedBody":"When commands like `dotnet nuget push` or `dotnet nuget config`, `dotnet list package` today are invoked, the .NET SDK's dotnet.exe process has it's own parsing, which later gets forwarded to a completely new runnable, NuGet.Commandline.Xplat, which pretty much duplicates all the arguments. \r\n\r\nThis leads to an unnecessary 2nd process, difficulty debugging, + lots of duplicate work.\r\n\r\nThe proposal here is to change this integration to a compile time one, where the SDK just calls methods of NuGet.Commandline.Xplat instead of shelling out to a completely new process. "},{"Id":"34178646451","Type":"IssuesEvent","CreatedAt":"2023-12-14T17:50:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13087","RelatedDescription":"Closed issue \"[Pack] The packed package is not in tool folder after executing \"nuget pack -tool\" command\" (#13087) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev\\6.9.0.59\n\n### Worked before?\n\nIt reproes on NuGet Client 6.6.0.48\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n\r\n1. Create a C# Class Library (.NET Framework) project named package1 in VS.\r\n2. Build solution.\r\n3. Open “Developer Command Prompt” , cd to the project path.\r\n4. Execute “nuget spec”\r\n5. Execute \"nuget pack package1.csproj -tool\"\r\n6. Check the output files of the project should be in the tool folder.\r\n\r\n**Expected:**\r\n\r\nThe package file of the project should be in the tool folder.\r\n\r\n**Actual:**\r\n\r\nThe packed package is not in tool folder as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/ee1ff747-9825-4b18-9d8e-f4f05c1744ae)\r\n\r\n**Note:**\r\n\r\n1.Repro rate: 100%.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34177143607","Type":"IssuesEvent","CreatedAt":"2023-12-14T16:54:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13088","RelatedDescription":"Opened issue \"Visual Studio 17.8 browse tab never scrolls down past the first page.\" (#13088) at NuGet/Home","RelatedBody":"Body from the feedback ticket: There is a problem with the NuGet Package Manager UI in 17.8.0.  When trying to browse for packages it only returns the first 25 and won’t refresh when scrolling down to the bottom of the page.  I have rolled back to 17.7.7 and confirmed that it is working correctly in that version.  I then updated to 17.8.0 and confirmed that it is working as described of only getting the first 25 and not getting more.\r\n\r\n[Developer Community Issue](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1924207?src=WorkItemMention&src-action=artifact_link), [Developer Community bug](https://developercommunity.visualstudio.com/t/Problem-with-NuGet-Package-Manager-UI-af/10530864)"},{"Id":"34163798579","Type":"IssuesEvent","CreatedAt":"2023-12-14T09:14:37","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13087","RelatedDescription":"Opened issue \"[Pack] The packed package is not in tool folder after executing \"nuget pack -tool\" command\" (#13087) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev\\6.9.0.59\n\n### Worked before?\n\nIt reproes on NuGet Client 6.6.0.48\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**\r\n\r\n1. Create a C# Class Library (.NET Framework) project named package1 in VS.\r\n2. Build solution.\r\n3. Open “Developer Command Prompt” , cd to the project path.\r\n4. Execute “nuget spec”\r\n5. Execute \"nuget pack package1.csproj -tool\"\r\n6. Check the output files of the project should be in the tool folder.\r\n\r\n**Expected:**\r\n\r\nThe package file of the project should be in the tool folder.\r\n\r\n**Actual:**\r\n\r\nThe packed package is not in tool folder as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/ee1ff747-9825-4b18-9d8e-f4f05c1744ae)\r\n\r\n**Note:**\r\n\r\n1.Repro rate: 100%.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34155995831","Type":"IssuesEvent","CreatedAt":"2023-12-14T01:40:05","Actor":"AathifMahir","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13086","RelatedDescription":"Opened issue \"NativeAOT Flag\" (#13086) at NuGet/Home","RelatedBody":"It would be great, if the Package Author does have option to Mark Packages as NativeAOT Compatible. that would Add Flag on Nuget Home, Where Devs can easily Identify if the Package does Support NativeAOT by Looking Into the Flags that Next Supported Dotnet like Below Image\n\n![Screenshot_20231212_062130_Chrome.jpg](https://github.com/NuGet/Home/assets/17165402/d3ae9f1d-f161-4423-99e6-4138183e88ed)\n\n"},{"Id":"34154169189","Type":"IssuesEvent","CreatedAt":"2023-12-13T23:27:51","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12957","RelatedDescription":"Closed issue \"RestoreTask: Control whether to embed files in the binlog\" (#12957) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nNeed some properties on RestoreTask to control whether to embed files in the binlog, and possibly filter out .dgspec.json files.\r\n\r\nWe've found that the embedded .nuget.dgspec.json files are huge, and our binlog is 1 GB in size. .dgspec.json files total 3.5 GB for us uncompressed. Would be nice to be able to control whether to include .dgspec files here:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/5ce332fb834feea1f6c974d17456c8c9d5504e09/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L216\r\n\r\nNot sure how fine grained to make it. Just one property on the task to embed dgspec files, default to true? (No effect if no binlog present). Or 4 properties to control each of the four types of files? Or a main property to control all files?\r\n\r\nEmbedding files is useful and a good default, but for large builds embedding dgspec file specifically renders the binlog almost unusable.\r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"34148174017","Type":"IssuesEvent","CreatedAt":"2023-12-13T18:34:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8749","RelatedDescription":"Closed issue \"NuGet should handle duplicate nomination data better. \" (#8749) at NuGet/Home","RelatedBody":"Currently, the package spec would get generated and then we'd throw during the restore operation itself, with a cryptic error: \r\n```\r\nError occurred while restoring NuGet packages: Sequence contains more than one matching element\r\n```\r\n\r\nBlocked on https://github.com/NuGet/Home/issues/7717"},{"Id":"34141126380","Type":"IssuesEvent","CreatedAt":"2023-12-13T14:33:56","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13073","RelatedDescription":"Closed issue \"NuGetAudit should not download vulnerabilities database when project does not use any packages\" (#13073) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nAs the title says, NuGetAudit download the vulnerabilities database, even when there are no packages to check.\r\n\r\nThe \"easiest\" way to validate is to open a CLI shell, set the environment variable `http_proxy` to `http://localhost:12345/` (make sure there isn't a real HTTP proxy running on this port), then do `dotnet new console`. Note, if you ran a restore more recently than 30 minutes ago, you might need to run `dotnet nuget locals http-cache --clear`, to ensure that the cached vulnerabilities isn't used.\r\n\n\n### Desired Behavior\n\nThe scenario described above should not fail. In other words, when there are no packages, NuGetAudit should \"skip\" itself, and avoid making HTTP requests.\n\n### Additional Context\n\n_No response_"},{"Id":"34122506232","Type":"IssuesEvent","CreatedAt":"2023-12-13T00:23:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13085","RelatedDescription":"Opened issue \"Audit at restore time must not throw and fail the operation\" (#13085) at NuGet/Home","RelatedBody":"Found this in an activity log: \r\n\r\n```xml\r\n<description>NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://pkgs.dev.azure.com/<redacted>/_packaging/<redacted>/nuget/v3/index.json. ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized). at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode() at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__5`1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.Common.ConcurrencyUtilities.<ExecuteWithFileLockedAsync>d__5`1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Protocol.HttpSource.<GetAsync>d__15`1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.Protocol.ServiceIndexResourceV3Provider.<GetServiceIndexResourceV3>d__11.MoveNext() --- End of inner exception stack trace --- at NuGet.Protocol.ServiceIndexResourceV3Provider.<GetServiceIndexResourceV3>d__11.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Protocol.ServiceIndexResourceV3Provider.<TryCreate>d__10.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Protocol.Providers.VulnerabilityInfoResourceV3Provider.<TryCreate>d__1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.VulnerabilityInformationProvider.<GetVulnerabilityInfoAsync>d__5.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.VulnerabilityInformationProvider.<GetVulnerabilityInformationAsync>d__4.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.Restore.Utility.AuditUtility.<GetAllVulnerabilityDataAsync>d__83.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.Restore.Utility.AuditUtility.<CheckPackageVulnerabilitiesAsync>d__77.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.RestoreCommand.<PerformAuditAsync>d__69.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__68.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.Commands.RestoreRunner.<ExecuteAndCommitAsync>d__6.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.SolutionRestoreManager.RestoreOperationLogger.<RunWithProgressAsync>d__35.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.SolutionRestoreManager.SolutionRestoreJob.<RestorePackageSpecProjectsAsync>d__26.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.SolutionRestoreManager.SolutionRestoreJob.<RestoreAsync>d__24.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at NuGet.SolutionRestoreManager.SolutionRestoreJob.<RestoreAsync>d__24.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at NuGet.SolutionRestoreManager.SolutionRestoreJob.<ExecuteAsync>d__23.MoveNext()</description>\r\n```\r\n\r\nIf you follow the stack trace, you'll see that the throw is happening in restore command project level and throwing all the way to the solution restore job. \r\n\r\nI think the original idea behind this was a warning NU1900, https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1900, but we should consider whether need to differentiate between a source being inaccessible altogether and a source not supporting vulnerabilities. \r\n\r\nIMO, we should not log a warning if we can't access the feed altogether, as that'd be surfaced by other means potentially, but that would break some scenarios, so maybe we log a min message instead in that case?\r\nWe should log an NU1900 warning if the source has vulnerabilities and they're broken for any reason.\r\n\r\ncc @zivkan thoughts?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-15T03:30:20.5781006Z","RunDurationInMilliseconds":1277}