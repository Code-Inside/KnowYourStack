{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34460947574","Type":"IssuesEvent","CreatedAt":"2023-12-29T03:21:56","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13115","RelatedDescription":"Opened issue \"[Bug Bash] The “Remove” button should be disable when no package source mapping is selected in the “Package Source Mappings” list \" (#13115) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.69\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:        \r\n\r\n1. Create a .NET Core Console App project via VS.  \r\n2. Right-click the project in Solution Explorer and select ‘Manage NuGet Packages…’ menu item to open PM UI.  \r\n\r\n3. Click the “settings” button on the right panel and click “Package Source Mapping” tab. \r\n\r\n4. Click “Add” button, type a string in the package pattern textbox and select a package source in the source list below.  \r\n 5. Click “Add” button on the bottom. \r\n\r\n 6. Observe the \"Remove\" button when no package source mapping is selected. \r\n\r\n \r\n\r\n#### Expected:      \r\n\r\nThe “Remove” button should be disable. \r\n\r\n#### Actual:         \r\n\r\nThis button is available as below:  \r\n![RemoveButton](https://github.com/NuGet/Home/assets/84695155/30465631-0282-426a-a460-947664b7d3d5)\r\n\r\n#### Notes:     \r\n\r\n1.The repro rate is 100%.   \r\n2.This is not a regression since it is a new feature.     \r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34444792155","Type":"IssuesEvent","CreatedAt":"2023-12-28T08:06:15","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13114","RelatedDescription":"Opened issue \"[Client policy] An error NU3018 “The author primary signature's signing certificate is not trusted by the trust provider” occurs when Install package with trusted signers and package with untrusted root \" (#13114) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.67\n\n### Worked before?\n\nIt worked in nuget client Dev\\6.8.0.101 since we used the \"CreateTestCertificate.ps1\" file to create certificate but we use \"MakeTestCert.csproj\" this time. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:     \r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703) \r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack .csproj\" for testing.   \r\n\r\n3.Go to the patchedSDK folder and create a new test certificate:  \r\n\r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0  `\r\n\r\n4.Sign a package:  `NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath> `\r\n\r\n5.Create a project in VS and add required mode in nuget.config file with trusted signers list: (the SHA256 fingerprint is the one in step3) \r\n```\r\n   <config> \r\n     <add key=\"signatureValidationMode\" value=\"require\" /> \r\n   </config> \r\n   <trustedSigners> \r\n     <author name=\"JamieZhang\">        \r\n         <certificate fingerprint=\"AAAAA\" hashAlgorithm=\"SHA256\" allowUntrustedRoot=\"true\" /> \r\n     </author> \r\n    </trustedSigners> \r\n```\r\n\t\t\r\n6. Reload the solution in VS, update the package source to the signed package path above (in step4) and install the package into the project in PM UI.\r\n#### Expected:     \r\n\r\nThe signed package was successfully installed into the project without any error. \r\n\r\n#### Actual:        \r\n\r\nThe package failed to install with error NU3018 “The author primary signature's signing certificate is not trusted by the trust provider” as below: \r\n![MicrosoftTeams-image (1)](https://github.com/NuGet/Home/assets/84695155/faa58f4a-05ef-424a-a1ee-221d3d99a669)\r\n#### Notes:    \r\n\r\n1.The repro rate is 100%.  \r\n2.It also reproes VS 17.8 (D17.8\\34309.116 with implicit NuGet 6.8.0.131). \n\n### Verbose Logs\n\n_No response_"},{"Id":"34443752820","Type":"IssuesEvent","CreatedAt":"2023-12-28T06:54:19","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13113","RelatedDescription":"Opened issue \"[Signing] Verify the package was signed failed with an error: \"NU3034: This package is signed but not by a trusted signer.\"\" (#13113) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.67\n\n### Worked before?\n\nIt worked in nuget client Dev\\6.8.0.101 since we used the \" CreateTestCertificate.ps1 \" file to create certificate but we use \" MakeTestCert.csproj\" this time.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack .csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate:\r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0 --Password password`\r\n4. Where CertificateFilePath is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n`.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>` \r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package:\r\n`NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath>`\r\n6. Enter the password: password.\r\n7. Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n8. Verify the package was signed:  `NuGet.exe verify -signatures <PackageFilePath>`\r\n\r\n**Expected:**\r\nVerify the package was signed successfully.\r\n\r\n**Actual:**\r\nVerify the package was signed failed with an error: \"NU3034: This package is signed but not by a trusted signer.\" as below screenshot. \r\n![image](https://github.com/NuGet/Home/assets/149561645/f3d5b7e7-4535-4a59-8409-a213c3774d66)\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34443473878","Type":"IssuesEvent","CreatedAt":"2023-12-28T06:32:31","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13112","RelatedDescription":"Opened issue \"[Signing] Package signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store\" (#13112) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.67\n\n### Worked before?\n\nIt worked in nuget client Dev\\6.8.0.101 since we used the \"CreateTestCertificate.ps1\" file to create certificate but we use \"MakeTestCert.csproj\" this time.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc=%7B8a3c6685-1661-47f4-8807-b765ca62aea1%7D&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack .csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate:\r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0`\r\n4. Where _CertificateFilePath_ is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n`.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath>`\r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package, where _Fingerprint_ is the Fingerprint (SHA-1) from step 3:\r\n`NuGet.exe sign <PackageFilePath> -CertificateStoreLocation LocalMachine -CertificateStoreName Root -CertificateFingerprint <Fingerprint>`\r\n6. Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Expected:**\r\nPackage signing is successful and no error or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Actual:**\r\nPackage signing failed with an error: \"NU3001: No certificates were found that meet all the given criteria.\" after nuget signing a package with certificate comes from LocalMachine certificate store as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/c0eb8abf-7089-4941-9ebc-91ea7cfb0a80)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34427157327","Type":"IssuesEvent","CreatedAt":"2023-12-27T09:51:54","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13111","RelatedDescription":"Opened issue \"[Test Failure][Signing] There is an error: \"Key does not exist\" after nuget signing a package with certificate comes from CurrentUser certificate store\" (#13111) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.67\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro steps:**\r\n\r\n1.Patch dotnet SDK: [Patch dotnet SDK](https://microsoft.sharepoint.com/teams/NuGet/_layouts/15/Doc.aspx?sourcedoc={8a3c6685-1661-47f4-8807-b765ca62aea1}&action=edit&wd=target%28Package%20Signing%20Manual%20Test.one%7C0344a15b-01b1-4828-af4c-63fe53687f8a%2FPatch%20dotnet%20SDK%7Cfd0e3c41-e7a8-4de8-b83a-1a09fdb56271%2F%29&wdorigin=703)\r\n2.Add NuGet.exe path into System variables and create a package with command \"nuget pack <PackageName>.csproj\" for testing.\r\n3. Go to the patchedSDK folder and create a new test certificate: \r\n`.\\dotnet run --project .\\Entropy\\MakeTestCert\\MakeTestCert.csproj --framework net7.0` \r\n4. Where <CertificateFilePath> is the file path to the created certificate (in step3) .cer or .pem file, add trust for the certificate:\r\n `.\\dotnet run --project .\\Entropy\\TrustTestCert\\TrustTestCert.csproj --framework net7.0 -- add -c <CertificateFilePath> `\r\n5. In another \"Developer Command Prompt\", cd to the path of \"NuGet.exe\" and sign a package, where <Fingerprint> is the Fingerprint (SHA-256) from step 3:\r\n`NuGet.exe sign <PackageFilePath> -CertificateFingerprint <Fingerprint> -CertificateStoreName Root`\r\n6.  Verify the correct certificate was used and no errors or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n\r\n**Expected:**\r\nPackage signing is successful and no error or warnings (except for warning NU3002 if you didn't use: \"-Timestamper\").\r\n\r\n**Actual:**\r\nThere is an error: \"Key does not exist\" after nuget signing a package with certificate comes from CurrentUser certificate store as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/149561645/58a865b2-4676-4361-8d54-0be92af59096)\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"34424274392","Type":"IssuesEvent","CreatedAt":"2023-12-27T06:54:16","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13108","RelatedDescription":"Closed issue \"CPM doesn't work with non-SDK style projects and static graph restore\" (#13108) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\ninternal preview\n\n### Worked before?\n\npublic preview\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nHave a non-SDK style project that uses CPM and restore static graph evaluation. Restore behaves as if CPM is disabled.\r\n\r\nThis regressed in https://github.com/NuGet/NuGet.Client/pull/5528\n\n### Verbose Logs\n\n_No response_"},{"Id":"34420795466","Type":"IssuesEvent","CreatedAt":"2023-12-27T01:30:23","Actor":"vdanche","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13110","RelatedDescription":"Opened issue \"[NETSDKE2E][Unstable]Failed to download package 'Microsoft.NETCore.app.Runtime.win-x64.8.0.0' from ...\" message displays during publish project in CLI. \" (#13110) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nSDK version from dotnet --info: 8.0.200-preview.23624.5\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\n1.install 8.0.200-preview.23624.5 sdk from https://aka.ms/dotnet/8.0.2xx/daily/dotnet-sdk-win-x64.exe\r\nin CLI, dotnet new console and then dotnet publish -r win-x64 --self-contained\r\nExpected Result:\r\nPublish successfully.\r\nActual Result:\r\nPublish successfully, but \"Failed to download package 'Microsoft.NETCore.app.Runtime.win-x64.8.0.0' from ...\" message displays during publish project in CLI.\r\n![image](https://github.com/NuGet/Home/assets/65637796/72f4f68c-10dd-42ae-bdb5-e4e17358b09f)\r\ndotnet --info:\r\n.NET SDK:\r\nVersion: 8.0.200-preview.23624.5\r\nCommit: 8065b9770c\r\nWorkload version: 8.0.200-manifests.9f3f18d7\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.19043\r\nOS Platform: Windows\r\nRID: win-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23624.5\\\r\n\r\n.NET workloads installed:\r\nWorkload version: 8.0.200-manifests.9f3f18d7\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\nVersion: 8.0.0\r\nArchitecture: x64\r\nCommit: 5535e31a71\r\n\r\n.NET SDKs installed:\r\n8.0.200-preview.23624.5 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\nMicrosoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\nNone\r\n\r\nEnvironment variables:\r\nNot set\r\n\r\nglobal.json file:\r\nNot found\r\n\r\nLearn more:\r\nhttps://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\nhttps://aka.ms/dotnet/download\n\n### Verbose Logs\n\n_No response_"},{"Id":"34413148969","Type":"IssuesEvent","CreatedAt":"2023-12-26T13:49:09","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13109","RelatedDescription":"Opened issue \"Static graph restore doesn't restore packages.config projects\" (#13109) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nall\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nHave a solution with at least 1 packages.config project. `msbuild -t:restore -p:RestorePackagesConfig=true` will successfully restore the packages.config packages, but `msbuild -t:restore -pRestorePackagesConfig=true -p:RestoreUseStaticGraphEvaluation=true` will not.\r\n\r\n[staticRestorePC.zip](https://github.com/NuGet/Home/files/13771902/staticRestorePC.zip)\r\n\r\nI think it's caused by https://github.com/NuGet/NuGet.Client/pull/3116\r\n\r\nPreviously, MSBuild's static graph API could have evaluated the MSBuild script, but since that PR, a target needs to be executed to populate the `RestoreProjectStyle` MSBuild property.\n\n### Verbose Logs\n\n_No response_"},{"Id":"34412738435","Type":"IssuesEvent","CreatedAt":"2023-12-26T13:19:40","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13108","RelatedDescription":"Opened issue \"CPM doesn't work with non-SDK style projects and static graph restore\" (#13108) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\ninternal preview\n\n### Worked before?\n\npublic preview\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nHave a non-SDK style project that uses CPM and restore static graph evaluation. Restore behaves as if CPM is disabled.\r\n\r\nThis regressed in https://github.com/NuGet/NuGet.Client/pull/5528\n\n### Verbose Logs\n\n_No response_"},{"Id":"34397477409","Type":"IssuesEvent","CreatedAt":"2023-12-25T10:49:48","Actor":"netcorefan1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13107","RelatedDescription":"Opened issue \"VS package manager tries to push up non stable packages even when disallowed in PackageReference\" (#13107) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS 17.8.3\n\n### Worked before?\n\nNever tried\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n` <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp.Workspaces\" Version=\"*\" />`\r\nNot sure if this is a bug or just me using the wrong syntax, but with the above declaration, VS package manager tries to push up version `4.9.0-2.final` while it should be the highest stable version (`4.8.0`).\r\nThis behaviour is very risky because when I open the package manager and see the package under Updates section, I could push the update if I forget about the csproj config. If I do this, the compilation will fail and will be very hard to detect the reason in a complex project.\r\nI can't even uncheck `Include prerelease` because for most of the packages I need to allow prerelease/beta versions.\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-29T03:30:20.3840144Z","RunDurationInMilliseconds":1129}