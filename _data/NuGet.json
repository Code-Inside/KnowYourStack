{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"29863173578","Type":"PullRequestEvent","CreatedAt":"2023-06-19T23:35:44","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9524","RelatedDescription":"Merged pull request \"Fix user credential result on admin panel\" (#9524) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\nproblem: `IsAADorMACredential` is not assigned. \r\n\r\nFix: check if credential is AAD or MA, then assign `IsAADorMACredential = true`, otherwise false\r\n\r\nTest: Tested in dev environment\r\n\r\nAddresses: https://github.com/NuGet/Engineering/issues/4904"},{"Id":"29862361537","Type":"PullRequestEvent","CreatedAt":"2023-06-19T22:17:22","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9526","RelatedDescription":"Merged pull request \"Updating NuGet.Protocol version.\" (#9526) at NuGet/NuGetGallery","RelatedBody":"Fix for a CG warning."},{"Id":"29860178653","Type":"PullRequestEvent","CreatedAt":"2023-06-19T19:41:17","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9526","RelatedDescription":"Opened pull request \"Updating NuGet.Protocol version.\" (#9526) at NuGet/NuGetGallery","RelatedBody":"Fix for a CG warning."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"29922608613","Type":"IssuesEvent","CreatedAt":"2023-06-22T00:41:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12658","RelatedDescription":"Closed issue \"Order dependent packageSource bug \" (#12658) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:   7.0.100\r\n Commit:    e12b7af219\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.4\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/Cellar/dotnet/7.0.100/libexec/sdk/7.0.100/\r\n\r\nHost:\r\n  Version:      7.0.0\r\n  Architecture: x64\r\n  Commit:       d099f075e4\r\n\r\n.NET SDKs installed:\r\n  7.0.100 [/usr/local/Cellar/dotnet/7.0.100/libexec/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 7.0.0 [/usr/local/Cellar/dotnet/7.0.100/libexec/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 7.0.0 [/usr/local/Cellar/dotnet/7.0.100/libexec/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  DOTNET_ROOT       [/usr/local/Cellar/dotnet/7.0.100/libexec]\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nSo this does not work:\r\n\r\n```\r\n<configuration>\r\n\t<config>\r\n\t\t<add key=\"maxHttpRequestsPerSource\" value=\"4\" />\r\n\t</config>\r\n\t<packageSources>\r\n\t\t<clear />\r\n\t\t<add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n\t\t<add key=\"DevExpress\" value=\"https://nuget.devexpress.com/secretkey/api\" />\r\n\t</packageSources>\r\n</configuration>\r\n```\r\n\r\nThis didn't work just getting timeouts. Finally found @andersstorhaug comment in [this bug repport](https://github.com/NuGet/Home/issues/7413) and changed up the order of `nuget` and `DevExpress` and suddenly everything works flawlessly:\r\n\r\n```\r\n<configuration>\r\n\t<config>\r\n\t\t<add key=\"maxHttpRequestsPerSource\" value=\"4\" />\r\n\t</config>\r\n\t<packageSources>\r\n\t\t<clear />\r\n\t\t<add key=\"DevExpress\" value=\"https://nuget.devexpress.com/secretkey/api\" />\r\n\t\t<add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n\t</packageSources>\r\n</configuration>\r\n```\r\n\r\n### Verbose Logs\r\n\r\n```shell\r\n$ dotnet restore\r\n  Determining projects to restore...\r\n  Restored /Users/knarf/projects/tds/TDSPortal/TDSPortal.Enums/TDSPortal.Enums.csproj (in 2.61 sec).\r\n  Restored /Users/knarf/projects/tds/TDSPortal/TDSPortal.Tests/TDSPortal.Tests.csproj (in 17.85 sec).\r\n  Failed to download package 'DevExpress.Blazor.22.2.4' from 'https://nuget.devexpress.com/secretkey/api/package/DevExpress.Blazor/22.2.4'.\r\n  The HTTP request to 'GET https://nuget.devexpress.com/secretkey/api/package/DevExpress.Blazor/22.2.4' has timed out after 100000ms.\r\n```\r\n"},{"Id":"29922501430","Type":"IssuesEvent","CreatedAt":"2023-06-22T00:31:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12687","RelatedDescription":"Opened issue \"Unskip failing unit tests due to System.Security.Cryptography.CryptographicException\" (#12687) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nFollow-up to https://github.com/NuGet/Client.Engineering/issues/2353\n\n### Verbose Logs\n\n_No response_"},{"Id":"29922207602","Type":"IssuesEvent","CreatedAt":"2023-06-22T00:04:33","Actor":"dainizzz","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12686","RelatedDescription":"Opened issue \"Migrate dotnet nuget config command to System.CommandLine\" (#12686) at NuGet/Home","RelatedBody":"Tracking issue for migrating `dotnet nuget config` command to `System.CommandLine` package"},{"Id":"29918622343","Type":"IssuesEvent","CreatedAt":"2023-06-21T20:12:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12684","RelatedDescription":"Closed issue \"NuGet: LockFileUtils.GetLockFileItems boxing enumerator\" (#12684) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1837292"},{"Id":"29918379272","Type":"IssuesEvent","CreatedAt":"2023-06-21T20:00:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12678","RelatedDescription":"Closed issue \"PackageSpecificWarningProperties classes do redundant collection lookups\" (#12678) at NuGet/Home","RelatedBody":"`PackageSpecificWarningProperties` classes do redundant collection lookups."},{"Id":"29918371059","Type":"IssuesEvent","CreatedAt":"2023-06-21T20:00:29","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12659","RelatedDescription":"Closed issue \"Performance: Don't allocate as many Task instances\" (#12659) at NuGet/Home","RelatedBody":"When a `Task` completes successfully, it's `Task` object may be reused.\r\n\r\nCurrently NuGet.Client allocates a lot of task objects in places where singletons could be used.\r\n\r\nChanging this would reduce allocations overall and reduce the overhead of async code."},{"Id":"29918345476","Type":"IssuesEvent","CreatedAt":"2023-06-21T19:59:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12685","RelatedDescription":"Opened issue \"FrameworkNameProvider.GetVersionString boxing enumerator\" (#12685) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1837332"},{"Id":"29918304693","Type":"IssuesEvent","CreatedAt":"2023-06-21T19:57:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12667","RelatedDescription":"Closed issue \"Specify SelectionCriteria list capacity correctly\" (#12667) at NuGet/Home","RelatedBody":"Related to https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1837292"},{"Id":"29918189333","Type":"IssuesEvent","CreatedAt":"2023-06-21T19:51:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12684","RelatedDescription":"Opened issue \"NuGet: LockFileUtils.GetLockFileItems boxing enumerator\" (#12684) at NuGet/Home","RelatedBody":"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1837292"},{"Id":"29909363351","Type":"IssuesEvent","CreatedAt":"2023-06-21T13:56:47","Actor":"codereader","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12683","RelatedDescription":"Opened issue \"RestorePackagesWithLockFile: Nuget.exe generates different lock file than Visual Studio\" (#12683) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe, Visual Studio Package Manager Console\n\n### Product Version\n\nNuGet.exe 6.6.1 + Visual Studio 2022 17.6.3 (NuGet 6.6.0 built-in)\n\n### Worked before?\n\nNot that I know of\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI have a solution containing mixed C#/C++ projects. The attached repro solution contains one C#/.NET 6 Project referencing a C++/CLR project, which in turn references a plain C++ project. The C# project references a single NuGet Package `System.Memory`, and is using the Central Package Management feature (not sure if this is relevant). I'm aiming to achieve reproducible nuget restores, therefore I enabled the **RestorePackagesWithLockFile** setting.\r\n\r\nProblem is, the `packages.lock.json` file is different depending on whether it's generated by nuget.exe or Visual Studio. When enabling the RestoreLockedMode setting, either one, VS or nuget.exe, will run into trouble when hitting a lock file generated by the other.\r\n\r\nThe attached demo solution contains the `packages.lock.json` files as generated by VS and has `<RestoreLockedMode>true</RestoreLockedMode>` activated in the `Directory.Packages.props` file. When trying to run a `nuget restore` using the CLI (v6.6.1) it will report that the dependencies of the C++ CLR project have changed:\r\n\r\n> NU1004: The project reference **cppprojecta** has changed. Current dependencies: **None** lock file's dependencies: **Common**\r\n\r\nIt boils down to Studio adding the \"project\" type reference to `common` to the lock file, whereas the CLI doesn't recognize the ProjectReference:\r\n\r\n```\r\n\"net6.0\": {\r\n  \"System.Memory\": {\r\n    \"type\": \"Direct\",\r\n    \"requested\": \"[4.5.5, )\",\r\n    \"resolved\": \"4.5.5\",\r\n    \"contentHash\": \"XIWiDvKPXaTveaB7HVganDlOCRoj03l+jrwNvcge/t8vhGYKvqV+dMv6G4SAX2NoNmN0wZfVPTAlFwZcZvVOUw==\"\r\n  },\r\n  \"common\": {\r\n    \"type\": \"Project\"\r\n  },\r\n  \"cppprojecta\": {\r\n    \"type\": \"Project\",\r\n    \"dependencies\": {\r\n      \"Common\": \"1.0.0\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI can twist it around and have `nuget.exe` generate the lock file, but then Visual Studio will complain about the lock file (sometimes with a more cryptic message about missing frameworks). Either way, one cannot deal with the lock file generated by the other toolchain.\r\n\r\nIs there anything I can do to resolve this issue? I need the nuget client to produce the same result as the one in studio, since a `nuget.exe restore` is one of the first step happening on the build agent, and if it can't deal with the lock files produced by the developer's VS, this prevents us from using the locked restore mode.\r\n\r\nOf course, the actual productive solution is of course far more complex, this is just a boiled-down example.\r\n[LockedRestore.zip](https://github.com/NuGet/Home/files/11818306/LockedRestore.zip)\r\n\n\n### Verbose Logs\n\n```shell\nnuget.exe restore LockedRestore.sln -UseLockFile -LockedMode -ForceEnglishOutput\r\n\r\nMSBuild auto-detection: using msbuild version '17.6.3.22601' from 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\Bin\\amd64'.\r\nWARNING: NU1507: There are 2 package sources defined in your configuration. When using central package management, please map your package sources with package source mapping (https://aka.ms/nuget-package-source-mapping) or specify a single package source. The following sources are defined: nuget.org, Private\r\nNU1004: The project reference cppprojecta has changed. Current dependencies: None lock file's dependencies: Common.The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\nWriting assets file to disk. Path: C:\\Path\\To\\ProjectA\\obj\\project.assets.json\r\nFailed to restore C:\\Path\\To\\ProjectA\\ProjectA.csproj (in 262 ms).\r\n\r\n\r\nErrors in C:\\Path\\To\\ProjectA\\ProjectA.csproj\r\n    NU1004: The project reference cppprojecta has changed. Current dependencies: None lock file's dependencies: Common.The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\n\r\nNuGet Config files used:\r\n    C:\\Users\\name\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n    C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\n```\n"},{"Id":"29904605190","Type":"IssuesEvent","CreatedAt":"2023-06-21T11:05:11","Actor":"elina-zh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12682","RelatedDescription":"Opened issue \"Polly 7.2.4 nuget package - invalid package signature or a signature that connot be verified on the Windows.\" (#12682) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n6\n\n### Worked before?\n\nno\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n Repro Steps:\r\n Perform dotnet restore on Polly 7.2.4 nuget package on Windows\r\n The action is fails with the following error:\r\n Package 'Polly 7.2.4' from source '[https://api.nuget.org/v3/index.json']: The package signature is invalid or cannot be verified on this platform.\r\n \r\nThe failure is happening on Windows, where on Linux it is working.\n\n### Verbose Logs\n\n_No response_"},{"Id":"29896084404","Type":"IssuesEvent","CreatedAt":"2023-06-21T04:50:52","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12681","RelatedDescription":"Opened issue \"Preview Window needs some strings reworded and margins adjusted\" (#12681) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nThe PM UI Preview Window has a few issues:\r\n1. Header text is verbose and uses terms like \"Click\".\r\n2. OK really should be an \"Apply\" button.\r\n3. Resizing to a smaller window, some strings get truncated.\r\nExample:\r\n![image](https://github.com/NuGet/Home/assets/49205731/e38af8fd-088c-4c6a-82b1-a64fdd8de9a5)\r\n\r\n\r\n4. Screen readers announce \"Package changes pane\" which is an unnecessary secondary explanation of the visible label on the screen.\n\n### Verbose Logs\n\n_No response_"},{"Id":"29893677244","Type":"IssuesEvent","CreatedAt":"2023-06-21T01:31:20","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12680","RelatedDescription":"Opened issue \"NuGet.Client allocates many instances of comparers\" (#12680) at NuGet/Home","RelatedBody":"Comparers are almost always immutable and well suited to reuse. A lot of code in NuGet.Client constructs a new instance when needed, then lets the GC clean it up.\r\n\r\nAdding static `Instance` members to comparers would allow them to be reused with minimal code churn.\r\n\r\nThere are some instances where comparers come from a set of values, depending upon the value of an enum (like `VersionComparison`). There can be a singleton for each, and a method to look this up efficiently at runtime when the required behaviour can vary with state.\r\n\r\nWhere possible, public constructors should be marked obsolete to discourage their futher use. Where possible, they should be made private."},{"Id":"29892855882","Type":"IssuesEvent","CreatedAt":"2023-06-21T00:27:52","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12679","RelatedDescription":"Closed issue \"Add NoAllocEnumerateExtensions\" (#12679) at NuGet/Home","RelatedBody":""},{"Id":"29892851583","Type":"IssuesEvent","CreatedAt":"2023-06-21T00:27:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12679","RelatedDescription":"Opened issue \"Add NoAllocEnumerateExtensions\" (#12679) at NuGet/Home","RelatedBody":""},{"Id":"29892464410","Type":"IssuesEvent","CreatedAt":"2023-06-20T23:53:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12666","RelatedDescription":"Closed issue \"Avoid value lookup in foreach loop over dictionary's keys\" (#12666) at NuGet/Home","RelatedBody":"NuGet.Client has several places where the following pattern is seen:\r\n\r\n```c#\r\nforeach (var key in dictionary.Keys)\r\n{\r\n    var value = dictionary[key];\r\n    // ...\r\n}\r\n```\r\n\r\nThis code is slower than it needs to be. It's possible to avoid looking up the value on each iteration of the loop by enumerating both the key and value at the same time:\r\n\r\n```c#\r\nforeach (KeyValuePair<TKey, TValue> pair in dictionary)\r\n{\r\n    var key = pair.Key;\r\n    var value = pair.Value;\r\n    // ...\r\n}\r\n```\r\n\r\nThis will be faster as the lookups are avoided, and also avoids allocating a `Dictionary<>.KeyCollection` class.\r\n\r\nUsing deconstriction, it's possible to write this more succinctly as:\r\n\r\n```c#\r\nforeach ((var key, var value) in dictionary)\r\n{\r\n    // ...\r\n}\r\n```\r\n"},{"Id":"29892361457","Type":"IssuesEvent","CreatedAt":"2023-06-20T23:44:03","Actor":"drewnoakes","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12678","RelatedDescription":"Opened issue \"PackageSpecificWarningProperties classes do redundant collection lookups\" (#12678) at NuGet/Home","RelatedBody":"`PackageSpecificWarningProperties` classes do redundant collection lookups."},{"Id":"29892018243","Type":"IssuesEvent","CreatedAt":"2023-06-20T23:14:01","Actor":"anonhostpi","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12677","RelatedDescription":"Opened issue \"Nuget.Frameworks.CompatibilityProvider makes \"Net 5 Era\" frameworks incompatible with .NETStandard\" (#12677) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Frameworks 6.6.1\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis particular line:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Frameworks/CompatibilityProvider.cs#L200\r\n\r\nPrevents all .NET 5 (and all .NET 5+ `NugetFramework` where `hasplatform` property is `false`) from recognizing that they are compatible with .NET Standard\r\n\r\nFor example, this currently returns false:\r\n\r\n```\r\nDefaultCompatibilityProvider.Instance.IsCompatible(\r\n    [a .NET 7 NugetFramework object],\r\n    [a .NET Standard 2.0 NugetFramework object]\r\n)\r\n```\r\n\r\nRelated issue: https://stackoverflow.com/questions/76502689/how-can-i-map-a-net-core-version-to-net-standard-with-libraries-like-nuget-pac\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"29730541084","Type":"IssuesEvent","CreatedAt":"2023-06-13T19:08:21","Actor":"heng-liu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/69","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\" (#69) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2023-29337 | NuGet Client Remote Code Execution Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET and NuGet on Linux. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET 7.0 and NuGet(nuget.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement) where a potential race condition that can lead to a symlink attack on Linux. Non-Linux platforms are not affected.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/NuGet/Home/issues/12653\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThis issue only affects Linux systems.\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.6.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.5.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.4.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.3.2 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.2.3 version or earlier.\r\n- Any NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, Microsoft.Build.NuGetSdkResolver, NuGet.PackageManagement 6.0.4 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-6qmf-mmc7-6c2p)\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET SDK 7.0.106 or earlier, or 7.0.303 or earlier\r\n- Any .NET SDK 6.0.117 or earlier, or 6.0.312 or earlier, or 6.0.409 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET 7.0 and NuGet (NuGet.exe, NuGet.Protocol, NuGet.Common, NuGet.CommandLine, NuGet.Commands, NuGet.PackageManagement versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.6.0 or lower, you should download and install 6.6.1 from https://dist.nuget.org/win-x86-commandline/v6.6.1/nuget.exe.\r\n- If you're using NuGet.exe 6.5.0 or lower, you should download and install 6.5.1 from https://dist.nuget.org/win-x86-commandline/v6.5.1/nuget.exe.\r\n- If you're using NuGet.exe 6.4.1 or lower, you should download and install 6.4.2 from https://dist.nuget.org/win-x86-commandline/v6.4.2/nuget.exe.\r\n- If you're using NuGet.exe 6.3.2 or lower, you should download and install 6.3.3 from https://dist.nuget.org/win-x86-commandline/v6.3.3/nuget.exe.\r\n- If you're using NuGet.exe 6.2.3 or lower, you should download and install 6.2.4 from https://dist.nuget.org/win-x86-commandline/v6.2.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.4 or lower, you should download and install 6.0.5 from https://dist.nuget.org/win-x86-commandline/v6.0.5/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 7.0, you should download and install Runtime 7.0.7 or SDK 7.0.107 or SDK 7.0.304 from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install Runtime 6.0.18 or SDK 6.0.118 or SDK 6.0.312 from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 6.0 or .NET 7.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at <https://aka.ms/corebounty>.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n[Kalle Niemitalo](https://github.com/KalleOlaviNiemitalo)\r\n\r\n### External Links\r\n\r\n[CVE 2023-29337](https://www.cve.org/CVERecord?id=CVE-2023-29337)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 13, 2023): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2023-06-13_\r\n"},{"Id":"28861759967","Type":"IssuesEvent","CreatedAt":"2023-05-04T23:06:51","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Closed issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-06-22T03:30:22.4976572Z","RunDurationInMilliseconds":1275}