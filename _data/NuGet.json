{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32777485768","Type":"PullRequestEvent","CreatedAt":"2023-10-23T16:00:28","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/12886","RelatedDescription":"Merged pull request \"Spec for `dotnet package search` : implements a `search` functionality.\" (#12886) at NuGet/Home","RelatedBody":"This PR \r\n- provides a spec for implementing `search` functionality in DotNet.\r\n- Here is the implementation PR: https://github.com/NuGet/NuGet.Client/pull/5466\r\nI previously made a spec that included this as a sub project, however, I noticed that making its own spec for it would be a better idea. Here is a link to the other PR : https://github.com/NuGet/Home/pull/12870 . "},{"Id":"32774057655","Type":"IssuesEvent","CreatedAt":"2023-10-23T14:14:39","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12962","RelatedDescription":"Opened issue \"NuGet should automatically send credentials after the first request with a HTTP 401 response\" (#12962) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nall\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nsee:\r\n\r\n* https://github.com/NuGet/Home/issues/12517\r\n\r\nAfter NuGet experiences one HTTP 401 response from a server, sending more unauthenticated requests just increases latency and increases the server workload processing these requests.\r\n\r\nAny action where NuGet makes more than 1 HTTP request to a server will reproduce the result. For a V3 feed, since the first request is the service index, it's effectively possible to restore a single package, or open the browse tab in PM UI\r\n\r\n\r\nIn HttpSourceAuthenticationHandler, when a response is a HTTP 401, NuGet needs to check if the WWW-Authenticate header exists, and if so, when it responds with the Basic scheme, NuGet needs to explicitly set the Authorization header on all future requests. If a future 401 response is received, credentials should be re-requested, in case the customer interactively provided a credential and made a typo, or if a cred provider returned a time-limited token that needs to be refreshed.\r\n\r\nSince we're going to have to handle Basic authentication ourselves, it would be great to also handle Bearer, since that will enable OAuth2 (including OIDC) credential providers. It should be effectively zero cost to add once Basic is handled.\r\n\r\n* https://github.com/NuGet/Home/issues/12877\n\n### Verbose Logs\n\n```shell\nWe previously tried HttpClientHandler.PreAuthenticate, but there's a bug in the .NET runtime:\r\n\r\n* https://github.com/dotnet/runtime/issues/93340\n```\n"},{"Id":"32773476769","Type":"IssuesEvent","CreatedAt":"2023-10-23T13:57:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12961","RelatedDescription":"Opened issue \"HTTP 401 after some time in VS\" (#12961) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet 6.8\n\n### Worked before?\n\nNuGet 6.6\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nUse a package source that needs credentials, and use a credential manager to provide those credentials. If VS is open for long enough (longer than token validity that the cred provider gave to NuGet), then all HTTP requests will result in HTTP 401, because HttpClient will keep using the old credential, and never refresh to the newer token that the cred provider gave.\r\n\r\nThe root cause is that NuGet started using `HttpClientHandler.PreAuthenticate`, but there's a bug in the .NET runtime:\r\n\r\n* https://github.com/dotnet/runtime/issues/93340\r\n\r\nNote, that the Azure Artifacts cred provider currently gives a token with a long valid duration, so it's unlikely most customers will experience this, with Azure DevOps. However, if customers are using other credential providers, that return short lived tokens, the probability of encountering this problem is greatly increased.\n\n### Verbose Logs\n\n_No response_"},{"Id":"32765727078","Type":"IssuesEvent","CreatedAt":"2023-10-23T09:26:52","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12949","RelatedDescription":"Closed issue \"[NuGet.Versioning] SemanticVersion.HasMetadata should indicate that Metadata is not null when true\" (#12949) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Versioning v6.7.0\n\n### Worked before?\n\nno\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. `dotnet new console -f net6.0 -o NugetVersioningHasMetadataRepro`\r\n2. `cd NugetVersioningHasMetadataRepro`\r\n3. `dotnet add package NuGet Nuget.Versioning --version 6.7.0`\r\n4. In `Program.cs` write:\r\n    ```csharp\r\n    var x = NuGet.Versioning.SemanticVersion.Parse(\"1.0.0\");\r\n    var output = x.HasMetadata ? x.Metadata[0..Math.Min(4, x.Metadata.Length)] : string.Empty;\r\n    ```\r\n\r\nWhat I expected:\r\n5. Build with no warnings.\r\n\r\nWhat I got:\r\n5. Observe build warnings on `x.Metadata`: `Program.cs(2,30): warning CS8602: Dereference of a possibly null reference.`\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32764788703","Type":"IssuesEvent","CreatedAt":"2023-10-23T08:54:27","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12960","RelatedDescription":"Opened issue \"Set NuGetAudit defaults in MSBuild\" (#12960) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nAn MSBuild evaluation of the project that does not explicitly set `NuGetAudit`, `NuGetAuditLevel` or `NuGetAuditMode` will not have any values set for these properties, and therefore dotnet/project-system doesn't know what the current value is\n\n### Desired Behavior\n\nAs per the linked issue, set defaults as part of project evaluation, so the VS project properties page knows what value to display as the current value.\n\n### Additional Context\n\nhttps://github.com/dotnet/project-system/issues/9246"},{"Id":"32735544264","Type":"IssuesEvent","CreatedAt":"2023-10-20T22:57:46","Actor":"mckinley-melton","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12958","RelatedDescription":"Opened issue \"Polly 7.4.2 Invalid Signature when dotnet restore run via MSBuild\" (#12958) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nmsbuild -version 17.2.0+41abc5629\n\n### Worked before?\n\nYes. Polly 7.2.3.1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI updated the package Microsoft.R9.Extensions.HttpClien.Resilience.Polly from version 1.29.0 to 1.32.1, which updates the package Polly 7.2.3.1 to version 7.2.4.\r\n\r\nI then tried to run this change through an MS build pipeline which includes a dotnet restore step. This is now failing the dotnet restore error \"The package signature is invalid or cannot be verified on this platform.\"\r\n\r\nPer [this documentation](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3003), it said to report the issue here.\n\n### Verbose Logs\n\n```shell\n\"D:\\a\\_work\\1\\s\\Source\\VirtualVisit.sln\" (Restore target) (1) ->\r\n       (Restore target) -> \r\n         D:\\a\\_work\\1\\s\\Source\\Services\\VirtualAppointmentMgmtSvc\\Domain.UnitTest\\Domain.UnitTest.csproj : error NU3003: Package 'Polly 7.2.4' from source 'https://domoreexp.pkgs.visualstudio.com/Teamspace/_packaging/teams-service-platform-virtualvisits/nuget/v3/index.json': The package signature is invalid or cannot be verified on this platform. [D:\\a\\_work\\1\\s\\Source\\VirtualVisit.sln]\n```\n"},{"Id":"32729917924","Type":"IssuesEvent","CreatedAt":"2023-10-20T17:37:41","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12957","RelatedDescription":"Opened issue \"RestoreTask: Control whether to embed files in the binlog\" (#12957) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nNeed some properties on RestoreTask to control whether to embed files in the binlog, and possibly filter out .dgspec.json files.\r\n\r\nWe've found that the embedded .nuget.dgspec.json files are huge, and our binlog is 1 GB in size. Would be nice to be able to control whether to include .dgspec files here:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/5ce332fb834feea1f6c974d17456c8c9d5504e09/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L216\r\n\r\nNot sure how fine grained to make it. Just one property on the task to embed dgspec files, default to true? (No effect if no binlog present). Or 4 properties to control each of the four types of files? Or a main property to control all files?\r\n\r\nEmbedding files is useful and a good default, but for large builds embedding dgspec file specifically renders the binlog almost unusable.\n\n### Additional Context and Details\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-24T03:30:19.0548419Z","RunDurationInMilliseconds":1094}