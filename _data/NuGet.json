{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34495643677","Type":"PullRequestEvent","CreatedAt":"2024-01-01T00:40:16","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/pull/13117","RelatedDescription":null,"RelatedBody":"~P"},{"Id":"34495641328","Type":"PullRequestEvent","CreatedAt":"2024-01-01T00:40:00","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/13117","RelatedDescription":"Closed pull request \"Triage \" (#13117) at NuGet/Home","RelatedBody":"~P"},{"Id":"34488878186","Type":"IssuesEvent","CreatedAt":"2023-12-31T07:33:19","Actor":"Nefcanto","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13118","RelatedDescription":"Opened issue \"NuGet not respecting local cache\" (#13118) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nNuGet does not honor the locale cache. We have restored a project with many packages in a docker image to cache images so that we can run an app without an internet connection, but we get this error:\r\n\r\n```\r\nApiContainer | MSBuild version 17.8.3+195e7f5a3 for .NET\r\nApiContainer |   Determining projects to restore...\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable (api.nuget.org:443) [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable [/Project/AdminApi/Api.csproj]\r\nApiContainer | \r\nApiContainer | Build FAILED.\r\nApiContainer | \r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable (api.nuget.org:443) [/Project/AdminApi/Api.csproj]\r\nApiContainer | /usr/share/dotnet/sdk/8.0.100/NuGet.targets(156,5): error :   Resource temporarily unavailable [/Project/AdminApi/Api.csproj]\r\n\r\n```\n\n### Desired Behavior\n\nWhen packages are cached once, NuGet should use them if the internet connection is not available. Preferably it should use them and not connect to the internet at all, even if it's available. Because packages are already there on the disk.\n\n### Additional Context\n\nThis is our `Dockerfile`:\r\n\r\n```\r\n# https://mcr.microsoft.com/v2/vscode/devcontainers/dotnet/tags/list\r\n# https://mcr.microsoft.com/v2/devcontainers/dotnet/tags/list\r\n# https://github.com/devcontainers/images/blob/main/src/dotnet/.devcontainer/Dockerfile\r\n# https://hub.docker.com/_/microsoft-dotnet-sdk\r\nARG VARIANT=\"8.0-bookworm-slim\"\r\nFROM mcr.microsoft.com/vscode/devcontainers/dotnet:${VARIANT}\r\n\r\nENV PATH=\"${PATH}:/HolismHolding/Commands/ApiContainer:/HolismHolding/Commands\"\r\n\r\nENV Nuget=/root/.local/share/NuGet/http-cache/\r\n\r\nCOPY . /HolismApi/Infra\r\n\r\nRUN mkdir /Temp \\\r\n    && cd /Temp \\\r\n    && dotnet new console \\\r\n    && echo '<Project Sdk=\"Microsoft.NET.Sdk.Web\"><Import Project=\"/HolismApi/Infra/DotNet.targets\" /></Project>' > /Temp/Temp.csproj \\\r\n    && echo 'System.Console.WriteLine(\"hello\");' > /Temp/Program.cs \\\r\n    && dotnet restore \\\r\n    && dotnet build \\\r\n    && cd / \\\r\n    && rm -rf /Temp\r\n\r\nRUN apt update -qq \\\r\n    && mkdir -p /Temp/ImageResizingAndCompression \\\r\n    && chmod 777 --preserve-root /Temp/ImageResizingAndCompression \\\r\n    && mkdir -p /Temp/VideoConversion \\\r\n    && chmod 777 --preserve-root /Temp/VideoConversion \\\r\n    && apt install bc -qq -y \\\r\n    && apt install procps -qq -y \\\r\n    && apt install file -qq -y \\\r\n    && apt install gettext-base -qq -y \\\r\n    && apt install apt-utils -qq -y \\\r\n    && apt install libgdiplus -qq -y \\\r\n    && apt install inotify-tools -qq -y \\\r\n    && apt install libc6-dev -qq -y \\\r\n    && apt install webp -qq -y \\\r\n    && apt install telnet -qq -y \\\r\n    && apt install dnsutils -qq -y \\\r\n    && apt install imagemagick -qq -y \\\r\n    && apt install ffmpeg -qq -y \\\r\n    && cd /usr/local/bin \\\r\n    && curl https://getmic.ro | bash\r\n```\r\n\r\nAs you can see we create a `Temp.csproj` that has a `Import`. This is what it imports:\r\n\r\n```\r\n<Project>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <OutputPath>.\\bin</OutputPath>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>\r\n    <Nullable>disable</Nullable>\r\n    <ImplicitUsings>disable</ImplicitUsings>\r\n    <Deterministic>true</Deterministic>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"/HolismApi/Infra/Nuget.targets\" />\r\n\r\n  <ItemGroup>\r\n    <None Include=\"./Settings.json\" Condition=\"Exists('./Settings.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./SettingsOverride.json\" Condition=\"Exists('./SettingsOverride.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./LocalSecrets.json\" Condition=\"Exists('./LocalSecrets.json')\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"./ConnectionStrings.json\" Condition=\"Exists('./ConnectionStrings.json')\" >\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nAnd this is our `Nuget.targets`:\r\n\r\n```\r\n<Project>\r\n\r\n  <ItemGroup>\r\n\r\n    <PackageReference Include=\"AngleSharp\" Version=\"1.0.7\" />\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.19.1\" />\r\n    <PackageReference Include=\"Bogus\" Version=\"35.2.0\" />\r\n    <PackageReference Include=\"ClosedXML\" Version=\"0.102.1\" />\r\n    <PackageReference Include=\"Hashids.net\" Version=\"1.7.0\" />\r\n    <PackageReference Include=\"Humanizer.Core\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.ar\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.fa\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Humanizer.Core.ru\" Version=\"2.14.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"8.0.0\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Protocols.OpenIdConnect\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Tokens\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"morelinq\" Version=\"4.1.0\" />\r\n    <PackageReference Include=\"MySqlConnector\" Version=\"2.3.3\" />\r\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql.NetTopologySuite\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"SocketIOClient\" Version=\"3.1.1\" />\r\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"7.0.3\" />\r\n    <PackageReference Include=\"System.Linq.Dynamic.Core\" Version=\"1.3.7\" />\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"8.0.0\" />\r\n    <!-- <PackageReference Include=\"AngouriMath\" Version=\"1.3.0\" /> -->\r\n\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nAnd then we do `dotnet restore` and `dotnet build` to make sure that our dependencies are cached once and our project can be built.\r\n\r\nThen we use this image in an environment without internet access. When we upgraded to dotnet 8, it broke."},{"Id":"34483722305","Type":"PullRequestEvent","CreatedAt":"2023-12-30T17:38:35","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13117","RelatedDescription":"Opened pull request \"Triage \" (#13117) at NuGet/Home","RelatedBody":"~P"},{"Id":"34466830895","Type":"PullRequestEvent","CreatedAt":"2023-12-29T11:33:08","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13116","RelatedDescription":"Opened pull request \"Patch  1\" (#13116) at NuGet/Home","RelatedBody":""},{"Id":"34465177089","Type":"IssuesEvent","CreatedAt":"2023-12-29T09:41:13","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13104","RelatedDescription":"Closed issue \"VS Package Manager Console should close Text View\" (#13104) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Manager Console\n\n### Product Version\n\nall\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nVS' Package Manager Console creates an IVsTextView to render the PowerShell output, but doesn't ever close it.\r\n\r\nThis is just a technicality, as PMC is a VS Tool Window, which only gets hidden when the customer facing windows is closed. Hence, the class is a singleton and is only disposed when VS is closed. But, technically PMC isn't cleaning up after itself correctly.\n\n### Verbose Logs\n\n_No response_"},{"Id":"34460947574","Type":"IssuesEvent","CreatedAt":"2023-12-29T03:21:56","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13115","RelatedDescription":"Opened issue \"[Bug Bash] The “Remove” button should be disable when no package source mapping is selected in the “Package Source Mappings” list \" (#13115) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.9.0.69\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Repro Steps:        \r\n\r\n1. Create a .NET Core Console App project via VS.  \r\n2. Right-click the project in Solution Explorer and select ‘Manage NuGet Packages…’ menu item to open PM UI.  \r\n\r\n3. Click the “settings” button on the right panel and click “Package Source Mapping” tab. \r\n\r\n4. Click “Add” button, type a string in the package pattern textbox and select a package source in the source list below.  \r\n 5. Click “Add” button on the bottom. \r\n\r\n 6. Observe the \"Remove\" button when no package source mapping is selected. \r\n\r\n \r\n\r\n#### Expected:      \r\n\r\nThe “Remove” button should be disable. \r\n\r\n#### Actual:         \r\n\r\nThis button is available as below:  \r\n![RemoveButton](https://github.com/NuGet/Home/assets/84695155/30465631-0282-426a-a460-947664b7d3d5)\r\n\r\n#### Notes:     \r\n\r\n1.The repro rate is 100%.   \r\n2.This is not a regression since it is a new feature.     \r\n\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."}],"ResultType":"GitHubEvent"}},"RunOn":"2024-01-01T03:30:19.1018582Z","RunDurationInMilliseconds":1161}