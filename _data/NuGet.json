{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44183025355","Type":"PullRequestEvent","CreatedAt":"2024-11-25T21:49:14","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10282","RelatedDescription":"Opened pull request \"Bugfix for PostProcess Stats job\" (#10282) at NuGet/NuGetGallery","RelatedBody":"\r\nAddresses https://github.com/orgs/NuGet/projects/21/views/1?filterQuery=milestone%3A%22Sprint+2024-11%22+assignee%3A%40me&pane=issue&itemId=64259916&issue=NuGet%7CEngineering%7C5445"},{"Id":"44151695537","Type":"PullRequestEvent","CreatedAt":"2024-11-25T06:52:50","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10281","RelatedDescription":"Opened pull request \"Migrate ArchivePackages to using MSI for storage access\" (#10281) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/Engineering/issues/5441\r\n\r\nI took the opportunity to make this code consistent with like types (style, etc.). Essentially the logic flow is untouched, but some methods consumed here needed updates to parameters."},{"Id":"44149802150","Type":"PullRequestEvent","CreatedAt":"2024-11-25T05:31:13","Actor":"V-Manali","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10279","RelatedDescription":"Merged pull request \"[ReleasePrep][2024.11.22]RI of dev into main\" (#10279) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44183432196","Type":"IssuesEvent","CreatedAt":"2024-11-25T22:05:15","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13960","RelatedDescription":"Opened issue \"Refactor RestoreCommand.ExecuteAsync()\" (#13960) at NuGet/Home","RelatedBody":"The `RestoreCommand.ExecuteAsync()` method is long and complicated to read. Refactor it into multiple methods."},{"Id":"44177883368","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:51:32","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13906","RelatedDescription":"Closed issue \"CPM - Pre-Restore hook not working / does not exist\" (#13906) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, NuGet.exe\n\n### Product Version\n\ndotnet 8, nuget 6.10+\n\n### Worked before?\n\nLinked post implied this once worked, unknown info\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nShort: We need a hook that allows a PreRestore event to occur. \r\n\r\nLonger:\r\nUntil `slnx` files become more mature, which will help the \"where\" to put the such event, I still don't think this will solve the issue. \r\n\r\nThis is directly used for Central Package Management (CPM). I've got a wide array of interlaced dependencies separated into multiple repositories. Changing this is not an option. To keep third party and local packages in sync, we thought CPM would be good, so we keep a central repository and keep our `Directory.Packages.Props` files managed there. At the pipeline build time, we simply fetch that file to the `$(SolutionDir)` and bam, build successful.\r\n\r\nThe problems come when developing locally. It's the wish of every developer to simply fetch and pull code from git and just click build, and have it work, but no PreBuild or PreRelease event type functionality could be found to invoke a download of that Directory.Packages.Props file. \r\n\r\nThe linked item here seems to no longer work: https://github.com/NuGet/Home/issues/4781\r\nThe item above has a few targets from various target files which seem to apply before restore, but when I tried it did not work.\r\nEverything i tried would restore first, fail (and pull versions despite the failure....different issue), and never try to execute the pull (since it failed before it).\r\n\r\nIs this supported but has been disabled? Does it only fail because events can only exist in csproj files, before slnx solves that? Any insight into this would be helpful.\n\n### Verbose Logs\n\n_No response_"},{"Id":"44177694051","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:46:19","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13953","RelatedDescription":"Closed issue \".NET Designer and NuGet packages for UI: Problems with IncludeAssets/ExcludeAssets/PrivateAssets\" (#13953) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVS2022 17.12.178.10385\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI am switching the support of our UI libraries/apps from using NETFramework 4.7.2 + NET 8 Windows to using only NET 8 Windows as part of the migration process to the latest .NET.  \r\n\r\nThe UI uses third party libraries (DevExpress WinForms). To prevent copying of the DevExpress dlls to the output folder, those packages were originally configured as ExcludeAssets=runtime. This was done because the dlls end up being pulled into a different folder in the output tree through another project and this library is enhancing that one. The whole application is published later on via ClickOnce, so there cannot be duplicates anywhere on the folder published.\r\n\r\nWhen having both frameworks, the designer run as for Framework and everything was OK. When having only NET 8 Windows, the designer seems to need to consume the content of the lib folder for all DevExpress packages or the in-place designer in VisualStudio does not work. So ExcludeAssets=runtime does not work anymore. After removing that, the designer works but dlls start appearing in folders where they should not be (and causing ClickOnce issues). \r\n\r\nI tested several combinations of asset configurations, just in case the tag or the asset was being used wrong, but there does not seem to be a way to have the contents in the lib folder used for the designer but not copy them out to the output folder.\r\n\r\nCombinations tested:\r\nIncludeAssets: (default); PrivateAssets: (default), ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: (default); PrivateAssets: (default), ExcludeAssets: runtime -> Dlls not copied, Designer does not works\r\nIncludeAssets: (default); PrivateAssets: runtime, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: (default); PrivateAssets: all, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: compile; PrivateAssets: all, ExcludeAssets: (default) -> Dlls not copied, Designer doesn't work\r\nIncludeAssets: compile;runtime; PrivateAssets: all, ExcludeAssets: (default) -> Dlls copied, Designer works\r\nIncludeAssets: compile;runtime; PrivateAssets: all, ExcludeAssets: runtime -> Dlls not copied, Designer doesn't work\r\n\r\nFor reference, the nupkg for the  NuGet packages referenced looks as follows:\r\n![image](https://github.com/user-attachments/assets/3dfcf3d5-a941-4e05-81cf-f0f86763f010)\r\n\r\nAnd the DesignToolsError\r\n![image](https://github.com/user-attachments/assets/6cfaabe7-3e04-4fcc-b99f-aca4a41cfe32)\r\n\r\nOpening the report here, as it's not clear if the issue is the NuGet package assets configuration or if it's how VS and the .NET designer use them.\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44177583590","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:43:07","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13941","RelatedDescription":"Closed issue \"NU1004 after installing .NET 9 SDK\" (#13941) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe\r\n\r\n### Product Version\r\n\r\n9.0.100\r\n\r\n### Worked before?\r\n\r\n8.0.301\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\nWe're using [repeatable package restores](https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/) in our .NET build pipeline. However as Azure DevOps windows-2022 version 20241113.3.0 started rolling out to agents, our build has been failing:\r\n\r\n> error NU1004: The project's runtime identifiers have changed from. Project's runtime identifiers: win-x86, lock file's runtime identifiers win7-x86.The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\n\r\nWe're still targeting .NET 8, not .NET 9, so I don't understand why this is now failing. This is seemingly related to NuGet yet again changing identifiers between versions and the lockfiles not being compatible between SDKs?\r\n\r\nWe've since tried updating the lockfiles, which makes the build succeed when .NET 9 SDK is installed. However as some agents are still running 20241021.1.0, the updated lockfiles will fail on _those_. This is not a great situation to be in. Also updating the lockfiles requires all our developers to install .NET 9 SDK, which is something we would like to avoid.\r\n\r\n### Verbose Logs\r\n\r\nAlso reported to [Azure DevOps](https://github.com/actions/runner-images/issues/10987)."},{"Id":"44177484460","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:39:54","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13931","RelatedDescription":"Closed issue \"dotnet restore on a solution file only restores one project\" (#13931) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis command fails to restore all the nugets to C:\\Users<user>.nuget\\packages.\r\n\r\ndotnet restore MySolution.sln\r\n\r\nUsing NET 8.0.400.\r\n\r\nThis behaviour doesn't occur in all situations, so I've added a solution where it's easily reproducable.\r\n\r\nRestoring nugets for the solution (in Visual Studio, or on the command line with dotnet restore) will seemingly randomly restore the nugets from one of the projects, but not for the other. Illustration added.\r\n\r\n[Packages.zip](https://github.com/user-attachments/files/17778438/Packages.zip)\r\n\r\n![image](https://github.com/user-attachments/assets/cc870987-acda-4d4c-bf43-4f53aea97101)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44177266816","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:32:35","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13897","RelatedDescription":"Closed issue \"error NU1301: Unable to load service index for source https://api.nuget.org/v3/index.json\" (#13897) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.0-rc.2.24473.5\n\n### Worked before?\n\nYes, Worked with 8.0.0 and 9.0.0-rc1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nUnable to run any command that need to connect to internet ( dotnet restore, dotnet workload update, dotnet tool install ).\r\n\r\nThese command run to the timeout. \r\nThe dotnet command are unable to get the result of : https://api.nuget.org/v3/index.json\r\n\r\nOFC this url works on my browser and from curl command.****\n\n### Verbose Logs\n\n```shell\ndotnet tool install --global dotnet-ef -v=diagnostic\r\n\r\nUnhandled exception: NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load service index for source https://api.nuget.org/v3/index.json.\r\n---> System.TimeoutException: The HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\nat NuGet.Protocol.TimeoutUtility.StartWithTimeout[T](Func`2 getTask, TimeSpan timeout, String timeoutMessage, CancellationToken token) at NuGet.Protocol.HttpRetryHandler.SendAsync(HttpRetryHandlerRequest request, String source, ILogger log, CancellationToken cancellationToken) at NuGet.Protocol.HttpSource.GetThrottle dResponse(Func`1 requestFactory, TimeSpan requestTimeout, TimeSpan downloadTimeout, Int32 maxTries, Boolean isRetry, Boolean isLastAttempt, Guid sessionId, ILogger log, CancellationToken cancellationToken) at NuGet.Protocol.HttpSource.<>c__DisplayClass15_0`1.<<GetAsync>b__0>d.MoveNext() --- End of stack trace from previous location --- at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T](String filePath, Func`2 action, CancellationToken token) at NuGet.Protocol.HttpSource.GetAsy nc[T](HttpSourceCachedRequest request, Func`2 processAsync, ILogger log, CancellationToken token) at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) --- End of inner exception stack trace --- at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResource V3(SourceRepository source, DateTime utcNow, ILogger log, CancellationToken token) at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) at NuGet.Protocol.PackageMetadataResourceV3Provider.TryCreate(SourceRepository source, CancellationToken token) at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T](CancellationToken token) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetPackageMetadataAsync(PackageSource source, String packageIdentifier, Boolean includePrerelease, Boolean includeUnlisted, CancellationToken cancellationToken) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetMatchingVersionInternalAsync(String packageIdentifier, IEnumerable`1 packageSources, VersionRange versionRange, CancellationToken cancellationToken) at Microsoft.DotNet.Cli.NuGetPackageDownloader.NuGetPackageDownloader.GetBestPackageVersionAsync(PackageId packageId, VersionRange versionRange, PackageSourceLocation packageSourceLocation) at Microsoft.DotNet.Cli.ToolPackage.ToolPackageDownloader.<>c__DisplayClass8_0.<InstallPackage>b__0() at Microsoft.DotNet.Cli.TransactionalAction.Run[T](Func`1 action, Action commit, Action rollback) at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.<>c__DisplayClass22_0.<ExecuteInstallCommand>b__1() at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.RunWithHandlingInstallError(Action installAction, PackageId packageId) at Microsoft.Do tNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.ExecuteInstallCommand(PackageId packageId) at Microsoft.DotNet.Tools.Tool.Install.ToolInstallGlobalOrToolPathCommand.Execute() at Microsoft.DotNet.Tools.Tool.Install.ToolInstallCommand.Execute() at System.CommandLine.Invocation .InvocationPipeline.Invoke(ParseResult parseResult) at System.CommandLine.ParseResult.Invoke() at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, TimeSpan startupTime, ITelemetry telemetryClient)\r\n\r\n\r\ndotnet restore\r\n\r\n  /home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Secondaries/Askmethat.SmartRecipe.RecipeContext.Write.Secondaries.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/Application/Askmethat.SmartRecipe.Api/Askmethat.SmartRecipe.Api.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Read/Askmethat.SmartRecipe.RecipeContext.Read.Adapters/Askmethat.SmartRecipe.RecipeContext.Read.Adapters.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Primaries/Askmethat.SmartRecipe.RecipeContext.Write.Primaries.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Hexagon/Askmethat.SmartRecipe.RecipeContext.Write.Hexagon.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Read/Askmethat.SmartRecipe.RecipeContext.Read.Tests/Askmethat.SmartRecipe.RecipeContext.Read.Tests.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n/home/alex/RiderProjects/Askmethat.SmartRecipe.RecipeContext/RecipeContext/Write/Askmethat.SmartRecipe.RecipeContext.Write.Tests/Askmethat.SmartRecipe.RecipeContext.Write.Tests.csproj : error NU1301:\r\nUnable to load service index for source https://api.nuget.org/v3/index.json.\r\nThe HTTP request to 'GET https://api.nuget.org/v3/index.json' timed out after 100000 ms.\r\n\r\nRestore failed with 7 error(s) in 2458.7s\n```\n"},{"Id":"44177243400","Type":"IssuesEvent","CreatedAt":"2024-11-25T18:31:50","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13896","RelatedDescription":"Closed issue \"[Bug Bash] An error occurred when reloading project according to warning tips after installing “Fsharp.Net.SDk” package for “F# Console Application (.NET framework)” project\" (#13896) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.13.0.50\n\n### Worked before?\n\nIt is not a regression since it also reproes on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 and D17.12.5\\35424.85 with implicit NuGet Client 6.12.0.129. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Notes:   \r\n\r\n1. The repro rate is 100%.  \r\n\r\n2. The package was installed successfully on step 4. \r\n\r\n3. An additional error was showing on the top of VS after step 4 on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4 as the screenshot below. \r\n![image](https://github.com/user-attachments/assets/b147b584-9a7f-409f-818e-15c8d76e4036)\r\n\r\n#### Repro Steps:    \r\n\r\n1. Create a “F# Console Application (.NET framework)” project.    \r\n\r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.    \r\n\r\n3. Click “Browse” tab and select “nuget.org” from Package source drop-down list. \r\n\r\n4. Search 'FSharp.NET.Sdk ' package in the filter of “Browse” tab and click the ‘Install’ button on the right panel.  \r\n\r\n5. An error “MSB4057: The target \"CollectNuGetAuditSuppressions\" does not exist in the project.” occur in error list window. \r\n\r\n6. Observe the top of VS and click the “Reload Projects” button. \r\n\r\n  \r\n\r\n#### Expected:    \r\n\r\nThe project was reloaded successfully. \r\n\r\n#### Actual:    \r\n\r\n An error “The project file cannot be opened by the project system, because it is missing some critical imports or the referenced SDK cannot be found.” occurred when reloading project as below screenshot. It makes the solution fail to use. \r\n![fsharp net sdk_firstInstall](https://github.com/user-attachments/assets/972e205a-9eb1-4526-9710-ba3bbed9558a)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44147641421","Type":"IssuesEvent","CreatedAt":"2024-11-25T03:32:51","Actor":"JavaScript-zt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13958","RelatedDescription":"Opened issue \"NU3018  The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\" (#13958) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Manager Console\n\n### Product Version\n\ndotnet NET6\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"JavaScript Engine Switcher. ChakraCore 3.26.0\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\r\nNU3018 comes from the source“ https://api.nuget.org/v3/index.json: The trust provider does not trust the signature certificate signed by the repository master The package \"xxxxx\"\n\n### Verbose Logs\n\n_No response_"},{"Id":"44144335099","Type":"IssuesEvent","CreatedAt":"2024-11-24T23:55:38","Actor":"bruno-garcia","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13957","RelatedDescription":"Closed issue \"\"double forward slashes in path\" when uploading package\" (#13957) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nHappens on nuget.org\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nWhen trying to [upload Sentry's .NET SDK](https://github.com/getsentry/publish/issues/4649#issuecomment-2495715247), 1 package fails NuGet validation. \r\n\r\nValidation fails via the CLI as well as via nuget.org\r\n\r\n<img width=\"1186\" alt=\"image\" src=\"https://github.com/user-attachments/assets/97d6554d-25bf-45b9-be85-4dff098e8e83\">\r\n\r\nI'm hitting this: https://github.com/NuGet/NuGetGallery/blob/0ec99618043ae7f7e54a3ed8fdbbb47acc5e30b1/src/NuGetGallery/Controllers/ApiController.cs#L567\r\n\r\nBut what's confusing to me is that the file that supposedly has double backslash is:\r\n\r\n```\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <ProguardConfiguration Include=\"$(MSBuildThisFileDirectory)..\\..\\proguard.cfg\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n\r\nThe difference is that we're packing with .NET 9 SDK on this release, instead of .NET 8.\r\n\r\nWhen I see a package that worked ([Sentry.Bindings.Android.4.12.1-segv1.zip](https://github.com/user-attachments/files/17888005/Sentry.Bindings.Android.4.12.1-segv1.zip)\r\n), built with .NET 8, the output has:\r\n<img width=\"288\" alt=\"image\" src=\"https://github.com/user-attachments/assets/bc3271b7-b64c-4886-9d67-23fc34be8f13\">\r\n\r\nvs the new one, .NET 9 which fails to upload ( [Sentry.Bindings.Android.5.0.0-alpha.0.zip](https://github.com/user-attachments/files/17887431/Sentry.Bindings.Android.5.0.0-alpha.0.zip)):\r\n\r\n<img width=\"265\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b9a2d08a-a951-42e5-891d-d5b35c76a5fc\">\r\n\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44137486516","Type":"IssuesEvent","CreatedAt":"2024-11-24T13:51:55","Actor":"microsoft-github-policy-service[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13877","RelatedDescription":"Closed issue \"Suppose Copilot Recommends A Package and Provides A Command To Be Fed to Visual Studio's Package Mgr\" (#13877) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nVisual Studio Package Manager Console\n\n### The Elevator Pitch\n\nAt least six times I have obtained from Copilot a reference to a NuGet package and six times Visual Studio produced an arcane error message.   A new feature would provide alternative means to install the package, preferably a means that runs to successful completion.  That would be very satisfying.\n\n### Additional Context and Details\n\n \r\nTime Elapsed: 00:00:00.6560953\r\nPM> NuGet\\Install-Package NAudio\r\nRestoring packages for C:\\CSOFTWARE\\NAUDIO\\NAUDIO.csproj...\r\nNuGet\\Install-Package : NU1108: Cycle detected. \r\n  NAUDIO -> NAudio (>= 2.2.1).\r\nAt line:1 char:1\r\n+ NuGet\\Install-Package NAudio\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nNuGet\\Install-Package : Package restore failed. Rolling back package changes for 'NAUDIO'.\r\nAt line:1 char:1\r\n+ NuGet\\Install-Package NAudio\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-11-26T03:30:20.5412582Z","RunDurationInMilliseconds":882}