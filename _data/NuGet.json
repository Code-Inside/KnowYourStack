{"Data":{"Blog":{"FeedItems":[{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14632249291","Type":"IssuesEvent","CreatedAt":"2020-12-23T21:53:19","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8351","RelatedDescription":"Closed issue \"\"Unable to load the service index for source https://api.nuget.org/v3/index.json\" in unbuntu\" (#8351) at NuGet/NuGetGallery","RelatedBody":"I'm using **ubuntu 18.04 LTS** and going to build my application using dotnet build\r\nbut it pops an error that tells _Unable to load the service index for source https://api.nuget.org/v3/index.json._\r\nI tried to search the same issue and I found this [thread](https://github.com/NuGet/NuGetGallery/issues/7705). but all comments in this thread show how to fix in windows, not in ubuntu.\r\ncould some one tell me the solution in my case? \r\nthanks"},{"Id":"14622917948","Type":"PullRequestEvent","CreatedAt":"2020-12-23T01:47:23","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8364","RelatedDescription":"Opened pull request \"Add fuget.org links to packages\" (#8364) at NuGet/NuGetGallery","RelatedBody":"Addresses: https://github.com/NuGet/NuGetGallery/issues/7850\r\n\r\nPackages will now have an additional link per specs outlined here: https://github.com/NuGet/NuGetGallery/pull/7832, linking to the packages fuget.org view.\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/102949684-8e0fe180-4514-11eb-89b3-8f69bbfd4cf2.png)"},{"Id":"14622335741","Type":"PullRequestEvent","CreatedAt":"2020-12-22T23:57:24","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8363","RelatedDescription":"Opened pull request \"Show vulnerability alerts on manage packages page\" (#8363) at NuGet/NuGetGallery","RelatedBody":"Note: these PRs must be merged before this one: https://github.com/NuGet/NuGetGallery/pull/8358, https://github.com/NuGet/NuGetGallery/pull/8362\r\n\r\nAddresses remainder of https://github.com/NuGet/NuGetGallery/issues/8361\r\n\r\nThis change decorates all packages, of which any version is vulnerable, in the manage packages view with a bang and tooltip indicating to go to the details page. This applies to listed and unlisted groups of packages.\r\n\r\n![image](https://user-images.githubusercontent.com/14225979/102943956-2ef6a080-4505-11eb-8200-76e3457cdc1b.png)\r\n"},{"Id":"14622292804","Type":"PullRequestEvent","CreatedAt":"2020-12-22T23:49:08","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8362","RelatedDescription":"Opened pull request \"Expand view models for vulnerabilities in manage packages page\" (#8362) at NuGet/NuGetGallery","RelatedBody":"Addresses view model portion of https://github.com/NuGet/NuGetGallery/issues/8361 (I split the PR as best I could because it's large-ish). Full description of change to customer experience in PR (view changes) on this issue."},{"Id":"14622269585","Type":"IssuesEvent","CreatedAt":"2020-12-22T23:44:35","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8361","RelatedDescription":"Opened issue \"Gallery authors should see a message on the Manage Packages page if the package is vulnerable\" (#8361) at NuGet/NuGetGallery","RelatedBody":"Spec: https://github.com/NuGet/Home/blob/dev/designs/PackageVulnerability/NuGet.orgVulnerabilitiesPhase1.md"},{"Id":"14620002833","Type":"IssuesEvent","CreatedAt":"2020-12-22T18:53:44","Actor":"anangaur","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8360","RelatedDescription":"Opened issue \"Ownership request email for an org should be sent to org account email ID as well\" (#8360) at NuGet/NuGetGallery","RelatedBody":"Today it seems the ownership request emails are only sent to the `Administrators` of the org account. This causes a lot of confusion as folks keep looking for an email on the org account's email ID. \r\n\r\n#### How to fix this?\r\nWe should be sending an email to the org account email ID stating an ownership request was sent to the Admins."},{"Id":"14612995090","Type":"PullRequestEvent","CreatedAt":"2020-12-22T07:22:01","Actor":"adamralph","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8359","RelatedDescription":"Opened pull request \"update term used for .NET tools\" (#8359) at NuGet/NuGetGallery","RelatedBody":"As per the [linked document](https://aka.ms/global-tools), these are now referred to as \".NET Tools\" —\r\n\r\n> How to manage .NET tools\r\n> \r\n> A .NET tool is a special NuGet package that contains a console application.\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14634005529","Type":"IssuesEvent","CreatedAt":"2020-12-24T03:53:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10397","RelatedDescription":"Closed issue \"Missing tests for the case where packages are referenced with PrivateAssets=\"All\" attribute\" (#10397) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet version: dev\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nThere are no `RemoteDependencyWalker` tests for the case where packages are referenced with PrivateAssets=\"All\" attribute, e.g.:\r\n```\r\n    -> Lib1 -> PackageA [1.0.0] (PrivateAssets=All)\r\nApp\r\n    -> Lib2 -> PackageA [2.0.0] (PrivateAssets=All)\r\n```\r\n\r\nBecause of that these lines don't have any test coverage: https://github.com/NuGet/NuGet.Client/blob/b5b44526dea0379ebd6c8e51e8a041c06d5845ca/src/NuGet.Core/NuGet.DependencyResolver.Core/Remote/RemoteDependencyWalker.cs#L166-L169"},{"Id":"14633296234","Type":"IssuesEvent","CreatedAt":"2020-12-24T01:24:23","Actor":"davidliang2008","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10408","RelatedDescription":"Closed issue \"Floating versions not working for pre-release packages with semantic versioning suffix like \"-alpha\"\" (#10408) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version: 5.8.0.6930\r\n\r\nVS version: Visual Studio Professional 2019 Version 16.8.3\r\n\r\nOS version: Windows 10 Pro for Workstations, 64 bits, Version 2004, OS build 19041.685\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create and deploy a library as NuGet package. Push it as pre-release: LibA.2.1.1-alpha, for example\r\n\r\n2. Create another library, called LibB, that references the first NuGet package. Specify its dependency in its .nuspec using floating versions and push it as pre-release:\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\r\n    <metadata>\r\n        <dependencies>\r\n            <group>\r\n                <dependency id=\"LibA\" version=\"2.1.1-*\" />\r\n            </group>\r\n        </dependencies>\r\n    </metadata>\r\n</package>\r\n```\r\n\r\n3. Create yet another driver program that references LibB pre-released NuGet package.\r\n4. When you try to install/update LibB NuGet package in the driver program, errors occur:\r\n   - Package restore failed. Rolling back package changes for 'NAME_OF_DRIVER_PROGRAM'.\r\n   - NU1603: LibB depends on LibA (>= 1.2.1-0) but LibA 1.2.1.0 was not found. An approximate best match of LibA 1.2.1-alpha was resolved.\r\n\r\nNote, on the Common Scenarios section in the documentation (https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions), it shows that floating versions like `1.2.0-*` will match pre-released versions like `1.2.0-rc.2`.\r\n\r\nHow come that doesn't work in my case?\r\n"},{"Id":"14633163897","Type":"IssuesEvent","CreatedAt":"2020-12-24T00:54:59","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10416","RelatedDescription":"Opened issue \"PM UI throws InvalidCastException for SolutionView to ProjectView\" (#10416) at NuGet/Home","RelatedBody":"Sometimes while debugging NuGet in experimental instance, you can see this exception.\r\n\r\nStarted in timeframe of August 2020. Many team members mentioned it in September-November timeframe."},{"Id":"14632596161","Type":"IssuesEvent","CreatedAt":"2020-12-23T22:53:58","Actor":"txwizard","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10415","RelatedDescription":"Opened issue \"Reason: Generated API Key is Truncated\" (#10415) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (5.8.0.6930):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (i16.8.3):\r\n\r\nOS version (10.0.19042.685)):\r\n\r\nWorked before? If so, with which NuGet version: 4.9.4.5839\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Generate a NEW API key.\r\n\r\n2. Copy the generated key into nuget.config. Note that the new key string is only 46 characters long. Until yesterday, every API key that I have received had a length of 352 characters. of which the last two were \"==\". The fact that the 46-character keys that I generated yesterday were not so terminated made me immediately suspicious, because I've generated and used many cryptographic keys, most of which were so terminated.\r\n3. Attempt to push package.\r\n\r\n...\r\n\r\n## Other suggested things\r\nThe NuGet Push is accomplished by the following Task, which is unchanged for many months and package updates across 13 packages.\r\n\r\n<!-- 2019/07/05 16:43:12 - DAG Switch on the push target. -->\r\n  <!-- Publish the project. -->\r\n  <Target Name=\"Publish\"\r\n  \t      AfterTargets=\"Package\"\r\n  \t      Condition=\" '$(Configuration)' == 'Release'\">\r\n    <NuGetPackageNameFixup RawNugetPackageVersion=\"%(OutputAssemblyInfo.Version)\">\r\n      <Output PropertyName=\"NuGetPackageVersion\"\r\n      \t      TaskParameter=\"ActualNugetPackageVersion\" />\r\n    </NuGetPackageNameFixup>\r\n\r\n    <Exec WorkingDirectory=\"$(PackageDir)\"\r\n    \t  Command=\"NuGet.exe push $(AssemblyName).$(NuGetPackageVersion).nupkg -Source nuget.org\" />\r\n  </Target>\r\n\r\n\r\n### Verbose Logs\r\nThe log from the last attempt to push follows.\r\n\r\n1>AfterBuild:\r\n1>  Info: Assembly WizardWrx.Common.dll version =  7.24.127.0\r\n\r\n1>Package:\r\n1>  NuGet.exe pack Common.csproj -Properties Configuration=Release -OutputDir Package -IncludeReferencedProjects -Verbosity detailed\r\n1>  NuGet Version: 5.8.0.6930\r\n1>  Attempting to build package from 'Common.csproj'.\r\n1>  MSBuild auto-detection: using msbuild version '16.8.2.56705' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\n1>  Packing files from 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release'.\r\n1>  Using 'Common.nuspec' for metadata.\r\n1>  Add file 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release\\WizardWrx.Common.dll' to package as 'lib\\net20\\WizardWrx.Common.dll'\r\n1>  Add file 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release\\Wizardwrx.Common.XML' to package as 'lib\\net20\\Wizardwrx.Common.XML'\r\n1>  Found packages.config. Using packages listed as dependencies\r\n1>\r\n1>  Id: WizardWrx.Common\r\n1>  Version: 7.24.127\r\n1>  Authors: David A. Gray\r\n1>  Description: Mostly Commonly Used Constants\r\n1>  Project Url: https://github.com/txwizard/WizardWrx_NET_API\r\n1>  Tags: Constants, Arrays, RegExp\r\n1>  Dependencies: WizardWrx.BitMath [4.3.125.29248, )\r\n1>\r\n1>  Added file '[Content_Types].xml'.\r\n1>  Added file '_rels/.rels'.\r\n1>  Added file 'lib/net20/WizardWrx.Common.dll'.\r\n1>  Added file 'lib/net20/Wizardwrx.Common.XML'.\r\n1>  Added file 'lib/WizardWrx.Common.pdb'.\r\n1>  Added file 'lib/Wizardwrx.Common.XML'.\r\n1>  Added file 'package/services/metadata/core-properties/fb9a19166623489aa8d79a494d8477fe.psmdcp'.\r\n1>  Added file 'README.md'.\r\n1>  Added file 'README.txt'.\r\n1>  Added file 'WizardWrx.Common.nuspec'.\r\n1>\r\n1>EXEC : warning : NU5128: Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below:\r\n1>  - Add a dependency group for .NETFramework2.0 to the nuspec\r\n1>  Successfully created package 'Package\\WizardWrx.Common.7.24.127.nupkg'.\r\n\r\n1>Publish:\r\n1>  Custom Task NuGetPackageNameFixup: RawNugetPackageVersion    = 7.24.127.0\r\n1>  Custom Task NuGetPackageNameFixup: ActualNugetPackageVersion = 7.24.127\r\n1>  NuGet.exe push WizardWrx.Common\r\n[WizardWrx.Common_20201223_164916.zip](https://github.com/NuGet/Home/files/5737397/WizardWrx.Common_20201223_164916.zip)\r\n\r\n.7.24.127.nupkg -Source nuget.org\r\n1>  Invalid length for a Base-64 char array or string.\r\n1>D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\Common.csproj(185,5): error MSB3073: The command \"NuGet.exe push WizardWrx.Common.7.24.127.nupkg -Source nuget.org\" exited with code 1.\r\n1>\r\n1>Build FAILED.\r\n1>\r\n\r\nContrast this with the successful push of the previous build of the same package.\r\n\r\n1>AfterBuild:\r\n1>  Info: Assembly WizardWrx.Common.dll version =  7.23.125.0\r\n\r\n1>Package:\r\n1>  NuGet.exe pack Common.csproj -Properties Configuration=Release -OutputDir Package -IncludeReferencedProjects -Verbosity detailed\r\n1>  NuGet Version: 4.9.4.5839\r\n1>  Attempting to build package from 'Common.csproj'.\r\n1>  MSBuild auto-detection: using msbuild version '16.7.0.37604' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\n1>  Packing files from 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release'.\r\n1>  Using 'Common.nuspec' for metadata.\r\n1>  Add file 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release\\WizardWrx.Common.dll' to package as 'lib\\net20\\WizardWrx.Common.dll'\r\n1>  Add file 'D:\\Source_Code\\Visual_Studio\\Projects\\WizardWrx_Libs\\WizardWrx_NET_API\\Common\\bin\\Release\\Wizardwrx.Common.XML' to package as 'lib\\net20\\Wizardwrx.Common.XML'\r\n1>  Found packages.config. Using packages listed as dependencies\r\n1>\r\n1>  Id: WizardWrx.Common\r\n1>  Version: 7.23.125\r\n1>  Authors: David A. Gray\r\n1>  Description: Mostly Commonly Used Constants\r\n1>  Project Url: https://github.com/txwizard/WizardWrx_NET_API\r\n1>  Tags: Constants, Arrays, RegExp\r\n1>  Dependencies: WizardWrx.BitMath [4.3.125.29248, )\r\n1>\r\n1>  Added file '[Content_Types].xml'.\r\n1>  Added file '_rels/.rels'.\r\n1>  Added file 'lib/net20/WizardWrx.Common.dll'.\r\n1>  Added file 'lib/net20/Wizardwrx.Common.XML'.\r\n1>  Added file 'lib/WizardWrx.Common.pdb'.\r\n1>  Added file 'lib/Wizardwrx.Common.XML'.\r\n1>  Added file 'package/services/metadata/core-properties/558379dd4a1547719e13c11e56b32ea9.psmdcp'.\r\n1>  Added file 'README.md'.\r\n1>  Added file 'README.txt'.\r\n1>  Added file 'WizardWrx.Common.nuspec'.\r\n1>\r\n1>  Successfully created package 'Package\\WizardWrx.Common.7.23.125.nupkg'.\r\n\r\n1>Publish:\r\n1>  Custom Task NuGetPackageNameFixup: RawNugetPackageVersion    = 7.23.125.0\r\n1>  Custom Task NuGetPackageNameFixup: ActualNugetPackageVersion = 7.23.125\r\n1>  NuGet.exe push WizardWrx.Common.7.23.125.nupkg -Source nuget.org\r\n1>  Pushing WizardWrx.Common.7.23.125.nupkg to 'https://www.nuget.org/api/v2/package'...\r\n1>    PUT https://www.nuget.org/api/v2/package/\r\n1>    Created https://www.nuget.org/api/v2/package/ 726ms\r\n1>  Your package was pushed.\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"14632379267","Type":"IssuesEvent","CreatedAt":"2020-12-23T22:14:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8565","RelatedDescription":"Closed issue \"Project Dependencies of ProjectReferences marked as PrivateAssets should not be included in the lock file up to date check\" (#8565) at NuGet/Home","RelatedBody":"[8493.zip](https://github.com/NuGet/Home/files/3593090/8493.zip)\r\n\r\nExtract the above project, run dotnet restore --locked-mode\r\n\r\nMotivation from https://github.com/NuGet/Home/issues/8493. \r\n\r\nIssue being hit by @bddckr \r\n\r\nfyi @tebeco Not your specific issue, but one that the discussion produced. \r\n\r\nI want to keep this issue focused to the problem at hand. \r\n\r\nSpecifically refer to https://github.com/NuGet/Home/issues/8493#issuecomment-526537492. \r\n\r\nNote that this has never worked correctly, so not a regression (in 4.9, it simply didn't validate it)\r\n\r\nThe fix is: https://github.com/NuGet/NuGet.Client/blob/638f34578d2221abc1259286ce2d4c132600cea7/src/NuGet.Core/NuGet.ProjectModel/ProjectLockFile/PackagesLockFileUtilities.cs#L168\r\n\r\nWe should strip out the PrivateAssets=All project references from `p2pSpecProjectRestoreMetadataFrameworkInfo.ProjectReferences`. \r\n\r\nfyi @rrelyea  "},{"Id":"14632346328","Type":"IssuesEvent","CreatedAt":"2020-12-23T22:09:00","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10374","RelatedDescription":"Closed issue \"Restore fails with NU1004 after running nuget restore with -ForceEvaluate\" (#10374) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThis has some of the same symptoms as https://github.com/NuGet/Home/issues/9332 but may not be the same issue; it happened under different circumstances and this time I was able to assemble a small solution that can reproduce the problem.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):  5.8.0.6930\r\n\r\ndotnet.exe --version (if appropriate): n/a\r\n\r\nVS version (if appropriate): 16.8.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10\r\n\r\nWorked before? If so, with which NuGet version: 5.3?\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Unzip attached Repro.zip archive\r\n\r\n2. Restore the repro solution with nuget.exe and -ForceEvaluate => should succeed\r\n```\r\nnuget restore -ForceEvaluate Repro.sln\r\n```\r\n\r\n3. Restore the repro solution with nuget.exe and -LockedMode => should FAIL!\r\n```\r\nnuget restore -LockedMode Repro.sln\r\n```\r\n\r\n### Verbose Logs\r\n```\r\nNU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\nNU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Disable the RestoreLockedMode MSBuild property or pass an explicit --force-evaluate option to run restore to update the lock file.\r\n\r\n```\r\n\r\n### Sample Solution\r\n[Repro.zip](https://github.com/NuGet/Home/files/5680970/Repro.zip)\r\n\r\n\r\n\r\n\r\n"},{"Id":"14632249217","Type":"IssuesEvent","CreatedAt":"2020-12-23T21:53:18","Actor":"agr","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10414","RelatedDescription":"Opened issue \"\"Unable to load the service index for source https://api.nuget.org/v3/index.json\" in unbuntu\" (#10414) at NuGet/Home","RelatedBody":"@hieunm22 commented on [Sun Dec 13 2020](https://github.com/NuGet/NuGetGallery/issues/8351)\n\nI'm using **ubuntu 18.04 LTS** and going to build my application using dotnet build\r\nbut it pops an error that tells _Unable to load the service index for source https://api.nuget.org/v3/index.json._\r\nI tried to search the same issue and I found this [thread](https://github.com/NuGet/NuGetGallery/issues/7705). but all comments in this thread show how to fix in windows, not in ubuntu.\r\ncould some one tell me the solution in my case? \r\nthanks\n\n---\n\n@agr commented on [Thu Dec 17 2020](https://github.com/NuGet/NuGetGallery/issues/8351#issuecomment-747690955)\n\nApologies for the delayed response.\r\n\r\nCould you please share a full build log with detailed verbosity (`dotnet build --verbosity detailed`)? Feel free to send it to support@nuget.org if you don't want to put it here.\r\n\r\nThe thread you mention is specifically about addressing an SSL/TLS issues, do you see error messages that mention it?\r\nAre you able to open `www.nuget.org` in a browser on that computer? Does `curl https://api.nuget.org/v3/index.json` succeed?\n\n---\n\n@hieunm22 commented on [Thu Dec 17 2020](https://github.com/NuGet/NuGetGallery/issues/8351#issuecomment-747840418)\n\nThanks for your response althought late\r\nHere's the full log with the command you provided above\r\nhttps://controlc.com/1e820605\r\n\r\nThe URL `www.nuget.org` can be accessed normally in browser, and so can the `curl https://api.nuget.org/v3/index.json`\r\n\r\nSome additional informations in my case:\r\n- I created a new project with type = \"mvc\", type = \"console\" and the command `dotnet build` runs successfully but some types such as \"react\", \"classlib\" doesn't\r\n- The `dotnet build` command in my windows 10 machine runs properly\n\n---\n\n@agr commented on [Mon Dec 21 2020](https://github.com/NuGet/NuGetGallery/issues/8351#issuecomment-749158985)\n\nWhich SDK version are you using? Tried updating to the latest one?\r\nI tried setting up an Ubuntu 18.04 VM to try to reproduce the issue and with the latest SDK it worked fine.\r\n\r\nI am looking at the log, and I see that it fails but with a different error:\r\n\r\n> /usr/share/dotnet/sdk/3.1.404/NuGet.targets(128,5): error : Unable to get repository signature information for source https://api.nuget.org/v3-index/repository-signatures/5.0.0/index.json.\r\n/usr/share/dotnet/sdk/3.1.404/NuGet.targets(128,5): error :   The SSL connection could not be established, see inner exception.\r\n/usr/share/dotnet/sdk/3.1.404/NuGet.targets(128,5): error :   The remote certificate is invalid according to the validation procedure.\r\n\r\nYou mentioned that it complained about \"Unable to load the service index for source https://api.nuget.org/v3/index.json.\" before. Do you get consistent error messages?\r\n\r\nPlease, send us the output of `echo | openssl s_client -servername api.nuget.org -connect api.nuget.org:443 2>/dev/null`\r\nThe issue might be related to the version of OpenSSL on your system, please try updating to the latest one.\n\n---\n\n@hieunm22 commented on [Tue Dec 22 2020](https://github.com/NuGet/NuGetGallery/issues/8351#issuecomment-749932388)\n\nall dotnet components are up to date to version 3.1 LTS\r\nwhat's your latest version? latest version is currently 5.0\r\n \r\nthis is the outout for the command above\r\n\r\n`https://controlc.com/299441b0`\r\n\r\nabout the openssl, i updated it to latest version. is it the latest one: 1.1.1g  21 Apr 2020\r\n\r\n\n\n---\n\n@agr commented on [Wed Dec 23 2020](https://github.com/NuGet/NuGetGallery/issues/8351#issuecomment-750456425)\n\nYes, I was using 5.0. I also installed 3.1 it works fine, too.\n\n"},{"Id":"14631636510","Type":"IssuesEvent","CreatedAt":"2020-12-23T20:22:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10413","RelatedDescription":"Closed issue \"Disable flaky test - UninstallPackageFromUI \" (#10413) at NuGet/Home","RelatedBody":"Related to https://github.com/NuGet/Home/issues/10412"},{"Id":"14630989568","Type":"IssuesEvent","CreatedAt":"2020-12-23T18:53:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10413","RelatedDescription":"Opened issue \"Disable flaky test - UninstallPackageFromUI \" (#10413) at NuGet/Home","RelatedBody":"Related to https://github.com/NuGet/Home/issues/10412"},{"Id":"14630973825","Type":"IssuesEvent","CreatedAt":"2020-12-23T18:51:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10412","RelatedDescription":"Opened issue \"UninstallPackageFromUI is flaky\" (#10412) at NuGet/Home","RelatedBody":"NuGetUITestCase.UninstallPackageFromUI is extremely flaky. \r\n\r\nIt fails because of loading the PM UI control. Instictively this sounds like something that *should not* be specific to this test, but it's always the same one, despite the fact that many tests do the same thing."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1334226716139655171","CreatedAt":"2020-12-02T20:03:32+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nHave you recently experienced issues with your NuGet connectors? You may have been impacted… https://t.co/98KJJGhYEW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":30,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-12-25T05:30:37.7872938Z","RunDurationInMilliseconds":1517}