{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33703635800","Type":"PullRequestEvent","CreatedAt":"2023-11-29T02:10:31","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9741","RelatedDescription":"Opened pull request \"Normalize TFM platform versions when determining computed compatibility\" (#9741) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/9711\r\n\r\n### Problem:\r\n\r\nTFMs that contain platform monikers and versions, like `net6.0-android31.0`, were not showing the `net7.0-android` and `net8.0-android` TFMs as users expected. \r\nhttps://www.nuget.org/packages/Xamarin.AndroidX.Lifecycle.Common/2.6.2.2#supportedframeworks-body-tab\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/b71383bc-28e4-4e54-8f39-d2097211f149)\r\n\r\nIf the TFM didn't have a platform version, say just `net6.0-android`, then the corresponding `net7.0` and `net8.0` TFMs show up as expected.\r\nhttps://www.nuget.org/packages/Microsoft.CognitiveServices.Speech.Extension.ONNX.Runtime/1.33.0#supportedframeworks-body-tab\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/a021533b-f73e-4c94-aae0-3b7f4909526c)\r\n\r\n### Solution:\r\n\r\nCurrently, if a TFM (.NET 5+) has a platform version, it does not show any computed compatible TFMs. Our compatibility matrix only includes TFMs without platform versions.\r\n\r\nTo fix this, if we see a TFM with a platform version:\r\n1. Create a normalized copy of the TFM, using an empty platform version \r\n    `net6.0-windows7.0` -> `net6.0-windows`\r\n2. Use this normalized TFM to find computed compatible TFMs\r\n    `net6.0-windows` -> `net6.0-windows`, `net7.0-windows`, `net8.0-windows`\r\n3. Add the original platform version to the computed TFMs \r\n    `net6.0-windows7.0`, `net7.0-windows7.0`, `net8.0-windows7.0`\r\n\r\ni.e. `net6.0-windows7.0` -> `net6.0-windows7.0`, `net7.0-windows7.0`, `net8.0-windows7.0`\r\n\r\nSimilarly,\r\n\r\n| Asset TFM | Computed TFMs |\r\n|-----------|---------------|\r\n| `net6.0-windows` | `net6.0-windows`, `net7.0-windows`, `net8.0-windows` |\r\n| `net6.0-windows7.0` | `net6.0-windows7.0`, `net7.0-windows7.0`, `net8.0-windows7.0` |\r\n| `net6.0-windows99.0` | `net6.0-windows99.0`, `net7.0-windows99.0`, `net8.0-windows99.0` |\r\n| `net7.0-windows7.0` | `net7.0-windows7.0`, `net8.0-windows7.0` |\r\n| `net6.0-ios` | `net6.0-ios`, `net7.0-ios`, `net8.0-ios` |\r\n| `net6.0-ios15.0` | `net6.0-ios15.0`, `net7.0-ios15.0`, `net8.0-ios15.0` |\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/8768052d-e3d9-46ae-ab97-86d8413026be)\r\n"},{"Id":"33667008517","Type":"PullRequestEvent","CreatedAt":"2023-11-28T00:59:16","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9740","RelatedDescription":"Opened pull request \"[Vulnerabilities]Adding new Job for updating v3 Vulnerabilities files.\" (#9740) at NuGet/NuGetGallery","RelatedBody":"This is the first proposal for a new job to automatically update the v3 Vulnerability files.\r\nThis should implement the design indicated at https://github.com/NuGet/Engineering/pull/4940\r\n\r\nMuch of the mechanics of pulling from GitHub are tested in the GitHubVulnerabilities2Db.Facts project.\r\n\r\nThe primary work is done in the FlushAsync method starting at line 53 of src/GitHubVulnerabilities2v3/Extensions/BlobStorageVulnerabilityWriter.cs\r\n\r\nSummary of intended flow:\r\n1. Read the date in the cursor and determine if the run is an update run or a full regeneration run\r\n2. Query GitHub and collect vulnerabilities starting at the date in the cursor and running up to now.\r\n3. For regeneration run, update index.json, base.json, and push an empty update.json. Update cursor to now.\r\n4. For update run, Check the special case\r\n5. The special case is when we see the same vulnerability URL in the update that already exists in base. For this case, we skip this update and regenerate on the next run.\r\n6. Otherwise, update the update.json and index.json. Cursor should NOT be changed."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33692244079","Type":"IssuesEvent","CreatedAt":"2023-11-28T17:26:01","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13046","RelatedDescription":"Closed issue \"Null pointer when using RestoreUseStaticGraphEvaluation and explicit TargetFramework\" (#13046) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet SDK 8.0.100\n\n### Worked before?\n\nI don't think so\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\n1. Clone https://github.com/fsprojects/fantomas\r\n2. Run `dotnet fsi .\\build.fsx -- -p Init`\r\n3. Restore project `dotnet restore ./src/Fantomas.FCS/Fantomas.FCS.fsproj /p:TargetFramework=netstandard2.0 /p:RestoreUseStaticGraphEvaluation=True --force`\r\n\r\n```\r\n  Determining projects to restore...\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error : Object reference not set to an instance of an object. [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Build.Tasks.Console.MSBuildStaticGraphRestore.GetPackageSpec(IMSBuildProject project, IReadOnlyDictionary`2 allInnerNodes) [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fan\r\ntomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Build.Tasks.Console.MSBuildStaticGraphRestore.<>c__DisplayClass35_0.<GetDependencyGraphSpec>b__0(ProjectWithInnerNodes project) [C:\\Users\\nojaf\\Projects\\fantomas\\sr\r\nc\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`2.<ForWorker>b__1(RangeWorker& currentWorker, Int64 timeout, Boolean& replicationDelegateYieldedBeforeCompletion) [C\r\n:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error : --- End of stack trace from previous location --- [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`2.<ForWorker>b__1(RangeWorker& currentWorker, Int64 timeout, Boolean& replicationDelegateYieldedBeforeCompletion) [C\r\n:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.TaskReplicator.Replica.Execute() [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\n```\r\n\r\nWhen restoring without the explicit `/p:TargetFramework=netstandard2.0` this works.\r\nOr when using `/p:TargetFramework=netstandard2.0 /p:RestoreUseStaticGraphEvaluation=False` it will also work.\n\n### Verbose Logs\n\n_No response_"},{"Id":"33683033245","Type":"IssuesEvent","CreatedAt":"2023-11-28T12:49:55","Actor":"nojaf","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13046","RelatedDescription":"Opened issue \"Null pointer when using RestoreUseStaticGraphEvaluation and explicit TargetFramework\" (#13046) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet SDK 8.0.100\n\n### Worked before?\n\nI don't think so\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\n1. Clone https://github.com/fsprojects/fantomas\r\n2. Run `dotnet fsi .\\build.fsx -- -p Init`\r\n3. Restore project `dotnet restore ./src/Fantomas.FCS/Fantomas.FCS.fsproj /p:TargetFramework=netstandard2.0 /p:RestoreUseStaticGraphEvaluation=True --force`\r\n\r\n```\r\n  Determining projects to restore...\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error : Object reference not set to an instance of an object. [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Build.Tasks.Console.MSBuildStaticGraphRestore.GetPackageSpec(IMSBuildProject project, IReadOnlyDictionary`2 allInnerNodes) [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fan\r\ntomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at NuGet.Build.Tasks.Console.MSBuildStaticGraphRestore.<>c__DisplayClass35_0.<GetDependencyGraphSpec>b__0(ProjectWithInnerNodes project) [C:\\Users\\nojaf\\Projects\\fantomas\\sr\r\nc\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`2.<ForWorker>b__1(RangeWorker& currentWorker, Int64 timeout, Boolean& replicationDelegateYieldedBeforeCompletion) [C\r\n:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error : --- End of stack trace from previous location --- [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`2.<ForWorker>b__1(RangeWorker& currentWorker, Int64 timeout, Boolean& replicationDelegateYieldedBeforeCompletion) [C\r\n:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100\\NuGet.RestoreEx.targets(19,5): error :    at System.Threading.Tasks.TaskReplicator.Replica.Execute() [C:\\Users\\nojaf\\Projects\\fantomas\\src\\Fantomas.FCS\\Fantomas.FCS.fsproj]\r\n```\r\n\r\nWhen restoring without the explicit `/p:TargetFramework=netstandard2.0` this works.\r\nOr when using `/p:TargetFramework=netstandard2.0 /p:RestoreUseStaticGraphEvaluation=False` it will also work.\n\n### Verbose Logs\n\n_No response_"},{"Id":"33658743370","Type":"IssuesEvent","CreatedAt":"2023-11-27T18:29:40","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13044","RelatedDescription":"Opened issue \"PackageSourceMappingActionViewModel should handle interactions with model\" (#13044) at NuGet/Home","RelatedBody":""},{"Id":"33623916348","Type":"IssuesEvent","CreatedAt":"2023-11-26T11:53:11","Actor":"WolfgangHG","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13043","RelatedDescription":"Opened issue \"Nuget Central Package Management: behaviour with \"VersionOverride\" is strange\" (#13043) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n\"nuget.exe\" reports 6.8.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nI played with CPM and package references with \"VersionOverrides\", and I think I found a place where the behavior is a bit strange.\r\n\r\nAttached sample contains a \"Directory.Packages.props\" with a reference to an older \"Newtonsoft.Json\" version.\r\n[NugetCPMOverride.zip](https://github.com/NuGet/Home/files/13466656/NugetCPMOverride.zip)\r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProject \"ClassLibraryOne\" uses this reference:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\n\r\n\"ClassLibraryTwo\" overrides the Newtonsoft version, and also introduced a completely new package:\r\n\r\n```\r\n    <PackageReference Include=\"System.DirectoryServices\" VersionOverride=\"7.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" VersionOverride=\"13.0.1\"/>\r\n```\r\n\r\nWhen updating the Newtonsoft reference in Nuget Package manager, it switches only the version in \"Directory.Packages.props\" to the newest version, but not the differing version in \"ClassLibraryTwo\". But I think this behavior is OK, as the library is reported on the \"Consolidate\" tab.\r\n\r\nBut Nuget cannot handle the reference \"System.Directory.Services\" very well: it adds an entry to \"Directory.Packages.props\", but does not update the \"VersionOverride\".\r\nThis is \"Directory.Packages.props\":\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\" />\r\n    <PackageVersion Include=\"System.DirectoryServices\" Version=\"8.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe csproj file is unchanged:\r\n```\r\n    <PackageReference Include=\"System.DirectoryServices\" VersionOverride=\"7.0.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" VersionOverride=\"13.0.1\"/>\r\n```\r\n\r\nAnd this version mismatch is not reported on the \"Consolidate\" tab, and the package update is shown again in the Nuget package manager when you open it next. So you are in an update cycle.\r\n\r\nI would expect Nuget to update the \"VersionOverride\" in case the package is not defined in \"Directory.Packages.props\".\r\n\r\nI probably could have worked around it by adding a \"Directory.Packages.props\" file to \"ClassLibraryTwo\" and import the base file. But the \"VersionOverride\" seems to be a simpler feature to add local package references to subprojects ;-).\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-29T03:30:20.3747196Z","RunDurationInMilliseconds":1151}