{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null},{"Title":"Introducing Transitive Dependencies in Visual Studio","PublishedOn":"2022-08-09T19:59:52+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We heard from you that direct dependencies are easy to track, but that you struggle with tracking transitive dependencies. We want to make that easier for the day-to-day management of your NuGet...","Href":"https://devblogs.microsoft.com/nuget/introducing-transitive-dependencies-in-visual-studio/","RawContent":null},{"Title":"HTTPS everywhere","PublishedOn":"2022-08-09T19:59:24+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Safety guaranteed\nAs an ongoing effort to make HTTPS everywhere a reality for NuGet, we have taken a number of steps to help protect your everyday package management experiences.\nEarlier this year, a...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere/","RawContent":null},{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":32,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"26813850108","Type":"PullRequestEvent","CreatedAt":"2023-02-02T01:40:07","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9366","RelatedDescription":"Opened pull request \"Search-by-TFM Bug Bash feedback\" (#9366) at NuGet/NuGetGallery","RelatedBody":"Addresses \r\n\r\nThis PR addresses some of the issues flagged by the Search-by-TFM bug bash:\r\n\r\n1. The Prerelease url parameter sometimes had an uppercase boolean ('True') and sometimes a lowercase boolean ('true'). It will always show a lowercase boolean now.\r\n2. The frameworks and tfms parameters were being added to the query string in the order that the user selected them, rather than the order of the checkboxes in the UI. This has been fixed.\r\n3. The frameworks and tfms parameters always ended in a comma (`net,` ; `net5.0,net472,`). This has been fixed.\r\n4. Previously, all TFM sections were always collapsed when the page loaded. Now, if any individual TFMs have been selected, their TFM sections will be expanded when the page loads.\r\n5. The packageType query parameter was before frameworks and tfms in the url, but appears after them in the UI. This has been fixed so that the frameworks and tfms params appear before packageType in the url."},{"Id":"26784254150","Type":"PullRequestEvent","CreatedAt":"2023-02-01T00:36:26","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9365","RelatedDescription":"Opened pull request \"modify warning message on display package page when missing readme\" (#9365) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Introduced new warning message on package display page when package is missing readme\r\n* only display warning message to package authors\r\n* added feature flag to this new warning\r\n\r\nBefore: \r\n![Screenshot 2023-01-31 140711](https://user-images.githubusercontent.com/64443925/215915916-076f6854-e2da-48fb-8a73-6a8f8ddf11ed.png)\r\nAfter: \r\n![Screenshot 2023-01-31 140647](https://user-images.githubusercontent.com/64443925/215915939-7573b301-73ad-4108-98c8-5b3a164070df.png)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"},{"Id":"26779108018","Type":"PullRequestEvent","CreatedAt":"2023-01-31T19:34:09","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9358","RelatedDescription":"Merged pull request \"Update readme link\" (#9358) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Update readme link to how to include readme instead of best practice \r\n\r\n\r\nissue: https://github.com/NuGet/NuGetGallery/issues/9359\r\n"},{"Id":"26752875153","Type":"PullRequestEvent","CreatedAt":"2023-01-30T21:09:21","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9364","RelatedDescription":"Merged pull request \"[TFM] net6.0-windows7.0 compatibility added.\" (#9364) at NuGet/NuGetGallery","RelatedBody":"## Description\r\nWe use NuGet client sdk in order to create a compatibility matrix for displaying TFMs on nuget.org. Currently there is no knowledge on nuget client sdk on what net5+ platform version exists (like net6.0-windows7.0) and they are not computed.\r\n\r\n## Changes\r\n* net6.0-windows7.0 compatibility has been hardcoded with known values.\r\n* This compatibility will only show if a package contains that specific TFM in their assets.\r\n\r\n## Screenshots\r\n\r\n![Before](https://user-images.githubusercontent.com/17834924/214958483-83ed5463-ce87-4a93-86e0-de2ceedfe872.png)\r\n\r\n![After](https://user-images.githubusercontent.com/17834924/214958491-6f98386b-02b2-4d79-b40c-baa369998355.png)\r\n\r\n## Notes\r\n* Why doesn't these PR cover all the other versions?\r\n  * We don't know the exhaustive compatibility on platform versions. \r\n* For further improvements we will need to collaborate with NuGet client and dotnet sdk: https://github.com/NuGet/Engineering/issues/4730. \r\n\r\nAddresses: https://github.com/NuGet/NuGetGallery/issues/9337"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"26807343408","Type":"IssuesEvent","CreatedAt":"2023-02-01T19:21:15","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12401","RelatedDescription":"Opened issue \"Better error message when lock file is not accessible\" (#12401) at NuGet/Home","RelatedBody":"Currently, the error message is:\r\n`error : Unable to obtain lock file access on '/tmp/NuGetScratch/lock' for operations on '/home/user/test/NuGet.Config'. This may mean that a different user or administrator is holding this lock and that this process does not have permission to access it. If no other process is currently performing an operation on this file it may mean that an earlier NuGet process crashed and left an inaccessible lock file, in this case removing the file '/tmp/NuGetScratch/lock' will allow NuGet to continue.`\r\n\r\nWe'd better to \r\n1.Use error code and add a doc for this error code.\r\n2.The doc should introduce the env var NUGET_SCRATCH which could override the default temp folder.\r\n3.Update [cli-ref-environment-variables](https://learn.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-environment-variables) to add this env var.\r\n4.Add path validation on the NUGET_SCRATCH.\r\n\r\nThis is a follow-up issue for https://github.com/NuGet/Client.Engineering/issues/2074 "},{"Id":"26805132897","Type":"IssuesEvent","CreatedAt":"2023-02-01T17:41:33","Actor":"tdhatcher","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12400","RelatedDescription":"Opened issue \"ProjectReference alias support for multiple versions of the same package within 1 project\" (#12400) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe, MSBuild.exe\n\n### Current Behavior\n\nScenario A. Direct Nuget Dependency\r\n``` xml\r\n<!-- Api.csproj -->\r\n<ItemGroup>\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"2.0.0\" Aliases=\"Sdk_v2_nuget\" />\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"1.0.0\" Aliases=\"Sdk_v1_nuget\" />\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"3.0.0\" Aliases=\"Sdk_v3_nuget\" />\r\n</ItemGroup>\r\n```\r\n\r\n``` c#\r\n// Works (first alias declared in .csproj is available)\r\n// Program.cs\r\nextern alias Sdk_v2_nuget;\r\nusing v2Models = Sdk_v2_nuget::Api.Sdk.Models;\r\nvar request2 = new v2Models.Request();\r\n```\r\n\r\n``` c#\r\n// Doesn't work (subsequent aliases declared in .csproj ignored and not available)\r\n// Program.cs\r\nextern alias Sdk_v1_nuget; // compiler error: CS0430 The extern alias 'Sdk_v1_nuget' was not specified in a /reference option\r\nextern alias Sdk_v3_nuget; // compiler error: CS0430 The extern alias 'Sdk_v3_nuget' was not specified in a /reference option\r\n\r\nusing v1Models = Sdk_v1_nuget::Api.Sdk.Models;\r\nusing v3Models = Sdk_v3_nuget::Api.Sdk.Models;\r\n\r\nvar request1 = new v1Models.Request();\r\nvar request3 = new v3Models.Request();\r\n```\r\n\r\nScenario B. Transitive Dependency through direct Project Reference\r\n``` xml\r\n<!-- Api.csproj -->\r\n<ItemGroup>\r\n    <ProjectReference Include=\"..\\TransitiveProjectB\\TransitiveProjectB.csproj\" />\r\n    <ProjectReference Include=\"..\\TransitiveProjectC\\TransitiveProjectC.csproj\" />\r\n    <ProjectReference Include=\"..\\TransitiveProjectA\\TransitiveProjectA.csproj\" />\r\n</ItemGroup>\r\n```\r\n``` c#\r\n// Works and automatically uses Api.Sdk 3.0.0 (the highest version) that finds in any of the other projects directly referenced\r\n// Program.cs\r\nusing Api.Sdk.Models;\r\nvar request = new Request();\r\n```\r\n\r\n``` xml\r\n<!-- TransitiveProjectA.csproj -->\r\n<ItemGroup>\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"1.0.0\" />\r\n</ItemGroup>\r\n```\r\n\r\n``` xml\r\n<!-- TransitiveProjectB.csproj -->\r\n<ItemGroup>\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n```\r\n\r\n``` xml\r\n<!-- TransitiveProjectC.csproj -->\r\n<ItemGroup>\r\n    <PackageReference Include=\"Api.Sdk\" Version=\"3.0.0\" />\r\n</ItemGroup>\r\n```\n\n### Desired Behavior\n\nIn Scenario B. There currently appears to be some assumption precedent as 3.0.0 is the version automatically chosen over 1.0.0 and 2.0.0 without instruction.\r\n\r\nScenario A. This would compile and I would continue to expect NU1504 warning from compiler indicating that duplicate 'PackageReference' items found (good attention). Or a compilation error for certain scenarios that make it impossible for reasons beyond my current depth of understanding. At that point the maintainers may have to make a minor patch to update a transitive dependency or whatever is necessary to bring the two major versions of the Api.Sdk package into parity for the two assemblies to work along side of each other. This seems like an extreme edge case though and if to be ignored then in that case default to the behavior it is does today -- not possible.\r\n\r\nIn the case the transitive dependencies for each version of the same Api.Sdk package, shouldn't they continue to remain isolated like the existing behavior is for the situation when you have two Nuget references to separate packages but each has a transitive dependency on the same package but using a different version? Isn't this one area where Nuget really shines today?\r\n\r\n``` c#\r\n// Works\r\n// Program.cs\r\nextern alias Sdk_v1_nuget;\r\nextern alias Sdk_v2_nuget;\r\nextern alias Sdk_v3_nuget;\r\n\r\nusing v1Models = Sdk_v1_nuget::Api.Sdk.Models;\r\nusing v2Models = Sdk_v2_nuget::Api.Sdk.Models;\r\nusing v3Models = Sdk_v3_nuget::Api.Sdk.Models;\r\n\r\nvar request1 = new v1Models.Request();\r\nvar request2 = new v2Models.Request();\r\nvar request3 = new v3Models.Request();\r\n```\r\n\r\n![Nuget Multiple Version Support](https://user-images.githubusercontent.com/360359/216119725-2013a25f-2d64-40f5-86aa-788822eea4ce.svg)\r\n\n\n### Additional Context\n\n @nkolev92 @commonsensesoftware Continuation of the renewed discussion on a closed issue https://github.com/NuGet/Home/issues/4989\r\n\r\n@commonsensesoftware mentioned some other strategies for API version affinity here\r\nhttps://github.com/NuGet/Home/issues/4989#issuecomment-1410960483\r\n\r\n1. Include all supported API versions in a single package, separated by namespace\r\n2. Include a single package that maps to the most recent supported API versions\r\n3. Include a meta package that maps to individual packages corresponding to independently version clients\r\n\r\nThere are several ways to mitigate breaking changes in API to facilitate a smooth transition. I was just thinking of what I felt would make life easier and reduce the need for any creativity or extra overhead on the API management and maintenance side of the coin when you need to support multiple versions of an API side by side on the same instance and code base.\r\n\r\nAPI deprecation is a common use case and when it involves breaking changes maintaining N-2 or more is doable, just doesn't feel the cleanest. I just thought perhaps this would just give developers another option and tactic for implementing and managing breaking changes in their API code bases. I'd say this approach is closest to #2 for the consumer of the Sdk but for the maintainer for the API is closer to #1 without having to clone all the breaking change classes or reference them in a unique way to maintain a version alongside since a Nuget packages previous version could provide that already.\r\n\r\nI would like to know where I could learn more about #3 and a \"meta package\".\r\n\r\nTear it apart :)"},{"Id":"26804892166","Type":"IssuesEvent","CreatedAt":"2023-02-01T17:30:58","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12390","RelatedDescription":"Closed issue \"MSB4066 \"The attribute 'Version' in element <PackageReference> is unrecognized.\" error in NuGet CLI 6.4.0\" (#12390) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nnuget.exe 6.4.0\n\n### Worked before?\n\n6.3.1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n1. Create a .csproj file with this content:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProjectGuid>{A4366E0A-29F0-4F5E-B6CD-C35F022FB924}</ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>NUnit2PassingTest</RootNamespace>\r\n    <AssemblyName>NUnit2PassingTest</AssemblyName>\r\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\r\n    <FileAlignment>512</FileAlignment>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"nunit.framework, Version=2.6.4.14350, Culture=neutral, PublicKeyToken=96d09a1eb7f44a77, processorArchitecture=MSIL\">\r\n      <HintPath>packages\\NUnit.2.6.4\\lib\\nunit.framework.dll</HintPath>\r\n      <Private>True</Private>\r\n    </Reference>\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"TestFixture.cs\" />\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"packages.config\" />\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. \r\n       Other similar extension points exist, see Microsoft.Common.targets.\r\n  <Target Name=\"BeforeBuild\">\r\n  </Target>\r\n  <Target Name=\"AfterBuild\">\r\n  </Target>\r\n  -->\r\n</Project>\r\n```\r\n2. Run `NuGet.exe restore PATH_TO_CSPROJ_FILE -SolutionDirectory PATH_TO_CSPROJ_DIRECTORY`\r\n3. Note you'll see this error:\r\n```\r\nC:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\NuGetScratch\\ztu053ia.0tn.nugetrestore.targets(199,25): error MSB4066: The attribute \"Version\" in element <PackageReference> is unrecognized. [C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\NuGetScratch\\unf55omt.uun.nugetinputs.targets]\r\n```\n\n### Verbose Logs\n\n```shell\n> .\\NuGet.CommandLine.6.4.0\\tools\\NuGet.exe restore .\\Test\\Assemblies\\NUnit2PassingTest\\NUnit2\r\nPassingTest.csproj -solutiondirectory .\\Test\\assemblies\\NUnit2PassingTest -verbosity detailed\r\nNuGet Version: 6.4.0.123\r\nMSBuild P2P timeout [ms]: 120000\r\nMSBuild auto-detection: using msbuild version '12.0.40629.0 built by: REL' from 'C:\\Program Files (x86)\\MSBuild\\12.0\\Bin'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\nC:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\msbuild.exe \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\NuGetScratch\\byoybwms.d1c.nugetinputs.targets\" /t:GenerateRestoreGraphFile /nologo /nr:false /v:q /p:NuGetRestoreTargets=\"C:\\Users\\appveyor\\AppData\\\r\nLocal\\Temp\\1\\NuGetScratch\\muiuyf0f.qw2.nugetrestore.targets\" /p:RestoreUseCustomAfterTargets=\"True\" /p:DisableCheckingDuplicateNuGetItems=\"True\" /p:RestoreTaskAssemblyFile=\"C:\\projects\\whiskey\\NuGet.CommandLine.6.4.0\\tools\\NuGet.exe\" /p:Res\r\ntoreSolutionDirectory=\"C:\\projects\\whiskey\\Test\\assemblies\\NUnit2PassingTest\\\\\" /p:SolutionDir=\"C:\\projects\\whiskey\\Test\\assemblies\\NUnit2PassingTest\\\\\" /p:RestoreBuildInParallel=\"False\" /p:RestoreUseSkipNonexistentTargets=\"False\"\r\nC:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\NuGetScratch\\muiuyf0f.qw2.nugetrestore.targets(199,25): error MSB4066: The attribute \"Version\" in element <PackageReference> is unrecognized. [C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\NuGetScratch\\byoybw\r\nms.d1c.nugetinputs.targets]\r\n\r\nNuGet.CommandLine.ExitCodeException: Exception of type 'NuGet.CommandLine.ExitCodeException' was thrown.\r\n   at NuGet.CommandLine.MsBuildUtility.<GetProjectReferencesAsync>d__6.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\MsBuildUtility.cs:line 201\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<GetDependencyGraphSpecAsync>d__68.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\Commands\\RestoreCommand.cs:line 683\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<DetermineInputsFromMSBuildAsync>d__63.MoveNext() in D:\\a\\_work\\1\\s\\src\\NuGet.Clients\\NuGet.CommandLine\\Commands\\RestoreCommand.cs:line 549\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"26018738970","Type":"IssuesEvent","CreatedAt":"2022-12-21T10:42:59","Actor":"zivkan","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Closed issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"26013885749","Type":"IssuesEvent","CreatedAt":"2022-12-21T06:13:15","Actor":"Bdbdbandn","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/67","RelatedDescription":"Opened issue \"https://www.dropbox.com/s/bi5mynlyl2b3a16/nutrition.pdf?dl=0\" (#67) at NuGet/Announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details."},{"Id":"25223918809","Type":"IssuesEvent","CreatedAt":"2022-11-14T14:43:41","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Closed issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"},{"Id":"25209931462","Type":"IssuesEvent","CreatedAt":"2022-11-14T02:15:16","Actor":"DSBRBrasil","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/66","RelatedDescription":"Opened issue \"Associate microsoft account\" (#66) at NuGet/Announcements","RelatedBody":"Hi, I want to associate my microsoft account to sig in on nuget.\r\nhelp please ... thks"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1600604140564058117","CreatedAt":"2022-12-07T21:32:19+00:00","UserScreenname":"nuget","Text":"We're excited to announce our proposal for auditing projects for package vulnerabilities! This will help ensure the… https://t.co/nSLELXfv9A","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":8,"RawContent":null},{"Id":"1590088546899329024","CreatedAt":"2022-11-08T21:07:06+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.4 📦\n\n✅ Central Package Management is production ready\n🌎 Use a PackageReference everywhere with… https://t.co/AaPbNKIxGA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null},{"Id":"1575911013328863252","CreatedAt":"2022-09-30T18:10:39+00:00","UserScreenname":"nuget","Text":"🎁NuGet Season of Giving🎁\n\n👍 Working on highly requested features.\n🎃 Hacktoberfest\n🧊 Closing stale issues\n\nWe hope y… https://t.co/OIX6HAnPte","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":14,"FavoriteCount":3,"RawContent":null},{"Id":"1566762590335893505","CreatedAt":"2022-09-05T12:18:05+00:00","UserScreenname":"nuget","Text":"At approximately 11:11 AM UTC (~1 hour ago) we began to see increased errors for https://t.co/MK66n2mmT6 in some ge… https://t.co/Hha9zOVSst","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1564312481488592903","CreatedAt":"2022-08-29T18:02:13+00:00","UserScreenname":"nuget","Text":"Announcing syntax highlighting for READMEs on https://t.co/F9kiKfvqkS.\n\n👩‍💻 Automatic language detection.\n✍️ Multi-… https://t.co/4cZeND2aZC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":127,"FavoriteCount":31,"RawContent":null},{"Id":"1557411889466023936","CreatedAt":"2022-08-10T17:01:44+00:00","UserScreenname":"nuget","Text":"🎉 Introducing Transitive Dependencies in Visual Studio 🎉\n\n👀 View transitive dependencies\n🔺 Promote transitive depen… https://t.co/strnTenOBB","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":54,"FavoriteCount":15,"RawContent":null},{"Id":"1557099052700925958","CreatedAt":"2022-08-09T20:18:38+00:00","UserScreenname":"nuget","Text":"📦 Announcing NuGet 6.3 📦\n\n🐛 Consume pdbs from packages in PackageReference\n👀 View transitive dependencies in Visual… https://t.co/OYMsZ2IBTa","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":47,"FavoriteCount":15,"RawContent":null},{"Id":"1554953163576586241","CreatedAt":"2022-08-03T22:11:38+00:00","UserScreenname":"nuget","Text":"We’ve RCA'ed our recent connectivity issues, and in brief the cause was an inability to handle sudden large spikes… https://t.co/AB6FJRiRbz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":1,"RawContent":null},{"Id":"1546878617199804418","CreatedAt":"2022-07-12T15:26:16+00:00","UserScreenname":"nuget","Text":"Imagine you're using the .NET CLI and want to know why a package is included in the dependency graph. What command… https://t.co/jAvoRP7L5w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1545037921455153155","CreatedAt":"2022-07-07T13:32:00+00:00","UserScreenname":"nuget","Text":"What would you name this feature for Central Package Management?\n\nhttps://t.co/WH5iIJ6OtI\n\nOr something else entire… https://t.co/NZGQ8fAmTE","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2023-02-02T03:30:25.0970421Z","RunDurationInMilliseconds":1420}