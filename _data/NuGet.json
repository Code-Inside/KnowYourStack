{"Data":{"Blog":{"FeedItems":[{"Title":"Custom V2 OData queries will be deprecated March 9, 2021","PublishedOn":"2020-12-02T17:52:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced the deprecation of custom V2 OData queries (#37) last year and conducted a dry run in early November to ensure that there are no surprises for users. Going forward, we plan to bring all...","Href":"https://devblogs.microsoft.com/nuget/custom-v2-odata-queries-will-be-deprecated-march-9-2021/","RawContent":null},{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14562644845","Type":"PullRequestEvent","CreatedAt":"2020-12-17T00:33:54","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8355","RelatedDescription":"Opened pull request \"Restrict package sources\" (#8355) at NuGet/NuGetGallery","RelatedBody":"Restrict package sources to those explicitly listed in the nuget.config file.\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/3525"},{"Id":"14561422213","Type":"IssuesEvent","CreatedAt":"2020-12-16T22:00:15","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8352","RelatedDescription":"Closed issue \"[Question] is it possible to create a package containing a dotnet tool and a package reference?\" (#8352) at NuGet/NuGetGallery","RelatedBody":"Hi,\r\n\r\ntoday I have a package that is a console app that people used to download and execute. We converted that to a dotnet tool, but we broke some customers.\r\n\r\nQuestion: is it possible to create a package containing a dotnet tool and a package reference?\r\n\r\n\r\nThank you."},{"Id":"14561078469","Type":"IssuesEvent","CreatedAt":"2020-12-16T21:24:30","Actor":"rovarma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8354","RelatedDescription":"Closed issue \"symbols.nuget.org — SymbolChecksum header required\" (#8354) at NuGet/NuGetGallery","RelatedBody":"We’re currently working on .NET support in our CPU profiler (www.superluminal.eu). I’d like to add support for NuGet’s symbol server so that profiling of NuGet packages is entirely transparent to the user. \r\n\r\nWe’re currently using dbghelp for symbol server support (SymFindFileInPath) and since NuGet’s symbol server seems to follow the regular symbol server format, I’d expected it to just work. \r\n\r\nHowever, I’m getting a 403 error for any PDBs I try to get. I know that Visual Studio does support NuGet, so I reverse engineered what that’s doing and it seems NuGet requires a SymbolChecksum header to be present for symbol server GET requests. If I manually send GET requests with this header it indeed works.\r\n\r\nI’m aware I can retrieve the checksum from the PE header, but that’s pretty inconvenient as it requires the image file to be present in order to read the checksum, which is not always the case (for example, when examining a ETW trace made on another machine). The checksum also seems redundant, since the PDB signature should already be enough to retrieve the PDB (and indeed that’s how it works in the native case). \r\n\r\nSo, I was wondering what the reasoning behind this requirement is, and if it’s possible to somehow opt out of this behaviour?\r\n\r\nNot having the requirement for this header would allow client tooling to treat NuGet’s symbol server as “just another symbol server”, rather than requiring special case handling to add the header, which seems desirable to me.\r\n\r\nAny input is appreciated!"},{"Id":"14560728811","Type":"PullRequestEvent","CreatedAt":"2020-12-16T20:50:14","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8169","RelatedDescription":"Merged pull request \"Manage edit documentation \" (#8169) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes:\r\n\r\nDocumentation UI change  in manage package page:\r\n\r\n* Enable to edit legacy readme file \r\n* Disable edit embedded readme file \r\n\r\n![NuGet Gallery _ Manage My Package](https://user-images.githubusercontent.com/64443925/101671440-5a5b9480-3a09-11eb-85d4-c60b6b8eef0d.gif)\r\n\r\n**Question for discussion:** \r\n\r\nFeature flag looks like could be removed here.\r\nFor case like we turn off embedded feature, there are legacy and embedded readme, we still don't allow user to edit embedded readme. \r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/3307"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14562581556","Type":"IssuesEvent","CreatedAt":"2020-12-17T00:25:23","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10385","RelatedDescription":"Opened issue \"Improve experience when a \"Bad Package\" is installed\" (#10385) at NuGet/Home","RelatedBody":"How might we improve NuGet to avoid the confusion that was encountered below by a bad package.\r\nNuGet Package Manager shows the package installed, even though it has a problem, and the reference isn't added.\r\n\r\nDeveloper Community: [Project stops displaying/loading Nuget Packages when some (problematic) package is added](https://developercommunity2.visualstudio.com/t/Project-stops-displayingloading-Nuget-Pa/1213102)\r\n\r\n### Problem\r\n> When I add one package (in my case it’s particularly Xamarin.Firebase.iOS.Crashlytics v3.14.0.3),\r\n> a) the package not getting displayed as added right after adding;\r\n> b) VS doesn’t indicate it’s added and any references to it from c# code not available;\r\n> c) [the most important] on VS restarting the whole list of Nuget packages (and possibly some others) stop being displayed (same way as not accessible through code).\r\n\r\n> Simple restarting and removing the package from the proj file manually also doesn’t help.\r\n> Only .vs, obj, bin folders cleaning resolve the issue on the next start.\r\n\r\n> The package added via VS still is displayed in the list of packages in the Nuget window (and resides in the proj file as usual):\r\n> <PackageReference Include=“Xamarin.Firebase.iOS.Crashlytics”>\r\n> <Version>3.14.0.3</Version>\r\n> </PackageReference>\r\n\r\n> I’ve got the issue only with this particular package.\r\n> I’ve got the issue in Xamarin.iOS project. (Not 100% sure, but it might also affect Xamarin.Android. No other project types was tested).\r\n> When downgrading the package to 3.10.9, for instance, the problem go away and everything functioning in normal way.\r\n> Just to clarify, this bug description is more about the fact that ALL the packages neither displayed in the References tree nor accessible from the code (rather than about the buggy package itself).\r\n> VS: 16.7.3\r\n> Xamarin: 16.7.000.440\r\n\r\n### Solution\r\nReply by @heng-liu \r\n\r\n> I could repro when installing Xamarin.Firebase.iOS.Crashlytics v3.14.0.3.\r\n> After investigation, I found the issue was caused by package Xamarin.Build.Download(0.9.0).\r\n> The Xamarin.Firebase.iOS.Crashlytics (3.14.0.3) has a dependency package Xamarin.Build.Download (>=0.9.0)\r\n> But the Xamarin.Build.Download (0.9.0) has an issue (https://github.com/xamarin/XamarinComponents/issues/787). That’s why we can see the following error message in VS when trying to build the ios project:\r\n> Could not load file or assembly ‘Microsoft.Win32.Registry, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a’ or one of its dependencies. The system cannot find the file specified.\r\n> I also see comments https://github.com/xamarin/XamarinComponents/issues/787#issuecomment-624662100 say this issue is fixed in a higer version of Xamarin.Build.Download (0.10.0).\r\n> So I tried to add package reference to Xamarin.Build.Download (0.10.0) directly in ios project. As such, the nearest wins (https://docs.microsoft.com/en-us/nuget/concepts/dependency-resolution#nearest-wins) will make sure the 0.10.0 version is selected.\r\n> Then I tried to build the project again and everything is good now. I also tried to reference the public API in package Xamarin.Firebase.iOS.Crashlytics, and it works! And the packages under “References” nodes are displayed in Solution Explore as well. So problem is solved:)\r\n> \r\n> So the root cause is, package Xamarin.Firebase.iOS.Crashlytics(3.14.0.3) references a broken pacakge Xamarin.Build.Download (0.9.0).\r\n> The solution is, you may use a higher version of Xamarin.Firebase.iOS.Crashlytics, which referrences a higer verion (>=0.10.0) of Xamarin.Build.Download.\r\n> Or, add reference to Xamarin.Build.Download (>=0.10.0) directly in your project."},{"Id":"14558964215","Type":"IssuesEvent","CreatedAt":"2020-12-16T18:05:07","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10384","RelatedDescription":"Opened issue \"Log content hash when installing packages on restore\" (#10384) at NuGet/Home","RelatedBody":"During restore, when a package is downloaded/installed, log the content hash so it appears in a CI log."},{"Id":"14558873071","Type":"IssuesEvent","CreatedAt":"2020-12-16T17:57:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10358","RelatedDescription":"Closed issue \"Improve .nupkg.metadata read/write performance\" (#10358) at NuGet/Home","RelatedBody":"Every extracted package in the global packages folder gets a `.nupkg.metadata` file, written on extraction, and read every time a lock file is used to check the package's content hash.\r\n\r\n`NupkgMetadataFileFormat` currently works by using `JObject` as an intermediate between the `NupkgMetadataFile` type and the serialized content.\r\n\r\nWe might get a minor perf gain (from fewer allocations) if we either use JsonConvert or JsonReader instead."},{"Id":"14550442655","Type":"IssuesEvent","CreatedAt":"2020-12-16T06:21:11","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10383","RelatedDescription":"Opened issue \"Remove \"Checking compatibility...\" log messages from RestoreTask\" (#10383) at NuGet/Home","RelatedBody":"Currently RestoreTask logs a lot of messages that start with Checking compatibility:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/102312508-b2235f80-3f23-11eb-893c-7b20d05a81e3.png)\r\n\r\nThe log output is full of these. I'm questioning the value of having these in the logs since they don't provide much useful information and generate a ton of noise.\r\n\r\nI suggest that we just stop logging this particular message."},{"Id":"14548983798","Type":"IssuesEvent","CreatedAt":"2020-12-16T02:38:04","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6150","RelatedDescription":"Closed issue \"Make NuGet.PackageManagement available as a .NET Standard package\" (#6150) at NuGet/Home","RelatedBody":"It seems that `NuGet.PackageManagement` is the only package in the client libraries that does not have .NET Standard support. It would be great to be able to use this package in other .NET Standard libraries, or in .NET Core apps, etc.\r\n\r\nI notice that this package has a dependency on `Microsoft.Web.Xdt`. Is that the only thing blocking this from happening?"},{"Id":"14545895412","Type":"IssuesEvent","CreatedAt":"2020-12-15T20:21:54","Actor":"eddynaka","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10382","RelatedDescription":"Opened issue \"Error when build with automatic packing using cmd\" (#10382) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 5.0.200-preview.20601.7\r\n\r\nVS version (if appropriate): VS2019 16.8.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 19042.685\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. dotnet build csproj throwing error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\5.0.200-preview.20601.7\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error : The given key 'tfm_raw' was not present in the dictionary. [C:\\sarif-pattern-matcher\\Src\\Plugins\\BannedApi\\BannedApi.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n````\r\n\r\nIf I manually build using VS, it works fine.\r\n\r\nAttached you can find a binlog\r\n\r\n[msbuild.zip](https://github.com/NuGet/Home/files/5698378/msbuild.zip)\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"14545230301","Type":"IssuesEvent","CreatedAt":"2020-12-15T19:20:31","Actor":"wli3","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10381","RelatedDescription":"Opened issue \"How do I define an internal assembly in a NuGet package?\" (#10381) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#14906**\r\n- Please respond to @lg2de.\r\n\r\n---\r\n\r\n_From @lg2de on Wednesday, December 9, 2020 5:12:25 PM_\r\n\r\nI want to define a NuGet package that contains two assemblies, one that is directly referenced by the consumer of my package and another one that is only needed at runtime and its APIs should not be visible to the consumer.\r\n\r\nI've created a github repository to demonstrate the constellation in detail:\r\nhttps://github.com/lg2de/NuGetDependencyDemo\r\n\r\nThe assembly `BaseLibrary` is directly referenced by the assembly `DependentLibrary`.\r\n`BaseLibrary` is an external assembly not available as NuGet package.\r\nFrom `DependentLibrary` my NuGet package is created.\r\n\r\nWhen creating project just referencing the NuGet package, the assembly `BaseLibrary` is missing in the build output. (In the mentioned repository you can find this constellation [here][1].)\r\nOf course, in this case the application raises an `FileNotFoundException` for `BaseLibrary`.\r\n\r\nSo I've added is to my NuGet package [using targets file directive][2].\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <None Include=\"$(MSBuildThisFileDirectory)BaseLibrary.dll\" Visible=\"false\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe assembly now available in the output folder, but I still get the same `FileNotFoundException`.\r\nThis seems to be new behavior in dotnetcore: Assemblies are not implicitly loaded.\r\nThe assembly is missing in `ConsoleWithNugetReference.deps.json`.\r\n\r\nTo solve this now have to [load manually before it is first used][3].\r\n\r\n```c#\r\nvar location = Path.GetDirectoryName(typeof(Program).Assembly.Location);\r\nAssemblyLoadContext.Default.LoadFromAssemblyPath(Path.Combine(location!, \"BaseLibrary.dll\"));\r\n```\r\n\r\nAll this is very complicated and tedious!\r\n\r\nSo, how can I define a NuGet package that contains two assemblies, one that is directly referenced by the consumer of my package and another one that is only needed at runtime and its APIs should not be visible to the consumer?\r\n\r\n\r\n  [1]: https://github.com/lg2de/NuGetDependencyDemo/tree/11962aa812a566efbb5782876692ebb1df574fa9\r\n  [2]: https://github.com/lg2de/NuGetDependencyDemo/commit/0d67ebaf3648d06322844f03a99609dd642506b7\r\n  [3]: https://github.com/lg2de/NuGetDependencyDemo/commit/e2dbc8c0265217164f4022347f1c7e65125e4c7a"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1334226716139655171","CreatedAt":"2020-12-02T20:03:32+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nHave you recently experienced issues with your NuGet connectors? You may have been impacted… https://t.co/98KJJGhYEW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":6,"RawContent":null},{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-12-17T05:30:37.9127271Z","RunDurationInMilliseconds":1587}