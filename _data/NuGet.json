{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33144149725","Type":"IssuesEvent","CreatedAt":"2023-11-07T04:38:07","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9728","RelatedDescription":"Opened issue \"Update IPackageVulnerabilitiesManagementService to allow batch updates.\" (#9728) at NuGet/NuGetGallery","RelatedBody":"As per the discussion at https://github.com/NuGet/NuGetGallery/pull/9712#discussion_r1372451267\r\nThis service should allow bulk updates to minimize impact on DB performance."},{"Id":"33129864494","Type":"IssuesEvent","CreatedAt":"2023-11-06T17:16:38","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9612","RelatedDescription":"Closed issue \"NuGet.exe and NuGet Packages Support Policy\" (#9612) at NuGet/NuGetGallery","RelatedBody":"- [x] Display a link for only the latest recent nuget.exe on the nuget.org downloads\n\n- [x] Add a collapsible section to nuget.org page"},{"Id":"33110879442","Type":"PullRequestEvent","CreatedAt":"2023-11-06T06:17:02","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9727","RelatedDescription":"Opened pull request \"Reject POST to report abuse if the reason isn't one we allow reporting from the form.\" (#9727) at NuGet/NuGetGallery","RelatedBody":"Should address an odd issue with support requests where we get reasons that we shouldn't be seeing in support DB."},{"Id":"33091428697","Type":"IssuesEvent","CreatedAt":"2023-11-04T13:35:34","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9726","RelatedDescription":"Opened issue \"[Feature]: Encourage developers to share their profile and stats.\" (#9726) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nWhen user checking published packages on nuget.org website it is not encouraging developer to share it since there is no \"save it as photo\" or \"share it as photo\" option. User avatar and profile name should be added at somewhere of this table.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/59773207-dd40-4bc0-976c-f87b5c6dfa09)\r\n\r\nAlso, on profile data do look like a soap. It doesn't encourage to save or share data with others. Rather than a simple lines of texts and packages, metro design could be offered as option which packages could be seen on grid design.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/a93f4f63-44f9-44bc-aad5-ce373f49876e)\r\n\r\nThere is no option so see full stats by time, work-flow design could be used there. Also there should be also an option to save or share it as photo.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/0559ebc9-9bda-4a33-bca8-452d1e673a6c)\r\n\r\nContrast should be increased to enhance liability between rows.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/13a2eb98-e890-409d-9f6f-e7c36b818e9e)\r\n\r\nI would love to discuss about these.\r\n\r\nThanks.\r\n\n\n### The Elevator Pitch\n\nWould you like to hear amazing minor design enhancement that will encourage users to share they are happy to use Nuget?\r\n\r\nHere, there are a few example, how current users can help us to others which they didn't hear us yet.\r\n\r\nDing-dong -> elevator reaches to floor.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33091101331","Type":"IssuesEvent","CreatedAt":"2023-11-04T12:56:30","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9725","RelatedDescription":"Opened issue \"[NuGet.org Design]: \" (#9725) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nHi.\r\n\r\nWhen you are use \"manage packages\" on mobile versions of nuget.org, you see wrapped words and wrong frames.\n\n### Repro Steps\n\n1. Go to \"Manage packages\" on mobile version.\n\n### Expected Behavior\n\nClear frame lines covers whole table, seeing unwrapped words.\n\n### Screenshots\n\n![F7r-HcUWEAAQ8cC](https://github.com/NuGet/NuGetGallery/assets/4971757/793f143a-614a-4a6b-8ede-03ba4e9830a3)\r\n\r\n![F7r-HcPXgAAAS6d](https://github.com/NuGet/NuGetGallery/assets/4971757/be01bcf7-ac56-4903-9418-466693a5a93f)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"33087405429","Type":"IssuesEvent","CreatedAt":"2023-11-04T03:35:41","Actor":"paulnsk","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9724","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Images from github readmes are not shown on nuget.org (domain not trusted). \" (#9724) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI just added a readme.md to my little nuget package. I did so by using github's built-in markdown editor. When an image is pasted into the editor, it is automatically uploaded to a location similar to this \r\n\r\n`![image](https://github.com/paulnsk/ConsoleTools/assets/39160578/2328bb9c-1772-450c-a626-7192709b9bde)`\r\n\r\nwhich is apparently not suitable for using on nuget.org.\r\n\r\nPlease include github.com/.../assets to the trusted domain list\r\nhttps://learn.microsoft.com/en-us/nuget/nuget-org/package-readme-on-nuget-org#allowed-domains-for-images-and-badges\n\n### Repro Steps\n\nCreate a repo on github.\r\nWhen prompted, add a readme file.\r\nAn editor will open.\r\nPaste an image from clipboard and observe the URL as the editor adds the image reference to the readme.md\n\n### Expected Behavior\n\nIt would be nice to see actual images here\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/39160578/7464e676-4775-4a28-be2c-a98392923449)\r\n\r\n(https://www.nuget.org/packages/manage/upload)\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33176665864","Type":"IssuesEvent","CreatedAt":"2023-11-08T02:09:56","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12994","RelatedDescription":"Opened issue \"Embed the right versions of Restore-related files into binlog at the right time\" (#12994) at NuGet/Home","RelatedBody":"Currently we have a problem that if Restore is running after .g.props and g.targets files are already on disk, the old versions of these files will be embedded in the binlog instead of the ones produced by the Restore task.\r\n\r\nHowever if the Restore task doesn't run, we still want to embed whatever version of g.props and g.targets was on disk at the time they were imported.\r\n\r\nSame for project.assets.json, it's hard to embed the right version of it at the right time. Currently it's being done by this logic:\r\nhttps://github.com/dotnet/sdk/pull/16840/files\r\n\r\nThe way embedding into binlog is done is every time an item is added (either via ItemGroup, or as an output item of a task, or as target output), if the file path exists on disk, the current contents of the file is embedded immediately and eagerly. Subsequent requests to embed the same file path are ignored (the first request wins, and the version is stored as of the time of the first request). However if the requested file doesn't exist on disk, nothing happens, so the next request to embed the file will succeed if the file is first found on disk.\r\n\r\n@jeffkl "},{"Id":"33176371036","Type":"IssuesEvent","CreatedAt":"2023-11-08T01:51:08","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12993","RelatedDescription":"Closed issue \"Static Graph RestoreEx: NuGet.Build.Tasks.Console.exe crash with wildcards and UNC paths\" (#12993) at NuGet/Home","RelatedBody":"I have a situation where normal restore works fine, but switching to static graph restore crashes MSBuild with:\r\n\r\n`The UNC path should be of the form \\\\server\\share.`\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error : The UNC path should be of the form \\\\server\\share. [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.LongPathHelper.Normalize(String path, UInt32 maxPathLength, Boolean checkInvalidCharacters, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.GetFullPathInternal(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\n```\r\n\r\nThe specific process that crashes is `NuGet.Build.Tasks.Console.exe` with the following stack:\r\n\r\n```\r\n\tmscorlib\tLongPathHelper.Normalize Line 167\r\n\tmscorlib\tPath.NewNormalizePath Line 503\r\n\tmscorlib\tPath.NormalizePath Line 427\r\n\tmscorlib\tPath.NormalizePath Line 391\r\n\tmscorlib\tPath.NormalizePath Line 376\r\n\tmscorlib\tPath.GetFullPathInternal Line 366\r\n\tmscorlib\tPath.GetFullPath Line 330\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 500\r\n\tMicrosoft.Build\tFileUtilities.NormalizePath Line 465\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 762\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 447\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ComputeItems Line 418\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.GetItemData Line 306\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.GetAllItemsDeferred Line 506\r\n\tSystem.Core\tEnumerable.SelectManyIterator\r\n\tSystem.Core\tBuffer`1..ctor\r\n\tSystem.Core\tOrderedEnumerable`1.GetEnumerator\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 686\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 341\r\n\tMicrosoft.Build\tProjectInstance.Initialize Line 2804\r\n\tMicrosoft.Build\tProjectInstance..ctor Line 285\r\n\tMicrosoft.Build\tProjectInstance.FromFile Line 757\r\n\tNuGet.Build.Tasks.Console\tMSBuildStaticGraphRestore.LoadProjects\r\n\tMicrosoft.Build\tGraphBuilder.ParseProject Line 536\r\n\tMicrosoft.Build\tGraphBuilder.SubmitProjectForParsing Line 576\r\n\tmscorlib\tLazy`1.CreateValue Line 437\r\n\tmscorlib\tLazy`1.LazyInitValue Line 388\r\n\tmscorlib\tLazy`1.get_Value Line 339\r\n\tMicrosoft.Build\tParallelWorkSet`2.ExecuteWorkItem Line 194\r\n\tMicrosoft.Build\tParallelWorkSet`2.<CreateProcessorItemTask>b__17_0 Line 169\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\r\n\tmscorlib\tExecutionContext.RunInternal Line 981\r\n\tmscorlib\tExecutionContext.Run Line 928\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.Run Line 1071\r\n\tmscorlib\tAwaitTaskContinuation.RunOrScheduleAction Line 811\r\n\tmscorlib\tTask.FinishContinuations Line 3617\r\n\tmscorlib\tTask.FinishStageThree Line 2363\r\n\tmscorlib\tTask`1.TrySetResult Line 490\r\n\tmscorlib\tSemaphoreSlim.TaskNode.ExecuteWorkItem Line 95\r\n\tmscorlib\tThreadPoolWorkQueue.Dispatch Line 820\r\n\tmscorlib\t_ThreadPoolWaitCallback.PerformWaitCallback Line 1161\r\n```\r\n\r\nThe actual problem is this call to `Path.GetFullPath`:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L447\r\n\r\nIt is being passed the value of `\\\\csc.*`, which results in GetFullPath throwing an ArgumentException: `The UNC path should be of the form \\\\server\\share.`\r\n\r\nUnfortunately I've failed to isolate a standalone repro for this exact scenario. I do have an internal repo at commit `bd36c7032f0950eeca634d7aa34fcdf441e89ed9` that's easy to reproduce this on. Just contact me on Teams and we can take a look together.\r\n\r\nHowever I did build a repro that hits a very similar case, with slightly different behavior. It no longer crashes, but fails the build with this error:\r\n\r\n```\r\n\"C:\\temp\\staticGraphFail\\staticGraphFail.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::\r\nValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path\r\n should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets [C:\\temp\\staticGraphFail\\staticGraphF\r\nail.sln]\r\n```\r\n\r\nTo repro, create this fail.csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\"/>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(PkgNewtonsoft_Json)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand build with `msbuild /t:Restore fail.csproj`.\r\n\r\nIn this repro, the crash happens here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L429\r\n\r\nThere's a good try/catch around this callstack, so it doesn't bring down the process, because this catch block catches it:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/Modifiers.cs#L602\r\n\r\nThere's another catch block here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/Expander.cs#L982\r\n\r\nHowever in my actual case, there isn't such a good catch block around this codepath:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L418\r\n\r\nI wasn't able to recreate a standalone repro which takes that path (line 418) instead of the regular path (line 429). Ping me on Teams for a real-life repro of the actual issue.\r\n\r\nI suspect the problem is that wildcards are not expected to be in the item spec `\\\\csc.*` but they are, and the item spec starts with `\\\\` because the $(Pkg*) property evaluates to an empty string at the time of restore eval, and then `Path.GetFullPath()` crashes on it, but there's no good catch block to catch it around line 418, so it is more fatal.\r\n\r\n\r\n"},{"Id":"33175833548","Type":"IssuesEvent","CreatedAt":"2023-11-08T01:13:38","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12993","RelatedDescription":"Opened issue \"Static Graph RestoreEx: NuGet.Build.Tasks.Console.exe crash with wildcards and UNC paths\" (#12993) at NuGet/Home","RelatedBody":"I have a situation where normal restore works fine, but switching to static graph restore crashes MSBuild with:\r\n\r\n`The UNC path should be of the form \\\\server\\share.`\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error : The UNC path should be of the form \\\\server\\share. [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.LongPathHelper.Normalize(String path, UInt32 maxPathLength, Boolean checkInvalidCharacters, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.GetFullPathInternal(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\n```\r\n\r\nThe specific process that crashes is `NuGet.Build.Tasks.Console.exe` with the following stack:\r\n\r\n```\r\n\tmscorlib\tLongPathHelper.Normalize Line 167\r\n\tmscorlib\tPath.NewNormalizePath Line 503\r\n\tmscorlib\tPath.NormalizePath Line 427\r\n\tmscorlib\tPath.NormalizePath Line 391\r\n\tmscorlib\tPath.NormalizePath Line 376\r\n\tmscorlib\tPath.GetFullPathInternal Line 366\r\n\tmscorlib\tPath.GetFullPath Line 330\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 500\r\n\tMicrosoft.Build\tFileUtilities.NormalizePath Line 465\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 762\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 447\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ComputeItems Line 418\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.GetItemData Line 306\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.GetAllItemsDeferred Line 506\r\n\tSystem.Core\tEnumerable.SelectManyIterator\r\n\tSystem.Core\tBuffer`1..ctor\r\n\tSystem.Core\tOrderedEnumerable`1.GetEnumerator\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 686\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 341\r\n\tMicrosoft.Build\tProjectInstance.Initialize Line 2804\r\n\tMicrosoft.Build\tProjectInstance..ctor Line 285\r\n\tMicrosoft.Build\tProjectInstance.FromFile Line 757\r\n\tNuGet.Build.Tasks.Console\tMSBuildStaticGraphRestore.LoadProjects\r\n\tMicrosoft.Build\tGraphBuilder.ParseProject Line 536\r\n\tMicrosoft.Build\tGraphBuilder.SubmitProjectForParsing Line 576\r\n\tmscorlib\tLazy`1.CreateValue Line 437\r\n\tmscorlib\tLazy`1.LazyInitValue Line 388\r\n\tmscorlib\tLazy`1.get_Value Line 339\r\n\tMicrosoft.Build\tParallelWorkSet`2.ExecuteWorkItem Line 194\r\n\tMicrosoft.Build\tParallelWorkSet`2.<CreateProcessorItemTask>b__17_0 Line 169\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\r\n\tmscorlib\tExecutionContext.RunInternal Line 981\r\n\tmscorlib\tExecutionContext.Run Line 928\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.Run Line 1071\r\n\tmscorlib\tAwaitTaskContinuation.RunOrScheduleAction Line 811\r\n\tmscorlib\tTask.FinishContinuations Line 3617\r\n\tmscorlib\tTask.FinishStageThree Line 2363\r\n\tmscorlib\tTask`1.TrySetResult Line 490\r\n\tmscorlib\tSemaphoreSlim.TaskNode.ExecuteWorkItem Line 95\r\n\tmscorlib\tThreadPoolWorkQueue.Dispatch Line 820\r\n\tmscorlib\t_ThreadPoolWaitCallback.PerformWaitCallback Line 1161\r\n```\r\n\r\nThe actual problem is this call to `Path.GetFullPath`:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L447\r\n\r\nIt is being passed the value of `\\\\csc.*`, which results in GetFullPath throwing an ArgumentException: `The UNC path should be of the form \\\\server\\share.`\r\n\r\nUnfortunately I've failed to isolate a standalone repro for this exact scenario. I do have an internal repo at commit `bd36c7032f0950eeca634d7aa34fcdf441e89ed9` that's easy to reproduce this on. Just contact me on Teams and we can take a look together.\r\n\r\nHowever I did build a repro that hits a very similar case, with slightly different behavior. It no longer crashes, but fails the build with this error:\r\n\r\n```\r\n\"C:\\temp\\staticGraphFail\\staticGraphFail.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::\r\nValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path\r\n should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets [C:\\temp\\staticGraphFail\\staticGraphF\r\nail.sln]\r\n```\r\n\r\nTo repro, create this fail.csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\"/>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(PkgNewtonsoft_Json)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand build with `msbuild /t:Restore fail.csproj`.\r\n\r\nIn this repro, the crash happens here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L429\r\n\r\nThere's a good try/catch around this callstack, so it doesn't bring down the process, because this catch block catches it:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/Modifiers.cs#L602\r\n\r\nHowever in my actual case, there isn't such a good catch block around this codepath:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L418\r\n\r\nI wasn't able to recreate a standalone repro which takes that path (line 418) instead of the regular path (line 429). Ping me on Teams for a real-life repro of the actual issue.\r\n\r\nI suspect the problem is that wildcards are not expected to be in the item spec `\\\\csc.*` but they are, and the item spec starts with `\\\\` because the $(Pkg*) property evaluates to an empty string at the time of restore eval, and then `Path.GetFullPath()` crashes on it, but there's no good catch block to catch it around line 418, so it is more fatal.\r\n\r\n\r\n"},{"Id":"33169112637","Type":"IssuesEvent","CreatedAt":"2023-11-07T19:52:30","Actor":"moh-hassan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12992","RelatedDescription":"Opened issue \"Symbol package snupkg  isn't getting pushed when the package is signed with valid certificate.\" (#12992) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\nnuget.exe\n\n### Worked before?\n\nnon signed package with non signed symbol is pushed fine.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n\r\nI upload nuget signed package with valid certificate in appveyor as:\r\n```\r\n- provider: NuGet\r\n  api_key: \r\n    secret: aaaabbbbbb\r\n```\r\nThe nupkg package is pushed successfully  but the symbol snupkg failed with a message:\r\n\r\n```\r\nError publishing package. NuGet server returned 400: Invalid file found in the uploaded package. \r\nSymbols packages should only contain '.pdb' files.\r\n\r\n```\r\nI tried to push the symbol by dotnet nuget command using the script  as:\r\n\r\n```\r\nset key=aaaaabbbbb\r\nset source=https://api.nuget.org/v3/index.json\r\ndotnet nuget push mypackage.6.2.1.snupkg -k %key%  -s %source%  \r\n\r\n```\r\n\r\nand get the same error:\r\n\r\n```\r\nPushing mypackage.6.2.1.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n  PUT https://www.nuget.org/api/v2/symbolpackage/\r\n  BadRequest https://www.nuget.org/api/v2/symbolpackage/ 1514ms\r\nerror: Response status code does not indicate success: 400 (Invalid file found in the uploaded package. \r\nSymbols packages should only contain '.pdb' files.).\r\n\r\n```\r\n\r\nIn MyGet server I can push the signed package and the signed symbol without error.\r\n\r\n\r\n**What i missed to push the signed symbol package.**\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33168254367","Type":"IssuesEvent","CreatedAt":"2023-11-07T19:19:12","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12991","RelatedDescription":"Opened issue \"Add responsive testing section in UI guidelines doc.\" (#12991) at NuGet/Home","RelatedBody":"We can improve our UI development process by adding responsive testing in multiple resolutions. "},{"Id":"33156345286","Type":"IssuesEvent","CreatedAt":"2023-11-07T13:00:35","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12920","RelatedDescription":"Closed issue \"Central Package Management causes Downgrade errors (NU1109) in non-SDK projects\" (#12920) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVisual Studio 17.7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nWhen changing versions in Directory.Packages.props, non-SDK projects often end up giving NU1109 errors, even though they of course should use the package version just specified. It seems they maintain the previous version used in some kind of cache, and the only way to get around it is to restart VS.\r\n\r\nA solution or guidance would be much appreciated.\n\n### Verbose Logs\n\n_No response_"},{"Id":"33139005265","Type":"IssuesEvent","CreatedAt":"2023-11-06T23:12:47","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10432","RelatedDescription":"Closed issue \"[DCR]: Floating versions using CPVM\" (#10432) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nWe use CPVM to manage our dependencies. Unfortunately, the last update presented us with a big problem. With the introduction of NU1011, it is no longer possible for us to run a resolution strategy that selects the highest possible version. This is especially relevant for our in-house dependencies, as we distribute regular patches and this can no longer be done automatically.\r\n\r\n## Suggested things\r\n\r\nOur suggestion is to implement a switch that deactivates the validation of NU1011. We understood the problem that led to the implementation of NU1011, but can rule out the problem for us.\r\n"},{"Id":"33138262519","Type":"IssuesEvent","CreatedAt":"2023-11-06T22:31:44","Actor":"radical","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12989","RelatedDescription":"Opened issue \"`dotnet nuget restore` does not unpack `ref/*/.xml` files in the package cache on Linux, but works on macOS\" (#12989) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.0-alpha.1.23523.13\n\n### Worked before?\n\n8.0.100-rtm.23506.1 on macOS\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. `dotnet new console`\r\n2. Add `<PackageReference Include=\"Microsoft.Internal.Runtime.AspNetCore.Transport\" Version=\"9.0.0-alpha.1.23552.1\" />`\r\n3. `dotnet new nugetconfig`\r\n4. Add a local source for the above package\r\n\r\n5. Restore with `NUGET_PACKAGES=/tmp/nuget-test dotnet restore`\r\n6. `find /tmp/nuget-test/microsoft.internal.runtime.aspnetcore.transport/9.0.0-alpha.1.23552.1 -name '*xml'`\r\n\r\nOn linux there are no `.xml` files there even though they exist in the nuget.\r\nOn macos:\r\n```\r\n/tmp/nuget-test/microsoft.internal.runtime.aspnetcore.transport/9.0.0-alpha.1.23552.1/ref/net9.0/Microsoft.Extensions.DependencyInjection.Abstractio\r\nns.xml\r\n/tmp/nuget-test/microsoft.internal.runtime.aspnetcore.transport/9.0.0-alpha.1.23552.1/ref/net9.0/Microsoft.Extensions.FileProviders.Physical.xml\r\n/tmp/nuget-test/microsoft.internal.runtime.aspnetcore.transport/9.0.0-alpha.1.23552.1/ref/net9.0/Microsoft.Extensions.Diagnostics.xml\r\n...\r\n```\r\n\r\nSpecifically this was hit when building `dotnet/dotnet`, and hit in `aspnetcore` build.\r\n[microsoft.internal.runtime.aspnetcore.transport.9.0.0-alpha.1.23552.1.nupkg.zip](https://github.com/NuGet/Home/files/13273223/microsoft.internal.runtime.aspnetcore.transport.9.0.0-alpha.1.23552.1.nupkg.zip)\r\n\r\nRenamed the .nupkg to .\r\n[restore.binlog.zip](https://github.com/NuGet/Home/files/13273233/restore.binlog.zip)\r\nnupkg.zip .\n\n### Verbose Logs\n\n_No response_"},{"Id":"33133268965","Type":"IssuesEvent","CreatedAt":"2023-11-06T19:15:01","Actor":"NikolaMilosavljevic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12988","RelatedDescription":"Opened issue \"Obsolete API error when building in source-build\" (#12988) at NuGet/Home","RelatedBody":"When building nuget.client repo in full product source-build we see the following error:\r\n\r\n`\r\n/vmr/src/nuget-client/src/NuGet.Core/NuGet.Frameworks/FrameworkException.cs(17,88): error SYSLIB0051: 'Exception.Exception(SerializationInfo, StreamingContext)' is obsolete: 'This API supports obsolete formatter-based serialization. It should not be called or extended by application code.' (https://aka.ms/dotnet-warnings/SYSLIB0051) [/vmr/src/nuget-client/src/NuGet.Core/NuGet.Frameworks/NuGet.Frameworks.csproj::TargetFramework=net8.0]\r\n`\r\n\r\nTo work around this, source-build process have been modifying Directory.Build.props during build to add a nowarn for SYSLIB0051. We are moving away from modifying sources during source-build and this needs to be fixed in the repo.\r\n\r\nI will be creating a PR to fix this issue."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-08T03:30:18.9194456Z","RunDurationInMilliseconds":1100}