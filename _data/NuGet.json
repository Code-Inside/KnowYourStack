{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12598739638","Type":"PullRequestEvent","CreatedAt":"2020-06-11T03:49:35","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8039","RelatedDescription":"Opened pull request \"Make statistical significant figures formatting culture-sensitive\" (#8039) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/8032\r\n\r\nAdds culture-awareness to string operations creating short numbers for Y-axis on graphs. Added culture cases to unit tests. Examples:\r\n\r\nfr-FR:\r\n![image](https://user-images.githubusercontent.com/14225979/84342945-33531000-abea-11ea-94c0-410558360bbe.png)\r\n\r\nen-US:\r\n![image](https://user-images.githubusercontent.com/14225979/84342961-3ea63b80-abea-11ea-80f8-9d4e900f3c5e.png)"},{"Id":"12596937452","Type":"PullRequestEvent","CreatedAt":"2020-06-10T22:22:30","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8029","RelatedDescription":"Merged pull request \"Added index for package dependencies table\" (#8029) at NuGet/NuGetGallery","RelatedBody":"- Implemented an up and down for creating indexes and removing indexes in the package dependencies table\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3220"},{"Id":"12596581970","Type":"IssuesEvent","CreatedAt":"2020-06-10T21:32:37","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8038","RelatedDescription":"Opened issue \"[Dependents] Add configurable cache time\" (#8038) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12595452021","Type":"IssuesEvent","CreatedAt":"2020-06-10T19:24:28","Actor":"chgill-MSFT","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8037","RelatedDescription":"Opened issue \"Further differentiate official Microsoft packages from packages with similar IDs and metadata\" (#8037) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\n\r\nBefore prefix reservation was introduced, several packages had either the same prefix or similar IDs to official Microsoft packages. Additional, the **Author** and **Copyright* fields are free text fields, so they can be made to replicate that of official Microsoft packages.\r\n\r\nA few customers have expressed confusion when finding such packages, especially those with relatively high download counts and similar metadata. The verified checkmark doesn't always seem to be a sufficient differentiator. Additionally, not all customers immediately know how to interpret the verified check mark.\r\n\r\nFor example, this is metadata from a non-Microsoft-owned **System.*** package that was made before the introduction of prefix reservations. It has over 100K downloads.\r\n\r\n<img src=\"https://user-images.githubusercontent.com/15097183/84304095-de8d9780-ab0c-11ea-8ddc-2896773ef59c.png\" width=\"200\">\r\n\r\n### Describe the solution you'd like\r\nThere needs to be a way to further (more obviously) differentiate Microsoft owned and non-Microsoft owned packages when package ID and metadata are similar.\r\n\r\nA quick solution would be to add an informational banner or flag to the package details page that specifically indicates \"Microsoft does not own or control this package.\"\r\n\r\nAdditionally, we should limit package author's ability to use \"Microsoft\" or affiliated names (i.e. Windows, GitHub, Xamarin) in the **Author** or **Copyright** fields. The **Author** field is particularly important in VS, where author is shown instead of owner."},{"Id":"12595440664","Type":"IssuesEvent","CreatedAt":"2020-06-10T19:23:13","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8036","RelatedDescription":"Opened issue \"[Symbols] Support removing snupkg validation error messages\" (#8036) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nA package whose symbol upload fails will result in a validation error message that cannot be removed unless you do one of the following:\r\n\r\n* Delete the .nupkg\r\n* Upload a new .snupkg that passes validation\r\n\r\nThis error message is only visible to the packages' owners. \r\n\r\n### Describe the solution you'd like\r\nPackage owners and admins should be able to remove the validation error if necessary.\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12598706492","Type":"PullRequestEvent","CreatedAt":"2020-06-11T03:42:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/9658","RelatedDescription":"Merged pull request \"Design for additional user wide configuration\" (#9658) at NuGet/Home","RelatedBody":"Design for https://github.com/NuGet/Home/issues/9394. \r\n\r\nImplementation at: https://github.com/NuGet/NuGet.Client/pull/3421"},{"Id":"12598697800","Type":"IssuesEvent","CreatedAt":"2020-06-11T03:41:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9431","RelatedDescription":"Closed issue \"DeterministicSourcePaths doesn't take NuGet source packages into account\" (#9431) at NuGet/Home","RelatedBody":"Transferred from https://github.com/dotnet/sdk/issues/11105\r\n\r\n**Version Used**: 5.0p1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a class library\r\n2. Add a package reference to xunit.assert.source\r\n3. `ContinuousIntegrationBuild`\r\n\r\n\r\n\r\n**Expected Behavior**:\r\nA source root should be created for the NuGet source package and the path to the source normalized/deterministic. \r\n\r\n**Actual Behavior**:\r\nThe source paths for the source package point to the NuGet directory and are not deterministic.\r\n\r\n\r\nPossible solution:\r\nNuGet has a variable for its package root. We can add a SourceRoot for that and that'd cover all source packages under that root:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <SourceRoot Include=\"$(NuGetPackageRoot)\" Condition=\"'$(NuGetPackageRoot)' != ''\" />\r\n  </ItemGroup>\r\n```\r\n"},{"Id":"12598341057","Type":"IssuesEvent","CreatedAt":"2020-06-11T02:38:38","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9668","RelatedDescription":"Opened issue \"NuGet.Protocol async methods should accept CancellationTokens\" (#9668) at NuGet/Home","RelatedBody":"When looking up versions and metadata for packages, we don't pass `CancellationTokens` to the NuGet.Protocol methods that do the more intensive work. Evaluate async method calls for improvement by honoring cancelled tokens. \r\n\r\nExample: [MultiSourcePackageMetadataProvider](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Clients/NuGet.PackageManagement.VisualStudio/PackageFeeds/MultiSourcePackageMetadataProvider.cs#L176)\r\nI don't understand why `GetVersionsAsync`  in all but 1 case (ClonedPackageSearchMetadata) returns an empty list, such as [PackageSearchMetadataV2Feed](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Model/PackageSearchMetadataV2Feed.cs#L132)\r\n\r\nA discussion about this improvement came about on another PR of mine to improve some `OperationCanceledException` handling https://github.com/NuGet/NuGet.Client/pull/3436#discussion_r437101184"},{"Id":"12598129653","Type":"IssuesEvent","CreatedAt":"2020-06-11T02:02:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6694","RelatedDescription":"Closed issue \"Adding ImageSharp (.NET Standard 1.1+) results in mind-boggling install experience\" (#6694) at NuGet/Home","RelatedBody":"# General\r\nWhen adding ImageSharp to a .NET Framework 4.7.2 project, I'm confronted by a number of monstrous looking dialogs that give the impression I'm importing the entire .NET Core framework plus the packing peanuts it came in.\r\n\r\nI [spoke with the vendor briefly](https://gitter.im/ImageSharp/General?at=5aaef27e458cbde5574cb535) and it wasn't clear who's at fault here. The project appears to correctly target [.NET Standard 1.1+](https://github.com/SixLabors/ImageSharp/blob/bfa854939d71b4bcfea3ff8f6b5ab0cb65186925/src/ImageSharp/ImageSharp.csproj#L8) ([with a few CoreFx items referenced](https://github.com/SixLabors/ImageSharp/blob/bfa854939d71b4bcfea3ff8f6b5ab0cb65186925/src/ImageSharp/ImageSharp.csproj#L43)).\r\n\r\nI expected most, if not all, of the .NET Core dependencies to be **silently** resolved **prior to download and install** as I'm targeting full desktop framework. As I don't see all these items in my output (or .exe.config) I assume they were thrown away after NuGet evaluation realized I have most of this stuff already. **What a waste of nearly 600MB of downloaded data.**\r\n\r\n# System\r\n```\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.6.1\r\nVisualStudio.15.Release/15.6.1+27428.2002\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\nInstalled Version: Professional\r\nNuGet Package Manager   4.6.0\r\n```\r\n\r\n# Try it!\r\n1. Start a .NET Framework 4.7.2+ console project\r\n2. Add the NuGet package ImageSharp (beta 2)\r\n3. Note these dialogs appear:\r\n\r\n![image](https://user-images.githubusercontent.com/475132/37572861-a053bfb4-2ace-11e8-8e61-d417036e2738.png)\r\n![image](https://user-images.githubusercontent.com/475132/37572900-388c9bde-2acf-11e8-9e2c-2e9407b0873e.png)"},{"Id":"12597500788","Type":"IssuesEvent","CreatedAt":"2020-06-11T00:01:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9394","RelatedDescription":"Closed issue \"NuGet should support multiple config files in %APPDATA%\\NuGet directory\" (#9394) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used: VS UI\r\nNuGet version: 5.6.0.6489\r\nVS version: 16.7\r\nWorked before?: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. Unzip [SomeOther.zip](https://github.com/NuGet/Home/files/4430294/SomeOther.zip)\r\n2. Place SomeOther.config in %APPDATA%\\NuGet. This config file declares a single package source named \"IssueRepro\"\r\n3. Start VS and open/create some project\r\n4. Open NuGet Package Manager\r\n5. Expand \"Package source\" combo box\r\n\r\n**Expected:** IssueRepro source is one of the options.\r\n\r\n**Actual:** IssueRepro source is not shown as an option.\r\n\r\n**Workarounds**:\r\n1. Place the file in %ProgramFiles(x86)%\\NuGet\\Config instead. \r\n1. Merge the IssueRepro package source into %APPDATA%\\NuGet\\NuGet.Config's list of package sources.\r\n\r\nNote that what I really care about is fallback folders, but I'm using package sources for ease of repro.\r\n\r\n## Reasoning\r\nThe XAML and WinForms teams want to allow control library installers to add user-specific NuGet fallback folders by having their SDK installers drop config files in %APPDATA%\\NuGet. On uninstall this file would be deleted.\r\n\r\nWe considered two alternatives which I mentioned as workarounds above:\r\n1. Require SDK installers to drop config files in %ProgramFiles(x86)%\\NuGet\\Config instead. However, we've gotten feedback from control vendors that they would like the option of installing without elevation which prevents the installer from being able to write to this directory.\r\n2. Require SDK installers to modify the one %APPDATA%\\NuGet\\NuGet.config file. However this seems error prone.\r\n\r\n@rrelyea @zivkan @aortiz-msft @mgoertz-msft"},{"Id":"12596383282","Type":"IssuesEvent","CreatedAt":"2020-06-10T21:08:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8221","RelatedDescription":"Closed issue \"Test:  flaky VS unit tests\" (#8221) at NuGet/Home","RelatedBody":"12 unit tests fail on Windows like so:\r\n```\r\nMicrosoft.VisualStudio.Services.Client.AccountManagement.AccountStorageException : There was a problem executing within the global mutex 'RegistryAccountStore'.\\r\\n---- System.IO.IOException : Cannot create a stable subkey under a volatile parent key.\\r\\n\r\n\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.ExecuteInGlobalMutex[TResult](String globalMutexName, Func`1 func)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.ExecuteActionInGlobalMutex(String globalMutexName, Action action)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryAccountStore..ctor(String registryRoot, String globalMutexName, String instanceName)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager..ctor(IAccountStore store, String instanceName)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManager.<>c.<.cctor>b__43_0()\r\n   at System.Lazy`1.CreateValue()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.VSAccountProvider..ctor(TryGetSelfAsync self, TryGetSelfAsync azureRMSelf, GetWrappedItemsFromCache cacheLists, AcquireAdalTokenSilently acquireAdalTokenSilently, AcquireAdalTokenWithUI acquireAdalTokenWithUI, SessionTokenStorage sessionTokenStorage, ILogger logger)\r\n   at Castle.Proxies.VSAccountProviderProxy..ctor(IInterceptor[] , String instanceName)\r\n----- Inner Stack Trace -----\r\n   at Microsoft.Win32.RegistryKey.Win32Error(Int32 errorCode, String str)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKeyInternal(String subkey, RegistryKeyPermissionCheck permissionCheck, Object registrySecurityObj, RegistryOptions registryOptions)\r\n   at Microsoft.Win32.RegistryKey.CreateSubKey(String subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions options)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryAccountStore.GetOrCreateRootKey(String subKey)\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.RegistryAccountStore.<.ctor>b__30_0()\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.<>c__DisplayClass9_0.<ExecuteActionInGlobalMutex>b__0()\r\n   at Microsoft.VisualStudio.Services.Client.AccountManagement.AccountManagementUtilities.ExecuteInGlobalMutex[TResult](String globalMutexName, Func`1 func)\r\n```\r\n\r\nThe tests are:\r\n```\r\nGet_WhenEmptyKeychain_ThenPromptForCredentials\r\nGet_WhenEmptyKeychainAndNonInteractive_ThenThrowsException\r\nGet_WhenIsProxyRequest_ThenReturnsNull\r\nGet_WhenMultipleAccountsInKeychainAndTenant_ThenPrompsUserForAccount\r\nGet_WhenMultipleAccountsInKeychainNoneInTenant_ThenPromptsUserForAccount\r\nVerifyContructorSetsId\r\nGet_WhenMultipleAccountsInKeychainButOneInTenant_ThenReturnsThatToken\r\nGet_WhenNullUri_ThenThrowsArgumentException\r\nGet_WhenOneAccountInKeychain_ThenGetTokenFromAccount\r\nGet_WhenOneAccountInKeychainWithoutAccessOnToTenantRetry_ThenPromptsUser\r\nGet_WhenUriNotHTTPS_ThenReturnsNotApplicable\r\nGet_WhenUriNotVSO_ThenReturnsNull\r\n```"},{"Id":"12594772636","Type":"IssuesEvent","CreatedAt":"2020-06-10T18:08:59","Actor":"tmat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9667","RelatedDescription":"Opened issue \"Include restoring of symbols in dotnet restore\" (#9667) at NuGet/Home","RelatedBody":"`dotnet restore` currently does not have a switch that would restore PDBs published on symbol servers (e.g. via snupkg) to nuget package cache.\r\nThere are at least two scenarios for which such feature would be valuable:\r\n\r\n1) Restoring local packages\r\n\r\nScenario steps:\r\n  - Clone repository that has Source Link enabled on one machine, make changes, push the changes to source server, build and pack.\r\n  - Copy the resulting packages over to another machine.\r\n  - On this machine restore a project that depends on these packages, has local directory as a feed in its nuget.config.\r\n  - F5 in VS/VS Code and able to step into the source code of the package.\r\n\r\n2) Offline development\r\n\r\nScenario steps:\r\n  - Clone repository and restore packages.\r\n  - Disconnect from the network.\r\n  - Build and debug your application and its dependencies.\r\n\r\nThe above scenarios should work regardless of whether PDBs are included in nupkg or in a separate snupkg.\r\n \r\n** Blockers **\r\n\r\nFixing https://github.com/dotnet/sdk/issues/1458: “New project system doesn't copy PDBs from packages” is a prerequisite for the above scenarios, but it only works if the symbols are in the nupkg. This fix would make sure that when the PDB is in the package cache next to the dll it will get copied to the output directory, where the debugger can find it.\r\n\r\n** Proposal **\r\n\r\nAdd `--symbols:[all|local]` switch to `dotnet restore` with default value being `local`. \r\n\r\nThis would turn on symbol restore from local directories (`local`) and symbol servers (`all` = local + servers). The list of symbol servers would be listed in nuget.config. By default if nuget.org feed is listed nuget would also include nuget.org symbol server. \r\n\r\nWhen restoring packages from a local feed NuGet would check if there is a snupkg next to each restored nupkg. If so it should restore the package to the same directory it restored the corresponding nupkg (effectively merging the content of both packages). Since snupkg directory layout mirrors the corresponding nupkg the result would the same layout in the nuget cache as it would be if the nupkg contained the PDBs.\r\n\r\nWhen restoring packages from remote feeds and `--symbols:all` is specified, nuget would pull PDBs from the symbol server. The restore operation would read the debug directory entry of each DLL included in the restored package that doesn't have PDB next to it already and query the configured symbol servers for the corresponding PDB using [Simple Symbol Query Protocol](https://github.com/dotnet/symstore/blob/master/docs/specs/Simple_Symbol_Query_Protocol.md). It would then store the PDB next to the dll in the package cache. Again the result would be the same as if the package contained the PDB.\r\n\r\n** Further possible improvements (lower priority) ** \r\n\r\nSome scenarios, like crash dump debugging require PDBs to be present in the local symbol cache. The debuggers are not aware of NuGet cache and thus having PDBs only in the nuget cache isn't sufficient. It would however be possible for `dotnet restore --symbols` to also link the downloaded PDBs to debugger cache to make this scenario work. If an additional argument is passed, say `dotnet restore --symbols --debug-cache <path>` restore would link the downloaded PDBs to the specified debugger cache directory. \r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"12594307082","Type":"IssuesEvent","CreatedAt":"2020-06-10T17:19:14","Actor":"chgill-MSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9666","RelatedDescription":"Opened issue \"Move PMC functionality to new VS terminal\" (#9666) at NuGet/Home","RelatedBody":"In VS 16.6, we have the ability to spawn our own terminal instance in VS. Instead of having a PMC component separate from VS terminal instances, we can consolidate the experience by spawning a terminal instance instead and running PMC commands there."},{"Id":"12593666295","Type":"IssuesEvent","CreatedAt":"2020-06-10T16:14:54","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9665","RelatedDescription":"Opened issue \"NuGet.Build.Tasks.Console binding redirects are broken\" (#9665) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): 16.7.0-preview-20308-01+584ca5f11\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install latest internal preview of Visual Studio\r\n2. Restore packages with `RestoreEnableStaticGraphEvaluation` set to `true`\r\n\r\n`NuGet.Build.Tasks.Console.exe` crashes because [the binding redirects](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/App.config) were updated in MSBuild but not in NuGet.\r\n\r\n## Workaround\r\nUpdate your local `NuGet.Build.Tasks.Console.exe.config` to this:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <runtime>\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcserver-element -->\r\n    <gcServer enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gccpugroup-element -->\r\n    <GCCpuGroup enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/thread-useallcpugroups-element -->\r\n    <Thread_UseAllCpuGroups enabled=\"true\" />\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <!-- Use codeBase entries for MSBuild assemblies so that the NGen'd native images will be used -->\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Tasks.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Tasks.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Utilities.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Buffers\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\r\n        <codeBase version=\"4.0.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Buffers.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Collections.Immutable\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-1.2.3.0\" newVersion=\"1.2.3.0\" />\r\n        <codeBase version=\"1.2.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Collections.Immutable.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Memory\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.1.1\" newVersion=\"4.0.1.1\" />\r\n        <codeBase version=\"4.0.1.1\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Memory.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Numerics.Vectors\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.4.0\" newVersion=\"4.1.4.0\" />\r\n        <codeBase version=\"4.1.4.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Numerics.Vectors.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Resources.Extensions\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" />\r\n        <codeBase version=\"4.0.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Resources.Extensions.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.6.0\" newVersion=\"4.0.6.0\" />\r\n        <codeBase version=\"4.0.6.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Runtime.CompilerServices.Unsafe.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Threading.Tasks.Dataflow\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.6.3.0\" newVersion=\"4.6.3.0\" />\r\n        <codeBase version=\"4.6.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Threading.Tasks.Dataflow.dll\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime>\r\n  <startup>\r\n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.7.2\" />\r\n  </startup>\r\n</configuration>\r\n```\r\n\r\n\r\n"},{"Id":"12586703844","Type":"IssuesEvent","CreatedAt":"2020-06-10T03:32:48","Actor":"cppchuff","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9664","RelatedDescription":"Opened issue \"can't work in vs2019 it can't find namespace\" (#9664) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nMicrosoft.Web.WebView2.Wpf\r\nNuGet version (x.x.x.xxx):\r\n0.9.538\r\ndotnet.exe --version (if appropriate):\r\n.Net Framework 4.6.2\r\nVS version (if appropriate):\r\nVS2019\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nwin10 v1903\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\ninstall Microsoft.Web.WebView2.Wpf\r\n2.\r\nadd \r\nxmlns:wv2=\"clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf\"\r\ninto Mainwindow.xaml\r\n3.run report erro\r\n严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS0234\t命名空间“Microsoft”中不存在类型或命名空间名“Web”(是否缺少程序集引用?)\tFairsenseUI\tC:\\Users\\fly\\source\\repos\\FairsenseUI\\FairsenseUI\\obj\\Debug\\MainWindow.g.cs\t13\t活动\r\nand\r\n严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tXLS0418\t未找到程序集“Microsoft.Web.WebView2.Wpf”。请确保不缺少程序集引用并且已生成你的项目和所有引用的程序集。\tFairsenseUI\tMainWindow.xaml\t8\t\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"12585937467","Type":"IssuesEvent","CreatedAt":"2020-06-10T01:09:02","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9663","RelatedDescription":"Opened issue \"OutputConsoleLogger should not access main thread in constructor.\" (#9663) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): _VS UI/Package Manager Console_\nNuGet version (x.x.x.xxx): _Latest_\ndotnet.exe --version (if appropriate): \nVS version (if appropriate): _Latest_\nOS version (i.e. win10 v1607 (14393.321)): _Any_\nWorked before? If so, with which NuGet version: N/A\n\n## Detailed repro steps so we can see the same problem\n\nOutputConsoleLogger is accessing main thread during construction, which is not a good pattern. As it is MEF-composed object, we cannot convert to \"private-ctor-public-async-factory\" model, so we should lazily initialize OutputConsole outside the constructor.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-11T05:30:40.3648135Z","RunDurationInMilliseconds":1843}