{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12930535419","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:38","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7652","RelatedDescription":"Closed issue \"Add support for vulnerabilities to Catalog2Registration\" (#7652) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12930534315","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:28","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7651","RelatedDescription":"Closed issue \"Add support for vulnerabilities to Db2Catalog\" (#7651) at NuGet/NuGetGallery","RelatedBody":"- Fetch vulnerabilities from DB\r\n- Update code to put vulnerabilities in catalog"},{"Id":"12930534174","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:27","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7649","RelatedDescription":"Reopened issue \"Newly pushed packages that are vulnerable should be marked vulnerable on upload/push\" (#7649) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12930533206","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:18","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7649","RelatedDescription":"Closed issue \"Newly pushed packages that are vulnerable should be marked vulnerable on upload/push\" (#7649) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12929473682","Type":"IssuesEvent","CreatedAt":"2020-07-16T22:49:44","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8111","RelatedDescription":"Opened issue \"Add functional test for \"title-desc\" sorting\" (#8111) at NuGet/NuGetGallery","RelatedBody":"Ordering by \"title-desc\" fails the functional tests since the top returned results by the search service contain Unicode characters. \n\nI have tried sorting using \"Ordinal\", \"OrdinalIgnoreCase\", \"InvariantCulture\" and \"InvariantCultureIgnoreCase\" and none of them sorted the results the same way the search service returned them."},{"Id":"12928795632","Type":"IssuesEvent","CreatedAt":"2020-07-16T21:21:34","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8086","RelatedDescription":"Closed issue \"[Catalog2Monitoring] Improve cursor logging\" (#8086) at NuGet/NuGetGallery","RelatedBody":"See https://github.com/NuGet/NuGet.Services.Metadata/pull/799"},{"Id":"12926822376","Type":"IssuesEvent","CreatedAt":"2020-07-16T17:54:28","Actor":"jkonicki","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8110","RelatedDescription":"Opened issue \"Unable to publish packages to nuget with \"Kubernetes\" anywhere in package name\" (#8110) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWhen trying to publish, with nuget cli, a new package under our reserved prefix `Steeltoe` we are getting a message that \"This package ID has been reserved.\" message.  \r\n\r\nThis appears to only happen to our package with the word `Kubernetes` in the package name.  \r\n```\r\n“Steeltoe.Common.Kubernetes.3.0.0-m3.nupkg' already exists at feed 'https://www.nuget.org/api/v2/package'.\r\n2020-07-14T19:16:15.4087082Z This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID.”\r\n```\r\n\r\nI excluded this specific package and all other packages published without a problem, until it got to another package with the work `Kubernetes` in it. The same \"This package ID has been reserved\" message came up.   \r\n```\r\n2020-07-14T20:00:22.2858563Z Package 'D:\\a\\r1\\a\\_SteeltoeOSS.steeltoe\\Packages\\Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.nupkg' already exists at feed 'https://www.nuget.org/api/v2/package'.\r\n2020-07-14T20:00:22.2867646Z This package ID has been reserved. Please request access to upload to this reserved namespace from the owner of the reserved prefix, or re-upload the package with a different ID.\r\n2020-07-14T20:00:22.2957046Z Pushing Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.snupkg to 'https://www.nuget.org/api/v2/symbolpackage'...\r\n2020-07-14T20:00:22.2958465Z   PUT https://www.nuget.org/api/v2/symbolpackage/\r\n2020-07-14T20:00:22.3862872Z   NotFound https://www.nuget.org/api/v2/symbolpackage/ 90ms\r\n2020-07-14T20:00:22.6729059Z nuget : Response status code does not indicate success: 404 (Not Found).\r\n2020-07-14T20:00:22.6730012Z At D:\\a\\_temp\\94375afb-439d-46a9-bff8-2ce95a337705.ps1:7 char:6\r\n2020-07-14T20:00:22.6731312Z +      nuget push $_ *** -So ...\r\n2020-07-14T20:00:22.6732742Z +      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2020-07-14T20:00:22.6824420Z     + CategoryInfo          : NotSpecified: (Response status...04 (Not Found).:String) [], RemoteException\r\n2020-07-14T20:00:22.6828244Z     + FullyQualifiedErrorId : NativeCommandError\r\n```\r\nWhen I excluded all Kubernetes named packages, publishing completed, but obviously without all the packages I need. \r\n\r\n\r\n**>>> Is there some sort of reserved term for `*Kubernetes*` for NuGet?  If yes, why? and how do I get approval?  Or is there some other issue we are not seeing?**\r\n\r\nThanks.\r\n\r\n\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. nuget push D:\\a\\r1\\a\\_SteeltoeOSS.steeltoe\\Packages\\Steeltoe.Extensions.Configuration.KubernetesBase.3.0.0-m3.nupkg $(NuGetApiKey) -Source https://api.nuget.org/v3/index.json -SkipDuplicate -Verbosity detailed\r\n\r\n### Expected behavior\r\nThe Package should publish if it is using my prefix no matter what follows.\r\n\r\n"},{"Id":"12926189931","Type":"PullRequestEvent","CreatedAt":"2020-07-16T16:51:54","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8109","RelatedDescription":"Opened pull request \"Add new column name \"EmbeddedReadmeFileType\" in Package table \" (#8109) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* Add new column name \"EmbeddedReadmeFileType\" to Package table\r\n\r\nraw sql\r\n Sql(\"ALTER TABLE [dbo].[Packages] ADD EmbeddedReadmeFileType INT NOT NULL\");\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"},{"Id":"12926151239","Type":"PullRequestEvent","CreatedAt":"2020-07-16T16:48:08","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8104","RelatedDescription":"Closed pull request \"3268 add column EmbeddedReadmeFileType to Package tables\" (#8104) at NuGet/NuGetGallery","RelatedBody":"Summary of the changes (in less than 80 characters):\r\n\r\n* add one column of enum EmbeddedReadmeFileType to package table\r\n\r\nraw sql would be like here: \r\n\r\n            Sql(\"ALTER TABLE [dbo].[Packages] ADD EmbeddedReadmeFileType INT NOT NULL  DEFAULT 0\");\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/123"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12930269854","Type":"IssuesEvent","CreatedAt":"2020-07-17T00:55:52","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9812","RelatedDescription":"Opened issue \"FileAndForget posts a new event for every point of usage\" (#9812) at NuGet/Home","RelatedBody":"## Details about Problem\n\nFor fire-and-forget asynchronous code, we are currently using VSTelemetryHelpers.FireAndForget helper to log any failures from detached async code. This method is implements so that there is a specific event for every point of failure.\n\nFor GDPR categorization and ease of investigating those failures, it may be useful to always post same event, and carry additional context information in description and exception stack trace."},{"Id":"12929553209","Type":"IssuesEvent","CreatedAt":"2020-07-16T23:01:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9811","RelatedDescription":"Closed issue \"Create VS API: GetSourcesAsync\" (#9811) at NuGet/Home","RelatedBody":"Request from https://github.com/dotnet/roslyn/pull/46022/files#r456003371\r\n\r\nCurrently Roslyn calls `IVsPackageSourceProvider.GetSources`, which gets the sources for the current solution. I don't believe it takes into account additional sources that can be set for PackageReference projects. Therefore, we should consider if the new API is in `INuGetProjectService` and start returning per-project sources, or create a new `INuGetSolutionService` for a more equivalent API."},{"Id":"12929519604","Type":"IssuesEvent","CreatedAt":"2020-07-16T22:56:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9811","RelatedDescription":"Opened issue \"Create VS API: GetSourcesAsync\" (#9811) at NuGet/Home","RelatedBody":"Request from https://github.com/dotnet/roslyn/pull/46022/files#r456003371\r\n\r\nCurrently Roslyn calls `IVsPackageSourceProvider.GetSources`, which gets the sources for the current solution. I don't believe it takes into account additional sources that can be set for PackageReference projects. Therefore, we should consider if the new API is in `INuGetProjectService` and start returning per-project sources, or create a new `INuGetSolutionService` for a more equivalent API."},{"Id":"12928983429","Type":"IssuesEvent","CreatedAt":"2020-07-16T21:43:41","Actor":"tmat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9810","RelatedDescription":"Opened issue \"SourceRoots not set correctly from NuGetPackageFolders\" (#9810) at NuGet/Home","RelatedBody":"The generated props file for the project (`git-test1\\obj\\git-test1.csproj.nuget.g.props`) contains:\r\n\r\n```xml\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\<user-name>\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder</NuGetPackageFolders>\r\n  </PropertyGroup>\r\n...\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <SourceRoot Include=\"$([MSBuild]::EnsureTrailingSlash($(NuGetPackageFolders)))\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis adds a **single** item to SourceRoot with ItemSpec = `C:\\Users\\Tomas\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`. Instead, we need 2 items: `C:\\Users\\<user-name>\\.nuget\\packages\\` and `C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`.\r\n\r\nPossible fix:\r\n```xml\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n     <_NuGetPackageFolders Include=\"$(NuGetPackageFolders)\" NormalizedPath=\"$([MSBuild]::EnsureTrailingSlash(%(Identity)))\" />\r\n    <SourceRoot Include=\"@(_NuGetPackageFolders->'%(NormalizedPath)')\" />\r\n  </ItemGroup>\r\n```"},{"Id":"12927572938","Type":"IssuesEvent","CreatedAt":"2020-07-16T19:11:18","Actor":"KKacer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9809","RelatedDescription":"Opened issue \"Random behavior of Nuget on not containing content files, and some strange errors\" (#9809) at NuGet/Home","RelatedBody":"I used something like the code below in my .csproj file, but still Nuget is placing these contents in its generated package:\r\n\r\n      <ItemGroup>\r\n        <Content Include=\"build\\**\" IncludeInPackage=\"false\" Pack=\"false\" />\r\n      </ItemGroup>\r\n\r\n--------\r\n\r\nWant those content files just for the usage in the current source, and don't want them to be included in the nuget package.\r\n\r\nThis is a .Net Core project, and don't like to add a nuspec file as I guess it is not needed.\r\n\r\nIt seems a random behavior, cause I have hundreds of packages in my local repository, checked all generated by the same approach and seems all were correct.\r\nSuch difficulties and issues happened tens of times with other packages in different times, which solved them by dirty tricks like clearing obj/bin, close/restart VS, restart win, changing the project version, and some other things that I may not remember now.\r\n\r\nUnfortunately about the same package I got some strange errors which\r\nbut the problem is not about the package itself.\r\n\r\n**The errors:**\r\n\r\n------------------\r\n\r\n**Error 1:**\r\n\r\n    =====================\r\n    7/16/2020 10:13:11 AM\r\n    LimitedFunctionality\r\n    Microsoft.VisualStudio.ProjectSystem.ProjectException: \r\n    Failed to create the item \r\n    \"C:\\Users\\Pc\\.nuget\\packages\\xxxx.emailing\\0.8.5\\contentFiles\\any\\netstandard2.1\\package.csproj\" \r\n    ---> Microsoft.Assumes+InternalErrorException: \r\n    ProjectTree is in the invalid state: project item 'package.csproj' with flags:\r\n    (ProjectTreeFlags: ProjectImportImplicit FileOnDisk ProjectImport FileSystemEntity) was found under '' with flags(ProjectTreeFlags: BubbleUp DisableAddItemFolder VirtualFolder).\r\n    \r\n       at Microsoft.Assumes.Fail(String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       --- End of inner exception stack trace ---\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(Exception innerException, String unformattedMessage, Object[] args)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(Exception innerException, String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.HandleAddedItems(IProjectTree tree, IImmutableDictionary`2 projectData, IProjectChangeDescription change, IEnumerable`1 addedItems, ConfiguredProjectExports configuredProjectExports)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.OnProjectSubscriptionChanged(IProjectTree originalTree, ConfiguredProjectExports configuredProjectExports, PhysicalProjectTreeInputData updateInput, CancellationToken cancellationToken)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n       at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>g__action|0()\r\n       at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )\r\n    ===================\r\n\r\n**Error 2:**\r\nAfter doing some of those dirty tricks and playing more with the code, the error changed a bit\r\n\r\n```\r\n    =====================\r\n    7/16/2020 12:29:30 PM\r\n    LimitedFunctionality\r\n    Microsoft.VisualStudio.ProjectSystem.ProjectException: \r\n    Failed to create the item \"C:\\Users\\Pc\\.nuget\\packages\\xxxx.emailing\\0.8.7\\contentFiles\\any\\netstandard2.1\\build.targets\" ---> Microsoft.Assumes+InternalErrorException: ProjectTree is in the invalid state: \r\n    project item 'build.targets' with flags:\r\n    (ProjectTreeFlags: FileOnDisk ProjectImport FileSystemEntity) \r\n    was found under '' with flags(ProjectTreeFlags: \r\n    BubbleUp DisableAddItemFolder VirtualFolder).\r\n       at Microsoft.Assumes.Fail(String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       --- End of inner exception stack trace ---\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(Exception innerException, String unformattedMessage, Object[] args)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(Exception innerException, String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.HandleAddedItems(IProjectTree tree, IImmutableDictionary`2 projectData, IProjectChangeDescription change, IEnumerable`1 addedItems, ConfiguredProjectExports configuredProjectExports)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.OnProjectSubscriptionChanged(IProjectTree originalTree, ConfiguredProjectExports configuredProjectExports, PhysicalProjectTreeInputData updateInput, CancellationToken cancellationToken)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n       at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>g__action|0()\r\n       at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )\r\n    ===================\r\n```\r\nHad hundreds of different versions of nuget packages in my local repository, and everything was working perfectly, once I was playing and updating some of the nugets the happened.\r\n\r\nSurprisingly, there was nothing on the internet.\r\n\r\nThis is one of the most irritating errors I got, cause don't know, and can't guess what really may happened and what could be the issue, the most probable solution remained that I can guess could be to restart windows, after clearing every possible cache.\r\nDon't know Nuget from where and how generate those wrong contents repeatedly.\r\n\r\nEarlier there was a project that I was forced to start it from the ground up.\r\nFor another project Nuget repeatedly was setting the location of the contents somewhere else, and got forced to add a Nuspec file to let it know where is the exact target location though I set it ealier in the .csproj file.\r\n\r\nI could have made more issue/bug report here, but now was able to post one after seeing some kind of behavior repeatedly which these are really irritating.\r\n\r\nUsing Visual Studio latest version, built the packages via VS build menu.\r\nProjects are as simple as:\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n```\r\n  <PropertyGroup>\r\n    <!-- <TargetFrameworks>netcoreapp3.1;netstandard2.0;netstandard2.1;netcoreapp3.0;net472</TargetFrameworks> -->\r\n    <TargetFramework>netstandard2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n// with some contents like the ones posted earlier.\r\n```"},{"Id":"12927563832","Type":"IssuesEvent","CreatedAt":"2020-07-16T19:10:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8446","RelatedDescription":"Closed issue \"nuget list can show multiple version of same project\" (#8446) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe):\r\n\r\nNuGet version (x.x.x.xxx):5.1.0.6013\r\n\r\nWorked before? If so, with which NuGet version: unknown\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. nuget.exe list -source <link>\r\n\r\nAccording to nuget help list, list should only display the latest version of each package\r\nActual: some packages are listed multiple times with different version\r\n...\r\n\r\n## Other suggested things\r\nIf I run the above command with verbose, I can see that nuget list does a GET on pages vs the entire thing. This means that it lists the latest version on page n, then list the latest version on page n+1 which may include the same package name\r\n\r\n### Verbose Logs\r\n```\r\n...\r\nPowerToolsPresentation\r\n 1.25.5\r\n Common UI/Presentation logic between different Power Tools applications\r\n\r\n  GET https://artifactory.prod.tableautools.com/artifactory/api/nuget/power-tools-nuget-local/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm=''&targetFramework=''&includePrerelease=false&$skip=30&$top=30&semVerLevel=2.0.0\r\n  OK https://artifactory.prod.tableautools.com/artifactory/api/nuget/power-tools-nuget-local/Search()?$filter=IsLatestVersion&$orderby=Id&searchTerm=''&targetFramework=''&includePrerelease=false&$skip=30&$top=30&semVerLevel=2.0.0 15ms\r\nPowerToolsPresentation\r\n 2019.3.18\r\n Common UI/Presentation logic between different Power Tools applications\r\n...\r\n```\r\n"},{"Id":"12927429821","Type":"IssuesEvent","CreatedAt":"2020-07-16T18:56:37","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9808","RelatedDescription":"Opened issue \"NuGet.Client libraries labeling should not use rtm, but rc instead\" (#9808) at NuGet/Home","RelatedBody":"`rtm` has a confusing meaning, given that it suggests it's a stable version, but the fact that the versioning has a label makes it a prerelease. \r\n\r\nToward the end of the previews, we frequently change our labeling from previews to RTM. We should change it to rc instead."},{"Id":"12927356949","Type":"IssuesEvent","CreatedAt":"2020-07-16T18:49:09","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9807","RelatedDescription":"Opened issue \"Spike: Explore speeding up nupkg extraction using mmap/CreateFileMapping\" (#9807) at NuGet/Home","RelatedBody":"I was playing around with tarball extraction in Rust, trying to speed it up, when someone suggested using [`mmap`](https://en.wikipedia.org/wiki/Mmap) for the destination files before writing to them (Windows version is [`CreateFileMapping`](https://docs.microsoft.com/en-us/windows/win32/memory/creating-a-file-mapping-object)). This resulted in a 4-5x speedup of a 7.5mb tarball containing 65k files -- going from 17-22s extraction times to a mere 3.5-4.5s.\r\n\r\nI believe it's worth exploring doing this ourselves for .nupkg extraction during Restore -- it's unclear whether the extraction benefit is mainly for many small files, or whether fewer large files can still take advantage of this, but it's worth a shot anyway, for that kind of improvement!"},{"Id":"12927150706","Type":"IssuesEvent","CreatedAt":"2020-07-16T18:27:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9565","RelatedDescription":"Closed issue \"Replay the warnings for LegacyPackageReference projects when a project no-ops in partial restore \" (#9565) at NuGet/Home","RelatedBody":"A follow up to https://github.com/NuGet/Home/issues/9513. \r\n\r\nPR: https://github.com/NuGet/NuGet.Client/pull/3391\r\nSpec: https://github.com/NuGet/Home/pull/9564\r\n\r\nIn legacy package reference projects, it's NuGet that writes the warnings and errors to the error list. \r\n\r\nAt the beginning of every restore operation in VS we clear the NuGet entries from the error list and add them at the end. \r\nThis creates unnecessary churn.\r\n\r\nDue to this reason only, we cannot enable the optimization mentioned above in legacty projects.\r\n\r\nThis issue covers fixing that scenario."},{"Id":"12926814327","Type":"IssuesEvent","CreatedAt":"2020-07-16T17:53:37","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9597","RelatedDescription":"Closed issue \"dotnet nuget add source doesnt' exist...\" (#9597) at NuGet/Home","RelatedBody":"From @Tyler-IN , issue moved from https://github.com/dotnet/docs/issues/18476\r\n\r\n> `dotnet add nuget source \"https://repo.url/here/index.json\" --name wtf --username wtf --password wtf --store-password-in-clear-text --configfile nuget.config`\r\n\r\n```\r\nRequired command was not provided.\r\nUsage: dotnet add [options] <PROJECT> [command]\r\n\r\nArguments:\r\n  <PROJECT>   The project file to operate on. If a file is not specified, the command will search the current directory for one.\r\n\r\nOptions:\r\n  -h, --help   Show command line help.\r\n\r\nCommands:\r\n  package <PACKAGE_NAME>     Add a NuGet package reference to the project.\r\n  reference <PROJECT_PATH>   Add a project-to-project reference to the project.\r\n```\r\n\r\nHave .NET Core SDKs for 2.0 up to 3.1.2 installed.\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a08a1fa5-6267-3122-a377-5ba5b8503a07\r\n* Version Independent ID: 1d2f0343-bda9-7e7a-34a9-f097635ff155\r\n* Content: [dotnet nuget add source command - .NET Core CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-nuget-add-source#feedback)\r\n* Content Source: [docs/core/tools/dotnet-nuget-add-source.md](https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-nuget-add-source.md)\r\n* Product: **dotnet-core**\r\n* Technology: **dotnet-cli**\r\n* GitHub Login: @tdykstra\r\n* Microsoft Alias: **tdykstra**\r\n"},{"Id":"12926757785","Type":"IssuesEvent","CreatedAt":"2020-07-16T17:47:56","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9548","RelatedDescription":"Closed issue \"Cannot sign package using NuGet.Commands and .NET Core 3.1 on Windows 10\" (#9548) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.Commands package\r\n\r\nNuGet version (x.x.x.xxx): 5.5.1\r\n\r\ndotnet.exe --version (if appropriate): 3.1.201\r\n\r\nVS version (if appropriate): 16.5.4\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 v2004 (19041.208)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nAttached sample project uses NuGet.Commands to sign a package using a provided certificate. When compiled for .NET Framework 4.8 and run on Windows 10, the package is successfully signed (albeit with a warning because I was using a self-signed certificate):\r\n\r\n```\r\n.\\NuGetPackageSigner.exe \"C:\\Temp\\TestPackage.0.0.1.nupkg\" \"<CERT THUMBPRINT>\"\r\nwarn: NuGetPackageSigner.Program[0]\r\n      NU3018: A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.\r\ninfo: NuGetPackageSigner.Program[0]\r\n      Signed package can be found in C:\\Temp\\NuGetPackageSigner\\bin\\Debug\\net48\\Signed.\r\n```\r\n\r\nWhen the same project is compiled for .NET Core 3.1 and run on Windows 10, a failure occurs:\r\n\r\n```\r\n.\\NuGetPackageSigner.exe \"C:\\Temp\\TestPackage.0.0.1.nupkg\" \"<CERT THUMBPRINT>\"\r\nwarn: NuGetPackageSigner.Program[0]\r\n      NU3018: A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.\r\nfail: NuGetPackageSigner.Program[0]\r\n      The method or operation is not implemented.\r\nwarn: NuGetPackageSigner.Program[0]\r\n      NuGet returned status code 1.\r\n```\r\n\r\nPresumably this is caused by a .NET Standard API not being implemented in .NET Core. The NuGet logger does not provide enough information to identify which method is actually throwing the error.\r\n\r\n## Other suggested things\r\n\r\n### Sample Project\r\n\r\nSample project is attached.\r\n\r\n[NuGetPackageSigner.zip](https://github.com/NuGet/Home/files/4614640/NuGetPackageSigner.zip)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-17T05:30:41.4417846Z","RunDurationInMilliseconds":2029}