{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32661726427","Type":"IssuesEvent","CreatedAt":"2023-10-18T14:55:16","Actor":"levicki","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12950","RelatedDescription":"Opened issue \"Cannot install, uninstall, or update ANY packages if one NuGet source is unreachable\" (#12950) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nConsider this scenario:\r\n\r\nNuGet sources configured in Visual Studio:\r\n1. nuget.org (https://api.nuget.org/v3/index.json)\r\n2. GitHub (personal repo https://nuget.pkg.github.com/l33tc0d3r/index.json, needs authentication)\r\n3. CONTOSODEV (corporate server \\\\CONTOSODEV\\\\NuGet, needs VPN connection)\r\n\r\nSource mappings configured in Visual Studio:\r\n|Package|Source|\r\n|---|---|\r\n| com.contoso.* | CONTOSODEV |\r\n| l33tc0d3r.* | GitHub |\r\n| * | nuget.org |\r\n\r\nPackages installed in the open project:\r\n - com.contoso.discombobulator\r\n - l33tc0d3r.freakui3\r\n - Newtonsoft.Json\r\n\r\nNow when you want to update Newtonsoft.Json you can't if:\r\n\r\n1. You aren't connected to the corporate VPN\r\n2. You don't provide credentials for private GitHub packages repo (VS does not remember password across sessions*)\r\n\r\nYou cannot even remove the existing packages or install any new ones from nuget.org which should be possible even without having explicit mappings.\r\n\r\nI do understand the compatibility and security concerns if you were to fall back to different package repository, but this is beyond ridiculous and user-hostile behavior. If a package was installed from nuget.org, it's maintenance should not be affected by other sources being temporarily inaccessible.\n\n### Desired Behavior\n\n1. If a user tries to update or remove a package installed from a specific source and that source is accessible that should succeed &mdash; it shouldn't be all or nothing.\r\n2. If there is a mapping that says download `*.com.contoso` from `\\\\CONTOSODEV\\NuGet` and everything else from nuget.org and a user tries to install `Rick.Mapperly` that should succeed even if `\\\\CONTOSODEV\\NuGet` is not accessible otherwise what's the point in having source mappings in the first place?\r\n\n\n### Additional Context\n\n* Visual Studio does not save password for GitHub packages despite the checkbox \"Remember password\" being checked. That's a separate bug I guess should be reported."},{"Id":"32656987619","Type":"IssuesEvent","CreatedAt":"2023-10-18T12:38:02","Actor":"amis92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12949","RelatedDescription":"Opened issue \"[NuGet.Versioning] SemanticVersion.HasMetadata should indicate that Metadata is not null when true\" (#12949) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\nNuGet.Versioning v6.7.0\n\n### Worked before?\n\nno\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1. `dotnet new console -f net6.0 -o NugetVersioningHasMetadataRepro`\r\n2. `cd NugetVersioningHasMetadataRepro`\r\n3. `dotnet add package NuGet Nuget.Versioning --version 6.7.0`\r\n4. In `Program.cs` write:\r\n    ```csharp\r\n    var x = NuGet.Versioning.SemanticVersion.Parse(\"1.0.0\");\r\n    var output = x.HasMetadata ? x.Metadata[0..Math.Min(4, x.Metadata.Length)] : string.Empty;\r\n    ```\r\n\r\nWhat I expected:\r\n5. Build with no warnings.\r\n\r\nWhat I got:\r\n5. Observe build warnings on `x.Metadata`: `Program.cs(2,30): warning CS8602: Dereference of a possibly null reference.`\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32648761758","Type":"IssuesEvent","CreatedAt":"2023-10-18T07:56:59","Actor":"Birgos","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12948","RelatedDescription":"Opened issue \"'dotnet pack' produces invalid nuget package when property 'PackagePath' contains a backslash\" (#12948) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet --info: 7.0.304 msbuild -version: 17.6.3.22601\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n\r\n# Symptom\r\n\r\nPushing \"special\" NuGet-Package to a [self-hosted NuGet server](https://github.com/NuGet/NuGet.Server) runs into the following error message:\r\n> System.ArgumentException: Part URI cannot start with two forward slashes.\r\n\r\nSee also [[Self-hosted Bug]: 406 (Not Acceptable) / Nuget \"Part URI cannot start with two forward slashes.\" #8950](https://github.com/NuGet/NuGetGallery/issues/8950)\r\n\r\nThe cause are  **double slashes** in the file **[Content_Types].xml** of the NuGet package:\r\n`  <Override PartName=\"//LICENSE\" ContentType=\"application/octet\" />`\r\n\r\nThe [Content_Types].xml is generated by the **pack** command from **nuget.exe** or **dotnet**. But **nuget.exe** creates the package with only one slash in the aforementioned file (**[Content_Types].xml**) while `dotnet pack` inserts **double slashes**. See another example [[Content_Types].xml contained in generated Nuget package is invalid #3758](https://github.com/dotnet/arcade/issues/3758)\r\n\r\nThe generated content thereby refers to the following setting, e.g of a **csproj** file or a **Directory.Build.props** file:\r\n\r\n### CSPROJ file\r\n\r\n`\r\n<ItemGroup>\r\n  <None Include=\"..\\..\\LICENSE.txt\">\r\n    <Pack>True</Pack>\r\n    <PackagePath>\\</PackagePath>\r\n`\r\n\r\n### Directory.Build.props ( e.g. https://github.com/CoreWCF/CoreWCF/blob/main/Directory.Build.props)\r\n\r\n`<Content Include=\"$(ProjectDir)LICENSE\" Pack=\"true\" PackagePath=\"\\\" />`\r\n\r\n# Cause\r\nThe (invalid?) `backslash` in the property **PackagePath** causes the **double slashes** when packaged with `dotnet pack`.\r\n\r\nReferring to the [MSDN article \"Including content in a package\"](https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#including-content-in-a-package):\r\n\r\n> \"Specifying an empty package path would add the file to the root of the package.\"\r\n\r\n# Workaround\r\nChanging the code of the **csproj**-file or the **Directory.Build.props** to an \"empty\" **PackagePath**:\r\n\r\n### CSPROJ file\r\n`\r\n<ItemGroup>\r\n  <None Include=\"..\\..\\LICENSE.txt\">\r\n    <Pack>True</Pack>\r\n    <PackagePath></PackagePath>\r\n`\r\n\r\n### Directory.Build.props\r\n`<Content Include=\"$(ProjectDir)LICENSE\" Pack=\"true\" PackagePath=\"\" />`\r\n\r\nTested with an **empty value** produces the following **[Content_Types].xml** content when packaging with `dotnet pack`:\r\n`\r\n<Override PartName=\"/LICENSE\" ContentType=\"application/octet\" />\r\n`\r\n\r\n\r\n# Visual Studio or dotnet?\r\n\r\nIt seems, that Visual Studio inserts the (invalid?) **backslash** into the property **PackagePath**. But maybe `dotnet pack` should handle this too?\r\n\r\n# Example of affected NuGet Packages\r\n\r\n* CoreWCF.WebHttp\r\n* CoreWCF.NetTcp\r\n* CoreWCF.Http\r\n* CoreWCF.NetFramingBase\r\n* CoreWCF.Primitives\r\n* mongodb.driver.core\r\n* [GitHub Repos with backslash in property PackagePath](https://github.com/search?q=PackagePath%3D%22%5C%5C%22&type=code)\r\n\r\n# Related Issues\r\n\r\n[nuget pack can produce invalid packages (OPC files wise) when files have no extension #9097](https://github.com/NuGet/Home/issues/9097)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32638286897","Type":"IssuesEvent","CreatedAt":"2023-10-17T21:31:46","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12947","RelatedDescription":"Opened issue \"Vulnerabilities InfoBar, Filter and Version list improvements\" (#12947) at NuGet/Home","RelatedBody":"This issue is for tracking improvements and bugs related to vulnerabilities feature in Visual Studio and PM UI.\r\n\r\n### Version List:\r\n- [ ] https://github.com/NuGet/Home/issues/12772\r\n- [ ] https://github.com/NuGet/Home/issues/12945\r\n\r\n### Info Bar:\r\n- [ ] https://github.com/NuGet/Home/issues/12891\r\n- [ ] https://github.com/NuGet/Home/issues/12835\r\n- [ ] https://github.com/NuGet/Home/issues/12862\r\n \r\n### Filter:\r\n- [ ] https://github.com/NuGet/Home/issues/12944\r\n\r\n### PM UI:\r\n- [ ] https://github.com/NuGet/Home/issues/12946"},{"Id":"32638237775","Type":"IssuesEvent","CreatedAt":"2023-10-17T21:29:12","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12946","RelatedDescription":"Opened issue \"Fix \"1 vulnerable package versions\" in Installed Tab Warning Tooltip\" (#12946) at NuGet/Home","RelatedBody":"![image](https://github.com/NuGet/Home/assets/43253759/dee69ee7-0f5e-4d9b-a7bd-005ffa42b67e)\r\n"},{"Id":"32638195316","Type":"IssuesEvent","CreatedAt":"2023-10-17T21:27:09","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12945","RelatedDescription":"Opened issue \"Change Version List \"(Vulnerabilities)\" and \"(Deprecation)\" to an icon.\" (#12945) at NuGet/Home","RelatedBody":"We could update the text (\"Vulnerabilities)\" and \"(Deprecation)\" to an icon with tooltip: e.g. \"Package version has known vulnerabilities.\""},{"Id":"32638150240","Type":"IssuesEvent","CreatedAt":"2023-10-17T21:24:52","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12944","RelatedDescription":"Opened issue \"Update wording for Vulnerabilities Filter\" (#12944) at NuGet/Home","RelatedBody":"Try to don't use the word \"Vulnerable\" and more about \"Known\" or \"Published\" vulnerabilities."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-19T03:30:20.8632714Z","RunDurationInMilliseconds":1212}