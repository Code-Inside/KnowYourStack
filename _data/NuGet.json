{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"32495998454","Type":"PullRequestEvent","CreatedAt":"2023-10-11T21:44:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9705","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.10.09]FI of main into dev\" (#9705) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"32495425268","Type":"PullRequestEvent","CreatedAt":"2023-10-11T21:13:46","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9701","RelatedDescription":"Merged pull request \"[ReleasePrep][2023.10.09] RI of dev into main\" (#9701) at NuGet/NuGetGallery","RelatedBody":"Addresses:\r\nhttps://github.com/NuGet/NuGetGallery/issues/9700\r\n\r\nWith the fix of the merge conflict:\r\nhttps://github.com/NuGet/NuGetGallery/pull/9701/commits/8f7a1e5d74b980c70511b18f0f1ff94d5a803574"},{"Id":"32494608706","Type":"PullRequestEvent","CreatedAt":"2023-10-11T20:35:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9705","RelatedDescription":"Opened pull request \"[ReleasePrep][2023.10.09]FI of main into dev\" (#9705) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"32494556301","Type":"IssuesEvent","CreatedAt":"2023-10-11T20:33:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9703","RelatedDescription":"Closed issue \"[NuGet.org Bug]: VerifyGitHubVulnerabilities can crash due to long path\" (#9703) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nVerifyGitHubVulnerabilities internally use the NuGet.Protocol package for querying the V3 API. Some of these code paths cache to disk. If the cache file name is too long, the job can crash.\n\n### Repro Steps\n\nHave the job verify the \"microsoft.aspnetcore.signalr.protocols.messagepack\" package. This creates a path like this and fails since it hits the MAX_PATH limit.\r\n\r\n`\r\nC:\\windows\\system32\\config\\systemprofile\\AppData\\Local\\NuGet\\v3-cache\\670c1461c29885f9aa22c281d8b7da90845b38e4$ps_api.nuget.org_v3_index.json\\list_microsoft.aspnetcore.signalr.protocols.messagepack_range_5.0.0-preview.4.20257.10-7.0.0-preview.7.22376.6.dat-new\r\n`\n\n### Expected Behavior\n\nThe job should not crash and probably not use the cache either.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"32494555997","Type":"PullRequestEvent","CreatedAt":"2023-10-11T20:33:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9704","RelatedDescription":"Merged pull request \"Hotfix: don't use v3-cache for VerifyGitHubVulnerabilities\" (#9704) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/9703. The job is currently failing with a long path problem due to the v3-cache. We don't need the v3-cache for this workflow.\r\n\r\nThis also sets the `includeUnlisted` to `true` because those should be verified also."},{"Id":"32493834510","Type":"PullRequestEvent","CreatedAt":"2023-10-11T20:00:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9704","RelatedDescription":"Opened pull request \"Hotfix: don't use v3-cache for VerifyGitHubVulnerabilities\" (#9704) at NuGet/NuGetGallery","RelatedBody":"Resolve https://github.com/NuGet/NuGetGallery/issues/9703. The job is currently failing with a long path problem due to the v3-cache. We don't need the v3-cache for this workflow."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32492360229","Type":"IssuesEvent","CreatedAt":"2023-10-11T18:55:37","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12937","RelatedDescription":"Opened issue \"Copy button in PM UI Preview Window throws when Windows Clipboard is already in use\" (#12937) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nWhen the Windows Clipboard is in use (eg, by another application, the VS editor, or a VS Extension), then pressing \"Copy\" in the PM UI Preview will fail and throw a COM exception.\r\n`System.Runtime.InteropServices.COMException (0x800401D0): OpenClipboard Failed`\r\n\r\nThe VS Editor is more resilient to the clipboard being unavailable, and shows a wait dialog while it retries obtaining access to the clipboard to perform the command (eg, Copy or Ctrl+C).\r\n\r\n![image](https://github.com/NuGet/Home/assets/49205731/5a8fe961-414f-4018-b542-b81dbfff6986)\r\n\r\nA Developer Community member reported this problem, but found a 3rd Party VS Extension to be responsible for keeping their clipboard open. NuGet should still not assume the clipboard will always be available. https://developercommunity.visualstudio.com/t/Visual-Studio-2022-crash-after-clicking-/10484427\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32491395837","Type":"IssuesEvent","CreatedAt":"2023-10-11T18:15:11","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12915","RelatedDescription":"Closed issue \"TelemetryUtility.ToJsonArrayOfTimingsInSeconds returns incorrect json array on locales having comma as decimal separator\" (#12915) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nNuGet.Client:dev\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n[TelemetryUtility.ToJsonArrayOfTimingsInSeconds](https://github.com/NuGet/NuGet.Client/blob/b4115e8b4fa35c418086cedecd946c696dd4c7b1/src/NuGet.Clients/NuGet.VisualStudio.Common/Telemetry/TelemetryUtility.cs#L203) returns incorrect json array on locales having comma as a decimal separator\r\n\r\nRunning test [NuGet.VisualStudio.Common.Test.Telemetry.TelemetryUtilityTests.ToJsonArrayOfTimingsInSeconds_WithMultipleValues_AppendsValuesWithComma](https://github.com/NuGet/NuGet.Client/blob/b4115e8b4fa35c418086cedecd946c696dd4c7b1/test/NuGet.Clients.Tests/NuGet.VisualStudio.Common.Test/Telemetry/TelemetryUtilityTests.cs#L208C31-L208C31) on system with such locales (e.g. `de`) fails with the following error:\r\n\r\n> Expected TelemetryUtility.ToJsonArrayOfTimingsInSeconds(values) to be \"[5,60.5]\", but \"[5,60,5]\" differs near \",5]\" (index 5).\r\n\r\nI am happy to submit a PR with a fix.\n\n### Verbose Logs\n\n_No response_"},{"Id":"32491022130","Type":"IssuesEvent","CreatedAt":"2023-10-11T17:59:47","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12936","RelatedDescription":"Opened issue \"When renaming a Package Source, any existing Source Mappings need to be updated\" (#12936) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nWhen renaming a package source (eg, from `nuget.org` to `nuget.org2`), all source mappings to `nuget.org` will no longer work. This is because the source name is used in mappings.\n\n### Desired Behavior\n\nConsider at least one of the following behavior changes when editing a package source in VS Options:\r\n1. Also rename the source in the source mappings for that package source that was edited.\r\n2. Show a warning that any existing source mappings need to be updated.\n\n### Additional Context\n\n_No response_"},{"Id":"32482202448","Type":"IssuesEvent","CreatedAt":"2023-10-11T13:00:33","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12872","RelatedDescription":"Closed issue \"PackageReadmeFile outside csproj (in props file) doesn't work\" (#12872) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nMSBuild version 17.7.2+d6990bcfa for .NET Framework\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThe docs and most examples seem to indicate you should do something like this directly in the csproj file:\r\n\r\n```xml\r\n    <PackageReadmeFile>ReadMe.md</PackageReadmeFile>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <None Include=\"ReadMe.md\">\r\n      <Pack>True</Pack>\r\n      <PackagePath>\\</PackagePath>\r\n    </None>\r\n  </ItemGroup>\r\n```\r\n\r\nHowever, we have a bunch of projects which all share a props file and similar structure, so we wanted to abstract this to just detect if there was a `ReadMe.md` file in the source's project directory next to our `csproj` file, so I did this:\r\n\r\n```xml\r\n     <PackageReadmeFile Condition=\"Exists('$(MSBuildProjectDirectory)\\ReadMe.md')\">ReadMe.md</PackageReadmeFile>\r\n  </PropertyGroup>\r\n  \r\n    <ItemGroup>\r\n      <None Include=\"$(MSBuildProjectDirectory)\\ReadMe.md\" Pack=\"true\" PackagePath=\"\\\" Condition=\"Exists('$(MSBuildProjectDirectory)\\ReadMe.md')\"/>\r\n    </ItemGroup>\r\n```\r\n\r\nWhich should be equivalent if a `ReadMe.md` file exists in the same folder as the `csproj` file (which they did).\r\n\r\nThe former works, but the latter produces this error upon pack:\r\n\r\n> Error: C:\\Users\\runneradmin\\.nuget\\packages\\nuget.build.tasks.pack\\6.7.0\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(221,5): error NU5039: The readme file 'ReadMe.md' does not exist in the package. [C:\\a\\Windows\\Windows\\components\\Triggers\\src\\CommunityToolkit.WinUI.Triggers.csproj]\n\n### Verbose Logs\n\n_No response_"},{"Id":"32473213850","Type":"IssuesEvent","CreatedAt":"2023-10-11T07:48:17","Actor":"manio143","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12934","RelatedDescription":"Opened issue \"Allow reading PackageType from LockFile after restore\" (#12934) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nWe're currently able to define custom package types for packages. We can search for those packages using the NuGet rest API, but from a C# project perspective they are just normal dependencies.\r\nDocumentation suggests we should write a custom tool to deal with those custom package types.\r\n\r\nI'm currently investigating the option to use a custom package type to mark plugin packages for [Stride](https://github.com/stride3d/stride) with name `StridePlugin`. We use MSBuild to perform package restore on user's solution and then parse and read the `project.assets.json` using [`LockFileFormat`](https://github.com/NuGet/NuGet.Client/blob/67959d51c158942cdfc2aa5e14e37429931e6579/src/NuGet.Core/NuGet.ProjectModel/LockFile/LockFileFormat.cs#L19). Despite `PackageType` property existing on the [`LockFileTargetLibrary`](https://github.com/NuGet/NuGet.Client/blob/67959d51c158942cdfc2aa5e14e37429931e6579/src/NuGet.Core/NuGet.ProjectModel/LockFile/LockFileTargetLibrary.cs) it is not being populated within the lock file nor is it attempted to be read here:\r\nhttps://github.com/NuGet/NuGet.Client/blob/67959d51c158942cdfc2aa5e14e37429931e6579/src/NuGet.Core/NuGet.ProjectModel/LockFile/LockFileFormat.cs#L507\r\n\n\n### Additional Context and Details\n\nTo provide a little more context - a Stride user references runtime dependencies in their project. If a library they reference requires a build time plugin we want to be able to read that from it's list of dependencies, detect which dependency is a plugin and load it. \r\n\r\nStride plugins may have a different target framework and would reference design/build time assemblies which the user wouldn't want to be included with their output - thus plugins need to be distinguishable and likely used in conjecture with `developmentDependency`."},{"Id":"32471001826","Type":"IssuesEvent","CreatedAt":"2023-10-11T06:18:50","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12927","RelatedDescription":"Closed issue \"[Localization] The filter “show only vulnerable” on “Installed” tab is not localized\" (#12927) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nDev\\6.8.0.122\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Installation:\r\n1.Create a clean VM with loc OS (such as Windows-11-Enterprise-22H2-FR-FR)\r\n2.Install VS D17.8\\34205.153 from: [Pipelines - Run rel.d17.8-34205.153 (visualstudio.com)](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdevdiv.visualstudio.com%2FDevDiv%2F_build%2Fresults%3FbuildId%3D8497505%26view%3Dresults&data=05%7C01%7Cv-luzh%40microsoft.com%7C9ee80318e2ae49f7d77208dbc6057aa9%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638321499433963834%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=X2sM0FoniQiuAfH%2FKHWyidhtRMGQMnQQ%2BtJ6s3xxFPU%3D&reserved=0) with loc language pack (such as FRA)\r\n\r\n#### Repro Steps:\r\n1.Create a C# Console App (.NET Core 8.0) in VS after setting a loc language (such as FRA) through menu “Tools->Options->Environment->International Settings->Language”.\r\n2.Right-Click the project in the Solution Explorer window and select ‘Manage NuGet Packages…’.\r\n3.Click the “Installed” tab and observe the filter “show only vulnerable”.\r\n\r\n#### Expected:\r\nThe filter “show only vulnerable” on “Installed” tab should be localized correctly in all local languages.\r\n#### Actual:\r\nThe filter “show only vulnerable” on “Installed” tab is not localized as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/20632625/7af036ee-da82-4462-bffa-f305b080ba8e)\r\n\r\n#### Notes:\r\n1.It also repro on solution-level PM UI.\r\n2.It reproes on all local languages: CSY, CHS, CHT, DEU, ESN, FRA, RUS, KOR, ITA, JPN, TRK, PTB, PLK.\r\n3.It’s not a regression since it is a new feature."},{"Id":"32442425427","Type":"IssuesEvent","CreatedAt":"2023-10-10T09:03:04","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12933","RelatedDescription":"Opened issue \"Faild to patchSDK with NuGet client Dev latest build\" (#12933) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n.Net SDK 7.0.401\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:\r\n1. Open a new \"Developer Command Prompt\".\r\n2. Cd to appropriate path, install [Git](https://git-scm.com/downloads) firstly, and git clone [Entropy](https://github.com/NuGet/Entropy.git).\r\n3. Cd to <path_to_Entropy>\\SDKPatchTool to check if the patch script is cloned successfully.\r\n4. Download the nupkgs folder from  the Artifacts -> nupkgs - NonRTM of the build.\r\n5. Open the <path_to_Entropy>\\SDKPatchTool\\patchOnWindows.ps1 and update the “$patchSDKFolder” & “$nupkgsPath” to appreciate path.\r\n6. Open Task Manager and navigate to the main menu to File | “Run new task.”.\r\n7. In the Open textbox type: `Powershell -ExecutionPolicy Bypass` and enable the option “Create this task with administrative privileges.”.\r\n8. Cd to <path_to_Entropy>\\SDKPatchTool and execute the command `.\\PatchOnWindows.ps1`.\r\n#### Expected:\r\nPatchSDK with NuGet client Dev latest build successfully.\r\n#### Actual:\r\nFaild to patchSDK with NuGet client Dev latest build as below screenshot.\r\n![image](https://github.com/NuGet/Home/assets/40230425/623c7c4b-475a-4e23-9cdd-1c8fb84a66d0)\r\n#### Note:\r\n1. The issue does not repro on NuGet Client Dev\\6.8.0.120.\r\n2. The issue repro rate is 100%.\r\n\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"32430669817","Type":"IssuesEvent","CreatedAt":"2023-10-09T21:25:40","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12923","RelatedDescription":"Closed issue \"Nothing is working correctly anymore and I made no changes. \" (#12923) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\ndotnet.exe, Other/NA\r\n\r\n### Product Version\r\n\r\n.NET SDK:  Version:   7.0.400  Commit:    73bf45718d  Runtime Environment:  OS Name:     Windows  OS Version:  10.0.17763  OS Platform: Windows  RID:         win10-x64  Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.400\\  Host:   Version:      7.0.10   Architecture: x64   Commit:       a6dbb800a4  .NET SDKs installed:   1.1.14 [C:\\Program Files\\dotnet\\sdk]   6.0.408 [C:\\Program Files\\dotnet\\sdk]   7.0.400 [C:\\Program Files\\dotnet\\sdk]  .NET runtimes installed:   Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.AspNetCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]   Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.NETCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]   Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 6.0.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]   Microsoft.WindowsDesktop.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]  Other architectures found:   x86   [C:\\Program Files (x86)\\dotnet]     registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]  Environment variables:   Not set  global.json file:   Not found  Learn more:   https://aka.ms/dotnet/info  Download .NET:   https://aka.ms/dotnet/download\r\n\r\n### Worked before?\r\n\r\nYes it worked before. I have no idea what changed. I didn't seem to download a version, so I wonder if my machine was automatically patched?\r\n\r\n### Impact\r\n\r\nIt's astronomically more difficult to complete my work, everything that packaged up nicely with a bow just stopped working.\r\n\r\n### Repro Steps & Context\r\n\r\nContext:\r\nIt was working fine and dandy before, and all of a sudden, today I ran into an Error, which was thrown because I TreatWarningsAsErrors. So as far as I know, I didn't do any upgrades, or anything. \r\n\r\nHere's what I'm doing:\r\nI'm building a convention and uniform library solution, in which I have \"Assembly Annotations\" that help dictate things.\r\n\r\nSome examples of what the convention and configuration does:\r\n* if a package has the \"MyAssemblyType\" of \"PackageAssembly\", then msbuild will create a new Attribute called \"PackageAssemblyIntroAttribute\" that includes \"Id\" and \"Version\".\r\n* if it's a PackageAssembly, then the Author is me.\r\n* Includes custom targets\r\n\r\nSo what happened:\r\n* I'm now getting warnings and errors out the wazoo which is incredibly breaking for my workflow, since I need to either turn off TreatWarningsAsErrors, or individually address each one. Most of which I've seen so far don't even make any sense.\r\n\r\nFor example, the base Assembly Annotations library, it has been stable and untouched for the last month. I ran into an issue today and decided to run \"dotnet pack\" against it, and get the following:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277: Found conflicts between different versions of \"System.Collections.Immutable\" that could not be resolved. [C:\\Source\\core-nuget-host\\AssemblyAnn\r\notations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277: There was a conflict between \"System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Collecti\r\nons.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". [C:\\Source\\core-nuget-host\\AssemblyAnnotations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Microsoft.Common.CurrentVersion.targets(2364,5): warning MSB3277:     \"System.Collections.Immutable, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System\r\n.Collections.Immutable, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not. [C:\\Source\\core-nuget-host\\AssemblyAnnotations\\src\\My.AssemblyAnnotations.csproj::TargetFramework=netstandard2.0]\r\n```\r\nSo I tried to create one single library, with one project, and one props file:\r\n\r\n```\r\nprops/My.Microservice.Builder.Analyzers.props\r\nMy.Microservice.Builder.Analyzers.csproj\r\n```\r\nThe Props File is empty (<Project></Project>)\r\nInside the Csproj I have this:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n  \r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <Description>asdfsdf</Description>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput> <!-- Do not include the generator as a lib dependency -->\r\n    <!-- For NU5128 (Since net6.0 is the Framework, but there is no lib/ref directory -->\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n    <NoPackageAnalysis>true</NoPackageAnalysis>\r\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n  </PropertyGroup>\r\n\r\n\r\n\r\n  <ItemGroup>\r\n    <None Include=\"**\\My.Microservice.Builder.Analyzers.props\" Pack=\"true\" PackagePath=\"/build/\" Visible=\"true\"/>\r\n  </ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nAnd when I run dotnet pack, I get this error:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\7.0.400\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(221,5): error NU50\r\n17: Cannot create a package that has no dependencies nor content. [C:\\Source\\sandbox\\testnamepackagelength\\src\\My.Micro\r\nservice.Builder.Analyzers.csproj]\r\n\r\nThe thing about it is, the combination of \r\n```    \r\n   <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n```\r\nhas historically suppressed NU5017.\r\n\r\nIn addition, under a random condition that I can't put my finger on that same project will tell me that \"it found a \"props\" file, but the props file didn't match the \"My.Microservice.Builder.Analyzers.props\" required name\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32430161935","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:57:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12913","RelatedDescription":"Closed issue \"Feedback for package source mapping: multiple package source elements with same key but different patterns\" (#12913) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nNuGet.exe\n\n### Current Behavior\n\nI was just setting up the package source mapping, having learned about it in a random survey VS invited me to the other day. I read from the blog post that precedence rules would be applied for specific values down to wildcards so I thought hey, that's neat. I can specify NuGet as a catch-all and then specify some more specific patterns that also apply to NuGet.  That way if I ever want to change the source, the block is already there and just needs a key change.\r\n\r\nI had tried doing this:\r\n```xml\r\n<packageSourceMapping>\r\n  <packageSource key=\"nuget\">\r\n    <package pattern=\"**\"/>\r\n  </packageSource>\r\n  <packageSource key=\"nuget\">\r\n    <package pattern=\"Microsoft.*\"/>\r\n  </packageSource>\r\n</packageSourceMapping>\r\n```\r\n\r\nI saved the file and immediately Visual Studio locked up with the following error:\r\n> NuGet operation failed\r\n> PackageSourceMapping is enabled and there are multiple package sources associated with the same key(s) (and then a path to the file)\n\n### Desired Behavior\n\nA gold error bar should show up in Visual Studio calling out the issue, but it absolutely shouldn't require one to crash VS and re-open it due to it being perpetually non-responsive from that moment on. In the alternative, just show a red squiggly in the XML document as though I had a syntax error. Either way, it shouldn't break VS.\r\n\r\nFurther, I think it should allow such an entry. In keeping with the precedence rules indicated, it would simply find a pattern match for the package as before and the key should serve as a reference back to the specific package source, not as a unique identifier for that element.\n\n### Additional Context\n\nToday, it's legal to simply have:\r\n\r\n```xml\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"*\" />\r\n  <package pattern=\"Microsoft.*\"/>\r\n</packageSource>\r\n```\r\n\r\nI'm simply proposing that this should be legal as well to represent the same thing.\r\n\r\n```xml\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"*\" />\r\n</packageSource>\r\n<packageSource key=\"nuget\">\r\n  <package pattern=\"Microsoft.*\"/>\r\n</packageSource>\r\n```\r\n\r\nThank you for the consideration!"},{"Id":"32430035766","Type":"IssuesEvent","CreatedAt":"2023-10-09T20:50:55","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12914","RelatedDescription":"Closed issue \"\"dotnet list package --include-transitive\" should ignore docker project files\" (#12914) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nI'm trying to follow the steps outlined in the [blog post](https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/) for package source mapping and it suggests that I run `dotnet list package --include-transitive` to \"view all top-level and transitive packages in your solution.\r\n\r\nMine is a solution in which every project will be built as a separate Docker container. When I ran this command, I got the message:\r\n> The project `<my solution-dir>\\docker-compose.dcproj` uses package.config for NuGet packages, while the command works only with package reference projects.\r\n\r\nThat's all fine and good - where's the list of packages? \n\n### Desired Behavior\n\nIf it encounters a file type it's not compatible with, skip it and keep searching. Instead I get a warning that it's incompatible (and can't do anything about it as I otherwise need the file) and also get no outputs providing me with the desired list.\r\n\r\nFurther, there should be some way to write this list directly from the command into the nuget.config file in the root of the directory I'm running the command from.\n\n### Additional Context\n\nAs it stands, I've got too many projects in this solution to try running that command one at a time, so I'm just going to have to pass on fully implementing the package source mapping.  Please address the above issue so I might take full advantage of this handy functionality.\r\n\r\nThank you!"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-12T03:30:22.47897Z","RunDurationInMilliseconds":1160}