{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13002630795","Type":"IssuesEvent","CreatedAt":"2020-07-24T04:02:23","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7649","RelatedDescription":"Closed issue \"Newly pushed packages that are vulnerable should be marked vulnerable on upload/push\" (#7649) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13001357963","Type":"PullRequestEvent","CreatedAt":"2020-07-23T23:30:33","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8125","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.07.23] RI dev to master\" (#8125) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13001106384","Type":"IssuesEvent","CreatedAt":"2020-07-23T22:46:33","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8126","RelatedDescription":"Opened issue \"Validate the file size for embedded readme \" (#8126) at NuGet/NuGetGallery","RelatedBody":"Validate the file size for embedded readme before uploading\n\nCurrently, we took same file size limitation from icon files in gallery implementation.\n\nReadme file size need to be define and re-apply to gallery "},{"Id":"13000479119","Type":"PullRequestEvent","CreatedAt":"2020-07-23T21:15:48","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8125","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.07.23] RI dev to master\" (#8125) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"13000419930","Type":"PullRequestEvent","CreatedAt":"2020-07-23T21:08:28","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8124","RelatedDescription":"Merged pull request \"Revert \"Use protected configuration provider instead of reflection\" (#8098)\" (#8124) at NuGet/NuGetGallery","RelatedBody":"This reverts commit e6d6dc88d316f93fb21ff5081c581e3f19f305c0.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13001952048","Type":"IssuesEvent","CreatedAt":"2020-07-24T01:30:39","Actor":"dsplaisted","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9842","RelatedDescription":"Opened issue \"NuGet should not infer dots platform version when parsing TargetFramework\" (#9842) at NuGet/Home","RelatedBody":"Use NuGet to parse the following `TargetFramework`: `net5.0-android21`\r\n\r\n**Expected:** Parsed `TargetFrameworkVersion` is `21` (or `21.0`, etc)\r\n\r\n**Actual:** Parsed `TargetFrameworkVersion` is `2.1`\r\n\r\nNuGet is probably using the same version parsing logic for the platform version as it does for the target framework version.  However, the target framework version parsing automatically inserts version separators, so that, for example, net451 parses to .NET Framework 4.5.1.\r\n\r\nWe (probably) can't change how the parsing works for the target framework for compatibility reasons (though we probably want to disallow `net50` in favor of `net5.0`, and eventually should consider what to do with `net10`).  But we shouldn't bring this logic forward to the platform versions."},{"Id":"13001897434","Type":"IssuesEvent","CreatedAt":"2020-07-24T01:17:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5772","RelatedDescription":"Closed issue \"NuGet Package Manager doesn't show title\" (#5772) at NuGet/Home","RelatedBody":"Reported on https://developercommunity.visualstudio.com/content/problem/95390/nuget-package-manager-doesnt-show-title.html\r\nRelated issue:  https://github.com/NuGet/NuGetGallery/issues/4413"},{"Id":"13001889407","Type":"IssuesEvent","CreatedAt":"2020-07-24T01:16:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5416","RelatedDescription":"Closed issue \"NuGet concurrency issues\" (#5416) at NuGet/Home","RelatedBody":"Though reported for MacOS and Linux, we should test on Windows to see if same issues persist.\r\n\r\n**Environment:** v2.8.6 and v4.0.0 NuGet versions have been tested on macOS (Sierra), also v2.8.6, v3.5.0, and v4.3.0-preview1 NuGet versions have been tested on Linux (Fedora).\r\nTest case: open two terminals (instances) with different working directories and run “nuget install” command simultaneously (with empty cache).\r\n**Results:** \r\n1.       v2.8.6 - First NuGet instance works fine. A second one fails with \"Object reference not set to an instance of an object\" error.\r\n2.       v3.5.0 - Each instance can restore (and download) only half of packages.\r\n3.       v4.0.0 - A deadlock like occurs when two instances try to download the same package. After a while, one instance wins and both processes are successfully completed. \r\n\r\nSo NuGet works fine when all packages already cached, but it does not work well in cases it needs to download packages from the Internet.\r\n"},{"Id":"13001882435","Type":"IssuesEvent","CreatedAt":"2020-07-24T01:14:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5034","RelatedDescription":"Closed issue \"[Authentication] In multi-feed scenario, NuGet install does not honor the feed selected as package source in PM-UI\" (#5034) at NuGet/Home","RelatedBody":"Repro steps:\r\n1. Have multiple feeds setup with atleast one authenticated feed and one local feed\r\n2. Open PMUI, select the authenticated feed as your source.\r\n3. Search for a package that is present in both local and authenticated feed.\r\n4. Install the package\r\n\r\nExpected: It should install the package from the authenticated feed that is selected in the PM-UI as package source.\r\n\r\n**Actual**: It may install from local feed. May be authentication takes time while the other feed returns with the package to install. Ideally NuGet should not look for other feeds to install the package when a particular feed is selected as package source.\r\n\r\nNote: You need to clear cache for subsequent repro."},{"Id":"13001851410","Type":"IssuesEvent","CreatedAt":"2020-07-24T01:07:59","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9799","RelatedDescription":"Closed issue \"PackageReference in csproj should identify preferred feed\" (#9799) at NuGet/Home","RelatedBody":"I am proposing that the NuGet `<PackageReference>` tags in csproj should optionally identify the preferred package source. \r\n\r\nThe restore behavior today is essentially random unless you carefully control which feeds are active and which are inactive on a project-by-project basis. Without carefully reviewing logs, you can't even tell where a package came from after the fact. Combine this with an automated build pipeline and it's a recipe for disaster. Worse, if you need two feeds and they both happen to contain variations on the same package, you have zero control of where the build sources the package.\r\n\r\nWhere I work (very large enterprise, thousands of developers) we have many internal package sources dedicated to copies of public feeds, various in-house dev, testing, and release feeds, and so on. We also have _thousands_ of project-specific feeds. On occasion, some of us doing R&D work even activate truly-public feeds. VS in a typical developer environment will list 10-20 feeds. It is not unusual to have duplicate packages in multiple feeds -- or worse, someone has published a package for their own project that \"hides\" an official package by the same name.\r\n\r\nIt's enough of a hassle that I tend to just pull packages down by hand and reference a local-path feed, apart from extremely well-known dependencies like `Microsoft.*` packages.\r\n\r\n(This same scenario -- many package sources -- was also the driver for something I requested many years ago: the ability to control the search order of package sources. A fundamentally different request of course, but still badly needed. Figured it can't hurt to mention it again.)"},{"Id":"13000371174","Type":"IssuesEvent","CreatedAt":"2020-07-23T21:02:30","Actor":"Nirmal4G","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9841","RelatedDescription":"Opened issue \"[CPVM] The '_DirectoryPackagesPropsBasePath' property is not respected when importing 'Directory.Packages.props'\" (#9841) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: dotnet.exe nuget\r\n\r\nNuGet version: 5.7.0.7\r\n\r\ndotnet.exe --version: 5.0.100-preview.7.20366.6\r\n\r\nVS version: 16.6.5\r\n\r\nOS version: 10.0.19041.329\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create any project with CPVM enabled (i.e. with `Directory.Packages.props`)\r\n\r\n2. Override `_DirectoryPackagesPropsBasePath` with the directory of `Directory.Packages.props` anywhere you prefer.\r\n\r\n3. Build with binlog `-bl`. e.g.: `dotnet build -bl` (_you can use [MSBuild Log Viewer](//msbuildlog.com) to inspect the binlog_)\r\n\r\n4. Observe that the file is not imported.\r\n\r\n### Sample Project and Verbose Logs\r\n\r\n[NuGet-CPVM-Repro.zip](https://github.com/NuGet/Home/files/4968726/NuGet-CPVM-Repro.zip)\r\n"},{"Id":"13000231554","Type":"IssuesEvent","CreatedAt":"2020-07-23T20:45:40","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9607","RelatedDescription":"Closed issue \"fix typos dependecy => dependency\" (#9607) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version : 5.6.0\r\n\r\ndotnet.exe --version (if appropriate): 3.1.300\r\n\r\nVS version (if appropriate): 2019 (16.6.0)\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 v1607 (14393.321)\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. reading the code ^^\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"13000156161","Type":"IssuesEvent","CreatedAt":"2020-07-23T20:36:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9774","RelatedDescription":"Closed issue \"\"TheDateTimeOffset specified cannot be converted into a Zip file timestamp\" with Microsoft.Extensions.DependencyInjection v3.1.0\" (#9774) at NuGet/Home","RelatedBody":"I am getting \"TheDateTimeOffset specified cannot be converted into a Zip file timestamp\" error while trying to build the solution. I am building an analyzer using Roslyn and using Microsoft.Extensions.DependencyInjection V3.1.0. However when I try to build the solution I am getting a build error. The date modified field is null for Microsoft.Extensions.* dll's. \r\nI have installed .Net SDK v3.1.301.\r\n\r\n![image](https://user-images.githubusercontent.com/38906373/87083835-8e9a1180-c22d-11ea-9fa1-1be58a0b7030.png)\r\n"},{"Id":"12998759441","Type":"IssuesEvent","CreatedAt":"2020-07-23T17:54:32","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9793","RelatedDescription":"Closed issue \"How to authenticate to the custom nuget repository feed with programming?\" (#9793) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI am creating a project and the task of this project is to get the packages and their versions from a private nuget server. I can get data from nuget's own public servers. I cannot authenticate on a private server. How to authenticate to the custom nuget repository feed with programming?\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nAssembly NuGet.Protocol.Core.v3, Version=4.2.0.0,\r\n\r\ndotnet.exe --version (if appropriate):\r\n3.1.301\r\n\r\nVS version (if appropriate):\r\nMicrosoft Visual Studio Enterprise 2019 Version 16.6.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nwindows 10 Enterprise 1909\r\n\r\nWorked before? If so, with which NuGet version:\r\nNuget is actively working. As I mentioned above, I can't be authenticate when using it in my project\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.You will see the problem in the sample project\r\n\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n{\"Response status code does not indicate success: 401 (Unauthorized).\"}\r\n   \r\nat NuGet.Protocol.ServiceIndexResourceV3Provider.<GetServiceIndexResourceV3>d__9.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at NuGet.Protocol.ServiceIndexResourceV3Provider.<TryCreate>d__8.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at NuGet.Protocol.PackageSearchResourceV3Provider.<TryCreate>d__1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__16`1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<GetResourceAsync>d__15`1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at NugetPackageVersionResolver.Program.<V4>d__5.MoveNext() in C:\\Users\\x\\source\\repos\\NugetPackageVersionResolver\\NugetPackageVersionResolver\\Program.cs:line 124\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at NugetPackageVersionResolver.Program.<Main>d__0.MoveNext() in C:\\Users\\x\\source\\repos\\NugetPackageVersionResolver\\NugetPackageVersionResolver\\Program.cs:line 38\r\n\r\n### Sample Project\r\nhttps://github.com/fdevGit/NugetPackageVersionResolver\r\n\r\n"},{"Id":"12998720044","Type":"IssuesEvent","CreatedAt":"2020-07-23T17:50:08","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9787","RelatedDescription":"Closed issue \" Could not copy Error in docker linux container\" (#9787) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI keep getting this error from my 'docker build .'. I'm getting the error with this .net core microsoft.analysisservices.adomdclient.netcore.retail.amd64. The Error that comes from it:\r\n\r\n/usr/share/dotnet/sdk/3.1.301/Microsoft.Common.CurrentVersion.targets(4360,5): error MSB3021: Unable to copy file \"/root/.nuget/packages/microsoft.analysisservices.adomdclient.netcore.retail.amd64/19.4.0.2-preview/lib/netcoreapp3.0/zh-HANS/Microsoft.AnalysisServices.AdomdClient.resources.dll\" to \"bin/Debug/netcoreapp3.1/zh-HANS/Microsoft.AnalysisServices.AdomdClient.resources.dll\". Could not find a part of the path '/app/Processor/bin/Debug/netcoreapp3.1/zh-HANS/Microsoft.AnalysisServices.AdomdClient.resources.dll'\r\n\r\nDon't know why it can't find that package. it restores just fine. I know it builds on windows which more then likly means I can never get it to work. The project it is in is an F# project.\r\n\r\nDocker File\r\nFrom node:12 AS web-build\r\n\r\nCOPY ./Web.UI ./\r\n\r\nRUN npm i\r\nRUN npm run test\r\nRUN npm run buildProd\r\n\r\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS backend-build\r\n\r\nWORKDIR /app\r\nCOPY . ./\r\nCOPY --from=web-build /Processor/wwwroot ./Processor/wwwroot\r\nRUN dotnet test\r\nRUN dotnet publish -c Release -o publish\r\n\r\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.1\r\nWORKDIR /app\r\nCOPY --from=backend-build /app/publish .\r\nEXPOSE 80"},{"Id":"12998695060","Type":"IssuesEvent","CreatedAt":"2020-07-23T17:47:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9785","RelatedDescription":"Closed issue \"Unable to build (timeout when restoring)\" (#9785) at NuGet/Home","RelatedBody":"**Issue migrated manually from https://github.com/dotnet/runtime/issues/33294:**\r\n\r\n@lpereira wrote:\r\n\r\nI'm trying to build on a newly-installed Fedora 31 machine.  Dependencies have been installed according to the documentation, but I'm getting a timeout when `build.sh` tries to restore.\r\n\r\n```\r\n/home/leandro/runtime/.dotnet/sdk/5.0.100-preview.2.20155.14/NuGet.targets(124,5): error : Unable to load the service index for source https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet-tools/nuget/v3/index.j\r\nson. [/home/leandro/runtime/tools-local/tasks/installer.tasks/installer.tasks.csproj]\r\n/home/leandro/runtime/.dotnet/sdk/5.0.100-preview.2.20155.14/NuGet.targets(124,5): error :   The HTTP request to 'GET https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet-tools/nuget/v3/index.json' has timed out after 100000ms. [\r\n/home/leandro/runtime/tools-local/tasks/installer.tasks/installer.tasks.csproj]\r\n                     NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet-tools/nuget/v3/index.json.\r\n```\r\n\r\n(I've temporarily changed some shell scripts in `eng/` to execute with bash tracing, plus force msbuild to be called with `diag` verbosity. Can send the full log.)\r\n\r\nIt doesn't seem to be a network issue. Accessing that URL from the command line with something like Curl works just fine and returns me the expected JSON data.\r\n\r\nThis is unrelated to #2199.\r\n\r\n`master` is at 2018c7931.\r\n\r\n--\r\n\r\nAlso happens in a Ubuntu 19.10 release, with same symptoms: NuGet times out while fetching that JSON, but it's fine if obtained with Curl.\r\n\r\n--\r\n\r\nOn Ubuntu 18.04 this seems to work just fine. (Might be related to something else, as I've also switched from running things inside VirtualBox to Docker for Mac.)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-24T05:30:41.9817432Z","RunDurationInMilliseconds":1812}