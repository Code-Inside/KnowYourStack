{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12841317942","Type":"IssuesEvent","CreatedAt":"2020-07-07T22:58:29","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8091","RelatedDescription":"Opened issue \"[A11y] Color contrast issues on package details page, links on the selected version\" (#8091) at NuGet/NuGetGallery","RelatedBody":"Issue: Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds (color-contrast - https://dequeuniversity.com/rules/axe/3.5/color-contrast?application=msftAI)\r\n\r\nTarget application: `NuGet Gallery | Newtonsoft.Json 12.0.3 - https://www.nuget.org/packages/Newtonsoft.Json/`\r\n\r\nElement paths: `a[title=\"\\31 2\\.0\\.3\"]`\r\n\r\nSnippet: `<a href=\"/packages/Newtonsoft.Json/12.0.3\" title=\"12.0.3\"> 12.0.3 </a>`\r\n\r\nElement path: `.bg-info > td:nth-child(4) > a`\r\n\r\nSnippet: `<a href=\"/packages/Newtonsoft.Json/12.0.3/Manage\">Listed</a>`\r\n\r\n![image](https://user-images.githubusercontent.com/94054/86853070-af663980-c06a-11ea-9f94-4ab49b43c88a.png)\r\n\r\n\r\nHow to fix: \r\nFix any of the following:\r\n Element has insufficient color contrast of 3.77 (foreground color: #337ab7, background color: #d9edf7, font size: 12.0pt (16px), font weight: normal). Expected contrast ratio of 4.5:1\r\n\r\nEnvironment: Chrome version 83.0.4103.116\r\n"},{"Id":"12841190748","Type":"IssuesEvent","CreatedAt":"2020-07-07T22:39:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8063","RelatedDescription":"Closed issue \"[Dependents] Polish current UI\" (#8063) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12840492281","Type":"PullRequestEvent","CreatedAt":"2020-07-07T21:09:28","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8090","RelatedDescription":"Merged pull request \"Update CODEOWNERS\" (#8090) at NuGet/NuGetGallery","RelatedBody":"Adds @drewgillies and @lyndaidaii, removes @scottbommarito "},{"Id":"12840316019","Type":"PullRequestEvent","CreatedAt":"2020-07-07T20:49:56","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8090","RelatedDescription":"Opened pull request \"Update CODEOWNERS\" (#8090) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12839724435","Type":"PullRequestEvent","CreatedAt":"2020-07-07T19:47:41","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8089","RelatedDescription":"Opened pull request \"Add sorting and filtering in gallery  (without UI)\" (#8089) at NuGet/NuGetGallery","RelatedBody":"This PR adds support for Sorting and Filtering (Advanced Search) on the Gallery. This PR is the first in a set of 2. This adds the backend backbone to communicate with the search service. The second PR will add the UI.\r\n"},{"Id":"12831471903","Type":"PullRequestEvent","CreatedAt":"2020-07-07T05:27:40","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8088","RelatedDescription":"Opened pull request \"Replace permalink workaround with GitHub advisory permalink field\" (#8088) at NuGet/NuGetGallery","RelatedBody":"Field is now available in GitHub GraphQL API, so using it now and removing extension method.\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2890"},{"Id":"12829394636","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:48:59","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8070","RelatedDescription":"Closed issue \"Address feedback from customers for the UX\" (#8070) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12829266516","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:26:33","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8087","RelatedDescription":"Opened issue \"Reflow all packages that have vulnerabilities\" (#8087) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12829252145","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:24:05","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8032","RelatedDescription":"Closed issue \"Stats figure trimming doesn't respect locale\" (#8032) at NuGet/NuGetGallery","RelatedBody":"On statistics page, this change (https://github.com/NuGet/NuGetGallery/pull/7990) has unit tests which fail in non-decimal-point locales. So does the actual trimming logic for the number. \r\nExamples:\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3797637&view=results\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3794657&view=results\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3790561&view=results"},{"Id":"12829132662","Type":"IssuesEvent","CreatedAt":"2020-07-06T22:05:09","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8086","RelatedDescription":"Opened issue \"[Catalog2Monitoring] Improve cursor logging\" (#8086) at NuGet/NuGetGallery","RelatedBody":"See https://github.com/NuGet/NuGet.Services.Metadata/pull/799"},{"Id":"12826654781","Type":"IssuesEvent","CreatedAt":"2020-07-06T16:57:19","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8085","RelatedDescription":"Opened issue \"[Advanced search] Update search KPIs\" (#8085) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12843352569","Type":"IssuesEvent","CreatedAt":"2020-07-08T04:24:58","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9663","RelatedDescription":"Closed issue \"OutputConsoleLogger should not access main thread in constructor.\" (#9663) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): _VS UI/Package Manager Console_\nNuGet version (x.x.x.xxx): _Latest_\ndotnet.exe --version (if appropriate): \nVS version (if appropriate): _Latest_\nOS version (i.e. win10 v1607 (14393.321)): _Any_\nWorked before? If so, with which NuGet version: N/A\n\n## Detailed repro steps so we can see the same problem\n\nOutputConsoleLogger is accessing main thread during construction, which is not a good pattern. As it is MEF-composed object, we cannot convert to \"private-ctor-public-async-factory\" model, so we should lazily initialize OutputConsole outside the constructor.\n"},{"Id":"12843352210","Type":"IssuesEvent","CreatedAt":"2020-07-08T04:24:55","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/9663","RelatedDescription":"Reopened issue \"OutputConsoleLogger should not access main thread in constructor.\" (#9663) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): _VS UI/Package Manager Console_\nNuGet version (x.x.x.xxx): _Latest_\ndotnet.exe --version (if appropriate): \nVS version (if appropriate): _Latest_\nOS version (i.e. win10 v1607 (14393.321)): _Any_\nWorked before? If so, with which NuGet version: N/A\n\n## Detailed repro steps so we can see the same problem\n\nOutputConsoleLogger is accessing main thread during construction, which is not a good pattern. As it is MEF-composed object, we cannot convert to \"private-ctor-public-async-factory\" model, so we should lazily initialize OutputConsole outside the constructor.\n"},{"Id":"12843309358","Type":"IssuesEvent","CreatedAt":"2020-07-08T04:18:03","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9764","RelatedDescription":"Closed issue \"OutputWindowTextWriter constructor should not be called on background thread.\" (#9764) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\n\nNuGet version (x.x.x.xxx): Latest\n\nWorked before? If so, with which NuGet version: Day before\n\n## Detailed repro steps so we can see the same problem\n\n1. Install a package in PMUI\n"},{"Id":"12842116438","Type":"IssuesEvent","CreatedAt":"2020-07-08T01:08:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7474","RelatedDescription":"Closed issue \"Suspend 1605/1608 during package update sequence?\" (#7474) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: Package Manager Console\r\n\r\nNuGet version: 4.6.2.5055\r\n\r\nVS version (if appropriate): VS 2017 15.8.8\r\n\r\nOS version: win10 v1803\r\n\r\nI'm trying to update the version of Application Insights in an ASP.NET MVC project, however there are multiple packages and the version coupling is very tight i.e. components want associated components with the same exact version.\r\n\r\nI need to update the packages using a command so I can integrate this into our DevOps process but the updates are blocked by NU1605/NU1608 warnings\r\n\r\nI've checked and the projects do not have NU1605 as an error but the package manager console refuses to update the packages.\r\n\r\nMy question is how to issue commands that will update these packages, couple of choices...\r\n\r\n1. Automatically update the dependencies as well\r\n2. Allow suspension of checking via a command line option\r\n\r\nThe UI mode works correctly\r\n\r\n### Verbose Logs\r\n\r\nIssuing `update-package Microsoft.ApplicationInsights.Web` (the suggested package in the documentation) gets\r\n```\r\nNU1605: Detected package downgrade: Microsoft.ApplicationInsights from 2.8.1 to 2.7.2. Reference the package directly from the project to select a different version. \r\n MyApp.Api -> Microsoft.ApplicationInsights.Log4NetAppender 2.8.1 -> Microsoft.ApplicationInsights (>= 2.8.1) \r\n MyApp..Api -> Microsoft.ApplicationInsights (>= 2.7.2)\r\nNU1605: Detected package downgrade: Microsoft.ApplicationInsights from 2.8.1 to 2.7.2. Reference the package directly from the project to select a different version. \r\n MyApp..Api -> Microsoft.ApplicationInsights.Web 2.8.1 -> Microsoft.ApplicationInsights (= 2.8.1) \r\n MyApp..Api -> Microsoft.ApplicationInsights (>= 2.7.2)\r\nNU1605: Detected package downgrade: Microsoft.ApplicationInsights.WindowsServer from 2.8.1 to 2.7.2. Reference the package directly from the project to select a different version. \r\n MyApp.Api -> Microsoft.ApplicationInsights.Web 2.8.1 -> Microsoft.ApplicationInsights.WindowsServer (>= 2.8.1) \r\n MyApp.Api -> Microsoft.ApplicationInsights.WindowsServer (>= 2.7.2)\r\nNU1605: Detected package downgrade: Microsoft.AspNet.TelemetryCorrelation from 1.0.4 to 1.0.3. Reference the package directly from the project to select a different version. \r\n MyApp.Api -> Microsoft.ApplicationInsights.Web 2.8.1 -> Microsoft.AspNet.TelemetryCorrelation (>= 1.0.4) \r\n MyApp.Api -> Microsoft.AspNet.TelemetryCorrelation (>= 1.0.3)\r\n\r\nupdate-package : An item with the same key has already been added.\r\nAt line:1 char:1\r\n+ update-package Microsoft.ApplicationInsights.Web\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Update-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand\r\n ```\r\n"},{"Id":"12841701430","Type":"IssuesEvent","CreatedAt":"2020-07-07T23:58:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6995","RelatedDescription":"Closed issue \"Installed packages tab shouldn't paginate the list\" (#6995) at NuGet/Home","RelatedBody":"NuGet VS UI\r\nNuGet version 4.6.0\r\nVS version 15.7.1\r\nOS version Windows 10 1803 build 17134.48\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open any project with a reasonable number of NuGet packages installed (e.g. 40-50)\r\n\r\n2. Open the NuGet package manager UI and select the \"installed\" tab\r\n\r\n3. Scroll to the bottom of the list of installed NuGet packages. Note that the list is page loaded and several scrolls are required to load the entire list.\r\n\r\nPreferred behaviour would be for the list of installed packages to be fully loaded from the start so that scrolling through the list is more efficient."},{"Id":"12841701408","Type":"IssuesEvent","CreatedAt":"2020-07-07T23:58:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8294","RelatedDescription":"Closed issue \"The installed/updates tabs in the PM UI can share a data source\" (#8294) at NuGet/Home","RelatedBody":"This is a perf improvement. \r\n\r\nEach of tabs can also have its own datasource to avoid reloading when switching across the tabs. \r\n\r\nRelated: https://github.com/NuGet/Home/issues/8283\r\nhttps://github.com/NuGet/Home/issues/8290"},{"Id":"12841473870","Type":"IssuesEvent","CreatedAt":"2020-07-07T23:21:44","Actor":"shahabhijeet","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9765","RelatedDescription":"Opened issue \"RestoreIgnoreFailedSources=true still gives warnings\" (#9765) at NuGet/Home","RelatedBody":"I am trying to suppress NU1801 warning (Unable to load the service index for sourceâ€¦) If one of the Nuget sources is not accessible.\r\nI have tried the following:\r\n1. Provided this as one of the property to Restore Target  \r\n a. RestoreIgnoreFailedSources=true\r\n2. Also added `<NoWarn>NU1801</NoWarn>` \r\n3 .Also pass `/p:NoWarn=NU1801`\r\n\r\nNugetVersion = latest from nuget.com\r\ndotnet = 3.1.301\r\nVS = 16.6.3\r\nOS = Win10\r\n"},{"Id":"12840535409","Type":"IssuesEvent","CreatedAt":"2020-07-07T21:14:19","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9656","RelatedDescription":"Closed issue \"OperationCanceledExceptions are being lost in async methods the UI uses\" (#9656) at NuGet/Home","RelatedBody":"A cancelled task is not handled well throughout NuGet Protocol. In some cases, a cancellation is never handled, and worse, is not propagated to callers. "},{"Id":"12840025955","Type":"IssuesEvent","CreatedAt":"2020-07-07T20:19:18","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9764","RelatedDescription":"Opened issue \"OutputWindowTextWriter constructor should not be called on background thread.\" (#9764) at NuGet/Home","RelatedBody":"## Details about Problem\n\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\n\nNuGet version (x.x.x.xxx): Latest\n\nWorked before? If so, with which NuGet version: Day before\n\n## Detailed repro steps so we can see the same problem\n\n1. Install a package in PMUI\n"},{"Id":"12838942304","Type":"IssuesEvent","CreatedAt":"2020-07-07T18:23:42","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9763","RelatedDescription":"Opened issue \"Test: VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync is flaky on mac only\" (#9763) at NuGet/Home","RelatedBody":"The VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync test is flaky on Mac only:\r\nError message:\r\n```\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual: 1\r\n```\r\nor\r\n\r\n```\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual: 2\r\n```\r\nStack trace:\r\n```\r\n at NuGet.Packaging.FuncTest.SignatureTrustAndValidityVerificationProviderTests.VerifySignaturesAsync_ExpiredCertificateAndTimestampWithTooLargeRange_FailsAsync() in /Users/runner/work/1/s/test/NuGet.Core.FuncTests/NuGet.Packaging.FuncTest/SigningTests/SignatureTrustAndValidityVerificationProviderTests.cs:line 234\r\n--- End of stack trace from previous location ---\r\n```"},{"Id":"12838162591","Type":"IssuesEvent","CreatedAt":"2020-07-07T16:58:09","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9762","RelatedDescription":"Opened issue \"RPS: Measure no-op restores in a separate scenario.\" (#9762) at NuGet/Home","RelatedBody":""},{"Id":"12838151839","Type":"IssuesEvent","CreatedAt":"2020-07-07T16:57:01","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9761","RelatedDescription":"Opened issue \"RPS: Adjust NuGet-Restore scenario markers to avoid capturing events during solution load\" (#9761) at NuGet/Home","RelatedBody":"We are currently using `Microsoft-VisualStudio-Common/vs_nuget_projectinformation` event for start of the scenario, but we should have dedicated nuget-restore/Start event or something like that to actually capture start of restore. For now, that may be `Microsoft-VisualStudio-Common/vs_nuget_restoreinformation_restoreoperationchecks/Start`\n"},{"Id":"12837969843","Type":"IssuesEvent","CreatedAt":"2020-07-07T16:38:14","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9732","RelatedDescription":"Closed issue \"Opening NuGet.sln in Visual Studio shows IDExxxx errors in few source files.\" (#9732) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Source code.\r\n\r\nNuGet version (x.x.x.xxx): \r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nOpening NuGet.sln and certain C# source files results in IDExxx errors in error list, which are violations of coding guidelines.\r\n"},{"Id":"12837924886","Type":"IssuesEvent","CreatedAt":"2020-07-07T16:33:41","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9760","RelatedDescription":"Opened issue \"Add RPS tests over real-world solutions\" (#9760) at NuGet/Home","RelatedBody":"Such as OrchardCore and Roslyn"},{"Id":"12836703592","Type":"IssuesEvent","CreatedAt":"2020-07-07T14:43:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9758","RelatedDescription":"Closed issue \"skipDuplicate and symbol package\" (#9758) at NuGet/Home","RelatedBody":"We use the `skipDuplicate` option so that a Github action can push a new nuget version whenever the version is incremented, and skip the push if that version was already published.\r\n\r\nThis works but the `skipDuplicate` doesn't appear to skip the symbol package.\r\n\r\nAs a result, a new symbol package is pushed on a every build. Because the symbol package doesn't match the originally publish nuget package, we receive an error by email \"Symbol package validation failed\".\r\n\r\nSee following image:\r\n[1] Main package is skipped\r\n[2] Symbol package is pushed nonetheless\r\n\r\n![image](https://user-images.githubusercontent.com/3426504/86759452-d578e300-c044-11ea-851f-71de76551ab6.png)\r\n\r\nIs there a way to skip symbol publication if the main package is skipped?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-08T05:30:39.6297042Z","RunDurationInMilliseconds":1751}