{"Data":{"Blog":{"FeedItems":[{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14189597484","Type":"PullRequestEvent","CreatedAt":"2020-11-14T01:30:54","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8324","RelatedDescription":"Merged pull request \"Switch to NuGetTestData for static test packages\" (#8324) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3513\r\n\r\nAll temporary test data will be owed by the NugetTestAccount and orgs. This data should be cleaned up.\r\nAll static test data that should not be deleted will be owned by NuGetTestData organization."},{"Id":"14188469655","Type":"PullRequestEvent","CreatedAt":"2020-11-13T22:03:21","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8324","RelatedDescription":"Opened pull request \"Switch to NuGetTestData for static test packages\" (#8324) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3513\r\n\r\nAll temporary test data will be owed by the NugetTestAccount and orgs. This data should be cleaned up.\r\nAll static test data that should not be deleted will be owned by NuGetTestData organization."},{"Id":"14187547612","Type":"PullRequestEvent","CreatedAt":"2020-11-13T20:13:52","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8290","RelatedDescription":"Merged pull request \"Add restricted API for soft deleting packages \" (#8290) at NuGet/NuGetGallery","RelatedBody":"This PR extends the existing `DELETE /api/v2/package/{ID}/{version}` API to allow the soft deletion of packages. Currently, this endpoint can be used by any unlist scoped API key to unlist a package. This endpoint is mainly used by the `nuget.exe delete` and `dotnet nuget delete` commands to unlist packages from the command line.\r\n\r\nThe soft delete behavior is triggered by including a request body in the `DELETE` that has the following shape:\r\n```json\r\n{\r\n  \"Type\": \"SoftDelete\"\r\n}\r\n```\r\n\r\nIf no request body is included, the `\"Type\"` property defaults to `\"Unlist\"`. This maintains backwards compatibility. In other words, the default `DELETE` behavior for nuget.org remains to unlist but a client can opt-in to the soft delete behavior with a request body parameter.\r\n\r\nThe intent of this API is to enable automation for test data clean up, i.e. the packages published by NugetTestAccount during gallery functional tests and E2E tests. \r\n\r\nThe soft delete gesture is gated on the following conditions:\r\n1. *(existing, same as unlist)* The target package must exist. You can still operate on a soft deleted package.\r\n1. *(existing, same as unlist)* The API key must have the \"unlist\" scope.\r\n1. *(existing, same as unlist)* The API key must have a package ID scope matching the target package.\r\n1. *(existing, same as unlist)* The package ID must not be locked.\r\n1. **(new, only for soft delete)** The user must be in the `NuGetGallery.DeletePackageApi` flight.\r\n1. **(new, only for soft delete)** The user must _not_ be an admin. I don't want the risk of deleting stuff unintentionally.\r\n1. **(new, only for soft delete)** The package download count must not be greater than or equal to 1000.\r\n\r\nI will present a full design before moving forward, but generally my plan is to roll this out and write a simple task in the `Gallery.Maintenance` job to call this delete API on packages owned by `NugetTestAccount`.\r\n\r\nI chose to make this a REST API so that the complex, multistep delete logic is deployed only to a single location (gallery front-end) instead of multiple places (gallery front-end and some delete job). I have no intent of opening this API up to anyone but `NugetTestAccount`, but the code is written in such a way that it could be extended to future scenarios."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14190018203","Type":"IssuesEvent","CreatedAt":"2020-11-14T03:49:13","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8693","RelatedDescription":"Closed issue \"internal 3rd party nuget packages management using packagereferances?\" (#8693) at NuGet/Home","RelatedBody":"Hi Team,\r\n\r\nKindly share any information on managing internal 3rdpary nuget packages. we are in the process migrating from packages.config. migration tools working for public nuget packages and for internal pacakges it nighter show log nor error. migrationbackup folder has packages.config file and .csproj file but not upgradelog.\r\n\r\nVS Version 2017.\r\n\r\nThanks.\r\n\r\n"},{"Id":"14189936397","Type":"IssuesEvent","CreatedAt":"2020-11-14T03:18:48","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10274","RelatedDescription":"Opened issue \"Prototype UI Enhancements & prepare for User Study\" (#10274) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for enhancements to various PM UI functions. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback.\r\n\r\nSome ideas:\r\n- Scope any remaining work for Version Range support https://github.com/nuget/home/issues/6566\r\n\r\n- Bonus would be to investigate GitHub commit integration: https://github.com/NuGet/Home/issues/8585"},{"Id":"14189901317","Type":"IssuesEvent","CreatedAt":"2020-11-14T03:06:37","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10273","RelatedDescription":"Opened issue \"Prototype a Package Source Error Handler & prepare for User Study\" (#10273) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for how the PM UI handles errors with Package Sources. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback.\r\n\r\nConsider:\r\n\r\n- How to show a failing feed but keep the UI functional: https://github.com/nuget/home/issues/9218\r\n\r\n- How to avoid infinite Authentication popups: https://github.com/nuget/home/issues/5028\r\n\r\n- How can we show validation issues: Warn or error when no package sources exist #2472"},{"Id":"14189878801","Type":"IssuesEvent","CreatedAt":"2020-11-14T02:59:19","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10272","RelatedDescription":"Opened issue \"VS UI Experience Bugs\" (#10272) at NuGet/Home","RelatedBody":"Epic tracking bug fixes to PM UI related to existing functionality."},{"Id":"14189841193","Type":"IssuesEvent","CreatedAt":"2020-11-14T02:45:58","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10271","RelatedDescription":"Opened issue \"Investigate enhancements for Settings Dialog\" (#10271) at NuGet/Home","RelatedBody":"Time-boxed effort to investigate and create prototype(s) for changes to the VS Settings dialog. The Epic serves as a guide for customer input. \r\n\r\n- Users are commonly confused by the package source dialog\r\n- Can we use WPF rather than WinForms?\r\n- Consider that we may want to add new settings\r\n\r\nPrepare any prototype(s) for the next User Study to solicit feedback (particularly for package sources)."},{"Id":"14189821787","Type":"IssuesEvent","CreatedAt":"2020-11-14T02:39:10","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10270","RelatedDescription":"Opened issue \"Prototype a Filtering mechanism & prepare for User Study\" (#10270) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for filtering packages in various PM UI views. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback."},{"Id":"14189814668","Type":"IssuesEvent","CreatedAt":"2020-11-14T02:36:41","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10269","RelatedDescription":"Opened issue \"Prototype a Sorting mechanism & prepare for User Study\" (#10269) at NuGet/Home","RelatedBody":"Time-boxed effort to create prototype(s) for sorting various PM UI views. The Epic serves as a guide for customer input.\r\nPrepare these prototype(s) for the next User Study to solicit feedback."},{"Id":"14189501180","Type":"IssuesEvent","CreatedAt":"2020-11-14T01:06:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10268","RelatedDescription":"Opened issue \"msbuild /t:restore /p:RestorePackagesConfig doesn't consider the lock file\" (#10268) at NuGet/Home","RelatedBody":"Self explanatory and related to https://github.com/NuGet/Home/issues/10257. \r\n\r\n"},{"Id":"14187376678","Type":"IssuesEvent","CreatedAt":"2020-11-13T19:54:31","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8418","RelatedDescription":"Closed issue \"Test:  package signing tests sometimes fail with 0xC0000001 (STATUS_UNSUCCESSFUL)\" (#8418) at NuGet/Home","RelatedBody":"According to @bartonjs, this is tracked by https://github.com/dotnet/corefx/issues/37994.\r\n\r\nExample from one CI test run:\r\n```\r\nNuGet.Packaging.Test.CertificateUtilityTests.IsSignatureAlgorithmSupported_WhenSupported_ReturnsTrue(algorithm: SHA384, expectedSignatureAlgorithmOid: \"1.2.840.113549.1.1.12\") [FAIL]\r\n---- System.Security.Cryptography.CryptographicException : Unknown error \"-1073741823\".\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\nStack Trace:\r\n          \r\n    ----- Inner Stack Trace #1 (System.Security.Cryptography.CryptographicException) -----\r\n        at System.Security.Cryptography.NCryptNative.SignHash[T](SafeNCryptKeyHandle key, Byte[] hash, T& paddingInfo, AsymmetricPaddingMode paddingMode, NCryptHashSigner`1 signer)\r\n        at System.Security.Cryptography.NCryptNative.SignHashPkcs1(SafeNCryptKeyHandle key, Byte[] hash, String hashAlgorithm)\r\n        at System.Security.Cryptography.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(309,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, RSA rsa, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(212,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, Int32 publicKeyLength, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs(36,0): at NuGet.Packaging.Test.CertificatesFixture..ctor()\r\n    ----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n          \r\nSystem.AggregateException : One or more errors occurred.\r\n---- System.Security.Cryptography.CryptographicException : Unknown error \"-1073741823\".\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\nStack Trace:\r\n          \r\n    ----- Inner Stack Trace #1 (System.Security.Cryptography.CryptographicException) -----\r\n        at System.Security.Cryptography.NCryptNative.SignHash[T](SafeNCryptKeyHandle key, Byte[] hash, T& paddingInfo, AsymmetricPaddingMode paddingMode, NCryptHashSigner`1 signer)\r\n        at System.Security.Cryptography.NCryptNative.SignHashPkcs1(SafeNCryptKeyHandle key, Byte[] hash, String hashAlgorithm)\r\n        at System.Security.Cryptography.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(309,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, RSA rsa, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(212,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, Int32 publicKeyLength, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs(36,0): at NuGet.Packaging.Test.CertificatesFixture..ctor()\r\n    ----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n```\r\nAnother example:\r\n```\r\nSystem.AggregateException : One or more errors occurred. (Unknown error (0xc0000001)) (The following constructor parameters did not have matching fixture data: CertificatesFixture fixture)\r\n---- Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unknown error (0xc0000001)\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\n\r\n----- Inner Stack Trace #1 (Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException) -----\r\n   at Internal.Cryptography.CngCommon.SignHash(SafeNCryptKeyHandle keyHandle, ReadOnlySpan`1 hash, AsymmetricPaddingMode paddingMode, Void* pPaddingInfo, Int32 estimatedSize)\r\n   at System.Security.Cryptography.RSAImplementation.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n   at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n   at Test.Utility.Signing.SigningTestUtility.GenerateSelfIssuedCertificate(Boolean isCa) in E:\\A\\_work\\23\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs:line 432\r\n   at NuGet.Packaging.Test.CertificatesFixture..ctor() in E:\\A\\_work\\23\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs:line 55\r\n----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n```"},{"Id":"14185668996","Type":"IssuesEvent","CreatedAt":"2020-11-13T17:17:08","Actor":"dieterv","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10267","RelatedDescription":"Opened issue \"Missing Nuget.Commandline 5.8.0 package\" (#10267) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nIt looks like all NuGet related packages have had a 5.8.0 release on nuget.org except NuGet.CommandLine which is still on 5.7.0.\r\nThis makes our CI builds fail when using .Net SDK 5.0.100 and the Cake build system. Cake references the NuGet.CommandLine package to ensure a nuget.exe file is available. NuGet versions < 5.8 seem to generate assets files without the TargetFrameworkAlias property, which ultimately fails our build with a bunch of NETSDK1005 errors.\r\n\r\nIs the NuGet.CommandLine package on a different release schedule?\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Navigate to https://www.nuget.org/downloads where the latest version is 5.8.0 indicating this is the latest available release\r\n\r\n2. Navigate to https://www.nuget.org/packages/NuGet.CommandLine/ where the latest version is still 5.7.0\r\n"},{"Id":"14183941245","Type":"IssuesEvent","CreatedAt":"2020-11-13T14:50:50","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10266","RelatedDescription":"Opened issue \"[Bug Bash] Duplicate lines show in Output->Package Manager window after installing a package\" (#10266) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.9.0.6966\r\nVS Version: Master\\30712.41\r\nOS: Windows-10-Enterprise-19H2\r\n## Detailed repro steps so we can see the same problem\r\n1. Open VS and click File->New->Project and search the template “ASP.NET Empty Web Site”.\r\n2. Type the project name and click the “Create” button.\r\n3. Open project PM UI, go to “Browse” tab and install a package (e.g. Newtonsoft.Json).\r\n4. Select “Package Manager” in the top of Output window.\r\n## Expected\r\nNo duplicate lines show.\r\n## Actual\r\nDuplicate lines show in Output->Package Manager window as below screenshot.\r\n![image](https://user-images.githubusercontent.com/20632625/99084975-9534fd00-2602-11eb-84d5-e56296ba69e0.png)\r\n## Notes\r\nWe will verify the regression info later."},{"Id":"14183889889","Type":"IssuesEvent","CreatedAt":"2020-11-13T14:46:37","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10265","RelatedDescription":"Opened issue \"[Bug Bash][Unstable] Error “could not load file or assembly 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform” occurred after updating all the packages in ASP.NET Web Forms Site\" (#10265) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.9.0.6966\r\nVS Version: Master\\30712.41\r\nOS: Windows-10-Enterprise-19H2\r\n## Detailed repro steps\r\n1. Open any solution via VS, (**don’t close the solution/VS-it is easy to repro the bug**) click File->New->Project and click the template “ASP.NET Web Forms Site”.\r\n2. Type the project name and click the “Create” button.\r\n3. Open project PM UI, go to “Updates” tab, check “Select all packages” check-box and click “Update” button.\r\n4. Click “OK” button in the prompt “Preview Changes” window.\r\n5. Click “Yes to All” button in the prompt File Conflict dialog as below.\r\n![image](https://user-images.githubusercontent.com/20632625/99084342-c6f99400-2601-11eb-819a-bf74dabe1471.png)\r\n## Expected\r\nUpdating is successful without any error.\r\n## Actual\r\nError “could not load file or assembly 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform” occurred in Error List window as below. Repro rate: 10%\r\n![image](https://user-images.githubusercontent.com/20632625/99084473-f3151500-2601-11eb-8245-be6a6d156813.png)\r\n## Notes\r\n1.Error Message: Could not load file or assembly 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=3.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040).\r\n2.We will verify the regression info later.\r\n\r\n"},{"Id":"14183883426","Type":"IssuesEvent","CreatedAt":"2020-11-13T14:46:05","Actor":"IanKemp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10264","RelatedDescription":"Opened issue \"Feature request: persistently specify allowed version ranges for package references\" (#10264) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.8.0\r\n\r\ndotnet.exe --version (if appropriate): N/A\r\n\r\nVS version (if appropriate): VS 2019 Enterprise 16.8.1\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 Pro version 2004 (OS build 19041.630)\r\n\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. I have a **.NET Core 3.1** csproj with a package reference defined as the following:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"3.1.9\" />\r\n```\r\n\r\nSince .NET 5.0 was recently released, but is not LTS, my organisation does not allow us to update to version 5.0.0 of the various packages. However, we should keep up-to-date with whatever versions of the 3.1 branch, and they just released version 3.1.10, so I want to update to that version of this package.\r\n\r\n2. Going into the NuGet UI for the project in question, it suggests the version 5.0.0 package as the update, which I **do not want**. I also do not want that anyone else (e.g. juniors) can see this, as they might try updating to this version.\r\n\r\n3. Therefore, I edit the csproj to use a [version range](https://docs.microsoft.com/en-us/nuget/concepts/package-versioning#version-ranges) to constrain the allowable versions:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"[3.1.9,5.0.0)\" />\r\n```\r\n\r\n4. Reloading the project and going into the NuGet UI again, things are now correct: the UI prompts me to update to version 3.1.10. I click to update to that version.\r\n\r\n5. The package updates, the NuGet UI refreshes, and... **now it  prompts me to upgrade to version 5.0.0 again**. Looking at the csproj file, the reason becomes obvious - my range expression has been nuked by the update:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"3.1.10\" />\r\n```\r\n\r\nHowever, I would argue that it's **incorrect** to allow a range expression in the `Version` attribute anyway. To my mind, the `Version` attribute should specify the **explicit version** of this dependency that is **currently referenced**.\r\n\r\nWhat is needed, in my opinion, is a new attribute on the `PackageReference` node to encapsulate the concept of \"allowed version range\", that won't be mutated when a package is updated. Something like `AllowedVersions`:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"3.1.9\" AllowedVersions=\"(,5.0.0)\" />\r\n```\r\n\r\nWith that implemented, I would expect to open the NuGet UI in VS and only be presented with an option to upgrade to version 3.1.10. The upgrade would then rewrite the csproj to contain the following:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"3.1.10\" AllowedVersions=\"(,5.0.0)\" />\r\n```\r\n\r\nand consequently, the NuGet VS UI would **not** offer me the option to upgrade to version 5.0.0 of the package.\r\n\r\nBy default, `AllowedVersions` would be absent, which would mean the behaviour would be equivalent to NuGet's current \"offer the highest version available\"."},{"Id":"14183837820","Type":"IssuesEvent","CreatedAt":"2020-11-13T14:42:12","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10263","RelatedDescription":"Opened issue \"[Bug Bash][Unstable] Error “failed to add reference to 'Microsoft.Owin.Security.Cookies'” occurred after updating all the packages in ASP.NET Web Application (.NET Framework)-Single Page Application\" (#10263) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.9.0.6966\r\nVS Version: Master\\30712.41\r\nOS: Windows-10-Enterprise-19H2\r\n## Detailed repro steps\r\n1. Open any solution via VS, **(don’t close the solution/VS-it is easy to repro the bug)** click File->New->Project and click the template “ASP.NET Web Application (.NET Framework)”.\r\n2. Type the project name, click the “Create” button and select “Single Page Application”.\r\n3. Open project PM UI, go to “Updates” tab, check “Select all packages” check-box and click “Update” button.\r\n4. Click “OK” button in the prompt “Preview Changes” window.\r\n## Expected\r\nUpdating is successful without any error.\r\n## Actual\r\nError “failed to add reference to 'Microsoft.Owin.Security.Cookies'” occurred in Error List window as below. Repro rate: 20%\r\n![image](https://user-images.githubusercontent.com/20632625/99083973-43d83e00-2601-11eb-9270-cf22bb3bb9f2.png)\r\n## Note\r\n1.Error Message: Failed to add reference to 'Microsoft.Owin.Security.Cookies'.A reference to the component 'Microsoft.Owin.Security.Cookies' already exists in the project.\r\n2.We will verify the regression info later."},{"Id":"14179582898","Type":"IssuesEvent","CreatedAt":"2020-11-13T07:44:55","Actor":"drauch","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10262","RelatedDescription":"Opened issue \"Security: Should random code execution in target files be at least something you warn about?\" (#10262) at NuGet/Home","RelatedBody":"Remove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): current\r\n\r\ndotnet.exe --version (if appropriate): doesn't matter\r\n\r\nVS version (if appropriate): doesn't matter\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): doesn't matter\r\n\r\nWorked before? If so, with which NuGet version: has probably always been a problem\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install https://www.nuget.org/packages/IAmRoot/ NuGet package\r\n\r\n2. Build your solution\r\n\r\n3. Some C# code hidden away in a targets file in the NuGet package is executed on my machine without me noticing\r\n\r\n...\r\n\r\n### Sample Project\r\n\r\nSee https://github.com/augustoproiete/i-am-root-nuget-package\r\n\r\nTo me this sounds like a security flaw in the NuGet design. My understanding was that this is not possible anymore after you removed support for Install/Uninstall.ps1 in NuGet packages. Is there some documentation about the consequences? Is it possible to add warnings if there are target files in the package maybe even only if target files contain arbitrary C# code and/or use tasks which try to go outside the solution directory?\r\n\r\nI haven't thought about all the consequences yet, but this sounds like a problem to me.\r\n\r\nBest regards,\r\nD. R."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-11-15T05:30:38.4223481Z","RunDurationInMilliseconds":1579}