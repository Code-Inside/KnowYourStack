{"Data":{"Blog":{"FeedItems":[{"Title":"Quickly Map Your NuGet Packages to Sources","PublishedOn":"2022-05-04T17:22:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Package Source Mapper\nWhen we introduced Package Source Mapping late last year, we noticed a certain challenge to make onboarding to using the feature easier. Could there be a way for us to...","Href":"https://devblogs.microsoft.com/nuget/quickly-map-your-nuget-packages-to-sources/","RawContent":null},{"Title":"Introducing Central Package Management","PublishedOn":"2022-04-12T16:37:51+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Central Package Management\nDependency management is a core feature of NuGet. Managing dependencies for a single project can be easy. Managing dependencies for multi-project solutions can prove to be...","Href":"https://devblogs.microsoft.com/nuget/introducing-central-package-management/","RawContent":null},{"Title":"Requiring two-factor authentication on NuGet.org","PublishedOn":"2022-02-22T18:27:56+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org will begin requiring two-factor authentication for accounts starting March 8th.\nThe post Requiring two-factor authentication on NuGet.org appeared first on The NuGet Blog.","Href":"https://devblogs.microsoft.com/nuget/requiring-two-factor-authentication-on-nuget-org/","RawContent":null},{"Title":"Introducing Compatible Packages on NuGet.org","PublishedOn":"2022-02-15T21:20:44+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"As part of our ongoing commitment to improve the NuGet ecosystem, today we are excited to introduce a couple new features on NuGet.org to help you determine if a package is compatible with the target...","Href":"https://devblogs.microsoft.com/nuget/introducing-compatible-frameworks-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We're happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come from by...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we're excited to announce that you can pack a `README.md` file in your NuGet package and have it fully rendered on NuGet.org!\nThe post Add a README to Your NuGet Package appeared first on The...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"22713454808","Type":"IssuesEvent","CreatedAt":"2022-07-05T22:08:51","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8476","RelatedDescription":"Closed issue \"[Speculative bug] Package.DownloadCount is going to eventually overflow\" (#8476) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nWe were admiring Json.NET's almost 1 billion download count today. I was curious about the data type used to store this value in the gallery. It looks like [Package.DownloadCount](https://github.com/NuGet/NuGetGallery/blob/be38792c3d3d327765113a32d82cd5b9b68cd1b0/src/NuGet.Services.Entities/Package.cs#L60) is a int32 value and will eventually overflow to negative values. Might be prudent to update that property and everything that touches it to use a 64-bit integer."},{"Id":"22713310549","Type":"PullRequestEvent","CreatedAt":"2022-07-05T21:57:51","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9156","RelatedDescription":"Opened pull request \"Add net6 target to NuGetGallery.Services for support request entities and telemetry\" (#9156) at NuGet/NuGetGallery","RelatedBody":"Next step (following https://github.com/NuGet/ServerCommon/pull/396) in addressing https://github.com/NuGet/Engineering/issues/4434.\r\n\r\nThis change introduces the `net6` target, and excludes many classes from it. Unfortunately there appears to be no globbing support in the `Compile Remove` items, so all classes removed from this target need to be called out explicitly. If there is ongoing work in this target framework, it will take the form of removing these `Remove` items and addressing any issues that arise.\r\n\r\nThis change does retarget some telemetry classes and support database entities, which will be used elsewhere in this work. The class `QuietLog` does not retarget trivially and is not a concerning loss for this piece of the work. Some upstream dependencies are specific to framework webapps ans are not included in the `net6`-targeted build.\r\n\r\n`DurationTracker` was poorly named."},{"Id":"22623621214","Type":"IssuesEvent","CreatedAt":"2022-06-30T08:45:11","Actor":"Willy-Kimura","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9155","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Package signing using USB eTokens not supported\" (#9155) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nNuGet package signing using `nuegt.exe` does not support or recognize cryptographic USB eTokens, only file-based key signing using p12/pfx files. Currently due to this it's literally impossible to upload any of my NuGet packages. The error raised is `Key does not exist.`\n\n### Repro Steps\n\nSimply try using the `nuget sign` command to sign a package while your USB eToken is connected to your device.\n\n### Expected Behavior\n\nThe error raised upon trying to sign is `Key does not exist.` \r\nThis is even when the cryptographic USB eToken is connected.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"22714241146","Type":"IssuesEvent","CreatedAt":"2022-07-05T23:17:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11936","RelatedDescription":"Closed issue \"Reduce redundant SolutionDirectory calculation, special-case template wizard solution directory retrieval\" (#11936) at NuGet/Home","RelatedBody":""},{"Id":"22712049330","Type":"IssuesEvent","CreatedAt":"2022-07-05T20:31:11","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11483","RelatedDescription":"Closed issue \"Prototype reading Vulnerability and Deprecation information from the Search service\" (#11483) at NuGet/Home","RelatedBody":""},{"Id":"22710389955","Type":"IssuesEvent","CreatedAt":"2022-07-05T18:42:08","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11943","RelatedDescription":"Opened issue \"[Feature]: add dotnet nuget why to dotnet CLI\" (#11943) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nThis is a tracking issue for feature request https://github.com/NuGet/Home/issues/11782\n\n### Additional Context and Details\n\n_No response_"},{"Id":"22709739152","Type":"PullRequestEvent","CreatedAt":"2022-07-05T18:01:11","Actor":"msftbot[bot]","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/11337","RelatedDescription":"Closed pull request \"Add dotnet nuget sign verbosity spec\" (#11337) at NuGet/Home","RelatedBody":"The current dotnet nuget sign command is too quiet(https://github.com/NuGet/Home/issues/11173). \r\nThis spec is to define the right output for dotnet nuget sign command in different verbosity options."},{"Id":"22709287229","Type":"PullRequestEvent","CreatedAt":"2022-07-05T17:32:43","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/pull/11925","RelatedDescription":"Closed pull request \"Migrate FabricBot Tasks to Config-as-Code\" (#11925) at NuGet/Home","RelatedBody":"**TL;DR;** Requesting to add [FabricBot](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/fabricbot_overview) configuration associated with your repository to `.github/fabricbot.json`.\r\n\r\n**Context**\r\n\r\nFabricBot is now a [config-as-code-only](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/bot-config-as-code) platform. As a result, while you can still use the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=NuGet/Home) to modify your FabricBot configuration, you can no longer save the changes. The only way to save changes to your configuration at the moment is to _export configuration_ from the portal and upload the exported configuration to `.github/fabricbot.json` in your repository. In this pull request, we are adding your FabricBot configuration to your repository at `.github/fabricbot.json` so that you can make changes to it going forward.\r\n\r\nWhile the [FabricBot Configuration Portal](https://portal.fabricbot.ms/bot/?repo=NuGet/Home) is the *only way* to modify your FabricBot configuration at the moment, we have a feature on our backlog to publish the JSON schema defining the structure of the FabricBot configuration file. With the JSON schema, you can (1) use a plaintext editor of your choice to modify the FabricBot configuration file and use the schema to validate the file after editing or (2) [configure](https://code.visualstudio.com/Docs/languages/json#_json-schemas-and-settings) VS Code to use the schema when editing FabricBot configuration file to take advantage of convenience features such as automatic code completion and field description on mouseover.\r\n\r\n[*Pull Request Create*](https://eng.ms/docs/products/1es-data-insights/merlinbot/extensions/prcreate), a [MerlinBot](https://https://eng.ms/docs/products/1es-data-insights/merlinbot) Extension, was used to automatically create this pull request. If you have any questions or concerns with this pull request, please contact [MerlinBot Expert DRI](mailto:merlinbotdri@microsoft.com).\r\n"},{"Id":"22709120176","Type":"PullRequestEvent","CreatedAt":"2022-07-05T17:22:25","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/11933","RelatedDescription":"Merged pull request \"Adds bot rules for stale PRs\" (#11933) at NuGet/Home","RelatedBody":"Fixes: https://github.com/NuGet/Client.Engineering/issues/1486\r\n\r\n### Description\r\n\r\n- Adds bot rules to handle stale PRs in this repo.\r\n- These rules don't label community PRs\r\n- Rules for removing 'Status:No recent activity' label applies to all open PRs\r\n\r\n### Validation\r\n\r\n- Validated that json parsing syntax is correct with VSCode Problems section.\r\n- Validated a previous ruleset with this PR https://github.com/NuGet/Home/pull/11337 ; bot added 'Statud:No Recent activity' to the PR"},{"Id":"22701243297","Type":"IssuesEvent","CreatedAt":"2022-07-05T10:51:36","Actor":"v-crchang","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11941","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform Sign Verify] The expected error “NU3018: The author primary signature found a chain building issue: UntrustedRoot” disappeared after restoring the project with untrusted signing certificate on Linux\" (#11941) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nDev\\6.3.0.120\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n## Repro steps: \r\n1. Git clone https://github.com/NuGet/Entropy.git\r\n2. Set the following parameters in “pathOnUnix.ps1” file:\r\na. The SDK channel must be: 6.0.4xx\r\nb. The SDK version should be: latest\r\nc. Add a -Quality/--quality argument with a value of: signed\r\n3. Cd /home/jamie/Desktop/SDKPatchTool/ and type in command './patchOnUnix.ps1'\r\n4. Create a new test certificate: `.\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority -Password password -GenerateCerFile`\r\n5. Sign a package: `NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath>`.\r\n6. Launch Microsoft Management Console (mmc.exe)  \r\n7. In Microsoft Management Console, navigate on the main menu to File|\"Add/Romove Snap-in…\"  \r\n8. In the subsequent \"Add or Remove Snap-ins\" dialog, select Certificates in the left-hand list.  \r\n9. Click the Add button.  \r\n10. In the subsequent \"Certificates snap-in\" dialog, select \"My user account.\"  \r\n11. Click the Finish button.  \r\n12. Click the OK button.  \r\n13. In the left-hand tree pane navigate to \"Console Root\" | \"Certificates - Current User\" | \"Trusted Root Certification Authorities\" | Certificates.  \r\n14. In the right-hand list pane, find the certificate that was created in step 4. The certificate \"Issued To\" will be \"Test certificate for testing NuGet package signing\" and the thumbprint will match.  \r\n15. Right-click on the certificate and select Delete.  \r\n16. Copy the signed package from the above Windows machine to Linux machine.\r\n17. Trusted Certificate:\r\na. Use Entropy/CreateTestCertificate.ps1 at [main · NuGet/Entropy (github.com)](https://github.com/NuGet/Entropy.git) to generate a PFX file. Be sure to use the -Password option to secure the file.\r\nb. Copy the PFX file to your Linux machine.\r\nc. Open a Terminal window and execute:\r\n`openssl pkcs12 -in <PfxFilePath> -out <PemFilePath> -nokeys`\r\nWhen prompted, enter the PFX password.\r\nd. Open the PEM file created in step 3.\r\ne. Copy the entire block labelled with BEGIN CERTIFICATE/END CERTIFICATE:\r\n-----BEGIN CERTIFICATE-----\r\n…\r\n-----END CERTIFICATE-----\r\nf. In the versioned directory of your patched .NET SDK open ./trustedroots/codesignctl.pem.\r\ng. At the end of the file on a new blank line, paste the copied certificate in PEM format.\r\nh. Save the file.\r\n18. Create a project, add package reference in the .csproj file\r\n```\r\n<ItemGroup>\r\n<PackageReference Include=\"<packageName>\" Version=\"<packageVersion>\" />\r\n</ItemGroup>\r\n```\r\n19. Add the feed (path contains the signed package), set required mode in nuget.config file with trusted signers list:\r\n```\r\n<packageSources>\r\n<add key=\"<anyname>\" value=\"<signed package parent folder>\" />\r\n<add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n</packageSources>\r\n<config>\r\n<add key=\"signatureValidationMode\" value=\"require\" />\r\n</config>\r\n<trustedSigners>\r\n<author name=\"JamieZhang\">\r\n<certificate fingerprint=\"AAAAA\" hashAlgorithm=\"SHA256\" allowUntrustedRoot=\"false\" />\r\n</author>\r\n</trustedSigners>\r\n```\r\n20. Clear the cache: `<patchedSDKPath>./dotnet nuget locals all –clear`.\r\n21. Delete the <projectPath>/obj folder if there is any.\r\n22. Go inside the project folder, verify the package by running restore: `<patchedSDKPath>./dotnet restore <projectpath>/<projectname>.csproj`\r\n\r\n## Expected:\r\nThe expected error “NU3018: The author primary signature found a chain building issue: UntrustedRoot “ should show after restoring the project.\r\n\r\n## Actual:\r\nThe expected error “NU3018: The author primary signature found a chain building issue: UntrustedRoot”  disappeared after restoring the project.\r\n![image](https://user-images.githubusercontent.com/71433406/177311444-e98b76d7-201c-4a28-b371-a49c746340f6.png)\r\n\r\n## Note\r\nThis is not a regression issue, because it is a new feature.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"22700727373","Type":"IssuesEvent","CreatedAt":"2022-07-05T10:23:33","Actor":"v-longmin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11940","RelatedDescription":"Opened issue \"[Bug]: [Cross-platform sign Verify] The expected error/warning disappeared after restoring the project on Mac\" (#11940) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Client Dev\\6.3.0.102\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n## Repro steps\r\n1. Git clone [https://github.com/NuGet/Entropy.git](https://github.com/NuGet/Entropy.git)\r\n2. Set the following parameters in “pathOnUnix.ps1” file:\r\n    a. The SDK channel must be: 6.0.4xx\r\n    b. The SDK version should be:  latest\r\n    c. Add a -Quality/--quality argument with a value of: signed\r\n3. Cd /home/nuget/Desktop/SDKPatchTool/ and type in command './patchOnUnix.ps1'\r\n4. Create a new test certificate: ` .\\CreateTestCertificate.ps1 -AddAsTrustedRootAuthority -Password password -GenerateCerFile`\r\n5. Sign a package:` NuGet.exe sign <PackageFilePath> -CertificatePath <PfxFilePath>` on NuGet path.\r\n6. Copy the .cer file and signed package from the above Windows machine to Mac machine.\r\n7. Trusted Certificate:\r\n     a. Use Entropy/CreateTestCertificate.ps1 at [main · NuGet/Entropy (github.com)](https://github.com/NuGet/Entropy.git) to generate a PFX file.   Be sure to use the -Password option to secure the file.    \r\n     b. Copy the PFX file to your Linux machine.\r\n     c. Open a Terminal window and execute:\r\n     `   openssl pkcs12 -in <PfxFilePath> -out <PemFilePath> -nokeys`\r\n        When prompted, enter the PFX password.\r\n     d. Open the PEM file created in step 3.\r\n    e. Copy the entire block labelled with BEGIN CERTIFICATE/END CERTIFICATE:\r\n```\r\n\r\n-----BEGIN CERTIFICATE-----\r\n…\r\n-----END CERTIFICATE-----\r\n```\r\n\r\n    f. In the versioned directory of your patched .NET SDK open ./trustedroots/codesignctl.pem.\r\n    g. At the end of the file on a new blank line, paste the copied certificate in PEM format.\r\n    h. Save the file.\r\n8. Add the certificate to trusted store: \r\n`sudo security add-trusted-cert -d -r trustRoot -k \"/Library/KeyChains/System.keychain\" \"<cerFilePath>\"`\r\n9. Create a project, add package reference in the .csproj file\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"<packageName>\" Version=\"<packageVersion>\" />\r\n  </ItemGroup>\r\n```\r\n10. Add the feed (path contains the signed package), set required mode in nuget.config file with trusted signers list:\r\n   ```\r\n<packageSources>\r\n      <add key=\"<anyname>\" value=\"<signed package parent folder>\" />\r\n     <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n   </packageSources>\r\n   <config>\r\n    <add key=\"signatureValidationMode\" value=\"require\" />\r\n   </config>\r\n  <trustedSigners>\r\n     <author name=\"JamieZhang\">       \r\n         <certificate fingerprint=\"AAAAA\" hashAlgorithm=\"SHA256\" allowUntrustedRoot=\"false\" />\r\n     </author>\r\n  </trustedSigners>\r\n```\r\n11. Clear the cache: <patchedSDKPath>`./dotnet nuget locals all –clear`.\r\n12. Delete the <projectPath>/obj folder if there is any.\r\n13.. Go inside the project folder, verify the package by running restore: <patchedSDKPath>`./dotnet restore <projectpath>/<projectname>.csproj`\r\n\r\n## Expected\r\nThe expected error/warning should show after restoring the project.\r\n\r\n## Actual\r\nThe expected error/warning disappeared after restoring the project.\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"22668197814","Type":"IssuesEvent","CreatedAt":"2022-07-03T07:52:50","Actor":"Smartisa","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11939","RelatedDescription":"Opened issue \"How can I  programmatically obtain the NU errors\" (#11939) at NuGet/Home","RelatedBody":"### Discussed in https://github.com/NuGet/Home/discussions/11938\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Smartisa** July  3, 2022</sup>\r\nI can check the \"project assets. json\" file to get the log, but how can I  programmatically obtain the NU errors?\r\n![image](https://user-images.githubusercontent.com/47079990/177030521-267901b7-0f5c-4bba-bba0-4e43174b8107.png)\r\n</div>"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"22334696634","Type":"IssuesEvent","CreatedAt":"2022-06-14T17:23:29","Actor":"JonDouglas","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE 2022-30184 | .NET Information Disclosure Vulnerability\" (#62) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory  CVE 2022-30184 | .NET Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0 and .NET Core 3.1, NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0). This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA vulnerability exists in .NET 6.0, .NET Core 3.1, and NuGet clients (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version range from 3.5.0 to 6.2.0) where a nuget.org credential could be leaked.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/nuget/home/issues. (TBD)\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 6.0.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.11.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.9.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.7.1 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 5.2.0 version or earlier.\r\n- Any NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat 4.9.4 version or earlier.\r\n\r\n### .NET SDK(s)\r\n\r\n- Any .NET 6.0 application running on .NET 6.0.5 or earlier.\r\n- Any .NET 3.1 application running on .NET Core 3.1.25 or earlier.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet.exe, NuGet package, or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0 or .NET Core 3.1 and NuGet (NuGet.exe, NuGet.Commands, NuGet.CommandLine, NuGet.CommandLine.XPlat version 4.9.5, 5.7.2, 5.9.2, 5.11.2, 6.0.2, 6.2.1). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nIf you're using NuGet.exe 6.2.0 or lower, you should download and install 6.2.1 from https://dist.nuget.org/win-x86-commandline/v6.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 6.0.1 or lower, you should download and install 6.0.2 from https://dist.nuget.org/win-x86-commandline/v6.0.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.11.1 or lower, you should download and install 5.11.2 from https://dist.nuget.org/win-x86-commandline/v5.11.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.9.1 or lower, you should download and install 5.9.2 from https://dist.nuget.org/win-x86-commandline/v5.9.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.7.1 or lower, you should download and install 5.7.2 from https://dist.nuget.org/win-x86-commandline/v5.7.2/nuget.exe.\r\n\r\nIf you're using NuGet.exe 5.2.0 or lower, you should download and install 5.2.1 from https://dist.nuget.org/win-x86-commandline/v5.2.1/nuget.exe.\r\n\r\nIf you're using NuGet.exe 4.9.4 or lower, you should download and install 4.9.5 from https://dist.nuget.org/win-x86-commandline/v4.9.5/nuget.exe.\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\nIf you're using .NET Core 6.0, you should download and install Runtime 6.0.6 or SDK 6.0.106 (for Visual Studio 2022 v17.0) or SDK 6.0.301 (for Visual Studio 2022 v17.2) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\nIf you're using .NET Core 3.1, you should download and install Runtime 3.1.26 or SDK 3.1.420 (for Visual Studio 2019 v16.9 or Visual Studio 2011 16.11 or Visual Studio 2022 17.0 or Visual Studio 2022 17.1) from https://dotnet.microsoft.com/download/dotnet-core/3.1\r\n\r\n.NET 6.0 and .NET Core 3.1 updates are also available from Microsoft Update. To access this either type \"Check for updates\" in your Windows search, or open Settings, choose Update & Security and then click Check for Updates.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET 5 or .NET 6.0, please email details to [secure@microsoft.com](secure@microsoft.com). Reports may qualify for the Microsoft .NET Core & .NET 5 Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at [https://github.com/NuGet/NuGet.Client](https://github.com/NuGet/NuGet.Client). The [Announcements repo](https://github.com/NuGet/Announcements/issues) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2022-30184](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30184)\r\n\r\n### Revisions\r\n\r\nV1.0 (June 14, 2022): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2022-06-14_\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1539709411618193409","CreatedAt":"2022-06-22T20:38:24+00:00","UserScreenname":"nuget","Text":"Notice: https://t.co/KVB7werYQh will be read-only from Friday June 24 08:00 PM PDT until 11:59 PM for maintenance.… https://t.co/flURnlZJkk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":14,"RawContent":null},{"Id":"1523796925275054081","CreatedAt":"2022-05-09T22:47:52+00:00","UserScreenname":"nuget","Text":"Happy Monday friends. Fun proposal this week.🎉\n\nGlobal Package Reference for central package management(CPM).… https://t.co/Qb6rqL0e8K","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1521905957651066885","CreatedAt":"2022-05-04T17:33:50+00:00","UserScreenname":"nuget","Text":"📦Quickly Map Your NuGet Packages to Sources📦\n\n🔧 dotnet tool available today on https://t.co/F9kiKfvqkS.\n📍 Single co… https://t.co/vL4fx6HVLt","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":11,"FavoriteCount":9,"RawContent":null},{"Id":"1514312671931346950","CreatedAt":"2022-04-13T18:40:50+00:00","UserScreenname":"nuget","Text":"📦Introducing Central Package Management📦\n\n📥 Manage dependencies in a central location.\n📌 Transitive package version… https://t.co/koNbWTt5m2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":248,"FavoriteCount":75,"RawContent":null},{"Id":"1511771370253864962","CreatedAt":"2022-04-06T18:22:36+00:00","UserScreenname":"nuget","Text":"Hi friends,\n\nTwo fun proposals this week!\n\nPack ProjectReferences - https://t.co/Mvu8bTaq5D 📦\n\nIssue Triage Policy… https://t.co/dTbIa9McB2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1496195887860797445","CreatedAt":"2022-02-22T18:51:12+00:00","UserScreenname":"nuget","Text":"Continuing our commitment to security, https://t.co/F9kiKfvqkS will require two-factor authentication starting on M… https://t.co/U5EIVMPYXI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":21,"RawContent":null},{"Id":"1493700008000073731","CreatedAt":"2022-02-15T21:33:28+00:00","UserScreenname":"nuget","Text":"📦Introducing Compatible Packages 📦\n\n🖼 New Frameworks Tab\n😎 Target Framework Badges\n🧩 Computed Compatibility Table\n🛠… https://t.co/qDUkqayBjC","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":171,"FavoriteCount":43,"RawContent":null},{"Id":"1488563020074737670","CreatedAt":"2022-02-01T17:20:54+00:00","UserScreenname":"nuget","Text":"NuGet is celebrating 20 years of @dotnet with over 290,000 unique packages and 160 billion downloads to date! Tune… https://t.co/kCkBuvp3OW","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":25,"FavoriteCount":12,"RawContent":null},{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2022-07-06T03:30:25.9522084Z","RunDurationInMilliseconds":1535}