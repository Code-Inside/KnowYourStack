{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"38830882785","Type":"PullRequestEvent","CreatedAt":"2024-05-29T22:42:59","Actor":"bruno-garcia","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9982","RelatedDescription":"Opened pull request \"add nuget trends content to csproj\" (#9982) at NuGet/NuGetGallery","RelatedBody":"See: https://github.com/NuGet/NuGetGallery/pull/9737#issuecomment-2104659285\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"38830804475","Type":"IssuesEvent","CreatedAt":"2024-05-29T22:38:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4855","RelatedDescription":"Closed issue \"Expand `dotnet nuget` to include more of the commands that nuget.exe has such as dotnet nuget config \" (#4855) at NuGet/Home","RelatedBody":"`dotnet msbuild` is clever about its project/solution context and knows how to find the right version of msbuild to support the task at hand. This is especially useful for a build agent doing CI/CD work where there are potentially many projects with potentially many tool/sdk/runtime version profiles.\r\n\r\nI think this is equally valuable in `dotnet nuget` commands, as evidenced by the existence of:\r\n\r\n - `dotnet nuget delete`\r\n - `dotnet nuget locals`\r\n - `dotnet nuget push`\r\n - `dotnet pack` (i assume)\r\n\r\nBut when working through automation tasks, I immediately wanted:\r\n\r\n - `dotnet nuget sources`\r\n\r\n > I was trying to dynamically build a `nuget.config` file at the solution level that had the correct PAT/credentials (secret build variables) to access a private nuget feed on a multi-tenant build agent without checking in secrets.\r\n\r\nI could also see an argument for:\r\n\r\n - `dotnet nuget config`\r\n - `dotnet nuget delete`\r\n - `dotnet nuget setapikey`\r\n\r\nI mentioned this to Nate McMaster [here](http://disq.us/p/1gzxs4z), and he encouraged me to take it up in this repository. \r\n\r\nThanks for your time and consideration. Please let me know if there is a better/preferred channel in which to request this sort of feature set.\r\n"},{"Id":"38826493860","Type":"IssuesEvent","CreatedAt":"2024-05-29T19:30:37","Actor":"jeromelaban","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13471","RelatedDescription":"Opened issue \"[source mapping] Having a duplicate source breaks msbuild sdks restore\" (#13471) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\n8.0.300\n\n### Worked before?\n\nunknown\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\n1. Clear all caches: `dotnet nuget locals all -c`\r\n2. Create a library: `dotnet new classlib -o test01`\r\n3. Change the `test01.csproj` sdk to be `Sdk=\"MSTest.Sdk/3.3.1\"`\r\n4. In `%appdata%\\NuGet\\NuGet.Config`. add the following mapping:\r\n```xml\r\n<packageSource key=\"nuget.org\">\r\n        <package pattern=\"System.*\" />\r\n</packageSource>\r\n```\r\n5. In the `test01` folder, create a `nuget.config` file:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n    <packageSources>\r\n        <add key=\"NuGet official package source\" value=\"https://api.nuget.org/v3/index.json\" />\r\n    </packageSources>\r\n</configuration>\r\n```\r\n6. In `classlib01`, run `dotnet restore`\r\n\r\nNotice that if the custom `nuget.config` file added in the project folder is removed or the duplicate nuget.org source is removed, the restore succeeds.\n\n### Verbose Logs\n\n```shell\nD:\\temp\\test01\\test01.csproj : error : Could not resolve SDK \"MSTest.Sdk\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\r\nD:\\temp\\test01\\test01.csproj : error :   SDK resolver \"Microsoft.DotNet.MSBuildWorkloadSdkResolver\" returned null.\r\nD:\\temp\\test01\\test01.csproj : error :   Unable to resolve 'MSTest.Sdk (= 3.3.1)' for '.NETStandard,Version=v0.0'. PackageSourceMapping is enabled, the following source(s) were not considered: Microsoft Visual Studio Offline Packages, NuGet official package source.\r\nD:\\temp\\test01\\test01.csproj : error MSB4236: The SDK 'MSTest.Sdk' specified could not be found.\n```\n"},{"Id":"38826071249","Type":"IssuesEvent","CreatedAt":"2024-05-29T19:14:48","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13470","RelatedDescription":"Opened issue \"Add dotnet SDK CLI command to deprecate NuGet.org packages using deprecation API\" (#13470) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nThere should be a new command to deprecate a NuGet package within the dotnet SDK. Here's an idea for what the command might be called and arguments to deprecate a package version:\r\n\r\n`dotnet nuget deprecate --package-id MyPackage --version 1.2.3 --message \"Deprecated due to critical bug\"`\r\n\r\nIdeally you should be able to deprecate many versions, set the reason, provide an alternative package & package version, and a message of why.\r\n\r\n![image](https://github.com/NuGet/Home/assets/1288848/d9d0d57c-d2f5-437c-bbdd-303722a0a5cc)\r\n\r\n\r\n![image](https://github.com/NuGet/Home/assets/1288848/26b2f102-ae35-473b-95b7-8043a705b96f)\r\n\r\nhttps://learn.microsoft.com/en-us/nuget/nuget-org/deprecate-packages\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38822193331","Type":"IssuesEvent","CreatedAt":"2024-05-29T16:57:41","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13469","RelatedDescription":"Opened issue \"Lint NuGet.config files for common errors, typos, and syntax.\" (#13469) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet SDK\n\n### The Elevator Pitch\n\nWith `nuget.config` as a primary file in the nuget ecosystem, it is manually edited and automatically updated with tooling experiences. This can of course introduce a plethora of problems that may not be found until a user tries to do a nuget operation and their error may not be empowering to the exact problem.\r\n\r\nWe should use the concept of a `nuget.config` specific linter that checks for various problems such as missing syntax in elements, non-matching key/value pairs, invalid/typo package ID/source/file names, and more.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38808300388","Type":"IssuesEvent","CreatedAt":"2024-05-29T10:25:27","Actor":"RichardD2","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13468","RelatedDescription":"Opened issue \"Azure DevOps credentials \"expired\" after a couple of days\" (#13468) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet nuget push\n\n### Worked before?\n\n6.9\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nI use the command-line to publish private NuGet packages to our Azure DevOps artifacts feed, following the connection instructions on the feed.\r\n\r\nNone of my PATs expire before August.\r\n\r\nSince the \"upgrade\" to v6.10, I am now told every 3-5 days that _\"The plugin credential provider could not acquire credentials\"_. I then have to re-run the command with the `--interactive` flag, and obtain _another_ PAT in order to publish.\n\n### Verbose Logs\n\n_No response_"},{"Id":"38794595115","Type":"IssuesEvent","CreatedAt":"2024-05-29T00:52:31","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13467","RelatedDescription":"Opened issue \"Document known issue in 6.10\" (#13467) at NuGet/Home","RelatedBody":"See details in https://github.com/NuGet/Home/issues/13466."},{"Id":"38794453351","Type":"IssuesEvent","CreatedAt":"2024-05-29T00:42:44","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13466","RelatedDescription":"Opened issue \"PackageRestoreData should use the project path instead of the project name when restoring\" (#13466) at NuGet/Home","RelatedBody":"* PackageRestoreData is the type that's used to  represent a package from any packages.config in a single restore operation.\r\nIt contains the deduplicated id and the list of projects names that are relevant to it.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.PackageManagement/IDE/PackageRestoreData.cs#L11-L13\r\n\r\n* On the CLI, these PackageRestoreData name is the project file.\r\n* In VS, this tends to be the project name.\r\n\r\nIn AuditChecker, the PackageRestoreData key is compared to the AuditInfo key: \r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/2d9dbdb4140df7bccbb1df768c64617b661239ff/src/NuGet.Core/NuGet.PackageManagement/Audit/AuditChecker.cs#L224. \r\n\r\nThe problem, project path is unique, while project name isn't required to be. \r\n\r\nWhat this means is that long term, we need to switch from using the name, to using the project path. \r\nThe challenge is that the PackageRestoreData has a lot of usages. \r\n\r\n"},{"Id":"38792985518","Type":"IssuesEvent","CreatedAt":"2024-05-28T23:05:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13465","RelatedDescription":"Opened issue \"Visual Studio and PMC restore/update fail with An item with the same key has already been added\" (#13465) at NuGet/Home","RelatedBody":"https://github.com/NuGet/Home/issues/13456\r\n\r\n```code\r\nPM> Update-Package -reinstall\r\nUpdate-Package : An item with the same key has already been added.\r\nAt line:1 char:1\r\n+ Update-Package -reinstall\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Update-Package], ArgumentException\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand\r\n \r\nPM> $error[0].Exception.StackTrace\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.PackageManagement.PackageRestoreManager.<GetRestoreAuditProperties>d__31.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.PackageRestoreManager.<RestoreMissingPackagesAsync>d__35.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.<CheckMissingPackagesAsync>d__64.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.<<Preprocess>b__39_0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\n   at NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.Preprocess()\r\n   at NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.Preprocess()\r\n   at NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.ProcessRecordCore()\r\n   at NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.ProcessRecord()\r\n``` \r\n"},{"Id":"38791833653","Type":"IssuesEvent","CreatedAt":"2024-05-28T21:59:38","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13464","RelatedDescription":"Opened issue \"Test PushCommand_PushToServer_DoesNotDeadLockWhenSTDOutLarge is flakey\" (#13464) at NuGet/Home","RelatedBody":"`NuGet.CommandLine.Test.NuGetPushCommandTest.PushCommand_PushToServer_DoesNotDeadLockWhenSTDOutLarge` has recently become flakey, failing more often than it passes:\r\n\r\n![image](https://github.com/NuGet/Home/assets/5030577/6cadb415-7cc8-4515-8c50-224920c3c0fa)\r\n\r\nFailure is a timeout:\r\n\r\n> System.TimeoutException : D:\\a_work\\1\\s\\test\\NuGet.Clients.Tests\\NuGet.CommandLine.Test\\bin\\Debug\\net472\\NuGet\\NuGet.exe push D:\\a_work\\1\\s.test\\work\\2321f9dd\\3dcf44ff\\testPackage1.1.1.0.nupkg -Source http://localhost:52429/ad80e31d-b721-4e4f-96b4-f517aee99f01/nuget timed out after 10.04 seconds\r\n"},{"Id":"38765971038","Type":"IssuesEvent","CreatedAt":"2024-05-28T08:51:27","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13463","RelatedDescription":"Opened issue \"Create NuGet.Client nupkgs by packing sln file\" (#13463) at NuGet/Home","RelatedBody":""},{"Id":"38748064414","Type":"IssuesEvent","CreatedAt":"2024-05-27T16:06:27","Actor":"MarkKharitonov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13461","RelatedDescription":"Opened issue \"CPM causes redundant recompilation\" (#13461) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nOther/NA\n\n### Current Behavior\n\nBefore CPM each project lists (typically) the versions of the packages it uses. Suppose we have a unit test project that depends on Moq. A change in its version should not cause recompilation of the entire solution. And this is the behavior we have without CPM, if we reference the version explicitly in the respective `PackageReference`.\r\n\r\nAfter moving to CPM we have to mention the version in the central `Directory.Packages.props` file, which is a dependency of each and every project in the solution. So, changing the version of Moq there causes recompilation of all the projects.\r\n\r\nFor the case of unit tests we can resolve it by structuring the unit test projects in a dedicated sub directory and placing their own `Directory.Packages.props` file there, which could also import the top level one. So, this particular scenario has a workaround.\r\n\r\nHowever, this scenario can be true for any project depending on a unique package. CPM introduces the regression that an update of its package version is now \"the business\" of all the projects.\n\n### Desired Behavior\n\nA desired behavior would be to recompile only those projects which depend on the package which version was updated. \r\n\r\n(Of course, projects depending on the recompiled ones will be recompiled as well, but that is the usual and expected behavior).\n\n### Additional Context\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-05-30T03:30:18.1826694Z","RunDurationInMilliseconds":1068}