{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12942115025","Type":"PullRequestEvent","CreatedAt":"2020-07-18T00:49:55","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7962","RelatedDescription":"Merged pull request \"Clean Elmah\" (#7962) at NuGet/NuGetGallery","RelatedBody":"Clean up Elmah logs of some information."},{"Id":"12942020386","Type":"PullRequestEvent","CreatedAt":"2020-07-18T00:28:44","Actor":"t-mog-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8105","RelatedDescription":"Merged pull request \"Add sorting and filtering UI to Gallery\" (#8105) at NuGet/NuGetGallery","RelatedBody":"This PR adds the UI for Advanced Search to the Gallery. It also changes a the \"There are X packages\" component to use Bootstrap\r\n\r\n![image](https://user-images.githubusercontent.com/65630625/87480711-e5bc2f80-c5fb-11ea-8143-51a461fb632f.png)\r\n\r\n### Phone screen preview\r\n![image](https://user-images.githubusercontent.com/65630625/87583390-ddbac900-c6a9-11ea-9f9f-a8b5cd1b051c.png)\r\n"},{"Id":"12941612406","Type":"PullRequestEvent","CreatedAt":"2020-07-17T23:08:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8112","RelatedDescription":"Merged pull request \"Use OPTIMIZE FOR UNKNOWN for dependents queries\" (#8112) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/8078.\r\n\r\nSome parameter values, such as EPPlus, CsvHelper, and others perform poorly even with up-to-date statistics when using `RECOMPILE`. I have provided these cases to the SQL Server team but in the meantime we can't use the `RECOMPILE` approach. The other suggestion that SQL Server team provided was the `OPTIMIZE FOR UNKNOWN` query hint. This essentially tells SQL Server to treat all parameter values as if they have no statistics (i.e. no dependents at all). This causes SQL Server to use the index that we original anticipated using and added for this purpose. Unfortunately, this query plan is not very fast for very depended upon packages (where the `RECOMPILE` approach really shined).\r\n\r\nI took a data set of the top 1000 package IDs viewed on the display packages package and another sampling of 1000 random packages then compared the new vs. old approach.\r\n\r\nAs you can see, there are several parameter values where the top 5 query with `RECOMPILE` takes well over 10 seconds. This is the crux of the problem with the current implementation.\r\n![image](https://user-images.githubusercontent.com/94054/87811893-3e661500-c814-11ea-963a-d89cf0ee9f63.png)\r\n\r\nThe same package IDs do very well with `OPTIMIZE FOR UNKNOWN`. For the `OPTIMIZE FOR UNKNOWN` implementation, the maximum durations are less extreme and correspond to heavily view pages meaning the in-memory cache will be effective.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/87812115-93099000-c814-11ea-8948-c94b11e62b6d.png)\r\n\r\nFor based on a 1 hour cache duration and 10 nodes, this increased duration will affect only 1.4% of the Newtonsoft.Json page views (i.e. it will only be seen at the 99th percentile). If we feel that this is still unacceptable, we could take some additional steps:\r\n\r\n1. **Done:** Increase cache duration to, say, 8 hours. I propose we do this. There is no code chance, just a JSON config change.\r\n1. **Done:** Use `RECOMPILE` for a specific \"allow list\" of package IDs and `OPTIMIZE FOR UNKNOWN` in other cases. This is not great since it still depends on up-to-date statistics and needs to be manually updated but is perhaps the simplest way to \"get back\" the good perf for Newtonsoft.Json and others.\r\n1. Have a dynamic cache duration based on the number of dependents. Since we only show the top five and a \"1.8K\" form for the total count, the more dependents a package has, the less often this information will significantly change.\r\n1. Update the cache in the background. This complex implementation-wise (today the query is performed in the request context) and it perhaps not great for less viewed packages.\r\n1. Completely redesign the implementation, perhaps based on some new schema or a background job.\r\n\r\nMy proposal is to use `OPTIMIZE FOR UNKNOWN`, update the cache duration to 8 hours (reducing the affected Newtonsoft.Json page views from 1.4% to 0.175%) and carefully watching how it performs in PROD."},{"Id":"12938778011","Type":"PullRequestEvent","CreatedAt":"2020-07-17T17:14:16","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8112","RelatedDescription":"Opened pull request \"Use OPTIMIZE FOR UNKNOWN for dependents queries\" (#8112) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/8078.\r\n\r\nSome parameter values, such as EPPlus, CsvHelper, and others perform poorly even with up-to-date statistics when using `RECOMPILE`. I have provided these cases to the SQL Server team but in the meantime we can't use the `RECOMPILE` approach. The other suggestion that SQL Server team provided was the `OPTIMIZE FOR UNKNOWN` query hint. This essentially tells SQL Server to treat all parameter values as if they have no statistics (i.e. no dependents at all). This causes SQL Server to use the index that we original anticipated using and added for this purpose. Unfortunately, this query plan is not very fast for very depended upon packages (where the `RECOMPILE` approach really shined).\r\n\r\nI took a data set of the top 1000 package IDs viewed on the display packages package and another sampling of 1000 random packages then compared the new vs. old approach.\r\n\r\nAs you can see, there are several parameter values where the top 5 query with `RECOMPILE` takes well over 10 seconds. This is the crux of the problem with the current implementation.\r\n![image](https://user-images.githubusercontent.com/94054/87811893-3e661500-c814-11ea-963a-d89cf0ee9f63.png)\r\n\r\nThe same package IDs do very well with `OPTIMIZE FOR UNKNOWN`. For the `OPTIMIZE FOR UNKNOWN` implementation, the maximum durations are less extreme and correspond to heavily view pages meaning the in-memory cache will be effective.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/87812115-93099000-c814-11ea-8948-c94b11e62b6d.png)\r\n\r\nFor based on a 1 hour cache duration and 10 nodes, this increased duration will affect only 1.4% of the Newtonsoft.Json page views (i.e. it will only be seen at the 99th percentile). If we feel that this is still unacceptable, we could take some additional steps:\r\n\r\n1. Increase cache duration to, say, 8 hours. I propose we do this. There is no code chance, just a JSON config change.\r\n1. Use `RECOMPILE` for a specific \"allow list\" of package IDs and `OPTIMIZE FOR UNKNOWN` in other cases. This is not great since it still depends on up-to-date statistics and needs to be manually updated but is perhaps the simplest way to \"get back\" the good perf for Newtonsoft.Json and others.\r\n1. Have a dynamic cache duration based on the number of dependents. Since we only show the top five and a \"1.8K\" form for the total count, the more dependents a package has, the less often this information will significantly change.\r\n1. Update the cache in the background. This complex implementation-wise (today the query is performed in the request context) and it perhaps not great for less viewed packages.\r\n1. Completely redesign the implementation, perhaps based on some new schema or a background job.\r\n\r\nMy proposal is to use `OPTIMIZE FOR UNKNOWN`, update the cache duration to 8 hours (reducing the affected Newtonsoft.Json page views from 1.4% to 0.175%) and carefully watching how it performs in PROD."},{"Id":"12930535419","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:38","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7652","RelatedDescription":"Closed issue \"Add support for vulnerabilities to Catalog2Registration\" (#7652) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12930534315","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:28","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7651","RelatedDescription":"Closed issue \"Add support for vulnerabilities to Db2Catalog\" (#7651) at NuGet/NuGetGallery","RelatedBody":"- Fetch vulnerabilities from DB\r\n- Update code to put vulnerabilities in catalog"},{"Id":"12930534174","Type":"IssuesEvent","CreatedAt":"2020-07-17T01:38:27","Actor":"drewgillies","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7649","RelatedDescription":"Reopened issue \"Newly pushed packages that are vulnerable should be marked vulnerable on upload/push\" (#7649) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12942227502","Type":"IssuesEvent","CreatedAt":"2020-07-18T01:16:11","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9731","RelatedDescription":"Closed issue \"Investigate the deduplication of NuGetVersion/VersionRange and other read-only object in PackageMetadataResource & SearchResource\" (#9731) at NuGet/Home","RelatedBody":"Use the MetadataReferenceCache to cache strings, NuGetVersion, VersionRange and other types that are read-only."},{"Id":"12941366626","Type":"IssuesEvent","CreatedAt":"2020-07-17T22:26:54","Actor":"jmwolfe","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9816","RelatedDescription":"Opened issue \"VS2017 .NET 4.0 C# class project can't use PackageReference NuGet Package targeted to 4.0\" (#9816) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.6\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 15.8.7\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows Server 2016\r\n\r\nWorked before? If so, with which NuGet version: 3.4.4\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a solution with a csproj file targeted to .NET 4.0\r\n\r\n2. Unload the project and manually add a package reference to smtp-impostor package, version 2.0.8 (latest)\r\n\r\n```<packageReference Include=\"smtp-impostor\" Version=\"2.0.8\" />```\r\n\r\n3. Load the project\r\n\r\n4. Attempt to build solution\r\n\r\nExpected: to download the package and build the project.\r\nObserved: build fails:\r\n\r\nNU1202: Package smtp-impostor 2.0.8 is not compatible with net40\r\n\r\n (.NETFramework,Version=v4.0). Package smtp-impostor 2.0.8 supports: netframework40 (.NetFramework 4.0,Version=v0.0)\r\n...\r\n\r\n## Other suggested things\r\nThis also happens using msbuild. Does not happen using nuget 3.4.4 CLI with package.config style reference.\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\nHere's the command line output of nuger5.6, which is probably very close to what VS uses by default.\r\n[nuget56log.txt](https://github.com/NuGet/Home/files/4940539/nuget56log.txt)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n[DemoOfUninstallablePackage.zip](https://github.com/NuGet/Home/files/4940592/DemoOfUninstallablePackage.zip)\r\n"},{"Id":"12940141397","Type":"IssuesEvent","CreatedAt":"2020-07-17T19:41:52","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9777","RelatedDescription":"Closed issue \"Create separate test assembly for NuGet tests\" (#9777) at NuGet/Home","RelatedBody":""},{"Id":"12940024143","Type":"IssuesEvent","CreatedAt":"2020-07-17T19:28:34","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9815","RelatedDescription":"Opened issue \"Improve unit test coverage of OutputConsoleLogger\" (#9815) at NuGet/Home","RelatedBody":"OutputConsoleLogger is significantly updated to enable fully asynchronous UI logging, which triggered issue https://github.com/NuGet/Home/issues/9798. We need to improve unit testing of the class to prevent further regressions."},{"Id":"12939188981","Type":"IssuesEvent","CreatedAt":"2020-07-17T17:56:37","Actor":"erdembayar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9814","RelatedDescription":"Opened issue \"Investigate possible SourceRepository memory leak\" (#9814) at NuGet/Home","RelatedBody":"## Details about Problem\r\nIt looks we have memory leak with `SourceRepository`. I was working on another [problem](https://github.com/NuGet/NuGet.Client/pull/3507) then I noticed SourceRepository is not GC-ed even after PM UI is closed.\r\nEven after I closed whole solution and I did forced GC it's still there.\r\n\r\n![image](https://user-images.githubusercontent.com/8766776/87816355-082c9380-c81c-11ea-884a-b3c4dd8104c7.png)\r\n\r\nWorked before? No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open large solution like Cortona.\r\n2. Open PM UI and browse through all tabs then close it.\r\n3. Repeat Step 2 few more times.\r\n4. Close/unload the solution.\r\n5. Check memory dump  after GCed.\r\nYou'll see 7 instances of SourceRepository even after whole solution is closed/unloaded.\r\n"},{"Id":"12937237818","Type":"IssuesEvent","CreatedAt":"2020-07-17T14:47:46","Actor":"KKacer","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9809","RelatedDescription":"Closed issue \"Random behavior of Nuget on not containing content files, and some strange errors\" (#9809) at NuGet/Home","RelatedBody":"I used something like the code below in my .csproj file, but still Nuget is placing these contents in its generated package:\r\n\r\n      <ItemGroup>\r\n        <Content Include=\"build\\**\" IncludeInPackage=\"false\" Pack=\"false\" />\r\n      </ItemGroup>\r\n\r\n--------\r\n\r\nWant those content files just for the usage in the current source, and don't want them to be included in the nuget package.\r\n\r\nThis is a .Net Core project, and don't like to add a nuspec file as I guess it is not needed.\r\n\r\nIt seems a random behavior, cause I have hundreds of packages in my local repository, checked all generated by the same approach and seems all were correct.\r\nSuch difficulties and issues happened tens of times with other packages in different times, which solved them by dirty tricks like clearing obj/bin, close/restart VS, restart win, changing the project version, and some other things that I may not remember now.\r\n\r\nUnfortunately about the same package I got some strange errors which\r\nbut the problem is not about the package itself.\r\n\r\n**The errors:**\r\n\r\n------------------\r\n\r\n**Error 1:**\r\n\r\n    =====================\r\n    7/16/2020 10:13:11 AM\r\n    LimitedFunctionality\r\n    Microsoft.VisualStudio.ProjectSystem.ProjectException: \r\n    Failed to create the item \r\n    \"C:\\Users\\Pc\\.nuget\\packages\\xxxx.emailing\\0.8.5\\contentFiles\\any\\netstandard2.1\\package.csproj\" \r\n    ---> Microsoft.Assumes+InternalErrorException: \r\n    ProjectTree is in the invalid state: project item 'package.csproj' with flags:\r\n    (ProjectTreeFlags: ProjectImportImplicit FileOnDisk ProjectImport FileSystemEntity) was found under '' with flags(ProjectTreeFlags: BubbleUp DisableAddItemFolder VirtualFolder).\r\n    \r\n       at Microsoft.Assumes.Fail(String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       --- End of inner exception stack trace ---\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(Exception innerException, String unformattedMessage, Object[] args)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(Exception innerException, String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.HandleAddedItems(IProjectTree tree, IImmutableDictionary`2 projectData, IProjectChangeDescription change, IEnumerable`1 addedItems, ConfiguredProjectExports configuredProjectExports)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.OnProjectSubscriptionChanged(IProjectTree originalTree, ConfiguredProjectExports configuredProjectExports, PhysicalProjectTreeInputData updateInput, CancellationToken cancellationToken)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n       at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>g__action|0()\r\n       at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )\r\n    ===================\r\n\r\n**Error 2:**\r\nAfter doing some of those dirty tricks and playing more with the code, the error changed a bit\r\n\r\n```\r\n    =====================\r\n    7/16/2020 12:29:30 PM\r\n    LimitedFunctionality\r\n    Microsoft.VisualStudio.ProjectSystem.ProjectException: \r\n    Failed to create the item \"C:\\Users\\Pc\\.nuget\\packages\\xxxx.emailing\\0.8.7\\contentFiles\\any\\netstandard2.1\\build.targets\" ---> Microsoft.Assumes+InternalErrorException: ProjectTree is in the invalid state: \r\n    project item 'build.targets' with flags:\r\n    (ProjectTreeFlags: FileOnDisk ProjectImport FileSystemEntity) \r\n    was found under '' with flags(ProjectTreeFlags: \r\n    BubbleUp DisableAddItemFolder VirtualFolder).\r\n       at Microsoft.Assumes.Fail(String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       --- End of inner exception stack trace ---\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectExceptionHelper(Exception innerException, String unformattedMessage, Object[] args)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorUtilities.ThrowProjectException(Exception innerException, String message)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.FindOrCreateItem(IProjectTree tree, IImmutableDictionary`2 projectData, ConfiguredProjectExports configuredProjectExports, String ruleName, String itemName)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.HandleAddedItems(IProjectTree tree, IImmutableDictionary`2 projectData, IProjectChangeDescription change, IEnumerable`1 addedItems, ConfiguredProjectExports configuredProjectExports)\r\n       at Microsoft.VisualStudio.ProjectSystem.Designers.PhysicalProjectTreeProvider.OnProjectSubscriptionChanged(IProjectTree originalTree, ConfiguredProjectExports configuredProjectExports, PhysicalProjectTreeInputData updateInput, CancellationToken cancellationToken)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n       at Microsoft.VisualStudio.ProjectSystem.CommonProjectSystemTools.Rethrow(Exception ex)\r\n       at Microsoft.VisualStudio.ProjectSystem.ProjectErrorReporting.<>c__DisplayClass6_0.<SubmitErrorReport>b__0()\r\n       at Microsoft.VisualStudio.ProjectSystem.ExceptionFilter.<>c__DisplayClass2_0.<Guard>g__action|0()\r\n       at GuardMethodClass.GuardMethod(Func`1 , Func`2 , Func`2 )\r\n    ===================\r\n```\r\nHad hundreds of different versions of nuget packages in my local repository, and everything was working perfectly, once I was playing and updating some of the nugets the happened.\r\n\r\nSurprisingly, there was nothing on the internet.\r\n\r\nThis is one of the most irritating errors I got, cause don't know, and can't guess what really may happened and what could be the issue, the most probable solution remained that I can guess could be to restart windows, after clearing every possible cache.\r\nDon't know Nuget from where and how generate those wrong contents repeatedly.\r\n\r\nEarlier there was a project that I was forced to start it from the ground up.\r\nFor another project Nuget repeatedly was setting the location of the contents somewhere else, and got forced to add a Nuspec file to let it know where is the exact target location though I set it ealier in the .csproj file.\r\n\r\nI could have made more issue/bug report here, but now was able to post one after seeing some kind of behavior repeatedly which these are really irritating.\r\n\r\nUsing Visual Studio latest version, built the packages via VS build menu.\r\nProjects are as simple as:\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n```\r\n  <PropertyGroup>\r\n    <!-- <TargetFrameworks>netcoreapp3.1;netstandard2.0;netstandard2.1;netcoreapp3.0;net472</TargetFrameworks> -->\r\n    <TargetFramework>netstandard2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n// with some contents like the ones posted earlier.\r\n```"},{"Id":"12936747235","Type":"IssuesEvent","CreatedAt":"2020-07-17T14:02:21","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9813","RelatedDescription":"Opened issue \"Proposal: VS API to be notified when a restore completes\" (#9813) at NuGet/Home","RelatedBody":"Probably should only fire when the restore was not a noop.\r\n\r\nRequest from the live unit testing team in order to be able to reliable and efficiently locate test adapters."},{"Id":"12930269854","Type":"IssuesEvent","CreatedAt":"2020-07-17T00:55:52","Actor":"srdjanjovcic","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9812","RelatedDescription":"Opened issue \"FileAndForget posts a new event for every point of usage\" (#9812) at NuGet/Home","RelatedBody":"## Details about Problem\n\nFor fire-and-forget asynchronous code, we are currently using VSTelemetryHelpers.FireAndForget helper to log any failures from detached async code. This method is implements so that there is a specific event for every point of failure.\n\nFor GDPR categorization and ease of investigating those failures, it may be useful to always post same event, and carry additional context information in description and exception stack trace."},{"Id":"12929553209","Type":"IssuesEvent","CreatedAt":"2020-07-16T23:01:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9811","RelatedDescription":"Closed issue \"Create VS API: GetSourcesAsync\" (#9811) at NuGet/Home","RelatedBody":"Request from https://github.com/dotnet/roslyn/pull/46022/files#r456003371\r\n\r\nCurrently Roslyn calls `IVsPackageSourceProvider.GetSources`, which gets the sources for the current solution. I don't believe it takes into account additional sources that can be set for PackageReference projects. Therefore, we should consider if the new API is in `INuGetProjectService` and start returning per-project sources, or create a new `INuGetSolutionService` for a more equivalent API."},{"Id":"12929519604","Type":"IssuesEvent","CreatedAt":"2020-07-16T22:56:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9811","RelatedDescription":"Opened issue \"Create VS API: GetSourcesAsync\" (#9811) at NuGet/Home","RelatedBody":"Request from https://github.com/dotnet/roslyn/pull/46022/files#r456003371\r\n\r\nCurrently Roslyn calls `IVsPackageSourceProvider.GetSources`, which gets the sources for the current solution. I don't believe it takes into account additional sources that can be set for PackageReference projects. Therefore, we should consider if the new API is in `INuGetProjectService` and start returning per-project sources, or create a new `INuGetSolutionService` for a more equivalent API."},{"Id":"12928983429","Type":"IssuesEvent","CreatedAt":"2020-07-16T21:43:41","Actor":"tmat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9810","RelatedDescription":"Opened issue \"SourceRoots not set correctly from NuGetPackageFolders\" (#9810) at NuGet/Home","RelatedBody":"The generated props file for the project (`git-test1\\obj\\git-test1.csproj.nuget.g.props`) contains:\r\n\r\n```xml\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">C:\\Users\\<user-name>\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder</NuGetPackageFolders>\r\n  </PropertyGroup>\r\n...\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <SourceRoot Include=\"$([MSBuild]::EnsureTrailingSlash($(NuGetPackageFolders)))\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis adds a **single** item to SourceRoot with ItemSpec = `C:\\Users\\Tomas\\.nuget\\packages\\;C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`. Instead, we need 2 items: `C:\\Users\\<user-name>\\.nuget\\packages\\` and `C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\`.\r\n\r\nPossible fix:\r\n```xml\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n     <_NuGetPackageFolders Include=\"$(NuGetPackageFolders)\" NormalizedPath=\"$([MSBuild]::EnsureTrailingSlash(%(Identity)))\" />\r\n    <SourceRoot Include=\"@(_NuGetPackageFolders->'%(NormalizedPath)')\" />\r\n  </ItemGroup>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"},{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-07-18T05:30:43.0102323Z","RunDurationInMilliseconds":2243}