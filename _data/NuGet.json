{"Data":{"Blog":{"FeedItems":[{"Title":"Getting Started With NuGet 5.8","PublishedOn":"2020-11-13T16:26:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Getting started with NuGet 5.8\nNuGet 5.8 is included in Visual Studio 16.8 and .NET 5.0 out of the box. You can also download NuGet 5.8 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/getting-started-with-nuget-5-8/","RawContent":null},{"Title":"The Microsoft author signing certificate will be updated as soon as November 1st, 2020","PublishedOn":"2020-10-22T22:30:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by November 1st, 2020 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/","RawContent":null},{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"14220654044","Type":"IssuesEvent","CreatedAt":"2020-11-17T14:47:48","Actor":"jzabroski","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8325","RelatedDescription":"Closed issue \"Nuget Package Version History sorting is incorrect for prerelease suffixes\" (#8325) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nNuGet Package Version History sorting is incorrect.  It sorted lexicographically rather than understanding the package versioning schema for beta releases.\r\n\r\nAs an example, RazorLight2.0.0-beta9 comes above RazorLight2.0.0-beta10.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Open web browser (mine is Chrome)\r\n2. Go to https://www.nuget.org/packages/RazorLight\r\n3. Expand \"Version History\" accordion control\r\n4. Observe that it sorts packages by major version number, but when you use prerelease suffixes, the sorting breaks.\r\n\r\n### Expected behavior\r\nWhy not just sort it by last updated date?\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/447485/99278405-fde7c980-27fc-11eb-9f09-a391ea63c2b2.png)\r\n\r\n\r\n### Additional context\r\nhttps://docs.microsoft.com/en-us/nuget/create-packages/prerelease-packages#semantic-versioning implies that `-alpha`, `-beta`, and `-rc` are well known pre-release tags, so it seems natural to expect these pre-release tags to also include version numbers and that these suffix version numbers to sort correctly.\r\n\r\nAlso, note that for packages like [Newtonsoft.Json](https://www.nuget.org/packages/Newtonsoft.Json/), where the major versions cross from 9 to 10, the major.minor.patch convention sorts correctly, so it seems like the issue is confined to just pre-release tags.  I realize pre-release tags can be any value, but the nuget docs literally suggest sticking with `-alpha`, `-beta`, and `-rc`"},{"Id":"14214492991","Type":"PullRequestEvent","CreatedAt":"2020-11-17T05:23:20","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8322","RelatedDescription":"Closed pull request \"scroll ui\" (#8322) at NuGet/NuGetGallery","RelatedBody":"Not ready for review. "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"14228452162","Type":"IssuesEvent","CreatedAt":"2020-11-18T03:50:36","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10290","RelatedDescription":"Closed issue \"[nuget.org] 无法加载源 https://api.nuget.org/v3/index.json 的服务索引。\" (#10290) at NuGet/Home","RelatedBody":"还原 NuGet 程序包时出错: 无法加载源 https://api.nuget.org/v3/index.json 的服务索引。\r\n[nuget.org] 无法加载源 https://api.nuget.org/v3/index.json 的服务索引。\r\n  发送请求时出错。\r\n  基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。\r\n  根据验证过程，远程证书无效。\r\n\r\n\r\n\r\n\r\nPM> Install-Package Dapper -Version 2.0.35\r\n正在还原 D:\\2020.11.16\\PDMcontrol\\PDMcontrol\\PDMcontrol.csproj 的包...\r\nInstall-Package : 无法加载源 https://api.nuget.org/v3/index.json 的服务索引。\r\n  发送请求时出错。\r\n  基础连接已经关闭: 未能为 SSL/TLS 安全通道建立信任关系。\r\n  根据验证过程，远程证书无效。\r\n所在位置 行:1 字符: 16\r\n+ Install-Package <<<<  Dapper -Version 2.0.35\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\n已用时间: 00:01:24.1254173\r\n\r\n\r\n"},{"Id":"14228001306","Type":"PullRequestEvent","CreatedAt":"2020-11-18T02:41:01","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/10295","RelatedDescription":"Merged pull request \"Mark improper file name case spec as implemented\" (#10295) at NuGet/Home","RelatedBody":"This design's implementation was merged in https://github.com/NuGet/NuGet.Client/pull/3754\r\n\r\nI also fixed the title of the spec since it still said \"warn\" after we changed the issues to result in an error."},{"Id":"14227984858","Type":"PullRequestEvent","CreatedAt":"2020-11-18T02:38:24","Actor":"PathogenDavid","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/10295","RelatedDescription":"Opened pull request \"Mark improper file name case spec as implemented\" (#10295) at NuGet/Home","RelatedBody":"This design's implementation was merged in https://github.com/NuGet/NuGet.Client/pull/3754\r\n\r\nI also fixed the title of the spec since it still said \"warn\" after we changed the issues to result in an error."},{"Id":"14227786886","Type":"IssuesEvent","CreatedAt":"2020-11-18T02:09:05","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9817","RelatedDescription":"Closed issue \"NU5030 license file existence check should always use a case-sensitive comparison\" (#9817) at NuGet/Home","RelatedBody":"When you attempt to create a NuGet package with a license file that doesn't exist, NuGet will complain with NU5030:\r\n\r\n```\r\nThe license file 'LICENSE.txt' does not exist in the package.\r\n```\r\n\r\nHowever, [this check uses an OS-dependent string comparison](https://github.com/NuGet/NuGet.Client/blob/1f1213960012d6452b63a267607d1e237318025e/src/NuGet.Core/NuGet.Packaging/PackageCreation/Authoring/PackageBuilder.cs#L588).\r\n\r\nThis isn't correct as NuGet packages are zip files, which use case-sensitive paths. As a result, using the wrong case for the `license` element results in an invalid package.\r\n\r\n--------------\r\n\r\nConsider [this modified PackageLicenseFileExample](https://github.com/PathogenPlayground/Samples/blob/master/PackageLicenseFileExample/PackageLicenseFileExample.csproj) from NuGet/Samples. Namely the typo made to `PackageLicenseFile`:\r\n\r\n```xml\r\n<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>\r\n```\r\n\r\nRunning `dotnet pack` results in a \"successful\" nupkg:\r\n\r\n![image](https://user-images.githubusercontent.com/278957/87859745-13a3bb80-c8fd-11ea-8d1b-d2b438cb346c.png)\r\n\r\nAttempting to upload this package to NuGet.org results in an error:\r\n\r\n![image](https://user-images.githubusercontent.com/278957/87859778-464db400-c8fd-11ea-9d19-230c87285e92.png)\r\n\r\nIf you put the package into a local feed and attempt to view the license from Visual Studio 2019 (16.6.4) you'll get an error:\r\n\r\n![image](https://user-images.githubusercontent.com/278957/87859796-7ac17000-c8fd-11ea-8953-64fc9606c831.png)\r\n\r\nI also tried an old instance of Nexus Package Manager, which did accept the package. (However that may be more due to the fact that it doesn't understand embedded licenses.) I did not check how any other package servers reacted to the broken package.\r\n\r\n--------------\r\n\r\n## Versions and stuff from the issue template\r\n\r\nNuGet product used: `dotnet` and `VS UI`.\r\n\r\nNuGet version: Whatever `dotnet` is using under the hood. (The old `nuget.exe` I have kicking around in my environment is 4.8.1.5435)\r\n\r\ndotnet.exe --version: 5.0.100-preview.6.20318.15\r\n\r\nVS version: 16.6.4\r\n\r\nOS version: Windows 10 v1909 (18363.959)\r\n\r\nWorked before? Unlikely, Git blame suggests [this check has always worked this way](https://github.com/NuGet/NuGet.Client/pull/2450/files#diff-7d862ed9e52e34d5ee39d6ccbf6f8a7cR494).\r\n\r\n--------------\r\n\r\nI considered submitting a PR to fix this, but it is unclear whether this change can be made or if it should be a new warning instead to avoid a backwards compatibility issues. (Especially considering the package is still valid to package servers which aren't aware of embedded license files.)"},{"Id":"14227395336","Type":"IssuesEvent","CreatedAt":"2020-11-18T01:11:27","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8867","RelatedDescription":"Closed issue \"Pack includes content brought in through dependency packages into the current project's package (SDK based projects only)\" (#8867) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS 2019 \r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 16.3.8\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10.0.14393 x64\r\n\r\nWorked before? If so, with which NuGet version: -\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nI have been using the `PrivateAssets=\"all\"` option for a long time. It works great for `PackageReference`. Now I needed to use some content file in my project and I could not achieve the desired behavior with `PrivateAssets=\"all\"`. I want to build \"base\" package with one file `data.json` which should be consumed in \"top\" package but should not be exposed further to consumers of the \"top\" package.\r\n\r\nMy \"base\" package:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"data.json\">\r\n      <PackagePath>contentFiles/any/any/data.json</PackagePath>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe result seems to be good for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69996708-a573d980-1563-11ea-8069-bb275803e1fb.png)\r\n\r\nMy \"top\" package:\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"BasePackage\" Version=\"1.0.0\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe Result is unexpected for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69997235-bc66fb80-1564-11ea-8c80-23e46bfa7cdb.png)\r\n\r\nWhy is the file again in the content section? This file is a development dependency, some sort of settings file. The \"base\" package is a package with Roslyn analyzers and the settings file - `data.json`. I do not present the analyzers used for clarity. For them, `PrivateAssets` works as it should - they do not fall into the dependencies of the \"base\" package. But for the settings file - `data.json`, I can’t get the same behavior.\r\n\r\nI spent a lot of time resolving this issue and it seems to me that I do not see any obvious solution, which is somewhere nearby. I will be very grateful for the advice.\r\n\r\n"},{"Id":"14225507001","Type":"IssuesEvent","CreatedAt":"2020-11-17T21:21:43","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10294","RelatedDescription":"Opened issue \"Implement dotnet nuget config command\" (#10294) at NuGet/Home","RelatedBody":"Implement the equivalent dotnet command of  `nuget config` command"},{"Id":"14225216637","Type":"IssuesEvent","CreatedAt":"2020-11-17T20:53:39","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10293","RelatedDescription":"Opened issue \"`nuget.exe` and `dotnet.exe nuget` feature parity\" (#10293) at NuGet/Home","RelatedBody":"Both NuGet Command Line Interfaces should have the same functionality but, they can differ in applicability\r\n"},{"Id":"14224729721","Type":"IssuesEvent","CreatedAt":"2020-11-17T20:07:23","Actor":"marcpopMSFT","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10292","RelatedDescription":"Opened issue \"dotnet restore on a VM breaks my internet connection and fails with errors\" (#10292) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#14290**\r\n- Please respond to @Loreno10.\r\n\r\n---\r\n\r\n_From @Loreno10 on Thursday, October 22, 2020 5:47:40 PM_\r\n\r\nI have a Windows 10 as a host and a Pop! OS 20.04 installed using Hyper-V (enhanced session enabled, if that matters).\r\n\r\nIn the VM I have installed dotnet-sdk-3.1 and https://github.com/microsoft/artifacts-credprovider (since my dotnet project uses private NuGet feeds).\r\n\r\nI have a .NET Core project inside of the Pop! OS VM. I'm trying to restore the dependencies using `dotnet restore`. As soon as I invoke that command, my internet connection breaks (both in the VM and the host). \r\nThe `dotnet restore` itself throws lots of errors like this one:\r\n\r\n> The SSL connection could not be established, see inner exception. Unable to read data from the transport connection: Connection reset by peer.\r\n\r\nSometimes there are also timeouts.\r\n\r\nWhen I do `dotnet restore --interactive` the only difference is that initially I am asked to perform DEVICE authentication in the browser by providing some code. After that the same issue happens.\r\n\r\nThe only thing that helps in that situation is to stop the `dotnet restore` process and to turn off and turn back on my wi-fi connection (in the host). Only that restores my internet connection.\r\n\r\nI tried the same steps multiple times:\r\n\r\n1. Run `ping 8.8.8.8` in one terminal window (on Pop! OS)\r\n2. Run `dotnet restore` in the other terminal window (on Pop! OS)\r\n\r\nAround 2 seconds after I do the second step, ping from the first terminal stops receiving responses.\r\n\r\nWhat could be wrong? My VM uses the \"Default Switch\" of Hyper-V. I did not do any special network setup. It's just a fresh installation of Pop! OS 20.04.\r\n\r\nThe same project resolved completely fine on my host and on an Ubuntu VM."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"14085142486","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:13:18","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Reopened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085138089","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:37","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Closed issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"14085135191","Type":"IssuesEvent","CreatedAt":"2020-11-05T00:12:10","Actor":"jcjiang","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/48","RelatedDescription":"Opened issue \"November dry run for custom V2 OData query deprecation\" (#48) at NuGet/Announcements","RelatedBody":"\r\nWe announced the deprecation of custom V2 OData queries (https://github.com/NuGet/Announcements/issues/37) last year and we will begin blocking endpoints used by 3rd party clients in **February 2021**. \r\n\r\nWe will conduct **a dry run of the OData deprecation** to ensure that there are no surprises for users, which is scheduled to ensure overlap with normal working hours across the globe. The goal is to help you identify systems that may be affected and will give you an opportunity to take action before we permanently remove support for select v2 endpoints.\r\n \r\nThere will be two stages in the brown-out to accommodate a variety of usage scenarios. During these times, we will be heavily monitoring social media and other communication channels to address questions and concerns. \r\n\t· **Nov. 11, 2020** – 3 time slots in a 24 hour period, for 4 hours each\r\n\t· **Nov. 17 & 18, 2020**  – 48 hours\r\n\r\nPlease let us know about your questions or concerns on [this discussion post](https://github.com/NuGet/NuGetGallery/issues/7423).\r\n \r\nRefer to the table below to identify the test slot time in your time zone.\r\n\t· UTC-9 to UTC-2 – [Green test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Green+slot&iso=20201111T07&p1=3923&ah=4)\r\n\t· UTC-1 to UTC+6 – [Yellow test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Yellow+slot&iso=20201111T07&p1=3915&ah=4)\r\n\t· UTC+7 to UTC-10 – [Blue test slot](https://www.timeanddate.com/worldclock/fixedtime.html?msg=NuGet.org+OData+deprecation+test+-+Blue+slot&iso=20201111T07&p1=3909&ah=4)\r\n"},{"Id":"13954039266","Type":"IssuesEvent","CreatedAt":"2020-10-23T18:59:24","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Opened issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1324411161400410112","CreatedAt":"2020-11-05T18:00:01+00:00","UserScreenname":"nuget","Text":"⚠️Deprecation notice⚠️\n\nCustom OData queries for V2 will be deprecated February 2021. We are conducting a dry run n… https://t.co/EMJ8Pxk2Tk","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":6,"RawContent":null},{"Id":"1323738883708780544","CreatedAt":"2020-11-03T21:28:38+00:00","UserScreenname":"nuget","Text":"⚠️Degradation notification ⚠️\n\nhttps://t.co/F9kiKfdOWi is currently experiencing issues that are causing symbols do… https://t.co/91qXwN97Tc","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1319417289721237504","CreatedAt":"2020-10-22T23:16:10+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS security update 📢\n\nThe Microsoft author signing certificate will be updated as soon as Nove… https://t.co/8K5EKbdJii","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null},{"Id":"1313223356037070848","CreatedAt":"2020-10-05T21:03:41+00:00","UserScreenname":"nuget","Text":"The issue has been resolved! Symbols uploads and downloads should be working normally again 🙌 https://t.co/gBCmJX9bfX","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":0,"RawContent":null},{"Id":"1313196985135116288","CreatedAt":"2020-10-05T19:18:53+00:00","UserScreenname":"nuget","Text":"⚠️ Degradation notification ⚠️ \n\n https://t.co/F9kiKfvqkS is currently experiencing issues that are causing symbols… https://t.co/bBvIO0Es1l","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1310789025461137408","CreatedAt":"2020-09-29T03:50:31+00:00","UserScreenname":"nuget","Text":"Users with AAD accounts shouldn't have any issue logging into https://t.co/F9kiKfvqkS now 😌 Thank you for your pati… https://t.co/MIlacn490w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":0,"FavoriteCount":1,"RawContent":null},{"Id":"1310736265076236288","CreatedAt":"2020-09-29T00:20:52+00:00","UserScreenname":"nuget","Text":"⚠ Due to issues impacting Azure AD Authentication, some users may be unable to log into https://t.co/F9kiKfvqkS wit… https://t.co/XQ7pA0vl8a","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":2,"RawContent":null},{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":21,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-11-18T05:30:43.2509658Z","RunDurationInMilliseconds":1790}