{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"19314236598","Type":"IssuesEvent","CreatedAt":"2021-12-13T19:30:12","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8858","RelatedDescription":"Closed issue \"[Bug] Remove sync over async from hot path\" (#8858) at NuGet/NuGetGallery","RelatedBody":"# Problem \r\nWe use sync over async whenever a request *references* the database:\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/73c5d8a9531af49dbc1f631ab6e308bfb7583533/src/NuGetGallery/App_Start/DefaultDependenciesModule.cs#L953-L956\r\n\r\n**This affects any request that references the database context**, _even if it does not actually use the database_. In other words, this happens in the hot path of almost all our requests, including hijacked V2 requests. This effectively requires two threads to resolve dependencies, thereby causing thread pool starvation:\r\n\r\n![Untitled picture](https://user-images.githubusercontent.com/737941/138521103-9dcf3cc7-24bd-4d2d-99e6-d0b48ea624b3.png)\r\n\r\nNotice how there are 245 incoming request threads, but 418 total threads processing ASP.NET Core requests. This doubling is caused by our use of sync over async.\r\n\r\n# Solution\r\n\r\nAdd a path that attempts to create a SQL connection synchronously. If this attempt cannot complete synchronously (say secrets or AAD access tokens need to be refreshed), retry but this time using sync over async. Something like:\r\n\r\n```cs\r\nprivate static DbConnection CreateDbConnection(ISqlConnectionFactory connectionFactory)\r\n{\r\n    // Attempt to create a connection using cached secrets and AAD token.\r\n    // The vast majority of requests should be able to complete synchronously.\r\n    if (connectionFactory.TryGet(out var connection)\r\n    {\r\n      return connection;\r\n    }\r\n\r\n    // Secrets or AAD token are near expiry or already expire.\r\n    // Use sync-over-async to allow refreshing the token or secrets.\r\n    // This blocks the calling thread and creates a new connection using\r\n    // a threadpool thread. This may result in threadpool starvation.\r\n    return Task.Run(() => connectionFactory.CreateAsync()).Result;\r\n}\r\n```\r\n\r\nThis requires adding synchronous paths in:\r\n\r\n1. Secret injector\r\n1. Secret reader\r\n2. AAD token cache\r\n\r\n# Guidance\r\n\r\nSee this guidance on sync over async: https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md#warning-sync-over-async\r\n\r\n> Using `Task.Result` or `Task.Wait` to block wait on an asynchronous operation to complete is MUCH worse than calling a truly synchronous API to block. This phenomenon is dubbed \"Sync over async\". Here is what happens at a very high level:\r\n> \r\n> An asynchronous operation is kicked off.\r\n> The calling thread is blocked waiting for that operation to complete.\r\n> When the asynchronous operation completes, it unblocks the code waiting on that operation. This takes place on another thread.\r\n> The result is that we need to use 2 threads instead of 1 to complete synchronous operations. This usually leads to [thread-pool starvation](https://docs.microsoft.com/en-us/archive/blogs/vancem/diagnosing-net-core-threadpool-starvation-with-perfview-why-my-service-is-not-saturating-all-cores-or-seems-to-stall) and results in service outages.\r\n>\r\n> ...\r\n>\r\n> ```cs\r\n> public string DoOperationBlocking()\r\n> {\r\n>     // Bad - Blocking the thread that enters.\r\n>     // DoAsyncOperation will be scheduled on the default task scheduler, and remove the risk of deadlocking.\r\n>     // In the case of an exception, this method will throw an AggregateException wrapping the original exception.\r\n>     return Task.Run(() => DoAsyncOperation()).Result;\r\n> }\r\n> ```\r\n"},{"Id":"19304797744","Type":"IssuesEvent","CreatedAt":"2021-12-13T10:21:32","Actor":"nikkidreamt","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8908","RelatedDescription":"Opened issue \"t[NuGet.org Bug]: Intel corp. cannot upload packages since Dec,9 to nuget.org with API\" (#8908) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nWe use a command:\r\nfor f in $(find <path> -name \"*.nupkg\" ); do echo $f; curl -H 'X-NuGet-ApiKey:<apikey>' -H 'X-NuGet-Protocol-Version: 4.1.0' -f -S --fail https://www.nuget.org/api/v2/package -X PUT -F \"data=@$f\" --ciphers AES256-SHA\r\n\r\n\r\nThe response is:\r\n[12:37] Perestoronin, Andrey\r\n* Trying 52.240.159.111...\r\n* TCP_NODELAY set\r\n* Connected to www.nuget.org (52.240.159.111) port 443 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* Cipher selection: AES256-SHA\r\n* successfully set certificate verify locations:\r\n* CAfile: /etc/ssl/certs/ca-certificates.crt\r\nCApath: /etc/ssl/certs\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.2 (OUT), TLS change cipher, Client hello (1):\r\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.2 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.2 / AES256-SHA\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n* subject: C=US; ST=WA; L=Redmond; O=Microsoft Corporation; CN=*.nuget.org\r\n* start date: Oct 28 04:20:43 2021 GMT\r\n* expire date: Oct 23 04:20:43 2022 GMT\r\n* subjectAltName: host \"www.nuget.org\" matched cert's \"*.nuget.org\"\r\n* issuer: C=US; O=Microsoft Corporation; CN=Microsoft Azure TLS Issuing CA 02\r\n* SSL certificate verify ok.\r\n> PUT /api/v2/package HTTP/1.1\r\n> Host: www.nuget.org\r\n> User-Agent: curl/7.58.0\r\n> Accept: */*\r\n> X-NuGet-ApiKey:oy2bknffughhqg3r32lauzvflbf6d67e3m6m5qgzset5pu\r\n> X-NuGet-Protocol-Version: 4.1.0\r\n> Content-Length: 16320443\r\n> Content-Type: multipart/form-data; boundary=------------------------d0cc924f276fc3fd\r\n> Expect: 100-continue\r\n>\r\n< HTTP/1.1 100 Continue\r\n**< HTTP/1.1 201 Created**\r\n< Cache-Control: private, s-maxage=0\r\n< Transfer-Encoding: chunked\r\n< Request-Context: appId=cid-v1:338f6804-b1a9-4fe3-bba7-c93064e7ae7b\r\n< Access-Control-Expose-Headers: Request-Context\r\n< Content-Security-Policy: frame-ancestors 'none'\r\n< X-Frame-Options: deny\r\n< X-XSS-Protection: 1; mode=block\r\n< X-Content-Type-Options: nosniff\r\n< Strict-Transport-Security: max-age=31536000; includeSubDomains\r\n< Set-Cookie: ARRAffinity=a772f7d26114a351ca4c91c481fd64df4c1b791d3577c9c23a1751ba712cdd47;Path=/;HttpOnly;Secure;Domain=nuget-prod-v2gallery-appservice.trafficmanager.net\r\n< Set-Cookie: ARRAffinitySameSite=a772f7d26114a351ca4c91c481fd64df4c1b791d3577c9c23a1751ba712cdd47;Path=/;HttpOnly;SameSite=None;Secure;Domain=nuget-prod-v2gallery-appservice.trafficmanager.net\r\n< Date: Mon, 13 Dec 2021 09:36:35 GMT\r\n<\r\n* Connection #0 to host www.nuget.org left intact\r\n\r\nBut we don't see the packages on nuget.org yet.\r\nThe list pf packages we tried to upload:\r\n\r\nonevpl.devel.win-x64.2022.0.0.59.nupkg\r\nonevpl.runtime.win-x64.2022.0.0.59.nupkg\r\nintelipp_crypto.devel.linux-x64.2021.5.0.445.nupkg\r\nintelipp_crypto.devel.linux-x86.2021.5.0.445.nupkg\r\nintelipp_crypto.nonpic.linux-x64.2021.5.0.445.nupkg\r\nintelipp_crypto.nonpic.linux-x86.2021.5.0.445.nupkg\r\nintelipp_crypto.static.linux-x64.2021.5.0.445.nupkg\r\nintelipp_crypto.static.linux-x86.2021.5.0.445.nupkg\r\nintelmpi.devel.win-x64.2021.5.0.474.nupkg\r\nintelmpi.redist.win-x64.2021.5.0.474.nupkg\r\ninteltbb.devel.linux.2021.5.0.707.nupkg\r\nintelmpi.devel.linux-x64.2021.5.0.495.nupkg\r\nintelopenmp.devel.linux.2022.0.0.3623.nupkg\r\nintelopenmp.static.linux.2022.0.0.3623.nupkg\r\nintelopenmp.devel.win.2022.0.0.3663.nupkg\r\nintelopenmp.redist.win.2022.0.0.3663.nupkg\r\nintelipp.devel.win-x64.2021.5.0.528.nupkg\r\nintelipp.devel.win-x86.2021.5.0.528.nupkg\r\nintelipp.redist.win-x64.2021.5.0.528.nupkg\r\nintelipp.redist.win-x86.2021.5.0.528.nupkg\r\nintelipp.static.win-x64.2021.5.0.528.nupkg\r\nintelipp.static.win-x86.2021.5.0.528.nupkg\r\nintelmkl.devel.cluster.win-x64.2022.0.0.115.nupkg\r\nintelmkl.devel.win-x64.2022.0.0.115.nupkg\r\nintelmkl.devel.win-x86.2022.0.0.115.nupkg\r\nintelmkl.redist.cluster.win-x64.2022.0.0.115.nupkg\r\nintelmkl.redist.win-x64.2022.0.0.115.nupkg\r\nintelmkl.redist.win-x86.2022.0.0.115.nupkg\r\nintelmkl.static.cluster.win-x64.2022.0.0.115.nupkg\r\nintelmkl.static.win-x64.2022.0.0.115.nupkg\r\nintelmkl.static.win-x86.2022.0.0.115.nupkg\r\nonednn.cpu_iomp.devel.win-x64.2022.0.0.19.nupkg\r\nonednn.cpu_iomp.redist.win-x64.2022.0.0.19.nupkg\r\nonednn.cpu_tbb.devel.win-x64.2022.0.0.19.nupkg\r\nonednn.cpu_tbb.redist.win-x64.2022.0.0.19.nupkg\r\nonednn.cpu_vcomp.devel.win-x64.2022.0.0.19.nupkg\r\nonednn.cpu_vcomp.redist.win-x64.2022.0.0.19.nupkg\r\ninteldaal.devel.win-x64.2021.5.0.796.nupkg\r\ninteldaal.redist.win-x64.2021.5.0.796.nupkg\r\ninteldaal.static.win-x64.2021.5.0.796.nupkg\r\ninteldal.devel.win-x64.2021.5.0.796.nupkg\r\ninteldal.redist.win-x64.2021.5.0.796.nupkg\r\ninteldal.static.win-x64.2021.5.0.796.nupkg\r\ninteltbb.devel.win.2021.5.0.714.nupkg\r\ninteltbb.redist.win.2021.5.0.714.nupkg\r\n\r\n\r\nIntel Corp.\r\n\r\n\n\n### Repro Steps\n\n- Call https://www.nuget.org/api/v2/package api\r\n- expect to see packages on https://www.nuget.org/\n\n### Expected Behavior\n\nto see packages on https://www.nuget.org/\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"19293302105","Type":"IssuesEvent","CreatedAt":"2021-12-12T06:22:42","Actor":"WhiteBlackGoose","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8907","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Never remembers my account\" (#8907) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nThe problematic device - Ipad on 14.4 IpadOS. On my Windows laptop it works fine.\r\n\r\n1. I fill in my MSFT Account\r\n2. It then sends me a verification email\r\n3. I confirm and check \"Never ask again on this device\"\r\n4. I check \"Never log out on this device\" (or something, it's unfortunately localised)\r\n\r\nNow, within less than a day it completely forgets my account.\n\n### Repro Steps\n\nSee Describe the bug\n\n### Expected Behavior\n\nExpected - it won't log out me at all.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"19292894401","Type":"PullRequestEvent","CreatedAt":"2021-12-12T04:22:12","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8906","RelatedDescription":"Opened pull request \"Gallery API request count tracking by endpoint as metric\" (#8906) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/4133 (without user agent consideration).\r\n\r\nAdded support for client-side metric pre-aggregation as I see no reason to have each individual request tracked as an instance of a metric: AI metrics are not subject for sampling, and we are getting millions of API requests per hour. Non-preaggregated metric would waste resources.\r\n\r\nThere seems to be two options for submitting sample for pre-aggregation:\r\n1. By calling [`Metric.TrackValue`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metric.trackvalue?view=azure-dotnet) that has no overload that accepts any kind of list of dimension values.\r\n2. By obtaining a [`MetricSeries`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metrics.metricseries?view=azure-dotnet) object by calling [`Metric.TryGetDataSeries`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.applicationinsights.metric.trygetdataseries?view=azure-dotnet) (which does have an overload accepting an *array* of dimension values) and then call its `TrackValue` method.\r\n\r\nNone of those accepts a dictionary of dimensions names and dimension values (I'd guess, order matters in this case and dictionary enumeration does not produce stable sequence of keys). I chose to go with the first approach to provide dictionary-like interface (and eliminate the possibility of mismatching dimension names with values) to add dimensions and not to waste time/memory converting the list of values to an array. Because of that, I had to write that ugly switch of `TrackValue` calls.\r\n\r\nWith pre-aggregation, AI SDK sends pre-aggregated metrics once per minute (default aggregation interval).\r\n\r\nAdded telemetry calls to all public methods of `ODataV1FeedController` and `ODataV2FeedController`."},{"Id":"19230451238","Type":"IssuesEvent","CreatedAt":"2021-12-08T02:29:31","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7441","RelatedDescription":"Closed issue \"Dispose DI container every job loop of JsonConfigurationJob\" (#7441) at NuGet/NuGetGallery","RelatedBody":"Today, every time `JsonConfigurationJob.Init` is called, a new DI container is created replacing the reference to the previous one in `_serviceProvider`:\r\nhttps://github.com/NuGet/NuGet.Jobs/blob/1b6f4a0bf6605fb676cccca6a839cabdb5c17f2a/src/NuGet.Jobs.Common/JsonConfigurationJob.cs#L66\r\n\r\nThis is a pit to fall in because DI containers can contain `IDisposable` instances (in particular singletons) and if we never dispose the previous container then the `IDisposable` instances inside of it will never be disposed, leading to leaks.\r\n\r\nIn short, a DI container is considered to \"own\" instances and `IDisposable` instances handed out by the DI container are typically the container's job to dispose -- especially singletons.\r\n\r\nThe `AutofacServiceProvider` container from Autofac.Extensions.DependencyInjection 4.2.0 does not implement `IDisposable` but the Autofac `IContainer` inside of it does. We should:\r\n\r\n1. [x] Update to Autofac.Extensions.DependencyInjection version 4.3.0 or later\r\n    - See https://autofac.readthedocs.io/en/latest/integration/aspnetcore.html#id3. We need this to make `AutofacServiceProvider` disposable\r\n1. [x] Dispose the previous instance, if non-null. It will be non-null after the first job loop.\r\n\r\nAfter this is done we can safely put `IDisposable` things in the DI container.\r\n"},{"Id":"19230439464","Type":"IssuesEvent","CreatedAt":"2021-12-08T02:28:09","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8905","RelatedDescription":"Opened issue \"[Feature]: Put each job iteration into its own DI scope for JsonConfigurationJob descendants.\" (#8905) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nFollow up on https://github.com/NuGet/NuGetGallery/issues/7441.\n\n### The Elevator Pitch\n\nCurrently, DI container used in jobs that are based on `JsonConfigurationJob` is [disposed](https://github.com/NuGet/NuGet.Jobs/blob/af2c64924403c12ae45e5edb6012c23f052cea0e/src/NuGet.Jobs.Common/JsonConfigurationJob.cs#L83) on every job iteration. This may lead to an expensive object recreation on each iteration.\r\n\r\nInstead, we can consider introducing a scope for each job iteration which would allow jobs to specify which objects are to be recreated on each iteration and which ones to transcend them.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"19227048407","Type":"PullRequestEvent","CreatedAt":"2021-12-07T20:56:28","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8904","RelatedDescription":"Merged pull request \"Change to official NuGet.exe for tests (4.5.0 private build -> 4.5.3)\" (#8904) at NuGet/NuGetGallery","RelatedBody":"Before we moved to app services, we did not have a HTTPS-compatible domain name for staging slot on gallery. Now we do :). We can move away from a private build of nuget.exe which allowed for specific certificates to be trusted even for domain name mismatch.\r\n\r\nI tried moving to 5.11.0 but this caused some test failures which need not be investigated or fixed at this time.\r\n\r\nThe private build of nuget.exe that is being replaced here is only test signed which means that a strong name bypass must be installed on the test agent. This is not ideal for centrally managed test agents.\r\n\r\nWith this change, we can run Gallery functional tests on managed agents that have the proper dependencies installed (namely VS 2015)."},{"Id":"19226804649","Type":"PullRequestEvent","CreatedAt":"2021-12-07T20:36:48","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8904","RelatedDescription":"Opened pull request \"Change to official NuGet.exe for tests (4.5.0 private build -> 4.5.3)\" (#8904) at NuGet/NuGetGallery","RelatedBody":"Before we moved to app services, we did not have a HTTPS-compatible domain name for staging slot on gallery. Now we do :). We can move away from a private build of nuget.exe which allowed for specific certificates to be trusted even for domain name mismatch.\r\n\r\nI tried moving to 5.11.0 but this caused some test failures which need not be investigated or fixed at this time.\r\n\r\nThe private build of nuget.exe that is being replaced here is only test signed which means that a strong name bypass must be installed on the test agent. This is not ideal for centrally managed test agents.\r\n\r\nWith this change, we can run Gallery functional tests on managed agents that have the proper dependencies installed (namely VS 2015)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"19318410483","Type":"IssuesEvent","CreatedAt":"2021-12-14T00:44:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11406","RelatedDescription":"Closed issue \"Package Source Mapping: Difficulty using it on Azure DevOps CI because it ends up needing `feed-` prefixes in the source mapping configuration.\" (#11406) at NuGet/Home","RelatedBody":"## Maintainer Edit\r\n\r\n**The Azure DevOps problems occur when the DotNetCoreCLI  is used. \r\nThe recommendation is to *stop* using the DotNetCoreCLI task and use NuGetAuthenticate for authentication and then use a Command Line Task to invoke `dotnet`.**\r\n\r\nSee: https://github.com/NuGet/Home/issues/11406#issuecomment-982096484\r\n\r\n### NuGet Product(s) Involved\r\n\r\nNuGet.exe, dotnet.exe\r\n\r\n### The Elevator Pitch\r\n\r\nWe tried to adapt the new package source mapping feature today, and found one case which is missing.\r\nIf I understand it correctly, the main reason behind the source mapping is, to accidentally restore internal nuget packages from nuget.org (ofc not the whole reason, but for me at least the biggest part of the cake).\r\n\r\nLet's try this test setup from your [blog post](https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/):\r\n```\r\n<packageSourceMapping>\r\n  <packageSource key=\"nuget.org\">\r\n    <package pattern=\"*\" />\r\n  </packageSource>\r\n  <packageSource key=\"contoso.com\">\r\n    <package pattern=\"Contoso.*\" />\r\n  </packageSource>\r\n</packageSourceMapping>\r\n```\r\n\r\nThis basically specifies, that everything can be resolved via nuget.org, but for Contoso.* contoso.com should be used. Fine. But based from the log, it is still parsed as `Package source mapping matches found for package ID 'PACKAGE' are: 'nuget.org,feed-orga-project'.`\r\n\r\nBased on the documentation, the closest match is used, therefore contoso.com should be used. But what happens, when contoso.com is not available (for whatever reason)? Will it then fall back to nuget.org? Definitely not the thing I would like to configure.\r\n\r\nI guess it would be nice if there would be an exclude feature. Because I don't really care, if nuget packages are restored via nuget.org or an internal feed, but I would like to make sure, that internal packages can only be restored by the internal feed.\r\n\r\nOr am I missing anything?\r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"19316493921","Type":"IssuesEvent","CreatedAt":"2021-12-13T21:52:35","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11316","RelatedDescription":"Closed issue \"[Bug]: Nuget fails if an empty folder not present\" (#11316) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\n6.0.100-rc.2.21505.57\n\n### Worked before?\n\n-\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nAfter reinstalling VS2019 and opening a solution I worked on before (reinstalled because VS became corrupted as a result of an extension error) I saw that solution had some missing packages, which was to be expected, I tried to build so that they would be re-acquired and got the following errors:\r\n\r\n```\r\nThe local source 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages' doesn't exist.\t\t\r\n\r\nUnable to find fallback package folder 'CProgram Files (x86)Microsoft Visual StudioSharedNuGetPackages'\t\t\r\n```\r\n\r\nCreating an empty folder at the specified location worked as a workaround, but now there is an empty folder just hanging there, probably covering a deeper issue, Note: attaching log as a file because of length limits for issues. Log is made by removing the manually created folder and running a verbose dotnet build command\r\n[log.log](https://github.com/NuGet/Home/files/7357518/log.log)\r\n\r\nAlso my nuget .config file looks like this:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n    <add key=\"Microsoft Visual Studio Offline Packages\" value=\"C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\" />\r\n    <add key=\"Stride\" value=\"https://packages.stride3d.net/nuget\" />\r\n  </packageSources>\r\n  <packageRestore>\r\n    <add key=\"enabled\" value=\"True\" />\r\n    <add key=\"automatic\" value=\"True\" />\r\n  </packageRestore>\r\n  <bindingRedirects>\r\n    <add key=\"skip\" value=\"False\" />\r\n  </bindingRedirects>\r\n  <packageManagement>\r\n    <add key=\"format\" value=\"0\" />\r\n    <add key=\"disabled\" value=\"False\" />\r\n  </packageManagement>\r\n</configuration>\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"19316031942","Type":"IssuesEvent","CreatedAt":"2021-12-13T21:18:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11402","RelatedDescription":"Closed issue \"[DCR]: improve HTTP authentication flow for package sources\" (#11402) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nVS doesn't appear to have a well-defined UI for prompting for NuGet package source credentials. For some (not all?) users, there was a message in **Output** that simply asked the user to use interactive mode for authentication. This is cumbersome, because an IDE _is_ already the interactive mode, and it isn't clear for a user how to proceed.\r\n\r\nInstead, the answer appears to be: ignore the IDE and instead use the CLI tooling to edit the source and enter credentials there.\n\n### Desired Behavior\n\nIdeally, Tools | Options | NuGet | Sources would have additional UI, such as a `[x] This source requires credentials` checkbox. Either, ticking it reveals further `Login` / `Password` fields, or, they come up as a dialog the first time you try to access that source.\n\n### Additional Context\n\nWe recently moved a NuGet server that used to be behind a VPN to a public machine, but behind HTTP authentication."},{"Id":"19292345841","Type":"IssuesEvent","CreatedAt":"2021-12-12T01:42:28","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11451","RelatedDescription":"Opened issue \"[Bug]: Avoid explicitly casting the result of GetService/GetServiceAsync, use the extension methods instead\" (#11451) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Product Version\n\nVS\n\n### Worked before?\n\n_No response_\n\n### Impact\n\n_No response_\n\n### Repro Steps & Context\n\nAddress https://github.com/NuGet/NuGet.Client/pull/4324/files#r737866598\n\n### Verbose Logs\n\n_No response_"},{"Id":"19287325191","Type":"IssuesEvent","CreatedAt":"2021-12-11T06:38:57","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11450","RelatedDescription":"Opened issue \"[DCR]: NuGet SDK resolver should cache global.json itself\" (#11450) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nMSBuild.exe, dotnet.exe\n\n### Current Behavior\n\nCurrently the NuGet SDK resolver relies on the MSBuild SDK resolver APIs to save state.  However, the state is not guaranteed to be thread-safe and so currently the NuGet SDK resolver is parsing global.json many times by Visual Studio.  This is because the state is only set after a resolver completes and the cache key is a build submission.  Visual Studio issues several design time builds will load global.json over and over.\r\n\r\n\n\n### Desired Behavior\n\nThe NuGet SDK resolver should have its own file cache that only loads a file once unless it has changed.\n\n### Additional Context\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1470426335705239557","CreatedAt":"2021-12-13T16:12:12+00:00","UserScreenname":"nuget","Text":"Hey friends, 👋\n\nWe just published another proposal to bring machine readable json output for dotnet list package co… https://t.co/iffXek2eSz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":165,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"1410695861508526080","CreatedAt":"2021-07-01T20:24:37+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠ \nHave you recently experienced issues interacting with https://t.co/KVB7werYQh's Search API?… https://t.co/3eM1gicePx","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2021-12-14T05:30:31.3626877Z","RunDurationInMilliseconds":1483}