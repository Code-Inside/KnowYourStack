{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"39368218034","Type":"IssuesEvent","CreatedAt":"2024-06-17T15:57:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8323","RelatedDescription":"Closed issue \"Dotnet Tools don't show Framework Dependencies\" (#8323) at NuGet/NuGetGallery","RelatedBody":"### Dotnet Tools don't show Framework Dependencies\r\nDotnet tools published to the NuGet site do not show a framework dependency in the online listing. \r\n\r\nThis is a problem if a package fails to install due a missing framework and the user needs to find a version that works - there's no way to find a version that might have a lower framework dependency.\r\n\r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/1374013/98994268-9f0c1280-24d3-11eb-9336-067bdae9a5eb.png)\r\n\r\nIf I get an error message upon install like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1374013/98994299-acc19800-24d3-11eb-87b8-f8d69c7ccab4.png)\r\n\r\n\r\nI can't even look for an older version (in this case the previous version) that runs on an older framework (3.1 in 0.2.16) because that info isn't displayed.\r\n\r\n### Solution\r\nShow the .NET Core Target Framework dependency. It's odd that this isn't shown since non-tool packages shows the framework target information."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"39381124485","Type":"IssuesEvent","CreatedAt":"2024-06-18T01:09:14","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13559","RelatedDescription":"Opened issue \"PERF: Version and VersionRange allocations are very prevalent in profiles of Roslyn solution load\" (#13559) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5862 for more details\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\n\n### Verbose Logs\n\n_No response_"},{"Id":"39380467472","Type":"PullRequestEvent","CreatedAt":"2024-06-18T00:28:49","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13514","RelatedDescription":"Merged pull request \"Update Owner Author spec to indicate author is always shown for IntelliCode Suggestions\" (#13514) at NuGet/Home","RelatedBody":"The implementation as of now will be that Recommended packages will never shown Known Owner, so reflect this in the spec.\r\n\r\n[Rendered](https://github.com/NuGet/Home/blob/3b1cecf65e08da6e199a7d8896d5a7385d3aba7d/accepted/2023/owner-author-pmui.md)"},{"Id":"39379042515","Type":"IssuesEvent","CreatedAt":"2024-06-17T23:04:19","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13558","RelatedDescription":"Opened issue \"PERF: LockFileFormat is filled completely when common callers only need some of the data\" (#13558) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5857 for more details\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\n\n### Verbose Logs\n\n_No response_"},{"Id":"39378944869","Type":"IssuesEvent","CreatedAt":"2024-06-17T22:59:10","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13557","RelatedDescription":"Opened issue \"PERF: Unnecessary construction of LockFileItem.Properties dictionary\" (#13557) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5861 for more details\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\n\n### Verbose Logs\n\n_No response_"},{"Id":"39378609792","Type":"IssuesEvent","CreatedAt":"2024-06-17T22:41:19","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13556","RelatedDescription":"Opened issue \"PERF: GetPackageInfo allocates by unnecessarily calling GetNupkgMetadataPath\" (#13556) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5859 for more details\r\n\r\nRepro:\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\r\nAllocations during FallbackPackagePathResolver.GetPackageInfo:\n\n### Verbose Logs\n\n_No response_"},{"Id":"39377725226","Type":"IssuesEvent","CreatedAt":"2024-06-17T21:58:42","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13554","RelatedDescription":"Closed issue \"Force PackageReference to target a specific TFM\" (#13554) at NuGet/Home","RelatedBody":"@zivkan Is there a way to force PackageReference to target a specific TFM? As an alternative (and improvement) to AssetTargetFallback.\r\n\r\nI think there is a design flaw/bug in how nuget transitive restore works in the case of net48 projects that reference a package that targets netstandard2.0 that transitively references a package that targets both netstandard2.0 and net462.\r\n\r\nIn my case, System.Diagnostics.DiagnosticSource is a messy nuget package that claims to support net462, except .NET Framework 4.6.2 does **not** have the Logger field, so telemetry packages emit a ton of the same repeat message: \"The parameters to the Event method do not match the parameters to the WriteEvent method. This may cause the event to be displayed incorrectly.\"  I'd love to tell my ASP.NET Classic Website that targets net48 to fallback to netstandard2.0 for just this package.\r\n\r\nThe crux of the problem appears to be [`GetReferenceNearestTargetFrameworkTask`](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/GetReferenceNearestTargetFrameworkTask.cs) assumes I want net462 rather than netstandard2.0, but I'm not certain!\r\n\r\nThe following does not seem to work, because the first pass finds net462 (when almost everyone expects a net48 project to use netstandard2.0 if available):\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <AssemblyTitle>My.Web</AssemblyTitle>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <AssetTargetFallback>netstandard2.0;$(AssetTargetFallback)</AssetTargetFallback>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Autofac.Mvc5\" Version=\"6.1.0\" />\r\n    <!-- This Autofac.Web package references System.Diagnostics.DiagnosticSource 7.0.2 -->\r\n    <PackageReference Include=\"Autofac.Web\" version=\"7.0.0\" />\r\n    <!--10.x is the last version that supports .NET Framework -->\r\n    <PackageReference Include=\"AutoMapper\" Version=\"[10.1.1,11.0.0)\" />\r\n    <!-- 4.x is the last version that supports .NET Framework -->\r\n    <PackageReference Include=\"AutoMapper.Extensions.ExpressionMapping\" Version=\"[4.1.5,5.0.0)\" />\r\n    <PackageReference Include=\"Microsoft.AspNet.Mvc\" Version=\"5.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n> I think the problem is that .NETCoreApp (.NET Core and .NET 5+) is not directly compatible with .NET Framework. The [.NET SDK defines asset target fallback](https://github.com/dotnet/sdk/blob/e5ead6cdcf50378e109ed03b4507fbd4f6aed55a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.BeforeCommon.targets#L181). However, since NuGet finds that netstandard2.1 asset, asset target fallback is not used, hence the .NET Framework runtime asset is NOT compatible. Your package needs netstandard2.1 runtime assets.\r\n> \r\n> To see AssetTargetFallback in action, you need a package with only .NET Framework assets, then reference the package from a project targeting .NET Framework. NuGet will raise a warning that the package was used, but might not be fully compatible, because there are bunch of .NET Framework APIs that don't work on .NET (Core), and if the package uses any of those APIs, the app will crash at runtime, which is basically what different TFM versions and TFM compatibility is trying to avoid.\r\n> \r\n> But to reiterate the point, in order to reenforce its understanding, **Asset Target Fallback works in two passes. First, NuGet attempts to do asset selection without any asset target fallback. if any assets match, from any asset class (compile, runtime, content files, build) finds a compatible asset, then asset target fallback will NOT be used. Only when NONE of the asset classes find any matches, then NuGet will try asset target fallback.**\r\n> \r\n> Therefore, projects that are compatible with .NET Standard 2.1, they will not select .NET Framework assets in a different asset class. This is by design because .NET Framework and .NET Core App are not \"guaranteed\" to be compatible. In fact, there are known API and runtime differences.\r\n> \r\n> _Originally posted by @zivkan in https://github.com/NuGet/Home/issues/12972#issuecomment-1791260350_\r\n            "},{"Id":"39375569469","Type":"IssuesEvent","CreatedAt":"2024-06-17T20:25:21","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13543","RelatedDescription":"Closed issue \"[Bug Bash] The searching mode “packageid:[PackageName]” should also be supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab\" (#13543) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nDev\\6.11.0.96\r\n\r\n### Worked before?\r\n\r\nIt’s not a regression since it reproes on D16.11\\34601.136 with implicit NuGet Client 5.11.6.4.\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\n#### Repro Steps: \r\n1.\tCreate a solution with two C# Console App (.NET 8.0) projects (called Project1 and Project2), right-click the solution in the Solution Explorer window and select the menu item “Manage NuGet Packages for Solution…”..\r\n2.\tGo to ‘Browse’ tab, install the package **‘jQuery 3.5.0’** into **Project1** and install the package **‘jQuery 3.6.0’** into **Project2**.\r\n3.\tIn the right panel, select the ‘3.5.0’ in the drop-down list of ‘Version’ box and click the alternate package link ‘jQuery>=3.5.0.1’.\r\n4.\t**Don’t delete the searching string “packageid:[PackageName]”** in the filter and click the ‘Installed’/’Updates’/’Consolidate’ tab.\r\n\r\n#### Expected Results:\r\nThe searching mode “packageid:[PackageName]” should also be supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab. There should be the package ‘jQuery’ listed in ‘Installed’/’Updates’/’Consolidate’ tab in this instance.\r\n\r\n#### Actual Result:\r\nThe searching mode “packageid:[PackageName]” is not supported in the filter of ‘Installed’/’Updates’/’Consolidate’ tab as below screenshot. It doesn’t make sense because the searching mode “packageid:[PackageName]” is supported in ‘Browse’ tab.\r\n![image](https://github.com/NuGet/Home/assets/20632625/0c41df51-5659-4755-b41b-dc223ba2a2ec)\r\n\r\n#### Notes:\r\nRepro Rate: 100%\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"39371913319","Type":"IssuesEvent","CreatedAt":"2024-06-17T18:09:30","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13555","RelatedDescription":"Opened issue \"Narator reads the same error for sources that `allowInsecureConnections` and that don't\" (#13555) at NuGet/Home","RelatedBody":"I did some accessibility testing on the PMUI that lists sources and the narator reads the same error for sources that `allowInsecureConnections` and that don't."},{"Id":"39346149499","Type":"IssuesEvent","CreatedAt":"2024-06-17T02:41:47","Actor":"jzabroski","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13554","RelatedDescription":"Opened issue \"Force PackageReference to target a specific TFM\" (#13554) at NuGet/Home","RelatedBody":"@zivkan Is there a way to force PackageReference to target a specific TFM?\r\n\r\nIn my case, System.Diagnostics.DiagnosticSource is a messy nuget package that claims to support net462, except .NET Framework 4.6.2 does **not** have the Logger field, so telemetry packages emit a ton of the same repeat message: \"The parameters to the Event method do not match the parameters to the WriteEvent method. This may cause the event to be displayed incorrectly.\"  I'd love to tell my ASP.NET Classic Website that targets net48 to fallback to netstandard2.0 for just this package.\r\n\r\nThe crux of the problem appears to be [`GetReferenceNearestTargetFrameworkTask`](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/GetReferenceNearestTargetFrameworkTask.cs) assumes I want net462 rather than netstandard2.0, but I'm not certain!\r\n\r\nThe following does not seem to work:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <AssemblyTitle>My.Web</AssemblyTitle>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <AssetTargetFallback>netstandard2.0;$(AssetTargetFallback)</AssetTargetFallback>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Autofac.Mvc5\" Version=\"6.1.0\" />\r\n    <!-- This Autofac.Web package references System.Diagnostics.DiagnosticSource 7.0.2 -->\r\n    <PackageReference Include=\"Autofac.Web\" version=\"7.0.0\" />\r\n    <!--10.x is the last version that supports .NET Framework -->\r\n    <PackageReference Include=\"AutoMapper\" Version=\"[10.1.1,11.0.0)\" />\r\n    <!-- 4.x is the last version that supports .NET Framework -->\r\n    <PackageReference Include=\"AutoMapper.Extensions.ExpressionMapping\" Version=\"[4.1.5,5.0.0)\" />\r\n    <PackageReference Include=\"Microsoft.AspNet.Mvc\" Version=\"5.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n> I think the problem is that .NETCoreApp (.NET Core and .NET 5+) is not directly compatible with .NET Framework. The [.NET SDK defines asset target fallback](https://github.com/dotnet/sdk/blob/e5ead6cdcf50378e109ed03b4507fbd4f6aed55a/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.BeforeCommon.targets#L181). However, since NuGet finds that netstandard2.1 asset, asset target fallback is not used, hence the .NET Framework runtime asset is NOT compatible. Your package needs netstandard2.1 runtime assets.\r\n> \r\n> To see AssetTargetFallback in action, you need a package with only .NET Framework assets, then reference the package from a project targeting .NET Framework. NuGet will raise a warning that the package was used, but might not be fully compatible, because there are bunch of .NET Framework APIs that don't work on .NET (Core), and if the package uses any of those APIs, the app will crash at runtime, which is basically what different TFM versions and TFM compatibility is trying to avoid.\r\n> \r\n> But to reiterate the point, in order to reenforce its understanding, Asset Target Fallback works in two passes. First, NuGet attempts to do asset selection without any asset target fallback. if any assets match, from any asset class (compile, runtime, content files, build) finds a compatible asset, then asset target fallback will NOT be used. Only when NONE of the asset classes find any matches, then NuGet will try asset target fallback.\r\n> \r\n> Therefore, projects that are compatible with .NET Standard 2.1, they will not select .NET Framework assets in a different asset class. This is by design because .NET Framework and .NET Core App are not \"guaranteed\" to be compatible. In fact, there are known API and runtime differences.\r\n> \r\n> _Originally posted by @zivkan in https://github.com/NuGet/Home/issues/12972#issuecomment-1791260350_\r\n            "},{"Id":"39345733417","Type":"IssuesEvent","CreatedAt":"2024-06-17T02:11:09","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13553","RelatedDescription":"Opened issue \"dotnet nuget why shouldn't require project when there is only one in the current directory\" (#13553) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET 9 SDK daily preview\n\n### Worked before?\n\nno, new feature\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen the current directory contains only a single project file, commands like `dotnet restore`, `dotnet build`, `dotnet add package`, `dotnet list package`, and so on, all use the project file implicitly.\r\n\r\n`dotnet nuget why` not only doesn't implicitly use the project file, but outputs an error message twice\r\n\r\n```console\r\n> dotnet nuget why Azure.Identity\r\nRequired argument missing for command: 'why'.\r\n\r\nRequired argument missing for command: 'why'.\r\n\r\nDescription:\r\n  Shows the dependency graph for a particular package for a given project or solution.\r\n\r\nUsage:\r\n  nuget why <PROJECT|SOLUTION> <PACKAGE> [options]\r\n\r\nArguments:\r\n  <PROJECT|SOLUTION>  A path to a project, solution file, or directory.\r\n  <PACKAGE>           The package name to lookup in the dependency graph.\r\n\r\nOptions:\r\n  -f, --framework  The target framework(s) for which dependency graphs are shown.\r\n  -?, -h, --help   Show help and usage information\r\n```\r\n\r\nCompare this to `dotnet add package -h` which has:\r\n\r\n```console\r\nUsage:\r\n  dotnet add [<PROJECT>] package <PACKAGE_NAME> [options]\r\n\r\nArguments:\r\n  <PROJECT>       The project file to operate on. If a file is not specified, the command will search the current directory for one. [default:\r\n                  C:\\src\\myrepo\\]\r\n```\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"39345632946","Type":"IssuesEvent","CreatedAt":"2024-06-17T02:05:45","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13552","RelatedDescription":"Opened issue \"dotnet nuget why without any args outputs the same error 4 times\" (#13552) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0 daily build\n\n### Worked before?\n\nno, new feature\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nInstall a .NET 9 SDK that includes `dotnet nuget why`.  Run `dotnet nuget why` without any args, and you'll get the same error 4 times:\r\n\r\n```console\r\nRequired argument missing for command: 'why'.\r\nRequired argument missing for command: 'why'.\r\n\r\nRequired argument missing for command: 'why'.\r\nRequired argument missing for command: 'why'.\r\n\r\nDescription:\r\n  Shows the dependency graph for a particular package for a given project or solution.\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"39329238061","Type":"IssuesEvent","CreatedAt":"2024-06-15T19:19:29","Actor":"jkotas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13551","RelatedDescription":"Opened issue \"\"Static graph-based restore failed with exit code .* but did not log an error.\" failure in dotnet/runtime repo\" (#13551) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\n.NET SDK 9.0.100-preview.5.24307.3\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nThis is intermittent build error encountered by dotnet/runtime repo build. https://github.com/dotnet/runtime/issues/103526 is going to have statics on how often it occurs.\n\n### Verbose Logs\n\n```shell\nLog https://dev.azure.com/dnceng-public/public/_build/results?buildId=709057&view=logs&j=bdec34cc-8c67-558e-657b-d36a4105119f&t=a678ac1d-afa2-555a-c9f2-128b541774a9&l=605:\r\n\r\n...\r\nRestored D:\\a\\_work\\1\\s\\src\\libraries\\shims\\stubs\\System.IO.Packaging.csproj (in 0.8 ms).\r\nFailed to restore D:\\a\\_work\\1\\s\\src\\libraries\\System.Collections.Immutable\\ref\\System.Collections.Immutable.csproj (in 271 ms).\r\nRestored D:\\a\\_work\\1\\s\\src\\libraries\\shims\\stubs\\System.Diagnostics.PerformanceCounter.csproj (in 0.8 ms).\r\n...\r\nRestored D:\\a\\_work\\1\\s\\src\\libraries\\sfx-gen.proj (in 0.6 ms).\r\n2D:\\a\\_work\\1\\s\\.dotnet\\sdk\\9.0.100-preview.5.24307.3\\NuGet.RestoreEx.targets(19,5): error : Static graph-based restore failed with exit code '1' but did not log an error. Please file an issue at https://github.com/NuGet/Home. [D:\\a\\_work\\1\\s\\Build.proj]\r\n```\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-06-18T03:30:18.4229791Z","RunDurationInMilliseconds":967}