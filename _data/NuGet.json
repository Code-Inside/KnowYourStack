{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44734639046","Type":"PullRequestEvent","CreatedAt":"2024-12-12T16:15:49","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10308","RelatedDescription":"Opened pull request \"[DRAFT] [OIDC] Add token API for trading bearer token for API key\" (#10308) at NuGet/NuGetGallery","RelatedBody":"**I will wait on merging this PR until more validation and review is done.**\r\n\r\nThis adds a new token API for trading a bearer token for an API key. \r\n\r\nA sample request is this:\r\n```http\r\nPOST /api/v2/token HTTP/1.1\r\nHost: www.nuget.org\r\nAuthorization: Bearer {OIDC token}\r\nContent-Type: application/json\r\n\r\n{\r\n    \"token_type\": \"api_key\",\r\n    \"username\": \"{username of the trust policy’s controlling user}\"\r\n}\r\n```\r\n\r\nA sample response is this:\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"token_type\": \"api_key\",\r\n   \"expires\": \"{ISO 8601 timestamp of expiration}\",\r\n   \"api_key\": \"{short lived API key in clear text}\"\r\n}\r\n```\r\n\r\nThe endpoint expects no other existing auth mechanism (no cookie auth, no API key auth) and will reject the request if present.\r\n\r\nIn the future, the full `/api/v2/token` URL will be discovered by the client via a new resource in the [service index](https://learn.microsoft.com/en-us/nuget/api/service-index). For now, it will be hard coded in custom client scripts.\r\n\r\nThe `{OIDC token}` in the request message will be an Entra ID token for a service principal. In the future this can be more token types such as GitHub Actions OIDC tokens.\r\n\r\nThe `username` is the username of the trust policy’s controlling user, NOT the package owner scope. This aligns with the current API key design where API keys are only owned by users but can be scoped to either users or organizations. I am not confident on this decision but given this is a \"closed beta\" feature, we can try it and see how it goes, and change later with minimum disruption."},{"Id":"44726186969","Type":"IssuesEvent","CreatedAt":"2024-12-12T12:34:02","Actor":"blowdart","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10307","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Package validation failure emails use SHA1 thumbprints not SHA256 thumbprints\" (#10307) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt's more difficult to complete my work\n\n### Describe the bug\n\nnuget.org's certificate settings use SHA256 thumbprints in the display\r\n\r\n![image](https://github.com/user-attachments/assets/c0c7f5af-9bf1-4ec4-8bb4-0e0799d337e0)\r\n\r\nHowever, the validation failure emails sent when a certificate has not been registered use SHA1 thumbprints\r\n\r\n![image](https://github.com/user-attachments/assets/bfb2cc48-6b29-462d-8b71-e4a860277844)\r\n\n\n### Repro Steps\n\n1. Create and sign a new package with a certificate that is not registered to your account\r\n2. Upload it, and wait for validation to fail because the certificate is not associated with the account\r\n3. Check the validation failed emails\n\n### Expected Behavior\n\nThe validation failed email uses SHA256 thumbprints, not SHA1 thumbprints\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"44707366364","Type":"PullRequestEvent","CreatedAt":"2024-12-11T23:45:20","Actor":"Lanaparezanin","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10271","RelatedDescription":"Merged pull request \"Deleting unnecessary stats jobs\" (#10271) at NuGet/NuGetGallery","RelatedBody":"Before migration, we decided to remove unnecessary stats jobs. Jobs were removed based on the list in this work item:\r\n\r\nhttps://github.com/orgs/NuGet/projects/21/views/1?filterQuery=milestone%3A%22Sprint+2024-11%22+assignee%3A%40me&pane=issue&itemId=64259916&issue=NuGet%7CEngineering%7C5445\r\n\r\nJobs removed:\r\nStats.RollUpDownloadFacts\r\nStats.CollectAzureCdnLogs\r\nStats.CreateAzureCdnInWarehouseReports\r\nStats.ImportAzureCdnStatistics\r\n\r\nProjects removed:\r\nStats.LogInterpretation\r\nStats.RefreshClientDimension\r\n\r\nModified to exclude file related to a removed job, project not removed:\r\nStats.Warehouse"},{"Id":"44706707421","Type":"PullRequestEvent","CreatedAt":"2024-12-11T23:09:00","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10304","RelatedDescription":"Merged pull request \"[OIDC 14] Rename FederatedCredentialEvaluator to FederatedCredentialPolicyEvaluator\" (#10304) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10291.\r\n\r\nThis PR is a simple rename of a previously introduce service. \r\n\r\nOld name: `IFederatedCredentialEvaluator` (interface) and `FederatedCredentialEvaluator` (class)\r\nNew name: `IFederatedCredentialPolicyEvaluator` (interface) and `FederatedCredentialPolicyEvaluator` (class)\r\n\r\nThe reason for this change is I will be adding a new abstraction called `IFederatedCredentialValidator` which I felt is too close of a name to `IFederatedCredentialEvaluator`. \r\n\r\nIn the end, this thing evaluates whether a bearer token matches a list of policies. So \"policy evaluator\" is probably more clear anyway."},{"Id":"44705720034","Type":"PullRequestEvent","CreatedAt":"2024-12-11T22:23:15","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10306","RelatedDescription":"Opened pull request \"[OIDC 16] Add IFederatedCredentialValidator for additional token validation\" (#10306) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10305.\r\n\r\nThis adds a new abstraction called `IFederatedCredentialValidator` which allows us to inject custom token validation code (i.e. closed source, \"shim\" code) into the token validation pipeline.\r\n\r\n0 or more `IFederatedCredentialValidator` implementations can be used by the policy evaluator to perform additional validations on bearer tokens. These additional implementations come from the `add-ins` directory via MEF, much like existing shims.\r\n\r\nThe flow of validation BEFORE the change is like this:\r\n1. Parse the JWT\r\n2. Identify the issuer\r\n3. Perform an OSS issuer-specific validation, such as [`EntraIdTokenValidator`](https://github.com/NuGet/NuGetGallery/blob/7c81548db51ed543ff8f6558c1306571a6bb368a/src/NuGetGallery.Services/Authentication/Federated/EntraIdTokenValidator.cs)\r\n4. If the issuer says the token is good, then compare it to the given list of trust policies.\r\n\r\nThis PR adds a new step between 3 and 4 where the request headers (in particular the `Authorization` header) is passed to each `IFederatedCredentialValidator` to get additional token validation results. If either the built-in token validation or any additional `IFederatedCredentialValidator` says the token is bad, it will be rejected. \r\n\r\nWe pass all request headers, the detected issuer type (e.g. Entra ID vs. GitHub Actions), and _unvalidated_ claims to the `IFederatedCredentialValidator`. This essentially provides all the context we have to the shim at the time so it can make the most informed decision.\r\n\r\nAt no point will as \"valid\" result from an `IFederatedCredentialValidator` override a \"bad\" result from the built-in token validation. In other words, if there is an inconsistency between various validation flows, we fail close and reject the token. We will log a warning if any of the validators disagree on valid vs. invalid.\r\n\r\nA `IFederatedCredentialValidator` can return `NotApplicable` if the validator is only meant for a specific issuer. For example, `IFederatedCredentialValidator` might only know how to validate GitHub Actions tokens, not Entra ID tokens. The GitHub Actions example is for the future of course. Right now, the only supported issuer is Entra ID.\r\n\r\nI chose to plumb the request headers in from the service layer (and eventually from the controller action) instead of using the current `HttpContext` so that the flow of data was clearer. I would have preferred to only provide the bearer token to `IFederatedCredentialValidator` instead of all headers, but our internal token validation library expects all request headers, not just the bearer token.\r\n\r\nOur internal token validation shim uses a newer version of Microsoft.Extensions.Caching.Memory so I had to bump up the version to avoid runtime issues."},{"Id":"44705349923","Type":"PullRequestEvent","CreatedAt":"2024-12-11T22:08:11","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10305","RelatedDescription":"Opened pull request \"[OIDC 15] Emit audit records during token exchange and policy admin\" (#10305) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10304.\r\n\r\nThis builds on a previous PR to actually emit new audit records from various \"write\" flows used in the OIDC feature. Most notibly, this provides an audit trail for admin actions on trust policies and an audit trail for token exchange.\r\n\r\nThe description of the audit entries in https://github.com/NuGet/NuGetGallery/pull/10291. This PR needs to come after our internal auditing library is updated to handle the new audit record shape. I have a PR opened for that but I won't link to it here since it is an internal repo."},{"Id":"44705241258","Type":"PullRequestEvent","CreatedAt":"2024-12-11T22:03:58","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10304","RelatedDescription":"Opened pull request \"Rename FederatedCredentialEvaluator to FederatedCredentialPolicyEvaluator\" (#10304) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10291.\r\n\r\nThis PR is a simple rename of a previously introduce service. \r\n\r\nOld name: `IFederatedCredentialEvaluator` (interface) and `FederatedCredentialEvaluator` (class)\r\nNew name: `IFederatedCredentialPolicyEvaluator` (interface) and `FederatedCredentialPolicyEvaluator` (class)\r\n\r\nThe reason for this change is I will be adding a new abstraction called `IFederatedCredentialValidator` which I felt is too close of a name to `IFederatedCredentialEvaluator`. \r\n\r\nIn the end, this thing evaluates whether a bearer token matches a list of policies. So \"policy evaluator\" is probably more clear anyway."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44722248132","Type":"IssuesEvent","CreatedAt":"2024-12-12T10:38:45","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13996","RelatedDescription":"Opened issue \"[Bug Bash] “Package Details” tab should not show string “View Readme” when inputting invalid custom version in the “Version” dropdown box\" (#13996) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.95\n\n### Worked before?\n\nIt’s not a regression since it is a new feature. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.95\r\nVS Version: Main\\35611.73\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\n1.\tThe repro rate is 100%.  \r\n2.\tIt is not regression since “Package Details” tab is a new feature.\r\n#### Repro Steps:    \r\n1.\tCreate a “C# Console App (.NET 9.0)” project.    \r\n2.\tRight-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open the PM UI.   \r\n3.\tSelect the package sources “nuget.org” from “Package source” dropdown box and click any package in the package list. \r\n4.\tInput an invalid string into “Version” dropdown box and observe the “Package Details” tab. \r\n\r\n#### Expected Result:\r\n“Package Details” tab should not show string “View Readme”, all the description items should be empty.\r\n#### Actual Result:\r\n“Package Details” tab shows a string “View Readme” as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/cdd41baa-9dbc-4b21-bc1e-bbbf15a4d25a)\n\n### Verbose Logs\n\n_No response_"},{"Id":"44708843114","Type":"IssuesEvent","CreatedAt":"2024-12-12T01:08:51","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13974","RelatedDescription":"Closed issue \"Add indicator for deprecated and vulnerable packages to Package Details tab header.\" (#13974) at NuGet/Home","RelatedBody":"The vulnerability and deprecated warnings were moved to inside the package details tab. We want to make sure users are aware of the any issues with the packages they have selected so we want to add a warning icon similar to the one on the \"Installed\" tab in the PM UI. "},{"Id":"44704618127","Type":"IssuesEvent","CreatedAt":"2024-12-11T21:40:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7343","RelatedDescription":"Closed issue \"Support metadata on PackageReference items to hide them entirely from installed package list\" (#7343) at NuGet/Home","RelatedBody":"With .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) to deliver reference assemblies for the framework.  These targeting packs will not be represented as NuGet packages in the package graph in the way that Microsoft.NETCore.App, Microsoft.AspNetCore.App, and NETStandard.Library currently are.\r\n\r\nWhen a .NET Core 3 project depends on a package that has a dependency on one of these older \"platform\" packages, we want that platform package and its dependencies to be ignored in the NuGet graph, as those APIs are supplied by the platform via other mechanisms (targeting packs at build time and runtime packs for self-contained deployments).\r\n\r\nWe've thought of two possible ways to exclude the platform packages and dependencies from the graph.  This issue is for one of them, and I will file another issue for the other option.\r\n\r\nOne option is for us to produce empty 3.0 versions of these platform packages, and implicitly reference them from .NET Core 3.0 projects.  This would prevent the previous versions of the packages, as well as their dependencies, from being used in the graph.\r\n\r\nHowever, these empty 3.0 packages would be confusing to see in the list of installed packages in the package manager UI.  So if we go with the \"empty package\" option, we'd like a way to entirely exclude these packages from the NuGet UI.  Probably this could be a new piece of metadata on the `PackageReference`, for example `Visible=\"false\"`.\r\n\r\n"},{"Id":"44666727948","Type":"IssuesEvent","CreatedAt":"2024-12-10T23:59:48","Actor":"Charles-Gagnon","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13995","RelatedDescription":"Opened issue \"[Wiki] Docs for msbuild equivalent property for --force-evaluate not correct\" (#13995) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nThe wiki says that there isn't an msbuild equivalent property for --force-evaluate, but per https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#lock-file-extensibility `RestoreForceEvaluate` does just that.\r\n\r\nhttps://github.com/NuGet/Home/wiki/Enable-repeatable-package-restore-using-lock-file#restore-command-line-options\n\n### Verbose Logs\n\n_No response_"},{"Id":"44666020596","Type":"IssuesEvent","CreatedAt":"2024-12-10T23:20:26","Actor":"1RJB","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13994","RelatedDescription":"Opened issue \"[NuGet.org Bug]: init.ps1 is not recognized as the name of a cmdlet, function, script file, or operable program\" (#13994) at NuGet/Home","RelatedBody":"### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Describe the bug\r\n\r\nError message appears when opening Package Manager Console. Also, unable to run `Add-Migration Initial Create` or `Update-Database`. These errors occur due to the init.ps1 file not being executed.\r\n\r\nWhen open PMC, this error is displayed:\r\n```\r\n& : The term 'C:\\Users\\user1\\.nuget\\packages\\microsoft.entityframeworkcore.tools\\8.0.11\\tools\\init.ps1' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:45\r\n+ ... rgs+=$_}; & 'C:\\Users\\user1\\.nuget\\packages\\microsoft.entityframework ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (C:\\Users\\user1\\...\\tools\\init.ps1:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\nWhen try running `Add-Migration InitialCreate`, this error is shown:\r\n```\r\nAdd-Migration : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify \r\nthat the path is correct and try again.\r\nAt line:1 char:1\r\n+ Add-Migration InitialCreate\r\n+ ~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Add-Migration:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\n### Repro Steps\r\n\r\n1. Opened Visual Studio Community 2022 (17.12.3).\r\n2. Created a new project using the \"ASP.NET Core Web API\" project template.\r\n3. Leave everything as default on the \"Configure your new project\" page and click Next.\r\n4. Leave everything as default on the \"Additional information\" page and click Next.\r\n5. Using Nuget Package Manager, install Microsoft.EntityFrameworkCore (v8.0.11), Microsoft.EntityFrameworkCore.Tools (v8.0.11), MySql.EntityFrameworkCore (v8.0.8), Swashbuckle.AspNetCore (v7.1.0).\r\n6. Open the Package Manager Console, this error message in the console appears, \r\n```\r\n& : The term 'C:\\Users\\user1\\.nuget\\packages\\microsoft.entityframeworkcore.tools\\8.0.11\\tools\\init.ps1' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:45\r\n+ ... rgs+=$_}; & 'C:\\Users\\user1\\.nuget\\packages\\microsoft.entityframework ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (C:\\Users\\user1\\...\\tools\\init.ps1:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n \r\n7. Try running the command `Add-Migration InitialCreate`, but this error message in the console appears,\r\n```\r\nAdd-Migration : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify \r\nthat the path is correct and try again.\r\nAt line:1 char:1\r\n+ Add-Migration InitialCreate\r\n+ ~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Add-Migration:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n```\r\n\r\n### Temporary Solution\r\n\r\nThese errors are fixed after running this command, \r\n`Import-Module \"C:\\Users\\user1\\.nuget\\packages\\microsoft.entityframeworkcore.tools\\8.0.11\\tools\\EntityFrameworkCore.psd1\"`\r\nBut have to run this command everytime when open the project or create a new project.\r\n\r\n### Additional Info\r\n\r\nOnly occurs on my laptop, the same project on a different PC doesn't have this issue.\r\nI have uninstalled Visual Studio Community 2022 and reinstalled it. I have uninstalled all Nuget Packages and reinstalled them. I have removed all Nuget Packages cache, uninstalled all the Nuget Packages and reinstalled them."},{"Id":"44665966956","Type":"IssuesEvent","CreatedAt":"2024-12-10T23:17:52","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13603","RelatedDescription":"Closed issue \"Create a documentation for HTTP errors introduced for insecure sources\" (#13603) at NuGet/Home","RelatedBody":"Create a documentation for : https://github.com/NuGet/Home/issues/13289\r\nDiscuss\r\n- The delta\r\n- What's breaking\r\n- How to go back to dotnet 8 level analysis"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-13T03:30:20.3939941Z","RunDurationInMilliseconds":883}