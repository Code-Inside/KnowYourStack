{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"34030120841","Type":"PullRequestEvent","CreatedAt":"2023-12-09T00:41:51","Actor":"RiadGahlouz","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9747","RelatedDescription":"Merged pull request \"Allow admins to select a specific number of package versions\" (#9747) at NuGet/NuGetGallery","RelatedBody":"This PR adds a little prompt when you click in the `Select listed` or `Select unlisted` asking you how many packages you want to select. If you type anything but a number, it selects all (default behavior, just press enter) \r\n![image](https://github.com/NuGet/NuGetGallery/assets/1711217/ee4750ef-e46c-4421-8ae8-2e68483e1087)\r\n\r\nAfter Clicking: \r\n![image](https://github.com/NuGet/NuGetGallery/assets/1711217/16eeca91-ce67-4bfc-9efb-f6d5e24b581b)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9517"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"34023442710","Type":"IssuesEvent","CreatedAt":"2023-12-08T18:39:14","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12994","RelatedDescription":"Closed issue \"Embed the right versions of Restore-related files into binlog at the right time\" (#12994) at NuGet/Home","RelatedBody":"Currently we have a problem that if Restore is running after .g.props and g.targets files are already on disk, the old versions of these files will be embedded in the binlog instead of the ones produced by the Restore task.\r\n\r\nHowever if the Restore task doesn't run, we still want to embed whatever version of g.props and g.targets was on disk at the time they were imported.\r\n\r\nSame for project.assets.json, it's hard to embed the right version of it at the right time. Currently it's being done by this logic:\r\nhttps://github.com/dotnet/sdk/pull/16840/files\r\n\r\nThe way embedding into binlog is done is every time an item is added (either via ItemGroup, or as an output item of a task, or as target output), if the file path exists on disk, the current contents of the file is embedded immediately and eagerly. Subsequent requests to embed the same file path are ignored (the first request wins, and the version is stored as of the time of the first request). However if the requested file doesn't exist on disk, nothing happens, so the next request to embed the file will succeed if the file is first found on disk.\r\n\r\n@jeffkl "},{"Id":"34021184098","Type":"IssuesEvent","CreatedAt":"2023-12-08T17:12:05","Actor":"belav","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12019","RelatedDescription":"Closed issue \"RestoreUseStaticGraphEvaluation is reporting changes\" (#12019) at NuGet/Home","RelatedBody":"I ran the following on a large solution\r\n```\r\nmsbuild.exe -t:restore -p:RestoreUseStaticGraphEvaluation=true\r\nmsbuild.exe -t:restore\r\n```\r\n\r\nThe second command shows that 1 project needed to be updated\r\n```\r\n  Writing assets file to disk. Path: C:\\projects\\insite-commerce\\Src\\Backend\\Modules\\JobQuote\\Insite.JobQuote.Tests\\obj\r\n  \\project.assets.json\r\n  Restored C:\\projects\\insite-commerce\\Src\\Backend\\Modules\\JobQuote\\Insite.JobQuote.Tests\\Insite.JobQuote.Tests.csproj\r\n  (in 645 ms).\r\n```\r\n\r\nI diffed the whole `obj` after the first command to after the second command, and there is just a single line change in `project.assets.json` and `Insite.JobQuote.Tests.csproj.nuget.dgspec.json`\r\n```diff\r\n      \"warningProperties\": {\r\n+       \"allWarningsAsErrors\": true,\r\n        \"noWarn\": [\r\n          \"NU1608\"\r\n        ],\r\n        \"warnAsError\": [\r\n          \"NU1605\"\r\n        ]\r\n      }\r\n```\r\n\r\nDigging through the other project `obj` folders, none of them include `\"allWarningsAsErrors\": true,` and we have this in a `Directory.Build.props`\r\n```\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n  </PropertyGroup>\r\n```\r\n\r\nI don't believe this would prevent us from using RestoreUseStaticGraphEvaluation, but I am not really sure what to make of it. It almost seems like p:RestoreUseStaticGraphEvaluation is correct and the regular restore shouldn't be including that line."},{"Id":"34018452394","Type":"IssuesEvent","CreatedAt":"2023-12-08T15:39:57","Actor":"Wagnerp","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13081","RelatedDescription":"Opened issue \"Support for GitHub commit tags\" (#13081) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nIt would be great to see support for GitHub commit tags. Say I publish multiple packages over days/weeks/months etc, and I discover a bug in my product months down the line. I go back over the past packages, and discover the version where the bug is introduced. Currently, the only way to track down the issue is by trawling through pull request histories, and trying to match up the PR date with the package publish date, which takes time. By using GitHub commit tags in the NuGet information data, it would save time tracking the bug down.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33997182607","Type":"IssuesEvent","CreatedAt":"2023-12-08T00:44:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13079","RelatedDescription":"Opened issue \"Stop ilmerging pack\" (#13079) at NuGet/Home","RelatedBody":"This currently prevents us from moving all of our assemblies to net5.0 from netstandard2.0. \r\n\r\nNote that theoretically we could move the net472 leg to netstandard2.0 to satisfy compatibility, but we'd need to make sure that there's no conditional code in those packages. \r\n\r\nRelated: https://github.com/NuGet/Home/issues/9886"},{"Id":"33991139664","Type":"IssuesEvent","CreatedAt":"2023-12-07T20:04:21","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13078","RelatedDescription":"Opened issue \"Many implementations of restore lead to maintability issues\" (#13078) at NuGet/Home","RelatedBody":"As a consequence of how restore has evolved over it's existence in NuGet, we have many different implementations of restore that require maintaining. \r\n\r\n1. packages.config is supported in nuget.exe, msbuild and VS, and while there's a lot of shared code, at the end, wiring up each restore correctly may lead to a bug/inconsistency in one or more tools.\r\n2. PackageReference is supported in nuget.exe, msbuild, dotnet and VS. In addition to that, msbuild and dotnet have static and non static graph restore.  VS on the other hand, has a legacy and CPS PackageReference projects.\r\n\r\nAdding a single property requires changes in 3 or 4 different codepaths.\r\n\r\nSome things are really hard to change, example, legacy PR project vs CPS project. \r\nOthers are easier, regular vs static graph restore.\r\n\r\nNote that I don't necessarily have a proposal here, beyond minimize duplication where possible and we're really affected by the fact that we're doubling an SDK: see https://github.com/NuGet/Home/issues/13077, but it is something that we need to be driving towards."},{"Id":"33990774357","Type":"IssuesEvent","CreatedAt":"2023-12-07T19:50:13","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13048","RelatedDescription":"Closed issue \"[Bug]: Building test project with only one framework causes NU1701 warning on different one\" (#13048) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#9432**\r\n- Please respond to @msmolka.\r\n\r\n---\r\n\r\n_From @msmolka on Friday, November 17, 2023 7:19:59 AM_\r\n\r\n### Issue Description\n\nI have simple test project: See attached file\r\nit is multi target with one eol .dotnet version 5\r\n\r\n```xml\r\n<TargetFrameworks>net8.0;net462;net5.0</TargetFrameworks>\r\n```\r\n\r\nI've added package:\r\n\r\n```xml\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.Extensions.TimeProvider.Testing\" Version=\"8.0.0\" />\r\n    </ItemGroup>\r\n```\r\n\r\nnow building project reports warning on ALL 3 target versions. If I remove .net5 - all is correct\r\nif I add it reports warning\r\n\r\neven running simple command with forcing build only for .net 8 produces nu1701 warning.\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\r\n\r\n\r\n[TestMultiTarget.zip](https://github.com/dotnet/msbuild/files/13388533/TestMultiTarget.zip)\r\n\n\n### Steps to Reproduce\n\nRun attached repo with framework 8\r\n\r\n`\r\ndotnet build --framework net8.0 --no-restore\r\n`\n\n### Expected Behavior\n\nWarning only appears when building target framework 5 not any other supported ones.\n\n### Actual Behavior\n\nWarning is produced even for supported frameworks:\r\n\r\n```\r\nwarning NU1701: Package 'Microsoft.Extensions.TimeProvider.Testing 8.0.0' was restored using '.NETF \r\nramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project tar \r\nget framework 'net5.0'. This package may not be fully compatible with your project. [TargetFramework=net8.0]\r\n\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_"},{"Id":"33990570012","Type":"IssuesEvent","CreatedAt":"2023-12-07T19:42:22","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13041","RelatedDescription":"Closed issue \"Nuget Central Package Management cannot update versions in imported \"Directory.Packages.props\" files with non-default name\" (#13041) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n\"nuget.exe\" reports 6.8.0.122\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhile experimenting with CPM, I first tried something similar to this rather weird structure of nuget CPM declarations:\r\n\r\nIn the solution root, there sits a \"Directory.Packages.props\" file that imports a file \"Included_Directory.Packages.props\". \r\n\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n  </PropertyGroup>\r\n  <Import Project=\".\\Included_Directory.Packages.props\" />\r\n  <ItemGroup>\r\n    <!--Additional package versions -->\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis file \"Included_Directory.Packages.props\" defines a version for \"Newtonsoft.Json\":\r\n```\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe projects declare a package reference:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\n\r\nWhen using Nuget Package Manager to update \"Newtonsoft.Json\", it does not update the version in \"Included_Directory.Packages.props\" but overwrites the version in each project file:\r\n```\r\n  <ItemGroup>\r\n    <PackageVersion Update=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n  </ItemGroup>\r\n```\r\n\r\nSee attached sample (with original state - you have to update \"Newtonsoft.Json\" to reproduce the problem): [NugetCPM_NonDefault.zip](https://github.com/NuGet/Home/files/13463457/NugetCPM_NonDefault.zip)\r\n\r\n\r\nMy reason for doing something like this: I have a rather large tools solution with a lot of utility dlls, and I have an application that references those utility dlls (by including copies of the tools dll in a local folder and referencing those dlls instead of using Nuget package references - due to historical reasons :-( ). So I want to copy the \"Directory.Packages.props\" from the utility solution to the application solution with a different name, and import it in the application solution \"Directory.Packages.props\". When updating a nuget package, VS would modify each project file instead of trying to write to the imported \"Directory.Packages.props\".\r\n\r\n\r\n\r\nIt works when the imported file has the name \"Directory.Packages.props\" and is just placed in a subdir. So, this would be the workaround for me.\r\nHere is a sample with this workaround:\r\n[NugetCPM_Default.zip](https://github.com/NuGet/Home/files/13463458/NugetCPM_Default.zip)\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-12-09T03:30:19.3705578Z","RunDurationInMilliseconds":1168}