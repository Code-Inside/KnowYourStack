{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"36283009159","Type":"IssuesEvent","CreatedAt":"2024-03-06T03:24:11","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9846","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Search parameter `tfms=net` lights up the .NET framework generation checkbox\" (#9846) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen you search on nuget.org using the `tfms=net` parameter, the `.NET` framework checkbox is shown as selected. This should not be selected. \r\n\r\nThe `.NET` framework generation checkbox should only be selected if `frameworks=net` is in the URL. `tfms=net` refers to the version-less '.NET Framework' (not '.NET') TFM, not a framework generation.\n\n### Repro Steps\n\n1. Go to https://www.nuget.org/packages?q=&tfms=net\r\n2. The `.NET` framework generation checkbox is selected in the filter panel, even though there is no `frameworks=net` parameter.\n\n### Expected Behavior\n\nNone of the checkboxes should be selected in this case.\r\n\r\n`tfms=net` refers to the version-less .NET Framework **TFM** (shortname = 'net'), not the .NET 5+ **framework generation**. The js code in https://github.com/NuGet/NuGetGallery/blob/main/src/NuGetGallery/Scripts/gallery/page-list-packages.js#L177 does not distinguish between `frameworks=` and `tfms=` parameters properly, and needs to be fixed.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"36279231630","Type":"PullRequestEvent","CreatedAt":"2024-03-05T23:36:12","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9845","RelatedDescription":"Merged pull request \"[ReleasePrep][2024.03.05]RI of dev into main\" (#9845) at NuGet/NuGetGallery","RelatedBody":"Skipped FI"},{"Id":"36274954076","Type":"PullRequestEvent","CreatedAt":"2024-03-05T20:23:16","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9844","RelatedDescription":"Merged pull request \"Removed unused username/password parameters\" (#9844) at NuGet/NuGetGallery","RelatedBody":"Cleaning up unused params."},{"Id":"36274608318","Type":"PullRequestEvent","CreatedAt":"2024-03-05T20:10:52","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9845","RelatedDescription":"Opened pull request \"[ReleasePrep][2024.03.05]RI of dev into main\" (#9845) at NuGet/NuGetGallery","RelatedBody":"Skipped FI"},{"Id":"36274537946","Type":"PullRequestEvent","CreatedAt":"2024-03-05T20:08:08","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9842","RelatedDescription":"Merged pull request \"Small fixes to the framework filters\" (#9842) at NuGet/NuGetGallery","RelatedBody":"Fixes a couple of small things before we release the new framework filters:\r\n\r\n- Change \"Include **computed** frameworks\" to \"Include **compatible** frameworks\" in light of this change to the terminology: https://github.com/NuGet/NuGetGallery/pull/9835\r\n- https://github.com/NuGet/NuGetGallery/issues/9816: The tooltip on the Frameworks heading was browser-native, and not bootstrap like all the other tooltips.\r\n- The tooltip used to say that it 'filters packages based on the frameworks **included in the package**'. Now that the default includes 'computed' compatible frameworks too, I've changed this to say 'filters packages based on the frameworks **they are compatible with**'.\r\n- **[A11y bug]** https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1970827: The Framework Filter Mode tooltip was not receiving tab focus, so I added \"tabindex=0\" to add it to the tab order.\r\n\r\nPreviously,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/aabb2118-3345-4f55-b17b-94555f12faa9)\r\nI can't take a screenshot of the browser native tooltip, but you can try hovering over the tooltip on https://www.nuget.org/packages\r\n\r\nAfter the changes,\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/f4885c80-5098-413c-8712-61d432da3d08)\r\n![image](https://github.com/NuGet/NuGetGallery/assets/82980589/ed740309-175b-4737-980b-ed6e5c48c9a5)\r\n"},{"Id":"36272972101","Type":"PullRequestEvent","CreatedAt":"2024-03-05T19:08:47","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9844","RelatedDescription":"Opened pull request \"Removed unused username/password parameters\" (#9844) at NuGet/NuGetGallery","RelatedBody":"Cleaning up unused params."},{"Id":"36243733191","Type":"IssuesEvent","CreatedAt":"2024-03-05T02:06:16","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9843","RelatedDescription":"Opened issue \"Change Search URL param from `includeComputedFrameworks` to `includeCompatibleFrameworks`\" (#9843) at NuGet/NuGetGallery","RelatedBody":"Based on the feedback here: https://github.com/NuGet/NuGetGallery/pull/9835, we're looking to change references of 'computed' to 'compatible'.\r\n\r\nWe already changed the UI filter label here: https://github.com/NuGet/NuGetGallery/pull/9842\r\n\r\nBut we still need to change the URL parameters, which will require work in Gallery and Jobs."},{"Id":"36242778065","Type":"PullRequestEvent","CreatedAt":"2024-03-05T01:14:35","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9842","RelatedDescription":"Opened pull request \"Small fixes to the framework filters\" (#9842) at NuGet/NuGetGallery","RelatedBody":"Fixes a couple of small things before we release the new framework filters:\r\n\r\n- https://github.com/NuGet/NuGetGallery/issues/9816: The tooltip on the Frameworks heading was browser-native, and not bootstrap like all the other tooltips.\r\n- The tooltip used to say that it 'filters packages based on the frameworks **included in the package**'. Now that the default includes 'computed' compatible frameworks too, I've changed this to say 'filters packages based on the frameworks **they are compatible with**'.\r\n- **[A11y bug]** https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1970827: The Framework Filter Mode tooltip was not receiving tab focus, so I added \"tabindex=0\" to add it to the tab order."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"36272907927","Type":"IssuesEvent","CreatedAt":"2024-03-05T19:06:23","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13279","RelatedDescription":"Closed issue \"Avoid boxing enumerators for collections\" (#13279) at NuGet/Home","RelatedBody":"Most collections in the framework offer stuct based enumerators, and we can avoid boxing by utilizing the `NoAllocEnumerate` extension method."},{"Id":"36272681209","Type":"IssuesEvent","CreatedAt":"2024-03-05T18:58:05","Actor":"totszwai","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13252","RelatedDescription":"Closed issue \"NU3028 NU3037\" (#13252) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, Other/NA\n\n### Product Version\n\n6.9.1.3\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nOn a freshly installed Windows 11 laptop, installed latest Visual Studio 2022, installed latest .NET SDK.\r\nLoaded an old project (from 2 months ago) and tried to restore the NuGet packages, nothing worked!\r\n\r\nRan the command\r\n`dotnet nuget locals --clear all`\r\n\r\nTried to restore again, and same result. This seems to be come kind of common reoccurring bug/issue with NuGet???? \r\n\r\n\r\n![image](https://github.com/NuGet/Home/assets/4440365/dcda3fe9-ebf0-47d0-9089-fd4c9c884079)\r\n\r\n![image](https://github.com/NuGet/Home/assets/4440365/c3a5d7b1-cef7-46b6-8cdb-7f63e4fdf57a)\r\n\r\n\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.201\r\n Commit:            4c2d78f037\r\n Workload version:  8.0.200-manifests.e575128c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.201\\\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.2\r\n  Architecture: x64\r\n  Commit:       1381d5ebd2\r\n\r\n.NET SDKs installed:\r\n  8.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.201 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"36271783068","Type":"IssuesEvent","CreatedAt":"2024-03-05T18:26:51","Actor":"martinrrm","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13286","RelatedDescription":"Closed issue \"`dotnet package search` crashes on .NET 9 preview 2 nightly\" (#13286) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n9.0.100-preview.2.24129.7\n\n### Worked before?\n\nunknown\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nUsing the .NET 9 preview 2 release candidate build, `dotnet package search` crashes on activation:\r\n\r\n```terminal\r\n> dotnet package search\r\nUnhandled exception. System.MissingMethodException: Method not found: 'Void System.CommandLine.CliCommand.Add(System.CommandLine.CliSymbol)'.\r\n   at NuGet.CommandLine.XPlat.ConfigCommand.RegisterOptionsForCommandConfigPaths(CliCommand cmd, Func`1 getLogger)\r\n   at NuGet.CommandLine.XPlat.ConfigCommand.Register(CliCommand app, Func`1 getLogger)\r\n   at NuGet.CommandLine.XPlat.Program.MainInternal(String[] args, CommandOutputLogger log)\r\n   at NuGet.CommandLine.XPlat.Program.Main(String[] args)\r\n```\r\nMy best guess is a System.CommandLine version mismatch, but it would need some investigation to verify.\n\n### Verbose Logs\n\n_No response_"},{"Id":"36258115082","Type":"IssuesEvent","CreatedAt":"2024-03-05T11:58:08","Actor":"noSet","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13295","RelatedDescription":"Opened issue \"Using the 'TargetFrameworks' and 'OutputPath' causes command 'dotnet pack  --artifacts-path' to be abnormal\" (#13295) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\ndotnet sdk 8.0.200\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n## Description\r\nBoth `TargetFrameworks` and `OutputPath` Property are defined in the project file, the `dll` in the `lib` directory in the `.nupkg` file is the same\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net40;net45;net48;net8.0</TargetFrameworks>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <OutputPath>.\\Export\\Debug\\</OutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <OutputPath>.\\Export\\Release\\</OutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nuse command\r\n```\r\ndotnet pack \"./Log.Simple.csproj\"  --artifacts-path C:\\packs\r\n```\r\n\r\n## Expected behavior\r\n`Log.Simple.nupkg\\lib\\net40\\Log.Simple.dll ` is not equal `Log.Simple.nupkg\\lib\\net8.0\\Log.Simple.dll `\r\n\r\n## Actual behavior\r\n`Log.Simple.nupkg\\lib\\net40\\Log.Simple.dll ` equal `Log.Simple.nupkg\\lib\\net8.0\\Log.Simple.dll `\r\n\r\n## Analysis\r\nuse `dotnet pack \"./Log.Simple.csproj\" ` I get msbuild partial log\r\n```\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\net48\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\net45\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\net8.0\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\net40\\Log.Simple.dll\r\n```\r\n\r\nuse `dotnet pack \"./Log.Simple.csproj\" --artifacts-path C:\\packs ` I get msbuild partial log\r\n```\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\Log.Simple.dll\r\nLog.Simple -> C:\\Workspace\\Common\\Export\\Release\\Log.Simple.dll\r\n```\r\n\r\n## 环境\r\n```\r\n.NET SDK:\r\n Version:           8.0.200\r\n Commit:            438cab6a9d\r\n Workload version:  8.0.200-manifests.e575128c\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.200\\\r\n```\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"36243073478","Type":"IssuesEvent","CreatedAt":"2024-03-05T01:31:56","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13294","RelatedDescription":"Closed issue \"Duplicate sources can lead to unnecessary assets file writes.\" (#13294) at NuGet/Home","RelatedBody":"The recent changes from https://github.com/NuGet/NuGet.Client/commit/1942c17866695ae1175ec3d8b42a6b41bcd6a9c9#diff-93482a8631efd30f5df833baa903bcf342fb99a2e93cf9a3dea6a672b44d3a61L81 and the changes moving from Newtonsoft.Json to System.Text.Json for assets file reading. \r\n\r\nIf there are duplicate objects, Newtonsoft.Json dedups, while System.Text.Json *does not*. \r\n\r\n```json\r\n      \"sources\": {\r\n        \"C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\NuGetPackages\\\\\": {},\r\n        \"C:\\\\Program Files\\\\dotnet\\\\library-packs\": {},\r\n        \"https://api.nuget.org/v3/index.json\": {},\r\n        \"https://api.nuget.org/v3/index.json\": {}\r\n      }\r\n```\r\n\r\nThis lead to perf regressions."},{"Id":"36241859297","Type":"IssuesEvent","CreatedAt":"2024-03-05T00:21:39","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13214","RelatedDescription":"Closed issue \"ProjectModel.HashObjectWriter.OnFlush is using a SHA512 hash versus a cheaper hash which seems like overkill\" (#13214) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nMSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\nOriginally filed by the VS Perf team.  The `ProjectModel.HashObjectWriter` currently uses a SHA512 hash algorithm and we're wondering if a faster hash algorithm would still work and speed things up.\r\n\r\n### Desired Behavior\r\n\r\nA faster hashing algorithm that still yields the same outcome.\r\n\r\n### Additional Context\r\n\r\nOriginally reported at https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1987168"},{"Id":"36240421682","Type":"IssuesEvent","CreatedAt":"2024-03-04T23:04:20","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13282","RelatedDescription":"Closed issue \"Usage of StringBuilder.Append() allocates when appending an int\" (#13282) at NuGet/Home","RelatedBody":"`StringBuilder.Append()` calls `ToString()` which can be avoided by using our `AppendInt()` extension method."},{"Id":"36239572070","Type":"IssuesEvent","CreatedAt":"2024-03-04T22:24:31","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13283","RelatedDescription":"Closed issue \"JsonTextWriter allocates a large number strings\" (#13283) at NuGet/Home","RelatedBody":"There is an unfortunate combination of `System.IO.StreamWriter` and `JsonTextWriter` where repeated calls to `StreamWriter.NewLine` allocate each time."},{"Id":"36238496088","Type":"IssuesEvent","CreatedAt":"2024-03-04T21:41:43","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13248","RelatedDescription":"Closed issue \"Using System.Text.Json for assets file parsing is failing .NET SDK tests\" (#13248) at NuGet/Home","RelatedBody":"See: https://github.com/dotnet/sdk/pull/38774."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-03-06T03:30:17.5562076Z","RunDurationInMilliseconds":962}