{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"39412178415","Type":"IssuesEvent","CreatedAt":"2024-06-18T19:28:41","Actor":"jozefizso","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10027","RelatedDescription":"Opened issue \"Azure Trusted Signing service\" (#10027) at NuGet/NuGetGallery","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nThe Azure Trusted Signing service rotates the managed authenticode certificates each three days.\r\n\r\nAs the NuGet Gallery requires to specify a single, long lived certificate, it is not feasible to sign nuget packages with the ATS.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"39410846918","Type":"IssuesEvent","CreatedAt":"2024-06-18T18:37:43","Actor":"Smaug123","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10026","RelatedDescription":"Opened issue \"[NuGet.org Bug]: NuGet.org tampers with the uploaded package, making attestation difficult\" (#10026) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI recently implemented [GitHub Attestations](https://github.blog/2024-05-02-introducing-artifact-attestations-now-in-public-beta/) for the NuGet packages I produce. This was pretty annoying to do, because NuGet.org inserts a signature file into any(?) nupkg you upload to it. So the only flow I can make work is:\r\n\r\n* upload the package;\r\n* wait for it to become available;\r\n* download the package; \r\n* unzip it and verify that its contents are byte-for-byte identical after removing the .signature file;\r\n* attest the package I downloaded.\r\n\r\nThis is awkward!\n\n### Repro Steps\n\nUpload a package to NuGet. Download it again. Observe that its contents have changed.\n\n### Expected Behavior\n\nIt surprised me greatly that NuGet.org tampers with uploaded packages. (The obvious thing to do would have been to have NuGet serve a certificate separately from the package, but that ship has presumably long since sailed. \"NuGet.org attests that this package was uploaded by someone capable of impersonating ThisParticularUser\" is not information that belongs *in* the package; other package repositories do exist and it would be nice not to require each one to tamper incompatibly with the packages that get uploaded to it to attest to it!)\r\n\r\nNo solution comes to mind; it may be possible for NuGet.org *not* to tamper with uploaded packages, but I can't see how without either duplicating large swathes of API or breaking compatibility.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\nIt is of course possible to sign NuGet packages, but this has exactly the same secrets-management problems that NuGet API keys have. The whole point is to attest meaningfully that _this package_ was produced from _this source_; having to trust that package producers are correctly handling their certificates is a very big and unnecessary ask. (Of course, better would be to have reproducible NuGet packs, because then we could attest verifiably that a package was built from a particular source tree *without* a bunch of custom logic.)"},{"Id":"39394598000","Type":"IssuesEvent","CreatedAt":"2024-06-18T10:25:30","Actor":"Kesavaraman123","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10025","RelatedDescription":"Opened issue \"Not able to access our nuget.org account 'view profile' page.\" (#10025) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nOther\n\n### Describe the bug\n\nWe are experiencing a problem with our NuGet.org account. When we click on the \"View Profile\" link, the page fails to load and instead displays an \"[Internal Server Error](https://www.nuget.org/profiles/SyncfusionInc)\" message. This issue prevents us from accessing our profile information and managing our account effectively.\r\n\r\n**Our profile Link:** https://www.nuget.org/profiles/SyncfusionInc\r\n\r\nWe kindly request your support to resolve this issue promptly. Please investigate the cause of the internal server error and provide a solution so we can access our profile without any further problems.\r\n\n\n### Repro Steps\n\nClick below profile link it not loading,\r\nhttps://www.nuget.org/profiles/SyncfusionInc\n\n### Expected Behavior\n\nThe profile page should load correctly, displaying all relevant account and profile information without any errors.\n\n### Screenshots\n\n![image](https://github.com/NuGet/NuGetGallery/assets/91955033/4ab31192-2813-4d5d-b3c4-171bfca12b71)\r\n\n\n### Additional Context and logs\n\n_No response_"},{"Id":"39368218034","Type":"IssuesEvent","CreatedAt":"2024-06-17T15:57:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8323","RelatedDescription":"Closed issue \"Dotnet Tools don't show Framework Dependencies\" (#8323) at NuGet/NuGetGallery","RelatedBody":"### Dotnet Tools don't show Framework Dependencies\r\nDotnet tools published to the NuGet site do not show a framework dependency in the online listing. \r\n\r\nThis is a problem if a package fails to install due a missing framework and the user needs to find a version that works - there's no way to find a version that might have a lower framework dependency.\r\n\r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/1374013/98994268-9f0c1280-24d3-11eb-9336-067bdae9a5eb.png)\r\n\r\nIf I get an error message upon install like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1374013/98994299-acc19800-24d3-11eb-87b8-f8d69c7ccab4.png)\r\n\r\n\r\nI can't even look for an older version (in this case the previous version) that runs on an older framework (3.1 in 0.2.16) because that info isn't displayed.\r\n\r\n### Solution\r\nShow the .NET Core Target Framework dependency. It's odd that this isn't shown since non-tool packages shows the framework target information."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"39418577611","Type":"IssuesEvent","CreatedAt":"2024-06-19T00:52:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13289","RelatedDescription":"Reopened issue \"[Epic]Deprecate http usage: Promote from warning to error\" (#13289) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\nWe have [NU1803](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1803) warnings across NuGet. Promote from warning to error.\r\n\r\n- [x] [Promote from warning to error in restore scenarios](https://github.com/NuGet/Home/issues/13353)\r\n- [x] [Promote from warning to error in push operations](https://github.com/NuGet/Home/issues/13342)\r\n- [x] [Promote from warning to error in delete operations](https://github.com/NuGet/Home/issues/13341)\r\n- [x] [Promote from warning to error in search package](https://github.com/NuGet/Home/issues/13316)\r\n- [x] [Promote from warning to error in list package](https://github.com/NuGet/Home/issues/13323)\r\n- [x] [Promote from warning to error in source command](https://github.com/NuGet/Home/issues/13333)\r\n- [x] [Promote from warning to error in VS Options NuGet Package Manager](https://github.com/NuGet/Home/issues/13354)\r\n- [ ] [Show an error when a non https source is used in a resource in a service index](https://github.com/NuGet/Home/issues/13364)\r\n- [ ] [Add `--allow-insecure-connections` option to dotnet.exe](https://github.com/NuGet/Home/issues/13396)"},{"Id":"39417960384","Type":"IssuesEvent","CreatedAt":"2024-06-19T00:10:24","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8126","RelatedDescription":"Closed issue \"How do I determine what frameworks a package supports?\" (#8126) at NuGet/Home","RelatedBody":"I thought I'd try to build some index of what frameworks each package on nuget.org supports.\r\n\r\nIntellectually, it seems obvious to me that the definition of \"supports\" is actually a very deep question. For example, this question could be expanded by specifying:\r\n\r\n1. Are you targeting packages.config? Are you targeting `PackageReference`?\r\n1. What assets are you interesting in? For example, maybe want compile-time and run-time .NET APIs available in `lib`. Or perhaps you only want MSBuild targets. _wait wut_\r\n1. _**HARD MODE:**_ What if the top level package is support be a dependency is now? For example, you have a meta-package with dependencies not under a target framework. For example, [Microsoft.AspNet.WebApi 5.2.3](https://www.nuget.org/packages/Microsoft.AspNet.WebApi/5.2.3).\r\n\r\n... but how do I even try?\r\n\r\nI tried a couple of approaches to determine this.\r\n\r\n### Easy \r\n\r\nFor example, I tried using [`PackageReaderBase.GetSupportedFrameworks`](https://github.com/NuGet/NuGet.Client/blob/932accfb173379c0ad01e6f3d47130e64dc383fa/src/NuGet.Core/NuGet.Packaging/PackageReaderBase.cs#L364). However this doesn't seems to take `ref/*` into account which `PackageReference` restore flow does ([source](https://github.com/NuGet/NuGet.Client/blob/932accfb173379c0ad01e6f3d47130e64dc383fa/src/NuGet.Core/NuGet.Commands/RestoreCommand/CompatibilityChecker.cs#L436)).\r\n\r\nFor example, Microsoft.CSharp 4.3.0 has `netstandard1.3` in `lib` but `netstandard1.0` in `ref` meaning if `ref` is considered then `netstandard1.0`, `netstandard1.1` and `netstandard1.2` are actually supported.\r\n\r\n### Okay, okay\r\n\r\nI also tried using the code in `CompatibilityChecker` which suggests the frameworks that a package supports ([source](https://github.com/NuGet/NuGet.Client/blob/1bb100cd4df524de75356ccfd146041eb95c2d59/src/NuGet.Core/NuGet.Commands/RestoreCommand/CompatibilityChecker.cs#L252-L294)) to the user while erroring out, but this code seems very different than the compatibility checker itself ([source](https://github.com/NuGet/NuGet.Client/blob/1bb100cd4df524de75356ccfd146041eb95c2d59/src/NuGet.Core/NuGet.Commands/RestoreCommand/CompatibilityChecker.cs#L332-L340)).\r\n\r\n### can haz results\r\n\r\nI then tried enumerating all frameworks known to NuGet and tried simulating each as a package dependency of a fake project in a restore. This gave me a lot of different answers than the first two attempts.\r\n\r\nPerhaps the notion of what frameworks a package supports is a fallacy entirely due to point 2 above. Suppose a package is used for MSBuild goo by one person but expected to have `lib/*` (.NET APIs to use) by another person.\r\n\r\n### Conclusion\r\n\r\nTo avoid further descent into depression, let's try to summarize what I am asking concisely.\r\n\r\n**Is there a simple way to determine what NuGet frameworks a package supports? Let's assume I:**\r\n\r\n1. Only care about `PackageReference` (absolves point 1 above)\r\n1. Just want the package to install and don't care about any particular asset (absolves point 2 above)\r\n1. Ignore any compatibility issues of transitive dependencies (absolves point 3 above)\r\n\r\n`GetSupportedFrameworks` seems to not cut it due to ignoring `ref` assets. Although arguably without considering transitive references `ref` (i.e. point 3) doesn't make much sense since you need a runtime assembly eventually... right?\r\n\r\nIf there is not a simple API, is there a document describing the rules so I can implement it myself without creating [some frankenstein](https://github.com/joelverhagen/NuGetCompat/blob/54d3d78b11fe4b5565c2d0bbf68eaa3d543dc9ec/NuGetCompat/SupportedFrameworksProvider.cs#L181) of hacked NuGet restore code of questionable correctness?"},{"Id":"39416965709","Type":"PullRequestEvent","CreatedAt":"2024-06-18T23:01:39","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/pull/13561","RelatedDescription":"Opened pull request \"Spec: NuGet onboarding to Unified Settings in Visual Studio\" (#13561) at NuGet/Home","RelatedBody":""},{"Id":"39416709510","Type":"IssuesEvent","CreatedAt":"2024-06-18T22:45:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13541","RelatedDescription":"Closed issue \"\"An item with the same key has already been added.\" thrown with version 6.10 of nuget\" (#13541) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet.exe\n\n### Product Version\n\nNuGet Version: 6.10.0.107\n\n### Worked before?\n\n6.5.0\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nnuget restore <file>.sln -verbosity detailed\r\n\r\nGet error:\r\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\r\n\r\nWorked fine with version 6.5. Same underlying version of MSBuild.\r\n\n\n### Verbose Logs\n\n```shell\nAn item with the same key has already been added.\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at NuGet.CommandLine.RestoreCommand.GetPackagesConfigToProjectPath(PackageRestoreInputs packageRestoreInputs)\r\n   at NuGet.CommandLine.RestoreCommand.<PerformNuGetV2RestoreAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.RestoreCommand.<ExecuteCommandAsync>d__52.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.CommandLine.Command.Execute()\r\n   at NuGet.CommandLine.Program.MainCore(String workingDirectory, String[] args)\n```\n"},{"Id":"39416179156","Type":"IssuesEvent","CreatedAt":"2024-06-18T22:15:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13510","RelatedDescription":"Closed issue \"Building with `net8.0-ios` is picking `net8.0` from NuGet package instead of `net8.0-ios17.0`\" (#13510) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\n.NET SDK 8.0.300\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n\r\n[themes-build-ios-winui.zip](https://github.com/user-attachments/files/15551150/themes-build-ios-winui.zip)\r\n\r\nSee target `ResolvePackageAssets` for the build of `Uno.Themes.WinUI.Samples.Mobile.csproj`. Specifically, the output item `RuntimeCopyLocalItems` and more specifically the Uno.UI.dll path. It's `/Users/runner/.nuget/packages/uno.winui/5.3.0-dev.1669/lib/net8.0/Uno.UI.dll`.\r\n\r\nThis version of the Uno package has `net8.0-ios17.0`. But `net8.0` was favored over `net8.0-ios17.0`, which doesn't feel correct.\n\n### Verbose Logs\n\n_No response_"},{"Id":"39414408043","Type":"IssuesEvent","CreatedAt":"2024-06-18T20:57:13","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13560","RelatedDescription":"Opened issue \"VS 17.10 - Error building projects with CPM explicitly enabled if ManagePackageVersionsCentrally is set to false in Directory.Build.props\" (#13560) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/VS-1710---Cant-enable-CPM-on-individua/10683768)._\n\n---\n\\[severity:It’s more difficult to complete my work\\] \\[regression\\] \\[worked-in:17.9\\]  \nIf CPM is disabled globally via `<ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>` in the `Directory.Build.props` file, a “Failed to restore” error is thrown when building a project which has CPM explicitly enabled by setting `ManagePackageVersionsCentrally` to `true` in the .csproj.\n\nI’m guessing this may have been introduced with the change to enable CPM whenever there is a `Directory.Packages.props` file present in the root directory ([https://github.com/NuGet/Home/issues/11834](https://github.com/NuGet/Home/issues/11834)).\n\n### To reproduce:\n\nPre-req: You have both `Directory.Build.props` and `Directory.Packages.props` files in the root directory of the repository.\n\n1.  Inside of `Directory.Build.props` set `<ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>` to disable CPM by default for all projects.\n2.  Inside a .csproj file within your repository, set `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` to enable CPM for that individual project.\n\n**Expected:**\nCPM enabled for projects which have `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` explicitly set. \n\n**Actual:**\n“Failed to restore” errors when building projects which have `<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>` explicitly set. \ne.g.\n\n```  \nFailed to restore C:\\TestCpm\\WithCpm\\WithCpm.csproj (in 6 ms).\nNuGet package restore failed. Please see Error List window for detailed warnings and errors.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.<GetProjectFileDependencySet>g__IndexOfWhiteSpace|6_1(String s)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.GetProjectFileDependencySet(LockFile lockFile, String frameworkAlias)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.<WritePackageDependenciesDesignTime>g__GetPackageDependencies|59_0()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WritePackageDependenciesDesignTime()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroup(Action writeItems)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.Write()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.WriteToCacheFile()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n  \n```\n\nHave also seen a slightly different stack trace:\n\n```  \n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProjectContext.<>c__DisplayClass31_0.<GetTopLevelDependencies>b__3(String projectFileDependency)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.ComputePackageExclusions()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task)\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n1>C:\\Program Files\\dotnet\\sdk\\8.0.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n  \n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/16/2024, 11:48 PM: \n\n(private comment, text removed)\n#### Jason Brooks on 6/17/2024, 07:09 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"39412366657","Type":"IssuesEvent","CreatedAt":"2024-06-18T19:35:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13556","RelatedDescription":"Closed issue \"PERF: GetPackageInfo allocates by unnecessarily calling GetNupkgMetadataPath\" (#13556) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5859 for more details\r\n\r\nRepro:\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\r\nAllocations during FallbackPackagePathResolver.GetPackageInfo:\n\n### Verbose Logs\n\n_No response_"},{"Id":"39411991442","Type":"IssuesEvent","CreatedAt":"2024-06-18T19:21:23","Actor":"ToddGrun","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13557","RelatedDescription":"Closed issue \"PERF: Unnecessary construction of LockFileItem.Properties dictionary\" (#13557) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nVS17\n\n### Worked before?\n\nN/A\n\n### Impact\n\nOther\n\n### Repro Steps & Context\n\nSee https://github.com/NuGet/NuGet.Client/pull/5861 for more details\r\n\r\nOpen VS\r\nWait for things to calm down\r\nStart profiling\r\nOpen Roslyn.sln, open a file it none opened\r\nWait for things to calm down\r\nStop profiling\n\n### Verbose Logs\n\n_No response_"},{"Id":"39408647773","Type":"IssuesEvent","CreatedAt":"2024-06-18T17:17:55","Actor":"aortiz-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13289","RelatedDescription":"Closed issue \"[Epic]Deprecate http usage: Promote from warning to error\" (#13289) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, MSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\nWe have [NU1803](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1803) warnings across NuGet. Promote from warning to error.\r\n\r\n- [x] [Promote from warning to error in restore scenarios](https://github.com/NuGet/Home/issues/13353)\r\n- [x] [Promote from warning to error in push operations](https://github.com/NuGet/Home/issues/13342)\r\n- [x] [Promote from warning to error in delete operations](https://github.com/NuGet/Home/issues/13341)\r\n- [x] [Promote from warning to error in search package](https://github.com/NuGet/Home/issues/13316)\r\n- [x] [Promote from warning to error in list package](https://github.com/NuGet/Home/issues/13323)\r\n- [x] [Promote from warning to error in source command](https://github.com/NuGet/Home/issues/13333)\r\n- [x] [Promote from warning to error in VS Options NuGet Package Manager](https://github.com/NuGet/Home/issues/13354)\r\n- [ ] [Show an error when a non https source is used in a resource in a service index](https://github.com/NuGet/Home/issues/13364)\r\n- [ ] [Add `--allow-insecure-connections` option to dotnet.exe](https://github.com/NuGet/Home/issues/13396)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-06-19T03:30:18.5816569Z","RunDurationInMilliseconds":1053}