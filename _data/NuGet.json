{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.0 – Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!","PublishedOn":"2021-11-08T18:59:15+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"NuGet 6.0 &#8211; Source Mapping, Package Vulnerabilities, Faster Solution Load, Oh My!\nNuGet 6.0 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.0 for...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6/","RawContent":null},{"Title":"Introducing the New NuGet.org Package Details Page","PublishedOn":"2021-09-23T21:39:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are excited to announce a massive makeover for the package details page on NuGet.org. We built NuGet.org to help .NET developers find packages that will accelerate their projects, and this...","Href":"https://devblogs.microsoft.com/nuget/introducing-the-new-nuget-org-package-details-page/","RawContent":null},{"Title":"Introducing Package Source Mapping","PublishedOn":"2021-09-15T22:30:44+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re happy to announce the first preview release of Package Source Mapping with Visual Studio 2022 preview 4! Package Source Mapping gives you fine-grained control of where your packages come...","Href":"https://devblogs.microsoft.com/nuget/introducing-package-source-mapping/","RawContent":null},{"Title":"IntelliCode Package Suggestions for NuGet in Visual Studio","PublishedOn":"2021-06-02T18:00:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Building on Visual Studio’s robust IntelliCode experience for .NET, we’re excited to introduce NuGet IntelliCode Package Suggestions in Visual Studio 16.10! IntelliCode Package Suggestions use your...","Href":"https://devblogs.microsoft.com/nuget/intellicode-package-suggestions-for-nuget-in-visual-studio/","RawContent":null},{"Title":"Add a README to Your NuGet Package","PublishedOn":"2021-05-06T19:00:22+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In March, we published a blog on the State of the NuGet Ecosystem, where we discussed insights gained from the hundreds of customers we&#8217;ve heard from over the last six months. One of the top...","Href":"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/","RawContent":null},{"Title":".NET 5 NuGet Restore Failures on Linux distributions using NSS or ca-certificates","PublishedOn":"2021-04-06T16:03:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We will be releasing updated builds of NuGet this week to accommodate NuGet restore failures on Linux distributions. The failures are observed when updated versions of the NSS or ca-certificates...","Href":"https://devblogs.microsoft.com/nuget/net-5-nuget-restore-failures-on-linux-distributions-using-nss-or-ca-certificates/","RawContent":null},{"Title":"Performance and Polish with NuGet 5.9","PublishedOn":"2021-03-17T19:59:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Getting started with NuGet 5.9\nNuGet 5.9 is included in Visual Studio 16.9 and .NET 5.0 out of the box. You can also download NuGet 5.9 for Windows, macOS, and Linux as a standalone executable.\nNuGet...","Href":"https://devblogs.microsoft.com/nuget/performance-and-polish-with-nuget-5-9/","RawContent":null},{"Title":"How to Scan NuGet Packages for Security Vulnerabilities","PublishedOn":"2021-03-02T22:15:46+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"Open Source is everywhere. It is in many proprietary codebases and community projects. For organizations and individuals, the question today is not whether you are or are not using open-source code,...","Href":"https://devblogs.microsoft.com/nuget/how-to-scan-nuget-packages-for-security-vulnerabilities/","RawContent":null},{"Title":"State of the NuGet Ecosystem","PublishedOn":"2021-03-01T17:05:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Introduction\nOver the last six months, the NuGet team has been busy running user surveys for NuGet and the .NET ecosystem. Recently, our team launched our first quarterly user survey for NuGet.org....","Href":"https://devblogs.microsoft.com/nuget/state-of-the-nuget-ecosystem/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021","PublishedOn":"2021-02-25T19:13:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"19023914763","Type":"PullRequestEvent","CreatedAt":"2021-11-23T23:28:05","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8893","RelatedDescription":"Merged pull request \"[Gallery] Merge from dev to main for Roslyn Analyzer\" (#8893) at NuGet/NuGetGallery","RelatedBody":"There is no need for a deployment."},{"Id":"19023654796","Type":"PullRequestEvent","CreatedAt":"2021-11-23T23:01:08","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8893","RelatedDescription":"Opened pull request \"[Gallery] Merge from dev to main for Roslyn Analyzer\" (#8893) at NuGet/NuGetGallery","RelatedBody":"There is no need for a deployment."},{"Id":"19023626903","Type":"PullRequestEvent","CreatedAt":"2021-11-23T22:58:22","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8891","RelatedDescription":"Merged pull request \"[Gallery] Configure local build.ps1 for Roslyn Analyzer\" (#8891) at NuGet/NuGetGallery","RelatedBody":"This is for the package build pipeline.\r\n\r\nTest in both local build and build pipeline.\r\n"},{"Id":"19023055454","Type":"PullRequestEvent","CreatedAt":"2021-11-23T22:04:24","Actor":"JakubHaladej","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8892","RelatedDescription":"Opened pull request \"Allow user selection in install command\" (#8892) at NuGet/NuGetGallery","RelatedBody":"https://github.com/NuGet/NuGetGallery/issues/8886 Prevent autoselection in command box so user can select parts he wants."},{"Id":"19021051400","Type":"PullRequestEvent","CreatedAt":"2021-11-23T19:27:16","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8891","RelatedDescription":"Opened pull request \"[Gallery] Configure local build.ps1 for Roslyn Analyzer\" (#8891) at NuGet/NuGetGallery","RelatedBody":"This is for the package build pipeline.\r\n"},{"Id":"19006838034","Type":"PullRequestEvent","CreatedAt":"2021-11-23T01:48:01","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8890","RelatedDescription":"Opened pull request \"ServerCommon and NuGet.Client libraries updated.\" (#8890) at NuGet/NuGetGallery","RelatedBody":"* ServerCommon Libraries updated to 2.93.0.\r\n* NuGet.Client Libraries updated to 6.0.0."},{"Id":"19005734560","Type":"PullRequestEvent","CreatedAt":"2021-11-22T23:28:55","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8466","RelatedDescription":"Closed pull request \"Gallery storage secret refresh\" (#8466) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3522\r\n\r\nThis change makes Gallery refresh storage credentials. While the general mechanism to refresh secrets is introduced, I did *not* go through all DI container registrations to make sure we don't have other singletons holding on to old secrets. The goal was to make storage secrets rotate at this moment.\r\n\r\nThe problem with secret refresh in Gallery has several reasons:\r\n* We have too many singletons that inject secrets once at their creation, then hold on to those injected values;\r\n* The `AppConfiguration` object is expensive to create (and we need one for every request we get) as it might try to read secrets from KeyVault, so it was registered in DI container as a singleton as well, so there was no way to retrieve fresh set of credentials.\r\n\r\nTo address the latter concern a [change](https://github.com/NuGet/ServerCommon/pull/363) in ServerCommon was made that introduces the sync secret injection with refresh in background task. Now, `ConfigurationService` during startup enumerates all the secrets Gallery uses, feeds them into the sync secret reader to start the background refresh loop. Now, injecting secret is a sync operation that never does any I/O. The downside here is that if we don't discover all secrets during startup, the injection of those missed secrets will fail at run time. To mitigate that a self-healing mechanism was added to the sync reader that would add those new secrets to the refresh list, so while the initial attempts to inject those would fail, it should eventually start working. Sync reader emits a metric if it runs into such situation, we'll have an alert for that.\r\n\r\nThe process of enumerating all secrets got a bit complicated since Authentication-related settings had their own mechanism of reading secrets.\r\n\r\nThe next major change was making sure storage-related registrations are not singletons. There were a few issues with those:\r\n* Object themselves once constructed hold on to resolved secrets forever;\r\n* Object factories in `ConfigureForAzureStorage` used a single instance of `AppConfiguration` to create new instances;\r\n* Some of storage-related objects have to be singletons.\r\n\r\n`EditableFeatureFlagFileStorageService` and `ContentService` have some caching mechanisms inside, which requires them to be a singleton. One option to solve it would be to extract the caching functionality into a separate class that would not have anything to do with underlying storage, but that would be quite complicated change, instead, instances of those classes now get storage service factories, instantiate individual services as needed and discard them right after that. Some DI registrations had to be updated to make sure they receive properly keyed factories.\r\n\r\n`GalleryMachineKeyConfigurationProvider` was updated to not to try to create configuration for itself if it is not available. Now it waits until `ConfigurationService` is properly initialized.\r\n\r\nSince the new sync secret reader emits metrics, we now need to set up telemetry service before the configuration service is fully initialized, so some workarounds had to be added there (specifically, to prevent attempting to inject secrets to telemetry-related options, since those don't contain secrets).\r\n\r\n`_configurationTypes` field was added to `ConfigurationService` to unify the way various types of configuration are crated and to make sure the secret enumeration for the new sync reader has a reliable source of data.\r\n\r\nTo test the change connection string hash logging was added to `CloudBlobClientWrapper` at the point of use (not instantiation),  to verify the refresh actually happens and secret refresh interval was reduced to 15 minutes. Since we are reading SAS tokens generated by KeyVault, they effectively change every second (issue time is precise to the second in it), which provides a good opportunity to verify they are not reused longer than expected. After running for couple of nights in dev and few bugfixes, logs indicate that secrets are indeed refreshed every 15 minutes.\r\n\r\nUnfortunately, some of our unit tests assume that `ConfigurationService.Current` always returns the same object, so some workaround was added to `TestGalleryConfigurationService` to make them pass."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"19026392966","Type":"IssuesEvent","CreatedAt":"2021-11-24T04:28:33","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11411","RelatedDescription":"Opened issue \"[Feature]: Log which Restore inputs have changed\" (#11411) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nWhen Restore inputs have changed and no-op restore is not possible, it is vital to log which input changed and how.\r\n\r\nRight now we just print: \r\n`The restore inputs for 'Proj1' have changed. Continuing restore.`\r\n\r\nWe need to at least print a message about which input(s) have changed, and how. This information is crucial for investigating incremental builds.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"19025888383","Type":"IssuesEvent","CreatedAt":"2021-11-24T03:23:56","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10557","RelatedDescription":"Closed issue \"Versions List in Details Pane is not kept in sync when changing Selected Package\" (#10557) at NuGet/Home","RelatedBody":"<!-- Please read the following information before posting the issue. -->\r\n<!-- If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place. -->\r\n<!-- If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues) -->\r\n\r\n## Details about Problem\r\nhttps://dev.azure.com/devdiv/DevDiv/_workitems/edit/1267882\r\nSometimes when changing the selected package, the old Versions list is still displayed for some time, even though the package details have changed. \r\n\r\nNuGet product used (NuGet.exe | Visual Studio | MSBuild.exe | dotnet.exe):VS\r\n\r\nProduct version: 16.9 p2\r\n\r\nWorked before? If so, with which NuGet version: (seems likely yes, confirmed good in 15.x)\r\n\r\n## Repro steps and/or sample project\r\n\r\n<!-- Please add as much details as possible to help us to reproduce your problem. -->\r\n\r\nTricky to repro, as you need to introduce a lag between changing package selection and the loading of Versions.\r\n1. Open PMUI.\r\n2. Select a package, note the Versions list in the details pane.\r\n3. Select a different package.\r\n4. Observe that the Versions list remains stale for a time (could be fractions of a second, could be minutes, depending on system).\r\n\r\n### Verbose Logs\r\n\r\n<!-- Please include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...) -->\r\n"},{"Id":"19025873858","Type":"IssuesEvent","CreatedAt":"2021-11-24T03:22:20","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11410","RelatedDescription":"Opened issue \"[DCR]: Versions dropdown in PM UI should indicate it's being loaded\" (#11410) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nA blank dropdown is shown with no indication of loading in-progress:\r\n![image](https://user-images.githubusercontent.com/49205731/143167967-aecb4117-f5c9-45ff-b011-41670dedf568.png)\r\n\n\n### Desired Behavior\n\nShow some UI element, such as a Loading spinner, to indicate this dropdown is loading.\n\n### Additional Context\n\nWhile switching selected package, while a machine is under heavier load, you can observe a stale versions list. This Issue changes that to a Cleared/empty versions list: https://github.com/NuGet/Home/issues/10557."},{"Id":"19025176823","Type":"IssuesEvent","CreatedAt":"2021-11-24T01:57:38","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11387","RelatedDescription":"Closed issue \"[DCR]: Mitigate missing nuget.org when non-NuGet tool creates nuget.config without any sources\" (#11387) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\r\n\r\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe\r\n\r\n### Current Behavior\r\n\r\nIf using Chocolatey, or Windows PowerShell's PowerShellGallery (nuget provider), on a clean machine, before running NuGet \"proper\" (Visual Studio, dotnet cli, nuget.exe, msbuild restore), then the user-profile nuget.config file created will not have any package sources. When a customer later tries to use \"real\" NuGet, nuget.org appears to not be pre-installed.\r\n\r\n### Desired Behavior\r\n\r\nStarting with a clean machine, install development tools with Chocolatey and PowerShellGallery, then install VS or the .NET SDK, NuGet restore should use nuget.org.\r\n\r\n#### ⚠️  Note ⚠️ \r\n\r\nCustomers who satisfy the following criteria:\r\n1. Installed a product with NuGet (such as Visual Studio or the `dotnet` cli) on a clean machine in 2021\r\n    * Technically, a machine which does not have the file `nugetorgadd.trk` in the directory with NuGet's user config, which would be any machine that has only used NuGet version 5.10 or higher, or if the file was manually deleted.\r\n2. Intentionally removed nuget.org from their [user nuget.config](https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior#config-file-locations-and-uses) and did not replace it with any other sources, so it does not contain any sources.\r\n\r\nThese customers will find that nuget.org will be added as a package source one time, and that the file `nugetorgadd.trk` will be created in that directory.\r\n\r\nThe mitigation to prevent this is to create an empty file named `nugetorgadd.trk` in the same directory as the user NuGet.Config before updating to new tools (NuGet.exe, Visual Studio, `dotnet` CLI), or before using them for the first time.\r\n\r\nIf NuGet is run after updating to newer tools, then nuget.org will be added to the user NuGet.Config and can be removed again. As long as `nugetorg.trk` is not deleted, it will not be re-added again.\r\n\r\n### Additional Context\r\n\r\nNuGet has always created the user-profile `nuget.config` file on first access, when the file doesn't already exist. However, there was a time when it would do so without creating any package sources. Later NuGet was modified to add nuget.org as a package source when the default file was created.\r\n\r\nSince NuGet's functionality is available as NuGet packages, other products (most notably Chocolatey and PowerShell's `Install-Module` NuGet provider) used these packages, but did not update to newer versions of the packages where nuget.org was added by default. Therefore, if these tools were used before Visual Studio, MSBuild.exe, the .NET CLI, or NuGet.exe were used, they would create this `nuget.config` file without nuget.org as a package source.\r\n\r\nThis did not cause problems in the past because the implementation of how nuget.org got added to the user-profile file was by checking if a \"tracking file\" was created. When the tracking file was not on disk, it adds nuget.org as a package source to `nuget.config`, and creates the tracking file.\r\n\r\nIn early 2021, a security researcher posted a blog post about supply chain attacks where private libraries (packages in the NuGet/.NET ecosystem) that are internal to a company and therefore are on a private feed, are at risk if someone publishes a package with the same name and version on public feeds (nuget.org in our case). One of the mitigations for this is for companies to mirror the public packages they use in a private feed, and then stop using the public feed.\r\n\r\nThere, there was a significant number of security conscience customers who were removing nuget.org from their `nuget.config`. Those customers who did not use tools such as Chocolatey, that created the nuget.config without any package source, before running NuGet in an official tool first, they found that after trying to remove nuget.org as a package source, it would come back. Only by removing nuget.org twice, that nuget.org would finally be removed as a package source.  Customers who did not notice this were at risk of the \"dependency confusion\" attack they tried to mitigate by removing nuget.org as a package source.\r\n\r\nThe NuGet.Client team changed NuGet to no longer add nuget.org as a package source when the tracking file was missing: https://github.com/NuGet/NuGet.Client/pull/3907\r\n\r\nHowever, it was not known at that time that other tools were creating `nuget.config` without the package source. Since this version of NuGet has been released in Visual Studio and the .NET SDK, customers who do use those tools were under the mistaken impression that NuGet was not adding nuget.org as a package source by default. One such issue where customers were unaware of other tools creating this file is https://github.com/NuGet/Home/issues/10804"},{"Id":"19024926148","Type":"IssuesEvent","CreatedAt":"2021-11-24T01:26:15","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11407","RelatedDescription":"Closed issue \"[Bug]: `RegistryKeyUtility.GetValueFromRegistryKey()` has unused parameter, leading to incorrect results\" (#11407) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\n6.0\r\n\r\n### Worked before?\r\n\r\nNo\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nBy taking a look at `RegistryKeyUtility` code, there's an unused parameter called `registryKeyPath`\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/a8b6b1fb3a1bccd207a83612cd0f5e1f4ff1d0b8/src/NuGet.Clients/NuGet.CommandLine/RegistryKeyUtility.cs#L12\r\n\r\nThis leads to incorrect registry key readings.\r\n\r\nWith those incorrect registry key readings, `nuget.exe` cannot print correct warning messages when _Long Path Support_ is enabled.\r\n\r\nAlso, the registry key checks runs on code that should only run on Windows Environments.\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"19023246070","Type":"IssuesEvent","CreatedAt":"2021-11-23T22:20:49","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/11400","RelatedDescription":"Reopened issue \"The fallback for secondary search endpoint doesn't work \" (#11400) at NuGet/Home","RelatedBody":"@loic-sharma mentioned:  NuGet client will try the \"primary\" search endpoint, and if that fails, retry on the \"secondary\" search endpoint. \r\n@zivkan helped finding the fallback at: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Resources/PackageSearchResourceV3.cs#L113\r\nBut it doesn't seem to retry:\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Resources/PackageSearchResourceV3.cs#L174\r\nHaven't investigated more. Just create this in case we forget about it."},{"Id":"19023224131","Type":"IssuesEvent","CreatedAt":"2021-11-23T22:18:51","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11409","RelatedDescription":"Opened issue \"Reduce heap allocations in ResolverUtility.FindLibraryByVersionAsync\" (#11409) at NuGet/Home","RelatedBody":"@kartheekp-ms commented on [Tue Nov 23 2021](https://github.com/NuGet/Client.Engineering/issues/1314)\n\nWhile working on https://github.com/nuget/client.engineering/issues/1057 issue, I noticed that `ResolverUtility.FindLibraryByVersionAsync` method https://github.com/NuGet/NuGet.Client/blob/a8b6b1fb3a1bccd207a83612cd0f5e1f4ff1d0b8/src/NuGet.Core/NuGet.DependencyResolver.Core/ResolverUtility.cs#L363 has following warnings reported by the `PerformanceSensitive` analyzers.\r\n\r\nSeverity | Code | Description | Project | File | Line | Suppression State\r\n-- | -- | -- | -- | -- | -- | --\r\nWarning | HAA0302 | The compiler will emit a class that will hold this as a field to allow   capturing of this closure | NuGet.DependencyResolver.Core (net472) | ~\\NuGet.Client-W1\\src\\NuGet.Core\\NuGet.DependencyResolver.Core\\ResolverUtility.cs | 365 | Active\r\nWarning | HAA0301 | Heap allocation of closure Captures:   libraryRange,framework,cacheContext,logger,token | NuGet.DependencyResolver.Core (net472) | ~\\NuGet.Client-W1\\src\\NuGet.Core\\NuGet.DependencyResolver.Core\\ResolverUtility.cs | 373 | Active\r\nWarning | HAA0302 | The compiler will emit a class that will hold this as a field to allow   capturing of this closure | NuGet.DependencyResolver.Core (net472) | ~\\NuGet.Client-W1\\src\\NuGet.Core\\NuGet.DependencyResolver.Core\\ResolverUtility.cs | 423 | Active\r\n\r\nThis method has ~880 MB allocations during solution restore for OrchardCore solution https://github.com/OrchardCMS/OrchardCore/tree/75923732c36d2785cb869affb805f0ff19d1847c\r\n\r\n![image](https://user-images.githubusercontent.com/52756182/143098452-39101c02-b521-4410-89a1-e4c76b4eeed3.png)\n\n"},{"Id":"19018231824","Type":"IssuesEvent","CreatedAt":"2021-11-23T16:22:33","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10520","RelatedDescription":"Closed issue \"ServiceActivationFailedException: Activating the \"Microsoft.VisualStudio.NuGet.NuGetProjectService (1.0)\" service failed\" (#10520) at NuGet/Home","RelatedBody":"Tracking issue for AzDO bug 1240336.\r\n\r\nNo repro steps (yet).\r\n\r\n```\r\n10/29/2020 12:13:29 Coordinated Universal Time: Error : 1 :[devenv:1344] Unexpected exception: System.AggregateException: One or more errors occurred.\r\n ---> Microsoft.ServiceHub.Framework.ServiceActivationFailedException: Activating the \"Microsoft.VisualStudio.NuGet.NuGetProjectService (1.0)\" service failed. ---> System.Runtime.InteropServices.COMException: Error HRESULT E_FAIL has been returned from a call to a COM component.\r\n   at Microsoft.VisualStudio.Shell.Interop.IVsShell7.LoadPackageAsync(Guid& guidPackage)\r\n   at Microsoft.VisualStudio.Services.VSGlobalBrokeredServiceContainer.PackageServiceRegistration.<LoadProfferingPackageAsync>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<LoadProfferingPackageAsync>d__25.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<TryGetProfferingSourceAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<GetProxyAsync>d__19`1.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<GetProxyAsync>d__19`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.<ProcessWorkQueueWorkerAsync>d__33.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.CodeAnalysis.ErrorReporting.WatsonExtensions.SetCallstackIfEmpty(Exception exception)\r\n---> (Inner Exception #0) Microsoft.ServiceHub.Framework.ServiceActivationFailedException: Activating the \"Microsoft.VisualStudio.NuGet.NuGetProjectService (1.0)\" service failed. ---> System.Runtime.InteropServices.COMException: Error HRESULT E_FAIL has been returned from a call to a COM component.\r\n   at Microsoft.VisualStudio.Shell.Interop.IVsShell7.LoadPackageAsync(Guid& guidPackage)\r\n   at Microsoft.VisualStudio.Services.VSGlobalBrokeredServiceContainer.PackageServiceRegistration.<LoadProfferingPackageAsync>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<LoadProfferingPackageAsync>d__25.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<TryGetProfferingSourceAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<GetProxyAsync>d__19`1.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.<GetProxyAsync>d__19`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"19011859967","Type":"IssuesEvent","CreatedAt":"2021-11-23T10:11:00","Actor":"KalleOlaviNiemitalo","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/11408","RelatedDescription":"Opened issue \"[Feature]: \"dotnet list package\" option to set an MSBuild property\" (#11408) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\ndotnet.exe\n\n### The Elevator Pitch\n\nMake `dotnet list package` accept an option, e.g. `--property:NAME=VALUE`, that lets me pass in arbitrary MSBuild global properties that can then be referenced in MSBuild `Import` elements. Properties can already be passed in as environment variables but that seems a bit deprecated according to <https://github.com/dotnet/msbuild/issues/2713>.\n\n### Additional Context and Details\n\nThis is particularly relevant for ASP.NET projects that have:\r\n\r\n```XML\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">10.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\r\n```\r\n\r\n`dotnet list package` on a solution that includes such a project fails on .NET SDK 6.0.100:\r\n\r\n> error: The imported project \"C:\\Program Files\\dotnet\\sdk\\6.0.100\\Microsoft\\VisualStudio\\v17.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Confirm that the expression in the Import declaration \"C:\\Program Files\\dotnet\\sdk\\6.0.100\\Microsoft\\VisualStudio\\v17.0\\WebApplications\\Microsoft.WebApplication.targets\" is correct, and that the file exists on disk.\r\n\r\nSetting `VSToolsPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\VisualStudio\\v15.0` as a global property lets `dotnet list package` import the file so that it can at least detect that the ASP.NET project is still using `packages.config`, and continue listing the packages referenced by the other projects in the solution."},{"Id":"19006709945","Type":"IssuesEvent","CreatedAt":"2021-11-23T01:29:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11323","RelatedDescription":"Closed issue \"[Bug]: Icons don't show for self hosted packages\" (#11323) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nVisual Studio Package Management UI\r\n\r\n### Product Version\r\n\r\nMicrosoft Visual Studio Enterprise 2019 Version 16.10.2\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt bothers me. A fix would be nice\r\n\r\n### Repro Steps & Context\r\n\r\nCreate your own package with an icon defined in the .nuspec\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>BuildingBlocks</id>\r\n    <version>1.0.0</version>\r\n    <authors>Bridges</authors>\r\n    <icon>images\\BuildingBlocks.png</icon>\r\n    <iconUrl>https://i.imgur.com/5CDMwJq.png</iconUrl>\r\n    <description>Package for sharing building blocks for the Adminsuite Projects</description>\r\n    <dependencies>\r\n      <group targetFramework=\"net5.0\">\r\n        <dependency id=\"AspNetCore.HealthChecks.UI.Client\" version=\"5.0.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.ApplicationInsights.AspNetCore\" version=\"2.18.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.ApplicationInsights.Kubernetes\" version=\"2.0.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\ncsproj file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <Authors>Bridges</Authors>\r\n    <Product>Admin Suite</Product>\r\n    <PackageIcon>images\\BuildingBlocks.png</PackageIcon>\r\n    <PackageIconUrl>https://i.imgur.com/5CDMwJq.png</PackageIconUrl>\r\n    <Description>Package for sharing building blocks for the Adminsuite Projects\r\n</Description>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"..\\BuildingBlocks.png\" Pack=\"true\" Visible=\"false\" PackagePath=\"images\\BuildingBlocks.png\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIcon does not show up in the package manager list in visual studio\r\n![image](https://user-images.githubusercontent.com/5755057/138063653-7b2b1773-1f38-44bc-a78d-d579300b29a9.png)\r\n\r\n.nupkg archive contains the icon\r\n![image](https://user-images.githubusercontent.com/5755057/138064001-d1a75ca5-7b5e-43af-a870-1e469231b99c.png)\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1458922810328371207","CreatedAt":"2021-11-11T22:21:18+00:00","UserScreenname":"nuget","Text":"Hi friends 👋\n\nHelp us deliver an amazing target framework filtering package search experience by reviewing our prop… https://t.co/AYWrsHhZcZ","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1457785562614493192","CreatedAt":"2021-11-08T19:02:17+00:00","UserScreenname":"nuget","Text":"🚢 Announcing #NuGet 6.0! \n \n📍 Source mapping\n6️⃣ .NET 6 Support\n🔒 Package Vulnerabilities\n🧑‍🔬 Retry &amp; Backoff Behav… https://t.co/qIK6tRSw87","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":164,"FavoriteCount":61,"RawContent":null},{"Id":"1448351779423457281","CreatedAt":"2021-10-13T18:15:47+00:00","UserScreenname":"nuget","Text":"Help us understand your package push workflow! https://t.co/7zALBMJ0xH","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":1,"FavoriteCount":1,"RawContent":null},{"Id":"1438283829102456833","CreatedAt":"2021-09-15T23:29:21+00:00","UserScreenname":"nuget","Text":"🙌New feature announcement🙌\n\nMap packages to target sources using Package Source Mapping 🗺️\n\nSecuring your package s… https://t.co/UCSO5dcMpz","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":68,"FavoriteCount":30,"RawContent":null},{"Id":"1417880494994198529","CreatedAt":"2021-07-21T16:13:47+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi will be migrating towards a new multi-CDN infrastructure. Some changes for older TLS cipher… https://t.co/aLVVZEHJd3","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1414988388495552514","CreatedAt":"2021-07-13T16:41:35+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠\n\nNew limits in https://t.co/KVB7werYQh's Search API have been introduced - starting TODAY, J… https://t.co/jzOXM5nFJ7","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":4,"FavoriteCount":4,"RawContent":null},{"Id":"1414616973632180231","CreatedAt":"2021-07-12T16:05:43+00:00","UserScreenname":"nuget","Text":"We are currently investigating several customer reports about problems restoring packages. These reports appear to… https://t.co/TLhd0gN60w","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":7,"FavoriteCount":4,"RawContent":null},{"Id":"1413216586253488130","CreatedAt":"2021-07-08T19:21:05+00:00","UserScreenname":"nuget","Text":"We are investigating customer reports about problems connecting to https://t.co/MK66n24Luw, such as issues while re… https://t.co/L3AW5c9mXR","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":6,"FavoriteCount":3,"RawContent":null},{"Id":"1410695861508526080","CreatedAt":"2021-07-01T20:24:37+00:00","UserScreenname":"nuget","Text":"⚠ Deprecation notice ⚠ \nHave you recently experienced issues interacting with https://t.co/KVB7werYQh's Search API?… https://t.co/3eM1gicePx","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":5,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2021-11-24T05:30:31.3695667Z","RunDurationInMilliseconds":1567}