{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"32735544264","Type":"IssuesEvent","CreatedAt":"2023-10-20T22:57:46","Actor":"mckinley-melton","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12958","RelatedDescription":"Opened issue \"Polly 7.4.2 Invalid Signature when dotnet restore run via MSBuild\" (#12958) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nMSBuild.exe\n\n### Product Version\n\nmsbuild -version 17.2.0+41abc5629\n\n### Worked before?\n\nYes. Polly 7.2.3.1\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI updated the package Microsoft.R9.Extensions.HttpClien.Resilience.Polly from version 1.29.0 to 1.32.1, which updates the package Polly 7.2.3.1 to version 7.2.4.\r\n\r\nI then tried to run this change through an MS build pipeline which includes a dotnet restore step. This is now failing the dotnet restore error \"The package signature is invalid or cannot be verified on this platform.\"\r\n\r\nPer [this documentation](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu3003), it said to report the issue here.\n\n### Verbose Logs\n\n```shell\n\"D:\\a\\_work\\1\\s\\Source\\VirtualVisit.sln\" (Restore target) (1) ->\r\n       (Restore target) -> \r\n         D:\\a\\_work\\1\\s\\Source\\Services\\VirtualAppointmentMgmtSvc\\Domain.UnitTest\\Domain.UnitTest.csproj : error NU3003: Package 'Polly 7.2.4' from source 'https://domoreexp.pkgs.visualstudio.com/Teamspace/_packaging/teams-service-platform-virtualvisits/nuget/v3/index.json': The package signature is invalid or cannot be verified on this platform. [D:\\a\\_work\\1\\s\\Source\\VirtualVisit.sln]\n```\n"},{"Id":"32729917924","Type":"IssuesEvent","CreatedAt":"2023-10-20T17:37:41","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12957","RelatedDescription":"Opened issue \"RestoreTask: Control whether to embed files in the binlog\" (#12957) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe, MSBuild.exe, dotnet.exe\n\n### The Elevator Pitch\n\nNeed some properties on RestoreTask to control whether to embed files in the binlog, and possibly filter out .dgspec.json files.\r\n\r\nWe've found that the embedded .nuget.dgspec.json files are huge, and our binlog is 1 GB in size. Would be nice to be able to control whether to include .dgspec files here:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/5ce332fb834feea1f6c974d17456c8c9d5504e09/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L216\r\n\r\nNot sure how fine grained to make it. Just one property on the task to embed dgspec files, default to true? (No effect if no binlog present). Or 4 properties to control each of the four types of files? Or a main property to control all files?\r\n\r\nEmbedding files is useful and a good default, but for large builds embedding dgspec file specifically renders the binlog almost unusable.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"32721900218","Type":"IssuesEvent","CreatedAt":"2023-10-20T12:34:35","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12952","RelatedDescription":"Closed issue \"Symbols aren't getting pushed when using -SymbolSource symbolSourceUrl\" (#12952) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet.exe\r\n\r\n### Product Version\r\n\r\nDev branch\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nIt's more difficult to complete my work\r\n\r\n### Repro Steps & Context\r\n\r\n1. Build or aquire any valid with symbols `A.nupkg` and its corresponding `A.snupkg`\r\n2. Specify a SymbolSource\r\n3. run: `nuget push A.nupkg -Source <source> -ApiKey <apikey> -SymbolSource <symbolSource>`\r\n\r\nExpected Results:\r\n1. The `nupkg` is pushed to `<source>`\r\n2. The `snupkg` is pushed to pushed to `<symbolSource>`\r\n\r\nActual:\r\nThe `nupkg` is pushed to `<source>`\r\nThe `snupkg` is NOT pushed to` <symbolSource>`\r\n\r\n\r\nThis seems to be because if `symbolSource` is not null below, then there is no execution path that sets `symbolPackageUpdateResource`\r\nhttps://github.com/NuGet/NuGet.Client/blob/041c6da3fb92d28fa8bac2a0134e9396bfc1fda8/src/NuGet.Core/NuGet.Commands/CommandRunners/PushRunner.cs#L56-L81\r\n\r\nI believe `symbolPackageUpdateResource = await CommandRunnerUtility.GetSymbolPackageUpdateResource(sourceProvider, symbolSource);` should be added before https://github.com/NuGet/NuGet.Client/blob/041c6da3fb92d28fa8bac2a0134e9396bfc1fda8/src/NuGet.Core/NuGet.Commands/CommandRunners/PushRunner.cs#L74\r\n\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"32719724503","Type":"IssuesEvent","CreatedAt":"2023-10-20T11:07:22","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12950","RelatedDescription":"Closed issue \"Cannot install, uninstall, or update ANY packages if one NuGet source is unreachable\" (#12950) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI, Visual Studio Package Manager Console\n\n### Current Behavior\n\nConsider this scenario:\r\n\r\nNuGet sources configured in Visual Studio:\r\n1. nuget.org (https://api.nuget.org/v3/index.json)\r\n2. GitHub (personal repo https://nuget.pkg.github.com/l33tc0d3r/index.json, needs authentication)\r\n3. CONTOSODEV (corporate server \\\\CONTOSODEV\\\\NuGet, needs VPN connection)\r\n\r\nSource mappings configured in Visual Studio:\r\n|Package|Source|\r\n|---|---|\r\n| com.contoso.* | CONTOSODEV |\r\n| l33tc0d3r.* | GitHub |\r\n| * | nuget.org |\r\n\r\nPackages installed in the open project:\r\n - com.contoso.discombobulator\r\n - l33tc0d3r.freakui3\r\n - Newtonsoft.Json\r\n\r\nNow when you want to update Newtonsoft.Json you can't if:\r\n\r\n1. You aren't connected to the corporate VPN\r\n2. You don't provide credentials for private GitHub packages repo (VS does not remember password across sessions*)\r\n\r\nYou cannot even remove the existing packages or install any new ones from nuget.org which should be possible even without having explicit mappings.\r\n\r\nI do understand the compatibility and security concerns if you were to fall back to different package repository, but this is beyond ridiculous and user-hostile behavior. If a package was installed from nuget.org, it's maintenance should not be affected by other sources being temporarily inaccessible.\n\n### Desired Behavior\n\n1. If a user tries to update or remove a package installed from a specific source and that source is accessible that should succeed &mdash; it shouldn't be all or nothing.\r\n2. If there is a mapping that says download `*.com.contoso` from `\\\\CONTOSODEV\\NuGet` and everything else from nuget.org and a user tries to install `Rick.Mapperly` that should succeed even if `\\\\CONTOSODEV\\NuGet` is not accessible otherwise what's the point in having source mappings in the first place?\r\n\n\n### Additional Context\n\n* Visual Studio does not save password for GitHub packages despite the checkbox \"Remember password\" being checked. That's a separate bug I guess should be reported."},{"Id":"32717598128","Type":"IssuesEvent","CreatedAt":"2023-10-20T09:45:27","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12955","RelatedDescription":"Closed issue \"Can't run multi-project program with different versions of the sqlite package\" (#12955) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 7.0.201\n\n### Worked before?\n\nThe same version everywhere working nice.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nduplicate from: https://github.com/dotnet/sdk/issues/36184\r\n### Describe the bug\r\nCan't run multi-project program in docker container due to different versions of the sqlite package. However Windows can handle it.\r\n\r\nUsed  container: \r\n- `docker pull mcr.microsoft.com/dotnet/sdk:7.0`\r\n\r\nUsed sqlite package versions:\r\n- `Microsoft.Data.Sqlite 8.0.0-preview.2.23128.3`\r\n- `Microsoft.Data.Sqlite 7.0.12`\r\n\r\n### To Reproduce\r\n1. pull `https://github.com/livwvil/dotnet_issue.git`\r\n2. run `docker compose up`\r\n3. see the error messege\r\n\n\n### Verbose Logs\n\n```shell\nUnhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Data.Sqlite, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\n```\n```\n"},{"Id":"32716046156","Type":"IssuesEvent","CreatedAt":"2023-10-20T08:47:44","Actor":"livwvil","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12955","RelatedDescription":"Opened issue \"Can't run multi-project program with different versions of the sqlite package\" (#12955) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 7.0.201\n\n### Worked before?\n\nThe same version everywhere working nice.\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nduplicate from: https://github.com/dotnet/sdk/issues/36184\r\n### Describe the bug\r\nCan't run multi-project program in docker container due to different versions of the sqlite package. However Windows can handle it.\r\n\r\nUsed  container: \r\n- `docker pull mcr.microsoft.com/dotnet/sdk:7.0`\r\n\r\nUsed sqlite package versions:\r\n- `Microsoft.Data.Sqlite 8.0.0-preview.2.23128.3`\r\n- `Microsoft.Data.Sqlite 7.0.12`\r\n\r\n### To Reproduce\r\n1. pull `https://github.com/livwvil/dotnet_issue.git`\r\n2. run `docker compose up`\r\n3. see the error messege\r\n\n\n### Verbose Logs\n\n```shell\nUnhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Data.Sqlite, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\r\n```\n```\n"},{"Id":"32714837421","Type":"IssuesEvent","CreatedAt":"2023-10-20T08:00:59","Actor":"mbenedykconfigit","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12954","RelatedDescription":"Opened issue \"`dotnet list package` cannot resolve relative path\" (#12954) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet: 8.0.0-rc.2.23479.6, NuGet Command Line 6.8.0.117\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nFollow-up https://github.com/dotnet/sdk/issues/36254\r\n\r\n### Describe the bug\r\n`dotnet list XXX.sln package` fails to list packages\r\n\r\n### To Reproduce\r\nI'm having directory with multiple sln files inside so I have to point direct sln for `dotnet list package`.\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n- `PATH TO SLN DIRECOTRY> dotnet list XXX.sln package`\r\n\r\n```\r\nerror: Unexpected failure reading NuGet.Config. Path: 'PATH TO SLN DIRECOTRY\\XXX.sln\\NuGet.Config'.\r\nerror:   Cannot create 'PATH TO SLN DIRECOTRY\\XXX.sln' because a file or directory with the same name already exists.\r\n```\r\n\r\n- `PATH TO SLN DIRECOTRY> dotnet list XXX.sln package --config NuGet.Config`\r\n```\r\nPATH TO SLN DIRECOTRY>dotnet list XXX.sln package --config NuGet.Config\r\nerror: MSB0001: Internal MSBuild Error: Quote.sln unexpectedly not a rooted path\r\n```\r\n\r\n- Only variant with full path works\r\n`PATH TO SLN DIRECOTRY> dotnet list \"PATH TO SLN DIRECOTRY\\XXX.sln\" package --config \"PATH TO SLN DIRECOTRY\\NuGet.Config\"`\r\n\r\n### Further technical details\r\n```\r\n.NET SDK:\r\n Version:   8.0.100-rc.2.23502.2\r\n Commit:    0abacfc2b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0-rc.2.23479.6\r\n  Architecture: x64\r\n  Commit:       0b25e38ad3\r\n\r\n.NET SDKs installed:\r\n  6.0.317 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100-rc.2.23502.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-rc.2.23480.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-rc.2.23479.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-rc.2.23479.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  PATH TO SLN DIRECOTRY\\global.json\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\nglobal.json used for solution\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"8.0.100-rc.2.23502.2\",\r\n    \"rollForward\": \"latestMinor\"\r\n  }\r\n}\r\n\r\n```\n\n### Verbose Logs\n\n_No response_"},{"Id":"32707208244","Type":"IssuesEvent","CreatedAt":"2023-10-19T23:40:53","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12953","RelatedDescription":"Opened issue \"Create NU Error Code for Package Source Mapping & GPF conflicts\" (#12953) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\nVisual Studio Package Management UI\n\n### Current Behavior\n\nIn https://github.com/NuGet/NuGet.Client/pull/5459#issuecomment-1770664856, the suggestion is to give actions for the customer to address their Global Packages Folder (GPF) conflicting with their solution's package source mapping configuration. \r\n\r\nThat is, the customer is installing a package, and the GPF contains a transitive dependency for that package which indicates a source that's not an enabled source for the solution.\r\n\r\nThe current behavior introduced in https://github.com/NuGet/NuGet.Client/pull/5459 is an error message shown in the error list that states the above. However, explicit advice isn't given.\n\n### Desired Behavior\n\nCreate a new NU Error Code that can be used as a hyperlink from the VS Error List to point to documentation with more information about resolving the issue.\n\n### Additional Context\n\n_No response_"},{"Id":"32707185507","Type":"IssuesEvent","CreatedAt":"2023-10-19T23:39:15","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11988","RelatedDescription":"Closed issue \"Apex tests should use timeout\" (#11988) at NuGet/Home","RelatedBody":"A recent build had this in the log, until the job timed out:\r\n\r\n> ##[warning]RunMessage : [xUnit.net 02:21:05.36] NuGet.Tests.Apex: [Long Running Test] 'NuGet.Tests.Apex.IVsServicesTestCase.SimpleInstallFromIVsInstaller', Elapsed: 02:15:06\r\n\r\nThe test should not be allowed to run for 2 hours."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911174831","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:32:04","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Opened issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"},{"Id":"30911171660","Type":"IssuesEvent","CreatedAt":"2023-08-04T21:31:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/47","RelatedDescription":"Closed issue \"The Microsoft author signing certificate will be updated as soon as November 1st, 2020\" (#47) at NuGet/Announcements","RelatedBody":"The current Microsoft author signing certificate will be updated as soon as November 1st, 2020. If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`NuGet.exe verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify\r\n) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update/\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-10-22T03:30:20.581478Z","RunDurationInMilliseconds":1229}