{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"38583200492","Type":"PullRequestEvent","CreatedAt":"2024-05-21T20:29:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9954","RelatedDescription":"Merged pull request \"Merge branch `main` into `dev`\" (#9954) at NuGet/NuGetGallery","RelatedBody":"This carries my hotfix to `dev` (https://github.com/NuGet/NuGetGallery/pull/9951)."},{"Id":"38580281198","Type":"PullRequestEvent","CreatedAt":"2024-05-21T18:39:57","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9954","RelatedDescription":"Opened pull request \"Merge branch `main` into `dev`\" (#9954) at NuGet/NuGetGallery","RelatedBody":"This carries my hotfix to `dev` (https://github.com/NuGet/NuGetGallery/pull/9951)."},{"Id":"38580256496","Type":"PullRequestEvent","CreatedAt":"2024-05-21T18:39:03","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9951","RelatedDescription":"Merged pull request \"[Hotfix] Allow unrelated entity changes to be committed in PackageDeprecationService\" (#9951) at NuGet/NuGetGallery","RelatedBody":"Mitigation for https://github.com/NuGet/NuGetGallery/issues/9950 in the package deprecation path.\r\n\r\n**Hotfix justification:** deprecation API calls that would otherwise no-op sometimes return HTTP 500. Since this is a private preview API, there is no data correctness impact, and non-no-op deprecations work just fine, we could choose to not do a hotfix. I would just to prefer to get this fixed ASAP to eliminate a source of HTTP 500s.\r\n\r\nCurrently, if a deprecation call no-ops all package version and the node handling the deprecation has a different download count cached for a package version than is what in the DB, an HTTP 500 occurs.\r\n\r\nThis is because the package entity has changes (per the issue referenced above) but the deprecation service does not detect any changes on the entity. `IPackageUpdateService.UpdatePackagesAsync` is called with an empty list and throws an argument exception which is causing the HTTP 500. We have seen this about 300 times on the deprecation API in the past week, all of which are first party packages or are related to https://github.com/DefinitelyTyped/NugetAutomation/issues/21.\r\n\r\nThis was not detected locally because storage-based statistics are not used. This was not detected on DEV or INT because the package used for testing had the same download count in DB and in the downloads.v1.json file therefore the `DownloadCountObjectMaterializedInterceptor` did not introduce any entity changes."},{"Id":"38579351018","Type":"IssuesEvent","CreatedAt":"2024-05-21T18:07:48","Actor":"guibranco","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9953","RelatedDescription":"Opened issue \"[Feature]: Allow readme images from DeepSource\" (#9953) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nAllow `readme.md` files to reference images from [Deepsource](https://deepsource.com/).\r\n\r\nDeepSource is a code health platform that helps developers and engineering teams systematically improve code quality and security and save time in code reviews.\r\n\r\nImages (badges) are served from `app.deepsource.com` domain.\r\n\r\nSample markdown:\r\n\r\n[![DeepSource](https://app.deepsource.com/gh/guibranco/CrispyWaffle.svg/?label=active+issues&show_trend=true&token=r3XGa8MQHGZERdIhKB5EZXfL)](https://app.deepsource.com/gh/guibranco/CrispyWaffle/?ref=repository-badge)\n\n### The Elevator Pitch\n\nAdd the domain `app.deepsource.com` to the allowed images domains list in readme.md files\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38576765553","Type":"IssuesEvent","CreatedAt":"2024-05-21T16:38:56","Actor":"JonDouglas","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9952","RelatedDescription":"Opened issue \"[Feature]: Generate API documentation for documented symbols in a package\" (#9952) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\n_No response_\n\n### The Elevator Pitch\n\nNuGet.org should provide public API documentation for every NuGet package it ingests similar to other package ecosystems:\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/1288848/d3bff757-4fcd-43f3-aba3-65782c6743f5)\r\n<img width=\"1872\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/1288848/9a82fd2b-7053-42e1-a7ff-b7322197028d\">\r\n<img width=\"1872\" alt=\"image\" src=\"https://github.com/NuGet/NuGetGallery/assets/1288848/9330a172-d538-46aa-ad2d-8c6cbde055cb\">\r\n\r\nThat's it. That's the pitch!\r\n\r\nFuture opportunities could be helping empower developers comment their public API surface further and providing API knowledge / docs to our AI overlords.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38547926245","Type":"PullRequestEvent","CreatedAt":"2024-05-20T22:42:05","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9935","RelatedDescription":"Merged pull request \"[Dark Theme] Fix failing functional tests related to minification\" (#9935) at NuGet/NuGetGallery","RelatedBody":"Functional tests related to minification started to fail with this new feature.\r\nWhat is happening is that CSS minification isn't able to understand the CSS variables because we are using an old package to handle bundle/minification (System.Web.Optimization from 2014).\r\n\r\n```\r\nFound:    Minification failed\r\n      In value: /* Minification failed. Returning unminified contents.\r\n      (296,15): run-time error CSS1039: Token not allowed after unary operator: '-brandForegroundLinkRest'\r\n      (301,15): run-time error CSS1039: Token not allowed after unary operator: '-brandForegroundLinkHover'\r\n      (306,27): run-time error CSS1039: Token not allowed after unary operator: '-neutralStrokeFocus2Rest'\r\n      (533,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground3Rest'\r\n      (622,26): run-time error CSS1039: Token not allowed after unary operator: '-neutralBackground5Rest'\r\n      (1582,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground3Rest'\r\n      (1819,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground2Rest'\r\n      (1821,33): run-time error CSS1039: Token not allowed after unary operator: '-neutralStroke2Rest'\r\n      (1838,15): run-time error CSS1039: Token not allowed after unary operator: '-neutralForeground1Rest'\r\n      (1859,26): run-time error CSS1039: Token not allowed af\r\n      Stack Trace:\r\n        D:\\a\\_work\\1\\s\\tests\\NuGetGallery.FunctionalTests\\StaticAssets\\StaticAssetsTests.cs(145,0): at NuGetGallery.FunctionalTests.StaticAssets.StaticAssetsTests.<NoBundleFailsMinification>d__14.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\n\r\n#### Fix\r\n\r\nGrunt also creates minified files every time we use `grunt` command, with this change I'm no longer adding the files to the `site.min.css` bundle to avoid minification and instead use the minified file we already have. \r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/9936"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"38586048169","Type":"IssuesEvent","CreatedAt":"2024-05-21T22:32:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13454","RelatedDescription":"Closed issue \"NuGetAuditLevel is not respected with packages.config projects when restoring with msbuild -t:restore \" (#13454) at NuGet/Home","RelatedBody":""},{"Id":"38585378372","Type":"IssuesEvent","CreatedAt":"2024-05-21T21:57:59","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13443","RelatedDescription":"Closed issue \"VS project nominations should use generic data structure\" (#13443) at NuGet/Home","RelatedBody":"For project systems in Visual Studio that support both CPS and PackageReference capabilities (so in effect just the SDK style .NET projects) use a NuGet data flow where the project system pushes project item and properties to NuGet via an API called NominateProjectAsync.\r\n\r\nThis API has a data structure where the interface has properties `ProjectReferences`, `PackageReferences`, and so on. So, every time NuGet wants to add a new MSBuild item, we need to create a new iterface for the new item type, publish the package, then edit dotnet/project-system to use the new package and set the new property for the item.\r\n\r\nProject properties and item metadata already use a generic property bag, which is more or less equivalent to `IReadOnlyDictionary<string, string>` (but is different for COM compatibility). Items should also use a generic data structure, so that future additions to which MSBuild items NuGet reads no longer requires project system to update package versions to implement the change."},{"Id":"38583003712","Type":"IssuesEvent","CreatedAt":"2024-05-21T20:21:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13454","RelatedDescription":"Opened issue \"NuGetAuditLevel is not respected with packages.config projects when restoring with msbuild -t:restore \" (#13454) at NuGet/Home","RelatedBody":""},{"Id":"38571554467","Type":"IssuesEvent","CreatedAt":"2024-05-21T14:06:48","Actor":"AR-May","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13453","RelatedDescription":"Opened issue \"[Bug]: dotnet restore throws error NU1202 with dotnet sdk 8.0.300 for some centrally managed packages\" (#13453) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/msbuild#10157**\r\n- Please respond to @tomasfabian.\r\n\r\n---\r\n\r\n_From @tomasfabian on Monday, May 20, 2024 9:56:59 AM_\r\n\r\n### Issue Description\r\n\r\nAfter upgrading to the latest .NET SDK 8.0.300, the build process fails when using **ManagePackageVersionsCentrally** in case of some packages such as `FluentAssertions`.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nRunning the `dotnet restore` Demo.sln command with the configuration below fails to restore packages:\r\n\r\nUnitTest.csproj:\r\n```xml\r\n<Project Sdk=\"MSTest.Sdk/3.3.1\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net8.0</TargetFramework>\r\n        <IsPackable>false</IsPackable>\r\n    </PropertyGroup>\r\n\r\n    <PropertyGroup>\r\n        <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"FluentAssertions\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\nDirectory.Packages.props\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <PackageVersion Include=\"FluentAssertions\" Version=\"6.12.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis works as expected:\r\n```xml\r\n<Project Sdk=\"MSTest.Sdk/3.3.1\">\r\n\r\n  <PropertyGroup>\r\n      <TargetFramework>net8.0</TargetFramework>\r\n      <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n    <PropertyGroup>\r\n        <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"FluentAssertions\" Version=\"6.12.0\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nRunning `dotnet restore` with .NET SDK 8.0.300 should work the same way as it does with .NET SDK 8.0.205.\r\n\r\n### Actual Behavior\r\n\r\nA much older version of the package is being used/reported instead of the referenced one:\r\n_C:\\UnitTests.csproj : error NU1202: Package FluentAssertions 1.3.0.1 is not compatible with net8.0 (.NETCoreApp,Version=v8.0). Package FluentAssertions 1.3.0.1 supports: [C:\\Demo.sln]_\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_"},{"Id":"38554095248","Type":"IssuesEvent","CreatedAt":"2024-05-21T05:05:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13451","RelatedDescription":"Closed issue \"Failed to regenerate a new cache file after deleting cache file and rebuilding solution\" (#13451) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Build the solution, observe generate a restore cache file inside obj/ folder.  \r\n\r\n3. Delete the cache file manually. \r\n\r\n4. Rebuild the solution, observe if it will regenerate a cache file inside obj/ folder and the timestamp is updated. \r\n\r\n#### Expected:    \r\n\r\nA cache file with an updated timestamp is regenerated in the obj/ folder. \r\n\r\n#### Actual: \r\n\r\nNo cache file is regenerated in the obj/ folder as below: \r\n![time](https://github.com/NuGet/Home/assets/84695155/374a87ec-6ff0-4619-87af-86825ca0a120)\r\n\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It also reproes on UWP project and non-SDK project that install package with “PackageReference” format \n\n### Verbose Logs\n\n_No response_"},{"Id":"38554095145","Type":"IssuesEvent","CreatedAt":"2024-05-21T05:05:46","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13452","RelatedDescription":"Closed issue \"An error “Package System.ArgumentNullException: Value cannot be null” occurs when restoring package with the context menu: ‘Restore NuGet Packages’ after cleaning solution\" (#13452) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Right-click the solution node in Solution Explorer window and click the context menu: ‘Clean Solution’. \r\n\r\n3. Right-click the solution node in Solution Explorer window and click the context menu: ‘Restore NuGet Packages’. \r\n\r\n#### Expected:    \r\n\r\nThe retore is successful without any error. \r\n\r\n#### Actual: \r\n\r\nAn error “Package System.ArgumentNullException: Value cannot be null” occurs as below: \r\n![image (1)](https://github.com/NuGet/Home/assets/84695155/781da4f9-b725-431f-942a-a0375651e22b)\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It doesn’t repro on non-SDK project that install package with “packages.config” format. \r\n\r\n3. It doesn’t repro after running ‘dotnet restore’ or ‘msbuild /t:restore’ command in CLI and ‘nuget restore’ in PMC.  \r\n\r\n \n\n### Verbose Logs\n\n_No response_"},{"Id":"38544968250","Type":"IssuesEvent","CreatedAt":"2024-05-20T20:25:07","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13448","RelatedDescription":"Closed issue \"TaskResultCache incorrectly shares the same lock object for all the keys.\" (#13448) at NuGet/Home","RelatedBody":"There is a *very* subtle bug in `TaskResultCache` that is causing the same lock object to be used rather than a different one per key. Here's the offending code:\r\n\r\n`object lockObject = _perTaskLock.GetOrAdd(key, static () => new object());`\r\n\r\nThis erroneously caches the *delegate* that is used. The intent was to pass in a delegate that will create a new object and cache/lock on that."},{"Id":"38525938486","Type":"IssuesEvent","CreatedAt":"2024-05-20T09:32:29","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13452","RelatedDescription":"Opened issue \"An error “Package System.ArgumentNullException: Value cannot be null” occurs when restoring package with the context menu: ‘Restore NuGet Packages’ after cleaning solution\" (#13452) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt’s a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Right-click the solution node in Solution Explorer window and click the context menu: ‘Clean Solution’. \r\n\r\n3. Right-click the solution node in Solution Explorer window and click the context menu: ‘Restore NuGet Packages’. \r\n\r\n#### Expected:    \r\n\r\nThe retore is successful without any error. \r\n\r\n#### Actual: \r\n\r\nAn error “Package System.ArgumentNullException: Value cannot be null” occurs as below: \r\n![image (1)](https://github.com/NuGet/Home/assets/84695155/781da4f9-b725-431f-942a-a0375651e22b)\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It doesn’t repro on non-SDK project that install package with “packages.config” format. \r\n\r\n3. It doesn’t repro after running ‘dotnet restore’ or ‘msbuild /t:restore’ command in CLI and ‘nuget restore’ in PMC.  \r\n\r\n \n\n### Verbose Logs\n\n_No response_"},{"Id":"38525786449","Type":"IssuesEvent","CreatedAt":"2024-05-20T09:27:29","Actor":"CiciLi1","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13451","RelatedDescription":"Opened issue \"Failed to regenerate a new cache file after deleting cache file and rebuilding solution\" (#13451) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nNuGet Client Dev\\6.11.0.55\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on Main\\34915.142 + NuGet Client Dev\\6.11.0.50. \n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n#### Repro Steps:    \r\n\r\n1. Create a C# Console App (.NET Core) project in VS. \r\n\r\n2. Build the solution, observe generate a restore cache file inside obj/ folder.  \r\n\r\n3. Delete the cache file manually. \r\n\r\n4. Rebuild the solution, observe if it will regenerate a cache file inside obj/ folder and the timestamp is updated. \r\n\r\n#### Expected:    \r\n\r\nA cache file with an updated timestamp is regenerated in the obj/ folder. \r\n\r\n#### Actual: \r\n\r\nNo cache file is regenerated in the obj/ folder as below: \r\n![time](https://github.com/NuGet/Home/assets/84695155/374a87ec-6ff0-4619-87af-86825ca0a120)\r\n\r\n#### Notes:     \r\n\r\n1. The repro rate is 100%.     \r\n\r\n2. It also reproes on UWP project and non-SDK project that install package with “PackageReference” format \n\n### Verbose Logs\n\n_No response_"},{"Id":"38502709999","Type":"IssuesEvent","CreatedAt":"2024-05-19T00:05:29","Actor":"gilmorem560","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13450","RelatedDescription":"Opened issue \"NU1202 Package Framework Compatiblity Error Emitted on Precisely Compatible Framework (Windows Only?)\" (#13450) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\ndotnet CLI 8.0.204 (Windows), Nuget Package Manager 6.9.2\n\n### Worked before?\n\ndotnet CLI 8.0.204 (macOS)\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n```\r\ndotnet new classlib -f net6.0\r\ndotnet add package Microsoft.EntityFrameworkCore -v 6.0.7\r\n```\r\n\r\nFound today trying to load a project I'm working on using .NET 6 that a package which here clearly states it is compatible with net6.0 (and we have indeed had in a few net6.0 projects for a long time) is now not compatible with net6.0: https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/6.0.7#supportedframeworks-body-tab\r\n\r\nFor the record, the latest 6.0.x version does restore, as do the 6.0.6 and 6.0.8 versions right around this one. Additionally, doing this very same, with the same version of the dotnet CLI tool actually does work on macOS. Thus far this appears to strictly be happening with package version 6.0.7 of this package on Windows.\r\n\r\nI don't have a means at present to contact the package authors but I wanted to get this visible to folks here as everything on the published package that I can see indicates net6.0 should be very much supported.\r\n\r\nFor the record both the link above and the NuGet Package Manager in Visual Studio display net6.0 as the compatible framework for this package:\r\n\r\n![image](https://github.com/NuGet/Home/assets/36053668/e71cadc5-87ee-4e6e-93be-9591be8ad470)\r\n\r\nUpgrading package is fine in my personal use case, but still this seems pretty contradictory and may indicate some deeper issue. I want to make sure I document this in case anyone else runs into this sort of problem where the package add/restore operation directly contradicts the package metadata on Windows.\n\n### Verbose Logs\n\n```shell\nerror: NU1202: Package Microsoft.EntityFrameworkCore 6.0.7 is not compatible with net6.0 (.NETCoreApp,Version=v6.0). Package Microsoft.EntityFrameworkCore 6.0.7 does not support any target frameworks.\n```\n"},{"Id":"38501675129","Type":"IssuesEvent","CreatedAt":"2024-05-18T21:26:01","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13190","RelatedDescription":"Closed issue \"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd\" (#13190) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-05-22T03:30:19.037863Z","RunDurationInMilliseconds":1052}