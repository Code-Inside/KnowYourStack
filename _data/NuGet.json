{"Data":{"Blog":{"FeedItems":[{"Title":"OpenSSF Scorecard for .NET and the NuGet ecosystem","PublishedOn":"2024-11-04T17:07:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"OpenSSF Scorecard is a tool developed by the Open Source Security Foundation (OpenSSF) that provides automated security assessments for open-source projects. The primary goal of the Scorecard project...","Href":"https://devblogs.microsoft.com/nuget/openssf-scorecard-for-net-nuget/","RawContent":null},{"Title":"NuGetAudit 2.0: Elevating Security and Trust in Package Management","PublishedOn":"2024-07-17T19:37:50+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Introduction In November 2023 (NuGet 6.8, Visual Studio 17.8, .NET SDK 8.0.100), we released NuGet Audit. NuGet Audit provides warnings during restore when a package with a known vulnerability is used...","Href":"https://devblogs.microsoft.com/nuget/nugetaudit-2-0-elevating-security-and-trust-in-package-management/","RawContent":null},{"Title":"Building a Safer Future – How NuGet is Tackling Software Supply Chain Threats","PublishedOn":"2024-07-16T18:40:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Despite significant technological progress in addressing complex security threats, the key to preventing the next attack lies in adhering to fundamental security principles. It&#8217;s essential to...","Href":"https://devblogs.microsoft.com/nuget/building-a-safer-future-how-nuget-is-tackling-software-supply-chain-threats/","RawContent":null},{"Title":"Dark Mode Now Available on NuGet.org","PublishedOn":"2024-07-11T13:08:54+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We won’t keep you “in the dark” about this any longer… Dark Mode for NuGet.org is finally here!   Your feedback has been invaluable in making this happen. We know that eye strain is a significant...","Href":"https://devblogs.microsoft.com/nuget/dark-mode-now-available-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.10","PublishedOn":"2024-05-21T18:28:09+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"NuGet 6.10 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.10 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.10, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-10/","RawContent":null},{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette. To add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable. In NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"44624196403","Type":"IssuesEvent","CreatedAt":"2024-12-09T22:52:54","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/10295","RelatedDescription":"Closed issue \"[NuGet.org Bug]: Issue while trying to upload a package with NuGetGallery\" (#10295) at NuGet/NuGetGallery","RelatedBody":"### Impact\r\n\r\nI'm unable to use NuGet.org\r\n\r\n### Describe the bug\r\n\r\nI'm starting with a clean deploy of NuGetGallery.\r\n\r\nWhen a package is submitted in the \"Upload\" page and the upload process is canceled, the upload process remains stucked.\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Repro Steps\r\n\r\n1. Clone the repository\r\n2. Create an empty SQL Express database\r\n3. In the web.config, modify the connectionStrings to point to the database created at point 2\r\n4. Launch build.ps1 from powershell\r\n5. In VS2022 launch the command \"Update-Database -ConfigurationTypeName MigrationsConfiguration\" from the Package Manager Console to apply the migrations\r\n6. Create a new website in IIS\r\n7. Publish with Web Deploy from VS2022 to IIS\r\n8. With a browser, navigate to NugetGallery and register a new user\r\n9. Upload a .nupkg and press the \"Cancel\" button on the bottom of the page\r\n10. From now on I get the \"Cannot upload file because an upload is already in progress.\" when I try to upload another .nupkg (same version, different version o different dll doesn't matter, the error will be displayed regardless)\r\n\r\n### Expected Behavior\r\n\r\nWhen I press \"Cancel\" during the upload process I should be able to upload another package after navigating back to the \"Upload\" page\r\n\r\n### Screenshots\r\n\r\n\r\nThis is the \"Upload\" page when I navigate to it after having canceled an upload process:\r\n![image](https://github.com/user-attachments/assets/ddf7c1d8-361a-4a7e-aea5-f74a151d92e6)\r\n\r\nThis is the same page after browsing for a nuget package:\r\n![image](https://github.com/user-attachments/assets/d849fbed-ca02-48dc-bf5b-8dabc540435d)\r\n\r\n### Additional Context and logs\r\n\r\n_No response_"},{"Id":"44619732800","Type":"PullRequestEvent","CreatedAt":"2024-12-09T20:07:52","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10289","RelatedDescription":"Merged pull request \"[OIDC 11] Add method to delete policy and associated API keys\" (#10289) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10288.\r\n\r\nThis PR add a new service method to delete an existing federated credential policy entity. It is the responsibility of the caller to fetch the entity from the entity context prior to calling the method.\r\n\r\nSince short-lived API keys can be associated with a federated credential policy, this PR also adds a new method to the `IFederatedCredentialRepository` interface to retrieve all short-lived API keys associated with a given policy so they can be deleted.\r\n\r\nI chose to manually cascade the deletion so that proper \"credential delete\" audit records (via the existing flow) are created, instead of depending on the DB to automatically cascade deletion. This also ensures the business logic of credential deletion we encapsulate in `IAuthenticationService.RemoveCredential` is respected.\r\n\r\nIn the short term, this method will be called by an admin panel to view and manage federated credential policies."},{"Id":"44616336309","Type":"PullRequestEvent","CreatedAt":"2024-12-09T18:14:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/10288","RelatedDescription":"Merged pull request \"[OIDC 10] Add method to create an Entra ID SP trust policy\" (#10288) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/NuGetGallery/issues/10212.\r\nDepends on https://github.com/NuGet/NuGetGallery/pull/10287.\r\n\r\nThis PR introduces a service method to create a new federated credential policy for a given Entra ID service principal. In the near term this method will be called by an admin panel as we manually onboard people to the OIDC feature.\r\n\r\nThis method is responsible for the following validations:\r\n- The user that created the policy is not an organization\r\n- The user must have access to the given package owner (e.g. a member of the organization)\r\n- The package owner user/organization is in federated credential (OIDC) flight.\r\n- The provided Entra ID tenant is in the allow list\r\n\r\nNo validations are done to ensure the Entra ID service principal actually exists. The object ID and tenant ID of the service principal are assumed to exist. It is the responsibility of the user to provide good values. This is a relatively safe assumption because a non-existent service principal will not have tokens issued for it and future operations that leverage the created policy will only happen with a valid Entra ID JWT. "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"44624110458","Type":"IssuesEvent","CreatedAt":"2024-12-09T22:49:04","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13992","RelatedDescription":"Opened issue \"New dependency resolver does not handle floating versions correctly in some situations\" (#13992) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe\n\n### Product Version\n\n6.12\n\n### Worked before?\n\nYes, 6.11\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nProjects that use floating versions with the new dependency resolver can have issues with resolved packages.  Sometimes a version conflict is incorrectly reported.\r\n\r\nProject1:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProject2:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.*\" />\r\n    <PackageReference Include=\"NLog.Extensions.Logging\" Version=\"5.*\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Project1\\Project1.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n\n\n### Verbose Logs\n\n```shell\nVersion conflict detected for Microsoft.Extensions.Logging. Install/reference Microsoft.Extensions.Logging 6.0.0 directly to project NugetTestDemo to resolve this issue.\r\n  Project2 -> NLog.Extensions.Logging 5.3.15 -> Microsoft.Extensions.Logging (>= 6.0.0)\r\n  Project2 -> Microsoft.EntityFrameworkCore 6.0.36 -> Microsoft.Extensions.Logging (>= 6.0.1)\n```\n"},{"Id":"44623510711","Type":"IssuesEvent","CreatedAt":"2024-12-09T22:24:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13981","RelatedDescription":"Closed issue \"[Bug Bash] The installed package from offline source should not be shown in “Installed” tab anymore after the source is disabled\" (#13981) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.13.0.84\n\n### Worked before?\n\nIt is not regression since it reproes on D16.11\\34601.136.\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n#### Details about problem\r\nNuGet Version: Dev\\6.13.0.84\r\nVS Version: Main\\35603.65\r\nOS: Windows-11-Enterprise-23H2\r\n\r\n#### Notes:   \r\n1.\tThe repro rate is 100%.  \r\n2.\tIt is not regression since it reproes on D16.11\\34601.136.\r\n#### Repro Steps:    \r\n1.\tCreate a “C# Console App (.NET 9.0)” project.    \r\n2.\tRight-click the project in Solution Explorer window and select \"Manage NuGet Packages…\" menu item to open the PM UI.   \r\n3.\tClick the settings button, go to “Package sources” tab and make sure two package sources (“nuget.org” and “Microsoft Visual Studio Offline Packages”) are available. \r\n4.\tGo back to the PM UI, click “Browse” tab and select the source “Microsoft Visual Studio Offline Packages” from Package source drop-down list. \r\n5.\tInstall a package (e.g. Microsoft.NETCore) with the latest version (5.0.2 in this case).\r\n6.\tClick the settings button, go to “Package sources” tab and disable the source “Microsoft Visual Studio Offline Packages” from the source list. \r\n7.\tGo back to the PM UI, click “Installed” tab and select the source “nuget.org” from Package source drop-down list. \r\n\r\n#### Expected Result:\r\nThe installed package from offline source should not be shown in “Installed” tab anymore since it was installed from the disabled source “Microsoft Visual Studio Offline Packages” instead of the current selected “nuget.org”.\r\n#### Actual Result:\r\nThe installed package from offline source still shows in “Installed” tab after the source is disabled as the screenshot below.\r\n![image](https://github.com/user-attachments/assets/0fceebc9-2d02-4827-a4fe-4032c184946f)\n\n### Verbose Logs\n\n_No response_"},{"Id":"44623397878","Type":"IssuesEvent","CreatedAt":"2024-12-09T22:19:40","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13982","RelatedDescription":"Closed issue \"Visual Studio Nuget update suggestion ignores current .net framework in project\" (#13982) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.12.3\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Create project with .net8 and add an older nuget version with .net 8 support which only supports .net9 in the latest version.\r\n2) Open Nuget manager UI\r\n3) Go to tab \"Updates\"\r\n\r\nYou will see that it will suggest you the latest version which is not supported by the current project. This update should not be suggested. Because of this an auto update is no longer supported on this project. Each update must be done manually.\r\n![nugetupdatesuggestion](https://github.com/user-attachments/assets/b672a0a5-673a-430b-9240-d0da512ff409)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44622782398","Type":"IssuesEvent","CreatedAt":"2024-12-09T21:56:28","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13964","RelatedDescription":"Closed issue \"Support file paths for <PackageVersion> in Directory.Packages.props\" (#13964) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\r\n\r\nNuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, MSBuild.exe, dotnet.exe, NuGet SDK\r\n\r\n### The Elevator Pitch\r\n\r\n**Goal:**\r\nThe following should automatically update the Visual Studio solution each time I change/remove the Path=\"\" so that I can switch between using a local project or its published nuget package version. Please note that I'm not just talking about specifying a filepath to a local .nupkg file. What this solves is development without a publish step and without a build step into a .nupkg.\r\n```\r\n<Project>\r\n\t<PropertyGroup>\r\n\t\t<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\r\n\t\t<CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>\r\n\t</PropertyGroup>\r\n\t<ItemGroup>\r\n\t  <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n\t  <PackageVersion Include=\"ClassLibrary1\" Version=\"1.0.0\" Path=\"..\\..\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```\r\n\r\n**Longer scenario description:**\r\nConsoleApp1 has a nuget reference to ClassLibrary1. Now I want to test local changes I made to ClassLibrary1. This is a very common usecase, you could argue that this is the primary usecase of having libraries. Sure I want my code to be isolated in another place but that doesn't mean that I want endless friction when actually developing this library which by definition will be used in possibly many other places. Alas in c# if I choose to use nuget packages I'm immediately entering that territory of endless friction because I'm forced to manually convert my nuget references in my entire solution to project references. Each time I want to test either the published package or test my local stashed changes I have to do this manual \"vendoring/linking\" step.\r\n\r\n**Comparison with other languages/package managers:**\r\nI think this is mostly a solved usecase by other package managers. Npm has 'link' and many other \"workspace\" tools, either built into npm/pnpm or another way from Microsoft via rushstack. Golang has the vendor system which is not exactly the same but it sort of solves this issue as well because each time you change the location of the package from an url to a filepath it should vendor itself correctly again and afaik you are coding directly against your symlinked local code.\r\n\r\n### Additional Context and Details\r\n\r\n_No response_"},{"Id":"44621724560","Type":"IssuesEvent","CreatedAt":"2024-12-09T21:19:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13615","RelatedDescription":"Reopened issue \"No-op restore caches and replays NU1900\" (#13615) at NuGet/Home","RelatedBody":"If you have a restore that failed with NU1900: Error occurred while getting package vulnerability data: Unable to load the service index for source...\r\n\r\nYou can then make a change to the NuGet Credential Provider, add the proper token, and re-run restore, it will still fail with the same error NU1900.\r\n\r\nThis is because the cache file is valid (since nothing changed on disk), so it doesn't attempt to re-restore.\r\n\r\nThis was an absolute nightmare to investigate (because when NuGet prints 401 you still think the problem is with auth, but really it doesn't even attempt to re-auth because it just plays back the no-op restore).\r\n\r\nWe also have warnings as errors, so the warning is logged as an error and fails the build."},{"Id":"44597573791","Type":"IssuesEvent","CreatedAt":"2024-12-09T09:47:27","Actor":"syrompetka","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13991","RelatedDescription":"Opened issue \"dotnet restore project with failing RestoreAdditionalProjectSources hangs with net8\" (#13991) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe\n\n### Product Version\n\ndotnet 8.0-9.0\n\n### Worked before?\n\ndotnet 6.0\n\n### Impact\n\nNone\n\n### Repro Steps & Context\n\nI have following project:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreAdditionalProjectSources>\r\n      https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json;\r\n      https://dotnet.myget.org/F/blazor-dev/api/v3/index.json;\r\n    </RestoreAdditionalProjectSources>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nNote that `RestoreAdditionalProjectSources` contains sources that are no longer available.\r\n\r\n1. when I run `dotnet restore NugetDemo.sln --packages Packages` with dotnet 8 or 9 I get a lot of `NU1301` errors and restore process never stops. The same happens when I run build from Visual Studio, but VS has timeout 10 minutes and kills restore process after that. \r\n\r\nIf I specify `--ignore-failed-sources` option nothing changes but error turns into warning.\r\n\r\n3. when I run the same command with dotnet 6 everything works fine and restore process completes successfully.\r\nNOTE: `Packages` folder must be empty.\r\n\r\nSample solution attached.\r\n\r\n\r\nMy understanding is that `RestoreAdditionalProjectSources` should add additional package sources to look for packages not found in existing sources. And if all packages are found in existing sources then no request to additional ones should be made at all.\r\n\r\nI was able to build some old unsupported projects with net6 but with net8 and higher - I can't.\r\n\r\n[NugetDemo.zip](https://github.com/user-attachments/files/18059424/NugetDemo.zip)\r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44572463625","Type":"IssuesEvent","CreatedAt":"2024-12-08T01:25:17","Actor":"teo-tsirpanis","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13990","RelatedDescription":"Opened issue \"Support pinning `NETStandard.Library` in CPM.\" (#13990) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nI discovered that if you manually reference the latest version of `NETStandard.Library` while referencing a .NET Standard 1.x only package, the dozens of NS1's transitive dependencies disappear when your project targets a framework compatible with .NET Standard 2.0. However if you have Central Package Management enabled, pinning `NETStandard.Library` with `PackageVersion` is not possible and results in [NU1009](https://learn.microsoft.com/en-gb/nuget/reference/errors-and-warnings/NU1009) errors.\r\n\r\nIt would be great if this was somehow allowed, and would enable getting rid of pinning to non-vulnerable packages brought by NS1.x, like what MSBuild has to do ([1](https://github.com/dotnet/msbuild/blob/6ca999210ce0e6541d92532874b732c4fceee8de/eng/dependabot/Packages.props#L46-L50), [2](https://github.com/dotnet/msbuild/blob/6ca999210ce0e6541d92532874b732c4fceee8de/eng/dependabot/Packages.props#L58-L59)).\n\n### Additional Context and Details\n\nThere are multiple ways of achieving this, ranging from just not failing when that library is pinned with `PackageVersion`, updating the meaning of the existing `NetStandardImplicitPackageVersion` property, up to automatically referencing a new version of the library in an opt-out fashion."},{"Id":"44562222404","Type":"IssuesEvent","CreatedAt":"2024-12-07T05:43:14","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13982","RelatedDescription":"Reopened issue \"Visual Studio Nuget update suggestion ignores current .net framework in project\" (#13982) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.12.3\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Create project with .net8 and add an older nuget version with .net 8 support which only supports .net9 in the latest version.\r\n2) Open Nuget manager UI\r\n3) Go to tab \"Updates\"\r\n\r\nYou will see that it will suggest you the latest version which is not supported by the current project. This update should not be suggested. Because of this an auto update is no longer supported on this project. Each update must be done manually.\r\n![nugetupdatesuggestion](https://github.com/user-attachments/assets/b672a0a5-673a-430b-9240-d0da512ff409)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"44562212802","Type":"IssuesEvent","CreatedAt":"2024-12-07T05:41:58","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13982","RelatedDescription":"Closed issue \"Visual Studio Nuget update suggestion ignores current .net framework in project\" (#13982) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nVisual Studio 17.12.3\n\n### Worked before?\n\nNo\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n1) Create project with .net8 and add an older nuget version with .net 8 support which only supports .net9 in the latest version.\r\n2) Open Nuget manager UI\r\n3) Go to tab \"Updates\"\r\n\r\nYou will see that it will suggest you the latest version which is not supported by the current project. This update should not be suggested. Because of this an auto update is no longer supported on this project. Each update must be done manually.\r\n![nugetupdatesuggestion](https://github.com/user-attachments/assets/b672a0a5-673a-430b-9240-d0da512ff409)\r\n\n\n### Verbose Logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"}},"RunOn":"2024-12-10T03:30:22.4079532Z","RunDurationInMilliseconds":991}