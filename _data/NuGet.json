{"Data":{"Blog":{"FeedItems":[{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null},{"Title":"Write a high-quality README for NuGet packages","PublishedOn":"2023-03-02T19:07:53+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Based on our recent customer interviews and surveys, one of the top problems that package consumers face is insufficient package documentation, such as README, changelog, examples, and API reference....","Href":"https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/","RawContent":null},{"Title":"Announcing NuGet 6.5 – The Sweetest Way to Manage Your Packages","PublishedOn":"2023-02-28T16:29:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"NuGet 6.5 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.5 for Windows, macOS, and Linux as a standalone executable.\nTired of the sour taste of managing...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-5-the-sweetest-way-to-manage-your-packages/","RawContent":null},{"Title":"Introducing Search By Target Framework on NuGet.org","PublishedOn":"2023-02-14T21:43:08+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Last year, we brought a new feature to improve the way you assess target framework compatibility of a NuGet package through a new &#8220;Frameworks&#8221; tab.\nToday, we are announcing a new feature...","Href":"https://devblogs.microsoft.com/nuget/introducing-search-by-target-framework-on-nuget-org/","RawContent":null},{"Title":"Announcing NuGet 6.4 – Signed, Central, Delivered","PublishedOn":"2022-11-08T20:59:34+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.4 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.4 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.4 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-4-signed-central-delivered/","RawContent":null},{"Title":"NuGet Season of Giving","PublishedOn":"2022-09-30T18:01:24+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet has gone through a lot of changes over the last 10 years. From the package manager console, standalone NuGet.exe, and integration of NuGet into the .NET SDK, we have always relied on the open...","Href":"https://devblogs.microsoft.com/nuget/nuget-season-of-giving/","RawContent":null},{"Title":"Announcing NuGet 6.3 – Transitive Dependencies, Floating Versions, and Re-enabling Signed Package Verification","PublishedOn":"2022-08-09T20:04:03+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"NuGet 6.3 is included in Visual Studio 2022 and .NET 6.0 out of the box. You can also download NuGet 6.3 for Windows, macOS, and Linux as a standalone executable.\nNuGet 6.3 is one of many releases in...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-3-transitive-dependencies-floating-versions-and-re-enabling-signed-package-verification/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"33206210730","Type":"IssuesEvent","CreatedAt":"2023-11-08T22:19:17","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9720","RelatedDescription":"Closed issue \"[NuGet.org Bug]: The remote name could not be resolved: 'api.nuget.org'\" (#9720) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nI'm unable to use NuGet.org\n\n### Describe the bug\n\nI am using VS 2022 Enterprise using the following nuget feed url in package manager \r\n\r\nWhen i try to open Package manager UI and select nuget.org source to browse packages get the following error\r\n\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json\r\n\r\nIt was all working fine for so many months but now it is not working at all.\r\nI have turned off all firewall settings.  just to be sure its not the problem\r\nAlso TLS 1.2 and 1.3 enabled in IE settings. \r\nThis is really frustrating. If you could please help ASAP that would be great\n\n### Repro Steps\n\nVS 2022 Enterprise edition\r\nWindows 11\r\n.NET 6 \r\n\r\nadded NuGet.config with the following settings \r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>\r\n        <packageSources>\r\n\t\t\t<clear />\r\n            <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n            <add key=\"OptimizelyFeed\" value=\"https://nuget.optimizely.com/feed/packages.svc/\" />\r\n        </packageSources>\r\n    </configuration>\r\n\r\nOpen C# webproject \r\nOpen Package manager UI from VS \r\nselect neuget source\r\nwill see this error in the output \n\n### Expected Behavior\n\nI should be able see packages available publicly i.e. NewtonSoft etc. \n\n### Screenshots\n\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/144935980/fc249563-d323-4cd9-8dfd-3f3e9edb0372)\r\n\r\n\n\n### Additional Context and logs\n\nTime Elapsed: 00:00:00.3658246\r\n========== Finished ==========\r\n\r\n\r\n[nuget.org] Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n  An error occurred while sending the request.\r\n  The remote name could not be resolved: 'api.nuget.org'\r\n"},{"Id":"33144149725","Type":"IssuesEvent","CreatedAt":"2023-11-07T04:38:07","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9728","RelatedDescription":"Opened issue \"Update IPackageVulnerabilitiesManagementService to allow batch updates.\" (#9728) at NuGet/NuGetGallery","RelatedBody":"As per the discussion at https://github.com/NuGet/NuGetGallery/pull/9712#discussion_r1372451267\r\nThis service should allow bulk updates to minimize impact on DB performance."},{"Id":"33129864494","Type":"IssuesEvent","CreatedAt":"2023-11-06T17:16:38","Actor":"mariaghiondea","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9612","RelatedDescription":"Closed issue \"NuGet.exe and NuGet Packages Support Policy\" (#9612) at NuGet/NuGetGallery","RelatedBody":"- [x] Display a link for only the latest recent nuget.exe on the nuget.org downloads\n\n- [x] Add a collapsible section to nuget.org page"},{"Id":"33110879442","Type":"PullRequestEvent","CreatedAt":"2023-11-06T06:17:02","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9727","RelatedDescription":"Opened pull request \"Reject POST to report abuse if the reason isn't one we allow reporting from the form.\" (#9727) at NuGet/NuGetGallery","RelatedBody":"Should address an odd issue with support requests where we get reasons that we shouldn't be seeing in support DB."},{"Id":"33091428697","Type":"IssuesEvent","CreatedAt":"2023-11-04T13:35:34","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9726","RelatedDescription":"Opened issue \"[Feature]: Encourage developers to share their profile and stats.\" (#9726) at NuGet/NuGetGallery","RelatedBody":"### Related Problem\n\nWhen user checking published packages on nuget.org website it is not encouraging developer to share it since there is no \"save it as photo\" or \"share it as photo\" option. User avatar and profile name should be added at somewhere of this table.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/59773207-dd40-4bc0-976c-f87b5c6dfa09)\r\n\r\nAlso, on profile data do look like a soap. It doesn't encourage to save or share data with others. Rather than a simple lines of texts and packages, metro design could be offered as option which packages could be seen on grid design.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/a93f4f63-44f9-44bc-aad5-ce373f49876e)\r\n\r\nThere is no option so see full stats by time, work-flow design could be used there. Also there should be also an option to save or share it as photo.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/0559ebc9-9bda-4a33-bca8-452d1e673a6c)\r\n\r\nContrast should be increased to enhance liability between rows.\r\n![image](https://github.com/NuGet/NuGetGallery/assets/4971757/13a2eb98-e890-409d-9f6f-e7c36b818e9e)\r\n\r\nI would love to discuss about these.\r\n\r\nThanks.\r\n\n\n### The Elevator Pitch\n\nWould you like to hear amazing minor design enhancement that will encourage users to share they are happy to use Nuget?\r\n\r\nHere, there are a few example, how current users can help us to others which they didn't hear us yet.\r\n\r\nDing-dong -> elevator reaches to floor.\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33091101331","Type":"IssuesEvent","CreatedAt":"2023-11-04T12:56:30","Actor":"meokullu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9725","RelatedDescription":"Opened issue \"[NuGet.org Design]: \" (#9725) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nHi.\r\n\r\nWhen you are use \"manage packages\" on mobile versions of nuget.org, you see wrapped words and wrong frames.\n\n### Repro Steps\n\n1. Go to \"Manage packages\" on mobile version.\n\n### Expected Behavior\n\nClear frame lines covers whole table, seeing unwrapped words.\n\n### Screenshots\n\n![F7r-HcUWEAAQ8cC](https://github.com/NuGet/NuGetGallery/assets/4971757/793f143a-614a-4a6b-8ede-03ba4e9830a3)\r\n\r\n![F7r-HcPXgAAAS6d](https://github.com/NuGet/NuGetGallery/assets/4971757/be01bcf7-ac56-4903-9418-466693a5a93f)\n\n### Additional Context and logs\n\n_No response_"},{"Id":"33087405429","Type":"IssuesEvent","CreatedAt":"2023-11-04T03:35:41","Actor":"paulnsk","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9724","RelatedDescription":"Opened issue \"[NuGet.org Bug]: Images from github readmes are not shown on nuget.org (domain not trusted). \" (#9724) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nI just added a readme.md to my little nuget package. I did so by using github's built-in markdown editor. When an image is pasted into the editor, it is automatically uploaded to a location similar to this \r\n\r\n`![image](https://github.com/paulnsk/ConsoleTools/assets/39160578/2328bb9c-1772-450c-a626-7192709b9bde)`\r\n\r\nwhich is apparently not suitable for using on nuget.org.\r\n\r\nPlease include github.com/.../assets to the trusted domain list\r\nhttps://learn.microsoft.com/en-us/nuget/nuget-org/package-readme-on-nuget-org#allowed-domains-for-images-and-badges\n\n### Repro Steps\n\nCreate a repo on github.\r\nWhen prompted, add a readme file.\r\nAn editor will open.\r\nPaste an image from clipboard and observe the URL as the editor adds the image reference to the readme.md\n\n### Expected Behavior\n\nIt would be nice to see actual images here\r\n\r\n![image](https://github.com/NuGet/NuGetGallery/assets/39160578/7464e676-4775-4a28-be2c-a98392923449)\r\n\r\n(https://www.nuget.org/packages/manage/upload)\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"33207894156","Type":"IssuesEvent","CreatedAt":"2023-11-09T00:04:57","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12997","RelatedDescription":"Opened issue \"Bad data in `nupkg.metadata` should include package id or path in error message\" (#12997) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe, NuGet.exe, Visual Studio Package Management UI, Visual Studio Package Manager Console, NuGet SDK\n\n### Product Version\n\nN/A\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\nWhen performing a restore, the Global Packages Folder (GPF) is commonly used to find packages and read their included `nupkg.metadata` file. When doing so, if that file is empty or contains invalid metadata, this will cause restore to fail.\r\n\r\nThe output from restore does not indicate which package it found with invalid metadata. \r\nA message states: `Found invalid data while decoding.`\r\nEnabling `SHOW_STACK_TRACE` shows the origination is from reading `nupkg.metadata`, but not which file caused it.\r\nDetailed/Diagnostic verbosity does not help either.\r\n\r\n![image](https://github.com/NuGet/Home/assets/49205731/14c5c2e9-cd16-4b60-9c43-46b70a872aa6)\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"33207788472","Type":"IssuesEvent","CreatedAt":"2023-11-08T23:57:39","Actor":"jebriede","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12995","RelatedDescription":"Closed issue \"Error when trying to use NuGet.Protocol form Blazor WebAssembly app\" (#12995) at NuGet/Home","RelatedBody":"### NuGet Product Used\r\n\r\nNuGet SDK\r\n\r\n### Product Version\r\n\r\n.NET 8 RC2 SDK, NuGet packages 6.7\r\n\r\n### Worked before?\r\n\r\n_No response_\r\n\r\n### Impact\r\n\r\nI'm unable to use this version\r\n\r\n### Repro Steps & Context\r\n\r\n- Create a Standalone Blazor WebAssembly application\r\n- Add the NuGet.Protocol package (6.7.0)\r\n- In the `Home.razor` file add the following code:\r\n```\r\n<button @onclick=\"DoNuGetAsync\">Search</button>\r\n\r\n@code {\r\n    private async Task DoNuGetAsync()\r\n    {\r\n// more code comes here\r\n    }\r\n}\r\n```\r\n- At the 'more code comes here' position paste the code from https://github.com/NuGet/Samples/blob/ec30a2b7c54c2d09e5a476444a2c7a8f2f289d49/NuGetProtocolSamples/Program.cs#L20-L335\r\n\r\nRunning the sample generates the following error:\r\nfail: Microsoft.AspNetCore.Components.Web.ErrorBoundary[0]\r\n      NuGet.Configuration.NuGetConfigurationException: Unexpected failure reading NuGet.Config. Path: '/home/web_user/.nuget/NuGet/NuGet.Config'.\r\n       ---> System.DllNotFoundException: libc\r\n         at NuGet.Configuration.FileSystemUtility.AddFile(String fullPath, Action`1 writeToStream)\r\n         at NuGet.Configuration.FileSystemUtility.GetOrCreateDocument(XDocument content, String fullPath)\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass23_0.<.ctor>b__0()\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass32_0.<ExecuteSynchronized>b__0()\r\n         --- End of inner exception stack trace ---\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass32_0.<ExecuteSynchronized>b__0()\r\n         at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLocked(String filePath, Action action)\r\n         at NuGet.Configuration.SettingsFile.ExecuteSynchronized(Action ioOperation)\r\n         at NuGet.Configuration.SettingsFile..ctor(String directoryPath, String fileName, Boolean isMachineWide, Boolean isReadOnly)\r\n         at NuGet.Configuration.Settings.ReadSettings(String settingsRoot, String settingsPath, Boolean isMachineWideSettings, Boolean isAdditionalUserWideConfig, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadUserSpecificSettings(String root, String configFileName, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)+MoveNext()\r\n         at System.Collections.Generic.List`1[[NuGet.Configuration.SettingsFile, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].AddRange(IEnumerable`1 collection)\r\n         at NuGet.Configuration.Settings.LoadSettingsForSpecificConfigs(String root, String configFileName, List`1 validSettingFiles, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings)\r\n         at NuGet.Configuration.ProxyCache.FromDefaultSettings()\r\n         at NuGet.Configuration.ProxyCache.<>c.<.cctor>b__18_0()\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n         at NuGet.Configuration.ProxyCache.get_Instance()\r\n         at NuGet.Protocol.HttpHandlerResourceV3Provider..ctor()\r\n         at NuGet.Protocol.Core.Types.Repository.ProviderFactory.<>c.<GetCoreV3>b__0_12()\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n         at NuGet.Protocol.Core.Types.SourceRepository.<>c.<Init>b__17_0(Lazy`1 p)\r\n         at System.Linq.Lookup`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(IEnumerable`1 source, Func`2 keySelector, IEqualityComparer`1 comparer…xt()\r\n   at System.Collections.Generic.List`1[[NuGet.Configuration.SettingsFile, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].AddRange(IEnumerable`1 collection)\r\n   at NuGet.Configuration.Settings.LoadSettingsForSpecificConfigs(String root, String configFileName, List`1 validSettingFiles, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings)\r\n   at NuGet.Configuration.ProxyCache.FromDefaultSettings()\r\n   at NuGet.Configuration.ProxyCache.<>c.<.cctor>b__18_0()\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n   at NuGet.Configuration.ProxyCache.get_Instance()\r\n   at NuGet.Protocol.HttpHandlerResourceV3Provider..ctor()\r\n   at NuGet.Protocol.Core.Types.Repository.ProviderFactory.<>c.<GetCoreV3>b__0_12()\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<>c.<Init>b__17_0(Lazy`1 p)\r\n   at System.Linq.Lookup`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(IEnumerable`1 source, Func`2 keySelector, IEqualityComparer`1 comparer)\r\n   at System.Linq.GroupedEnumerable`2[[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetEnumerator()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.Init(IEnumerable`1 providers)\r\n   at NuGet.Protocol.Core.Types.SourceRepository..ctor(PackageSource source, IEnumerable`1 providers, FeedType feedTypeOverride)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, PackageSource source, FeedType type)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, PackageSource source)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, String sourceUrl)\r\n   at NuGet.Protocol.FactoryExtensionsV3.GetCoreV3(RepositoryFactory factory, String source)\r\n   at BlazorApp1.Pages.Home.ListPackageVersionsAsync() in D:\\Source\\Temp\\BlazorApp1\\BlazorApp1\\Pages\\Home.razor:line 65\r\n   at BlazorApp1.Pages.Home.DoNuGetAsync() in D:\\Source\\Temp\\BlazorApp1\\BlazorApp1\\Pages\\Home.razor:line 25\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)…\r\n\r\n### Verbose Logs\r\n\r\n_No response_"},{"Id":"33206857457","Type":"IssuesEvent","CreatedAt":"2023-11-08T22:55:14","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12996","RelatedDescription":"Opened issue \"Opt-out of \"HTTPs everywhere\" :  Add a `disableTLSCertificateVerification` property\" (#12996) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nWe need to add an `disableTLSCertificateVerification` property into `packageSources` section in NuGet.Config files, as below:\r\n```\r\n<!-- Disables certification validation on a specific https source -->\r\n<packageSources>\r\n    <add key=\"Contoso\" value=\"http://contoso.com/packages/\" disableTLSCertificateValidation=\"true\" />\r\n</packageSources>\r\n```\r\nSpec: https://github.com/NuGet/Home/blob/dev/proposed/2023/InsecureConnectionsDisableCertificateValidation.md#package-source-nuget-config\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"33184738724","Type":"IssuesEvent","CreatedAt":"2023-11-08T09:27:45","Actor":"vnbaaij","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12995","RelatedDescription":"Opened issue \"Error when trying to use NuGet.Protocol form Blazor WebAssembly app\" (#12995) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nNuGet SDK\n\n### Product Version\n\n.NET 8 RC2 SDK, NuGet packages 6.7\n\n### Worked before?\n\n_No response_\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\n- Create a Standalone Blazor WebAssembly application\r\n- Add the NuGet.Protocol package (6.7.0)\r\n- In the `Home.razor` file add the following code:\r\n```\r\n<button @onclick=\"DoNuGetAsync\">Search</button>\r\n\r\n@code {\r\n    private async Task DoNuGetAsync()\r\n    {\r\n// more code comes here\r\n    }\r\n}\r\n```\r\n- At the 'more code comes here' position paste the code fromhttps://github.com/NuGet/Samples/blob/ec30a2b7c54c2d09e5a476444a2c7a8f2f289d49/NuGetProtocolSamples/Program.cs#L20-L335\r\n\r\nRunning the sample generates the following error:\r\nfail: Microsoft.AspNetCore.Components.Web.ErrorBoundary[0]\r\n      NuGet.Configuration.NuGetConfigurationException: Unexpected failure reading NuGet.Config. Path: '/home/web_user/.nuget/NuGet/NuGet.Config'.\r\n       ---> System.DllNotFoundException: libc\r\n         at NuGet.Configuration.FileSystemUtility.AddFile(String fullPath, Action`1 writeToStream)\r\n         at NuGet.Configuration.FileSystemUtility.GetOrCreateDocument(XDocument content, String fullPath)\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass23_0.<.ctor>b__0()\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass32_0.<ExecuteSynchronized>b__0()\r\n         --- End of inner exception stack trace ---\r\n         at NuGet.Configuration.SettingsFile.<>c__DisplayClass32_0.<ExecuteSynchronized>b__0()\r\n         at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLocked(String filePath, Action action)\r\n         at NuGet.Configuration.SettingsFile.ExecuteSynchronized(Action ioOperation)\r\n         at NuGet.Configuration.SettingsFile..ctor(String directoryPath, String fileName, Boolean isMachineWide, Boolean isReadOnly)\r\n         at NuGet.Configuration.Settings.ReadSettings(String settingsRoot, String settingsPath, Boolean isMachineWideSettings, Boolean isAdditionalUserWideConfig, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadUserSpecificSettings(String root, String configFileName, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)+MoveNext()\r\n         at System.Collections.Generic.List`1[[NuGet.Configuration.SettingsFile, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].AddRange(IEnumerable`1 collection)\r\n         at NuGet.Configuration.Settings.LoadSettingsForSpecificConfigs(String root, String configFileName, List`1 validSettingFiles, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, SettingsLoadingContext settingsLoadingContext)\r\n         at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings)\r\n         at NuGet.Configuration.ProxyCache.FromDefaultSettings()\r\n         at NuGet.Configuration.ProxyCache.<>c.<.cctor>b__18_0()\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n         at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n         at NuGet.Configuration.ProxyCache.get_Instance()\r\n         at NuGet.Protocol.HttpHandlerResourceV3Provider..ctor()\r\n         at NuGet.Protocol.Core.Types.Repository.ProviderFactory.<>c.<GetCoreV3>b__0_12()\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n         at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n         at NuGet.Protocol.Core.Types.SourceRepository.<>c.<Init>b__17_0(Lazy`1 p)\r\n         at System.Linq.Lookup`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(IEnumerable`1 source, Func`2 keySelector, IEqualityComparer`1 comparer…xt()\r\n   at System.Collections.Generic.List`1[[NuGet.Configuration.SettingsFile, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].AddRange(IEnumerable`1 collection)\r\n   at NuGet.Configuration.Settings.LoadSettingsForSpecificConfigs(String root, String configFileName, List`1 validSettingFiles, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, Boolean loadUserWideSettings, Boolean useTestingGlobalPath, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings, SettingsLoadingContext settingsLoadingContext)\r\n   at NuGet.Configuration.Settings.LoadDefaultSettings(String root, String configFileName, IMachineWideSettings machineWideSettings)\r\n   at NuGet.Configuration.ProxyCache.FromDefaultSettings()\r\n   at NuGet.Configuration.ProxyCache.<>c.<.cctor>b__18_0()\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n   at System.Lazy`1[[NuGet.Configuration.ProxyCache, NuGet.Configuration, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n   at NuGet.Configuration.ProxyCache.get_Instance()\r\n   at NuGet.Protocol.HttpHandlerResourceV3Provider..ctor()\r\n   at NuGet.Protocol.Core.Types.Repository.ProviderFactory.<>c.<GetCoreV3>b__0_12()\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].CreateValue()\r\n   at System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].get_Value()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.<>c.<Init>b__17_0(Lazy`1 p)\r\n   at System.Linq.Lookup`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(IEnumerable`1 source, Func`2 keySelector, IEqualityComparer`1 comparer)\r\n   at System.Linq.GroupedEnumerable`2[[System.Lazy`1[[NuGet.Protocol.Core.Types.INuGetResourceProvider, NuGet.Protocol, Version=6.7.0.127, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetEnumerator()\r\n   at NuGet.Protocol.Core.Types.SourceRepository.Init(IEnumerable`1 providers)\r\n   at NuGet.Protocol.Core.Types.SourceRepository..ctor(PackageSource source, IEnumerable`1 providers, FeedType feedTypeOverride)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, PackageSource source, FeedType type)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, PackageSource source)\r\n   at NuGet.Protocol.Core.Types.Repository.CreateSource(IEnumerable`1 resourceProviders, String sourceUrl)\r\n   at NuGet.Protocol.FactoryExtensionsV3.GetCoreV3(RepositoryFactory factory, String source)\r\n   at BlazorApp1.Pages.Home.ListPackageVersionsAsync() in D:\\Source\\Temp\\BlazorApp1\\BlazorApp1\\Pages\\Home.razor:line 65\r\n   at BlazorApp1.Pages.Home.DoNuGetAsync() in D:\\Source\\Temp\\BlazorApp1\\BlazorApp1\\Pages\\Home.razor:line 25\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n   at Microsoft.AspNetCore.Components.RenderTree.Renderer.GetErrorHandledTask(Task taskToHandle, ComponentState owningComponentState)…\n\n### Verbose Logs\n\n_No response_"},{"Id":"33176665864","Type":"IssuesEvent","CreatedAt":"2023-11-08T02:09:56","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12994","RelatedDescription":"Opened issue \"Embed the right versions of Restore-related files into binlog at the right time\" (#12994) at NuGet/Home","RelatedBody":"Currently we have a problem that if Restore is running after .g.props and g.targets files are already on disk, the old versions of these files will be embedded in the binlog instead of the ones produced by the Restore task.\r\n\r\nHowever if the Restore task doesn't run, we still want to embed whatever version of g.props and g.targets was on disk at the time they were imported.\r\n\r\nSame for project.assets.json, it's hard to embed the right version of it at the right time. Currently it's being done by this logic:\r\nhttps://github.com/dotnet/sdk/pull/16840/files\r\n\r\nThe way embedding into binlog is done is every time an item is added (either via ItemGroup, or as an output item of a task, or as target output), if the file path exists on disk, the current contents of the file is embedded immediately and eagerly. Subsequent requests to embed the same file path are ignored (the first request wins, and the version is stored as of the time of the first request). However if the requested file doesn't exist on disk, nothing happens, so the next request to embed the file will succeed if the file is first found on disk.\r\n\r\n@jeffkl "},{"Id":"33176371036","Type":"IssuesEvent","CreatedAt":"2023-11-08T01:51:08","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/12993","RelatedDescription":"Closed issue \"Static Graph RestoreEx: NuGet.Build.Tasks.Console.exe crash with wildcards and UNC paths\" (#12993) at NuGet/Home","RelatedBody":"I have a situation where normal restore works fine, but switching to static graph restore crashes MSBuild with:\r\n\r\n`The UNC path should be of the form \\\\server\\share.`\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error : The UNC path should be of the form \\\\server\\share. [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.LongPathHelper.Normalize(String path, UInt32 maxPathLength, Boolean checkInvalidCharacters, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.GetFullPathInternal(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\n```\r\n\r\nThe specific process that crashes is `NuGet.Build.Tasks.Console.exe` with the following stack:\r\n\r\n```\r\n\tmscorlib\tLongPathHelper.Normalize Line 167\r\n\tmscorlib\tPath.NewNormalizePath Line 503\r\n\tmscorlib\tPath.NormalizePath Line 427\r\n\tmscorlib\tPath.NormalizePath Line 391\r\n\tmscorlib\tPath.NormalizePath Line 376\r\n\tmscorlib\tPath.GetFullPathInternal Line 366\r\n\tmscorlib\tPath.GetFullPath Line 330\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 500\r\n\tMicrosoft.Build\tFileUtilities.NormalizePath Line 465\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 762\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 447\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ComputeItems Line 418\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.GetItemData Line 306\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.GetAllItemsDeferred Line 506\r\n\tSystem.Core\tEnumerable.SelectManyIterator\r\n\tSystem.Core\tBuffer`1..ctor\r\n\tSystem.Core\tOrderedEnumerable`1.GetEnumerator\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 686\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 341\r\n\tMicrosoft.Build\tProjectInstance.Initialize Line 2804\r\n\tMicrosoft.Build\tProjectInstance..ctor Line 285\r\n\tMicrosoft.Build\tProjectInstance.FromFile Line 757\r\n\tNuGet.Build.Tasks.Console\tMSBuildStaticGraphRestore.LoadProjects\r\n\tMicrosoft.Build\tGraphBuilder.ParseProject Line 536\r\n\tMicrosoft.Build\tGraphBuilder.SubmitProjectForParsing Line 576\r\n\tmscorlib\tLazy`1.CreateValue Line 437\r\n\tmscorlib\tLazy`1.LazyInitValue Line 388\r\n\tmscorlib\tLazy`1.get_Value Line 339\r\n\tMicrosoft.Build\tParallelWorkSet`2.ExecuteWorkItem Line 194\r\n\tMicrosoft.Build\tParallelWorkSet`2.<CreateProcessorItemTask>b__17_0 Line 169\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\r\n\tmscorlib\tExecutionContext.RunInternal Line 981\r\n\tmscorlib\tExecutionContext.Run Line 928\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.Run Line 1071\r\n\tmscorlib\tAwaitTaskContinuation.RunOrScheduleAction Line 811\r\n\tmscorlib\tTask.FinishContinuations Line 3617\r\n\tmscorlib\tTask.FinishStageThree Line 2363\r\n\tmscorlib\tTask`1.TrySetResult Line 490\r\n\tmscorlib\tSemaphoreSlim.TaskNode.ExecuteWorkItem Line 95\r\n\tmscorlib\tThreadPoolWorkQueue.Dispatch Line 820\r\n\tmscorlib\t_ThreadPoolWaitCallback.PerformWaitCallback Line 1161\r\n```\r\n\r\nThe actual problem is this call to `Path.GetFullPath`:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L447\r\n\r\nIt is being passed the value of `\\\\csc.*`, which results in GetFullPath throwing an ArgumentException: `The UNC path should be of the form \\\\server\\share.`\r\n\r\nUnfortunately I've failed to isolate a standalone repro for this exact scenario. I do have an internal repo at commit `bd36c7032f0950eeca634d7aa34fcdf441e89ed9` that's easy to reproduce this on. Just contact me on Teams and we can take a look together.\r\n\r\nHowever I did build a repro that hits a very similar case, with slightly different behavior. It no longer crashes, but fails the build with this error:\r\n\r\n```\r\n\"C:\\temp\\staticGraphFail\\staticGraphFail.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::\r\nValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path\r\n should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets [C:\\temp\\staticGraphFail\\staticGraphF\r\nail.sln]\r\n```\r\n\r\nTo repro, create this fail.csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\"/>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(PkgNewtonsoft_Json)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand build with `msbuild /t:Restore fail.csproj`.\r\n\r\nIn this repro, the crash happens here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L429\r\n\r\nThere's a good try/catch around this callstack, so it doesn't bring down the process, because this catch block catches it:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/Modifiers.cs#L602\r\n\r\nThere's another catch block here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/Expander.cs#L982\r\n\r\nHowever in my actual case, there isn't such a good catch block around this codepath:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L418\r\n\r\nI wasn't able to recreate a standalone repro which takes that path (line 418) instead of the regular path (line 429). Ping me on Teams for a real-life repro of the actual issue.\r\n\r\nI suspect the problem is that wildcards are not expected to be in the item spec `\\\\csc.*` but they are, and the item spec starts with `\\\\` because the $(Pkg*) property evaluates to an empty string at the time of restore eval, and then `Path.GetFullPath()` crashes on it, but there's no good catch block to catch it around line 418, so it is more fatal.\r\n\r\n\r\n"},{"Id":"33175833548","Type":"IssuesEvent","CreatedAt":"2023-11-08T01:13:38","Actor":"KirillOsenkov","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/12993","RelatedDescription":"Opened issue \"Static Graph RestoreEx: NuGet.Build.Tasks.Console.exe crash with wildcards and UNC paths\" (#12993) at NuGet/Home","RelatedBody":"I have a situation where normal restore works fine, but switching to static graph restore crashes MSBuild with:\r\n\r\n`The UNC path should be of the form \\\\server\\share.`\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error : The UNC path should be of the form \\\\server\\share. [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.LongPathHelper.Normalize(String path, UInt32 maxPathLength, Boolean checkInvalidCharacters, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.GetFullPathInternal(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\n```\r\n\r\nThe specific process that crashes is `NuGet.Build.Tasks.Console.exe` with the following stack:\r\n\r\n```\r\n\tmscorlib\tLongPathHelper.Normalize Line 167\r\n\tmscorlib\tPath.NewNormalizePath Line 503\r\n\tmscorlib\tPath.NormalizePath Line 427\r\n\tmscorlib\tPath.NormalizePath Line 391\r\n\tmscorlib\tPath.NormalizePath Line 376\r\n\tmscorlib\tPath.GetFullPathInternal Line 366\r\n\tmscorlib\tPath.GetFullPath Line 330\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 500\r\n\tMicrosoft.Build\tFileUtilities.NormalizePath Line 465\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 762\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 447\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ComputeItems Line 418\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.GetItemData Line 306\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.GetAllItemsDeferred Line 506\r\n\tSystem.Core\tEnumerable.SelectManyIterator\r\n\tSystem.Core\tBuffer`1..ctor\r\n\tSystem.Core\tOrderedEnumerable`1.GetEnumerator\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 686\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 341\r\n\tMicrosoft.Build\tProjectInstance.Initialize Line 2804\r\n\tMicrosoft.Build\tProjectInstance..ctor Line 285\r\n\tMicrosoft.Build\tProjectInstance.FromFile Line 757\r\n\tNuGet.Build.Tasks.Console\tMSBuildStaticGraphRestore.LoadProjects\r\n\tMicrosoft.Build\tGraphBuilder.ParseProject Line 536\r\n\tMicrosoft.Build\tGraphBuilder.SubmitProjectForParsing Line 576\r\n\tmscorlib\tLazy`1.CreateValue Line 437\r\n\tmscorlib\tLazy`1.LazyInitValue Line 388\r\n\tmscorlib\tLazy`1.get_Value Line 339\r\n\tMicrosoft.Build\tParallelWorkSet`2.ExecuteWorkItem Line 194\r\n\tMicrosoft.Build\tParallelWorkSet`2.<CreateProcessorItemTask>b__17_0 Line 169\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\r\n\tmscorlib\tExecutionContext.RunInternal Line 981\r\n\tmscorlib\tExecutionContext.Run Line 928\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.Run Line 1071\r\n\tmscorlib\tAwaitTaskContinuation.RunOrScheduleAction Line 811\r\n\tmscorlib\tTask.FinishContinuations Line 3617\r\n\tmscorlib\tTask.FinishStageThree Line 2363\r\n\tmscorlib\tTask`1.TrySetResult Line 490\r\n\tmscorlib\tSemaphoreSlim.TaskNode.ExecuteWorkItem Line 95\r\n\tmscorlib\tThreadPoolWorkQueue.Dispatch Line 820\r\n\tmscorlib\t_ThreadPoolWaitCallback.PerformWaitCallback Line 1161\r\n```\r\n\r\nThe actual problem is this call to `Path.GetFullPath`:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L447\r\n\r\nIt is being passed the value of `\\\\csc.*`, which results in GetFullPath throwing an ArgumentException: `The UNC path should be of the form \\\\server\\share.`\r\n\r\nUnfortunately I've failed to isolate a standalone repro for this exact scenario. I do have an internal repo at commit `bd36c7032f0950eeca634d7aa34fcdf441e89ed9` that's easy to reproduce this on. Just contact me on Teams and we can take a look together.\r\n\r\nHowever I did build a repro that hits a very similar case, with slightly different behavior. It no longer crashes, but fails the build with this error:\r\n\r\n```\r\n\"C:\\temp\\staticGraphFail\\staticGraphFail.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::\r\nValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path\r\n should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets [C:\\temp\\staticGraphFail\\staticGraphF\r\nail.sln]\r\n```\r\n\r\nTo repro, create this fail.csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\"/>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(PkgNewtonsoft_Json)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand build with `msbuild /t:Restore fail.csproj`.\r\n\r\nIn this repro, the crash happens here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L429\r\n\r\nThere's a good try/catch around this callstack, so it doesn't bring down the process, because this catch block catches it:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/Modifiers.cs#L602\r\n\r\nHowever in my actual case, there isn't such a good catch block around this codepath:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L418\r\n\r\nI wasn't able to recreate a standalone repro which takes that path (line 418) instead of the regular path (line 429). Ping me on Teams for a real-life repro of the actual issue.\r\n\r\nI suspect the problem is that wildcards are not expected to be in the item spec `\\\\csc.*` but they are, and the item spec starts with `\\\\` because the $(Pkg*) property evaluates to an empty string at the time of restore eval, and then `Path.GetFullPath()` crashes on it, but there's no good catch block to catch it around line 418, so it is more fatal.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"32913595856","Type":"IssuesEvent","CreatedAt":"2023-10-28T01:30:54","Actor":"zhhyu","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/63","RelatedDescription":"Closed issue \"[Connection] Deprecating legacy cipher suites at www.nuget.org\" (#63) at NuGet/Announcements","RelatedBody":"In order to provide a more secure and compliant environment for our customers, we are planning to deprecate legacy cipher suites and only support the following cipher suites at [www.nuget.org](http://www.nuget.org/):\r\n\r\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\r\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\r\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\r\nTLS_RSA_WITH_AES_256_GCM_SHA384\r\n\r\nBetween 08/31/2022 07:00 PM UTC and 09/02/2022 07:00 PM UTC, we will take a test for this deprecation to understand the broken change for our customers. Based on our telemetry, we expect the impact to be minimal, but if you meet any connection issues at [www.nuget.org](http://www.nuget.org/) or have any questions, do reach out to us at [support@nuget.org](mailto:support@nuget.org) or by commenting on the discussion issue: https://github.com/NuGet/NuGetGallery/issues/9216. We will be closely monitoring our communication channels to assess any unexpected impact."},{"Id":"31807568458","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:47:35","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/53","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as March 15th, 2021\" (#53) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as March 15th, 2021. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by March 15th, 2021 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-march-15th-2021/"},{"Id":"31806936414","Type":"IssuesEvent","CreatedAt":"2023-09-13T14:27:49","Actor":"dtivel","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/70","RelatedDescription":"Closed issue \"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023\" (#70) at NuGet/Announcements","RelatedBody":"The current Microsoft author-signing certificate will be updated as soon as August 14th, 2023.  If you validate that packages are author signed by Microsoft using a [NuGet client policy](https://docs.microsoft.com/en-us/nuget/consume-packages/installing-signed-packages) or the [`verify`](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-verify) command, you will need to take steps to avoid disruptions when installing Microsoft packages signed with the new certificate.\r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blog post on the matter: https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/"}],"ResultType":"GitHubEvent"}},"RunOn":"2023-11-09T03:30:20.4106769Z","RunDurationInMilliseconds":1106}