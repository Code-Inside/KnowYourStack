{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12618995273","Type":"IssuesEvent","CreatedAt":"2020-06-12T22:46:08","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8044","RelatedDescription":"Opened issue \"[2020-06-12] Deployment\" (#8044) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12618943909","Type":"IssuesEvent","CreatedAt":"2020-06-12T22:35:14","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8002","RelatedDescription":"Closed issue \"Add banner to announce TLS 1.2 enforcement\" (#8002) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"12618941826","Type":"PullRequestEvent","CreatedAt":"2020-06-12T22:34:50","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8043","RelatedDescription":"Opened pull request \"Added configurable cache \" (#8043) at NuGet/NuGetGallery","RelatedBody":"Added files to be able to manually configure the cache time for the dependent packages in the package details page. Time can be configured using a json file.\r\n\r\nProgress on: https://github.com/NuGet/NuGetGallery/issues/8038"},{"Id":"12618878878","Type":"PullRequestEvent","CreatedAt":"2020-06-12T22:22:22","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8034","RelatedDescription":"Merged pull request \"API key generation without defaulting to the current owner selection\" (#8034) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323"},{"Id":"12618318336","Type":"PullRequestEvent","CreatedAt":"2020-06-12T20:51:27","Actor":"dcc7497","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8031","RelatedDescription":"Merged pull request \"Added verified checkmark to packages\" (#8031) at NuGet/NuGetGallery","RelatedBody":"\r\n* On the NuGet packages area of the Used By section, those packages that are verified will have the verified icon (white checkmark enclosed in a blue circle) next to their package name\r\n \r\n![image](https://user-images.githubusercontent.com/63263324/84212512-9be8a280-aaad-11ea-916b-1496eb77007a.png)\r\n\r\nProgress on https://github.com/NuGet/Engineering/issues/3221"},{"Id":"12608749125","Type":"IssuesEvent","CreatedAt":"2020-06-11T23:20:49","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7906","RelatedDescription":"Closed issue \"[Package Renames] A/B test popularity transfers\" (#7906) at NuGet/NuGetGallery","RelatedBody":"* [x] Delete existing `012` search resources?? Check with Joel\r\n* [x] Create new `012` resources. Enable popularity transfers for this deployment (see https://github.com/NuGet/NuGetGallery/issues/7977)\r\n* [x] Add popularity transfers to PROD\r\n* [x] Verify search results\r\n* [x] Create service index for Visual Studio testing\r\n* [x] Split traffic at 50% (started 5/2/6/2020 @ 2:15pm PST)  \r\n* [x] Send instructions to internal partner team on how to test the A/B test instance.\r\n* [x] Wait a week, then evaluate search relevancy changes \r\n* ⚠ Set traffic to 0% (6/8/2020 @ 3:32pm PST)\r\n\r\n```\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-08T21:20:00Z');\r\n```\r\n\r\nQuery to compare clicks on Azure.Storage.Blobs:\r\n\r\n```\r\n// Clicks on first page %\r\nlet minTimestamp = todatetime('2020-05-26T21:20:00Z');\r\nlet maxTimestamp = todatetime('2020-06-02T21:20:00Z');\r\ncustomMetrics\r\n| where timestamp > minTimestamp \r\n| where timestamp < maxTimestamp\r\n| where name == \"BrowserSearchSelection\"\r\n| extend isPreviewSearch = customDimensions.IsPreviewSearch == \"True\"\r\n| extend PackageId = tostring(customDimensions.PackageId)\r\n| where\r\n  PackageId == \"WindowsAzure.Storage\" or\r\n  PackageId startswith \"Microsoft.Azure.Storage\" or\r\n  PackageId startswith \"Azure.Storage.\"\r\n| where PackageId !in (\"Microsoft.Azure.Storage.DataMovement\", \"Microsoft.Azure.Storage.CPP.v140\")\r\n//| where PackageId startswith \"Microsoft.Azure.KeyVault\" or PackageId startswith \"Azure.Security.KeyVault\"\r\n| summarize count() by isPreviewSearch, PackageId\r\n| where isPreviewSearch == true\r\n| render piechart \r\n```"},{"Id":"12608599471","Type":"IssuesEvent","CreatedAt":"2020-06-11T22:54:16","Actor":"lostmsu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8042","RelatedDescription":"Opened issue \"Increase package size limit/and or support LZMA2\" (#8042) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nI am trying to package TensorFlow binaries, but the uncompressed size of a single 2.x GPU binary is 1.3GB. ZIP+Deflate-compressed is ~400MB. XZ+LZMA2-compressed is ~100MB, but NuGet does not support LZMA2 compression, meaning unpacking needs installation scripts, which are no longer supported.\r\n\r\n### Describe the solution you'd like\r\nOverall, I think supporting LZMA2 or even just ZIP+LZMA would be the best scenario, but the client team already closed that issue for whatever reason https://github.com/NuGet/Home/issues/890 . So as an alternative for my scenario it would be sufficient to up the limit to 500MB, or better 750MB to be future-proof.\r\n\r\n### Additional context\r\nN/A"},{"Id":"12608584624","Type":"PullRequestEvent","CreatedAt":"2020-06-11T22:51:38","Actor":"lyndaidaii","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8040","RelatedDescription":"Closed pull request \"API key generation without defaulting to the current owner selection #8034\" (#8040) at NuGet/NuGetGallery","RelatedBody":"Originally it generates default current owner selection if owner is member of multiple organizations when we create API key. \r\nAfter change, we will not generate default package owner in this case. Instead, We will notify user to select a package owner.\r\n\r\nBefore UI:\r\n![before](https://user-images.githubusercontent.com/64443925/84242463-b7f04200-aab5-11ea-9f67-fcadb8d20304.PNG)\r\n\r\n\r\nAfter UI: \r\n![ui_droplist2](https://user-images.githubusercontent.com/64443925/84242305-84adb300-aab5-11ea-9b3a-bb1b143dacd2.PNG)\r\n\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/12323\r\n\r\n\r\n\r\n"},{"Id":"12605813499","Type":"PullRequestEvent","CreatedAt":"2020-06-11T17:08:17","Actor":"donald-j","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8041","RelatedDescription":"Opened pull request \"Make the header colorblind-friendly.\" (#8041) at NuGet/NuGetGallery","RelatedBody":"The issue was introduced in #8023 and affected the UX for colorblind users."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12620090708","Type":"IssuesEvent","CreatedAt":"2020-06-13T04:31:09","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9665","RelatedDescription":"Closed issue \"NuGet.Build.Tasks.Console binding redirects are broken\" (#9665) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): 16.7.0-preview-20308-01+584ca5f11\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Install latest internal preview of Visual Studio\r\n2. Restore packages with `RestoreEnableStaticGraphEvaluation` set to `true`\r\n\r\n`NuGet.Build.Tasks.Console.exe` crashes because [the binding redirects](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/App.config) were updated in MSBuild but not in NuGet.\r\n\r\n## Workaround\r\nUpdate your local `NuGet.Build.Tasks.Console.exe.config` to this:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <runtime>\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcserver-element -->\r\n    <gcServer enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gccpugroup-element -->\r\n    <GCCpuGroup enabled=\"true\" />\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/thread-useallcpugroups-element -->\r\n    <Thread_UseAllCpuGroups enabled=\"true\" />\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <!-- Use codeBase entries for MSBuild assemblies so that the NGen'd native images will be used -->\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Tasks.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Tasks.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Utilities.Core\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        <codeBase version=\"15.1.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Buffers\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\r\n        <codeBase version=\"4.0.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Buffers.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Collections.Immutable\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-1.2.3.0\" newVersion=\"1.2.3.0\" />\r\n        <codeBase version=\"1.2.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Collections.Immutable.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Memory\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.1.1\" newVersion=\"4.0.1.1\" />\r\n        <codeBase version=\"4.0.1.1\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Memory.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Numerics.Vectors\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.1.4.0\" newVersion=\"4.1.4.0\" />\r\n        <codeBase version=\"4.1.4.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Numerics.Vectors.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Resources.Extensions\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.0.0\" newVersion=\"4.0.0.0\" />\r\n        <codeBase version=\"4.0.0.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Resources.Extensions.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.0.6.0\" newVersion=\"4.0.6.0\" />\r\n        <codeBase version=\"4.0.6.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Runtime.CompilerServices.Unsafe.dll\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Threading.Tasks.Dataflow\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-4.6.3.0\" newVersion=\"4.6.3.0\" />\r\n        <codeBase version=\"4.6.3.0\" href=\"..\\..\\..\\..\\..\\MSBuild\\Current\\Bin\\System.Threading.Tasks.Dataflow.dll\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime>\r\n  <startup>\r\n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.7.2\" />\r\n  </startup>\r\n</configuration>\r\n```\r\n\r\n\r\n"},{"Id":"12618185352","Type":"IssuesEvent","CreatedAt":"2020-06-12T20:32:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8283","RelatedDescription":"Closed issue \"Smart refreshing of the update/installed/consolidate tabs in the PM UI\" (#8283) at NuGet/Home","RelatedBody":"Motivation and follow up to https://github.com/NuGet/Home/issues/6570. \r\nhttps://github.com/NuGet/NuGet.Client/pull/2908\r\n\r\nWhen either of the 3 tabs is opened in the background, the next time we focus on the UI the whole thing is refreshed. \r\n\r\nThe reason for this is these tabs reflect project/solution state. \r\nFrequently these refreshes are not needed. \r\nCurrently the UI does not get any notifications about project state changes (mostly because there's no infra doing that right now). \r\n\r\nAdding that infra should allow us to preserve the context when someone switches off of the Installed/Consolidates/Updates tabs. "},{"Id":"12618175530","Type":"IssuesEvent","CreatedAt":"2020-06-12T20:31:12","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9675","RelatedDescription":"Opened issue \"Smart refreshing of the consolidate tab\" (#9675) at NuGet/Home","RelatedBody":""},{"Id":"12617919322","Type":"IssuesEvent","CreatedAt":"2020-06-12T19:56:07","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9189","RelatedDescription":"Closed issue \"Restore:  skip .NET SDK-style projects during no-op evaluation\" (#9189) at NuGet/Home","RelatedBody":"In Visual Studio, because .NET SDK-style projects restores are triggered by project nominations from the project system, there should be no need to perform another restore (even a no-op restore) in most build-triggered restores.  By skipping these projects during no-op restore evaluation, no-op restore becomes faster relative to how many .NET SDK-style projects are skipped; so, a solution with no .NET SDK-style projects will realize no benefit while a solution with only .NET SDK-style projects will realize maximum benefit.\r\n\r\nAs an example, I [tested a prototype](https://github.com/NuGet/Home/issues/8906) on the [NuGet.Client solution](https://github.com/NuGet/NuGet.Client/tree/fcdcfb4c87265e14f5808ee6db03b54d5a5391cc), which at the time had 83 projects (74 .NET SDK-style projects and 9 legacy PackageReference projects).  With the solution loaded in Visual Studio and the solution fully restored and built once already, building the up-to-date solution involved a ~2.6 no-op restore.  By skipping .NET SDK-style projects during no-op restore evaluation, the no-op restore dropped to ~0.6 seconds.  GC heap allocations dropped from ~380 MB to ~88 MB.  Total GC pauses dropped by ~1 second.\r\n\r\nFor this optimization we need to ensure:\r\n*  .NET SDK-style projects are only skipped when we know the projects are already up-to-date.  If a nomination and no-op restore evaluation occur closely together; the no-op restore evaluation should block or be blocked on completion of all nominations or fallback to a real restore.\r\n*  .NET SDK-style projects must not be skipped during clean builds (or rebuilds) or explicit restore requests, only the no-op restores that occur implicitly during many larger user scenarios (e.g.:  build, debug, static code analysis, etc.).\r\n\r\nCC @aortiz-msft, @anangaur "},{"Id":"12617891495","Type":"IssuesEvent","CreatedAt":"2020-06-12T19:52:23","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9633","RelatedDescription":"Closed issue \"Thousands of NuGet.Versioning.NuGetVersion items are created\" (#9633) at NuGet/Home","RelatedBody":"I noticed this item is multiplying by thousands during memory leak investigation for another [item](https://github.com/NuGet/Home/issues/9595).\nLooks like it's under our Nuget.Client domain.\n![image.png](https://images.zenhubusercontent.com/5eb1d84a3cd56675c3efe510/dbb96fdb-3673-4e14-b9ec-41c32db0e882)\nI think we need to investigate it. For now assigned to myself, most likely I'll work during this or next sprint."},{"Id":"12616927842","Type":"IssuesEvent","CreatedAt":"2020-06-12T17:48:43","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4989","RelatedDescription":"Closed issue \"extern alias support for NuGet package references\" (#4989) at NuGet/Home","RelatedBody":"* [Design document](https://github.com/NuGet/Home/blob/dev/designs/PackageReference-Extern-Alias.md)\r\n\r\n\r\n_From @fubar-coder on April 5, 2017 15:59_\r\n\r\nCurrently, when a NuGet package reference is added, there is no way to set the alias from the project system for the new style csproj projects.\r\n\r\nThis feature is needed, because NuGet package references don't result in direct assembly references any more and only those can have an alias.\r\n\r\nMy proposal is to add the alias(es) to all assemblies referenced for the NuGet package, but not the indirectly referenced NuGet packages.\r\n\r\n_Copied from original issue: dotnet/project-system#1930_\r\n\r\nnotes\r\n\r\nhttps://github.com/dotnet/sdk/issues/10947 The build tasks on (.NET Core SDK side)\r\nhttps://github.com/dotnet/NuGet.BuildTasks/issues/70 The build tasks for the non-SDK based PackageReference\r\nhttps://github.com/dotnet/project-system/issues/6011 Nomination updates on project-system side.\r\n\r\n"},{"Id":"12614298850","Type":"IssuesEvent","CreatedAt":"2020-06-12T13:10:53","Actor":"viv86","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9587","RelatedDescription":"Closed issue \"nuget push into multisources\" (#9587) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nhave a lot of private registries where pushing one by one, I want to push to several sources by one time. Help. Tried with & and with background process nuget start saing that package is taken by another process"},{"Id":"12613078359","Type":"IssuesEvent","CreatedAt":"2020-06-12T10:43:06","Actor":"xymunter","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9048","RelatedDescription":"Closed issue \"\"NuGet restore\" with NuGet 5.x doesn't pick the highest version of MSBuild.exe available\" (#9048) at NuGet/Home","RelatedBody":"When using the _NuGet_ build task with the _restore_ command in an Azure DevOps Server 2019 (ADOS) Build Pipeline after explicitly setting NuGet version to 5.x (and _Always check for new versions_ active) via_ _NuGet tool installer_ build task, the MSBuild.exe version that then is automatically picked is not the highest one, which would be 16.4, given that Visual Studio 2019 is intalled on the build machine.\r\nInstead, the task log of the _NuGet_ build task states the following:\r\n\r\n> MSBuild auto-detection: using msbuild version '4.8.3761.0 built by: NET48REL1' from 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319'. Use option -MSBuildVersion to force nuget to use a specific version of MSBuild.\r\n\r\nThe documentation for the MSBuildVersion argument then states the following:\r\n\r\n> (3.2+) Specifies the version of MSBuild to be used with this command. Supported values are 4, 12, 14, 15.1, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9. By default the MSBuild in your path is picked, otherwise it defaults to the highest installed version of MSBuild.\r\n\r\nAs far as I understand the documentation, me expecting  msbuild.exe version 16.4 to be used is not wrong.\r\n\r\nI managed to find a workaround by using the _NuGet_ work task with the _custom_ command and using the -MSBuildVersion option with the version 16.4. That worked as expected, although my first attempt failed with the error message _##[error]The nuget command failed with exit code(1) and error(Cannot find the specified version of msbuild: '16')_ after setting the -MSBuildVersion option to 16, as the help text given in ADOS implied (for me, at least) that only the general version 16 was valid for this scenario.\r\n\r\nThe next step was to replace the -MSBuildVersion option with -MSBuildPath, in order to prevent the build from failing the moment a Visual Studio 2019 update is installed on the build machine.\r\n\r\nAlthough this workaround seems to do the trick for us, I'd very much like to use the _NuGet_ build task using the _restore_ command instead of the _custom_ command.\r\nCan you please point me in a direction how to achieve this?\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12582399620","Type":"IssuesEvent","CreatedAt":"2020-06-09T17:20:40","Actor":"joelverhagen","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/45","RelatedDescription":"Opened issue \"CVE-2020-1340 - NuGet Gallery Spoofing Vulnerability\" (#45) at NuGet/Announcements","RelatedBody":"A spoofing vulnerability exists when the NuGet Gallery does not properly sanitize input on package metadata values. An attacker who successfully exploited the vulnerability could perform cross-site scripting attacks and run scripts in the security context of the user viewing the malicious content.\r\n\r\nTo exploit this vulnerability, an attacker with permissions to upload packages could publish specially crafted content on a gallery page.\r\n\r\nThe security update addresses the vulnerability by correcting how NuGet Gallery sanitizes input.\r\n\r\n**MSRC Security Guidance:** [CVE-2020-1340](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1340)\r\n**Security Update:** [v2020.06.09](https://github.com/NuGet/NuGetGallery/releases/tag/v2020.06.09)"},{"Id":"12485875984","Type":"IssuesEvent","CreatedAt":"2020-05-30T22:10:20","Actor":"pokittisak","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/44","RelatedDescription":"Opened issue \"Test\" (#44) at NuGet/Announcements","RelatedBody":""},{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-06-13T05:30:38.5322938Z","RunDurationInMilliseconds":1915}