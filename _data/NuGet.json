{"Data":{"Blog":{"FeedItems":[{"Title":"View dependent packages on NuGet.org","PublishedOn":"2020-08-20T18:00:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several ways to evaluate packages on NuGet.org, such as download statistics, update frequency, owner reputation, GitHub Usage, and more.\nToday, we&#8217;re excited to announce that you can...","Href":"https://devblogs.microsoft.com/nuget/view-dependent-packages-on-nuget-org/","RawContent":null},{"Title":"Advanced search on NuGet.org","PublishedOn":"2020-08-07T16:00:12+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We are excited to announce that NuGet.org now supports one of our top customer asks &#8211; advanced search! You can now use a multitude of sorting and filtering criteria to help find the best NuGet...","Href":"https://devblogs.microsoft.com/nuget/advanced-search-on-nuget-org/","RawContent":null},{"Title":"NuGet.org will permanently remove support for TLS 1.0 and 1.1 on June 15th","PublishedOn":"2020-05-25T17:00:12+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org in which we stated that the permanent removal of TLS 1.0/1.1 support would occur in April 2020. However, in April,...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-permanently-remove-support-for-tls-1-0-and-1-1-on-june-15th/","RawContent":null},{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-12T22:09:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"13607918911","Type":"IssuesEvent","CreatedAt":"2020-09-23T00:51:37","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/8216","RelatedDescription":"Opened issue \"Use client's latest certificate generation abstractions\" (#8216) at NuGet/NuGetGallery","RelatedBody":"The client team introduced a [`TestCertificateGenerator`](https://github.com/NuGet/NuGet.Client/blob/0e5413751caebf168e7d363c88b9c22a3560fe60/test/TestUtilities/Test.Utility/Signing/TestCertificateGenerator.cs#L10) abstraction to create certificates for integration testing purposes. This replaces Bouncy Castle's `X509CertificateGenerator` and provides high-level helpers for common tasks (expire a certificate, make it a code signing certificate, etc...).\r\n\r\nSee this comment for more information: https://github.com/NuGet/NuGet.Jobs/pull/916/files#r492732746"},{"Id":"13606342806","Type":"IssuesEvent","CreatedAt":"2020-09-22T21:01:20","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7847","RelatedDescription":"Closed issue \"Accessibility: Color-Contrast too low on package page\" (#7847) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nI played around with [Accessibility Insights](https://accessibilityinsights.io/) and tried it on NuGet.org. The site seems (at least from the \"Fast pass\") quite good regarding accessibility, but the color on the package page for the currently released package is too low.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. On this URL 'https://www.nuget.org/packages/Newtonsoft.Json/'\r\n2. Perform this operation 'FastPass with https://accessibilityinsights.io/'\r\n3. See error\r\n\r\n### Expected behavior\r\n\"Congratulations!\r\nNo failed automated checks were found.\"\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/756703/74595115-19d7f800-503e-11ea-8730-fb319a456680.png)\r\n\r\n### Additional context\r\nThe link color and the background color (this blue-ish color) are problematic. I'm not sure if this combination is used on other pages as well. I would guess that the best fix would be to change the background color of the \"bg-info\" class. \r\n\r\nI could try to find a color combination, but I guess there is not \"right\" or \"wrong\", but if you would like that I should try something just give me a comment here. :)"},{"Id":"13595498956","Type":"PullRequestEvent","CreatedAt":"2020-09-22T03:17:14","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/8215","RelatedDescription":"Opened pull request \"Fix for overflowing api key hint text on certain zoom levels.\" (#8215) at NuGet/NuGetGallery","RelatedBody":"Addresses #8190 \r\n\r\nIt seems that at some point, in order to align the bottoms of the package list and the API key hint container their respective heights were explicitly specified in CSS (see diff). At certain zoom levels (and browser window widths) the contents of the hint container gets longer than the container permits and overflows:\r\n![image](https://user-images.githubusercontent.com/102933/93840558-a76b6e00-fc45-11ea-9bca-1dc256a8f7ee.png)\r\n\r\nIn order to get rid of hardcoding container heights a bunch of flex containers were introduced, hint container was wrapped with an additional `<div class=\"form-group\">` in order to layout the contents in the same way as in the container on the left (i.e. to have the same margin-bottom), so bottom border end up on the same level.\r\nAt the same time, table inside the hint container was styled to not have a bottom margin to eliminate weird white space:\r\n![image](https://user-images.githubusercontent.com/102933/93840762-60ca4380-fc46-11ea-93b0-f01a5ab08a62.png)\r\n\r\nResulting in the following look (at various widths and zoom levels):\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93840999-1b5a4600-fc47-11ea-9506-24e198063a39.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93841035-375de780-fc47-11ea-887a-371c92aaf7a1.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/102933/93841076-59f00080-fc47-11ea-9bcc-be2d121a2ddb.png)\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"13606630955","Type":"IssuesEvent","CreatedAt":"2020-09-22T21:33:37","Actor":"Denis535","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10060","RelatedDescription":"Opened issue \"VS Rebuild doesn't update deprecated package cache\" (#10060) at NuGet/Home","RelatedBody":"I have solution with 2 projects. First project produces nuget package into local repository. Second project consumes this package. For the changes to take effect I was forced to rebuild second project.\r\n\r\nBut today I've updated Visual Studio to version 16.8.0 preview 3.1. And now after rebuild the changes doesn't take effect. I need manually to delete cache.\r\n\r\nAlso may I ask here? Is there any way to update the cache automatically? I was using `dotnet nuget locals global-packages --clear` but it leads to another problems.\r\n\r\n    <Target Name=\"Push\" AfterTargets=\"Pack\">\r\n        <Exec Command=\"dotnet nuget push %2A%2A/%2A.nupkg --source Local\" ConsoleToMsBuild=\"true\" />\r\n        <Exec Command=\"dotnet nuget locals global-packages --clear\" />\r\n    </Target>"},{"Id":"13601690099","Type":"IssuesEvent","CreatedAt":"2020-09-22T14:12:06","Actor":"EthanHotz-Reisys","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10036","RelatedDescription":"Closed issue \"Package Manager Console crashes on loading Visual Studio\" (#10036) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: \r\nPackage Manager Console v5.7.0\r\n\r\nVS version (if appropriate): \r\nVS19, version 16.7.3\r\n\r\nOS version:\r\nWindows 10 Pro v1909, OS Build 18363.1082\r\n\r\nWorked before? If so, with which NuGet version:\r\nThe Package Manager Console seemed to simply break a few days ago, after installing Windows 10 updates, but I'm unable to rollback my system to confirm this.\r\n\r\nError message:\r\nMethod not found: 'Void System.Management.Automation.ExecutionContext.MarkObjectAsUntrusted(System.Object)'.\r\n\r\nFrom my testing, it seems as though there is some issue with Powershell within Visual Studio. I'm able to open Powershell outside of VS just fine, but opening the Package Manager Console or Powershell Command Explorer(using Powershell Tools for Visual Studio extension) within VS throws the above error message.\r\n\r\nI've attempted a number of reinstalls/upgrades/repairs across VS17 and VS19, but this issue persists across all projects."},{"Id":"13594644102","Type":"IssuesEvent","CreatedAt":"2020-09-22T00:31:19","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/10059","RelatedDescription":"Opened issue \"Consolodate dotnet nuget cli code to NuGet.CommandLine.XPlat\" (#10059) at NuGet/Home","RelatedBody":"## Background\r\n\r\nNuGet is integrated in the `dotnet` CLI. This integration is achieved by NuGet owning `NuGet.CommandLine.XPlat.dll`, which is in the NuGet/NuGet.Client repo. The dotnet CLI repo (now in dotnet/sdk) calls into NuGet's dll, as it ships in the SDK. When certain commands in the `dotnet` cli are run, the `dotnet` cli executes `NuGet.CommandLine.XPlat` with the relevant arguments. Note, the `dotnet` cli starts `NuGet.CommandLine.XPlat` as a new process, it is not a library with APIs being called.\r\n\r\nHowever, the dotnet cli contains a duplicate of `NuGet.CommandLine.XPlat`'s command line parsing definitions. I'm not 100% sure, but I think the only reason is to provide tab-completion support. It appears that using arguments not defined in the dotnet cli does not result in an error, and `NuGet.CommandLine.XPlat` is executed, where it will parse the arguments and error if required.\r\n\r\nToday, commands that are already in `NuGet.CommandLine.XPlat`, but are not in `dotnet`'s command parser, include:\r\n* the `sources` commands (add, disable, enable, remove, update)\r\n* the `client-cert` commands\r\n\r\nWork in progress, or coming soon include:\r\n* `dotnet nuget verify`\r\n* `dotnet nuget sign`\r\n\r\nWork that probably will happen:\r\n* a replacement for `nuget.exe config`\r\n* a replacement for `nuget.exe search`.\r\n\r\nAs we can see, there are already two cases of commands that were added to `NuGet.CommandLine.XPlat`, but not added to the `dotnet` cli, and there is upcoming work where this duplicated argument definitions need to be implemented, or the dotnet cli experience will be inconsistent.\r\n\r\n## Goals\r\n\r\n* Add missing commands/arguments to the `dotnet nuget` tab-completion customer experience.\r\n* Reduce technical debt by having less duplicated code\r\n* Reduce risk of new `dotnet nuget` commands/arguments not being available for tab-completion\r\n\r\n## Non-goals\r\n\r\n* NuGet will not be shipped as a dotnet global tool that can be installed/upgraded separately from the .NET SDK.\r\n* Any kind of tab-completion that is not supported today. We're looking for feature parity with what's currently possible in the dotnet cli, not tab completion for `dotnet nuget disable source nug<tab>` to get `nuget.org` (assuming that's the name of the source in nuget.config).\r\n\r\n## Solution\r\n\r\nWe already have a task https://github.com/NuGet/Home/issues/10039 related to changing to a different command line parsing library, in order to be source-build compliant.  I know that `System.CommandLine` supports tab-completion out of the box, or with minimal effort. It's mostly a question of how to integrate it with the dotnet cli, since we're not a real dotnet tool (installed via `dotnet tool`). Another issue with `System.CommandLine` is that it doesn't have a stable version. I know less about the other library that was proposed in the issue, but I think it might be what the dotnet cli itself uses. If that's true, then it must support tab completion as well.\r\n\r\nTherefore, we do not need to implement tab-completion ourselves (but it would be amazing if I could tab complete `dotnet nuget disable source nug<tab>`). Instead, we need to:\r\n* Migrate to a different command line parsing library that supports tab completion\r\n* Change the dotnet cli to forward tab completion requests to NuGet.CommandLine.XPlat\r\n\r\n## Future Work\r\n\r\nNone we will commit to, although intelligent, context-sensitive tab completion, for example `dotnet nuget disable source nug<tab>` would be great. Similar to how `git checkout <tab>` knows what branch names exist.\r\n\r\n# Open Questions\r\n\r\nIf this effort worthwhile? It's not a lot of effort to create a PR on the dotnet cli to add new commands and arguments to the command line parser. It's just a question of remembering that it needs to be done and scheduling time to do it.\r\n\r\n## Considerations\r\n\r\nnone"},{"Id":"13593170704","Type":"IssuesEvent","CreatedAt":"2020-09-21T21:02:35","Actor":"JonDouglas","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2762","RelatedDescription":"Closed issue \"NuGet on Gitter?\" (#2762) at NuGet/Home","RelatedBody":"It would be really useful to have a place where other maintainers of packages could gather and seek advice on how to package stuff up and share knowledge with other package maintainers, etc. Similar to the corefx/coreclr channels on gitter.\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12779263648","Type":"IssuesEvent","CreatedAt":"2020-06-30T21:31:53","Actor":"t-mog-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/46","RelatedDescription":"Opened issue \"Advanced Search on NuGet.org\" (#46) at NuGet/Announcements","RelatedBody":"The spec for 'Advanced Search on NuGet.org' is ready for **review**:\r\n\r\n| Spec wiki | Discussion issue |\r\n| :----------:| :----------------: |\r\n| [Advanced Search on NuGet.org](https://github.com/NuGet/Home/wiki/Advanced-Search-on-NuGet.org) | [NuGet/NuGetGallery#2636](https://github.com/NuGet/NuGetGallery/issues/2636) |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1308096152634404864","CreatedAt":"2020-09-21T17:30:00+00:00","UserScreenname":"nuget","Text":"Have suggestions or feedback? Here are a few ways to reach us:\n\n- Set up a call with us at https://t.co/epdsUI7qqO… https://t.co/mX6pcotPfA","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":29,"FavoriteCount":18,"RawContent":null},{"Id":"1301620826295410688","CreatedAt":"2020-09-03T20:39:22+00:00","UserScreenname":"nuget","Text":"🙌 Community contributor appreciation 🙌\n\nThank you @ztblackgad for your significant code contribution to NuGet! Hope… https://t.co/AFIkO7qHJ2","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"1296528394021044224","CreatedAt":"2020-08-20T19:23:52+00:00","UserScreenname":"nuget","Text":"Blogpost here: https://t.co/96if06L0uq 👍 https://t.co/9hdtovsG1b","Source":"<a href=\"https://mobile.twitter.com\" rel=\"nofollow\">Twitter Web App</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2020-09-23T05:30:38.3850201Z","RunDurationInMilliseconds":1587}