{"Data":{"Blog":{"FeedItems":[{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null},{"Title":"NuGet.org Terms of Service Update on Unexpected Behavior and Hate Speech","PublishedOn":"2023-04-13T17:20:42+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"In recent years, the .NET open source community and NuGet package registry have become increasingly important for sharing code. However, with the growth of these platforms, there has also been a rise...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-terms-of-service-update-on-unexpected-behavior-and-hate-speech/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"37186923327","Type":"PullRequestEvent","CreatedAt":"2024-04-05T01:24:50","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9907","RelatedDescription":"Merged pull request \"CI pipeline\" (#9907) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/5226\r\n\r\nStoring CI pipeline in GH, so we don't have to invent anything with pipeline triggers."},{"Id":"37186730593","Type":"PullRequestEvent","CreatedAt":"2024-04-05T01:11:21","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9907","RelatedDescription":"Opened pull request \"CI pipeline\" (#9907) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/5226\r\n\r\nStoring CI pipeline in GH, so we don't have to invent anything with pipeline triggers."},{"Id":"37184521013","Type":"PullRequestEvent","CreatedAt":"2024-04-04T22:53:04","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9905","RelatedDescription":"Merged pull request \"Fixing runtime issues because of assembly bindings\" (#9905) at NuGet/NuGetGallery","RelatedBody":"Similar to https://github.com/NuGet/NuGetGallery/pull/9597\r\n\r\nWe updated some packages recently, and need to update the assembly bindings in Web.config alongside that.\r\n\r\nDEV release succeeded: https://devdiv.visualstudio.com/DevDiv/_releaseProgress?releaseId=1521319&_a=release-pipeline-progress"},{"Id":"37181454665","Type":"PullRequestEvent","CreatedAt":"2024-04-04T20:37:26","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9906","RelatedDescription":"Opened pull request \"Fix Table Text Got Truncated in Small Screen Issue\" (#9906) at NuGet/NuGetGallery","RelatedBody":"Change statistics table css  to  remove text truncated in small screen.\r\nBug link: \r\nhttps://devdiv.visualstudio.com/DevDiv/_queries/edit/?tempQueryId=86f20051-1835-446b-b283-b35a28cb6618&id=1980703"},{"Id":"37144784128","Type":"PullRequestEvent","CreatedAt":"2024-04-03T22:30:01","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9905","RelatedDescription":"Opened pull request \"Fixing runtime issues because of assembly bindings\" (#9905) at NuGet/NuGetGallery","RelatedBody":"Similar to https://github.com/NuGet/NuGetGallery/pull/9597\r\n\r\nWe updated some packages recently, and need to update the assembly bindings in Web.config alongside that.\r\n\r\nI've started a build for this: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9358523&view=results. Before I merge this PR, I'll try and deploy the changes to DEV to confirm that it worked."},{"Id":"37144303171","Type":"PullRequestEvent","CreatedAt":"2024-04-03T22:10:18","Actor":"advay26","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9904","RelatedDescription":"Opened pull request \"Fixing JS exceptions on profiles page\" (#9904) at NuGet/NuGetGallery","RelatedBody":"We're seeing some javascript exceptions for the profiles page. We use the same scripts file on the search page and the profiles page, and need to deal with null values properly to avoid exceptions. This should be fixed now."},{"Id":"37140859482","Type":"PullRequestEvent","CreatedAt":"2024-04-03T19:57:39","Actor":"Goodyear2017","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9903","RelatedDescription":"Opened pull request \"Fix Link Screen Reading Issue On Upload Package Page And About Page\" (#9903) at NuGet/NuGetGallery","RelatedBody":"Remove aria-label and alt from links for bug # 1979902"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"37185466161","Type":"PullRequestEvent","CreatedAt":"2024-04-04T23:52:12","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/Home/pull/13366","RelatedDescription":"Merged pull request \"Update authentication experience for private Azure Artifacts feeds in C# Dev Kit MVP\" (#13366) at NuGet/Home","RelatedBody":"Update authentication experience for private Azure Artifacts feeds in C# Dev Kit MVP.\r\n\r\nThe new user experience planned for MVP version is as follows:\r\n- If the user is attempting to perform a package operation on a package from an Azure Artifacts feed that requires the user to sign-in and authenticate their credentials, they will receive a toast that says `NuGet requires credentials. `\r\n- Upon clicking `Show login instructions` users will be directed to the `NuGet` output window in Visual Studio Code (VS Code).\r\n- In this window, they’ll find all the necessary device code login information to successfully authenticate with the Azure Artifacts private feed.\r\n- Users have a 90-second window to complete the authentication process.\r\n- Once authentication is successful, NuGet operation will resume as intended.\r\n\r\nFor more information about consuming packages from private NuGet feeds, please refer to [doc](https://learn.microsoft.com/nuget/consume-packages/consuming-packages-authenticated-feeds).\r\n"},{"Id":"37184364985","Type":"IssuesEvent","CreatedAt":"2024-04-04T22:44:56","Actor":"jaredpar","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13374","RelatedDescription":"Opened issue \"NUGET_PACKAGES path normalization breaks editor config handling of source file\" (#13374) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, MSBuild.exe\n\n### Product Version\n\n.NET 8.0.101 SDK\n\n### Worked before?\n\nUnknown but seems unlikely\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\nRepro steps: \r\n\r\n1. clone https://github.com/dibarbet/EditorConfigNugetRepro\r\n2. run `repro.ps1`\r\n\r\nUnder the hood this powershell script is running the following sequence of builds twice: \r\n\r\n1. Building a NuPkg that has a .cs and .editorconfig file in the content folder \r\n2. Building a project that consumes that NuPkg\r\n\r\nThe first time the build will fail, the second time it will succeed. \r\n\r\nIn the failing build you will see the following error: When it fails you will see the error\r\n\r\n> E:\\temp\\nuget\\EditorConfigNugetRepro\\.packages\\nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs(7,38): error IDE0004: Cast is redundant. (https://learn.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/ide0004) [E:\\temp\\nuget\\EditorConfigNugetReproo\\ConsumeNuget\\ConsumeNuget.csproj]\r\n\r\nThis should not happen though as the .editorconfig in the package suppresses this diagnostic. The only difference between the builds is the following environment variables and they only differ by presence or absence of the trailing slash.\r\n\r\n| Name | Good Build | Failing Build |\r\n| --- | --- | --- |\r\n| NUGET_PACKAGES | .packages\\ | .packages |\r\n| NuGetPackageRoot | .packages\\ | .packages\\ |\r\n\r\nWhen the two variables disagree on the trailing slash it causes a significant difference in how the `nuget.g.props` file is generated: \r\n\r\nGood case\r\n\r\n```xml\r\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">E:\\temp\\nuget\\EditorConfigNugetRepro\\.packages\\</NuGetPackageRoot>\r\n    ...\r\n    <Compile Include=\"$(NuGetPackageRoot)nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs\" Condition=\"Exists('$(NuGetPackageRoot)\\nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs')\">\r\n```\r\n\r\nFailing case\r\n```xml\r\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">E:\\temp\\nuget\\EditorConfigNugetRepro\\.packages</NuGetPackageRoot>\r\n    ...\r\n    <Compile Include=\"$(NuGetPackageRoot)\\nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs\" Condition=\"Exists('$(NuGetPackageRoot)\\nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs')\">\r\n```\r\n\r\nNotice that in the failing case the path of the content file is prefixed with `$(NuGetPackageRoot)\\`. That is a problem because  `$(NuGetPackageRoot)` has a trailing slash and the source file ends up with the file path \r\n\r\n> .packages\\\\nugetpackagewitheditorconfig\\1.0.0\\contentFiles\\cs\\netstandard2.0\\Class1.cs`packages\\\\nugetpackagewitheditorconfig\r\n\r\nThat double slash (`\\\\`) breaks .editorconfig semantics which is entirely path based. The file no longer resolves to being associated with the .editorconfig file and none of its settings are applied. This means .editorconfig is essentially ignored and the result is compilation errors.\r\n\r\nRelated issues:\r\n- https://github.com/dotnet/roslyn/issues/72657\r\n- https://github.com/dotnet/razor/pull/10220\r\n\r\n\r\n\r\n \r\n\r\n\n\n### Verbose Logs\n\n_No response_"},{"Id":"37184074156","Type":"IssuesEvent","CreatedAt":"2024-04-04T22:30:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/10030","RelatedDescription":"Closed issue \"Same projects targeting .NET Core restore slower than .NET Framework (.NET Core App dependencies have more packages)\" (#10030) at NuGet/Home","RelatedBody":"---\r\n**Issue moved from dotnet/sdk#13538**\r\n- Please respond to @saul.\r\n\r\n---\r\n\r\n_From @saul on Friday, September 11, 2020 4:36:23 PM_\r\n\r\nHi\r\n\r\nWe're currently in the middle of migrating a large .NET Framework codebase (~350 projects) to .NET Core. Unfortunately we've hit a bit of a roadblock - the NuGet restore times have shot up from ~1:30m -> ~16:00m (an increase of 10x!)\r\n\r\nUnfortunately I can't share the full solution as it is sensitive. However I have been able to create a representative solution outside of the office. This representative solution has the same number of projects, the same ProjectReferences and the same third-party PackageReferences. With this representative solution, here are my results:\r\n\r\n- .NET Framework restore time: 14s average\r\n- .NET Core restore time: 51s average\r\n\r\nNote that the only thing that has changed between .NET Framework and .NET Core is moving from `net471` -> `netcoreapp3.1`. All project/package references remain the same.\r\n\r\n```\r\nBenchmark #1: dotnet restore --force C:\\Code\\SharedSolutions\\SanitisedNetCoreApp3.1\\Solution.sln\r\n  Time (mean ± σ):     53.221 s ±  1.505 s    [User: 4.4 ms, System: 4.5 ms]\r\n  Range (min … max):   50.993 s … 55.307 s    10 runs\r\n\r\nBenchmark #2: dotnet restore --force C:\\Code\\SharedSolutions\\SanitisedNet471\\Solution.sln\r\n  Time (mean ± σ):     14.121 s ±  0.272 s    [User: 1.5 ms, System: 4.5 ms]\r\n  Range (min … max):   13.750 s … 14.481 s    10 runs\r\n```\r\n\r\nYou can find the solutions here to test/profile for yourself here:\r\n\r\n- [SanitisedNet471.zip](https://github.com/dotnet/sdk/files/5210379/SanitisedNet471.zip)\r\n- [SanitisedNetCoreApp3.1.zip](https://github.com/dotnet/sdk/files/5210380/SanitisedNetCoreApp3.1.zip)\r\n\r\nAny info would be greatly appreciated as we're unable to complete the .NET Core migration without a solution.\r\n\r\nThanks\r\nSaul"},{"Id":"37182868099","Type":"IssuesEvent","CreatedAt":"2024-04-04T21:31:39","Actor":"jgonz120","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11265","RelatedDescription":"Closed issue \"Add .NET SDK tests\" (#11265) at NuGet/Home","RelatedBody":"This is for adding 2 tests in the dotnet/sdk repo as part of re-enabling signed package verification cross-platform:\r\n\r\n1.  verify that the fallback certificate bundle loads correctly and contains some crucial root certificates\r\n2.  verify a signed package that has expired author signature and repository countersignature and a Symantec timestamp"},{"Id":"37182068155","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:59:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7168","RelatedDescription":"Closed issue \"Docs on creating a Native TFM package\" (#7168) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nnuget.exe NuGet Version: 4.7.0.5148\r\nVisual Studio 2017 Enterprise\r\nWindows 10 Pro\r\n\r\nWorked before? If so, with which NuGet version: No, total nuget packagingnoob\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nAfter a ton of internet searching, I still have not found straight forward steps (for someone with absolute beginner experience with using nuget and packaging dlls, and packaging files in general that are not managed code) on how to use nuget to create a package with (unmanaged code) exisiting dlls.\r\n\r\n\r\nPlease help.\r\n\r\n"},{"Id":"37182059365","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:58:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6460","RelatedDescription":"Closed issue \"Console Commands in powershell\" (#6460) at NuGet/Home","RelatedBody":"My comments seem to keep on getting removed on the technet page.\r\n\r\nSo i'll post this as a bugreport even tho it is more of a WHY is this not a feature request.\r\nSo why can't you just run all the colsole commands straight from powershell.\r\n\r\n# Not being able to update your packages from powershell is just plain ridiculess.\r\nAnd i'm sure it whouldn't take allot of time for you guys to implement this.\r\n\r\nI'm sure that a lack of this feature is keeping nuget from being implemented in buisnesses all around the world.\r\n\r\n\r\n\r\nps,\r\nIt sort of looks like microsoft doesn't want to move into their partners territory instead of a feature you haven't thought of.\r\nIn anny case package deployment should be standart and free just like installing exe's was.\r\n\r\n\r\n"},{"Id":"37181015423","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:21:49","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3712","RelatedDescription":"Closed issue \"[Probably a dup] Clicking Manage Packages takes you to the install tab\" (#3712) at NuGet/Home","RelatedBody":"VS 2015, NuGet 3.5\n\nWhen Right Clicking on a project, and loading the package manager window, we go to install by default. \n\nThis is not always what I want to do, I find myself many times wanting to install a package in a fresh project and get confused when I land in the wrong tab.\n\nRough Ideas:\n1. Remember the last tab (globally)\n2. Add a Add NuGet Package, next to Manage NuGet packages\n"},{"Id":"37180835681","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:15:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/2084","RelatedDescription":"Closed issue \"Package Compatibility Filtering (for update)\" (#2084) at NuGet/Home","RelatedBody":"The current behavior of NuGet is that it always returns the full list of newer package versions when showing potential upgrades. This is true for the UI and also for running `Upgrade-Package` from the console.\n\nThe problem is that many packages will drop support for older platforms and NuGet will show them as upgrades. This confuses users and has lead to complaints. Further, if users change the default dependency version settings from \"lowest\" to \"highest\", they can get install errors that are hard to trace.\n\nThis is particularly prevalent for the System.\\* CoreFX packages where `System.Runtime 4.0.0` will install in a .NET 4.5.2 project but `System.Runtime 4.0.20` won't. How is a user supposed to know that it's not compatible when NuGet shows it as an upgrade? Adding a further complication, what happens when a package like `System.Reflection.Extensions 4.0.1` is released? How should a user know that the package does apply to them when sometimes upgrades don't?\n\nWhile the current support matrix may be difficult to computer, with `netstandard`, it should be easier to filter out the platforms based on the packages' `netstandard` version and the target projects `netstandard` compatibility.\n\nThis will save a lot of frustration, especially as more packages start using the CoreFX packages and starting to drop support for older platforms.\n"},{"Id":"37180518806","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:03:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11546","RelatedDescription":"Closed issue \"VS Package Manager UI performance and design whitepaper\" (#11546) at NuGet/Home","RelatedBody":"Publish a whitepaper focused on performance and design opportunities in the VS Package Manager UI based on customer developments with HaTS survey respondents and other stakeholders."},{"Id":"37180452115","Type":"IssuesEvent","CreatedAt":"2024-04-04T20:01:38","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8534","RelatedDescription":"Closed issue \"Learning KR: Understand the current blockers from packages.config to package reference\" (#8534) at NuGet/Home","RelatedBody":""},{"Id":"37180350414","Type":"IssuesEvent","CreatedAt":"2024-04-04T19:57:58","Actor":"lemccomb","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13373","RelatedDescription":"Opened issue \"NuGet sign command should support custom certificate stores\" (#13373) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nNuGet.exe\n\n### The Elevator Pitch\n\nLoading the My:CurrentUser certificate store can be a performance bottleneck for signing operations, so it is often a better practice to use a custom certificate store, especially in build systems and other contexts that make a lot of signing calls.\r\nThe NuGet.exe sign command should enable this pattern by allowing the user to sign with a certificate in a custom store.\n\n### Additional Context and Details\n\nCurrently, running the sign command with -CertificateStoreName set to a custom store name returns the following error:\r\nInvalid value provided for 'CertificateStoreName'"},{"Id":"37173024150","Type":"IssuesEvent","CreatedAt":"2024-04-04T15:54:50","Actor":"Nigusu-Allehu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4387","RelatedDescription":"Closed issue \"NuGet cannot restore from HTTPS sources that have SSL certificate problems\" (#4387) at NuGet/Home","RelatedBody":"## Idea\r\n\r\nWe should add a way for users to bypass certain HTTPS certificate errors. If the user has a source that does not have a valid certificate chain, they should still have some way of getting NuGet to interact with this source.\r\n\r\n## \"Inspirations\"\r\n\r\nnpm and yarn have this:\r\n```\r\nnpm config set strict-ssl false\r\nyarn config set strict-ssl false\r\n```\r\n\r\nMaven has some extra knobs and switches:\r\n```\r\n-Dmaven.wagon.http.ssl.allowall=true\r\n-Dmaven.wagon.http.ssl.insecure=true\r\n-Dmaven.wagon.http.ssl.ignore.validity.dates=true\r\n```\r\n\r\nPHP's Composer\r\n```json\r\n{\r\n    \"config\": {\r\n        \"disable-tls\": true,\r\n        \"secure-http\": false\r\n    }\r\n}\r\n```\r\n\r\ncurl has it:\r\n```\r\n--no-check-certificate\r\n```\r\n\r\n## Specific Scenario\r\n\r\nnuget.org server side runs functional tests against the staging slot of DEV, INT, and PROD that use nuget.exe. The DNS for this staging slot is some random blah.cloudapp.net. The certificate used is associated with the production DNS (e.g. *.nuget.org). This means nuget.exe fails SSL checks when running against this staging slot. \r\n\r\n## Proposal\r\n\r\nAdd a NuGet.config `trustedCertificates` section with standard `<add>` and `<remove>` tags. The value should be the SHA1 fingerprint (a.k.a. thumbprint) of the certificate. This allows developers to specifically opt-in into the tenuous state of SSL validation failures. The risk is mitigated since the developer must opt into it and even then only on a case-by-case basic.\r\n\r\nAny certificate added to the `trustedCertificates` set is excluded from SSL validations -- I am thinking ALL validations exposed to use via the .NET API (untrusted root, name mistmatch, etc).\r\n\r\nTo improve discovery, we can add a log which writes out the fingerprint of the certificate that failed SSL validation at the `error` level.\r\n\r\nWe should also consider adding an environment variable to set this value. I believe npm has this and this  sibling environment variable would match other NuGet.config keys, such as the location of the user packages directory.\r\n\r\n## Implementation\r\n\r\n`HttpClientHandler` in `System.Net.Http` 4.3.0 (maybe earlier) has a way to set the certification validation check. This allows an app to configure the certificate validation on a per-request basis, instead of a per-AppDomain basis previously provided by `ServicePointManager` static properties.\r\n\r\nWith this approach, we should be able to implement the settings for all of our entry points: nuget.exe, .NET CLI, and (most tricky) Visual Studio.\r\n\r\nThe only possible problem is TFM compatibility with the `System.Net.Http` package. This requires investigation.\r\n\r\n## Issues\r\n\r\n- [ ] https://github.com/NuGet/Home/issues/12996\r\n- [ ] https://github.com/NuGet/Home/issues/13023"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"35647123127","Type":"IssuesEvent","CreatedAt":"2024-02-13T18:56:37","Actor":"martinrrm","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/71","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\" (#71) at NuGet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2024-0057 | NuGet Client Security Feature bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET 6.0, .NET 7.0 and .NET 8.0 . This advisory also provides guidance on what developers can do to update their applications to address this vulnerability.\r\n\r\nA security feature bypass vulnerability exists when Microsoft .NET Framework-based applications use X.509 chain building APIs but do not completely validate the X.509 certificate due to a logic flaw. An attacker could present an arbitrary untrusted certificate with malformed signatures, triggering a bug in the framework. The framework will correctly report that X.509 chain building failed, but it will return an incorrect reason code for the failure. Applications which utilize this reason code to make their own chain building trust decisions may inadvertently treat this scenario as a successful chain build. This could allow an adversary to subvert the app's typical authentication logic.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at \r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nWithin .NET, only the WindowsDesktop shared runtime contains inbox components which utilize X.509 chain building APIs in a vulnerable manner. Other project types, such as web applications, are not impacted by this vulnerability unless they explicitly invoke the X.509 chain building APIs themselves in a vulnerable manner or they consume an external package which does this on their behalf.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\n### NuGet & NuGet Packages\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.8.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.7.0 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.6.1 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.4.2 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.3.3 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 6.0.5 version or earlier.\r\n- Any NuGet.exe, NuGet.CommandLine, NuGet.Packaging 5.11.5 version or earlier.\r\n\r\n[GitHub Advisory](https://github.com/NuGet/NuGet.Client/security/advisories/GHSA-68w7-72jg-6qpp)\r\n\r\n\r\n### .NET SDK(s)\r\n- Any .NET SDK 6.0.126 or earlier, or 6.0.418 or earlier.\r\n- Any .NET SDK 7.0.115 or earlier, or 7.0.312 or earlier, or 7.0.405 or earlier.\r\n- Any .NET SDK 8.0.101 or earlier.\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf you have a NuGet package or .NET SDK with a version listed in [affected software](#affected-software), you're exposed to the vulnerability.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue, please install the latest version of .NET 6.0, .NET 7.0 or .NET 8.0 and NuGet (NuGet.exe, NuGet.CommandLine, NuGet. Packaging versions). If you have installed one or more .NET SDKs through Visual Studio, Visual Studio will prompt you to update Visual Studio, which will also update your .NET SDKs.\r\n\r\n- If you're using NuGet.exe 6.8.0 or lower, you should download and install 6.8.1 from https://dist.nuget.org/win-x86-commandline/v6.8.1/nuget.exe.\r\n- If you're using NuGet.exe 6.7.0 or lower, you should download and install 6.7.1 from https://dist.nuget.org/win-x86-commandline/v6.7.1/nuget.exe.\r\n- If you're using NuGet.exe 6.6.1 or lower, you should download and install 6.6.2 from https://dist.nuget.org/win-x86-commandline/v6.6.2/nuget.exe.\r\n- If you're using NuGet.exe 6.4.2 or lower, you should download and install 6.4.3 from https://dist.nuget.org/win-x86-commandline/v6.4.3/nuget.exe.\r\n- If you're using NuGet.exe 6.3.3 or lower, you should download and install 6.3.4 from https://dist.nuget.org/win-x86-commandline/v6.3.4/nuget.exe.\r\n- If you're using NuGet.exe 6.0.5 or lower, you should download and install 6.0.6 from https://dist.nuget.org/win-x86-commandline/v6.0.6/nuget.exe.\r\n- If you're using NuGet.exe 5.11.5 or lower, you should download and install 5.11.6 from https://dist.nuget.org/win-x86-commandline/v5.11.6/nuget.exe.\r\n\r\nYou can get the version of NuGet.exe by running the `nuget` command. You should see an output like the following:\r\n\r\n```\r\nNuGet Version: 6.0.0.280\r\n\r\nusage: NuGet <command> [args] [options]\r\n\r\nType 'NuGet help <command>' for help on a specific command.\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://www.nuget.org/downloads\r\n```\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You should see an output like the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n\r\n Version:   6.0.300\r\n\r\n Commit:    8473146e7d\r\n\r\n\r\n\r\nRuntime Environment:\r\n\r\n OS Name:     Windows\r\n\r\n OS Version:  10.0.18363\r\n\r\n OS Platform: Windows\r\n\r\n RID:         win10-x64\r\n\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\n\r\n\r\nHost (useful for support):\r\n\r\n  Version: 6.0.5\r\n\r\n  Commit:  8473146e7d\r\n\r\n\r\n\r\n.NET Core SDKs installed:\r\n\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n.NET Core runtimes installed:\r\n\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n- If you're using .NET 8.0, you should download and install .NET 8.0.102 SDK (for Visual Studio 2022 v17.8) from https://dotnet.microsoft.com/download/dotnet-core/8.0.\r\n- If you're using .NET 7.0, you should download and install SDK 7.0.116 (for Visual Studio 2022 v17.4), or SDK 7.0.313 (for Visual Studio 2022 v17.6), or 7.0.406 (for Visual Studio 2022 v17.7) from https://dotnet.microsoft.com/download/dotnet-core/7.0.\r\n- If you're using .NET 6.0, you should download and install SDK 6.0.127 or SDK 6.0.419 (for Visual Studio 2022 v17.3) from https://dotnet.microsoft.com/download/dotnet-core/6.0.\r\n\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\nIf you have found a potential security issue in .NET 8.0 or .NET 7.0 or .NET 6.0, please email details to secure@microsoft.com. Reports may qualify for the Microsoft .NET Core & .NET Bounty. Details of the Microsoft .NET Bounty Program including terms and conditions are at https://aka.ms/corebounty.\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET GitHub organization. The main repo is located at https://github.com/NuGet/NuGet.Client . The Announcements repo will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the linked discussion issue.\r\n\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE 2024-0057](https://dev.azure.com/dnceng/internal/_git/dotnet-release?version=GBfeb24&path=/AdvisoryDrafts/CVE-2024-0057.md)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 13, 2024): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2024-02-13_\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-04-05T03:30:17.3168616Z","RunDurationInMilliseconds":992}