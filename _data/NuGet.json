{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing NuGet Commands in C# Dev Kit","PublishedOn":"2024-05-14T19:25:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-commands-in-c-dev-kit/","RawContent":null},{"Title":"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024","PublishedOn":"2024-03-14T02:04:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are repository signed by NuGet.org using a NuGet client policy, NuGet.exe verify command, or the dotnet nuget verify command, please follow these steps...","Href":"https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/","RawContent":null},{"Title":"Refining Your Search: Introducing NuGet.org’s Compatible Framework Filters","PublishedOn":"2024-03-12T20:05:53+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last year, we introduced search by target frameworks on NuGet.org, allowing you to filter your search results based on the framework(s) that a package targets. We received plenty of great feedback...","Href":"https://devblogs.microsoft.com/nuget/refining-your-search-introducing-nuget-orgs-compatible-framework-filters/","RawContent":null},{"Title":"Announcing NuGet 6.9","PublishedOn":"2024-02-14T00:33:14+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"NuGet 6.9 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.9 for Windows, macOS, and Linux as a standalone executable.\nIn NuGet 6.9, we introduce some...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-9/","RawContent":null},{"Title":"Introducing NuGetSolver: A Powerful Tool for Resolving NuGet Dependency Conflicts in Visual Studio","PublishedOn":"2024-01-16T18:54:55+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Managing dependencies on complex projects can be overwhelming. Developers often grapple with numerous direct and transitive dependencies across multiple projects. When different projects share...","Href":"https://devblogs.microsoft.com/nuget/introducing-nugetsolver-a-powerful-tool-for-resolving-nuget-dependency-conflicts-in-visual-studio/","RawContent":null},{"Title":"Announcing NuGet.exe and NuGet Client SDK Packages Support Policy: Keeping You Informed and Secure","PublishedOn":"2023-11-21T01:04:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"At NuGet, our commitment is to ensure that our users have access to the latest, most secure, and well-maintained versions of our tools and packages. With this in mind, we would like to announce the...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-exe-and-nuget-client-sdk-packages-support-policy-keeping-you-informed-and-secure/","RawContent":null},{"Title":"Announcing NuGet 6.8 – Maintaining Security with Ease","PublishedOn":"2023-11-17T22:26:57+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"NuGet 6.8 is included in Visual Studio 2022 and .NET 8.0 out of the box. You can also download NuGet 6.8 for Windows, macOS, and Linux as a standalone executable.\nMaintaining and understanding...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-8-maintaining-security-with-ease/","RawContent":null},{"Title":"HTTPS Everywhere Update","PublishedOn":"2023-09-19T15:52:06+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Mistakes were made\nWhen we first published the plan for the effort of HTTPS everywhere, we wanted to get developer community feedback on the various HTTP and HTTPS scenarios that we don&#8217;t have...","Href":"https://devblogs.microsoft.com/nuget/https-everywhere-update/","RawContent":null},{"Title":"Announcing NuGet 6.7 – Keeping You Secure","PublishedOn":"2023-08-10T15:27:01+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"NuGet 6.7 is included in Visual Studio 2022 and .NET 7.0 out of the box. You can also download NuGet 6.7 for Windows, macOS, and Linux as a standalone executable.\nSecurity is a chain; it&#8217;s only...","Href":"https://devblogs.microsoft.com/nuget/announcing-nuget-6-7-keeping-you-secure/","RawContent":null},{"Title":"The Microsoft author-signing certificate will be updated as soon as August 14th, 2023","PublishedOn":"2023-08-03T18:38:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Action required: If you validate that packages are author-signed by Microsoft using a NuGet client policy or the NuGet.exe verify command, please follow these steps by August 14th, 2023 to avoid...","Href":"https://devblogs.microsoft.com/nuget/microsoft-author-signing-certificate-update-2023/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"38513207444","Type":"PullRequestEvent","CreatedAt":"2024-05-19T20:30:10","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9951","RelatedDescription":"Opened pull request \"[Hotfix] Allow unrelated entity changes to be committed in PackageDeprecationService\" (#9951) at NuGet/NuGetGallery","RelatedBody":"Mitigation for https://github.com/NuGet/NuGetGallery/issues/9950 in the package deprecation path.\r\n\r\n**Hotfix justification:** deprecation API calls that would otherwise no-op sometimes return HTTP 500. Since this is a private preview API, there is no data correctness impact, and non-no-op deprecations work just fine, we could choose to not do a hotfix. I would just to prefer to get this fixed ASAP to eliminate a source of HTTP 500s.\r\n\r\nCurrently, if a deprecation call no-ops all package version and the node handling the deprecation has a different download count cached for a package version than is what in the DB, an HTTP 500 occurs.\r\n\r\nThis is because the package entity has changes (per the issue referenced above) but the deprecation service does not detect any changes on the entity. `IPackageUpdateService.UpdatePackagesAsync` is called with an empty list and throws an argument exception which is causing the HTTP 500. We have seen this about 300 times on the deprecation API in the past week, all of which are first party packages or are related to https://github.com/DefinitelyTyped/NugetAutomation/issues/21.\r\n\r\nThis was not detected locally because storage-based statistics are not used. This was not detected on DEV or INT because the package used for testing had the same download count in DB and in the downloads.v1.json file therefore the `DownloadCountObjectMaterializedInterceptor` did not introduce any entity changes."},{"Id":"38512407110","Type":"IssuesEvent","CreatedAt":"2024-05-19T18:58:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9950","RelatedDescription":"Opened issue \"[NuGet.org Bug]: DownloadCountObjectMaterializedInterceptor modifies packages in EF context\" (#9950) at NuGet/NuGetGallery","RelatedBody":"### Impact\n\nIt bothers me. A fix would be nice\n\n### Describe the bug\n\nWhen we read download counts from a downloads.v1.json file in Gallery and therefore have `DownloadCountObjectMaterializedInterceptor` enabled, potentially unexpected entity changes can be staged in the EF context by the interceptor.\r\n\r\nhttps://github.com/NuGet/NuGetGallery/blob/c92f5fdf7b53392d94d967e5c53d842c79afa3e6/src/NuGetGallery/Services/DownloadCountObjectMaterializedInterceptor.cs#L46\r\n\r\nThis line of code modifies the `DownloadCount` property on the package meaning and `SaveChanges` later in the same EF context scope will update this property along with other changes.\r\n\r\nIt's unclear whether leaking downloads.v1.json values into the DB slowly, and organically along with other package entity changes was intended. But what is does do is case EF context to return `HasChanges = true` in more cases than the server layer code may expect making no-ops not work properly.\n\n### Repro Steps\n\n1. Enable downloads.v1.json integration in gallery (via `Gallery.AzureStorage.Statistics.ConnectionString`)\r\n2. Make the DB value different from the downloads.v1.json value for a package\r\n3. Deprecate that package\r\n4. Deprecate that package again with the same settings (should no-op)\r\n\r\nActual behavior: HTTP 500 due to no packages being passed into this line:\r\nhttps://github.com/NuGet/NuGetGallery/blob/c92f5fdf7b53392d94d967e5c53d842c79afa3e6/src/NuGetGallery/Services/PackageDeprecationService.cs#L161\r\n\r\nI think the most ideal case would be no modifying the entity at all with the value from the downloads.v1.json and just using it for view purposes. Unfortunately, we have combined our view model and our entity model in many cases meaning it's hard to use a different download count in our app without modifying the entity.\n\n### Expected Behavior\n\nPackage deprecation should no-op instead of having an HTTP 500.\n\n### Screenshots\n\n_No response_\n\n### Additional Context and logs\n\n_No response_"},{"Id":"38490857291","Type":"PullRequestEvent","CreatedAt":"2024-05-18T01:25:01","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/9949","RelatedDescription":"Opened pull request \"UI fixes for Dark theme\" (#9949) at NuGet/NuGetGallery","RelatedBody":"This PR fixes some UI errors found while testing in dev deployment\r\n\r\nSpec: https://github.com/NuGet/Engineering/pull/5209\r\nMain Issue: https://github.com/NuGet/NuGetGallery/issues/8773"},{"Id":"38490836090","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:06","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9865","RelatedDescription":"Closed issue \"[UI] Add new theme to Account pages\" (#9865) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"38490835400","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:03","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9896","RelatedDescription":"Closed issue \"Add Telemetry to \"Theme\" select in Account Settings\" (#9896) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"38490835032","Type":"IssuesEvent","CreatedAt":"2024-05-18T01:23:00","Actor":"martinrrm","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9880","RelatedDescription":"Closed issue \"[UI] Add theme to Package view page\" (#9880) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"38378683465","Type":"IssuesEvent","CreatedAt":"2024-05-14T22:40:46","Actor":"erdembayar","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/9937","RelatedDescription":"Closed issue \"Downloads slow from Windows but not WSL\" (#9937) at NuGet/NuGetGallery","RelatedBody":"### NuGet Product Used\n\nOther/NA\n\n### Product Version\n\nwebsite\n\n### Worked before?\n\nat least 4 days ago\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI'm not sure how this is even possible, and it's the strangest thing I've seen in many years.  I've been chasing this for days now through every channel I can.  Starting about 3 days ago, I (and several others who have reported this issue on the Visual Studio support forums) started having issues updating assemblies using Visual Studio 2022.  dotnet and nuget from the command line are also failing.  Trying to download nupkg files manually succeeds but is very slow.  When I run \"curl https://api.nuget.org/v3-flatcontainer/sixlabors.imagesharp/2.1.8/sixlabors.imagesharp.2.1.8.nupkg -o junk\" on Windows from Command Prompt or Powershell the download goes very slow or hangs altogether.  However, under WSL *on the same machine*, it works and it's instant.  dotnet and nuget also work under WSL.  When I run the exact same command from WSL *on the same machine*, it downloads instantly (it's something like 100x faster).  The issue occurs with all the nupkg files I've tried.  I've reproduced this on three separate windows machines.  Two are Windows 11 and have the latest patches.  One is Windows 10 and hasn't been turned on for months until today to test this issue.  Other websites appear to be fine.  Other download methods are also slow (tried multiple browsers as well).  Disabling the firewall and/or Microsoft Defender has no effect.  See attached verbose logs: there appears to be some kind of incompatibility with the encryption currently in use on nuget.org and Windows schannel.dll (even older versions of schannel.dll--so unless you intended to break compatibility with Windows 10 machines, this is your issue, not the Windows team).\r\n\r\nDid nuget.org change something with its TLS configuration in the past week or so that could be causing this?  It's completely halting work for a *lot* of people.\n\n### Verbose Logs\n\n```shell\n>curl https://api.nuget.org/v3-flatcontainer/sixlabors.imagesharp/2.1.8/sixlabors.imagesharp.2.1.8.nupkg -o junk -A curl/1.0 -v\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 13.107.246.66:443...\r\n* Connected to api.nuget.org (13.107.246.66) port 443\r\n* schannel: disabled automatic use of client certificate\r\n* ALPN: curl offers http/1.1\r\n* ALPN: server accepted http/1.1\r\n* using HTTP/1.1\r\n> GET /v3-flatcontainer/sixlabors.imagesharp/2.1.8/sixlabors.imagesharp.2.1.8.nupkg HTTP/1.1\r\n> Host: api.nuget.org\r\n> User-Agent: curl/1.0\r\n> Accept: */*\r\n>\r\n* schannel: remote party requests renegotiation\r\n* schannel: renegotiating SSL/TLS connection\r\n* schannel: SSL/TLS connection renegotiated\r\n* schannel: remote party requests renegotiation\r\n* schannel: renegotiating SSL/TLS connection\r\n* schannel: SSL/TLS connection renegotiated\r\n* schannel: failed to decrypt data, need more data\r\n< HTTP/1.1 200 OK\r\n< Date: Fri, 26 Apr 2024 01:23:36 GMT\r\n< Content-Type: application/octet-stream\r\n< Content-Length: 4522752\r\n< Connection: keep-alive\r\n< Cache-Control: public, max-age=86400\r\n< Last-Modified: Thu, 11 Apr 2024 06:31:50 GMT\r\n< ETag: 0x8DC59F1121A2751\r\n< x-ms-request-id: 18d4f9e7-301e-0036-50bc-963087000000\r\n< x-ms-version: 2009-09-19\r\n< x-ms-meta-da7b2905_0f3c_4262_921c_b1593d1336f1_ESRP_RequestId: dc4ac97b-1b2e-46cf-abfd-c25a9e3d9165\r\n< x-ms-meta-SHA512: uAybk5N8IxYppIRr07gglVh4Un1dCW4KhxQdrpWDBONRVFZTNAFpwTkh5NTVxyKPC4Akvm6jriyzGXTUu6NQqA==\r\n< x-ms-lease-status: unlocked\r\n< x-ms-blob-type: BlockBlob\r\n< Access-Control-Expose-Headers: x-ms-request-id,Server,x-ms-version,x-ms-meta-da7b2905_0f3c_4262_921c_b1593d1336f1_ESRP_RequestId,x-ms-meta-SHA512,Content-Type,Cache-Control,Last-Modified,ETag,x-ms-lease-status,x-ms-blob-type,Content-Length,Date,Transfer-Encoding\r\n< Access-Control-Allow-Origin: *\r\n< x-azure-ref: 20240426T012336Z-15c97c8cdddz4g8pk6sd5xqgpc00000008cg00000000n7q1\r\n< x-fd-int-roxy-purgeid: 43765298\r\n< X-Cache: TCP_HIT\r\n< X-Cache-Info: L1_T2\r\n< Strict-Transport-Security: max-age=31536000; includeSubDomains\r\n< x-content-type-options: nosniff\r\n< Accept-Ranges: bytes\r\n<\r\n{ [15217 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [49152 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n  1 4416k    1 64369    0     0  77397      0  0:00:58 --:--:--  0:00:58 77459* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n  3 4416k    3  158k    0     0  94159      0  0:00:48  0:00:01  0:00:47 94193* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [32768 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [49152 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [32768 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [81920 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [32768 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [98304 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [32768 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [65536 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n{ [65536 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n{ [16384 bytes data]\r\n* schannel: failed to decrypt data, need more data\r\n* schannel: failed to decrypt data, need more data\r\n 31 4416k   31 1374k    0     0   409k      0  0:00:10  0:00:03  0:00:07  409k* schannel: failed to decrypt data, need more data\r\n{ [81920 bytes data]\r\n* schannel: failed to decrypt data, need more data\n```\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"38502709999","Type":"IssuesEvent","CreatedAt":"2024-05-19T00:05:29","Actor":"gilmorem560","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13450","RelatedDescription":"Opened issue \"NU1202 Package Framework Compatiblity Error Emitted on Precisely Compatible Framework (Windows Only?)\" (#13450) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, Visual Studio Package Management UI\n\n### Product Version\n\ndotnet CLI 8.0.204 (Windows), Nuget Package Manager 6.9.2\n\n### Worked before?\n\ndotnet CLI 8.0.204 (macOS)\n\n### Impact\n\nIt's more difficult to complete my work\n\n### Repro Steps & Context\n\n```\r\ndotnet new classlib -f net6.0\r\ndotnet add package Microsoft.EntityFrameworkCore -v 6.0.7\r\n```\r\n\r\nFound today trying to load a project I'm working on using .NET 6 that a package which here clearly states it is compatible with net6.0 (and we have indeed had in a few net6.0 projects for a long time) is now not compatible with net6.0: https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/6.0.7#supportedframeworks-body-tab\r\n\r\nFor the record, the latest 6.0.x version does restore, as do the 6.0.6 and 6.0.8 versions right around this one. Additionally, doing this very same, with the same version of the dotnet CLI tool actually does work on macOS. Thus far this appears to strictly be happening with package version 6.0.7 of this package on Windows.\r\n\r\nI don't have a means at present to contact the package authors but I wanted to get this visible to folks here as everything on the published package that I can see indicates net6.0 should be very much supported.\r\n\r\nFor the record both the link above and the NuGet Package Manager in Visual Studio display net6.0 as the compatible framework for this package:\r\n\r\n![image](https://github.com/NuGet/Home/assets/36053668/e71cadc5-87ee-4e6e-93be-9591be8ad470)\r\n\r\nUpgrading package is fine in my personal use case, but still this seems pretty contradictory and may indicate some deeper issue. I want to make sure I document this in case anyone else runs into this sort of problem where the package add/restore operation directly contradicts the package metadata on Windows.\n\n### Verbose Logs\n\n```shell\nerror: NU1202: Package Microsoft.EntityFrameworkCore 6.0.7 is not compatible with net6.0 (.NETCoreApp,Version=v6.0). Package Microsoft.EntityFrameworkCore 6.0.7 does not support any target frameworks.\n```\n"},{"Id":"38501675129","Type":"IssuesEvent","CreatedAt":"2024-05-18T21:26:01","Actor":"Wonderwhothen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13190","RelatedDescription":"Closed issue \"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd\" (#13190) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/blob/dev/src%2FNuGet.Core%2FNuGet.Packaging%2Fcompiler%2Fresources%2Fnuspec.xsd"},{"Id":"38500224976","Type":"IssuesEvent","CreatedAt":"2024-05-18T18:32:41","Actor":"JustinPechstein","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/13427","RelatedDescription":"Reopened issue \"Reference not working after migrating to PackageReference\" (#13427) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\n.NET SDK Version 8.0.204\n\n### Worked before?\n\nUnknown\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nHello, \r\nyesterday I restructured my files and projects a bit and since I did this I have this new errormessage \" Must use PackageReference\".\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/dba9adc6-1c98-4250-bfbf-521c0c6b19f7)\r\n\r\nI quickly found out that I have to migrate the packages.config to PackageReferences to solve this problem. \r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/8cd20f39-b214-4543-950d-ec5c0c4d3b8c)\r\n\r\nSo I did the migration as shown (once with every transitive dependencies checked and once with only the Top-level dependencies).\r\n\r\nThis worked completely fine for all the projects, instead of \"Microsoft.Office.Interop.Excel\". After the migration the reference is bugged and the \"new\" behavior is hard to explain. In general the reference exists:\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/559c231d-0b98-4853-9de4-0089961d27b1)\r\n\r\nand I can use it in the using section without any problems:\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/e460708a-360f-4820-b69c-8c3a951d6279)\r\n\r\nBut, without doing anything I have tons of errors because of whatever reason...\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/4fcc65cd-a5b5-44be-be85-743e84c8f604)\r\n\r\nThere are several datatypes that can be resolved but the properties for \"Rows\" and \"Cells\" are not being found.\r\n\r\n![image](https://github.com/NuGet/Home/assets/139776864/006ede65-d197-460f-8f52-950207d6957f)\r\n\r\nI am very curious about this, did I miss something, did the migration miss something? Or might this be a problem with that package?\r\n\r\nI am thankful for every helpful response because I cannot carry on right now...\n\n### Verbose Logs\n\n_No response_"},{"Id":"38490559325","Type":"IssuesEvent","CreatedAt":"2024-05-18T00:52:29","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13449","RelatedDescription":"Opened issue \"NuGet nomination code causes unnecessary allocations\" (#13449) at NuGet/Home","RelatedBody":"Check `VsSolutionRestoreService` and `VSNominationUtilities` for inappropriate usage of LINQ, particularly examples like:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/f702fc3dc44e17a0666dea01e9aa18c5c1175b27/src/NuGet.Clients/NuGet.SolutionRestoreManager/VsSolutionRestoreService.cs#L295-L298\r\n\r\nCollections should be created with the correct initial capacity to avoid risk of resizing.\r\n\r\nanonymous lamba functions cause allocations too, which can be avoided with for loops."},{"Id":"38485066247","Type":"IssuesEvent","CreatedAt":"2024-05-17T19:01:27","Actor":"Erarndt","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13448","RelatedDescription":"Opened issue \"TaskResultCache incorrectly shares the same lock object for all the keys.\" (#13448) at NuGet/Home","RelatedBody":"There is a *very* subtle bug in `TaskResultCache` that is causing the same lock object to be used rather than a different one per key. Here's the offending code:\r\n\r\n`object lockObject = _perTaskLock.GetOrAdd(key, static () => new object());`\r\n\r\nThis erroneously caches the *delegate* that is used. The intent was to pass in a delegate that will create a new object and cache/lock on that."},{"Id":"38481714876","Type":"IssuesEvent","CreatedAt":"2024-05-17T16:46:47","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13413","RelatedDescription":"Closed issue \"IVsNuGetProjectUpdateEvents.ProjectUpdateStarted or ProjectUpdateFinished should only provide a list of files that will get changed.\" (#13413) at NuGet/Home","RelatedBody":"https://learn.microsoft.com/en-us/nuget/visual-studio-extensibility/nuget-api-in-visual-studio#ivsnugetprojectupdateevents-interface\r\n\r\nIVsNuGetProjectUpdateEvents.ProjectUpdateStarted or ProjectUpdateFinished should provide a list of files that will/got changed.\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/2027014"},{"Id":"38468443762","Type":"IssuesEvent","CreatedAt":"2024-05-17T09:45:03","Actor":"SueSu01","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13447","RelatedDescription":"Opened issue \"[Bug Bash] The layout of ‘Options->NuGet Package Manager->General’ window messes up after clicking the button ‘Clear All NuGet Storage’ when the settings of ‘Scale’ are different in multiple screens\" (#13447) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\nVisual Studio Package Management UI\n\n### Product Version\n\nDev\\6.11.0.53\n\n### Worked before?\n\nIt is a regression since it doesn’t repro on D16.11\\34601.136 but reproes on D17.9\\34601.282. \n\n### Impact\n\nIt bothers me. A fix would be nice\n\n### Repro Steps & Context\n\n**Repro Steps:**  \r\n\r\n1. Create a C# Console App (.NET Framework) project in VS.   \r\n2. Right-click the project in Solution Explorer and select \"Manage NuGet Packages…\" menu item to open PM UI.   \r\n3. Click the settings button (gear button) in PM UI. \r\n4. Click the ‘NuGet Package Manager->General’ in the opened ‘Options’ window. \r\n5. Click the button ‘Clear All NuGet Storage’. \r\n6. Obverse the layout of ‘NuGet Package Manager->General' window. \r\n\r\n**Expected:**      \r\nThe layout of ‘Options->NuGet Package Manager->General’ window would not change after clicking the button ‘Clear All NuGet Storage’. \r\n\r\n**Actual:** \r\nThe layout of ‘Options->NuGet Package Manager->General’ window messes up after clicking the button ‘Clear All NuGet Storage’ as below: \r\n![image](https://github.com/NuGet/Home/assets/149561645/bdda5d0a-41d2-460f-82e5-a20b061354b8)\r\n\r\n**Notes:**   \r\n1. The repro rate is 100% when the settings of ‘Scale’ are different in multiple screens (for example: one screen is 100% and the second screen is 125% as below). \r\n![image](https://github.com/NuGet/Home/assets/149561645/9ff79aa2-2fc8-4441-a929-839923faaa87)\r\n2. If you didn’t repro it on one screen, it will repro after dragging the VM to the second screen and click the button ‘Clear All NuGet Storage’ again. (But the precondition is you have different ‘Scale’ settings in multiple screens.)\n\n### Verbose Logs\n\n_No response_"},{"Id":"38455235762","Type":"IssuesEvent","CreatedAt":"2024-05-16T22:42:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/11342","RelatedDescription":"Closed issue \"NuGet.Localization package includes unncessary resource assemblies\" (#11342) at NuGet/Home","RelatedBody":"### NuGet Product(s) Affected\n\ndotnet.exe\n\n### Current Behavior\n\nThe NuGet.Localization assembly is extracted as-is by the .NET SDK as part of creating it's layout. It looks like the package contains resources for the `NuGet.VisualStudio.Contracts.dll` but not the primary dll itself. Here's what I get if I list the contents of the .NET 6 SDK:\r\n\r\n```\r\n> ls -r d:\\temp\\dotnet6\\sdk *NuGet.VisualStudio.Contracts*.dll | Select FullName\r\n\r\nFullName\r\n--------\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\cs\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\de\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\es\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\fr\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\it\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\ja\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\ko\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\pl\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\pt-BR\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\ru\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\tr\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\zh-Hans\\NuGet.VisualStudio.Contracts.resources.dll\r\nD:\\temp\\dotnet6\\sdk\\6.0.100\\zh-Hant\\NuGet.VisualStudio.Contracts.resources.dll\r\n```\r\n\n\n### Desired Behavior\n\nI'm not certain, but it looked like the localization package is only consumed by the SDK. In which case the assembly could be dropped from the package, helping reduce the total size of the installer. Alternatively, we'd have consider doing something in the SDK to trim the assembly as part of consuming this package.\n\n### Additional Context\n\n_No response_"},{"Id":"38450501837","Type":"IssuesEvent","CreatedAt":"2024-05-16T19:18:31","Actor":"danmoseley","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13446","RelatedDescription":"Opened issue \"tweak wording of NU1603\" (#13446) at NuGet/Home","RelatedBody":"### NuGet Product(s) Involved\n\nOther/NA\n\n### The Elevator Pitch\n\nI got a bunch of these and was a little confused\r\n```\r\n[restore] .../TestProject.IntegrationServiceA.csproj : error NU1603: Warning As Error: TestProject.IntegrationServiceA depends on Aspire.StackExchange.Redis (>= 8.0.0) but Aspire.StackExchange.Redis 8.0.0 was not found. An approximate best match of Aspire.StackExchange.Redis 8.0.1 was resolved. [...]\r\n```\r\nHow i read it -- \"any version 8.0.0 or later is acceptable, but we had to fall back and use 8.0.1\" \r\nHow it's intended to be read -- \"any version 8.0.0 or later is acceptable, with 8.0.0 preferred. We could not find 8.0.0 so we used the next closest version we found 8.0.1\"\r\n\r\nMaybe the message would be clearer like\r\n```\r\nTestProject.IntegrationServiceA depends on Aspire.StackExchange.Redis (>= 8.0.0). Aspire.StackExchange.Redis 8.0.0 was preferred but not found. The next nearest available match Aspire.StackExchange.Redis 8.0.1 was resolved.\r\n```\r\n\n\n### Additional Context and Details\n\n_No response_"},{"Id":"38449214789","Type":"IssuesEvent","CreatedAt":"2024-05-16T18:30:36","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13445","RelatedDescription":"Opened issue \"allocation: nuget.protocol.dll!NuGet.Protocol.HttpCacheUtility+<CreateCacheFileAsync>d__.MoveNext|nuget.protocol.dll!NuGet.Protocol.PackageDependencyGroupConverter.ReadJson\" (#13445) at NuGet/Home","RelatedBody":"Internal issue: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1864821\r\nCode in: \r\n\r\nSome ideas: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Protocol/Converters/PackageDependencyGroupConverter.cs\r\n\r\n* Avoid using LoadJson, iterate by token.\r\n* Intern the dependency groups /deduplicate\r\n* Ensure GetShortFolderName is not computed continously. The framework parsing tends to be cached, but another ideas to cache that as well."},{"Id":"38448463940","Type":"IssuesEvent","CreatedAt":"2024-05-16T18:04:21","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13442","RelatedDescription":"Closed issue \"Calls to CompareTo and Equals should not allocate\" (#13442) at NuGet/Home","RelatedBody":"In the `FrameworkDependency`, the `CompareTo` and `Equals` calls end up boxing the `FrameworkDependencyFlags` property. It's not a huge number of allocations (~2MB for OrchardCore), but they're easy to avoid\r\n\r\n![image](https://github.com/NuGet/Home/assets/60519722/902e5724-a9b8-4b85-ab4d-3f041f8ec1b5)"},{"Id":"38421371714","Type":"IssuesEvent","CreatedAt":"2024-05-16T03:36:03","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/13443","RelatedDescription":"Opened issue \"VS project nominations should use generic data structure\" (#13443) at NuGet/Home","RelatedBody":"For project systems in Visual Studio that support both CPS and PackageReference capabilities (so in effect just the SDK style .NET projects) use a NuGet data flow where the project system pushes project item and properties to NuGet via an API called NominateProjectAsync.\r\n\r\nThis API has a data structure where the interface has properties `ProjectReferences`, `PackageReferences`, and so on. So, every time NuGet wants to add a new MSBuild item, we need to create a new iterface for the new item type, publish the package, then edit dotnet/project-system to use the new package and set the new property for the item.\r\n\r\nProject properties and item metadata already use a generic property bag, which is more or less equivalent to `IReadOnlyDictionary<string, string>` (but is different for COM compatibility). Items should also use a generic data structure, so that future additions to which MSBuild items NuGet reads no longer requires project system to update package versions to implement the change."},{"Id":"38413696474","Type":"IssuesEvent","CreatedAt":"2024-05-15T20:26:15","Actor":"SHOOSH12SR","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/13440","RelatedDescription":"Closed issue \"Project that does not use external NuGet packages will not run because of missing packages\" (#13440) at NuGet/Home","RelatedBody":"### NuGet Product Used\n\ndotnet.exe, NuGet.exe, Visual Studio Package Management UI\n\n### Product Version\n\ndotnet Version 8.0.205, could not find NuGet version or msbuild version\n\n### Worked before?\n\nsame dotnet version\n\n### Impact\n\nI'm unable to use this version\n\n### Repro Steps & Context\n\nI was working on a Blazor wasm project but then transitioned to a console project that uses a NuGet package (Raylibcs installed through VS2022 NuGet menu). when I went to work on the Blazor project it wouldn't run because it couldn't find the Raylib package.\r\nall dotnet projects were working fine before installing Raylib, now they don't run because they can't find the dependency.\n\n### Verbose Logs\n\n```shell\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Server\\calc.Server.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist.\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Server\\calc.Server.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist.\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Server\\calc.Server.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist.\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\nC:\\Users\\ssrou\\source\\repos\\calc\\calc\\Client\\calc.Client.csproj : error NU1301: The local source 'C:\\Users\\ssrou\\AppData\\Roaming\\NuGet\\raylibcs' doesn't exist. [C:\\Users\\ssrou\\source\\repos\\ca\r\nlc\\calc\\Server\\calc.Server.csproj]\r\n\r\nThe build failed. Fix the build errors and run again.\n```\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"38239602212","Type":"IssuesEvent","CreatedAt":"2024-05-09T16:12:01","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Closed issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"},{"Id":"36557473750","Type":"IssuesEvent","CreatedAt":"2024-03-14T16:05:16","Actor":"erdembayar","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/72","RelatedDescription":"Opened issue \"The NuGet.org repository signing certificate will be updated as soon as April 8th, 2024\" (#72) at NuGet/Announcements","RelatedBody":"The current NuGet.org repository signing certificate will be updated as soon as April 8th, 2024. If you validate that packages are repository signed by NuGet.org using a [NuGet client policy](https://docs.microsoft.com/nuget/consume-packages/installing-signed-packages), the [`NuGet.exe verify`](https://docs.microsoft.com/nuget/reference/cli-reference/cli-ref-verify) command, or the [`dotnet nuget verify`](https://docs.microsoft.com/dotnet/core/tools/dotnet-nuget-verify) command, you will need to take steps by April 8th, 2024 to avoid disruptions when installing packages from NuGet.org that are signed with the new certificate. \r\n\r\nIf you are unsure if you will be impacted or want to see instructions to allow the new certificate, please see our blogpost on the matter: https://devblogs.microsoft.com/nuget/the-nuget-org-repository-signing-certificate-will-be-updated-as-soon-as-april-8th-2024/"}],"ResultType":"GitHubEvent"}},"RunOn":"2024-05-20T03:30:17.9522338Z","RunDurationInMilliseconds":1066}