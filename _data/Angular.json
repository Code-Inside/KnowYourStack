{"Data":{"Angular-Issues":{"Issues":[{"Id":"1967071943","IsPullRequest":false,"CreatedAt":"2023-10-29T17:19:06","Actor":"kukjevov","Number":"52443","RawContent":null,"Title":"Feature(language-service): new control flow syntax colouring","State":"closed","Body":"### Which @angular/* package(s) are relevant/related to the feature request?\n\nlanguage-service\n\n### Description\n\nIt would be awesome to have \"colouring\" of new control flow syntax like when you have regular code in typescript.\r\n\r\nRight now it looks like plain text, and it kinda melts together.\r\n\r\nGreat work anyway :)\n\n### Proposed solution\n\ncolouring of \"keywords\" (@if, @for, @switch, @defer)\r\ncolouring of \"variables\"\r\ncolouring of method invocations\r\n\r\nuse colouring depending of used theme in vscode :), just like in typescript.\n\n### Alternatives considered\n\nor any colouring that would at least make some visual comfort for developer.","Url":"https://github.com/angular/angular/issues/52443","RelatedDescription":"Closed issue \"Feature(language-service): new control flow syntax colouring\" (#52443)"},{"Id":"1966947142","IsPullRequest":true,"CreatedAt":"2023-10-29T11:17:39","Actor":"Mayureshd-18","Number":"52442","RawContent":null,"Title":"docs: Rename Twitter to X (formerly Twitter)","State":"open","Body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application / infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","Url":"https://github.com/angular/angular/pull/52442","RelatedDescription":"Open PR \"docs: Rename Twitter to X (formerly Twitter)\" (#52442)"},{"Id":"1966938563","IsPullRequest":true,"CreatedAt":"2023-10-29T10:50:51","Actor":"JeanMeche","Number":"52441","RawContent":null,"Title":"refactor(animations): use existing helper methods.","State":"open","Body":"Saving a few bytes...\r\n\r\nThe changes are split over several commits in case we want to drop one. ","Url":"https://github.com/angular/angular/pull/52441","RelatedDescription":"Open PR \"refactor(animations): use existing helper methods.\" (#52441)"},{"Id":"1966936722","IsPullRequest":true,"CreatedAt":"2023-10-29T10:44:38","Actor":"JeanMeche","Number":"52440","RawContent":null,"Title":"refactor(platform-browser): remove the depency on `window` for the `AngularProfiler`","State":"open","Body":"`performance` and `console` are both available on NodeJS, we can replace `window` with `globalThis`.\r\n","Url":"https://github.com/angular/angular/pull/52440","RelatedDescription":"Open PR \"refactor(platform-browser): remove the depency on `window` for the `AngularProfiler`\" (#52440)"},{"Id":"1966789423","IsPullRequest":true,"CreatedAt":"2023-10-29T00:50:29","Actor":"JeanMeche","Number":"52439","RawContent":null,"Title":"refactor(platform-browser): remove non necessary factories","State":"open","Body":"Let's keep the code a simple as necessary","Url":"https://github.com/angular/angular/pull/52439","RelatedDescription":"Open PR \"refactor(platform-browser): remove non necessary factories\" (#52439)"},{"Id":"1966779244","IsPullRequest":true,"CreatedAt":"2023-10-29T00:11:07","Actor":"JeanMeche","Number":"52438","RawContent":null,"Title":"refactor(http):  for a few bytes less","State":"open","Body":"Small refactor to save a few bytes in the http package. \r\n\r\n","Url":"https://github.com/angular/angular/pull/52438","RelatedDescription":"Open PR \"refactor(http):  for a few bytes less\" (#52438)"},{"Id":"1966764000","IsPullRequest":true,"CreatedAt":"2023-10-28T22:55:55","Actor":"JoostK","Number":"52437","RawContent":null,"Title":"fix(compiler-cli): various fixes to input transform type emitting","State":"open","Body":"**fix(compiler-cli): properly emit literal types in input coercion function arguments**\r\n\r\nThis commit fixes an issue where using literal types in the arguments of an input coercion\r\nfunction could result in emitting invalid output, due to an assumption that TypeScript makes\r\nwhen emitting literal types. Specifically, it takes the literal's text from its containing\r\nsource file, but this breaks when the literal type node has been transplanted into a\r\ndifferent source file. This issue has surfaced in the type-check code generator and is\r\nalready being addressed there, so this commit moves the relevant `TypeEmitter` class\r\nfrom the `typecheck` module to the `translator` module, such that it can be reused for\r\nemitting types in the type translator.\r\n\r\nFixes #51672\r\n\r\n---\r\n\r\n**fix(compiler-cli): use originally used module specifier for transform functions**\r\n\r\nPrior to this change, the transform function would be referenced with a potentially\r\nrelative import into an external declaration file. Such imports are not portable\r\nand should not be created in this context. This commit addresses the issue by threading\r\nthough the originally used module specifier by means of the `Reference` type.\r\n\r\nFixes #52324","Url":"https://github.com/angular/angular/pull/52437","RelatedDescription":"Open PR \"fix(compiler-cli): various fixes to input transform type emitting\" (#52437)"},{"Id":"1966683213","IsPullRequest":true,"CreatedAt":"2023-10-28T17:47:08","Actor":"AleksanderBodurri","Number":"52436","RawContent":null,"Title":"getInjectorProviders Fixes","State":"open","Body":"See individual commits","Url":"https://github.com/angular/angular/pull/52436","RelatedDescription":"Open PR \"getInjectorProviders Fixes\" (#52436)"},{"Id":"1966559462","IsPullRequest":true,"CreatedAt":"2023-10-28T11:30:34","Actor":"swami-sanapathi","Number":"52435","RawContent":null,"Title":"docs: remove documentation for `mutate` function","State":"open","Body":"This PR removes the documentation of `mutate` function, since it is removed from the signals public API.","Url":"https://github.com/angular/angular/pull/52435","RelatedDescription":"Open PR \"docs: remove documentation for `mutate` function\" (#52435)"},{"Id":"1966554943","IsPullRequest":true,"CreatedAt":"2023-10-28T11:20:04","Actor":"swami-sanapathi","Number":"52434","RawContent":null,"Title":"fix(docs): remove documentation for `mutate` function","State":"closed","Body":"This PR removes the documentation of `mutate` function, since it removed from the signals public API.","Url":"https://github.com/angular/angular/pull/52434","RelatedDescription":"Closed or merged PR \"fix(docs): remove documentation for `mutate` function\" (#52434)"},{"Id":"1966492591","IsPullRequest":true,"CreatedAt":"2023-10-28T08:03:14","Actor":"crisbeto","Number":"52433","RawContent":null,"Title":"fix(compiler): allow decimals in defer block time values","State":"open","Body":"Fixes that our regex for parsing time values in defer blocks didn't allow for decimals. This isn't relevant for times in milliseconds, but it can be convenient to write something like `on timer(1.5s)`.","Url":"https://github.com/angular/angular/pull/52433","RelatedDescription":"Open PR \"fix(compiler): allow decimals in defer block time values\" (#52433)"},{"Id":"1966346690","IsPullRequest":true,"CreatedAt":"2023-10-28T01:17:47","Actor":"twerske","Number":"52432","RawContent":null,"Title":"docs: make banner persist until 11/8","State":"open","Body":"","Url":"https://github.com/angular/angular/pull/52432","RelatedDescription":"Open PR \"docs: make banner persist until 11/8\" (#52432)"},{"Id":"1965851707","IsPullRequest":true,"CreatedAt":"2023-10-27T23:16:52","Actor":"cexbrayat","Number":"52423","RawContent":null,"Title":"fix(core): handle trackBy and aliased index in control flow migration","State":"closed","Body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application / infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrently, the migration always use `$index` in the migrated trackBy function, whereas this variable might be aliased. The compiler then errors with:\r\n\r\n```\r\nerror TS2339: Property '$index' does not exist on type 'UsersComponent'.\r\n\r\n110 @for (user of users; track byId($index, user); let i = $index) {\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nThis commit updates the migration to use the aliased index if there is one.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","Url":"https://github.com/angular/angular/pull/52423","RelatedDescription":"Closed or merged PR \"fix(core): handle trackBy and aliased index in control flow migration\" (#52423)"},{"Id":"1965651174","IsPullRequest":true,"CreatedAt":"2023-10-27T23:06:25","Actor":"JeanMeche","Number":"52418","RawContent":null,"Title":"refactor(localize): mark `TargetMessage` and `MessageId` as public.","State":"closed","Body":"Both entries are exported in the `index.ts`\r\n\r\n","Url":"https://github.com/angular/angular/pull/52418","RelatedDescription":"Closed or merged PR \"refactor(localize): mark `TargetMessage` and `MessageId` as public.\" (#52418)"},{"Id":"1966204708","IsPullRequest":true,"CreatedAt":"2023-10-27T21:18:41","Actor":"atscott","Number":"52431","RawContent":null,"Title":"docs(core): Deprecate `ChangeDetectorRef.checkNoChanges`","State":"open","Body":"The `checkNoChanges` method does not belong in the API of production interface. `checkNoChanges` is limited to testing and should not be used in any application code. Test code should use `ComponentFixture` instead of `ChangeDetectorRef`. Additionally, it is not desirable to have the `checkNoChanges` API available in a context where `detectChanges` is not run first.\r\n\r\nDEPRECATED: `ChangeDetectorRef.checkNoChanges` is deprecated.\r\n\r\nTest code should use `ComponentFixture` instead of `ChangeDetectorRef`. Application code should not call `ChangeDetectorRef.checkNoChanges` directly.\r\n","Url":"https://github.com/angular/angular/pull/52431","RelatedDescription":"Open PR \"docs(core): Deprecate `ChangeDetectorRef.checkNoChanges`\" (#52431)"},{"Id":"1966180843","IsPullRequest":true,"CreatedAt":"2023-10-27T20:54:42","Actor":"atscott","Number":"52430","RawContent":null,"Title":"refactor(core): improve type safety of getDeferBlocks API","State":"open","Body":"The getDeferBlocks accesses a member with an 'as any' cast. This change makes the code easier to follow with better language service support (go to definition, etc).\r\n","Url":"https://github.com/angular/angular/pull/52430","RelatedDescription":"Open PR \"refactor(core): improve type safety of getDeferBlocks API\" (#52430)"},{"Id":"1966080707","IsPullRequest":false,"CreatedAt":"2023-10-27T19:30:27","Actor":"atscott","Number":"52429","RawContent":null,"Title":"`afterRender` hook called multiple times when there are multiple root views in the application","State":"open","Body":"### Which @angular/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nThe `afterRender` hooks are called after each root view refreshes. This happens because `ApplicationRef.tick` calls `detectChanges` on each root view https://github.com/angular/angular/blob/bdd61c768a28b56c68634b99c036986499829f45/packages/core/src/application_ref.ts#L1057-L1059\r\nand the hooks are called after running change detection on any view https://github.com/angular/angular/blob/bdd61c768a28b56c68634b99c036986499829f45/packages/core/src/render3/instructions/change_detection.ts#L70-L80\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps://stackblitz.com/edit/stackblitz-starters-cnr3id\n\n### Please provide the exception or error you saw\n\n```true\n`afterRender` is called after each root view is refreshed. `ApplicationRef.tick` should only run the render hooks one time, after all root views are refreshed.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n_No response_\n\n### Anything else?\n\n_No response_","Url":"https://github.com/angular/angular/issues/52429","RelatedDescription":"Open issue \"`afterRender` hook called multiple times when there are multiple root views in the application\" (#52429)"},{"Id":"1966033932","IsPullRequest":true,"CreatedAt":"2023-10-27T19:30:20","Actor":"alxhub","Number":"52427","RawContent":null,"Title":"fix(core): replace assertion with more intentional error","State":"closed","Body":"Issue #50320 shows that in some cases, updating a signal that's a dependency of a template during change detection of that template can have several adverse effects. This can happen, for example, if the signal is set during the lifecycle hook of a directive within the same template that reads the signal.\r\n\r\nThis can cause a few things to happen:\r\n\r\n* Straightforwardly, it can cause `ExpressionChanged` errors.\r\n* Surprisingly, it can cause an assertion within the `ReactiveLViewConsumer` to fail.\r\n* Very surprisingly, it can cause change detection for an `OnPush` component to stop working.\r\n\r\nThe root cause of these later behaviors is subtle, and is ultimately a desync between the reactive graph and the view tree's notion of \"dirty\" for a given view. This will be fixed with further work planned for change detection to handle such updates directly. Until then, this commit improves the DX through two changes:\r\n\r\n1. The mechanism of \"committing\" `ReactiveLViewConsumer`s to a view is changed to use the `consumerOnSignalRead` hook from the reactive graph. This prevents the situation which required the assertion in the first place.\r\n\r\n2. A `console.warn` warning is added when a view is marked dirty via a signal while it's still executing.\r\n\r\nThe warning informs users that they're pushing data against the direction of change detection, risking `ExpressionChanged` or other issues. It's a warning and not an error because the check is overly broad and captures situations where the application would not actually break as a result, such as if a `computed` marked the template dirty but still returned the same value.\r\n","Url":"https://github.com/angular/angular/pull/52427","RelatedDescription":"Closed or merged PR \"fix(core): replace assertion with more intentional error\" (#52427)"},{"Id":"1966034573","IsPullRequest":false,"CreatedAt":"2023-10-27T18:57:19","Actor":"dminovski0","Number":"52428","RawContent":null,"Title":"HttpClient: when using 'Authorization': 'Basic user:password' header with responseType: 'text', it doesn't work","State":"closed","Body":"### Which @angular/* package(s) are the source of the bug?\r\n\r\ncommon\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nWhen I send a request to a website's HTML page with:\r\n```\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Authorization': 'Basic ' + btoa('username:password')\r\n  }),\r\n  withCredentials: true\r\n};\r\nthis.http.get(url, httpOptions).subscribe();\r\n```\r\n\r\nThe authorization works, but it returns an error:\r\n`error: SyntaxError: Unexpected token '<', \"<!DOCTYPE \"... is not valid JSON at JSON.parse`\r\n\r\nI need to get authorized on the website, and it doesn't return a JSON response. With the above code, the error needs to be caught with catchError(), and it can work.\r\n\r\nAdding responseType: 'text' to not catch the error shows another error:\r\n`401 (Unauthorized)`\r\nI can't get authorized.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nThe error is `401 (Unauthorized)`.\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular: 15.2.9\r\n... animations, cdk, common, compiler, compiler-cli, core, forms\r\n... language-service, material, material-moment-adapter\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1502.8\r\n@angular-devkit/build-angular   15.2.8\r\n@angular-devkit/core            15.2.8\r\n@angular-devkit/schematics      15.2.8\r\n@angular/cli                    15.2.8\r\n@schematics/angular             15.2.8\r\nrxjs                            6.6.7\r\ntypescript                      4.9.5\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","Url":"https://github.com/angular/angular/issues/52428","RelatedDescription":"Closed issue \"HttpClient: when using 'Authorization': 'Basic user:password' header with responseType: 'text', it doesn't work\" (#52428)"},{"Id":"1965977573","IsPullRequest":true,"CreatedAt":"2023-10-27T18:05:46","Actor":"angular-robot","Number":"52426","RawContent":null,"Title":"build: update dependency multimatch to v7","State":"open","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [multimatch](https://togithub.com/sindresorhus/multimatch) | devDependencies | major | [`^6.0.0` -> `^7.0.0`](https://renovatebot.com/diffs/npm/multimatch/6.0.0/7.0.0) |\n\n---\n\n### Release Notes\n\n<details>\n<summary>sindresorhus/multimatch (multimatch)</summary>\n\n### [`v7.0.0`](https://togithub.com/sindresorhus/multimatch/releases/tag/v7.0.0)\n\n[Compare Source](https://togithub.com/sindresorhus/multimatch/compare/v6.0.0...v7.0.0)\n\n##### Breaking\n\n-   Require Node.js 18  [`12d68b3`](https://togithub.com/sindresorhus/multimatch/commit/12d68b3)\n-   Expect exclusively forward slash as path separator. [Caused by.](https://togithub.com/isaacs/minimatch/blob/main/changelog.md#50)\n\n</details>\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - At any time (no schedule defined), Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n🔕 **Ignore**: Close this PR and you won't be reminded about this update again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular/pull/52426","RelatedDescription":"Open PR \"build: update dependency multimatch to v7\" (#52426)"},{"Id":"1965930778","IsPullRequest":true,"CreatedAt":"2023-10-27T17:35:32","Actor":"JeanMeche","Number":"52425","RawContent":null,"Title":"fix(http): allow to combine FetchBackend and  InMemory services in the providers ","State":"open","Body":"When using `withFetch`,  the `PRIMARY_HTTP_BACKEND` token is set. \r\n\r\nThe InMemory Backend services will also set that token. \r\n\r\nThis means that providers order will matter and the latest on the list will be the one instantiated.\r\n\r\n----\r\ncc @alan-agius4, this is related to [your comment](https://github.com/angular/angular/pull/52398#discussion_r1373620361) on #52398","Url":"https://github.com/angular/angular/pull/52425","RelatedDescription":"Open PR \"fix(http): allow to combine FetchBackend and  InMemory services in the providers \" (#52425)"},{"Id":"1965856132","IsPullRequest":false,"CreatedAt":"2023-10-27T16:40:28","Actor":"mihaiDumea","Number":"52424","RawContent":null,"Title":"HttpClient: Allow HttpInterceptors to modifiy the original HttpParams before converting them to strings","State":"open","Body":"### Which @angular/* package(s) are relevant/related to the feature request?\r\n\r\ncommon\r\n\r\n### Description\r\n\r\nIn `HttpParams`, defer conversion of `options.fromObject` to strings to allow interceptors to modifiy those while they have the original type/value.\r\n\r\n### Proposed solution\r\n\r\nMove conversion from `constructor` to `toString`.\r\n\r\n### Alternatives considered\r\n\r\nInstead of moving conversion to `toString`, another method may be defined to contain this conversion and invoked only once. Not sure, as `toString` may access them before this conversion.","Url":"https://github.com/angular/angular/issues/52424","RelatedDescription":"Open issue \"HttpClient: Allow HttpInterceptors to modifiy the original HttpParams before converting them to strings\" (#52424)"},{"Id":"1965812005","IsPullRequest":true,"CreatedAt":"2023-10-27T16:06:30","Actor":"angular-robot","Number":"52422","RawContent":null,"Title":"build: update cross-repo angular dependencies","State":"open","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [@angular/build-tooling](https://togithub.com/angular/dev-infra-private-build-tooling-builds) | devDependencies | digest | `8fa10a4` -> `10b294a` |\n| [@angular/ng-dev](https://togithub.com/angular/dev-infra-private-ng-dev-builds) | devDependencies | digest | `c773500` -> `4a060df` |\n| angular/dev-infra | action | digest | `1173ab9` -> `e3ce90d` |\n\n🔡 If you wish to disable git hash updates, add `\":disableDigestUpdates\"` to the extends array in your config.\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - At any time (no schedule defined), Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://togithub.com/angular/dev-infra) if that's undesired.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular/pull/52422","RelatedDescription":"Open PR \"build: update cross-repo angular dependencies\" (#52422)"},{"Id":"1965774750","IsPullRequest":false,"CreatedAt":"2023-10-27T15:40:42","Actor":"cexbrayat","Number":"52421","RawContent":null,"Title":"Control flow migration: comments and ngSwitchCase","State":"open","Body":"### Which @angular/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nThe following template:\r\n\r\n```html\r\n<div>\r\n  <ng-container [ngSwitch]=\"testOpts\">\r\n    <p *ngSwitchCase=\"1\">Option 1</p>\r\n    <!-- comment -->\r\n    <p *ngSwitchCase=\"2\">Option 2</p>\r\n  </ng-container>\r\n</div>\r\n```\r\n\r\nis migrated by the control flow migration (v17.0.0-rc.1) to:\r\n\r\n```html\r\n<div>\r\n@switch (testOpts) { \r\n   @case (1) { \r\n     <p>Option 1</p>\r\n   }\r\n   <!-- comment --> \r\n   @case (2) {\r\n     <p>Option 2</p> \r\n   }\r\n}\r\n</div>\r\n```\r\n\r\nwhich the compiler doesn't like:\r\n```\r\nNG5002: @switch block can only contain @case and @default blocks [plugin angular-compiler]\r\n```\r\n\r\nMaybe this should be handled by the compiler or maybe the migration should nest the comment into the case.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps://github.com/cexbrayat/angular/pull/new/repro/switch-comment\n\n### Please provide the exception or error you saw\n\n```true\nNG5002: @switch block can only contain @case and @default blocks [plugin angular-compiler]\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.0.0-rc.2\r\nNode: 18.18.2\r\nPackage Manager: npm 9.7.1\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.0-rc.1\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1700.0-rc.2\r\n@angular-devkit/build-angular   17.0.0-rc.2\r\n@angular-devkit/core            17.0.0-rc.2\r\n@angular-devkit/schematics      17.0.0-rc.2\r\n@angular/cli                    17.0.0-rc.2\r\n@schematics/angular             17.0.0-rc.2\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.1\n```\n\n\n### Anything else?\n\n_No response_","Url":"https://github.com/angular/angular/issues/52421","RelatedDescription":"Open issue \"Control flow migration: comments and ngSwitchCase\" (#52421)"},{"Id":"1965760435","IsPullRequest":true,"CreatedAt":"2023-10-27T15:31:09","Actor":"alxhub","Number":"52420","RawContent":null,"Title":"refactor(core): global epoch to optimize non-live signal reads","State":"open","Body":"This commit adds a global epoch to the reactive graph, which can optimize non-live reads.\r\n\r\nWhen a non-live read occurs, a computed must poll its dependencies to check if they've changed, and this operation is transitive and not cacheable. Since non-live computeds don't receive dirty notifications, they're forced to assume potential dirtiness on each and every read.\r\n\r\nUsing a global epoch, we can add an important optimization: if *no* signals have been set globally since the last time it polled its dependencies, then we *can* assume a clean state. This significantly improves performance of large unwatched graphs when repeatedly reading values.","Url":"https://github.com/angular/angular/pull/52420","RelatedDescription":"Open PR \"refactor(core): global epoch to optimize non-live signal reads\" (#52420)"},{"Id":"1965633910","IsPullRequest":true,"CreatedAt":"2023-10-27T14:18:36","Actor":"slimache","Number":"52417","RawContent":null,"Title":"feat(core): add `setFakeBaseSystemTime()` to public API","State":"open","Body":"Allows to specify a fake time in fakeAsync tests, without having to use Jasmine's \"Clock\" with a mockDate.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes / features)\r\n- [x] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application / infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nTo use a fake time in a fakeAsync test, we can call Jasmine's `clock().mockDate(myFakeDate)` inside the test. This is confusing for developers, because usually Jasmine's clock needs to be installed and uninstalled, but in this case calling `mockDate` is enough. \r\n\r\nIn this use case we are not really interested in Jasmine's clock, but only in the fact that [`mockDate` triggers Angular's internal `setFakeBaseSystemTime` method](https://github.com/angular/angular/blob/b37ba058040bfb43ae60174331e82c5f6bfc9783/packages/zone.js/lib/jasmine/jasmine.ts#L138-L148) (see [this comment](https://github.com/angular/angular/pull/51286#issuecomment-1703083753) in a previous (closed) PR). This feels like a workaround. It would be clearer if we could directly access `setFakeBaseSystemTime`.\r\n\r\nAlternative considered: \r\n\r\nCreating a custom `setFakeBaseSystemTime` helper function that wraps the call to `mockDate`:\r\n```\r\nexport const setFakeBaseSystemTime = (fakeBaseTime: Date): void => {\r\n  ensureRunningInFakeAsyncZone();\r\n  jasmine.clock().mockDate(fakeBaseTime);\r\n};\r\n\r\nconst ensureRunningInFakeAsyncZone = () => {\r\n  const fakeAsyncTestZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\r\n  if (fakeAsyncTestZoneSpec === null || fakeAsyncTestZoneSpec === undefined) {\r\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\r\n  }\r\n};\r\n```\r\nIssues with this alternative: \r\n* To ensure that this helper is only called within a `fakeAsync` context, we use knowledge about Angular's internal structure that might change one day.\r\n* If developers check the implementation of the helper function, they are still confused about why the clock does not need to be installed and uninstalled. (Though yes, we could add a comment in this one place.)\r\n\r\n\r\n## What is the new behavior?\r\n\r\n`setFakeBaseSystemTime` is part of the public API, and developers can directly call it inside `fakeAsync` tests.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","Url":"https://github.com/angular/angular/pull/52417","RelatedDescription":"Open PR \"feat(core): add `setFakeBaseSystemTime()` to public API\" (#52417)"},{"Id":"1965570308","IsPullRequest":false,"CreatedAt":"2023-10-27T13:45:44","Actor":"gilsdav","Number":"52416","RawContent":null,"Title":"Need a way to resetConfig of routes managed by a lazyloaded module - After changes in Router from 16.2.5","State":"open","Body":"### Which @angular/* package(s) are relevant/related to the feature request?\r\n\r\n@angular/router@>=16.2.5\r\n\r\n### Description\r\n\r\nHello,\r\n\r\nMy library to make routes translatable doesn't work anymore from 16.2.5.\r\nI can see now `_loadedRoutes` is populate on lazyloading. Before it was populated on Initializer.\r\n\r\nI totally understand the change but this change will create a feature request:\r\nWe can use `router.resetConfig(routes)` in \"root\" Router but can you make this function run for child routes ?\r\nSo `router.resetConfig(lazyloadedRoutes)` into lazyloaded module has to update only its routes not global routes.\r\nIn the same way `router.config` need to return only routes from lazyloaded module and not the entire config.\r\n\r\n### Proposed solution\r\n\r\n## State\r\nModule 1 contains routes:\r\n```\r\n[\r\n  {\r\n      path: '',\r\n      component: HomeComponent\r\n  },\r\n  {\r\n     path: 'two',\r\n     loadChildren: import(./my.module.ts).then(m => m.MyModule)\r\n  }\r\n]\r\n```\r\nModule 2 contains routes:\r\n```\r\n[\r\n  {\r\n      path: '',\r\n      component: ComponentTwo\r\n  },\r\n  {\r\n     path: 'three',\r\n     component: ComponentThree\r\n  }\r\n]\r\n```\r\n## Expectation\r\n### config\r\nExpected return of `router.config` into AppModule:\r\n```\r\n[\r\n  {\r\n      path: '',\r\n      component: HomeComponent\r\n  },\r\n  {\r\n     path: 'two',\r\n     loadChildren: import(./my.module.ts).then(m => m.MyModule)\r\n  }\r\n]\r\n```\r\nExpected return of `router.config` into MyModule\r\n```\r\n[\r\n  {\r\n      path: '',\r\n      component: ComponentTwo\r\n  },\r\n  {\r\n     path: 'three',\r\n     component: ComponentThree\r\n  }\r\n]\r\n```\r\n### config\r\nReset config into AppModule:\r\n```\r\nrouter.resetConfig([\r\n  {\r\n      path: '',\r\n      component: HomeComponent\r\n  },\r\n  {\r\n     path: 'two',\r\n     loadChildren: import(./my.module.ts).then(m => m.MyModule)\r\n  }\r\n])\r\n```\r\nReset config into MyModule:\r\n```\r\nrouter.resetConfig([\r\n  {\r\n      path: '',\r\n      component: ComponentTwo\r\n  },\r\n  {\r\n     path: 'three',\r\n     component: ComponentThree\r\n  }\r\n])\r\n```\r\n\r\n### Alternatives considered\r\n\r\nCreate an other way to resetConfig of routes managed by a lazyloaded module","Url":"https://github.com/angular/angular/issues/52416","RelatedDescription":"Open issue \"Need a way to resetConfig of routes managed by a lazyloaded module - After changes in Router from 16.2.5\" (#52416)"},{"Id":"1965306623","IsPullRequest":true,"CreatedAt":"2023-10-27T11:17:29","Actor":"aanchal88","Number":"52415","RawContent":null,"Title":"docs: remove duplicate words","State":"open","Body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application / infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","Url":"https://github.com/angular/angular/pull/52415","RelatedDescription":"Open PR \"docs: remove duplicate words\" (#52415)"},{"Id":"1964986487","IsPullRequest":true,"CreatedAt":"2023-10-27T08:03:52","Actor":"crisbeto","Number":"52414","RawContent":null,"Title":"Project root node of @if and @for blocks","State":"open","Body":"A couple of fixes to get the content projection behavior of `@if` and `@for` blocks closer to `*ngIf` and `*ngFor`. Includes the following commits:\r\n\r\n### fix(compiler): project control flow root elements into correct slot\r\nWith the directive-based control flow users were able to conditionally project content using the `*` syntax. E.g. `<div *ngIf=\"expr\" projectMe></div>` will be projected into `<ng-content select=\"[projectMe]\"/>`, because the attributes and tag name from the `div` are copied to the template via the template creation instruction. With `@if` and `@for` that is not the case, because the conditional is placed *around* elements, rather than *on* them. The result is that content projection won't work in the same way if a user converts from `*ngIf` to `@if`.\r\n\r\nThese changes aim to cover the most common case by doing the same copying when a control flow node has *one and only one* root element or template node.\r\n\r\nThis approach comes with some caveats:\r\n1. As soon as any other node is added to the root, the copying behavior won't work anymore. A diagnostic will be added to flag cases like this and to explain how to work around it.\r\n2. If `preserveWhitespaces` is enabled, it's very likely that indentation will break this workaround, because it'll include an additional text node as the first child. We can work around it here, but in a discussion it was decided not to, because the user explicitly opted into preserving the whitespace and we would have to drop it from the generated code. The diagnostic mentioned point 1 will flag such cases to users.\r\n\r\n### refactor(compiler): implement control flow content projection fix in template pipeline\r\nRecreates the fix for content projection in control flow in the new template pipeline. I also had to make the following adjustments to the pipeline:\r\n1. The `TemplateOp.tag` property was being used to generate the name of the template function, rather than the actual tag name being passed into `ɵɵtemplate`. Since the content projection fix requires the tag name to be passed in, I've introduced a new `functionNameSuffix` property instead.\r\n2. `TemplateOp.block` was being used to determine whether to pass `TemplateOp.tag` into the `ɵɵtemplate` instruction. Now that we're always passing in the tag name after the refactor in point 1, we no longer need this flag.\r\n\r\nIn addition to the refactors above, I also made some minor cleanups where I saw the opportunity to do so.\r\n\r\nFixes #52277.","Url":"https://github.com/angular/angular/pull/52414","RelatedDescription":"Open PR \"Project root node of @if and @for blocks\" (#52414)"},{"Id":"1964802704","IsPullRequest":true,"CreatedAt":"2023-10-27T05:38:24","Actor":"aanchal88","Number":"52413","RawContent":null,"Title":"docs: omit repetitions","State":"open","Body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes / features)\r\n- [ ] Docs have been added / updated (for bug fixes / features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application / infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","Url":"https://github.com/angular/angular/pull/52413","RelatedDescription":"Open PR \"docs: omit repetitions\" (#52413)"}],"ResultType":"GitHubIssue"},"AngularCli-Issues":{"Issues":[{"Id":"1967159458","IsPullRequest":true,"CreatedAt":"2023-10-29T21:22:45","Actor":"clydin","Number":"26171","RawContent":null,"Title":"fix(@angular-devkit/build-angular): remove unactionable error overlay suggestion from Vite-based dev server","State":"open","Body":"The Vite-based development server that is used with the esbuild-based builders (`application`/`browser-esbuild`)\r\nwill show an error overlay when the application build encounters an error. This overlay previously provided a\r\nsuggestion to edit the `vite.config.js` configuration file to disable the error overlay. Since Vite usage is\r\nencapsulated within the Angular CLI, this suggestion is unactionable and may lead to user confusion due to\r\nno Vite configuration file being present within the project nor would creating one have an effect on the build\r\nprocess.\r\n\r\nBlocked on #26162","Url":"https://github.com/angular/angular-cli/pull/26171","RelatedDescription":"Open PR \"fix(@angular-devkit/build-angular): remove unactionable error overlay suggestion from Vite-based dev server\" (#26171)"},{"Id":"1967157278","IsPullRequest":true,"CreatedAt":"2023-10-29T21:15:36","Actor":"clydin","Number":"26170","RawContent":null,"Title":"fix(@angular/cli): ignore peer mismatch when updating @nguniversal/builders","State":"open","Body":"When updating to v17, the `@nguniversal/builders` is now ignored when checking peer dependency ranges. The `@nguniversal/builders` is no longer used and will be removed in a migration during the update process.\r\n\r\nCloses #26167","Url":"https://github.com/angular/angular-cli/pull/26170","RelatedDescription":"Open PR \"fix(@angular/cli): ignore peer mismatch when updating @nguniversal/builders\" (#26170)"},{"Id":"1967155392","IsPullRequest":true,"CreatedAt":"2023-10-29T21:09:07","Actor":"clydin","Number":"26169","RawContent":null,"Title":"fix(@angular-devkit/build-angular): skip checking CommonJS module descendants","State":"open","Body":"When CommonJS module checking is enabled in the esbuild-based builders (`application`/`browser-esbuild`), the checker will now skip all descendants of a CommonJS module. Previously it would only skip them if the module was not allowed. This change now provides the same module checking behavior as the Webpack-based check. This makes the build behavior more consistent when migrating to the new build system.","Url":"https://github.com/angular/angular-cli/pull/26169","RelatedDescription":"Open PR \"fix(@angular-devkit/build-angular): skip checking CommonJS module descendants\" (#26169)"},{"Id":"1966806737","IsPullRequest":true,"CreatedAt":"2023-10-29T01:36:31","Actor":"angular-robot","Number":"26168","RawContent":null,"Title":"build: update dependency picomatch to v3","State":"open","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [picomatch](https://togithub.com/micromatch/picomatch) | dependencies | major | [`2.3.1` -> `3.0.1`](https://renovatebot.com/diffs/npm/picomatch/2.3.1/3.0.1) |\n| [picomatch](https://togithub.com/micromatch/picomatch) | devDependencies | major | [`2.3.1` -> `3.0.1`](https://renovatebot.com/diffs/npm/picomatch/2.3.1/3.0.1) |\n\n---\n\n### Release Notes\n\n<details>\n<summary>micromatch/picomatch (picomatch)</summary>\n\n### [`v3.0.1`](https://togithub.com/micromatch/picomatch/compare/3.0.0...3.0.1)\n\n[Compare Source](https://togithub.com/micromatch/picomatch/compare/3.0.0...3.0.1)\n\n### [`v3.0.0`](https://togithub.com/micromatch/picomatch/compare/2.3.1...3.0.0)\n\n[Compare Source](https://togithub.com/micromatch/picomatch/compare/2.3.1...3.0.0)\n\n</details>\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - \"after 10:00pm every weekday,before 4:00am every weekday,every weekend\" in timezone America/Tijuana, Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n🔕 **Ignore**: Close this PR and you won't be reminded about these updates again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular-cli/pull/26168","RelatedDescription":"Open PR \"build: update dependency picomatch to v3\" (#26168)"},{"Id":"1966738563","IsPullRequest":false,"CreatedAt":"2023-10-28T21:01:06","Actor":"robertIsaac","Number":"26167","RawContent":null,"Title":"projects with @nguniversal/builders fail to update to v17-rc without --force","State":"open","Body":"### Command\n\nupdate\n\n### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\ntrying with `ng update @angular/cli --next` without `--force` will fail\r\neither mention that in https://update.angular.io/?v=16.0-17.0 that if you use `@nguniversal/builders` you need to use force\r\nor update the code to treat `@nguniversal/builders` as special case since it's will be replace in the migration steps\n\n### Minimal Reproduction\n\n1. generate new angular 16 project\r\n2. add @nguniversal/express-engine to it\r\n3. update to version 17\n\n### Exception or Error\n\n```text\nPackage \"@nguniversal/builders\" has an incompatible peer dependency to \"@angular-devkit/build-angular\" (requires \"^16.0.0 || ^16.1.0-next.0\", would install \"17.0.0-rc.2\").\r\n× Migration failed: Incompatible peer dependencies found.\r\nPeer dependency warnings when installing dependencies means that those dependencies might not work correctly together.\r\nYou can use the '--force' option to ignore incompatible peer dependencies and instead address these warnings later.\r\n  See \"C:\\Users\\rober\\AppData\\Local\\Temp\\ng-Lo6jIx\\angular-errors.log\" for further details.\n```\n\n\n### Your Environment\n\n```text\nAngular CLI: 16.2.8\r\nNode: 18.16.0\r\nPackage Manager: npm 9.6.7\r\nOS: win32 x64\r\n\r\nAngular: 16.2.11\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1602.8\r\n@angular-devkit/build-angular   16.2.8\r\n@angular-devkit/core            16.2.8\r\n@angular-devkit/schematics      16.2.8\r\n@angular/cli                    16.2.8\r\n@nguniversal/builders           16.2.0\r\n@nguniversal/express-engine     16.2.0\r\n@schematics/angular             16.2.8\r\nrxjs                            7.8.1\r\ntypescript                      5.1.6\r\nzone.js                         0.13.3\n```\n\n\n### Anything else relevant?\n\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26167","RelatedDescription":"Open issue \"projects with @nguniversal/builders fail to update to v17-rc without --force\" (#26167)"},{"Id":"1966345869","IsPullRequest":true,"CreatedAt":"2023-10-28T01:15:32","Actor":"clydin","Number":"26166","RawContent":null,"Title":"refactor(@angular-devkit/build-angular): format post-bundle diagnostic messages for esbuild builders","State":"open","Body":"Any errors or warnings generated from post-bundling steps of the build will now be formatted and displayed in a similar manner to the bundling errors and warnings. This should be most noticeable with bundle budgets.","Url":"https://github.com/angular/angular-cli/pull/26166","RelatedDescription":"Open PR \"refactor(@angular-devkit/build-angular): format post-bundle diagnostic messages for esbuild builders\" (#26166)"},{"Id":"1966294226","IsPullRequest":true,"CreatedAt":"2023-10-27T23:18:00","Actor":"clydin","Number":"26165","RawContent":null,"Title":"perf(@angular-devkit/build-angular): only rebundle browser polyfills on explicit changes","State":"open","Body":"The newly introduced incremental bundler result caching is now used for browser polyfills (`polyfills` option). This allows the bundling steps to be skipped in watch mode when no related files have been modified.","Url":"https://github.com/angular/angular-cli/pull/26165","RelatedDescription":"Open PR \"perf(@angular-devkit/build-angular): only rebundle browser polyfills on explicit changes\" (#26165)"},{"Id":"1966269795","IsPullRequest":true,"CreatedAt":"2023-10-27T22:38:18","Actor":"dgp1130","Number":"26164","RawContent":null,"Title":"Fix empty `styles` string and update component schematic to use single `styles` or `styleUrl` property","State":"open","Body":"An array is no longer required in v17 and we always generate a single style or style URL anyways, so we may as well drop the array.\r\n\r\nThis actually revealed a bug in the Webpack compilation where an empty `styles: ''` string would break PostCSS / the Webpack loader. Fixed this by just skipping resource inlining for an empty string, since there's no work to do anyways.","Url":"https://github.com/angular/angular-cli/pull/26164","RelatedDescription":"Open PR \"Fix empty `styles` string and update component schematic to use single `styles` or `styleUrl` property\" (#26164)"},{"Id":"1966050246","IsPullRequest":true,"CreatedAt":"2023-10-27T19:04:44","Actor":"josephperrott","Number":"26163","RawContent":null,"Title":"ci: migrate snapshot publish job to GHA","State":"open","Body":"Builds on #26119","Url":"https://github.com/angular/angular-cli/pull/26163","RelatedDescription":"Open PR \"ci: migrate snapshot publish job to GHA\" (#26163)"},{"Id":"1965954365","IsPullRequest":true,"CreatedAt":"2023-10-27T17:53:41","Actor":"clydin","Number":"26162","RawContent":null,"Title":"fix(@angular-devkit/build-angular): ensure correct web worker URL resolution in Vite dev server","State":"open","Body":"When using the application builder with the development server, Web Worker URLs previously may have been incorrectly resolved. This caused Vite to consider the Web Worker URLs as outside the project root and generate a special file system URL. While this worked on Mac/Linux, it would fail on Windows. Since Vite does not appear to support resolve plugins for Web Workers, the virtual project root for the in-memory build has now been adjusted to allow the referencing file to have a path that resolves the Web Worker URL to a project relative location.","Url":"https://github.com/angular/angular-cli/pull/26162","RelatedDescription":"Open PR \"fix(@angular-devkit/build-angular): ensure correct web worker URL resolution in Vite dev server\" (#26162)"},{"Id":"1965201525","IsPullRequest":true,"CreatedAt":"2023-10-27T16:29:34","Actor":"angular-robot","Number":"26157","RawContent":null,"Title":"build: update github/codeql-action action to v2.22.5","State":"closed","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [github/codeql-action](https://togithub.com/github/codeql-action) | action | patch | `v2.22.4` -> `v2.22.5` |\n\n---\n\n### Release Notes\n\n<details>\n<summary>github/codeql-action (github/codeql-action)</summary>\n\n### [`v2.22.5`](https://togithub.com/github/codeql-action/compare/v2.22.4...v2.22.5)\n\n[Compare Source](https://togithub.com/github/codeql-action/compare/v2.22.4...v2.22.5)\n\n</details>\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - \"after 10:00pm every weekday,before 4:00am every weekday,every weekend\" in timezone America/Tijuana, Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n🔕 **Ignore**: Close this PR and you won't be reminded about this update again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular-cli/pull/26157","RelatedDescription":"Closed or merged PR \"build: update github/codeql-action action to v2.22.5\" (#26157)"},{"Id":"1963922001","IsPullRequest":true,"CreatedAt":"2023-10-27T16:29:13","Actor":"clydin","Number":"26146","RawContent":null,"Title":"fix(@schematics/angular): enable TypeScript `esModuleInterop` by default for ESM compliance","State":"closed","Body":"The `esModuleInterop` TypeScript option is a TypeScript recommended option that ensures that TypeScript emits compliant ESM code when transforming namespace and default imports. This is important for new projects because they now use the `application` builder which emits full ESM code. Not using this option with certain third-party packages can result in build warnings and the potential for runtime failure. For existing applications that are considering migrating, information pertaining to this situation will be available within the documentation.\r\n\r\nSince the `allowSyntheticDefaultImports` is implied and automatically enabled when `esModuleInterop` is enabled, the previous option has been replaced with this one.\r\n\r\nReference: https://www.typescriptlang.org/tsconfig#esModuleInterop","Url":"https://github.com/angular/angular-cli/pull/26146","RelatedDescription":"Closed or merged PR \"fix(@schematics/angular): enable TypeScript `esModuleInterop` by default for ESM compliance\" (#26146)"},{"Id":"1964086073","IsPullRequest":true,"CreatedAt":"2023-10-27T16:28:55","Actor":"clydin","Number":"26150","RawContent":null,"Title":"fix(@angular-devkit/build-angular): only show changed output files in watch mode with esbuild","State":"closed","Body":"Similar to how the Webpack-based `browser` builder only shows the output files that have changed during watch mode (including `ng serve`), the esbuild-based builders will now also only show changed files. For large applications, this can greatly reduce the amount of text shown in the console when actively developing in watch mode.","Url":"https://github.com/angular/angular-cli/pull/26150","RelatedDescription":"Closed or merged PR \"fix(@angular-devkit/build-angular): only show changed output files in watch mode with esbuild\" (#26150)"},{"Id":"1965434177","IsPullRequest":true,"CreatedAt":"2023-10-27T16:28:30","Actor":"alan-agius4","Number":"26159","RawContent":null,"Title":"fix(@angular-devkit/build-angular): add a maximum rendering timeout for SSR and SSG during development","State":"closed","Body":"There might be cases were currently, the render application promise does not resolve because the application never becomes stable in most cases this is due to errors, this causes the worker to never exit and the build to keep running until it's manually terminated.\r\n\r\nWith this change, we add a maximum rendering timeout of 30seconds for each page.\r\n","Url":"https://github.com/angular/angular-cli/pull/26159","RelatedDescription":"Closed or merged PR \"fix(@angular-devkit/build-angular): add a maximum rendering timeout for SSR and SSG during development\" (#26159)"},{"Id":"1965117530","IsPullRequest":true,"CreatedAt":"2023-10-27T14:52:43","Actor":"alan-agius4","Number":"26156","RawContent":null,"Title":"perf(@angular-devkit/build-angular): move SSG asset server into workers","State":"closed","Body":"This commit moves the assets server into the rendering workers where each worker will spawn it's own server and handle it's own HTTP requests.\r\n\r\nThis improves performance when there are a large number of assets being requested concurrently due to multiple pages being rendered at the same time.\r\n","Url":"https://github.com/angular/angular-cli/pull/26156","RelatedDescription":"Closed or merged PR \"perf(@angular-devkit/build-angular): move SSG asset server into workers\" (#26156)"},{"Id":"1965692990","IsPullRequest":true,"CreatedAt":"2023-10-27T14:51:28","Actor":"alan-agius4","Number":"26160","RawContent":null,"Title":"perf(@angular-devkit/build-angular): patch `fetch` to load assets from memory","State":"open","Body":"\r\nThis commit refactors the assets SSG asset loading from memory to use a patched version of `fetch` instead of spawning a separate server.\r\n","Url":"https://github.com/angular/angular-cli/pull/26160","RelatedDescription":"Open PR \"perf(@angular-devkit/build-angular): patch `fetch` to load assets from memory\" (#26160)"},{"Id":"1965753806","IsPullRequest":false,"CreatedAt":"2023-10-27T14:39:50","Actor":"AshotAleqsanyan96","Number":"26161","RawContent":null,"Title":"Need an ability to generate style bundle separatelly under a directory","State":"open","Body":"### Which @angular/* package(s) are relevant/related to the feature request?\r\n\r\ncompiler\r\n\r\n### Description\r\n\r\nHello Friends,\r\n\r\nAfter some research and reading the official documentation, I couldn't find any helpful information and I think it is not possible right now, to build the style files as a separate bundle under the subdirectory via the configuration in angular.json.\r\n\r\nSo let's say we have 2-3 theme CSS files \r\n1. `default-theme.scss`\r\n2. `dark-theme.scss`\r\n3. `system-theme.scss`\r\n\r\nI want to build these scss files as a 3 separate bundles, fortunately it is possible via the angular.json configuration. I can add several lines and it will be ready:\r\n\r\n`angular.json`: `projects.{PROJECT_NAME}.architect.build.options.styles`\r\n```\r\n...............................\r\n\"styles\": [\r\n         {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/default-theme.scss\",\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/dark-theme.scss\",\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/system-theme.scss\",\r\n          },\r\n]\r\n...............................\r\n```\r\n\r\nand this will generate 3 separate files in the root directory in the `dist/{PROJECT_NAME}/`. \r\n1. `default-theme.css`\r\n2. `dark-theme.css`\r\n3. `system-theme.css`\r\n\r\nI also noticed that the Style Object has one more additional property: `bundleName` which will help us to change the generated bundle name(which is good). \r\n\r\nBut unfortunately, there is no way to generate these bundles under the sub-directory.\r\n\r\n\r\n\r\n### Proposed solution\r\n\r\nSo it will be helpfull to modify the style object, by adding `output` property, that will get the path(`string`) as a value:\r\n\r\n`angular.json`: `projects.{PROJECT_NAME}.architect.build.options.styles`\r\n```\r\n...............................\r\n\"styles\": [\r\n         {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/default-theme.scss\",\r\n                \"output\": \"themes\",\r\n                \"bundleName\": \"default-theme\"\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/dark-theme.scss\",\r\n                \"output\": \"themes\",\r\n                \"bundleName\": \"dark-theme\"\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/system-theme.scss\",\r\n                \"output\": \"themes\",\r\n                \"bundleName\": \"system-theme\"\r\n          },\r\n]\r\n...............................\r\n```\r\n\r\nand by these configuration I expect to have, my generated bundles under the `themes` directory\r\n1. `themes/default-theme.css`\r\n2. `themes/dark-theme.css`\r\n3. `themes/system-theme.css`\r\n\r\n\r\n### Alternatives considered\r\n\r\nThe second option is to have some standard objects for example:\r\n\r\n`$styles`, `$assets` by which we can have access to the generated styles and assets to manipulate with them in angular.json\r\n\r\nFor example, by using the above example:\r\n\r\n`angular.json`: `projects.{PROJECT_NAME}.architect.build.options.styles`\r\n```\r\n...............................\r\n\"styles\": [\r\n         {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/default-theme.scss\",\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/dark-theme.scss\",\r\n          },\r\n          {\r\n                \"inject\": false,\r\n                \"input\": \"src/themes/system-theme.scss\",\r\n          },\r\n]\r\n...............................\r\n```\r\n\r\nWe can use assets object to change the directories:\r\n\r\n`angular.json`: `projects.{PROJECT_NAME}.architect.build.options.assets`\r\n```\r\n...............................\r\n\"assets\": [\r\n         {\r\n                \"input\": \"$styles['default-theme.css']\",\r\n                \"output\": \"themes/default-theme.css\",\r\n                \"glob\": \"compiled\"                 <------------ this is also can be modified a little bit to indicate that the file is not static\r\n          },\r\n         {\r\n                \"input\": \"$styles['dark-theme.css']\",\r\n                \"output\": \"themes/dark-theme.css\",\r\n                \"glob\": \"compiled\"                 <------------ this is also can be modified a little bit to indicate that the file is not static\r\n          },\r\n                   {\r\n                \"input\": \"$styles['system-theme.css']\",\r\n                \"output\": \"themes/system-theme.css\",\r\n                \"glob\": \"compiled\"                 <------------ this is also can be modified a little bit to indicate that the file is not static\r\n          },\r\n]\r\n...............................\r\n```\r\n\r\n\r\n","Url":"https://github.com/angular/angular-cli/issues/26161","RelatedDescription":"Open issue \"Need an ability to generate style bundle separatelly under a directory\" (#26161)"},{"Id":"1964029026","IsPullRequest":false,"CreatedAt":"2023-10-27T12:36:31","Actor":"zip-fa","Number":"26148","RawContent":null,"Title":"application builder: strange behavior of PLATFORM_ID","State":"closed","Body":"### Command\n\nserve\n\n### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nHi.\r\nWith enabled ssr, dev server starts to serve ssr-ed application. With this setup, PLATFORM_ID is always browser, while it actually runs in server environment.\r\nThis leads to non-working hydration because of setTimeout() calls, which must be called only in browser env.\r\nHow should i write browser-only or server-only logic now? What is the way?\r\n\r\nTake a look at this example, which leads to hydration errors: \r\n\r\n```\r\nconstructor() {\r\n    if(isPlatformServer(inject(PLATFORM_ID))) {\r\n      return;\r\n    }\r\n\r\n    console.log('i am browser');\r\n\r\n    setTimeout(() => console.log('hi from browser'), 11000);\r\n  }\r\n```\n\n### Minimal Reproduction\n\nhttps://github.com/zip-fa/ng17-ssr-bug\n\n### Exception or Error\n\n```text\ncore.mjs:28900 NG0506: Angular hydration expected the ApplicationRef.isStable() to emit `true`, but it didn't happen within 10000ms. Angular hydration logic depends on the application becoming stable as a signal to complete hydration process\n```\n\n\n### Your Environment\n\n```text\nAngular CLI: 17.0.0-rc.1\r\nNode: 18.18.1\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 17.0.0-rc.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1700.0-rc.1\r\n@angular-devkit/build-angular   17.0.0-rc.1\r\n@angular-devkit/core            17.0.0-rc.1\r\n@angular-devkit/schematics      17.0.0-rc.1\r\n@schematics/angular             17.0.0-rc.1\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.1\n```\n\n\n### Anything else relevant?\n\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26148","RelatedDescription":"Closed issue \"application builder: strange behavior of PLATFORM_ID\" (#26148)"},{"Id":"1965395844","IsPullRequest":true,"CreatedAt":"2023-10-27T12:10:35","Actor":"alan-agius4","Number":"26158","RawContent":null,"Title":"fix(@angular-devkit/build-angular): redirect `global` and `self` to `globalThis`","State":"open","Body":"\r\nIn some cases libraries do not correctly check if these if `global` and self are defined.\r\n","Url":"https://github.com/angular/angular-cli/pull/26158","RelatedDescription":"Open PR \"fix(@angular-devkit/build-angular): redirect `global` and `self` to `globalThis`\" (#26158)"},{"Id":"1964781091","IsPullRequest":true,"CreatedAt":"2023-10-27T05:13:28","Actor":"angular-robot","Number":"26155","RawContent":null,"Title":"build: update angular","State":"open","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [@angular/animations](https://togithub.com/angular/animations-builds) | dependencies | digest | `ae264cc` -> `d283b7e` |\n| [@angular/bazel](https://togithub.com/angular/bazel-builds) | devDependencies | digest | `2a68e95` -> `e965ad3` |\n| [@angular/build-tooling](https://togithub.com/angular/dev-infra-private-build-tooling-builds) | devDependencies | digest | `1aa5847` -> `10b294a` |\n| [@angular/cdk](https://togithub.com/angular/cdk-builds) | dependencies | digest | `3e981c7` -> `ab28fe3` |\n| [@angular/common](https://togithub.com/angular/common-builds) | dependencies | digest | `6474647` -> `5d17897` |\n| [@angular/compiler](https://togithub.com/angular/compiler-builds) | dependencies | digest | `4bcb5c6` -> `c76ca53` |\n| [@angular/compiler-cli](https://togithub.com/angular/compiler-cli-builds) | dependencies | digest | `f7c2469` -> `4296dd0` |\n| [@angular/core](https://togithub.com/angular/core-builds) | dependencies | digest | `55a0599` -> `a32ebc6` |\n| [@angular/forms](https://togithub.com/angular/forms-builds) | dependencies | digest | `f291d0c` -> `108b1b8` |\n| [@angular/language-service](https://togithub.com/angular/language-service-builds) | dependencies | digest | `8a236dc` -> `39a2865` |\n| [@angular/localize](https://togithub.com/angular/localize-builds) | dependencies | digest | `c2fd6bc` -> `8355065` |\n| [@angular/material](https://togithub.com/angular/material-builds) | dependencies | digest | `002ac70` -> `ff53b29` |\n| [@angular/material-moment-adapter](https://togithub.com/angular/material-moment-adapter-builds) | dependencies | digest | `ae49315` -> `e1e543e` |\n| [@angular/ng-dev](https://togithub.com/angular/dev-infra-private-ng-dev-builds) | devDependencies | digest | `162ca6b` -> `4a060df` |\n| [@angular/platform-browser](https://togithub.com/angular/platform-browser-builds) | dependencies | digest | `8d68d57` -> `6bd96bf` |\n| [@angular/platform-browser-dynamic](https://togithub.com/angular/platform-browser-dynamic-builds) | dependencies | digest | `7e6efa1` -> `df8b584` |\n| [@angular/platform-server](https://togithub.com/angular/platform-server-builds) | dependencies | digest | `9f82fcb` -> `481280d` |\n| [@angular/router](https://togithub.com/angular/router-builds) | dependencies | digest | `01a3394` -> `fefb5d8` |\n| [@angular/service-worker](https://togithub.com/angular/service-worker-builds) | dependencies | digest | `94c3f21` -> `0cdac8a` |\n| angular/dev-infra | action | digest | `4ccf7ee` -> `e3ce90d` |\n\n🔡 If you wish to disable git hash updates, add `\":disableDigestUpdates\"` to the extends array in your config.\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - \"after 10:00pm every weekday,before 4:00am every weekday,every weekend\" in timezone America/Tijuana, Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://togithub.com/angular/dev-infra) if that's undesired.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular-cli/pull/26155","RelatedDescription":"Open PR \"build: update angular\" (#26155)"},{"Id":"1964471844","IsPullRequest":false,"CreatedAt":"2023-10-27T03:10:29","Actor":"gbrunow","Number":"26154","RawContent":null,"Title":"[Regression] Angular apps not working in Safari v15 due to `ReferenceError`","State":"closed","Body":"### Command\n\nbuild\n\n### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n@angular-devkit/build-angular@16.1.6\n\n### Description\n\nWe're experiencing the exact same issue reported on #24355 on Safari Version 15.5 (17613.2.7.1.8).\r\nThe issue started when updating from angular `16.1` to `16.2`, more specifically when we update `@angular-devkit/build-angular` from version `16.1.6` to `16.2.0`, and it reproduces on `16.2.8`. \n\n### Minimal Reproduction\n\nSee  #24355\n\n### Exception or Error\n\n_No response_\n\n### Your Environment\n\n```text\nAngular CLI: 16.2.8\r\nNode: 18.16.0\r\nPackage Manager: npm 9.5.1\r\nOS: darwin arm64\r\n\r\nAngular: 16.2.11\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1602.0\r\n@angular-devkit/build-angular   16.2.0\r\n@angular-devkit/core            16.2.0\r\n@angular-devkit/schematics      16.2.8\r\n@angular/cdk                    16.2.10\r\n@angular/cli                    16.2.8\r\n@schematics/angular             16.2.8\r\nrxjs                            7.8.1\r\ntypescript                      5.1.6\r\nzone.js                         0.13.1\n```\n\n\n### Anything else relevant?\n\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26154","RelatedDescription":"Closed issue \"[Regression] Angular apps not working in Safari v15 due to `ReferenceError`\" (#26154)"},{"Id":"1964159710","IsPullRequest":false,"CreatedAt":"2023-10-26T18:45:17","Actor":"zip-fa","Number":"26153","RawContent":null,"Title":"esbuild-builders: webworker resolves invalid url","State":"open","Body":"### Command\n\nbuild, serve\n\n### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\nwebpack builder\n\n### Description\n\nHi.\r\nAngular compiles invalid path to worker, so worker can't start. This is the compiled code:\r\n\r\n```\r\nconst worker = new Worker(new URL(\"/@fs/C:/worker-UXGOV42A.js?type=module&worker_file\", self.location), {\r\n        type: \"module\"\r\n      });\r\n```\r\n\r\n![image](https://github.com/angular/angular-cli/assets/61551308/991f14db-f678-4849-8282-fd1ffb058bbb)\r\n\n\n### Minimal Reproduction\n\nhttps://github.com/zip-fa/ng17-web-worker-bug\n\n### Exception or Error\n\n_No response_\n\n### Your Environment\n\n```text\nAngular CLI: 17.0.0-rc.2\r\nNode: 18.18.1\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 17.0.0-rc.1\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1700.0-rc.2\r\n@angular-devkit/build-angular   17.0.0-rc.2\r\n@angular-devkit/core            17.0.0-rc.2\r\n@angular-devkit/schematics      17.0.0-rc.2\r\n@angular/cli                    17.0.0-rc.2\r\n@schematics/angular             17.0.0-rc.2\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.1\n```\n\n\n### Anything else relevant?\n\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26153","RelatedDescription":"Open issue \"esbuild-builders: webworker resolves invalid url\" (#26153)"},{"Id":"1964133059","IsPullRequest":true,"CreatedAt":"2023-10-26T18:43:47","Actor":"dgp1130","Number":"26152","RawContent":null,"Title":"docs: release notes for the v17.0.0-rc.2 release","State":"closed","Body":"Cherry-picks the changelog from the \"17.0.x\" branch to the next branch (main).","Url":"https://github.com/angular/angular-cli/pull/26152","RelatedDescription":"Closed or merged PR \"docs: release notes for the v17.0.0-rc.2 release\" (#26152)"},{"Id":"1964079590","IsPullRequest":true,"CreatedAt":"2023-10-26T18:31:44","Actor":"dgp1130","Number":"26149","RawContent":null,"Title":"Bump version to \"v17.0.0-rc.2\" with changelog.","State":"closed","Body":"","Url":"https://github.com/angular/angular-cli/pull/26149","RelatedDescription":"Closed or merged PR \"Bump version to \"v17.0.0-rc.2\" with changelog.\" (#26149)"},{"Id":"1964112466","IsPullRequest":false,"CreatedAt":"2023-10-26T18:22:22","Actor":"zip-fa","Number":"26151","RawContent":null,"Title":"esbuild-builders: broken websocket proxy","State":"open","Body":"### Command\n\nserve\n\n### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\nv16\n\n### Description\n\nHi.\r\nWebsocket proxying on esbuild-based builders is simply not working.\r\nTo see that WS connection can be established, change builder to `@angular-devkit/build-angular:browser`\n\n### Minimal Reproduction\n\nhttps://github.com/zip-fa/ng17-ws-proxy-bug\n\n### Exception or Error\n\n_No response_\n\n### Your Environment\n\n```text\nAngular CLI: 17.0.0-rc.1\r\nNode: 18.18.1\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 17.0.0-rc.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1700.0-rc.1\r\n@angular-devkit/build-angular   17.0.0-rc.1\r\n@angular-devkit/core            17.0.0-rc.1\r\n@angular-devkit/schematics      17.0.0-rc.1\r\n@schematics/angular             17.0.0-rc.1\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.1\n```\n\n\n### Anything else relevant?\n\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26151","RelatedDescription":"Open issue \"esbuild-builders: broken websocket proxy\" (#26151)"},{"Id":"1964006009","IsPullRequest":false,"CreatedAt":"2023-10-26T17:33:16","Actor":"zip-fa","Number":"26147","RawContent":null,"Title":"application builder: I18nPluralPipe Missing locale data","State":"closed","Body":"### Command\r\n\r\nserve\r\n\r\n### Is this a regression?\r\n\r\n- [X] Yes, this behavior used to work in the previous version\r\n\r\n### The previous version in which this bug was not present was\r\n\r\nv16 with webpack builder\r\n\r\n### Description\r\n\r\nHi. I18nPluralPipe started to give errors without `registerLocaleData` call on application builder.\r\nI attached two versions of angular.json in my repro-repo: webpack-based and with application builder - they behave differently.\r\nDoes angular include automatically locale data for each locale under the hood in webpack builder?\r\n\r\nWith explicit register of localeData, issue resolves:\r\n\r\n```\r\nimport { registerLocaleData } from '@angular/common';\r\n\r\nimport localeUk from '@angular/common/locales/uk';\r\n\r\nconstructor() {\r\n    registerLocaleData(localeUk);\r\n  }\r\n```\r\n\r\nSo my question is:\r\nShould we load a bunch of locale datas (19 in my project) with esbuild-based builders and register them one-by-one?\r\n\r\n### Minimal Reproduction\r\n\r\nhttps://github.com/zip-fa/ng17-plural-bug\r\n\r\n### Exception or Error\r\n\r\n```text\r\nERROR RuntimeError: NG0701: Missing locale data for the locale \"uk\".\r\n    at findLocaleData (\\src\\i18n\\locale_data_api.ts:66:9)\r\n    at getLocalePluralCase (\\src\\i18n\\locale_data_api.ts:94:16)\r\n    at NgLocaleLocalization.getPluralCategory (\\packages\\common\\src\\i18n\\localization.ts:63:20)\r\n    at getPluralCategory (\\packages\\common\\src\\i18n\\localization.ts:38:24)\r\n    at I18nPluralPipe.transform (\\packages\\common\\src\\pipes\\i18n_plural_pipe.ts:54:17)\r\n    at pureFunction2Internal (\\src\\render3\\pure_function.ts:337:28)\r\n    at Proxy.ɵɵpipeBind2 (\\src\\render3\\pipe.ts:191:7)\r\n    at ɵɵelementStart (C:\\src\\app\\app.component.html:1:6)\r\n    at executeTemplate (\\src\\render3\\instructions\\shared.ts:279:7)\r\n    at refreshView (\\src\\render3\\instructions\\change_detection.ts:153:7) {\r\n  code: 701\r\n```\r\n\r\n\r\n### Your Environment\r\n\r\n```text\r\nAngular CLI: 17.0.0-rc.1\r\nNode: 18.18.1\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 17.0.0-rc.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... localize, platform-browser, platform-browser-dynamic\r\n... platform-server, router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit/architect       0.1700.0-rc.1\r\n@angular-devkit/build-angular   17.0.0-rc.1\r\n@angular-devkit/core            17.0.0-rc.1\r\n@angular-devkit/schematics      17.0.0-rc.1\r\n@schematics/angular             17.0.0-rc.1\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.1\r\n```\r\n\r\n\r\n### Anything else relevant?\r\n\r\n_No response_","Url":"https://github.com/angular/angular-cli/issues/26147","RelatedDescription":"Closed issue \"application builder: I18nPluralPipe Missing locale data\" (#26147)"},{"Id":"1963683297","IsPullRequest":true,"CreatedAt":"2023-10-26T14:51:40","Actor":"angular-robot","Number":"26145","RawContent":null,"Title":"build: lock file maintenance","State":"closed","Body":"This PR contains the following updates:\n\n| Update | Change |\n|---|---|\n| lockFileMaintenance | All locks refreshed |\n\n🔧 This Pull Request updates lock files to use the latest dependency versions.\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - \"before 4am on monday\" in timezone America/Tijuana, Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n👻 **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://togithub.com/angular/dev-infra) if that's undesired.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular-cli/pull/26145","RelatedDescription":"Closed or merged PR \"build: lock file maintenance\" (#26145)"},{"Id":"1963681895","IsPullRequest":true,"CreatedAt":"2023-10-26T14:34:03","Actor":"angular-robot","Number":"26144","RawContent":null,"Title":"build: update dependency ng-packagr to v17.0.0-rc.0","State":"closed","Body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [ng-packagr](https://togithub.com/ng-packagr/ng-packagr) | devDependencies | patch | [`17.0.0-next.2` -> `17.0.0-rc.0`](https://renovatebot.com/diffs/npm/ng-packagr/17.0.0-next.2/17.0.0-rc.0) |\n\n---\n\n### Release Notes\n\n<details>\n<summary>ng-packagr/ng-packagr (ng-packagr)</summary>\n\n### [`v17.0.0-rc.0`](https://togithub.com/ng-packagr/ng-packagr/blob/HEAD/CHANGELOG.md#1700-rc0-2023-10-26)\n\n[Compare Source](https://togithub.com/ng-packagr/ng-packagr/compare/17.0.0-next.2...17.0.0-rc.0)\n\n##### Features\n\n-   esbuild can't resolve secondary entry point from library ([29f417e](https://togithub.com/ng-packagr/ng-packagr/commit/29f417eecddfc79d894e362da1524be3be6ee6ce))\n\n</details>\n\n---\n\n### Configuration\n\n📅 **Schedule**: Branch creation - \"after 10:00pm every weekday,before 4:00am every weekday,every weekend\" in timezone America/Tijuana, Automerge - At any time (no schedule defined).\n\n🚦 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n♻ **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.\n\n🔕 **Ignore**: Close this PR and you won't be reminded about this update again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https://togithub.com/renovatebot/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4zMy4xIiwidXBkYXRlZEluVmVyIjoiMzcuMzMuMSIsInRhcmdldEJyYW5jaCI6Im1haW4ifQ==-->\n","Url":"https://github.com/angular/angular-cli/pull/26144","RelatedDescription":"Closed or merged PR \"build: update dependency ng-packagr to v17.0.0-rc.0\" (#26144)"},{"Id":"1963508158","IsPullRequest":true,"CreatedAt":"2023-10-26T14:01:39","Actor":"alan-agius4","Number":"26143","RawContent":null,"Title":"fix(@angular-devkit/build-angular): handle HTTP requests to assets during SSG in dev-server","State":"closed","Body":"This commit fixes an issue were during SSG/SSR in the dev-server http requests to assets causes the page rendering to fail.\r\n\r\n","Url":"https://github.com/angular/angular-cli/pull/26143","RelatedDescription":"Closed or merged PR \"fix(@angular-devkit/build-angular): handle HTTP requests to assets during SSG in dev-server\" (#26143)"},{"Id":"1963297600","IsPullRequest":true,"CreatedAt":"2023-10-26T12:58:40","Actor":"clydin","Number":"26142","RawContent":null,"Title":"fix(@angular-devkit/build-angular): avoid binary content in architect results with browser-esbuild","State":"closed","Body":"The builder system (architect) currently attempts to treat all results as JSON and attempts to validate the object with a JSON schema validator. This can lead to slow build completion (even after the actual build is fully complete) or crashes if the size and/or quantity of output files is large. Architect only requires a `success` property so that is all that will be passed here if the infrastructure settings have not been explicitly set to avoid writes. Writing is only disabled when used directly by the dev server which bypasses the architect behavior.","Url":"https://github.com/angular/angular-cli/pull/26142","RelatedDescription":"Closed or merged PR \"fix(@angular-devkit/build-angular): avoid binary content in architect results with browser-esbuild\" (#26142)"}],"ResultType":"GitHubIssue"},"material2-Issues":{"Issues":[{"Id":"1966956558","IsPullRequest":true,"CreatedAt":"2023-10-29T11:47:09","Actor":"dolezaljan","Number":"28020","RawContent":null,"Title":"feat(material/dialog:MatDialog): change cdk member _dialog from private to protected (#28019)","State":"open","Body":"","Url":"https://github.com/angular/components/pull/28020","RelatedDescription":"Open PR \"feat(material/dialog:MatDialog): change cdk member _dialog from private to protected (#28019)\" (#28020)"},{"Id":"1966950844","IsPullRequest":false,"CreatedAt":"2023-10-29T11:29:12","Actor":"dolezaljan","Number":"28019","RawContent":null,"Title":"feat(material/dialog:MatDialog): change cdk member _dialog from private to protected","State":"open","Body":"### Feature Description\n\nLet's have [MatDialog's member **_dialog**](https://github.com/angular/components/blob/17.0.x/src/material/dialog/dialog.ts#L85) which is the reference to the CDK Dialog _protected_ instead of _private_.\n\n### Use Case\n\nI'm using scoped material dialogs as described by @reppners [here](https://github.com/angular/components/issues/4612#issuecomment-340049922).\r\n\r\nWhen upgrading from ng13 to ng14 (and onwards) the MatDialog started to use CDK Dialog internally.\r\n\r\n[The reference to the CDK Dialog is private](https://github.com/angular/components/blob/main/src/material/dialog/dialog.ts#L85) preventing me from [overwriting](https://github.com/dolezaljan/ngx-cdk-dynamic-overlay-container/commit/8b060ac349ced6807fb4afe40417dc9d8d7bf768#diff-3a91ff9580ab7c0afb986280d3fea2ba4ce1903eb5799a47802ef038eaa1a8c9R22) it with my CustomCdkDialog within my custom CustomMatDialog.\r\n\r\nTo have the use case complete: all this bubbles down to CustomOverlayContainer updating [_containerElement](https://github.com/angular/components/blob/17.0.x/src/cdk/overlay/overlay-container.ts#L16), which makes the dialog scoped.\r\n\r\n(**Is there a reason for this member not to be protected?**)\r\n(The alternative is to keep [patching](https://github.com/dolezaljan/ngx-cdk-dynamic-overlay-container/blob/master/patch.modules.sh) this directly within downloaded npm module.)","Url":"https://github.com/angular/components/issues/28019","RelatedDescription":"Open issue \"feat(material/dialog:MatDialog): change cdk member _dialog from private to protected\" (#28019)"},{"Id":"1966899254","IsPullRequest":true,"CreatedAt":"2023-10-29T08:42:36","Actor":"crisbeto","Number":"28018","RawContent":null,"Title":"refactor(material/core): remove unused compatibility code","State":"open","Body":"Removes some density-related code that isn't being used anywhere anymore.","Url":"https://github.com/angular/components/pull/28018","RelatedDescription":"Open PR \"refactor(material/core): remove unused compatibility code\" (#28018)"},{"Id":"1964186009","IsPullRequest":false,"CreatedAt":"2023-10-27T21:37:21","Actor":"clamli","Number":"28012","RawContent":null,"Title":"feat(material/chips): expose _chipGrid in MatChipInput and add a stream of chip removal events","State":"closed","Body":"### Feature Description\r\n\r\nHi!\r\n\r\nWe are working on a chip announcement feature which listens to chip addition and removal events and live announce a message when any of the event occurs. Is it possible for AM chips to\r\n\r\n1. Expose _chipGrid from MatChipInput\r\n2. Add a stream of chip removal events in MatChipSet like the existing [destroy event stream](https://github.com/angular/components/blob/main/src/material/chips/chip-set.ts#L83C16-L86)?\r\n\r\n### Use Case\r\n\r\n_No response_","Url":"https://github.com/angular/components/issues/28012","RelatedDescription":"Closed issue \"feat(material/chips): expose _chipGrid in MatChipInput and add a stream of chip removal events\" (#28012)"},{"Id":"1964318229","IsPullRequest":true,"CreatedAt":"2023-10-27T21:26:30","Actor":"clamli","Number":"28013","RawContent":null,"Title":"feat(material/chips): expose _chipGrid in MatChipInput and add a stream of chip removal events","State":"closed","Body":"The original FR is this (https://github.com/angular/components/issues/28012). There are two changes in this PR,\r\n1. Expose _chipGrid from MatChipInput\r\n2. Add a stream of chip removal events in MatChipSet","Url":"https://github.com/angular/components/pull/28013","RelatedDescription":"Closed or merged PR \"feat(material/chips): expose _chipGrid in MatChipInput and add a stream of chip removal events\" (#28013)"},{"Id":"1964940220","IsPullRequest":false,"CreatedAt":"2023-10-27T07:33:46","Actor":"ice-blaze","Number":"28017","RawContent":null,"Title":"bug(button-toggle): Accessibility breaks with matTooltip","State":"open","Body":"### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nWhen adding the tooltip on a button toggle, the screen reader loses the group detection.\n\n### Reproduction\n\nStackBlitz link: https://stackblitz.com/edit/dh5vz6?file=src%2Fexample%2Fbutton-toggle-overview-example.ts,src%2Fexample%2Fbutton-toggle-overview-example.html\r\nSteps to reproduce:\r\n1.  Use NVDA screen reader\r\n2. Navigate with the browse mode\r\n\n\n### Expected Behavior\n\nThe second button toggle should be detected as a whole. Like the first button toggle.\n\n### Actual Behavior\n\nWhen navigating on the second button toggle, the screen reader doesn't mention all the other buttons at once. \n\n### Environment\n\n- Angular: 16\r\n- CDK/Material: 16\r\n- Browser(s): Edge\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Windows 11\r\n- Screen reader: NVDA","Url":"https://github.com/angular/components/issues/28017","RelatedDescription":"Open issue \"bug(button-toggle): Accessibility breaks with matTooltip\" (#28017)"},{"Id":"1964921654","IsPullRequest":false,"CreatedAt":"2023-10-27T07:21:32","Actor":"X-Celcius","Number":"28016","RawContent":null,"Title":"bug(material/theming): get-contrast-color-from-palette doesn't work with pre-defined hue names","State":"open","Body":"### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nUsing `get-contrast-color-from-palette` is convenient and explicit as it gives you the contrast color without having to add `-contrast` to the hue value. It seems to me as the right thing to choose, even though the theming documentation currently doesn't mention this function. \r\n\r\nHowever the behavior can be confusing because hues such as `default`, `lighter` or `darker` are added only to the outer map, not the inner contrast map, when calling `define-palette`. Therefore you can only use it with hues that are defined in the contrast-palette from the beginning (such as 500). \r\n\r\nThere is an easy workaround but I also think that it should be fairly easy to add `default`, `lighter`, `darker` etc. to the inner contrast map in `mat.define-palette`. \n\n### Reproduction\n\nStackBlitz link: https://stackblitz.com/edit/components-issue-egs21k?file=src%2Fstyles.scss\r\nSteps to reproduce:\r\n1. Use `mat.get-contrast-color-from-palette` with a pre-defined hue value such as `default` or `lighter`\r\n\n\n### Expected Behavior\n\nI expect `mat.get-contrast-color-from-palette($palette, default)` to return the same color as `mat-get-color-from-palette($palette, default-contrast)` after defining a palette using `mat.define-palette`. \n\n### Actual Behavior\n\n`mat.get-contrast-color-from-palette` looks for a hue called `default` in the inner contrast map but that doesn't get added to the inner contrast map when calling `mat.define-palette`. \n\n### Environment\n\n- Angular: 16.2.6\r\n- CDK/Material: 16.2.9\r\n- Browser(s): Firefox\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Windows 11\r\n","Url":"https://github.com/angular/components/issues/28016","RelatedDescription":"Open issue \"bug(material/theming): get-contrast-color-from-palette doesn't work with pre-defined hue names\" (#28016)"},{"Id":"1964424325","IsPullRequest":true,"CreatedAt":"2023-10-26T23:51:03","Actor":"mmalerba","Number":"28015","RawContent":null,"Title":"docs(material/theming): Fix broken theme guide formatting","State":"closed","Body":"Our docs site does not support the definition-list markdown, so I switched to headers instead. I also added a link from the generated schematic comment to the relevant documentation so users can learn more.","Url":"https://github.com/angular/components/pull/28015","RelatedDescription":"Closed or merged PR \"docs(material/theming): Fix broken theme guide formatting\" (#28015)"},{"Id":"1962211209","IsPullRequest":true,"CreatedAt":"2023-10-26T21:36:36","Actor":"mmalerba","Number":"28002","RawContent":null,"Title":"docs(material/theming): Update docs on accessing theme values","State":"closed","Body":"Demo: https://material2-docs-dev.web.app/guide/theming-your-components","Url":"https://github.com/angular/components/pull/28002","RelatedDescription":"Closed or merged PR \"docs(material/theming): Update docs on accessing theme values\" (#28002)"},{"Id":"1959908834","IsPullRequest":true,"CreatedAt":"2023-10-26T21:14:40","Actor":"mmalerba","Number":"27992","RawContent":null,"Title":"docs(material/theming): Add docs for the new base theming dimension","State":"closed","Body":"Demo: https://mmalerba-demo.web.app/guide/theming","Url":"https://github.com/angular/components/pull/27992","RelatedDescription":"Closed or merged PR \"docs(material/theming): Add docs for the new base theming dimension\" (#27992)"},{"Id":"1964341777","IsPullRequest":true,"CreatedAt":"2023-10-26T20:43:42","Actor":"mmalerba","Number":"28014","RawContent":null,"Title":"feat(material-experimental/theming): add M3 slide-toggle support","State":"open","Body":"","Url":"https://github.com/angular/components/pull/28014","RelatedDescription":"Open PR \"feat(material-experimental/theming): add M3 slide-toggle support\" (#28014)"},{"Id":"1964005987","IsPullRequest":false,"CreatedAt":"2023-10-26T17:13:02","Actor":"amybedinghaus","Number":"28011","RawContent":null,"Title":"mat-autocomplete causes invalid aria-owns value when opened and then closed","State":"open","Body":"### Is this a regression?\r\n\r\n- [ ] Yes, this behavior used to work in the previous version\r\n\r\n### The previous version in which this bug was not present was\r\n\r\n_No response_\r\n\r\n### Description\r\n\r\nInvalid ARIA aria-owns attribute value with mat-autocomplete when the autocomplete has been opened and then closed again.  I see this previous bug:  https://github.com/angular/components/issues/12332 and the associated PR appears to have partially fixed it but not fully.\r\n\r\n### Reproduction\r\n\r\nStackBlitz link: \r\nSteps to reproduce:\r\n1.   open mat-autocomplete\r\n2.  choose option\r\n3.  close mat-autocomplete\r\n4. Run AXE and get \"Invalid ARIA attribute value: aria-owns='mat-autocomplete'\"\r\n\r\n\r\n### Expected Behavior\r\n\r\nThere should be no accessibility issue\r\n\r\n### Actual Behavior\r\n\r\nThere is accessibility issue \"Invalid ARIA attribute value: aria-owns='mat-autocomplete'\"\r\n\r\n### Environment\r\n\r\n- Angular:  16.2.7\r\n- CDK/Material:  16.2.6\r\n- Browser(s):  Chrome\r\n- Operating System (e.g. Windows, macOS, Ubuntu):  Windows\r\n","Url":"https://github.com/angular/components/issues/28011","RelatedDescription":"Open issue \"mat-autocomplete causes invalid aria-owns value when opened and then closed\" (#28011)"},{"Id":"1963885072","IsPullRequest":false,"CreatedAt":"2023-10-26T16:01:29","Actor":"janousek","Number":"28010","RawContent":null,"Title":"feat(cdk/a11y): isFakeMousedownFromScreenReader - Layout thrashing (forced layout reflow)","State":"open","Body":"### Feature Description\r\n\r\nThe current implementation of the isFakeMousedownFromScreenReader function results in [Layout thrashing / forced layout reflow](https://web.dev/articles/avoid-large-complex-layouts-and-layout-thrashing). This method is called by InputModalityDetector on every mouse down event. This causes performance issues when using virtually any component that uses InputModalityDetector (CdkMenuTrigger for example).\r\n\r\nLayout thrashing is triggered by this line:\r\nhttps://github.com/angular/components/blob/01a95013c6ae0b7bce31f74ec8e1d4afe3749cda/src/cdk/a11y/fake-event-detection.ts#L18C35-L18C35\r\nWhich is caused by using the offsetX and offsetY properties.\r\n\r\nIt would be good to use another solution to detect fake mousedown events (without usage of these properties).\r\n\r\nBased on my tests, it should be possible to use the screenX and screenY properties, which are also 0. But unlike offsetX and offsetY, they don't cause layout thrashing\r\n","Url":"https://github.com/angular/components/issues/28010","RelatedDescription":"Open issue \"feat(cdk/a11y): isFakeMousedownFromScreenReader - Layout thrashing (forced layout reflow)\" (#28010)"},{"Id":"1963834163","IsPullRequest":true,"CreatedAt":"2023-10-26T15:55:59","Actor":"josephperrott","Number":"28009","RawContent":null,"Title":"ci: provide environment variables to the deploy step","State":"closed","Body":"Include the env variables for the step for deploying docs related to doc site access","Url":"https://github.com/angular/components/pull/28009","RelatedDescription":"Closed or merged PR \"ci: provide environment variables to the deploy step\" (#28009)"},{"Id":"1963679558","IsPullRequest":true,"CreatedAt":"2023-10-26T14:19:24","Actor":"crisbeto","Number":"28008","RawContent":null,"Title":"refactor(material/button): fix out of sync file","State":"closed","Body":"Adds a change that was missed in #28007.","Url":"https://github.com/angular/components/pull/28008","RelatedDescription":"Closed or merged PR \"refactor(material/button): fix out of sync file\" (#28008)"},{"Id":"1963632615","IsPullRequest":true,"CreatedAt":"2023-10-26T14:07:06","Actor":"crisbeto","Number":"28007","RawContent":null,"Title":"refactor(material/button): handle disabled states through tokens","State":"closed","Body":"**This is a cherry-pick of #28005** to the RC branch.\r\n\r\nMDC applies disabled styles through the `:disabled` selector which forced us to work around it by using a selector like `.mat-mdc-button[disabled][disabled]` and setting both the disabled and enabled button tokens. This is problematic, because it increases the specificity too much and it introduces space for mistakes, because we have to duplicate the tokens values.\r\n\r\nThese changes resolve the issue by re-applying the token slots to disabled buttons with the correct selector so that they can reuse the same tokens as the `button` nodes.","Url":"https://github.com/angular/components/pull/28007","RelatedDescription":"Closed or merged PR \"refactor(material/button): handle disabled states through tokens\" (#28007)"},{"Id":"1962891820","IsPullRequest":true,"CreatedAt":"2023-10-26T13:42:23","Actor":"crisbeto","Number":"28005","RawContent":null,"Title":"refactor(material/button): handle disabled states through tokens","State":"closed","Body":"MDC applies disabled styles through the `:disabled` selector which forced us to work around it by using a selector like `.mat-mdc-button[disabled][disabled]` and setting both the disabled and enabled button tokens. This is problematic, because it increases the specificity too much and it introduces space for mistakes, because we have to duplicate the tokens values.\r\n\r\nThese changes resolve the issue by re-applying the token slots to disabled buttons with the correct selector so that they can reuse the same tokens as the `button` nodes.","Url":"https://github.com/angular/components/pull/28005","RelatedDescription":"Closed or merged PR \"refactor(material/button): handle disabled states through tokens\" (#28005)"},{"Id":"1963521114","IsPullRequest":false,"CreatedAt":"2023-10-26T13:03:06","Actor":"michahell","Number":"28006","RawContent":null,"Title":"docs-bug(material design spec compliancy / compatibility): what process/system is used for this?","State":"open","Body":"### Documentation Feedback\n\nHi,\r\n\r\nA couple of questions came up in our team regarding Angular Material's compatibility and **parity** to material design specs.\r\n\r\nWe noticed that - for example - the `Expansion panel`, which was introduced in material design v1 (https://m1.material.io/components/expansion-panels.html#) still exists in the latest Angular Material version (https://material.angular.io/components/expansion/overview)\r\n\r\nHowever, the expansion panel as a design component is not present in the material design v2 spec (except for list component expand-and-collapse: https://m2.material.io/components/lists#types no deeplink, search `expand and collapse`)\r\n\r\nThe first question is this:\r\nWas it an explicit decision to keep supporting previous Material Design spec design components as opposed to dropping them and is this documented somewhere?\r\n\r\nThe second question is actually a followup question of the first: \r\nIf it was [an explicit decision], is there some sort of deprecation policy for components that are phased out in future Material Design spec versions?\n\n### Affected documentation page\n\nhttps://material.angular.io/components/expansion/overview","Url":"https://github.com/angular/components/issues/28006","RelatedDescription":"Open issue \"docs-bug(material design spec compliancy / compatibility): what process/system is used for this?\" (#28006)"},{"Id":"1962731764","IsPullRequest":false,"CreatedAt":"2023-10-26T05:27:58","Actor":"cirdeicostel","Number":"28004","RawContent":null,"Title":"bug(Table): Tab navigation on inputs inside table with sticky columns (focus out of sight)","State":"open","Body":"### Is this a regression?\r\n\r\n- [ ] Yes, this behavior used to work in the previous version\r\n\r\n### The previous version in which this bug was not present was\r\n\r\n_No response_\r\n\r\n### Description\r\n\r\nWhen having multiple inputs on one row, one input per cell, inside a table with one or more sticky columns the TAB key navigation is focusing at some point on an input that is hidden under the sticky columns, making the focus out of sight, but still inside the table.\r\n\r\nThe current behavior it's not compliant with the latest accessibility guidelines (WCAG) that states that an element that is focused needs to be in sight. (ref link: https://www.w3.org/WAI/WCAG22/Understanding/focus-not-obscured-minimum)\r\n\r\n### Reproduction\r\n\r\nStackBlitz link: \r\nhttps://stackblitz.com/edit/r22tvc?file=src%2Fexample%2Ftable-sticky-complex-flex-example.html\r\n\r\nTable state:\r\n - have horizontal scroll (requires a higher number of columns)\r\n - one or more columns sticky\r\n - on at least one row have an input on each cell\r\n \r\nSteps to reproduce:\r\n1. Scroll the table in order to hide some columns under the sticky columns\r\n2. Focus first inside the first cell of the row with the inputs\r\n3. Press TAB key in order to navigate through the inputs\r\n4. The focus at some point is on the input that is hidden under the sticky columns\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe focused element should be in sight, visible, not hidden under the sticky columns.\r\n\r\n### Actual Behavior\r\n\r\nThe focus is hidden under the sticky columns, out of sight.\r\n\r\nDEMO:\r\n![table_TAB_focus](https://github.com/angular/components/assets/26005241/58a91a07-5b04-41c3-a54c-f1ccda6b9b8c)\r\n\r\n\r\n### Environment\r\n\r\n- Angular: 16.1.1\r\n- CDK/Material: 16.2.9\r\n- Browser(s): Chrome (118.0.5993.89) / Firefix (119.0)\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Windows x64\r\n","Url":"https://github.com/angular/components/issues/28004","RelatedDescription":"Open issue \"bug(Table): Tab navigation on inputs inside table with sticky columns (focus out of sight)\" (#28004)"},{"Id":"1962601117","IsPullRequest":true,"CreatedAt":"2023-10-26T02:46:32","Actor":"cusher","Number":"28003","RawContent":null,"Title":"fix(material/autocomplete): update selection on form control value changes","State":"open","Body":"Fixes a bug in Autocomplete where the highlighted selection would not update when the underlying form control had its value updated or was reset.\r\n\r\nThis goes beyond the changes in https://github.com/angular/components/pull/27653 which does clear the select on reset, but does not update the selection when the control value is modified.\r\n\r\nFixes #27861, #27652","Url":"https://github.com/angular/components/pull/28003","RelatedDescription":"Open PR \"fix(material/autocomplete): update selection on form control value changes\" (#28003)"},{"Id":"1962076903","IsPullRequest":false,"CreatedAt":"2023-10-25T19:23:04","Actor":"Matthew-The-Developer","Number":"28001","RawContent":null,"Title":"bug(mat-menu): panelClass is being overridden by the default styling","State":"open","Body":"### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nWhen applying a panelClass to the mat-menu component to alter the max-width of the menu, to accommodate menu items with extra long text, the panelClass is applied but then overridden by mat-menu's default styling\n\n### Reproduction\n\nStackBlitz link: https://stackblitz.com/edit/components-issue-nxy1yz?file=src%2Fapp%2Fexample-component.html,src%2Fstyles.scss\r\nSteps to reproduce:\r\n1. Open the menu by clicking the 'Menu' button\r\n2. See that the menu item's text is wrapped instead of pushing the menu's width wider\r\n3. With the menu open, open the element inspect in the DevTools and select the menu's panel from the DOM\r\n4. See that the custom-panel-class is being applied to the menu but is being overridden be the component's defaults\r\n\n\n### Expected Behavior\n\nThe expected behavior would be that the menu's width would be wide enough to display the menu item's text without wrapping it\n\n### Actual Behavior\n\nThe current behavior is that the menu item's text is wrapped with in the menu's default max-width\n\n### Environment\n\n- Angular: 15.2.9\r\n- CDK/Material: 15.2.9\r\n- Browser(s): Edge\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Windows (win32 x64)\r\n","Url":"https://github.com/angular/components/issues/28001","RelatedDescription":"Open issue \"bug(mat-menu): panelClass is being overridden by the default styling\" (#28001)"},{"Id":"1962034482","IsPullRequest":false,"CreatedAt":"2023-10-25T18:55:24","Actor":"thatcort","Number":"28000","RawContent":null,"Title":"docs-bug(ALL): Add Styling Instructions","State":"open","Body":"### Documentation Feedback\n\nPlease add instructions for how to theme and style the components. As a start, please describe the CSS properties that apply to each component, what they do, and their default values. Please describe how styles are inherited from theming (or not) and how to best customize them.\n\n### Affected documentation page\n\nALL","Url":"https://github.com/angular/components/issues/28000","RelatedDescription":"Open issue \"docs-bug(ALL): Add Styling Instructions\" (#28000)"},{"Id":"1961826030","IsPullRequest":true,"CreatedAt":"2023-10-25T16:41:26","Actor":"wagnermaciel","Number":"27999","RawContent":null,"Title":"refactor(material/button): switch typography to tokens","State":"open","Body":"","Url":"https://github.com/angular/components/pull/27999","RelatedDescription":"Open PR \"refactor(material/button): switch typography to tokens\" (#27999)"},{"Id":"1960804848","IsPullRequest":true,"CreatedAt":"2023-10-25T15:47:15","Actor":"crisbeto","Number":"27994","RawContent":null,"Title":"refactor(material/button): clean up fab tokens","State":"closed","Body":"Reworks the tokens setup for the FAB by:\r\n* Introducing a custom tokens map. It was necessary both for these changes and will come in handy later for the ripples.\r\n* Using tokens specifically for the disabled state instead of passing in the non-disabled ones. This aligns the FAB with the rest of the library and allows us to reduce the specificity.\r\n* Introducing a tokens specifically for the icon/text color. Currently we have an ad-hoc variable declared directly in the component styles.\r\n* Using our own mixins for the elevation instead of MDC's. Our mixin calls into MDC eventually, but it has some safeguards as well.\r\n* Generating the tokens that we pass into MDC's theme using our APIs, instead of creating the map directly.","Url":"https://github.com/angular/components/pull/27994","RelatedDescription":"Closed or merged PR \"refactor(material/button): clean up fab tokens\" (#27994)"},{"Id":"1961034047","IsPullRequest":true,"CreatedAt":"2023-10-25T10:14:43","Actor":"crisbeto","Number":"27998","RawContent":null,"Title":"docs: release notes for the v16.2.10 release","State":"closed","Body":"Cherry-picks the changelog from the \"16.2.x\" branch to the next branch (main).","Url":"https://github.com/angular/components/pull/27998","RelatedDescription":"Closed or merged PR \"docs: release notes for the v16.2.10 release\" (#27998)"},{"Id":"1961030893","IsPullRequest":true,"CreatedAt":"2023-10-25T10:10:43","Actor":"crisbeto","Number":"27997","RawContent":null,"Title":"Bump version to \"v16.2.10\" with changelog.","State":"closed","Body":"","Url":"https://github.com/angular/components/pull/27997","RelatedDescription":"Closed or merged PR \"Bump version to \"v16.2.10\" with changelog.\" (#27997)"},{"Id":"1960993281","IsPullRequest":true,"CreatedAt":"2023-10-25T09:51:08","Actor":"crisbeto","Number":"27996","RawContent":null,"Title":"docs: release notes for the v17.0.0-rc.1 release","State":"closed","Body":"Cherry-picks the changelog from the \"17.0.x\" branch to the next branch (main).","Url":"https://github.com/angular/components/pull/27996","RelatedDescription":"Closed or merged PR \"docs: release notes for the v17.0.0-rc.1 release\" (#27996)"},{"Id":"1960987995","IsPullRequest":true,"CreatedAt":"2023-10-25T09:48:54","Actor":"crisbeto","Number":"27995","RawContent":null,"Title":"Bump version to \"v17.0.0-rc.1\" with changelog.","State":"closed","Body":"","Url":"https://github.com/angular/components/pull/27995","RelatedDescription":"Closed or merged PR \"Bump version to \"v17.0.0-rc.1\" with changelog.\" (#27995)"},{"Id":"1960080409","IsPullRequest":false,"CreatedAt":"2023-10-24T21:10:01","Actor":"zarend","Number":"27993","RawContent":null,"Title":"bug(material/select): when linear navigating to combobox element with voiceover, screen reader focus is lost when opening popup menu","State":"open","Body":"### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nThis issue is about when navigating to the select element a specific way, screen reader focus is lost when opening the popup menu. When linear navigating to the combobox element with VoiceOver, opening the popup causes screen reader focus to stay on the trigger\n\n### Reproduction\n\nStackBlitz link: \r\nSteps to reproduce:\r\n1.  with VoiceOver enabled, open https://material.angular.io/components/select/overview\r\n2. Navigate to \"Basic Select\" demo\r\n3. Tab to \"Favorite Food\"\r\n4. (AT announces that it's the favorite food popup combobox)\r\n5. CTRL + OPTION + SPACE + RIGHT\r\n6. CTRL + OPTION + SPACE + LEFT\r\n7. (AT gives same or very similar announcement to step 4)\r\n8. \"Click\" or press space or CTRL + OPTION + SPACE to open menu\r\n\r\n\r\nIf unable to reproduce, try navigating using different methods with voiceover. Try navigating from before the popup to the popup and also try navigating pass the popup then back to it.\n\n### Expected Behavior\n\nPopup menu opens and focus is on the popup menu\n\n### Actual Behavior\n\nPopup menu visual opens but screen reader focus stays on the trigger. No communication made to screen reader.\r\n\r\nThis is confusing for Voice Over users. Expecting information to be communicated with two or more senses. Expecting focus to be handled correctly.\n\n### Environment\n\nN/A","Url":"https://github.com/angular/components/issues/27993","RelatedDescription":"Open issue \"bug(material/select): when linear navigating to combobox element with voiceover, screen reader focus is lost when opening popup menu\" (#27993)"},{"Id":"1959686349","IsPullRequest":true,"CreatedAt":"2023-10-24T17:40:52","Actor":"josephperrott","Number":"27991","RawContent":null,"Title":"ci: provide environment variables to the right step","State":"closed","Body":"Include the env variables for the step for deploying docs","Url":"https://github.com/angular/components/pull/27991","RelatedDescription":"Closed or merged PR \"ci: provide environment variables to the right step\" (#27991)"}],"ResultType":"GitHubIssue"}},"RunOn":"2023-10-30T03:30:02.4857699Z","RunDurationInMilliseconds":1590}